
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a7 fe 00 00       	call   c000fec7 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 88 6a 02 c0       	mov    eax,0xc0026a88
c0000025:	3d 88 6a 02 c0       	cmp    eax,0xc0026a88
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 88 6a 02 c0       	push   0xc0026a88
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 88 6a 02 c0       	mov    eax,0xc0026a88
c0000051:	2d 88 6a 02 c0       	sub    eax,0xc0026a88
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 88 6a 02 c0       	push   0xc0026a88
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 50 25 02 c0       	mov    ebx,0xc0022550
c0000097:	81 eb 4c 25 02 c0    	sub    ebx,0xc002254c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 4c 25 02 c0       	mov    esi,0xc002254c
c00000a6:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 88 6a 02 c0       	push   0xc0026a88
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 80 02 c0       	push   0xc00280c8
c0000108:	68 88 6a 02 c0       	push   0xc0026a88
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 23 64 01 00       	call   c00166d0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 68 45 01 00       	call   c001482d <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 01 64 01 00       	call   c00166d0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 52 69 01 00       	call   c0016c40 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 99 6e 01 00       	call   c0017190 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 e0 02 c0 	lgdtd  ds:0xc002e0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 6a f0 00 00       	jmp    c000f3e9 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 80 02 c0       	mov    ds:0xc00280e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 60 25 02 c0 02 	test   BYTE PTR [edx-0x3ffddaa0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 60 25 02 c0 01 	test   BYTE PTR [edx-0x3ffddaa0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 60 25 02 c0 08 	test   BYTE PTR [edx-0x3ffddaa0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 60 25 02 c0 04 	test   BYTE PTR [ecx-0x3ffddaa0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 60 25 02 c0 01 	test   BYTE PTR [edx-0x3ffddaa0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 81 02 c0    	mov    ecx,DWORD PTR ds:0xc002813c
c0000df7:	c7 42 0c 34 81 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 81 02 c0 02 	test   BYTE PTR ds:0xc0028100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 84 02 c0    	dec    DWORD PTR ds:0xc0028450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 84 02 c0    	sub    DWORD PTR ds:0xc0028464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 b5 ed 00 00       	call   c000fc15 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 c2 ec 00 00       	call   c000fbb7 <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 a1 eb 00 00       	call   c000fb81 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 9c eb 00 00       	call   c000fbb7 <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 48 ea 00 00       	call   c000fb81 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 2e ea 00 00       	call   c000fb81 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 04 ea 00 00       	call   c000fb81 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 81 02 c0    	mov    edi,DWORD PTR ds:0xc0028100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 81 02 c0       	mov    eax,0xc0028100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 81 02 c0 	lea    edx,[eax*8-0x3ffd7ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028140
c00012e5:	81 fb 34 81 02 c0    	cmp    ebx,0xc0028134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 81 02 c0       	cmp    eax,0xc0028134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 81 02 c0    	cmp    DWORD PTR ds:0xc0028130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 81 02 c0       	mov    ds:0xc002813c,eax
c0001321:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001326:	a3 30 81 02 c0       	mov    ds:0xc0028130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c0001334:	c7 40 0c 34 81 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 80 02 c0 	lea    ebp,[edx*4-0x3ffd7f08]
c0001385:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 81 02 c0 	lea    ecx,[edx*4-0x3ffd7f00]
c00013a0:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 84 02 c0 	or     DWORD PTR [edi*4-0x3ffd7bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 81 02 c0 	lea    eax,[eax*8-0x3ffd7ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,ecx
c000145a:	89 0d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,ecx
c0001460:	c7 41 08 34 81 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028134
c0001467:	c7 41 0c 34 81 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 81 02 c0 	lea    edx,[ecx*8-0x3ffd7ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 81 02 c0 	lea    edx,[eax*4-0x3ffd7ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 84 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edi
c000152d:	89 3d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edi
c0001533:	c7 47 08 34 81 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028134
c000153a:	c7 47 0c 34 81 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 81 02 c0    	mov    DWORD PTR ds:0xc0028130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 81 02 c0       	mov    edx,0xc0028100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 84 02 c0    	push   DWORD PTR ds:0xc002845c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 84 02 c0       	mov    eax,ds:0xc002845c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 81 02 c0 00 	cmp    DWORD PTR ds:0xc002812c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 81 02 c0       	mov    eax,0xc0028134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 84 02 c0       	cmp    eax,0xc002842c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 84 02 c0       	mov    eax,ds:0xc0028468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 64 26 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd99c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 84 02 c0    	mov    DWORD PTR ds:0xc0028444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 84 02 c0    	mov    DWORD PTR ds:0xc0028448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 31 9e 01 00       	jmp    c001bdbc <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 5b 9e 01 00       	jmp    c001bdfc <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 7c 9e 01 00       	jmp    c001be3c <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 c0 27 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd840]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 c0 27 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd840]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 38 56 02 c0       	mov    edx,0xc0025638
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 7c 26 02 c0       	mov    edx,0xc002267c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 84 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 84 02 c0    	mov    ax,ds:0xc0028480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 84 02 c0    	mov    ds:0xc0028480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 82 26 02 c0       	mov    eax,0xc0022682
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 40 27 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd8c0]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 8b 26 02 c0       	mov    eax,0xc002268b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 c0 27 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd840]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 10 27 02 c0       	mov    eax,0xc0022710
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 00 27 02 c0       	mov    ebx,0xc0022700
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 e0 26 02 c0       	mov    eax,0xc00226e0
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 f0 26 02 c0       	mov    eax,0xc00226f0
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 92 26 02 c0       	mov    edx,0xc0022692
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 9e 26 02 c0       	mov    edx,0xc002269e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba b2 26 02 c0       	mov    edx,0xc00226b2
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 80 9e 00 00       	call   c000fc97 <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 78 9e 00 00       	call   c000fca7 <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c e0 2a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022ae0
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 e0 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022ae0
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 e0 28 02 c0       	mov    eax,0xc00228e0
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 20 28 02 c0       	mov    eax,0xc0022820
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 e0 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd820]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 e0 2b 02 c0       	push   0xc0022be0
c0006303:	e8 50 64 01 00       	call   c001c758 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 ee 2b 02 c0       	push   0xc0022bee
c000633b:	e8 18 64 01 00       	call   c001c758 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 85 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd7a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 81 63 01 00       	call   c001c6fc <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 80 02 c0       	mov    eax,0xc0028080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 80 02 c0       	mov    eax,0xc0028020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 8e 02 c0    	mov    ebp,DWORD PTR ds:0xc0028eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 fd 2b 02 c0       	push   0xc0022bfd
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 8e 02 c0       	mov    ecx,0xc0028e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 85 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd7ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd7ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7abc],esi
c0006746:	89 87 40 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ac0],eax
c000674c:	c7 87 48 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7a30],0x0
c0006768:	89 87 4c 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 85 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd7a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c00067e1:	8b 8d 4c 85 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd7ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 85 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd7ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 85 02 c0    	add    DWORD PTR [ebp-0x3ffd7ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 85 02 c0    	lea    ecx,[ebp-0x3ffd7ac0]
c00068d9:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 85 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd7ab4]
c0006917:	05 40 85 02 c0       	add    eax,0xc0028540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 85 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd7ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 85 02 c0    	lea    edi,[eax-0x3ffd7ac0]
c00069d6:	83 b8 40 85 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd7ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 00 2c 02 c0       	push   0xc0022c00
c00069fa:	e8 59 5d 01 00       	call   c001c758 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 6d 5d 01 00       	call   c001c774 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 05 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c05
c0006a14:	e8 3f 5d 01 00       	call   c001c758 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7ac0]
c0006a20:	e8 4f 5d 01 00       	call   c001c774 <iso_kprintfd>
c0006a25:	c7 04 24 0b 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c0b
c0006a2c:	e8 27 5d 01 00       	call   c001c758 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7abc]
c0006a38:	e8 37 5d 01 00       	call   c001c774 <iso_kprintfd>
c0006a3d:	c7 04 24 11 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c11
c0006a44:	e8 0f 5d 01 00       	call   c001c758 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7a30]
c0006a50:	e8 1f 5d 01 00       	call   c001c774 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 85 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd7ab8]
c0006ab6:	81 c2 40 85 02 c0    	add    edx,0xc0028540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 85 02 c0    	lea    ebp,[eax-0x3ffd7aa8]
c0006b12:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 85 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd7aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 fd 2b 02 c0       	push   0xc0022bfd
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 85 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd7aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7ab0],eax
c0006bee:	89 93 54 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7aac],edx
c0006bf4:	81 c3 40 85 02 c0    	add    ebx,0xc0028540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 85 02 c0       	add    eax,0xc0028550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 1a 2c 02 c0       	push   0xc0022c1a
c0006c19:	e8 3a 5b 01 00       	call   c001c758 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 80 02 c0       	mov    ds:0xc0028060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb4,0x0
c0006c4e:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 25 2c 02 c0       	push   0xc0022c25
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 8e 02 c0       	mov    ds:0xc0028eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 2c 2c 02 c0       	push   0xc0022c2c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 80 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd7f80]
c0006cec:	bf 80 8e 02 c0       	mov    edi,0xc0028e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 8e 02 c0       	mov    eax,0xc0028e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 8e 02 c0       	mov    ds:0xc0028ea8,eax
c0006d0f:	b8 8a 8e 02 c0       	mov    eax,0xc0028e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 33 2c 02 c0       	push   0xc0022c33
c0006d30:	e8 23 5a 01 00       	call   c001c758 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 3e 2c 02 c0       	push   0xc0022c3e
c0006d4b:	e8 08 5a 01 00       	call   c001c758 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 85 02 c0       	push   0xc0028540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0028540,0xffffffff
c0006d75:	e8 1d 8f 00 00       	call   c000fc97 <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 8e 02 c0       	mov    ds:0xc0028eb0,eax
c0006d86:	e8 0c 8f 00 00       	call   c000fc97 <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 f7 8e 00 00       	call   c000fc97 <malloc>
c0006da0:	89 04 9d 80 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 de 8e 00 00       	call   c000fc97 <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7f80]
c0006de6:	e8 bc 8e 00 00       	call   c000fca7 <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 ae 8e 00 00       	call   c000fca7 <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 8e 02 c0       	mov    eax,ds:0xc0028eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 94 8e 00 00       	call   c000fca7 <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 7f 8e 00 00       	call   c000fca7 <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028520,0x0
c0006e35:	c7 05 b0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 50 2c 02 c0       	mov    esi,0xc0022c50
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 4f 2c 02 c0       	mov    al,ds:0xc0022c4f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 60 2c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd3a0]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 b0 2d 02 c0       	push   0xc0022db0
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 c4 2d 02 c0       	push   0xc0022dc4
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 ce 2d 02 c0       	push   0xc0022dce
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 d8 2d 02 c0       	push   0xc0022dd8
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 1c 2f 02 c0       	push   0xc0022f1c
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 e2 2d 02 c0       	push   0xc0022de2
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 3c 2f 02 c0       	push   0xc0022f3c
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 f7 2d 02 c0       	push   0xc0022df7
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 11 2e 02 c0       	push   0xc0022e11
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 40 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9fc0]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 64 2f 02 c0       	push   0xc0022f64
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 1c 2f 02 c0       	push   0xc0022f1c
c00071d4:	e8 05 8e 00 00       	call   c000ffde <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 ac 2f 02 c0       	push   0xc0022fac
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 ac 2f 02 c0       	push   0xc0022fac
c0007203:	e8 d6 8d 00 00       	call   c000ffde <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 1c 2e 02 c0       	push   0xc0022e1c
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 1c 2e 02 c0       	push   0xc0022e1c
c000722f:	e8 aa 8d 00 00       	call   c000ffde <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 39 2e 02 c0       	push   0xc0022e39
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 39 2e 02 c0       	push   0xc0022e39
c000725b:	e8 7e 8d 00 00       	call   c000ffde <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 cc 2f 02 c0       	push   0xc0022fcc
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 cc 2f 02 c0       	push   0xc0022fcc
c0007287:	e8 52 8d 00 00       	call   c000ffde <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 f0 2f 02 c0       	push   0xc0022ff0
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 f0 2f 02 c0       	push   0xc0022ff0
c00072b3:	e8 26 8d 00 00       	call   c000ffde <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 55 2e 02 c0       	push   0xc0022e55
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 55 2e 02 c0       	push   0xc0022e55
c00072df:	e8 fa 8c 00 00       	call   c000ffde <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 71 2e 02 c0       	push   0xc0022e71
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 71 2e 02 c0       	push   0xc0022e71
c000730b:	e8 ce 8c 00 00       	call   c000ffde <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 10 30 02 c0       	push   0xc0023010
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 10 30 02 c0       	push   0xc0023010
c0007337:	e8 a2 8c 00 00       	call   c000ffde <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 34 30 02 c0       	push   0xc0023034
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 34 30 02 c0       	push   0xc0023034
c0007363:	e8 76 8c 00 00       	call   c000ffde <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 93 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd6d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 93 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd6d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 93 02 c0    	mov    BYTE PTR [ebx-0x3ffd6d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 cd 88 00 00       	call   c000fc97 <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00073d5:	68 53 30 02 c0       	push   0xc0023053
c00073da:	50                   	push   eax
c00073db:	e8 52 0d 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 71 30 02 c0       	push   0xc0023071
c00073ef:	e8 ea 8b 00 00       	call   c000ffde <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 4f 0d 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 8b 30 02 c0       	push   0xc002308b
c0007410:	e8 c9 8b 00 00       	call   c000ffde <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 a5 30 02 c0       	push   0xc00230a5
c0007457:	e8 82 8b 00 00       	call   c000ffde <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 8e 02 c0 	lea    edx,[esi*8-0x3ffd7120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 bf 30 02 c0       	push   0xc00230bf
c0007487:	e8 52 8b 00 00       	call   c000ffde <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 13 0d 00 00       	call   c00081ae <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 d4 6e 00 00       	call   c000e3ad <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 e0 94 00 00       	call   c00109d3 <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 b3 02 c0    	mov    ebp,DWORD PTR ds:0xc002b300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 b3 02 c0    	mov    DWORD PTR ds:0xc002b300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 d9 30 02 c0       	push   0xc00230d9
c000752c:	e8 ad 8a 00 00       	call   c000ffde <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 b3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 93 02 c0       	push   0xc0029300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 88 5b 00 00       	call   c000d199 <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 7a 86 00 00       	call   c000fc97 <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007628:	68 53 30 02 c0       	push   0xc0023053
c000762d:	50                   	push   eax
c000762e:	e8 ff 0a 00 00       	call   c0008132 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 e2 30 02 c0       	push   0xc00230e2
c0007642:	e8 97 89 00 00       	call   c000ffde <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 c1 0d 00 00       	call   c0008414 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 ec 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 ff 30 02 c0       	push   0xc00230ff
c0007673:	e8 66 89 00 00       	call   c000ffde <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 2a 0b 00 00       	call   c00081ae <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 b2 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 1c 31 02 c0       	push   0xc002311c
c00076ad:	e8 2c 89 00 00       	call   c000ffde <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 b3 02 c0    	inc    DWORD PTR ds:0xc002b300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 90 0a 00 00       	call   c00081ae <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd7120]
c0007790:	8b 14 dd e4 8e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd711c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 eb 84 00 00       	call   c000fc97 <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00077b7:	68 53 30 02 c0       	push   0xc0023053
c00077bc:	50                   	push   eax
c00077bd:	e8 70 09 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 37 31 02 c0       	push   0xc0023137
c00077d1:	e8 08 88 00 00       	call   c000ffde <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 30 0c 00 00       	call   c0008414 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 5b 09 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 52 31 02 c0       	push   0xc0023152
c0007804:	e8 d5 87 00 00       	call   c000ffde <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 45 09 00 00       	call   c00081ae <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 27 09 00 00       	call   c00081ae <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 c4 83 00 00       	call   c000fc97 <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 4d 08 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 56 08 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 bd 0a 00 00       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 97 07 00 00       	call   c00081ae <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 7e 07 00 00       	call   c00081ae <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 3a 82 00 00       	call   c000fc97 <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 c5 06 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be 6d 31 02 c0       	mov    esi,0xc002316d
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 5a 06 00 00       	call   c00081ae <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 42 06 00 00       	call   c00081ae <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba 44 32 02 c0       	mov    edx,0xc0023244
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 5f b5 00 00       	call   c001324e <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 04 56 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba 60 32 02 c0       	mov    edx,0xc0023260
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 11 b5 00 00       	call   c001324e <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 b6 55 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba d8 31 02 c0       	mov    edx,0xc00231d8
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 b3 02 c0       	mov    ds:0xc002b304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba d8 31 02 c0       	mov    edx,0xc00231d8
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 60 55 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 9d 7e 00 00       	call   c000fc97 <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 56 41 01 00       	call   c001bf58 <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 89 7e 00 00       	call   c000fc97 <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 6e 50 01 00       	call   c001ce84 <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 f5 4e 02 c0       	push   0xc0024ef5
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 76 31 02 c0       	push   0xc0023176
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 91 31 02 c0       	push   0xc0023191
c000801f:	e8 ba 7f 00 00       	call   c000ffde <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 1a b0 00 00       	call   c0013068 <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba 44 32 02 c0       	mov    edx,0xc0023244
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080a4:	83 c2 0d             	add    edx,0xd
c00080a7:	83 ec 04             	sub    esp,0x4
c00080aa:	50                   	push   eax
c00080ab:	52                   	push   edx
c00080ac:	68 b7 31 02 c0       	push   0xc00231b7
c00080b1:	e8 ae ee ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00080b6:	83 c4 10             	add    esp,0x10
c00080b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080c0:	83 e8 41             	sub    eax,0x41
c00080c3:	88 c2                	mov    dl,al
c00080c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080e1:	0f b6 c0             	movzx  eax,al
c00080e4:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00080eb:	85 c0                	test   eax,eax
c00080ed:	74 3e                	je     c000812d <File::File(char const*, Process*, bool)+0xf9>
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f9:	0f b6 c0             	movzx  eax,al
c00080fc:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008103:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008109:	85 c0                	test   eax,eax
c000810b:	75 20                	jne    c000812d <File::File(char const*, Process*, bool)+0xf9>
c000810d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008111:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008117:	0f b6 c0             	movzx  eax,al
c000811a:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008121:	83 ec 0c             	sub    esp,0xc
c0008124:	50                   	push   eax
c0008125:	e8 64 28 00 00       	call   c000a98e <LogicalDisk::mount()>
c000812a:	83 c4 10             	add    esp,0x10
c000812d:	90                   	nop
c000812e:	83 c4 1c             	add    esp,0x1c
c0008131:	c3                   	ret    

c0008132 <File::File(char const*, Process*)>:
c0008132:	83 ec 0c             	sub    esp,0xc
c0008135:	6a 01                	push   0x1
c0008137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008143:	e8 ec fe ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	90                   	nop
c000814c:	83 c4 0c             	add    esp,0xc
c000814f:	c3                   	ret    

c0008150 <File::open(FileOpenMode)>:
c0008150:	53                   	push   ebx
c0008151:	b8 0b 00 00 00       	mov    eax,0xb
c0008156:	83 ec 08             	sub    esp,0x8
c0008159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000815d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008164:	83 fa 19             	cmp    edx,0x19
c0008167:	77 40                	ja     c00081a9 <File::open(FileOpenMode)+0x59>
c0008169:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008170:	85 d2                	test   edx,edx
c0008172:	74 35                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c0008174:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000817a:	85 d2                	test   edx,edx
c000817c:	74 2b                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c000817e:	b8 06 00 00 00       	mov    eax,0x6
c0008183:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008187:	75 20                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c0008189:	8b 02                	mov    eax,DWORD PTR [edx]
c000818b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008195:	51                   	push   ecx
c0008196:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008199:	51                   	push   ecx
c000819a:	52                   	push   edx
c000819b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	85 c0                	test   eax,eax
c00081a3:	75 04                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c00081a5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a9:	83 c4 08             	add    esp,0x8
c00081ac:	5b                   	pop    ebx
c00081ad:	c3                   	ret    

c00081ae <File::close()>:
c00081ae:	53                   	push   ebx
c00081af:	b8 0b 00 00 00       	mov    eax,0xb
c00081b4:	83 ec 08             	sub    esp,0x8
c00081b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081c2:	83 f9 19             	cmp    ecx,0x19
c00081c5:	77 41                	ja     c0008208 <File::close()+0x5a>
c00081c7:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c00081ce:	85 db                	test   ebx,ebx
c00081d0:	74 36                	je     c0008208 <File::close()+0x5a>
c00081d2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d9:	74 2d                	je     c0008208 <File::close()+0x5a>
c00081db:	b8 05 00 00 00       	mov    eax,0x5
c00081e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081e4:	74 22                	je     c0008208 <File::close()+0x5a>
c00081e6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ea:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c00081f1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f7:	53                   	push   ebx
c00081f8:	53                   	push   ebx
c00081f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081fb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008201:	50                   	push   eax
c0008202:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	83 c4 08             	add    esp,0x8
c000820b:	5b                   	pop    ebx
c000820c:	c3                   	ret    
c000820d:	90                   	nop

c000820e <File::seek(unsigned long long)>:
c000820e:	56                   	push   esi
c000820f:	53                   	push   ebx
c0008210:	b8 0b 00 00 00       	mov    eax,0xb
c0008215:	51                   	push   ecx
c0008216:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000821a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000821e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008225:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008229:	83 fa 19             	cmp    edx,0x19
c000822c:	77 31                	ja     c000825f <File::seek(unsigned long long)+0x51>
c000822e:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008235:	85 d2                	test   edx,edx
c0008237:	74 26                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008239:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000823f:	85 d2                	test   edx,edx
c0008241:	74 1c                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008243:	b8 05 00 00 00       	mov    eax,0x5
c0008248:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000824c:	74 11                	je     c000825f <File::seek(unsigned long long)+0x51>
c000824e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008250:	53                   	push   ebx
c0008251:	51                   	push   ecx
c0008252:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008258:	52                   	push   edx
c0008259:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000825c:	83 c4 10             	add    esp,0x10
c000825f:	5a                   	pop    edx
c0008260:	5b                   	pop    ebx
c0008261:	5e                   	pop    esi
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::truncate(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	53                   	push   ebx
c0008266:	b8 0b 00 00 00       	mov    eax,0xb
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008299:	b8 05 00 00 00       	mov    eax,0x5
c000829e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a2:	74 11                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::tell(unsigned long long*)>:
c00082ba:	83 ec 0c             	sub    esp,0xc
c00082bd:	b8 0b 00 00 00       	mov    eax,0xb
c00082c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082cd:	83 fa 19             	cmp    edx,0x19
c00082d0:	77 34                	ja     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082d2:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00082d9:	85 d2                	test   edx,edx
c00082db:	74 29                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 1f                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082e7:	b8 05 00 00 00       	mov    eax,0x5
c00082ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082f0:	74 14                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082f2:	50                   	push   eax
c00082f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082ff:	52                   	push   edx
c0008300:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008303:	83 c4 10             	add    esp,0x10
c0008306:	83 c4 0c             	add    esp,0xc
c0008309:	c3                   	ret    

c000830a <File::rewind()>:
c000830a:	83 ec 10             	sub    esp,0x10
c000830d:	6a 00                	push   0x0
c000830f:	6a 00                	push   0x0
c0008311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008315:	e8 f4 fe ff ff       	call   c000820e <File::seek(unsigned long long)>
c000831a:	83 c4 1c             	add    esp,0x1c
c000831d:	c3                   	ret    

c000831e <File::unlink()>:
c000831e:	83 ec 0c             	sub    esp,0xc
c0008321:	b8 0b 00 00 00       	mov    eax,0xb
c0008326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000832a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008331:	83 f9 19             	cmp    ecx,0x19
c0008334:	77 2f                	ja     c0008365 <File::unlink()+0x47>
c0008336:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000833d:	85 c9                	test   ecx,ecx
c000833f:	74 24                	je     c0008365 <File::unlink()+0x47>
c0008341:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008347:	85 c9                	test   ecx,ecx
c0008349:	74 1a                	je     c0008365 <File::unlink()+0x47>
c000834b:	b8 06 00 00 00       	mov    eax,0x6
c0008350:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008354:	75 0f                	jne    c0008365 <File::unlink()+0x47>
c0008356:	83 c2 0d             	add    edx,0xd
c0008359:	50                   	push   eax
c000835a:	50                   	push   eax
c000835b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000835d:	52                   	push   edx
c000835e:	51                   	push   ecx
c000835f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008362:	83 c4 10             	add    esp,0x10
c0008365:	83 c4 0c             	add    esp,0xc
c0008368:	c3                   	ret    
c0008369:	90                   	nop

c000836a <File::rename(char const*)>:
c000836a:	83 ec 0c             	sub    esp,0xc
c000836d:	b8 0b 00 00 00       	mov    eax,0xb
c0008372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008376:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000837d:	83 f9 19             	cmp    ecx,0x19
c0008380:	77 32                	ja     c00083b4 <File::rename(char const*)+0x4a>
c0008382:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008389:	85 c9                	test   ecx,ecx
c000838b:	74 27                	je     c00083b4 <File::rename(char const*)+0x4a>
c000838d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 1d                	je     c00083b4 <File::rename(char const*)+0x4a>
c0008397:	b8 06 00 00 00       	mov    eax,0x6
c000839c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a0:	75 12                	jne    c00083b4 <File::rename(char const*)+0x4a>
c00083a2:	83 c2 0d             	add    edx,0xd
c00083a5:	50                   	push   eax
c00083a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083ac:	52                   	push   edx
c00083ad:	51                   	push   ecx
c00083ae:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083b1:	83 c4 10             	add    esp,0x10
c00083b4:	83 c4 0c             	add    esp,0xc
c00083b7:	c3                   	ret    

c00083b8 <File::chfatattr(unsigned char, unsigned char)>:
c00083b8:	57                   	push   edi
c00083b9:	b8 0b 00 00 00       	mov    eax,0xb
c00083be:	56                   	push   esi
c00083bf:	53                   	push   ebx
c00083c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 37                	ja     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 2c                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 22                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083ed:	b8 06 00 00 00       	mov    eax,0x6
c00083f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f6:	75 17                	jne    c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083fa:	89 f0                	mov    eax,esi
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	0f b6 f0             	movzx  esi,al
c0008402:	0f b6 db             	movzx  ebx,bl
c0008405:	56                   	push   esi
c0008406:	53                   	push   ebx
c0008407:	52                   	push   edx
c0008408:	51                   	push   ecx
c0008409:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000840c:	83 c4 10             	add    esp,0x10
c000840f:	5b                   	pop    ebx
c0008410:	5e                   	pop    esi
c0008411:	5f                   	pop    edi
c0008412:	c3                   	ret    
c0008413:	90                   	nop

c0008414 <File::exists()>:
c0008414:	83 ec 0c             	sub    esp,0xc
c0008417:	31 c0                	xor    eax,eax
c0008419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008424:	83 f9 19             	cmp    ecx,0x19
c0008427:	77 24                	ja     c000844d <File::exists()+0x39>
c0008429:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008430:	85 c9                	test   ecx,ecx
c0008432:	74 19                	je     c000844d <File::exists()+0x39>
c0008434:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843a:	85 c9                	test   ecx,ecx
c000843c:	74 0f                	je     c000844d <File::exists()+0x39>
c000843e:	83 c2 0d             	add    edx,0xd
c0008441:	50                   	push   eax
c0008442:	50                   	push   eax
c0008443:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008445:	52                   	push   edx
c0008446:	51                   	push   ecx
c0008447:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000844a:	83 c4 10             	add    esp,0x10
c000844d:	83 c4 0c             	add    esp,0xc
c0008450:	c3                   	ret    
c0008451:	90                   	nop

c0008452 <File::stat(unsigned long long*, bool*)>:
c0008452:	56                   	push   esi
c0008453:	53                   	push   ebx
c0008454:	50                   	push   eax
c0008455:	b8 0b 00 00 00       	mov    eax,0xb
c000845a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000845e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008462:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008469:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000846d:	83 f9 19             	cmp    ecx,0x19
c0008470:	77 3d                	ja     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008472:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008479:	85 c9                	test   ecx,ecx
c000847b:	74 32                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c000847d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008483:	85 c9                	test   ecx,ecx
c0008485:	74 28                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008487:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008489:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000848d:	74 13                	je     c00084a2 <File::stat(unsigned long long*, bool*)+0x50>
c000848f:	83 ec 04             	sub    esp,0x4
c0008492:	56                   	push   esi
c0008493:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008499:	51                   	push   ecx
c000849a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000849d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084a0:	eb 0a                	jmp    c00084ac <File::stat(unsigned long long*, bool*)+0x5a>
c00084a2:	53                   	push   ebx
c00084a3:	83 c2 0d             	add    edx,0xd
c00084a6:	56                   	push   esi
c00084a7:	52                   	push   edx
c00084a8:	51                   	push   ecx
c00084a9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084ac:	83 c4 10             	add    esp,0x10
c00084af:	5a                   	pop    edx
c00084b0:	5b                   	pop    ebx
c00084b1:	5e                   	pop    esi
c00084b2:	c3                   	ret    

c00084b3 <Fs::setcwd(Process*, char*)>:
c00084b3:	55                   	push   ebp
c00084b4:	57                   	push   edi
c00084b5:	56                   	push   esi
c00084b6:	53                   	push   ebx
c00084b7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084bd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084c4:	6a 00                	push   0x0
c00084c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084cc:	57                   	push   edi
c00084cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d8:	56                   	push   esi
c00084d9:	e8 3c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084de:	89 34 24             	mov    DWORD PTR [esp],esi
c00084e1:	e8 8a 80 ff ff       	call   c0000570 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 02             	cmp    eax,0x2
c00084ec:	77 15                	ja     c0008503 <Fs::setcwd(Process*, char*)+0x50>
c00084ee:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084f3:	83 eb 41             	sub    ebx,0x41
c00084f6:	8b 04 9d e0 ba 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4520]
c00084fd:	85 c0                	test   eax,eax
c00084ff:	75 1c                	jne    c000851d <Fs::setcwd(Process*, char*)+0x6a>
c0008501:	eb 2f                	jmp    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	56                   	push   esi
c0008507:	e8 64 80 ff ff       	call   c0000570 <strlen>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	83 f8 03             	cmp    eax,0x3
c0008512:	75 57                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c0008514:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008519:	75 50                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c000851b:	eb d1                	jmp    c00084ee <Fs::setcwd(Process*, char*)+0x3b>
c000851d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008524:	75 0c                	jne    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008526:	83 ec 0c             	sub    esp,0xc
c0008529:	50                   	push   eax
c000852a:	e8 5f 24 00 00       	call   c000a98e <LogicalDisk::mount()>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	b8 03 00 00 00       	mov    eax,0x3
c0008537:	83 fb 19             	cmp    ebx,0x19
c000853a:	0f 87 c6 00 00 00    	ja     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008540:	8b 14 9d e0 ba 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4520]
c0008547:	b8 05 00 00 00       	mov    eax,0x5
c000854c:	85 d2                	test   edx,edx
c000854e:	0f 84 b2 00 00 00    	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008554:	b8 06 00 00 00       	mov    eax,0x6
c0008559:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008560:	0f 85 92 00 00 00    	jne    c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c0008566:	e9 9b 00 00 00       	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c000856b:	83 ec 0c             	sub    esp,0xc
c000856e:	68 14 01 00 00       	push   0x114
c0008573:	e8 1f 77 00 00       	call   c000fc97 <malloc>
c0008578:	83 c4 0c             	add    esp,0xc
c000857b:	89 c3                	mov    ebx,eax
c000857d:	55                   	push   ebp
c000857e:	56                   	push   esi
c000857f:	50                   	push   eax
c0008580:	e8 ad fb ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008585:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000858a:	83 c4 0c             	add    esp,0xc
c000858d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008591:	50                   	push   eax
c0008592:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008596:	50                   	push   eax
c0008597:	53                   	push   ebx
c0008598:	e8 b5 fe ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000859d:	83 c4 10             	add    esp,0x10
c00085a0:	83 f8 02             	cmp    eax,0x2
c00085a3:	74 27                	je     c00085cc <Fs::setcwd(Process*, char*)+0x119>
c00085a5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085aa:	75 1c                	jne    c00085c8 <Fs::setcwd(Process*, char*)+0x115>
c00085ac:	b8 02 00 00 00       	mov    eax,0x2
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 51                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 02 00 00 00       	mov    eax,0x2
c00085c6:	eb 3e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 c0                	test   eax,eax
c00085ca:	74 1c                	je     c00085e8 <Fs::setcwd(Process*, char*)+0x135>
c00085cc:	b8 01 00 00 00       	mov    eax,0x1
c00085d1:	85 db                	test   ebx,ebx
c00085d3:	74 31                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085d5:	83 ec 0c             	sub    esp,0xc
c00085d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085da:	53                   	push   ebx
c00085db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085de:	83 c4 10             	add    esp,0x10
c00085e1:	b8 01 00 00 00       	mov    eax,0x1
c00085e6:	eb 1e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085e8:	85 db                	test   ebx,ebx
c00085ea:	74 0c                	je     c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085f1:	53                   	push   ebx
c00085f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	50                   	push   eax
c00085f9:	50                   	push   eax
c00085fa:	56                   	push   esi
c00085fb:	57                   	push   edi
c00085fc:	e8 3f 80 ff ff       	call   c0000640 <strcpy>
c0008601:	83 c4 10             	add    esp,0x10
c0008604:	31 c0                	xor    eax,eax
c0008606:	81 c4 1c 02 00 00    	add    esp,0x21c
c000860c:	5b                   	pop    ebx
c000860d:	5e                   	pop    esi
c000860e:	5f                   	pop    edi
c000860f:	5d                   	pop    ebp
c0008610:	c3                   	ret    
c0008611:	90                   	nop

c0008612 <Directory::Directory(char const*, Process*)>:
c0008612:	83 ec 0c             	sub    esp,0xc
c0008615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008619:	83 ec 08             	sub    esp,0x8
c000861c:	6a 00                	push   0x0
c000861e:	50                   	push   eax
c000861f:	e8 44 aa 00 00       	call   c0013068 <UnixFile::UnixFile(int)>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	ba 60 32 02 c0       	mov    edx,0xc0023260
c000862c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008630:	89 10                	mov    DWORD PTR [eax],edx
c0008632:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008637:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000863b:	0f 95 c0             	setne  al
c000863e:	0f b6 c0             	movzx  eax,al
c0008641:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008645:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000864b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000864f:	83 c2 0d             	add    edx,0xd
c0008652:	50                   	push   eax
c0008653:	51                   	push   ecx
c0008654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008658:	52                   	push   edx
c0008659:	e8 bc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000865e:	83 c4 10             	add    esp,0x10
c0008661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008665:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008668:	83 e8 41             	sub    eax,0x41
c000866b:	88 c2                	mov    dl,al
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008683:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008689:	0f b6 c0             	movzx  eax,al
c000868c:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008693:	85 c0                	test   eax,eax
c0008695:	74 3e                	je     c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c0008697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000869b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086a1:	0f b6 c0             	movzx  eax,al
c00086a4:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086ab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086b1:	85 c0                	test   eax,eax
c00086b3:	75 20                	jne    c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c00086b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086bf:	0f b6 c0             	movzx  eax,al
c00086c2:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086c9:	83 ec 0c             	sub    esp,0xc
c00086cc:	50                   	push   eax
c00086cd:	e8 bc 22 00 00       	call   c000a98e <LogicalDisk::mount()>
c00086d2:	83 c4 10             	add    esp,0x10
c00086d5:	90                   	nop
c00086d6:	83 c4 0c             	add    esp,0xc
c00086d9:	c3                   	ret    

c00086da <Directory::open()>:
c00086da:	53                   	push   ebx
c00086db:	b8 0b 00 00 00       	mov    eax,0xb
c00086e0:	83 ec 08             	sub    esp,0x8
c00086e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ee:	83 fa 19             	cmp    edx,0x19
c00086f1:	77 3d                	ja     c0008730 <Directory::open()+0x56>
c00086f3:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00086fa:	85 d2                	test   edx,edx
c00086fc:	74 32                	je     c0008730 <Directory::open()+0x56>
c00086fe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008704:	85 d2                	test   edx,edx
c0008706:	74 28                	je     c0008730 <Directory::open()+0x56>
c0008708:	b8 06 00 00 00       	mov    eax,0x6
c000870d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008711:	75 1d                	jne    c0008730 <Directory::open()+0x56>
c0008713:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008719:	50                   	push   eax
c000871a:	8b 02                	mov    eax,DWORD PTR [edx]
c000871c:	51                   	push   ecx
c000871d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008720:	51                   	push   ecx
c0008721:	52                   	push   edx
c0008722:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008725:	83 c4 10             	add    esp,0x10
c0008728:	85 c0                	test   eax,eax
c000872a:	75 04                	jne    c0008730 <Directory::open()+0x56>
c000872c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008730:	83 c4 08             	add    esp,0x8
c0008733:	5b                   	pop    ebx
c0008734:	c3                   	ret    
c0008735:	90                   	nop

c0008736 <Directory::close()>:
c0008736:	53                   	push   ebx
c0008737:	b8 0b 00 00 00       	mov    eax,0xb
c000873c:	83 ec 08             	sub    esp,0x8
c000873f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008743:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000874a:	83 f9 19             	cmp    ecx,0x19
c000874d:	77 41                	ja     c0008790 <Directory::close()+0x5a>
c000874f:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c0008756:	85 db                	test   ebx,ebx
c0008758:	74 36                	je     c0008790 <Directory::close()+0x5a>
c000875a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008761:	74 2d                	je     c0008790 <Directory::close()+0x5a>
c0008763:	b8 05 00 00 00       	mov    eax,0x5
c0008768:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000876c:	74 22                	je     c0008790 <Directory::close()+0x5a>
c000876e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008772:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c0008779:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000877f:	53                   	push   ebx
c0008780:	53                   	push   ebx
c0008781:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008783:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008789:	50                   	push   eax
c000878a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 08             	add    esp,0x8
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <Directory::unlink()>:
c0008796:	83 ec 0c             	sub    esp,0xc
c0008799:	b8 0b 00 00 00       	mov    eax,0xb
c000879e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a9:	83 f9 19             	cmp    ecx,0x19
c00087ac:	77 2f                	ja     c00087dd <Directory::unlink()+0x47>
c00087ae:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00087b5:	85 c9                	test   ecx,ecx
c00087b7:	74 24                	je     c00087dd <Directory::unlink()+0x47>
c00087b9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087bf:	85 c9                	test   ecx,ecx
c00087c1:	74 1a                	je     c00087dd <Directory::unlink()+0x47>
c00087c3:	b8 06 00 00 00       	mov    eax,0x6
c00087c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087cc:	75 0f                	jne    c00087dd <Directory::unlink()+0x47>
c00087ce:	83 c2 0d             	add    edx,0xd
c00087d1:	50                   	push   eax
c00087d2:	50                   	push   eax
c00087d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087d5:	52                   	push   edx
c00087d6:	51                   	push   ecx
c00087d7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	83 c4 0c             	add    esp,0xc
c00087e0:	c3                   	ret    
c00087e1:	90                   	nop

c00087e2 <Directory::rename(char const*)>:
c00087e2:	83 ec 0c             	sub    esp,0xc
c00087e5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087f5:	83 f9 19             	cmp    ecx,0x19
c00087f8:	77 32                	ja     c000882c <Directory::rename(char const*)+0x4a>
c00087fa:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008801:	85 c9                	test   ecx,ecx
c0008803:	74 27                	je     c000882c <Directory::rename(char const*)+0x4a>
c0008805:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 1d                	je     c000882c <Directory::rename(char const*)+0x4a>
c000880f:	b8 06 00 00 00       	mov    eax,0x6
c0008814:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008818:	75 12                	jne    c000882c <Directory::rename(char const*)+0x4a>
c000881a:	83 c2 0d             	add    edx,0xd
c000881d:	50                   	push   eax
c000881e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008820:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008824:	52                   	push   edx
c0008825:	51                   	push   ecx
c0008826:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008829:	83 c4 10             	add    esp,0x10
c000882c:	83 c4 0c             	add    esp,0xc
c000882f:	c3                   	ret    

c0008830 <Directory::exists()>:
c0008830:	83 ec 0c             	sub    esp,0xc
c0008833:	31 c0                	xor    eax,eax
c0008835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008839:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008840:	83 f9 19             	cmp    ecx,0x19
c0008843:	77 24                	ja     c0008869 <Directory::exists()+0x39>
c0008845:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000884c:	85 c9                	test   ecx,ecx
c000884e:	74 19                	je     c0008869 <Directory::exists()+0x39>
c0008850:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008856:	85 c9                	test   ecx,ecx
c0008858:	74 0f                	je     c0008869 <Directory::exists()+0x39>
c000885a:	83 c2 0d             	add    edx,0xd
c000885d:	50                   	push   eax
c000885e:	50                   	push   eax
c000885f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008861:	52                   	push   edx
c0008862:	51                   	push   ecx
c0008863:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008866:	83 c4 10             	add    esp,0x10
c0008869:	83 c4 0c             	add    esp,0xc
c000886c:	c3                   	ret    
c000886d:	90                   	nop

c000886e <Directory::read(dirent*)>:
c000886e:	83 ec 1c             	sub    esp,0x1c
c0008871:	b8 0b 00 00 00       	mov    eax,0xb
c0008876:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000887a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008881:	83 f9 19             	cmp    ecx,0x19
c0008884:	77 30                	ja     c00088b6 <Directory::read(dirent*)+0x48>
c0008886:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000888d:	85 c9                	test   ecx,ecx
c000888f:	74 25                	je     c00088b6 <Directory::read(dirent*)+0x48>
c0008891:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008898:	74 1c                	je     c00088b6 <Directory::read(dirent*)+0x48>
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	8b 02                	mov    eax,DWORD PTR [edx]
c000889f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088a3:	51                   	push   ecx
c00088a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a8:	6a 00                	push   0x0
c00088aa:	68 10 01 00 00       	push   0x110
c00088af:	52                   	push   edx
c00088b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088b3:	83 c4 20             	add    esp,0x20
c00088b6:	83 c4 1c             	add    esp,0x1c
c00088b9:	c3                   	ret    

c00088ba <Directory::create()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	b8 0b 00 00 00       	mov    eax,0xb
c00088c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088cd:	83 f9 19             	cmp    ecx,0x19
c00088d0:	77 2f                	ja     c0008901 <Directory::create()+0x47>
c00088d2:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088d9:	85 c9                	test   ecx,ecx
c00088db:	74 24                	je     c0008901 <Directory::create()+0x47>
c00088dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 1a                	je     c0008901 <Directory::create()+0x47>
c00088e7:	b8 06 00 00 00       	mov    eax,0x6
c00088ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088f0:	75 0f                	jne    c0008901 <Directory::create()+0x47>
c00088f2:	83 c2 0d             	add    edx,0xd
c00088f5:	50                   	push   eax
c00088f6:	50                   	push   eax
c00088f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f9:	52                   	push   edx
c00088fa:	51                   	push   ecx
c00088fb:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088fe:	83 c4 10             	add    esp,0x10
c0008901:	83 c4 0c             	add    esp,0xc
c0008904:	c3                   	ret    
c0008905:	90                   	nop

c0008906 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008906:	b8 0a 00 00 00       	mov    eax,0xa
c000890b:	c3                   	ret    

c000890c <Bus::Bus(char const*)>:
c000890c:	83 ec 0c             	sub    esp,0xc
c000890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891a:	50                   	push   eax
c000891b:	e8 3e 12 00 00       	call   c0009b5e <Device::Device(char const*)>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	ba 7c 32 02 c0       	mov    edx,0xc002327c
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000893c:	90                   	nop
c000893d:	83 c4 0c             	add    esp,0xc
c0008940:	c3                   	ret    
c0008941:	90                   	nop
c0008942:	66 90                	xchg   ax,ax

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	ba 7c 32 02 c0       	mov    edx,0xc002327c
c000894c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008950:	89 10                	mov    DWORD PTR [eax],edx
c0008952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	50                   	push   eax
c000895a:	e8 9f 0f 00 00       	call   c00098fe <Device::~Device()>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	90                   	nop
c0008963:	83 c4 0c             	add    esp,0xc
c0008966:	c3                   	ret    
c0008967:	90                   	nop

c0008968 <Bus::~Bus()>:
c0008968:	83 ec 0c             	sub    esp,0xc
c000896b:	83 ec 0c             	sub    esp,0xc
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	e8 cd ff ff ff       	call   c0008944 <Bus::~Bus()>
c0008977:	83 c4 10             	add    esp,0x10
c000897a:	83 ec 08             	sub    esp,0x8
c000897d:	68 58 01 00 00       	push   0x158
c0008982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008986:	e8 94 49 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000898b:	83 c4 10             	add    esp,0x10
c000898e:	83 c4 0c             	add    esp,0xc
c0008991:	c3                   	ret    

c0008992 <KeBeepThread(void*)>:
c0008992:	83 ec 0c             	sub    esp,0xc
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00089a0:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00089a7:	75 01                	jne    c00089aa <KeBeepThread(void*)+0x18>
c00089a9:	fb                   	sti    
c00089aa:	6b c0 0a             	imul   eax,eax,0xa
c00089ad:	52                   	push   edx
c00089ae:	52                   	push   edx
c00089af:	99                   	cdq    
c00089b0:	52                   	push   edx
c00089b1:	50                   	push   eax
c00089b2:	e8 69 e7 00 00       	call   c0017120 <milliTenthSleep(unsigned long long)>
c00089b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089be:	e8 00 18 01 00       	call   c001a1c3 <HalMakeBeep(int)>
c00089c3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089cb:	83 c4 1c             	add    esp,0x1c
c00089ce:	e9 19 e6 00 00       	jmp    c0016fec <blockTask(TaskState)>

c00089d3 <KeBeep(int, int, bool)>:
c00089d3:	56                   	push   esi
c00089d4:	53                   	push   ebx
c00089d5:	83 ec 10             	sub    esp,0x10
c00089d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e4:	e8 da 17 01 00       	call   c001a1c3 <HalMakeBeep(int)>
c00089e9:	83 c4 10             	add    esp,0x10
c00089ec:	89 f0                	mov    eax,esi
c00089ee:	84 c0                	test   al,al
c00089f0:	74 1f                	je     c0008a11 <KeBeep(int, int, bool)+0x3e>
c00089f2:	50                   	push   eax
c00089f3:	50                   	push   eax
c00089f4:	6b c3 0a             	imul   eax,ebx,0xa
c00089f7:	99                   	cdq    
c00089f8:	52                   	push   edx
c00089f9:	50                   	push   eax
c00089fa:	e8 21 e7 00 00       	call   c0017120 <milliTenthSleep(unsigned long long)>
c00089ff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a07:	83 c4 14             	add    esp,0x14
c0008a0a:	5b                   	pop    ebx
c0008a0b:	5e                   	pop    esi
c0008a0c:	e9 b2 17 01 00       	jmp    c001a1c3 <HalMakeBeep(int)>
c0008a11:	68 e6 00 00 00       	push   0xe6
c0008a16:	53                   	push   ebx
c0008a17:	68 92 89 00 c0       	push   0xc0008992
c0008a1c:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0008a22:	e8 6d e2 00 00       	call   c0016c94 <Process::createThread(void (*)(void*), void*, int)>
c0008a27:	83 c4 14             	add    esp,0x14
c0008a2a:	5b                   	pop    ebx
c0008a2b:	5e                   	pop    esi
c0008a2c:	c3                   	ret    
c0008a2d:	90                   	nop

c0008a2e <KeLoadTimezoneStrings()>:
c0008a2e:	55                   	push   ebp
c0008a2f:	89 e5                	mov    ebp,esp
c0008a31:	53                   	push   ebx
c0008a32:	83 ec 44             	sub    esp,0x44
c0008a35:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0008a3c:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a43:	83 ec 0c             	sub    esp,0xc
c0008a46:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008a49:	e8 49 72 00 00       	call   c000fc97 <malloc>
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	89 c3                	mov    ebx,eax
c0008a53:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008a58:	83 ec 04             	sub    esp,0x4
c0008a5b:	50                   	push   eax
c0008a5c:	68 a0 32 02 c0       	push   0xc00232a0
c0008a61:	53                   	push   ebx
c0008a62:	e8 cb f6 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008a67:	83 c4 10             	add    esp,0x10
c0008a6a:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008a6d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008a71:	75 10                	jne    c0008a83 <KeLoadTimezoneStrings()+0x55>
c0008a73:	83 ec 0c             	sub    esp,0xc
c0008a76:	68 bf 32 02 c0       	push   0xc00232bf
c0008a7b:	e8 5e 75 00 00       	call   c000ffde <KePanic(char const*)>
c0008a80:	83 c4 10             	add    esp,0x10
c0008a83:	83 ec 08             	sub    esp,0x8
c0008a86:	6a 01                	push   0x1
c0008a88:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008a8b:	e8 c0 f6 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0008a90:	83 c4 10             	add    esp,0x10
c0008a93:	83 ec 04             	sub    esp,0x4
c0008a96:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008a99:	50                   	push   eax
c0008a9a:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008a9d:	50                   	push   eax
c0008a9e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008aa1:	e8 ac f9 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008aac:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008aaf:	83 ec 08             	sub    esp,0x8
c0008ab2:	50                   	push   eax
c0008ab3:	68 d5 32 02 c0       	push   0xc00232d5
c0008ab8:	e8 a7 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008abd:	83 c4 10             	add    esp,0x10
c0008ac0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008ac3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ac6:	83 c0 01             	add    eax,0x1
c0008ac9:	83 ec 0c             	sub    esp,0xc
c0008acc:	50                   	push   eax
c0008acd:	e8 c5 71 00 00       	call   c000fc97 <malloc>
c0008ad2:	83 c4 10             	add    esp,0x10
c0008ad5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008ad8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008adb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ade:	83 ec 04             	sub    esp,0x4
c0008ae1:	50                   	push   eax
c0008ae2:	6a 00                	push   0x0
c0008ae4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008ae7:	e8 04 7a ff ff       	call   c00004f0 <memset>
c0008aec:	83 c4 10             	add    esp,0x10
c0008aef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008af2:	8b 00                	mov    eax,DWORD PTR [eax]
c0008af4:	83 c0 0c             	add    eax,0xc
c0008af7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008af9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008afc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008aff:	83 ec 0c             	sub    esp,0xc
c0008b02:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b05:	53                   	push   ebx
c0008b06:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b09:	52                   	push   edx
c0008b0a:	50                   	push   eax
c0008b0b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b0e:	ff d1                	call   ecx
c0008b10:	83 c4 20             	add    esp,0x20
c0008b13:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b16:	83 ec 08             	sub    esp,0x8
c0008b19:	50                   	push   eax
c0008b1a:	68 e5 32 02 c0       	push   0xc00232e5
c0008b1f:	e8 40 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b24:	83 c4 10             	add    esp,0x10
c0008b27:	83 ec 0c             	sub    esp,0xc
c0008b2a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b2d:	e8 7c f6 ff ff       	call   c00081ae <File::close()>
c0008b32:	83 c4 10             	add    esp,0x10
c0008b35:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b39:	74 15                	je     c0008b50 <KeLoadTimezoneStrings()+0x122>
c0008b3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b40:	83 c0 08             	add    eax,0x8
c0008b43:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b45:	83 ec 0c             	sub    esp,0xc
c0008b48:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b4b:	ff d0                	call   eax
c0008b4d:	83 c4 10             	add    esp,0x10
c0008b50:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008b57:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008b5e:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008b65:	7f 3a                	jg     c0008ba1 <KeLoadTimezoneStrings()+0x173>
c0008b67:	83 ec 0c             	sub    esp,0xc
c0008b6a:	6a 78                	push   0x78
c0008b6c:	e8 26 71 00 00       	call   c000fc97 <malloc>
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	89 c2                	mov    edx,eax
c0008b76:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b79:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0008b80:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b83:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008b8a:	83 ec 08             	sub    esp,0x8
c0008b8d:	68 ee 32 02 c0       	push   0xc00232ee
c0008b92:	50                   	push   eax
c0008b93:	e8 a8 7a ff ff       	call   c0000640 <strcpy>
c0008b98:	83 c4 10             	add    esp,0x10
c0008b9b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008b9f:	eb bd                	jmp    c0008b5e <KeLoadTimezoneStrings()+0x130>
c0008ba1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008ba8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008bab:	8d 50 01             	lea    edx,[eax+0x1]
c0008bae:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008bb1:	89 c2                	mov    edx,eax
c0008bb3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008bb6:	01 d0                	add    eax,edx
c0008bb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008bba:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008bbd:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008bc1:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bc4:	0f be c0             	movsx  eax,al
c0008bc7:	83 f8 0d             	cmp    eax,0xd
c0008bca:	0f 84 82 01 00 00    	je     c0008d52 <KeLoadTimezoneStrings()+0x324>
c0008bd0:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bd3:	0f be c0             	movsx  eax,al
c0008bd6:	83 f8 09             	cmp    eax,0x9
c0008bd9:	75 44                	jne    c0008c1f <KeLoadTimezoneStrings()+0x1f1>
c0008bdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008bde:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008be5:	83 ec 0c             	sub    esp,0xc
c0008be8:	50                   	push   eax
c0008be9:	e8 82 79 ff ff       	call   c0000570 <strlen>
c0008bee:	83 c4 10             	add    esp,0x10
c0008bf1:	83 f8 08             	cmp    eax,0x8
c0008bf4:	0f 96 c0             	setbe  al
c0008bf7:	0f b6 c0             	movzx  eax,al
c0008bfa:	85 c0                	test   eax,eax
c0008bfc:	0f 84 56 01 00 00    	je     c0008d58 <KeLoadTimezoneStrings()+0x32a>
c0008c02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c05:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c0c:	83 ec 08             	sub    esp,0x8
c0008c0f:	68 ee 32 02 c0       	push   0xc00232ee
c0008c14:	50                   	push   eax
c0008c15:	e8 26 7c ff ff       	call   c0000840 <strcat>
c0008c1a:	83 c4 10             	add    esp,0x10
c0008c1d:	eb bc                	jmp    c0008bdb <KeLoadTimezoneStrings()+0x1ad>
c0008c1f:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c22:	0f be c0             	movsx  eax,al
c0008c25:	83 f8 0a             	cmp    eax,0xa
c0008c28:	0f 85 9b 00 00 00    	jne    c0008cc9 <KeLoadTimezoneStrings()+0x29b>
c0008c2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c31:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c38:	83 ec 0c             	sub    esp,0xc
c0008c3b:	50                   	push   eax
c0008c3c:	e8 2f 79 ff ff       	call   c0000570 <strlen>
c0008c41:	83 c4 10             	add    esp,0x10
c0008c44:	83 f8 35             	cmp    eax,0x35
c0008c47:	0f 96 c0             	setbe  al
c0008c4a:	0f b6 c0             	movzx  eax,al
c0008c4d:	85 c0                	test   eax,eax
c0008c4f:	74 1d                	je     c0008c6e <KeLoadTimezoneStrings()+0x240>
c0008c51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c54:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c5b:	83 ec 08             	sub    esp,0x8
c0008c5e:	68 ee 32 02 c0       	push   0xc00232ee
c0008c63:	50                   	push   eax
c0008c64:	e8 d7 7b ff ff       	call   c0000840 <strcat>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	eb c0                	jmp    c0008c2e <KeLoadTimezoneStrings()+0x200>
c0008c6e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008c72:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c75:	89 c2                	mov    edx,eax
c0008c77:	c1 fa 1f             	sar    edx,0x1f
c0008c7a:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008c7d:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008c80:	39 c8                	cmp    eax,ecx
c0008c82:	89 d0                	mov    eax,edx
c0008c84:	19 d8                	sbb    eax,ebx
c0008c86:	0f 82 d2 00 00 00    	jb     c0008d5e <KeLoadTimezoneStrings()+0x330>
c0008c8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c8f:	a3 24 b3 02 c0       	mov    ds:0xc002b324,eax
c0008c94:	83 ec 08             	sub    esp,0x8
c0008c97:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008c9a:	68 f0 32 02 c0       	push   0xc00232f0
c0008c9f:	e8 c0 e2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008ca4:	83 c4 10             	add    esp,0x10
c0008ca7:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008cac:	83 ec 08             	sub    esp,0x8
c0008caf:	50                   	push   eax
c0008cb0:	68 05 33 02 c0       	push   0xc0023305
c0008cb5:	e8 aa e2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008cba:	83 c4 10             	add    esp,0x10
c0008cbd:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008cc4:	e9 9b 00 00 00       	jmp    c0008d64 <KeLoadTimezoneStrings()+0x336>
c0008cc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ccc:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cd3:	83 ec 0c             	sub    esp,0xc
c0008cd6:	50                   	push   eax
c0008cd7:	e8 94 78 ff ff       	call   c0000570 <strlen>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	83 f8 31             	cmp    eax,0x31
c0008ce2:	0f 96 c0             	setbe  al
c0008ce5:	0f b6 c0             	movzx  eax,al
c0008ce8:	85 c0                	test   eax,eax
c0008cea:	74 1f                	je     c0008d0b <KeLoadTimezoneStrings()+0x2dd>
c0008cec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cef:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008cfc:	52                   	push   edx
c0008cfd:	50                   	push   eax
c0008cfe:	e8 3d 7b ff ff       	call   c0000840 <strcat>
c0008d03:	83 c4 10             	add    esp,0x10
c0008d06:	e9 9d fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d0e:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d15:	83 ec 0c             	sub    esp,0xc
c0008d18:	50                   	push   eax
c0008d19:	e8 52 78 ff ff       	call   c0000570 <strlen>
c0008d1e:	83 c4 10             	add    esp,0x10
c0008d21:	83 f8 32             	cmp    eax,0x32
c0008d24:	0f 94 c0             	sete   al
c0008d27:	0f b6 c0             	movzx  eax,al
c0008d2a:	85 c0                	test   eax,eax
c0008d2c:	0f 84 76 fe ff ff    	je     c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d35:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d3c:	83 ec 08             	sub    esp,0x8
c0008d3f:	68 09 33 02 c0       	push   0xc0023309
c0008d44:	50                   	push   eax
c0008d45:	e8 f6 7a ff ff       	call   c0000840 <strcat>
c0008d4a:	83 c4 10             	add    esp,0x10
c0008d4d:	e9 56 fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d52:	90                   	nop
c0008d53:	e9 50 fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d58:	90                   	nop
c0008d59:	e9 4a fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d5e:	90                   	nop
c0008d5f:	e9 44 fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d64:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d69:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d6c:	7d 49                	jge    c0008db7 <KeLoadTimezoneStrings()+0x389>
c0008d6e:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d73:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d76:	0f 9c c0             	setl   al
c0008d79:	0f b6 d0             	movzx  edx,al
c0008d7c:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d81:	52                   	push   edx
c0008d82:	50                   	push   eax
c0008d83:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008d86:	68 0e 33 02 c0       	push   0xc002330e
c0008d8b:	e8 d4 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008d90:	83 c4 10             	add    esp,0x10
c0008d93:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008d96:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d9d:	83 ec 04             	sub    esp,0x4
c0008da0:	50                   	push   eax
c0008da1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008da4:	68 1c 33 02 c0       	push   0xc002331c
c0008da9:	e8 b6 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008db5:	eb ad                	jmp    c0008d64 <KeLoadTimezoneStrings()+0x336>
c0008db7:	90                   	nop
c0008db8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008dbb:	c9                   	leave  
c0008dbc:	c3                   	ret    

c0008dbd <KeGetTimezoneStringFromID(int)>:
c0008dbd:	55                   	push   ebp
c0008dbe:	89 e5                	mov    ebp,esp
c0008dc0:	83 ec 08             	sub    esp,0x8
c0008dc3:	83 ec 08             	sub    esp,0x8
c0008dc6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008dc9:	68 25 33 02 c0       	push   0xc0023325
c0008dce:	e8 91 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008dd3:	83 c4 10             	add    esp,0x10
c0008dd6:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0008ddb:	83 f0 01             	xor    eax,0x1
c0008dde:	0f b6 c0             	movzx  eax,al
c0008de1:	85 c0                	test   eax,eax
c0008de3:	74 15                	je     c0008dfa <KeGetTimezoneStringFromID(int)+0x3d>
c0008de5:	e8 44 fc ff ff       	call   c0008a2e <KeLoadTimezoneStrings()>
c0008dea:	83 ec 0c             	sub    esp,0xc
c0008ded:	68 43 33 02 c0       	push   0xc0023343
c0008df2:	e8 6d e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008df7:	83 c4 10             	add    esp,0x10
c0008dfa:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dff:	83 ec 04             	sub    esp,0x4
c0008e02:	50                   	push   eax
c0008e03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e06:	68 54 33 02 c0       	push   0xc0023354
c0008e0b:	e8 54 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008e10:	83 c4 10             	add    esp,0x10
c0008e13:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e18:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e1b:	7d 06                	jge    c0008e23 <KeGetTimezoneStringFromID(int)+0x66>
c0008e1d:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e21:	79 07                	jns    c0008e2a <KeGetTimezoneStringFromID(int)+0x6d>
c0008e23:	b8 00 00 00 00       	mov    eax,0x0
c0008e28:	eb 2e                	jmp    c0008e58 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e2d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e34:	83 c0 01             	add    eax,0x1
c0008e37:	83 ec 04             	sub    esp,0x4
c0008e3a:	50                   	push   eax
c0008e3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e3e:	68 67 33 02 c0       	push   0xc0023367
c0008e43:	e8 1c e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008e48:	83 c4 10             	add    esp,0x10
c0008e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e4e:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e55:	83 c0 01             	add    eax,0x1
c0008e58:	c9                   	leave  
c0008e59:	c3                   	ret    

c0008e5a <KeUpdateTimezone(char const*)>:
c0008e5a:	55                   	push   ebp
c0008e5b:	89 e5                	mov    ebp,esp
c0008e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e60:	8a 00                	mov    al,BYTE PTR [eax]
c0008e62:	0f be c0             	movsx  eax,al
c0008e65:	83 f8 2b             	cmp    eax,0x2b
c0008e68:	74 11                	je     c0008e7b <KeUpdateTimezone(char const*)+0x21>
c0008e6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e6d:	8a 00                	mov    al,BYTE PTR [eax]
c0008e6f:	0f be c0             	movsx  eax,al
c0008e72:	83 f8 2d             	cmp    eax,0x2d
c0008e75:	0f 85 be 00 00 00    	jne    c0008f39 <KeUpdateTimezone(char const*)+0xdf>
c0008e7b:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	83 c0 02             	add    eax,0x2
c0008e88:	8a 00                	mov    al,BYTE PTR [eax]
c0008e8a:	0f be c0             	movsx  eax,al
c0008e8d:	83 f8 2e             	cmp    eax,0x2e
c0008e90:	75 10                	jne    c0008ea2 <KeUpdateTimezone(char const*)+0x48>
c0008e92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e95:	83 c0 03             	add    eax,0x3
c0008e98:	8a 00                	mov    al,BYTE PTR [eax]
c0008e9a:	0f be c0             	movsx  eax,al
c0008e9d:	83 f8 35             	cmp    eax,0x35
c0008ea0:	74 20                	je     c0008ec2 <KeUpdateTimezone(char const*)+0x68>
c0008ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea5:	83 c0 03             	add    eax,0x3
c0008ea8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eaa:	0f be c0             	movsx  eax,al
c0008ead:	83 f8 2e             	cmp    eax,0x2e
c0008eb0:	75 14                	jne    c0008ec6 <KeUpdateTimezone(char const*)+0x6c>
c0008eb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb5:	83 c0 04             	add    eax,0x4
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 35             	cmp    eax,0x35
c0008ec0:	75 04                	jne    c0008ec6 <KeUpdateTimezone(char const*)+0x6c>
c0008ec2:	b0 01                	mov    al,0x1
c0008ec4:	eb 02                	jmp    c0008ec8 <KeUpdateTimezone(char const*)+0x6e>
c0008ec6:	b0 00                	mov    al,0x0
c0008ec8:	a2 61 b6 02 c0       	mov    ds:0xc002b661,al
c0008ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ed0:	83 c0 01             	add    eax,0x1
c0008ed3:	8a 00                	mov    al,BYTE PTR [eax]
c0008ed5:	0f be c0             	movsx  eax,al
c0008ed8:	83 e8 30             	sub    eax,0x30
c0008edb:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ee3:	83 c0 03             	add    eax,0x3
c0008ee6:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee8:	0f be c0             	movsx  eax,al
c0008eeb:	83 f8 2e             	cmp    eax,0x2e
c0008eee:	75 2e                	jne    c0008f1e <KeUpdateTimezone(char const*)+0xc4>
c0008ef0:	8b 15 64 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b664
c0008ef6:	89 d0                	mov    eax,edx
c0008ef8:	c1 e0 02             	shl    eax,0x2
c0008efb:	01 d0                	add    eax,edx
c0008efd:	01 c0                	add    eax,eax
c0008eff:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f07:	83 c0 02             	add    eax,0x2
c0008f0a:	8a 00                	mov    al,BYTE PTR [eax]
c0008f0c:	0f be c0             	movsx  eax,al
c0008f0f:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f12:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f17:	01 d0                	add    eax,edx
c0008f19:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f21:	8a 00                	mov    al,BYTE PTR [eax]
c0008f23:	0f be c0             	movsx  eax,al
c0008f26:	83 f8 2d             	cmp    eax,0x2d
c0008f29:	75 26                	jne    c0008f51 <KeUpdateTimezone(char const*)+0xf7>
c0008f2b:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f30:	f7 d8                	neg    eax
c0008f32:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f37:	eb 18                	jmp    c0008f51 <KeUpdateTimezone(char const*)+0xf7>
c0008f39:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008f40:	c6 05 61 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b661,0x0
c0008f47:	c7 05 64 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b664,0x0
c0008f51:	90                   	nop
c0008f52:	5d                   	pop    ebp
c0008f53:	c3                   	ret    

c0008f54 <KeSetTimezone(char const*)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	83 ec 18             	sub    esp,0x18
c0008f5a:	83 ec 0c             	sub    esp,0xc
c0008f5d:	68 74 33 02 c0       	push   0xc0023374
c0008f62:	e8 0d 44 00 00       	call   c000d374 <CmOpen(char const*)>
c0008f67:	83 c4 10             	add    esp,0x10
c0008f6a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008f6d:	83 ec 08             	sub    esp,0x8
c0008f70:	68 99 33 02 c0       	push   0xc0023399
c0008f75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f78:	e8 f7 4f 00 00       	call   c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008f7d:	83 c4 10             	add    esp,0x10
c0008f80:	83 ec 04             	sub    esp,0x4
c0008f83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008f86:	50                   	push   eax
c0008f87:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f8a:	e8 b7 48 00 00       	call   c000d846 <CmSetString(Reghive_Tag*, int, char const*)>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	83 ec 0c             	sub    esp,0xc
c0008f95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f98:	e8 f5 44 00 00       	call   c000d492 <CmClose(Reghive_Tag*)>
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	83 ec 0c             	sub    esp,0xc
c0008fa3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fa6:	e8 af fe ff ff       	call   c0008e5a <KeUpdateTimezone(char const*)>
c0008fab:	83 c4 10             	add    esp,0x10
c0008fae:	90                   	nop
c0008faf:	c9                   	leave  
c0008fb0:	c3                   	ret    

c0008fb1 <KeSetTimezone(int)>:
c0008fb1:	55                   	push   ebp
c0008fb2:	89 e5                	mov    ebp,esp
c0008fb4:	83 ec 18             	sub    esp,0x18
c0008fb7:	83 ec 0c             	sub    esp,0xc
c0008fba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fbd:	e8 fb fd ff ff       	call   c0008dbd <KeGetTimezoneStringFromID(int)>
c0008fc2:	83 c4 10             	add    esp,0x10
c0008fc5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0008fcc:	74 12                	je     c0008fe0 <KeSetTimezone(int)+0x2f>
c0008fce:	83 ec 0c             	sub    esp,0xc
c0008fd1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd4:	e8 7b ff ff ff       	call   c0008f54 <KeSetTimezone(char const*)>
c0008fd9:	83 c4 10             	add    esp,0x10
c0008fdc:	b0 01                	mov    al,0x1
c0008fde:	eb 02                	jmp    c0008fe2 <KeSetTimezone(int)+0x31>
c0008fe0:	b0 00                	mov    al,0x0
c0008fe2:	c9                   	leave  
c0008fe3:	c3                   	ret    

c0008fe4 <KeLoadTimezone()>:
c0008fe4:	55                   	push   ebp
c0008fe5:	89 e5                	mov    ebp,esp
c0008fe7:	81 ec 68 02 00 00    	sub    esp,0x268
c0008fed:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0008ff4:	83 ec 0c             	sub    esp,0xc
c0008ff7:	68 74 33 02 c0       	push   0xc0023374
c0008ffc:	e8 73 43 00 00       	call   c000d374 <CmOpen(char const*)>
c0009001:	83 c4 10             	add    esp,0x10
c0009004:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009007:	83 ec 08             	sub    esp,0x8
c000900a:	68 99 33 02 c0       	push   0xc0023399
c000900f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009012:	e8 5d 4f 00 00       	call   c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009017:	83 c4 10             	add    esp,0x10
c000901a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000901d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009021:	7e 18                	jle    c000903b <KeLoadTimezone()+0x57>
c0009023:	83 ec 04             	sub    esp,0x4
c0009026:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c000902c:	50                   	push   eax
c000902d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009030:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009033:	e8 ac 44 00 00       	call   c000d4e4 <CmGetString(Reghive_Tag*, int, char*)>
c0009038:	83 c4 10             	add    esp,0x10
c000903b:	83 ec 0c             	sub    esp,0xc
c000903e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009041:	e8 4c 44 00 00       	call   c000d492 <CmClose(Reghive_Tag*)>
c0009046:	83 c4 10             	add    esp,0x10
c0009049:	83 ec 0c             	sub    esp,0xc
c000904c:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009052:	50                   	push   eax
c0009053:	e8 02 fe ff ff       	call   c0008e5a <KeUpdateTimezone(char const*)>
c0009058:	83 c4 10             	add    esp,0x10
c000905b:	90                   	nop
c000905c:	c9                   	leave  
c000905d:	c3                   	ret    

c000905e <Clock::Clock(char const*)>:
c000905e:	83 ec 0c             	sub    esp,0xc
c0009061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009065:	83 ec 08             	sub    esp,0x8
c0009068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000906c:	50                   	push   eax
c000906d:	e8 ec 0a 00 00       	call   c0009b5e <Device::Device(char const*)>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	ba f8 33 02 c0       	mov    edx,0xc00233f8
c000907a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000907e:	89 10                	mov    DWORD PTR [eax],edx
c0009080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009084:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000908e:	90                   	nop
c000908f:	83 c4 0c             	add    esp,0xc
c0009092:	c3                   	ret    
c0009093:	90                   	nop

c0009094 <Clock::~Clock()>:
c0009094:	83 ec 0c             	sub    esp,0xc
c0009097:	ba f8 33 02 c0       	mov    edx,0xc00233f8
c000909c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a0:	89 10                	mov    DWORD PTR [eax],edx
c00090a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a6:	83 ec 0c             	sub    esp,0xc
c00090a9:	50                   	push   eax
c00090aa:	e8 4f 08 00 00       	call   c00098fe <Device::~Device()>
c00090af:	83 c4 10             	add    esp,0x10
c00090b2:	90                   	nop
c00090b3:	83 c4 0c             	add    esp,0xc
c00090b6:	c3                   	ret    
c00090b7:	90                   	nop

c00090b8 <Clock::~Clock()>:
c00090b8:	83 ec 0c             	sub    esp,0xc
c00090bb:	83 ec 0c             	sub    esp,0xc
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	e8 cd ff ff ff       	call   c0009094 <Clock::~Clock()>
c00090c7:	83 c4 10             	add    esp,0x10
c00090ca:	83 ec 08             	sub    esp,0x8
c00090cd:	68 58 01 00 00       	push   0x158
c00090d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d6:	e8 44 42 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	83 c4 0c             	add    esp,0xc
c00090e1:	c3                   	ret    

c00090e2 <Clock::timeInSecondsLocal()>:
c00090e2:	55                   	push   ebp
c00090e3:	89 e5                	mov    ebp,esp
c00090e5:	53                   	push   ebx
c00090e6:	83 ec 04             	sub    esp,0x4
c00090e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ee:	83 c0 24             	add    eax,0x24
c00090f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090f3:	83 ec 0c             	sub    esp,0xc
c00090f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00090f9:	ff d0                	call   eax
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	89 c1                	mov    ecx,eax
c0009100:	89 d3                	mov    ebx,edx
c0009102:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009107:	0f b6 d0             	movzx  edx,al
c000910a:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c000910f:	01 c2                	add    edx,eax
c0009111:	89 d0                	mov    eax,edx
c0009113:	01 c0                	add    eax,eax
c0009115:	01 d0                	add    eax,edx
c0009117:	01 c0                	add    eax,eax
c0009119:	01 d0                	add    eax,edx
c000911b:	c1 e0 05             	shl    eax,0x5
c000911e:	01 d0                	add    eax,edx
c0009120:	c1 e0 04             	shl    eax,0x4
c0009123:	89 c2                	mov    edx,eax
c0009125:	c1 fa 1f             	sar    edx,0x1f
c0009128:	01 c1                	add    ecx,eax
c000912a:	11 d3                	adc    ebx,edx
c000912c:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c0009131:	0f b6 c0             	movzx  eax,al
c0009134:	85 c0                	test   eax,eax
c0009136:	74 0c                	je     c0009144 <Clock::timeInSecondsLocal()+0x62>
c0009138:	b8 08 07 00 00       	mov    eax,0x708
c000913d:	ba 00 00 00 00       	mov    edx,0x0
c0009142:	eb 0a                	jmp    c000914e <Clock::timeInSecondsLocal()+0x6c>
c0009144:	b8 00 00 00 00       	mov    eax,0x0
c0009149:	ba 00 00 00 00       	mov    edx,0x0
c000914e:	01 c8                	add    eax,ecx
c0009150:	11 da                	adc    edx,ebx
c0009152:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009155:	c9                   	leave  
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009158:	55                   	push   ebp
c0009159:	89 e5                	mov    ebp,esp
c000915b:	56                   	push   esi
c000915c:	53                   	push   ebx
c000915d:	83 ec 10             	sub    esp,0x10
c0009160:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009163:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009166:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009169:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000916c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000916f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009171:	83 c0 2c             	add    eax,0x2c
c0009174:	8b 30                	mov    esi,DWORD PTR [eax]
c0009176:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c000917b:	0f b6 d0             	movzx  edx,al
c000917e:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009183:	01 c2                	add    edx,eax
c0009185:	89 d0                	mov    eax,edx
c0009187:	01 c0                	add    eax,eax
c0009189:	01 d0                	add    eax,edx
c000918b:	01 c0                	add    eax,eax
c000918d:	01 d0                	add    eax,edx
c000918f:	c1 e0 05             	shl    eax,0x5
c0009192:	01 d0                	add    eax,edx
c0009194:	c1 e0 04             	shl    eax,0x4
c0009197:	89 c2                	mov    edx,eax
c0009199:	c1 fa 1f             	sar    edx,0x1f
c000919c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000919f:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091a2:	29 c1                	sub    ecx,eax
c00091a4:	19 d3                	sbb    ebx,edx
c00091a6:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c00091ab:	0f b6 c0             	movzx  eax,al
c00091ae:	85 c0                	test   eax,eax
c00091b0:	74 0c                	je     c00091be <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c00091b2:	b8 08 07 00 00       	mov    eax,0x708
c00091b7:	ba 00 00 00 00       	mov    edx,0x0
c00091bc:	eb 0a                	jmp    c00091c8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c00091be:	b8 00 00 00 00       	mov    eax,0x0
c00091c3:	ba 00 00 00 00       	mov    edx,0x0
c00091c8:	29 c1                	sub    ecx,eax
c00091ca:	19 d3                	sbb    ebx,edx
c00091cc:	89 c8                	mov    eax,ecx
c00091ce:	89 da                	mov    edx,ebx
c00091d0:	83 ec 04             	sub    esp,0x4
c00091d3:	52                   	push   edx
c00091d4:	50                   	push   eax
c00091d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00091d8:	ff d6                	call   esi
c00091da:	83 c4 10             	add    esp,0x10
c00091dd:	8d 65 f8             	lea    esp,[ebp-0x8]
c00091e0:	5b                   	pop    ebx
c00091e1:	5e                   	pop    esi
c00091e2:	5d                   	pop    ebp
c00091e3:	c3                   	ret    

c00091e4 <KeDatetimeToSeconds(datetime_t)>:
c00091e4:	55                   	push   ebp
c00091e5:	89 e5                	mov    ebp,esp
c00091e7:	53                   	push   ebx
c00091e8:	83 ec 24             	sub    esp,0x24
c00091eb:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00091ef:	2d 6c 07 00 00       	sub    eax,0x76c
c00091f4:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00091f8:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00091fb:	83 e8 01             	sub    eax,0x1
c00091fe:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009201:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009208:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000920f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009216:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000921d:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009220:	0f b6 c8             	movzx  ecx,al
c0009223:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009226:	0f b6 d0             	movzx  edx,al
c0009229:	89 d0                	mov    eax,edx
c000922b:	01 c0                	add    eax,eax
c000922d:	01 d0                	add    eax,edx
c000922f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009236:	01 d0                	add    eax,edx
c0009238:	c1 e0 02             	shl    eax,0x2
c000923b:	01 c1                	add    ecx,eax
c000923d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009240:	0f b6 d0             	movzx  edx,al
c0009243:	89 d0                	mov    eax,edx
c0009245:	01 c0                	add    eax,eax
c0009247:	01 d0                	add    eax,edx
c0009249:	01 c0                	add    eax,eax
c000924b:	01 d0                	add    eax,edx
c000924d:	c1 e0 05             	shl    eax,0x5
c0009250:	01 d0                	add    eax,edx
c0009252:	c1 e0 04             	shl    eax,0x4
c0009255:	01 c8                	add    eax,ecx
c0009257:	89 c2                	mov    edx,eax
c0009259:	c1 fa 1f             	sar    edx,0x1f
c000925c:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000925f:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009262:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009265:	0f b6 c0             	movzx  eax,al
c0009268:	83 e8 01             	sub    eax,0x1
c000926b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000926e:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009271:	0f b6 c0             	movzx  eax,al
c0009274:	8b 04 85 c0 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcc40]
c000927b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000927e:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009281:	0f b6 c0             	movzx  eax,al
c0009284:	83 f8 01             	cmp    eax,0x1
c0009287:	76 7c                	jbe    c0009305 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009289:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000928d:	0f b7 c0             	movzx  eax,ax
c0009290:	83 e0 03             	and    eax,0x3
c0009293:	85 c0                	test   eax,eax
c0009295:	75 6e                	jne    c0009305 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009297:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000929b:	0f b7 c8             	movzx  ecx,ax
c000929e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092a3:	89 c8                	mov    eax,ecx
c00092a5:	f7 e2                	mul    edx
c00092a7:	c1 ea 05             	shr    edx,0x5
c00092aa:	89 d0                	mov    eax,edx
c00092ac:	c1 e0 02             	shl    eax,0x2
c00092af:	01 d0                	add    eax,edx
c00092b1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092b8:	01 d0                	add    eax,edx
c00092ba:	c1 e0 02             	shl    eax,0x2
c00092bd:	29 c1                	sub    ecx,eax
c00092bf:	89 c8                	mov    eax,ecx
c00092c1:	0f b7 c0             	movzx  eax,ax
c00092c4:	85 c0                	test   eax,eax
c00092c6:	75 39                	jne    c0009301 <KeDatetimeToSeconds(datetime_t)+0x11d>
c00092c8:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092cc:	0f b7 c0             	movzx  eax,ax
c00092cf:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00092d5:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00092da:	f7 e9                	imul   ecx
c00092dc:	c1 fa 07             	sar    edx,0x7
c00092df:	89 c8                	mov    eax,ecx
c00092e1:	c1 f8 1f             	sar    eax,0x1f
c00092e4:	29 c2                	sub    edx,eax
c00092e6:	89 d0                	mov    eax,edx
c00092e8:	c1 e0 02             	shl    eax,0x2
c00092eb:	01 d0                	add    eax,edx
c00092ed:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092f4:	01 d0                	add    eax,edx
c00092f6:	c1 e0 04             	shl    eax,0x4
c00092f9:	29 c1                	sub    ecx,eax
c00092fb:	89 ca                	mov    edx,ecx
c00092fd:	85 d2                	test   edx,edx
c00092ff:	75 04                	jne    c0009305 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009301:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009305:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009309:	0f b7 c0             	movzx  eax,ax
c000930c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000930f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009312:	83 f8 46             	cmp    eax,0x46
c0009315:	0f 9f c0             	setg   al
c0009318:	0f b6 c0             	movzx  eax,al
c000931b:	85 c0                	test   eax,eax
c000931d:	0f 84 a4 00 00 00    	je     c00093c7 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009323:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c000932a:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000932e:	0f b7 d0             	movzx  edx,ax
c0009331:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009334:	39 c2                	cmp    edx,eax
c0009336:	0f 8e b8 01 00 00    	jle    c00094f4 <KeDatetimeToSeconds(datetime_t)+0x310>
c000933c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000933f:	83 e0 03             	and    eax,0x3
c0009342:	85 c0                	test   eax,eax
c0009344:	75 6b                	jne    c00093b1 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009346:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009349:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000934e:	f7 e9                	imul   ecx
c0009350:	c1 fa 05             	sar    edx,0x5
c0009353:	89 c8                	mov    eax,ecx
c0009355:	c1 f8 1f             	sar    eax,0x1f
c0009358:	29 c2                	sub    edx,eax
c000935a:	89 d0                	mov    eax,edx
c000935c:	c1 e0 02             	shl    eax,0x2
c000935f:	01 d0                	add    eax,edx
c0009361:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009368:	01 d0                	add    eax,edx
c000936a:	c1 e0 02             	shl    eax,0x2
c000936d:	29 c1                	sub    ecx,eax
c000936f:	89 ca                	mov    edx,ecx
c0009371:	85 d2                	test   edx,edx
c0009373:	75 35                	jne    c00093aa <KeDatetimeToSeconds(datetime_t)+0x1c6>
c0009375:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009378:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000937e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009383:	f7 e9                	imul   ecx
c0009385:	c1 fa 07             	sar    edx,0x7
c0009388:	89 c8                	mov    eax,ecx
c000938a:	c1 f8 1f             	sar    eax,0x1f
c000938d:	29 c2                	sub    edx,eax
c000938f:	89 d0                	mov    eax,edx
c0009391:	c1 e0 02             	shl    eax,0x2
c0009394:	01 d0                	add    eax,edx
c0009396:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000939d:	01 d0                	add    eax,edx
c000939f:	c1 e0 04             	shl    eax,0x4
c00093a2:	29 c1                	sub    ecx,eax
c00093a4:	89 ca                	mov    edx,ecx
c00093a6:	85 d2                	test   edx,edx
c00093a8:	75 07                	jne    c00093b1 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c00093aa:	b8 6e 01 00 00       	mov    eax,0x16e
c00093af:	eb 05                	jmp    c00093b6 <KeDatetimeToSeconds(datetime_t)+0x1d2>
c00093b1:	b8 6d 01 00 00       	mov    eax,0x16d
c00093b6:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00093b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093bc:	83 c0 01             	add    eax,0x1
c00093bf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00093c2:	e9 63 ff ff ff       	jmp    c000932a <KeDatetimeToSeconds(datetime_t)+0x146>
c00093c7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093ca:	83 f8 45             	cmp    eax,0x45
c00093cd:	0f 8f 21 01 00 00    	jg     c00094f4 <KeDatetimeToSeconds(datetime_t)+0x310>
c00093d3:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c00093da:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00093de:	0f b7 d0             	movzx  edx,ax
c00093e1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093e4:	39 c2                	cmp    edx,eax
c00093e6:	0f 8d 8b 00 00 00    	jge    c0009477 <KeDatetimeToSeconds(datetime_t)+0x293>
c00093ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093ef:	83 e0 03             	and    eax,0x3
c00093f2:	85 c0                	test   eax,eax
c00093f4:	75 6b                	jne    c0009461 <KeDatetimeToSeconds(datetime_t)+0x27d>
c00093f6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093f9:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093fe:	f7 e9                	imul   ecx
c0009400:	c1 fa 05             	sar    edx,0x5
c0009403:	89 c8                	mov    eax,ecx
c0009405:	c1 f8 1f             	sar    eax,0x1f
c0009408:	29 c2                	sub    edx,eax
c000940a:	89 d0                	mov    eax,edx
c000940c:	c1 e0 02             	shl    eax,0x2
c000940f:	01 d0                	add    eax,edx
c0009411:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009418:	01 d0                	add    eax,edx
c000941a:	c1 e0 02             	shl    eax,0x2
c000941d:	29 c1                	sub    ecx,eax
c000941f:	89 ca                	mov    edx,ecx
c0009421:	85 d2                	test   edx,edx
c0009423:	75 35                	jne    c000945a <KeDatetimeToSeconds(datetime_t)+0x276>
c0009425:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009428:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000942e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009433:	f7 e9                	imul   ecx
c0009435:	c1 fa 07             	sar    edx,0x7
c0009438:	89 c8                	mov    eax,ecx
c000943a:	c1 f8 1f             	sar    eax,0x1f
c000943d:	29 c2                	sub    edx,eax
c000943f:	89 d0                	mov    eax,edx
c0009441:	c1 e0 02             	shl    eax,0x2
c0009444:	01 d0                	add    eax,edx
c0009446:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000944d:	01 d0                	add    eax,edx
c000944f:	c1 e0 04             	shl    eax,0x4
c0009452:	29 c1                	sub    ecx,eax
c0009454:	89 ca                	mov    edx,ecx
c0009456:	85 d2                	test   edx,edx
c0009458:	75 07                	jne    c0009461 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000945a:	b8 6e 01 00 00       	mov    eax,0x16e
c000945f:	eb 05                	jmp    c0009466 <KeDatetimeToSeconds(datetime_t)+0x282>
c0009461:	b8 6d 01 00 00       	mov    eax,0x16d
c0009466:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009469:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000946c:	83 e8 01             	sub    eax,0x1
c000946f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009472:	e9 63 ff ff ff       	jmp    c00093da <KeDatetimeToSeconds(datetime_t)+0x1f6>
c0009477:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000947a:	83 e0 03             	and    eax,0x3
c000947d:	85 c0                	test   eax,eax
c000947f:	75 6b                	jne    c00094ec <KeDatetimeToSeconds(datetime_t)+0x308>
c0009481:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009484:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009489:	f7 e9                	imul   ecx
c000948b:	c1 fa 05             	sar    edx,0x5
c000948e:	89 c8                	mov    eax,ecx
c0009490:	c1 f8 1f             	sar    eax,0x1f
c0009493:	29 c2                	sub    edx,eax
c0009495:	89 d0                	mov    eax,edx
c0009497:	c1 e0 02             	shl    eax,0x2
c000949a:	01 d0                	add    eax,edx
c000949c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a3:	01 d0                	add    eax,edx
c00094a5:	c1 e0 02             	shl    eax,0x2
c00094a8:	29 c1                	sub    ecx,eax
c00094aa:	89 ca                	mov    edx,ecx
c00094ac:	85 d2                	test   edx,edx
c00094ae:	75 35                	jne    c00094e5 <KeDatetimeToSeconds(datetime_t)+0x301>
c00094b0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094b3:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00094b9:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094be:	f7 e9                	imul   ecx
c00094c0:	c1 fa 07             	sar    edx,0x7
c00094c3:	89 c8                	mov    eax,ecx
c00094c5:	c1 f8 1f             	sar    eax,0x1f
c00094c8:	29 c2                	sub    edx,eax
c00094ca:	89 d0                	mov    eax,edx
c00094cc:	c1 e0 02             	shl    eax,0x2
c00094cf:	01 d0                	add    eax,edx
c00094d1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094d8:	01 d0                	add    eax,edx
c00094da:	c1 e0 04             	shl    eax,0x4
c00094dd:	29 c1                	sub    ecx,eax
c00094df:	89 ca                	mov    edx,ecx
c00094e1:	85 d2                	test   edx,edx
c00094e3:	75 07                	jne    c00094ec <KeDatetimeToSeconds(datetime_t)+0x308>
c00094e5:	b8 6e 01 00 00       	mov    eax,0x16e
c00094ea:	eb 05                	jmp    c00094f1 <KeDatetimeToSeconds(datetime_t)+0x30d>
c00094ec:	b8 6d 01 00 00       	mov    eax,0x16d
c00094f1:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094f7:	89 c2                	mov    edx,eax
c00094f9:	c1 fa 1f             	sar    edx,0x1f
c00094fc:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c0009502:	6b c8 00             	imul   ecx,eax,0x0
c0009505:	01 d9                	add    ecx,ebx
c0009507:	bb 80 51 01 00       	mov    ebx,0x15180
c000950c:	f7 e3                	mul    ebx
c000950e:	01 d1                	add    ecx,edx
c0009510:	89 ca                	mov    edx,ecx
c0009512:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009515:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009518:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000951b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000951e:	83 c4 24             	add    esp,0x24
c0009521:	5b                   	pop    ebx
c0009522:	5d                   	pop    ebp
c0009523:	c3                   	ret    

c0009524 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009524:	55                   	push   ebp
c0009525:	89 e5                	mov    ebp,esp
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 20             	sub    esp,0x20
c000952c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c000952f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009532:	e8 ad fc ff ff       	call   c00091e4 <KeDatetimeToSeconds(datetime_t)>
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	89 c3                	mov    ebx,eax
c000953c:	89 d6                	mov    esi,edx
c000953e:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009543:	0f b6 d0             	movzx  edx,al
c0009546:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c000954b:	01 c2                	add    edx,eax
c000954d:	89 d0                	mov    eax,edx
c000954f:	01 c0                	add    eax,eax
c0009551:	01 d0                	add    eax,edx
c0009553:	01 c0                	add    eax,eax
c0009555:	01 d0                	add    eax,edx
c0009557:	c1 e0 05             	shl    eax,0x5
c000955a:	01 d0                	add    eax,edx
c000955c:	c1 e0 04             	shl    eax,0x4
c000955f:	89 c2                	mov    edx,eax
c0009561:	c1 fa 1f             	sar    edx,0x1f
c0009564:	29 c3                	sub    ebx,eax
c0009566:	19 d6                	sbb    esi,edx
c0009568:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000956d:	0f b6 c0             	movzx  eax,al
c0009570:	85 c0                	test   eax,eax
c0009572:	74 0c                	je     c0009580 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c0009574:	b8 08 07 00 00       	mov    eax,0x708
c0009579:	ba 00 00 00 00       	mov    edx,0x0
c000957e:	eb 0a                	jmp    c000958a <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c0009580:	b8 00 00 00 00       	mov    eax,0x0
c0009585:	ba 00 00 00 00       	mov    edx,0x0
c000958a:	29 c3                	sub    ebx,eax
c000958c:	19 d6                	sbb    esi,edx
c000958e:	89 d8                	mov    eax,ebx
c0009590:	89 f2                	mov    edx,esi
c0009592:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009595:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009598:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000959b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000959e:	89 d0                	mov    eax,edx
c00095a0:	31 d2                	xor    edx,edx
c00095a2:	89 c3                	mov    ebx,eax
c00095a4:	89 d6                	mov    esi,edx
c00095a6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00095a9:	80 e5 ff             	and    ch,0xff
c00095ac:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00095af:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00095b2:	83 e1 00             	and    ecx,0x0
c00095b5:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00095b8:	83 ec 0c             	sub    esp,0xc
c00095bb:	56                   	push   esi
c00095bc:	53                   	push   ebx
c00095bd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095c0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00095c3:	68 ae 33 02 c0       	push   0xc00233ae
c00095c8:	e8 97 d9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00095cd:	83 c4 20             	add    esp,0x20
c00095d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00095d5:	83 c0 2c             	add    eax,0x2c
c00095d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00095da:	83 ec 04             	sub    esp,0x4
c00095dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00095e0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00095e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00095e6:	ff d0                	call   eax
c00095e8:	83 c4 10             	add    esp,0x10
c00095eb:	8d 65 f8             	lea    esp,[ebp-0x8]
c00095ee:	5b                   	pop    ebx
c00095ef:	5e                   	pop    esi
c00095f0:	5d                   	pop    ebp
c00095f1:	c3                   	ret    

c00095f2 <KeSecondsToDatetime(unsigned long long)>:
c00095f2:	55                   	push   ebp
c00095f3:	89 e5                	mov    ebp,esp
c00095f5:	83 ec 48             	sub    esp,0x48
c00095f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00095fb:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c00095fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009601:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009604:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009607:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000960a:	6a 00                	push   0x0
c000960c:	68 80 51 01 00       	push   0x15180
c0009611:	52                   	push   edx
c0009612:	50                   	push   eax
c0009613:	e8 6c 82 01 00       	call   c0021884 <__udivdi3>
c0009618:	83 c4 10             	add    esp,0x10
c000961b:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009620:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009623:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009626:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009629:	6a 00                	push   0x0
c000962b:	68 80 51 01 00       	push   0x15180
c0009630:	52                   	push   edx
c0009631:	50                   	push   eax
c0009632:	e8 4d 83 01 00       	call   c0021984 <__umoddi3>
c0009637:	83 c4 10             	add    esp,0x10
c000963a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000963d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009641:	79 0b                	jns    c000964e <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009643:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000964a:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c000964e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009651:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009656:	89 c8                	mov    eax,ecx
c0009658:	f7 ea                	imul   edx
c000965a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000965d:	c1 f8 0b             	sar    eax,0xb
c0009660:	89 c2                	mov    edx,eax
c0009662:	89 c8                	mov    eax,ecx
c0009664:	c1 f8 1f             	sar    eax,0x1f
c0009667:	29 c2                	sub    edx,eax
c0009669:	89 d0                	mov    eax,edx
c000966b:	88 c2                	mov    dl,al
c000966d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009670:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009673:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009676:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000967b:	89 c8                	mov    eax,ecx
c000967d:	f7 ea                	imul   edx
c000967f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009682:	c1 f8 0b             	sar    eax,0xb
c0009685:	89 c2                	mov    edx,eax
c0009687:	89 c8                	mov    eax,ecx
c0009689:	c1 f8 1f             	sar    eax,0x1f
c000968c:	29 c2                	sub    edx,eax
c000968e:	89 d0                	mov    eax,edx
c0009690:	01 c0                	add    eax,eax
c0009692:	01 d0                	add    eax,edx
c0009694:	01 c0                	add    eax,eax
c0009696:	01 d0                	add    eax,edx
c0009698:	c1 e0 05             	shl    eax,0x5
c000969b:	01 d0                	add    eax,edx
c000969d:	c1 e0 04             	shl    eax,0x4
c00096a0:	29 c1                	sub    ecx,eax
c00096a2:	89 c8                	mov    eax,ecx
c00096a4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096a7:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096aa:	ba 89 88 88 88       	mov    edx,0x88888889
c00096af:	89 c8                	mov    eax,ecx
c00096b1:	f7 ea                	imul   edx
c00096b3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b6:	c1 f8 05             	sar    eax,0x5
c00096b9:	89 c2                	mov    edx,eax
c00096bb:	89 c8                	mov    eax,ecx
c00096bd:	c1 f8 1f             	sar    eax,0x1f
c00096c0:	29 c2                	sub    edx,eax
c00096c2:	89 d0                	mov    eax,edx
c00096c4:	88 c2                	mov    dl,al
c00096c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00096cc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096cf:	ba 89 88 88 88       	mov    edx,0x88888889
c00096d4:	89 c8                	mov    eax,ecx
c00096d6:	f7 ea                	imul   edx
c00096d8:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096db:	c1 f8 05             	sar    eax,0x5
c00096de:	89 c2                	mov    edx,eax
c00096e0:	89 c8                	mov    eax,ecx
c00096e2:	c1 f8 1f             	sar    eax,0x1f
c00096e5:	29 c2                	sub    edx,eax
c00096e7:	89 d0                	mov    eax,edx
c00096e9:	01 c0                	add    eax,eax
c00096eb:	01 d0                	add    eax,edx
c00096ed:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00096f4:	01 d0                	add    eax,edx
c00096f6:	c1 e0 02             	shl    eax,0x2
c00096f9:	29 c1                	sub    ecx,eax
c00096fb:	89 ca                	mov    edx,ecx
c00096fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009700:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009703:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009707:	79 20                	jns    c0009729 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009709:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000970c:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009712:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009717:	89 c8                	mov    eax,ecx
c0009719:	f7 ea                	imul   edx
c000971b:	c1 fa 0f             	sar    edx,0xf
c000971e:	89 c8                	mov    eax,ecx
c0009720:	c1 f8 1f             	sar    eax,0x1f
c0009723:	29 c2                	sub    edx,eax
c0009725:	89 d0                	mov    eax,edx
c0009727:	eb 18                	jmp    c0009741 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009729:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000972c:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009731:	89 c8                	mov    eax,ecx
c0009733:	f7 ea                	imul   edx
c0009735:	c1 fa 0f             	sar    edx,0xf
c0009738:	89 c8                	mov    eax,ecx
c000973a:	c1 f8 1f             	sar    eax,0x1f
c000973d:	29 c2                	sub    edx,eax
c000973f:	89 d0                	mov    eax,edx
c0009741:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009744:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009747:	89 d0                	mov    eax,edx
c0009749:	c1 e0 03             	shl    eax,0x3
c000974c:	01 d0                	add    eax,edx
c000974e:	c1 e0 04             	shl    eax,0x4
c0009751:	01 d0                	add    eax,edx
c0009753:	c1 e0 04             	shl    eax,0x4
c0009756:	29 d0                	sub    eax,edx
c0009758:	89 c2                	mov    edx,eax
c000975a:	c1 e2 06             	shl    edx,0x6
c000975d:	29 c2                	sub    edx,eax
c000975f:	89 d0                	mov    eax,edx
c0009761:	f7 d8                	neg    eax
c0009763:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009766:	01 d0                	add    eax,edx
c0009768:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000976b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000976e:	c1 e8 02             	shr    eax,0x2
c0009771:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009776:	f7 e2                	mul    edx
c0009778:	c1 ea 07             	shr    edx,0x7
c000977b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000977e:	29 d0                	sub    eax,edx
c0009780:	89 c1                	mov    ecx,eax
c0009782:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009785:	c1 e8 02             	shr    eax,0x2
c0009788:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c000978d:	f7 e2                	mul    edx
c000978f:	89 d0                	mov    eax,edx
c0009791:	c1 e8 0b             	shr    eax,0xb
c0009794:	01 c1                	add    ecx,eax
c0009796:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009799:	c1 e8 04             	shr    eax,0x4
c000979c:	ba 41 d6 72 00       	mov    edx,0x72d641
c00097a1:	f7 e2                	mul    edx
c00097a3:	89 d0                	mov    eax,edx
c00097a5:	c1 e8 04             	shr    eax,0x4
c00097a8:	29 c1                	sub    ecx,eax
c00097aa:	ba 61 f3 19 67       	mov    edx,0x6719f361
c00097af:	89 c8                	mov    eax,ecx
c00097b1:	f7 e2                	mul    edx
c00097b3:	89 c8                	mov    eax,ecx
c00097b5:	29 d0                	sub    eax,edx
c00097b7:	d1 e8                	shr    eax,1
c00097b9:	01 d0                	add    eax,edx
c00097bb:	c1 e8 08             	shr    eax,0x8
c00097be:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00097c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097c4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097c9:	f7 e2                	mul    edx
c00097cb:	89 d1                	mov    ecx,edx
c00097cd:	c1 e9 05             	shr    ecx,0x5
c00097d0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00097d3:	89 d0                	mov    eax,edx
c00097d5:	c1 e0 03             	shl    eax,0x3
c00097d8:	01 d0                	add    eax,edx
c00097da:	c1 e0 03             	shl    eax,0x3
c00097dd:	01 d0                	add    eax,edx
c00097df:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097e6:	01 c2                	add    edx,eax
c00097e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097eb:	c1 e8 02             	shr    eax,0x2
c00097ee:	01 d0                	add    eax,edx
c00097f0:	29 c1                	sub    ecx,eax
c00097f2:	89 ca                	mov    edx,ecx
c00097f4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f7:	01 d0                	add    eax,edx
c00097f9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00097fc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00097ff:	89 d0                	mov    eax,edx
c0009801:	c1 e0 02             	shl    eax,0x2
c0009804:	01 d0                	add    eax,edx
c0009806:	83 c0 02             	add    eax,0x2
c0009809:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c000980e:	f7 e2                	mul    edx
c0009810:	89 d0                	mov    eax,edx
c0009812:	c1 e8 07             	shr    eax,0x7
c0009815:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009818:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000981b:	89 d0                	mov    eax,edx
c000981d:	c1 e0 03             	shl    eax,0x3
c0009820:	01 d0                	add    eax,edx
c0009822:	01 c0                	add    eax,eax
c0009824:	01 d0                	add    eax,edx
c0009826:	c1 e0 03             	shl    eax,0x3
c0009829:	01 d0                	add    eax,edx
c000982b:	83 c0 02             	add    eax,0x2
c000982e:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0009833:	f7 e2                	mul    edx
c0009835:	c1 ea 02             	shr    edx,0x2
c0009838:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000983b:	29 d0                	sub    eax,edx
c000983d:	83 c0 01             	add    eax,0x1
c0009840:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0009843:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c0009847:	77 07                	ja     c0009850 <KeSecondsToDatetime(unsigned long long)+0x25e>
c0009849:	b8 02 00 00 00       	mov    eax,0x2
c000984e:	eb 05                	jmp    c0009855 <KeSecondsToDatetime(unsigned long long)+0x263>
c0009850:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c0009855:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c0009858:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000985b:	89 d0                	mov    eax,edx
c000985d:	c1 e0 02             	shl    eax,0x2
c0009860:	01 d0                	add    eax,edx
c0009862:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009869:	01 d0                	add    eax,edx
c000986b:	c1 e0 04             	shl    eax,0x4
c000986e:	89 c2                	mov    edx,eax
c0009870:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009873:	01 c2                	add    edx,eax
c0009875:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009879:	0f 96 c0             	setbe  al
c000987c:	0f b6 c0             	movzx  eax,al
c000987f:	01 d0                	add    eax,edx
c0009881:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0009884:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0009887:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000988a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000988e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0009891:	83 c0 01             	add    eax,0x1
c0009894:	88 c2                	mov    dl,al
c0009896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009899:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000989c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000989f:	88 c2                	mov    dl,al
c00098a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a4:	88 10                	mov    BYTE PTR [eax],dl
c00098a6:	90                   	nop
c00098a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098aa:	c9                   	leave  
c00098ab:	c2 04 00             	ret    0x4

c00098ae <Clock::timeInDatetimeLocal()>:
c00098ae:	55                   	push   ebp
c00098af:	89 e5                	mov    ebp,esp
c00098b1:	83 ec 08             	sub    esp,0x8
c00098b4:	83 ec 0c             	sub    esp,0xc
c00098b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00098ba:	e8 23 f8 ff ff       	call   c00090e2 <Clock::timeInSecondsLocal()>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00098c5:	83 ec 04             	sub    esp,0x4
c00098c8:	52                   	push   edx
c00098c9:	50                   	push   eax
c00098ca:	51                   	push   ecx
c00098cb:	e8 22 fd ff ff       	call   c00095f2 <KeSecondsToDatetime(unsigned long long)>
c00098d0:	83 c4 0c             	add    esp,0xc
c00098d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d6:	c9                   	leave  
c00098d7:	c2 04 00             	ret    0x4

c00098da <Device::hibernate()>:
c00098da:	c3                   	ret    
c00098db:	90                   	nop

c00098dc <Device::wake()>:
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <Device::detect()>:
c00098de:	c3                   	ret    
c00098df:	90                   	nop

c00098e0 <Device::disableLegacy()>:
c00098e0:	c3                   	ret    
c00098e1:	90                   	nop

c00098e2 <Device::powerSaving(PowerSavingLevel)>:
c00098e2:	c3                   	ret    
c00098e3:	90                   	nop

c00098e4 <DriverlessDevice::close(int, int, void*)>:
c00098e4:	31 c0                	xor    eax,eax
c00098e6:	c3                   	ret    
c00098e7:	90                   	nop

c00098e8 <DriverlessDevice::detect()>:
c00098e8:	c3                   	ret    
c00098e9:	90                   	nop

c00098ea <DriverlessDevice::open(int, int, void*)>:
c00098ea:	83 ec 18             	sub    esp,0x18
c00098ed:	68 2c 34 02 c0       	push   0xc002342c
c00098f2:	e8 e7 66 00 00       	call   c000ffde <KePanic(char const*)>
c00098f7:	83 c8 ff             	or     eax,0xffffffff
c00098fa:	83 c4 1c             	add    esp,0x1c
c00098fd:	c3                   	ret    

c00098fe <Device::~Device()>:
c00098fe:	ba d0 34 02 c0       	mov    edx,0xc00234d0
c0009903:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009907:	89 10                	mov    DWORD PTR [eax],edx
c0009909:	90                   	nop
c000990a:	c3                   	ret    
c000990b:	90                   	nop

c000990c <Device::~Device()>:
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009913:	e8 e6 ff ff ff       	call   c00098fe <Device::~Device()>
c0009918:	83 c4 04             	add    esp,0x4
c000991b:	83 ec 08             	sub    esp,0x8
c000991e:	68 58 01 00 00       	push   0x158
c0009923:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009927:	e8 f3 39 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000992c:	83 c4 10             	add    esp,0x10
c000992f:	83 c4 0c             	add    esp,0xc
c0009932:	c3                   	ret    
c0009933:	90                   	nop

c0009934 <Device::findAndLoadDriver()>:
c0009934:	c7 44 24 04 4a 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc002344a
c000993c:	e9 23 d6 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0009941:	90                   	nop

c0009942 <Device::preOpenPCI(PCIDeviceInfo)>:
c0009942:	57                   	push   edi
c0009943:	b9 09 00 00 00       	mov    ecx,0x9
c0009948:	56                   	push   esi
c0009949:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000994d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0009951:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000995b:	81 c7 18 01 00 00    	add    edi,0x118
c0009961:	fc                   	cld    
c0009962:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009964:	5e                   	pop    esi
c0009965:	5f                   	pop    edi
c0009966:	c3                   	ret    
c0009967:	90                   	nop

c0009968 <Device::preOpenACPI(void*, char*, char*)>:
c0009968:	57                   	push   edi
c0009969:	b9 1e 00 00 00       	mov    ecx,0x1e
c000996e:	56                   	push   esi
c000996f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009973:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009977:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0009981:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0009987:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000998d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009991:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009993:	b9 0e 00 00 00       	mov    ecx,0xe
c0009998:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000999e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099a4:	5e                   	pop    esi
c00099a5:	5f                   	pop    edi
c00099a6:	c3                   	ret    
c00099a7:	90                   	nop

c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00099a8:	53                   	push   ebx
c00099a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00099b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00099b9:	0f b6 c0             	movzx  eax,al
c00099bc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00099c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099c8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099cc:	5b                   	pop    ebx
c00099cd:	e9 b9 0b 01 00       	jmp    c001a58b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c00099d2 <Device::getParent()>:
c00099d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099d6:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00099dc:	c3                   	ret    
c00099dd:	90                   	nop

c00099de <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099e6:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00099eb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099f7:	e9 f1 0c 01 00       	jmp    c001a6ed <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00099fc <Device::addChild(Device*)>:
c00099fc:	53                   	push   ebx
c00099fd:	83 ec 08             	sub    esp,0x8
c0009a00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a08:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a0e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a14:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a16:	85 d2                	test   edx,edx
c0009a18:	74 04                	je     c0009a1e <Device::addChild(Device*)+0x22>
c0009a1a:	89 d3                	mov    ebx,edx
c0009a1c:	eb f6                	jmp    c0009a14 <Device::addChild(Device*)+0x18>
c0009a1e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a21:	83 ec 0c             	sub    esp,0xc
c0009a24:	6a 08                	push   0x8
c0009a26:	e8 6c 62 00 00       	call   c000fc97 <malloc>
c0009a2b:	89 03                	mov    DWORD PTR [ebx],eax
c0009a2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a3a:	83 c4 18             	add    esp,0x18
c0009a3d:	5b                   	pop    ebx
c0009a3e:	c3                   	ret    
c0009a3f:	90                   	nop

c0009a40 <Device::removeAllChildren()>:
c0009a40:	56                   	push   esi
c0009a41:	53                   	push   ebx
c0009a42:	52                   	push   edx
c0009a43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a47:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009a4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a50:	74 17                	je     c0009a69 <Device::removeAllChildren()+0x29>
c0009a52:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a55:	85 c0                	test   eax,eax
c0009a57:	74 0c                	je     c0009a65 <Device::removeAllChildren()+0x25>
c0009a59:	83 ec 0c             	sub    esp,0xc
c0009a5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a5e:	50                   	push   eax
c0009a5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a62:	83 c4 10             	add    esp,0x10
c0009a65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a67:	eb e4                	jmp    c0009a4d <Device::removeAllChildren()+0xd>
c0009a69:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a75:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a82:	58                   	pop    eax
c0009a83:	5b                   	pop    ebx
c0009a84:	5e                   	pop    esi
c0009a85:	c3                   	ret    

c0009a86 <Device::hibernateAll()>:
c0009a86:	53                   	push   ebx
c0009a87:	83 ec 14             	sub    esp,0x14
c0009a8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a90:	53                   	push   ebx
c0009a91:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a94:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a9a:	83 c4 10             	add    esp,0x10
c0009a9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aa0:	74 0f                	je     c0009ab1 <Device::hibernateAll()+0x2b>
c0009aa2:	83 ec 0c             	sub    esp,0xc
c0009aa5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa8:	e8 d9 ff ff ff       	call   c0009a86 <Device::hibernateAll()>
c0009aad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aaf:	eb e9                	jmp    c0009a9a <Device::hibernateAll()+0x14>
c0009ab1:	83 c4 08             	add    esp,0x8
c0009ab4:	5b                   	pop    ebx
c0009ab5:	c3                   	ret    

c0009ab6 <Device::wakeAll()>:
c0009ab6:	53                   	push   ebx
c0009ab7:	83 ec 14             	sub    esp,0x14
c0009aba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009abe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ac0:	53                   	push   ebx
c0009ac1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009ac4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009aca:	83 c4 10             	add    esp,0x10
c0009acd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009ad0:	74 0f                	je     c0009ae1 <Device::wakeAll()+0x2b>
c0009ad2:	83 ec 0c             	sub    esp,0xc
c0009ad5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ad8:	e8 d9 ff ff ff       	call   c0009ab6 <Device::wakeAll()>
c0009add:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009adf:	eb e9                	jmp    c0009aca <Device::wakeAll()+0x14>
c0009ae1:	83 c4 08             	add    esp,0x8
c0009ae4:	5b                   	pop    ebx
c0009ae5:	c3                   	ret    

c0009ae6 <Device::detectAll()>:
c0009ae6:	53                   	push   ebx
c0009ae7:	83 ec 14             	sub    esp,0x14
c0009aea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009af0:	53                   	push   ebx
c0009af1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009af4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b00:	74 0f                	je     c0009b11 <Device::detectAll()+0x2b>
c0009b02:	83 ec 0c             	sub    esp,0xc
c0009b05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b08:	e8 d9 ff ff ff       	call   c0009ae6 <Device::detectAll()>
c0009b0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b0f:	eb e9                	jmp    c0009afa <Device::detectAll()+0x14>
c0009b11:	83 c4 08             	add    esp,0x8
c0009b14:	5b                   	pop    ebx
c0009b15:	c3                   	ret    

c0009b16 <Device::disableLegacyAll()>:
c0009b16:	c3                   	ret    
c0009b17:	90                   	nop

c0009b18 <Device::loadDriversForAll()>:
c0009b18:	c3                   	ret    
c0009b19:	90                   	nop

c0009b1a <Device::powerSavingAll(PowerSavingLevel)>:
c0009b1a:	56                   	push   esi
c0009b1b:	53                   	push   ebx
c0009b1c:	83 ec 0c             	sub    esp,0xc
c0009b1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b29:	56                   	push   esi
c0009b2a:	53                   	push   ebx
c0009b2b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b2e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b3a:	74 0f                	je     c0009b4b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b3c:	52                   	push   edx
c0009b3d:	52                   	push   edx
c0009b3e:	56                   	push   esi
c0009b3f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b42:	e8 d3 ff ff ff       	call   c0009b1a <Device::powerSavingAll(PowerSavingLevel)>
c0009b47:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b49:	eb e9                	jmp    c0009b34 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009b4b:	58                   	pop    eax
c0009b4c:	5b                   	pop    ebx
c0009b4d:	5e                   	pop    esi
c0009b4e:	c3                   	ret    
c0009b4f:	90                   	nop

c0009b50 <Device::setName(char const*)>:
c0009b50:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009b58:	e9 e3 6a ff ff       	jmp    c0000640 <strcpy>
c0009b5d:	90                   	nop

c0009b5e <Device::Device(char const*)>:
c0009b5e:	83 ec 1c             	sub    esp,0x1c
c0009b61:	ba d0 34 02 c0       	mov    edx,0xc00234d0
c0009b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b6a:	89 10                	mov    DWORD PTR [eax],edx
c0009b6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b70:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b7e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b8c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b9a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009ba4:	83 ec 08             	sub    esp,0x8
c0009ba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009baf:	e8 9c ff ff ff       	call   c0009b50 <Device::setName(char const*)>
c0009bb4:	83 c4 10             	add    esp,0x10
c0009bb7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009bbf:	83 ec 0c             	sub    esp,0xc
c0009bc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009bc6:	e8 cc 60 00 00       	call   c000fc97 <malloc>
c0009bcb:	83 c4 10             	add    esp,0x10
c0009bce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bdb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009bdf:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009be5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c15:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c20:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c2e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c3c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c4a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009c54:	90                   	nop
c0009c55:	83 c4 1c             	add    esp,0x1c
c0009c58:	c3                   	ret    
c0009c59:	90                   	nop

c0009c5a <Device::getName()>:
c0009c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5e:	05 d0 00 00 00       	add    eax,0xd0
c0009c63:	c3                   	ret    

c0009c64 <Device::closeAll()>:
c0009c64:	53                   	push   ebx
c0009c65:	83 ec 08             	sub    esp,0x8
c0009c68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c6c:	53                   	push   ebx
c0009c6d:	e8 e8 ff ff ff       	call   c0009c5a <Device::getName()>
c0009c72:	52                   	push   edx
c0009c73:	50                   	push   eax
c0009c74:	68 84 34 02 c0       	push   0xc0023484
c0009c79:	e8 e6 d2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0009c7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c80:	6a 00                	push   0x0
c0009c82:	6a 00                	push   0x0
c0009c84:	6a 00                	push   0x0
c0009c86:	53                   	push   ebx
c0009c87:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c8a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c90:	83 c4 20             	add    esp,0x20
c0009c93:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c96:	74 12                	je     c0009caa <Device::closeAll()+0x46>
c0009c98:	83 ec 0c             	sub    esp,0xc
c0009c9b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c9e:	e8 c1 ff ff ff       	call   c0009c64 <Device::closeAll()>
c0009ca3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ca5:	83 c4 10             	add    esp,0x10
c0009ca8:	eb e9                	jmp    c0009c93 <Device::closeAll()+0x2f>
c0009caa:	83 c4 08             	add    esp,0x8
c0009cad:	5b                   	pop    ebx
c0009cae:	c3                   	ret    
c0009caf:	90                   	nop

c0009cb0 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009cb0:	83 ec 0c             	sub    esp,0xc
c0009cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb7:	83 ec 08             	sub    esp,0x8
c0009cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cbe:	50                   	push   eax
c0009cbf:	e8 9a fe ff ff       	call   c0009b5e <Device::Device(char const*)>
c0009cc4:	83 c4 10             	add    esp,0x10
c0009cc7:	ba fc 34 02 c0       	mov    edx,0xc00234fc
c0009ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd0:	89 10                	mov    DWORD PTR [eax],edx
c0009cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009ce0:	90                   	nop
c0009ce1:	83 c4 0c             	add    esp,0xc
c0009ce4:	c3                   	ret    
c0009ce5:	90                   	nop

c0009ce6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009ce6:	57                   	push   edi
c0009ce7:	56                   	push   esi
c0009ce8:	53                   	push   ebx
c0009ce9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ced:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009cf1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009cf5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009cfb:	75 0c                	jne    c0009d09 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009cfd:	52                   	push   edx
c0009cfe:	52                   	push   edx
c0009cff:	53                   	push   ebx
c0009d00:	56                   	push   esi
c0009d01:	e8 f6 7d 01 00       	call   c0021afc <LinkedList<Device>::addElement(Device*)>
c0009d06:	83 c4 10             	add    esp,0x10
c0009d09:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d0f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d12:	74 12                	je     c0009d26 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d14:	50                   	push   eax
c0009d15:	57                   	push   edi
c0009d16:	56                   	push   esi
c0009d17:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d1a:	e8 c7 ff ff ff       	call   c0009ce6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d21:	83 c4 10             	add    esp,0x10
c0009d24:	eb e9                	jmp    c0009d0f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d26:	5b                   	pop    ebx
c0009d27:	5e                   	pop    esi
c0009d28:	5f                   	pop    edi
c0009d29:	c3                   	ret    

c0009d2a <getDevicesOfType(DeviceType)>:
c0009d2a:	53                   	push   ebx
c0009d2b:	83 ec 14             	sub    esp,0x14
c0009d2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d32:	53                   	push   ebx
c0009d33:	e8 a0 7e 01 00       	call   c0021bd8 <LinkedList<Device>::LinkedList()>
c0009d38:	83 c4 0c             	add    esp,0xc
c0009d3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d3f:	53                   	push   ebx
c0009d40:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0009d46:	e8 9b ff ff ff       	call   c0009ce6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d4b:	89 d8                	mov    eax,ebx
c0009d4d:	83 c4 18             	add    esp,0x18
c0009d50:	5b                   	pop    ebx
c0009d51:	c2 04 00             	ret    0x4

c0009d54 <HardDiskController::HardDiskController(char const*)>:
c0009d54:	83 ec 0c             	sub    esp,0xc
c0009d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5b:	83 ec 08             	sub    esp,0x8
c0009d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d62:	50                   	push   eax
c0009d63:	e8 f6 fd ff ff       	call   c0009b5e <Device::Device(char const*)>
c0009d68:	83 c4 10             	add    esp,0x10
c0009d6b:	ba 28 35 02 c0       	mov    edx,0xc0023528
c0009d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d74:	89 10                	mov    DWORD PTR [eax],edx
c0009d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d7a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d84:	90                   	nop
c0009d85:	83 c4 0c             	add    esp,0xc
c0009d88:	c3                   	ret    
c0009d89:	90                   	nop
c0009d8a:	66 90                	xchg   ax,ax

c0009d8c <HardDiskController::~HardDiskController()>:
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	ba 28 35 02 c0       	mov    edx,0xc0023528
c0009d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d98:	89 10                	mov    DWORD PTR [eax],edx
c0009d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9e:	83 ec 0c             	sub    esp,0xc
c0009da1:	50                   	push   eax
c0009da2:	e8 57 fb ff ff       	call   c00098fe <Device::~Device()>
c0009da7:	83 c4 10             	add    esp,0x10
c0009daa:	90                   	nop
c0009dab:	83 c4 0c             	add    esp,0xc
c0009dae:	c3                   	ret    
c0009daf:	90                   	nop

c0009db0 <HardDiskController::~HardDiskController()>:
c0009db0:	83 ec 0c             	sub    esp,0xc
c0009db3:	83 ec 0c             	sub    esp,0xc
c0009db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dba:	e8 cd ff ff ff       	call   c0009d8c <HardDiskController::~HardDiskController()>
c0009dbf:	83 c4 10             	add    esp,0x10
c0009dc2:	83 ec 08             	sub    esp,0x8
c0009dc5:	68 58 01 00 00       	push   0x158
c0009dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dce:	e8 4c 35 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	83 c4 0c             	add    esp,0xc
c0009dd9:	c3                   	ret    

c0009dda <PhysicalDisk::eject()>:
c0009dda:	83 c8 ff             	or     eax,0xffffffff
c0009ddd:	c3                   	ret    

c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009dde:	83 ec 0c             	sub    esp,0xc
c0009de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de5:	83 ec 08             	sub    esp,0x8
c0009de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dec:	50                   	push   eax
c0009ded:	e8 6c fd ff ff       	call   c0009b5e <Device::Device(char const*)>
c0009df2:	83 c4 10             	add    esp,0x10
c0009df5:	ba 54 35 02 c0       	mov    edx,0xc0023554
c0009dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dfe:	89 10                	mov    DWORD PTR [eax],edx
c0009e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e04:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e0f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e1a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e2c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e36:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e40:	90                   	nop
c0009e41:	83 c4 0c             	add    esp,0xc
c0009e44:	c3                   	ret    
c0009e45:	90                   	nop

c0009e46 <PhysicalDisk::startCache()>:
c0009e46:	56                   	push   esi
c0009e47:	53                   	push   ebx
c0009e48:	83 ec 10             	sub    esp,0x10
c0009e4b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e4f:	6a 44                	push   0x44
c0009e51:	e8 41 5e 00 00       	call   c000fc97 <malloc>
c0009e56:	89 c6                	mov    esi,eax
c0009e58:	58                   	pop    eax
c0009e59:	5a                   	pop    edx
c0009e5a:	53                   	push   ebx
c0009e5b:	56                   	push   esi
c0009e5c:	e8 d3 13 00 00       	call   c000b234 <VCache::VCache(PhysicalDisk*)>
c0009e61:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e67:	83 c4 14             	add    esp,0x14
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	c3                   	ret    
c0009e6d:	90                   	nop

c0009e6e <PhysicalDisk::~PhysicalDisk()>:
c0009e6e:	83 ec 0c             	sub    esp,0xc
c0009e71:	ba 54 35 02 c0       	mov    edx,0xc0023554
c0009e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e7a:	89 10                	mov    DWORD PTR [eax],edx
c0009e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e80:	83 ec 0c             	sub    esp,0xc
c0009e83:	50                   	push   eax
c0009e84:	e8 75 fa ff ff       	call   c00098fe <Device::~Device()>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	90                   	nop
c0009e8d:	83 c4 0c             	add    esp,0xc
c0009e90:	c3                   	ret    
c0009e91:	90                   	nop

c0009e92 <PhysicalDisk::~PhysicalDisk()>:
c0009e92:	83 ec 0c             	sub    esp,0xc
c0009e95:	83 ec 0c             	sub    esp,0xc
c0009e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e9c:	e8 cd ff ff ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	83 ec 08             	sub    esp,0x8
c0009ea7:	68 6c 01 00 00       	push   0x16c
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 6a 34 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	83 c4 0c             	add    esp,0xc
c0009ebb:	c3                   	ret    

c0009ebc <startGUI(void*)>:
c0009ebc:	55                   	push   ebp
c0009ebd:	89 e5                	mov    ebp,esp
c0009ebf:	53                   	push   ebx
c0009ec0:	83 ec 04             	sub    esp,0x4
c0009ec3:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009ecb:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009ed0:	85 c0                	test   eax,eax
c0009ed2:	75 01                	jne    c0009ed5 <startGUI(void*)+0x19>
c0009ed4:	fb                   	sti    
c0009ed5:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009edb:	83 ec 08             	sub    esp,0x8
c0009ede:	6a 01                	push   0x1
c0009ee0:	68 84 35 02 c0       	push   0xc0023584
c0009ee5:	e8 d5 c4 00 00       	call   c00163bf <Thr::loadDLL(char const*, bool)>
c0009eea:	83 c4 10             	add    esp,0x10
c0009eed:	83 ec 08             	sub    esp,0x8
c0009ef0:	53                   	push   ebx
c0009ef1:	50                   	push   eax
c0009ef2:	e8 1a c7 00 00       	call   c0016611 <Thr::executeDLL(unsigned long, void*)>
c0009ef7:	83 c4 10             	add    esp,0x10
c0009efa:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f00:	83 ec 08             	sub    esp,0x8
c0009f03:	6a 01                	push   0x1
c0009f05:	68 9e 35 02 c0       	push   0xc002359e
c0009f0a:	e8 b0 c4 00 00       	call   c00163bf <Thr::loadDLL(char const*, bool)>
c0009f0f:	83 c4 10             	add    esp,0x10
c0009f12:	83 ec 08             	sub    esp,0x8
c0009f15:	53                   	push   ebx
c0009f16:	50                   	push   eax
c0009f17:	e8 f5 c6 00 00       	call   c0016611 <Thr::executeDLL(unsigned long, void*)>
c0009f1c:	83 c4 10             	add    esp,0x10
c0009f1f:	eb fe                	jmp    c0009f1f <startGUI(void*)+0x63>

c0009f21 <startGUIVESA(void*)>:
c0009f21:	55                   	push   ebp
c0009f22:	89 e5                	mov    ebp,esp
c0009f24:	53                   	push   ebx
c0009f25:	83 ec 04             	sub    esp,0x4
c0009f28:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009f30:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009f35:	85 c0                	test   eax,eax
c0009f37:	75 01                	jne    c0009f3a <startGUIVESA(void*)+0x19>
c0009f39:	fb                   	sti    
c0009f3a:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f40:	83 ec 08             	sub    esp,0x8
c0009f43:	6a 01                	push   0x1
c0009f45:	68 bc 35 02 c0       	push   0xc00235bc
c0009f4a:	e8 70 c4 00 00       	call   c00163bf <Thr::loadDLL(char const*, bool)>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	83 ec 08             	sub    esp,0x8
c0009f55:	53                   	push   ebx
c0009f56:	50                   	push   eax
c0009f57:	e8 b5 c6 00 00       	call   c0016611 <Thr::executeDLL(unsigned long, void*)>
c0009f5c:	83 c4 10             	add    esp,0x10
c0009f5f:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f65:	83 ec 08             	sub    esp,0x8
c0009f68:	6a 01                	push   0x1
c0009f6a:	68 9e 35 02 c0       	push   0xc002359e
c0009f6f:	e8 4b c4 00 00       	call   c00163bf <Thr::loadDLL(char const*, bool)>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	83 ec 08             	sub    esp,0x8
c0009f7a:	53                   	push   ebx
c0009f7b:	50                   	push   eax
c0009f7c:	e8 90 c6 00 00       	call   c0016611 <Thr::executeDLL(unsigned long, void*)>
c0009f81:	83 c4 10             	add    esp,0x10
c0009f84:	eb fe                	jmp    c0009f84 <startGUIVESA(void*)+0x63>

c0009f86 <sendKeyToTerminal(unsigned char)>:
c0009f86:	55                   	push   ebp
c0009f87:	89 e5                	mov    ebp,esp
c0009f89:	83 ec 28             	sub    esp,0x28
c0009f8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f8f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f92:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0009f97:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f9b:	83 ec 08             	sub    esp,0x8
c0009f9e:	52                   	push   edx
c0009f9f:	50                   	push   eax
c0009fa0:	e8 39 8c 00 00       	call   c0012bde <VgaText::receiveKey(unsigned char)>
c0009fa5:	83 c4 10             	add    esp,0x10
c0009fa8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fac:	83 f8 0a             	cmp    eax,0xa
c0009faf:	74 16                	je     c0009fc7 <sendKeyToTerminal(unsigned char)+0x41>
c0009fb1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fb5:	83 f8 03             	cmp    eax,0x3
c0009fb8:	74 0d                	je     c0009fc7 <sendKeyToTerminal(unsigned char)+0x41>
c0009fba:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fbe:	83 f8 1c             	cmp    eax,0x1c
c0009fc1:	0f 85 92 00 00 00    	jne    c000a059 <sendKeyToTerminal(unsigned char)+0xd3>
c0009fc7:	fa                   	cli    
c0009fc8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009fcd:	83 c0 01             	add    eax,0x1
c0009fd0:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0009fd5:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009fda:	83 c0 01             	add    eax,0x1
c0009fdd:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0009fe2:	a1 80 b6 02 c0       	mov    eax,ds:0xc002b680
c0009fe7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fea:	c7 05 80 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b680,0x0
c0009ff4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009ff8:	74 1f                	je     c000a019 <sendKeyToTerminal(unsigned char)+0x93>
c0009ffa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009ffd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a000:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a003:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a006:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a009:	83 ec 0c             	sub    esp,0xc
c000a00c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a00f:	e8 74 d2 00 00       	call   c0017288 <unblockTask(ThreadControlBlock*)>
c000a014:	83 c4 10             	add    esp,0x10
c000a017:	eb db                	jmp    c0009ff4 <sendKeyToTerminal(unsigned char)+0x6e>
c000a019:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000a01e:	83 e8 01             	sub    eax,0x1
c000a021:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000a026:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000a02b:	85 c0                	test   eax,eax
c000a02d:	75 18                	jne    c000a047 <sendKeyToTerminal(unsigned char)+0xc1>
c000a02f:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c000a034:	85 c0                	test   eax,eax
c000a036:	74 0f                	je     c000a047 <sendKeyToTerminal(unsigned char)+0xc1>
c000a038:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000a042:	e8 e5 ce 00 00       	call   c0016f2c <schedule()>
c000a047:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a04f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a054:	85 c0                	test   eax,eax
c000a056:	75 01                	jne    c000a059 <sendKeyToTerminal(unsigned char)+0xd3>
c000a058:	fb                   	sti    
c000a059:	90                   	nop
c000a05a:	c9                   	leave  
c000a05b:	c3                   	ret    

c000a05c <sendKeyboardToken(KeyboardToken)>:
c000a05c:	55                   	push   ebp
c000a05d:	89 e5                	mov    ebp,esp
c000a05f:	83 ec 18             	sub    esp,0x18
c000a062:	e8 a8 68 00 00       	call   c001090f <KeUserIOReceived()>
c000a067:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a06a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a06d:	0f b7 c0             	movzx  eax,ax
c000a070:	83 f2 01             	xor    edx,0x1
c000a073:	88 90 a0 b6 02 c0    	mov    BYTE PTR [eax-0x3ffd4960],dl
c000a079:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a07e:	85 c0                	test   eax,eax
c000a080:	74 24                	je     c000a0a6 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a082:	8b 0d 88 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b688
c000a088:	83 ec 04             	sub    esp,0x4
c000a08b:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a090:	83 ec 08             	sub    esp,0x8
c000a093:	89 e2                	mov    edx,esp
c000a095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a098:	89 02                	mov    DWORD PTR [edx],eax
c000a09a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a09d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0a1:	ff d1                	call   ecx
c000a0a3:	83 c4 10             	add    esp,0x10
c000a0a6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a0aa:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a0ad:	0f b6 c0             	movzx  eax,al
c000a0b0:	85 c0                	test   eax,eax
c000a0b2:	0f 84 da 00 00 00    	je     c000a192 <sendKeyboardToken(KeyboardToken)+0x136>
c000a0b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0bb:	0f b7 c0             	movzx  eax,ax
c000a0be:	3d 18 03 00 00       	cmp    eax,0x318
c000a0c3:	75 06                	jne    c000a0cb <sendKeyboardToken(KeyboardToken)+0x6f>
c000a0c5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ce:	0f b7 c0             	movzx  eax,ax
c000a0d1:	3d 19 03 00 00       	cmp    eax,0x319
c000a0d6:	75 06                	jne    c000a0de <sendKeyboardToken(KeyboardToken)+0x82>
c000a0d8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a0de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0e1:	0f b7 c0             	movzx  eax,ax
c000a0e4:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a0e9:	75 06                	jne    c000a0f1 <sendKeyboardToken(KeyboardToken)+0x95>
c000a0eb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a0f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f4:	0f b7 c0             	movzx  eax,ax
c000a0f7:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a0fc:	75 06                	jne    c000a104 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a0fe:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a107:	0f b7 c0             	movzx  eax,ax
c000a10a:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a10f:	75 06                	jne    c000a117 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a111:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a11a:	0f b7 c0             	movzx  eax,ax
c000a11d:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a122:	75 06                	jne    c000a12a <sendKeyboardToken(KeyboardToken)+0xce>
c000a124:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a12a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a12d:	0f b7 c0             	movzx  eax,ax
c000a130:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a135:	75 06                	jne    c000a13d <sendKeyboardToken(KeyboardToken)+0xe1>
c000a137:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a13d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a140:	0f b7 c0             	movzx  eax,ax
c000a143:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a148:	75 06                	jne    c000a150 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a14a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a153:	0f b7 c0             	movzx  eax,ax
c000a156:	3d 20 03 00 00       	cmp    eax,0x320
c000a15b:	75 06                	jne    c000a163 <sendKeyboardToken(KeyboardToken)+0x107>
c000a15d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a166:	0f b7 c0             	movzx  eax,ax
c000a169:	3d 21 03 00 00       	cmp    eax,0x321
c000a16e:	75 06                	jne    c000a176 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a170:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a179:	0f b7 c0             	movzx  eax,ax
c000a17c:	3d 22 03 00 00       	cmp    eax,0x322
c000a181:	0f 85 f1 00 00 00    	jne    c000a278 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a187:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a18d:	e9 e6 00 00 00       	jmp    c000a278 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a195:	0f b7 c0             	movzx  eax,ax
c000a198:	3d 18 03 00 00       	cmp    eax,0x318
c000a19d:	75 0a                	jne    c000a1a9 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a19f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ac:	0f b7 c0             	movzx  eax,ax
c000a1af:	3d 19 03 00 00       	cmp    eax,0x319
c000a1b4:	75 0a                	jne    c000a1c0 <sendKeyboardToken(KeyboardToken)+0x164>
c000a1b6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a1bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1c3:	0f b7 c0             	movzx  eax,ax
c000a1c6:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a1cb:	75 0a                	jne    c000a1d7 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a1cd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a1d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1da:	0f b7 c0             	movzx  eax,ax
c000a1dd:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a1e2:	75 0a                	jne    c000a1ee <sendKeyboardToken(KeyboardToken)+0x192>
c000a1e4:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a1ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1f1:	0f b7 c0             	movzx  eax,ax
c000a1f4:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a1f9:	75 0a                	jne    c000a205 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a1fb:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a201:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a208:	0f b7 c0             	movzx  eax,ax
c000a20b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a210:	75 0a                	jne    c000a21c <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a212:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a218:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a21c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21f:	0f b7 c0             	movzx  eax,ax
c000a222:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a227:	75 0a                	jne    c000a233 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a229:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a22f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a236:	0f b7 c0             	movzx  eax,ax
c000a239:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a23e:	75 0a                	jne    c000a24a <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a240:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a246:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a24a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a24d:	0f b7 c0             	movzx  eax,ax
c000a250:	3d 20 03 00 00       	cmp    eax,0x320
c000a255:	75 0a                	jne    c000a261 <sendKeyboardToken(KeyboardToken)+0x205>
c000a257:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a25d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a264:	0f b7 c0             	movzx  eax,ax
c000a267:	3d 21 03 00 00       	cmp    eax,0x321
c000a26c:	75 0a                	jne    c000a278 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a26e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a274:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a27b:	0f b7 c0             	movzx  eax,ax
c000a27e:	3d 00 02 00 00       	cmp    eax,0x200
c000a283:	75 2f                	jne    c000a2b4 <sendKeyboardToken(KeyboardToken)+0x258>
c000a285:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a28a:	83 f0 01             	xor    eax,0x1
c000a28d:	0f b6 c0             	movzx  eax,al
c000a290:	85 c0                	test   eax,eax
c000a292:	74 20                	je     c000a2b4 <sendKeyboardToken(KeyboardToken)+0x258>
c000a294:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a299:	6a 01                	push   0x1
c000a29b:	6a 00                	push   0x0
c000a29d:	68 bc 9e 00 c0       	push   0xc0009ebc
c000a2a2:	50                   	push   eax
c000a2a3:	e8 ec c9 00 00       	call   c0016c94 <Process::createThread(void (*)(void*), void*, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2b2:	eb 3a                	jmp    c000a2ee <sendKeyboardToken(KeyboardToken)+0x292>
c000a2b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b7:	0f b7 c0             	movzx  eax,ax
c000a2ba:	3d 01 02 00 00       	cmp    eax,0x201
c000a2bf:	75 2d                	jne    c000a2ee <sendKeyboardToken(KeyboardToken)+0x292>
c000a2c1:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a2c6:	83 f0 01             	xor    eax,0x1
c000a2c9:	0f b6 c0             	movzx  eax,al
c000a2cc:	85 c0                	test   eax,eax
c000a2ce:	74 1e                	je     c000a2ee <sendKeyboardToken(KeyboardToken)+0x292>
c000a2d0:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a2d5:	6a 01                	push   0x1
c000a2d7:	6a 00                	push   0x0
c000a2d9:	68 21 9f 00 c0       	push   0xc0009f21
c000a2de:	50                   	push   eax
c000a2df:	e8 b0 c9 00 00       	call   c0016c94 <Process::createThread(void (*)(void*), void*, int)>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2f1:	0f b7 c0             	movzx  eax,ax
c000a2f4:	3d 25 03 00 00       	cmp    eax,0x325
c000a2f9:	75 06                	jne    c000a301 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a2fb:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a304:	0f b7 c0             	movzx  eax,ax
c000a307:	3d 24 03 00 00       	cmp    eax,0x324
c000a30c:	75 06                	jne    c000a314 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a30e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a317:	0f b7 c0             	movzx  eax,ax
c000a31a:	3d 23 03 00 00       	cmp    eax,0x323
c000a31f:	75 06                	jne    c000a327 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a321:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a32a:	0f b7 c0             	movzx  eax,ax
c000a32d:	3d 26 03 00 00       	cmp    eax,0x326
c000a332:	75 06                	jne    c000a33a <sendKeyboardToken(KeyboardToken)+0x2de>
c000a334:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a33a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a33d:	0f b7 c0             	movzx  eax,ax
c000a340:	3d 27 03 00 00       	cmp    eax,0x327
c000a345:	75 06                	jne    c000a34d <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a347:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a34d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a350:	0f b7 c0             	movzx  eax,ax
c000a353:	3d 22 03 00 00       	cmp    eax,0x322
c000a358:	75 06                	jne    c000a360 <sendKeyboardToken(KeyboardToken)+0x304>
c000a35a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a360:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a364:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a367:	83 f0 01             	xor    eax,0x1
c000a36a:	0f b6 c0             	movzx  eax,al
c000a36d:	85 c0                	test   eax,eax
c000a36f:	74 7c                	je     c000a3ed <sendKeyboardToken(KeyboardToken)+0x391>
c000a371:	a0 a1 b7 02 c0       	mov    al,ds:0xc002b7a1
c000a376:	0f b6 c0             	movzx  eax,al
c000a379:	85 c0                	test   eax,eax
c000a37b:	74 43                	je     c000a3c0 <sendKeyboardToken(KeyboardToken)+0x364>
c000a37d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a381:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a385:	85 c0                	test   eax,eax
c000a387:	74 2b                	je     c000a3b4 <sendKeyboardToken(KeyboardToken)+0x358>
c000a389:	8b 15 a4 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002baa4
c000a38f:	89 d0                	mov    eax,edx
c000a391:	c1 e0 02             	shl    eax,0x2
c000a394:	01 d0                	add    eax,edx
c000a396:	01 c0                	add    eax,eax
c000a398:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a39d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3a0:	0f b7 c0             	movzx  eax,ax
c000a3a3:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3a6:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ab:	01 d0                	add    eax,edx
c000a3ad:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a3b2:	eb 71                	jmp    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3b4:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3be:	eb 65                	jmp    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3c0:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3c5:	85 c0                	test   eax,eax
c000a3c7:	74 18                	je     c000a3e1 <sendKeyboardToken(KeyboardToken)+0x385>
c000a3c9:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ce:	0f b6 c0             	movzx  eax,al
c000a3d1:	83 ec 0c             	sub    esp,0xc
c000a3d4:	50                   	push   eax
c000a3d5:	e8 ac fb ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a3da:	83 c4 10             	add    esp,0x10
c000a3dd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3e1:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3eb:	eb 38                	jmp    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f0:	0f b7 c0             	movzx  eax,ax
c000a3f3:	3d 01 01 00 00       	cmp    eax,0x101
c000a3f8:	75 2b                	jne    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3fa:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ff:	85 c0                	test   eax,eax
c000a401:	74 18                	je     c000a41b <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a403:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a408:	0f b6 c0             	movzx  eax,al
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	50                   	push   eax
c000a40f:	e8 72 fb ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a414:	83 c4 10             	add    esp,0x10
c000a417:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a41b:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a425:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a428:	83 f0 01             	xor    eax,0x1
c000a42b:	0f b6 c0             	movzx  eax,al
c000a42e:	85 c0                	test   eax,eax
c000a430:	74 5a                	je     c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a432:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a435:	83 f0 01             	xor    eax,0x1
c000a438:	0f b6 c0             	movzx  eax,al
c000a43b:	85 c0                	test   eax,eax
c000a43d:	74 4d                	je     c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a43f:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a444:	83 f0 01             	xor    eax,0x1
c000a447:	0f b6 c0             	movzx  eax,al
c000a44a:	85 c0                	test   eax,eax
c000a44c:	74 3e                	je     c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a451:	0f b7 c0             	movzx  eax,ax
c000a454:	83 f8 1f             	cmp    eax,0x1f
c000a457:	76 0b                	jbe    c000a464 <sendKeyboardToken(KeyboardToken)+0x408>
c000a459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a45c:	0f b7 c0             	movzx  eax,ax
c000a45f:	83 f8 7e             	cmp    eax,0x7e
c000a462:	76 16                	jbe    c000a47a <sendKeyboardToken(KeyboardToken)+0x41e>
c000a464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a467:	0f b7 c0             	movzx  eax,ax
c000a46a:	83 f8 0a             	cmp    eax,0xa
c000a46d:	74 0b                	je     c000a47a <sendKeyboardToken(KeyboardToken)+0x41e>
c000a46f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a472:	0f b7 c0             	movzx  eax,ax
c000a475:	83 f8 08             	cmp    eax,0x8
c000a478:	75 12                	jne    c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a47a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a47d:	0f b6 c0             	movzx  eax,al
c000a480:	83 ec 0c             	sub    esp,0xc
c000a483:	50                   	push   eax
c000a484:	e8 fd fa ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a489:	83 c4 10             	add    esp,0x10
c000a48c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a48f:	83 f0 01             	xor    eax,0x1
c000a492:	0f b6 c0             	movzx  eax,al
c000a495:	85 c0                	test   eax,eax
c000a497:	74 5d                	je     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a499:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a49c:	83 f0 01             	xor    eax,0x1
c000a49f:	0f b6 c0             	movzx  eax,al
c000a4a2:	85 c0                	test   eax,eax
c000a4a4:	74 50                	je     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4a6:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a4ab:	0f b6 c0             	movzx  eax,al
c000a4ae:	85 c0                	test   eax,eax
c000a4b0:	74 44                	je     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b5:	0f b7 c0             	movzx  eax,ax
c000a4b8:	83 f8 3f             	cmp    eax,0x3f
c000a4bb:	76 39                	jbe    c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4c0:	0f b7 c0             	movzx  eax,ax
c000a4c3:	83 f8 7f             	cmp    eax,0x7f
c000a4c6:	77 2e                	ja     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4cb:	88 c2                	mov    dl,al
c000a4cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d0:	0f b7 c0             	movzx  eax,ax
c000a4d3:	83 f8 5f             	cmp    eax,0x5f
c000a4d6:	76 04                	jbe    c000a4dc <sendKeyboardToken(KeyboardToken)+0x480>
c000a4d8:	b0 20                	mov    al,0x20
c000a4da:	eb 02                	jmp    c000a4de <sendKeyboardToken(KeyboardToken)+0x482>
c000a4dc:	b0 00                	mov    al,0x0
c000a4de:	89 d1                	mov    ecx,edx
c000a4e0:	29 c1                	sub    ecx,eax
c000a4e2:	89 c8                	mov    eax,ecx
c000a4e4:	83 e8 40             	sub    eax,0x40
c000a4e7:	0f b6 c0             	movzx  eax,al
c000a4ea:	83 ec 0c             	sub    esp,0xc
c000a4ed:	50                   	push   eax
c000a4ee:	e8 93 fa ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a4f3:	83 c4 10             	add    esp,0x10
c000a4f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4f9:	0f b7 c0             	movzx  eax,ax
c000a4fc:	3d 00 03 00 00       	cmp    eax,0x300
c000a501:	75 12                	jne    c000a515 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a503:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a506:	83 f0 01             	xor    eax,0x1
c000a509:	0f b6 c0             	movzx  eax,al
c000a50c:	85 c0                	test   eax,eax
c000a50e:	74 05                	je     c000a515 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a510:	e8 be 7d 00 00       	call   c00122d3 <doTerminalCycle()>
c000a515:	90                   	nop
c000a516:	c9                   	leave  
c000a517:	c3                   	ret    

c000a518 <clearInternalKeybuffer(VgaText*)>:
c000a518:	55                   	push   ebp
c000a519:	89 e5                	mov    ebp,esp
c000a51b:	83 ec 08             	sub    esp,0x8
c000a51e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a521:	05 02 01 00 00       	add    eax,0x102
c000a526:	83 ec 0c             	sub    esp,0xc
c000a529:	50                   	push   eax
c000a52a:	e8 41 60 ff ff       	call   c0000570 <strlen>
c000a52f:	83 c4 10             	add    esp,0x10
c000a532:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a535:	81 c2 02 01 00 00    	add    edx,0x102
c000a53b:	83 ec 04             	sub    esp,0x4
c000a53e:	50                   	push   eax
c000a53f:	6a 00                	push   0x0
c000a541:	52                   	push   edx
c000a542:	e8 a9 5f ff ff       	call   c00004f0 <memset>
c000a547:	83 c4 10             	add    esp,0x10
c000a54a:	90                   	nop
c000a54b:	c9                   	leave  
c000a54c:	c3                   	ret    

c000a54d <readKeyboard(VgaText*, char*, unsigned long)>:
c000a54d:	55                   	push   ebp
c000a54e:	89 e5                	mov    ebp,esp
c000a550:	83 ec 18             	sub    esp,0x18
c000a553:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a558:	85 c0                	test   eax,eax
c000a55a:	74 2a                	je     c000a586 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a55c:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a562:	8b 0d 88 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b688
c000a568:	83 ec 04             	sub    esp,0x4
c000a56b:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a570:	83 ec 08             	sub    esp,0x8
c000a573:	89 e2                	mov    edx,esp
c000a575:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a578:	89 02                	mov    DWORD PTR [edx],eax
c000a57a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a57d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a581:	ff d1                	call   ecx
c000a583:	83 c4 10             	add    esp,0x10
c000a586:	fb                   	sti    
c000a587:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a58e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a592:	0f 84 08 01 00 00    	je     c000a6a0 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a59b:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5a1:	0f be c0             	movsx  eax,al
c000a5a4:	85 c0                	test   eax,eax
c000a5a6:	75 27                	jne    c000a5cf <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a5a8:	fa                   	cli    
c000a5a9:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a5ae:	83 c0 01             	add    eax,0x1
c000a5b1:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000a5b6:	e8 71 c9 00 00       	call   c0016f2c <schedule()>
c000a5bb:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a5c3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a5c8:	85 c0                	test   eax,eax
c000a5ca:	75 cc                	jne    c000a598 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5cc:	fb                   	sti    
c000a5cd:	eb c9                	jmp    c000a598 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a5d2:	8d 50 01             	lea    edx,[eax+0x1]
c000a5d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a5d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5db:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a5e1:	88 10                	mov    BYTE PTR [eax],dl
c000a5e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5e6:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5ec:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a5ef:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5f3:	83 f8 03             	cmp    eax,0x3
c000a5f6:	75 1e                	jne    c000a616 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a5f8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a602:	8b 80 80 07 00 00    	mov    eax,DWORD PTR [eax+0x780]
c000a608:	83 ec 08             	sub    esp,0x8
c000a60b:	6a 02                	push   0x2
c000a60d:	50                   	push   eax
c000a60e:	e8 3b 6b 00 00       	call   c001114e <KeRaiseSignal(SigHandlerBlock*, int)>
c000a613:	83 c4 10             	add    esp,0x10
c000a616:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a61a:	83 f8 1c             	cmp    eax,0x1c
c000a61d:	75 1e                	jne    c000a63d <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a61f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a624:	8b 00                	mov    eax,DWORD PTR [eax]
c000a626:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a629:	8b 80 80 07 00 00    	mov    eax,DWORD PTR [eax+0x780]
c000a62f:	83 ec 08             	sub    esp,0x8
c000a632:	6a 09                	push   0x9
c000a634:	50                   	push   eax
c000a635:	e8 14 6b 00 00       	call   c001114e <KeRaiseSignal(SigHandlerBlock*, int)>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a640:	05 02 01 00 00       	add    eax,0x102
c000a645:	83 ec 0c             	sub    esp,0xc
c000a648:	50                   	push   eax
c000a649:	e8 22 5f ff ff       	call   c0000570 <strlen>
c000a64e:	83 c4 10             	add    esp,0x10
c000a651:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a654:	81 c2 02 01 00 00    	add    edx,0x102
c000a65a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a65d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a660:	81 c2 02 01 00 00    	add    edx,0x102
c000a666:	83 ec 04             	sub    esp,0x4
c000a669:	50                   	push   eax
c000a66a:	51                   	push   ecx
c000a66b:	52                   	push   edx
c000a66c:	e8 5f 5d ff ff       	call   c00003d0 <memmove>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a678:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a67c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a680:	83 f8 0a             	cmp    eax,0xa
c000a683:	74 16                	je     c000a69b <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a685:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a689:	83 f8 03             	cmp    eax,0x3
c000a68c:	74 0d                	je     c000a69b <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a68e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a692:	83 f8 1c             	cmp    eax,0x1c
c000a695:	0f 85 f3 fe ff ff    	jne    c000a58e <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a69b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a69e:	eb 03                	jmp    c000a6a3 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6a3:	c9                   	leave  
c000a6a4:	c3                   	ret    
c000a6a5:	90                   	nop

c000a6a6 <Keyboard::Keyboard(char const*)>:
c000a6a6:	83 ec 0c             	sub    esp,0xc
c000a6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ad:	83 ec 08             	sub    esp,0x8
c000a6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6b4:	50                   	push   eax
c000a6b5:	e8 a4 f4 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	ba e0 35 02 c0       	mov    edx,0xc00235e0
c000a6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c6:	89 10                	mov    DWORD PTR [eax],edx
c000a6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6cc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a6d6:	c6 05 84 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b684,0x1
c000a6dd:	90                   	nop
c000a6de:	83 c4 0c             	add    esp,0xc
c000a6e1:	c3                   	ret    

c000a6e2 <Keyboard::~Keyboard()>:
c000a6e2:	83 ec 0c             	sub    esp,0xc
c000a6e5:	ba e0 35 02 c0       	mov    edx,0xc00235e0
c000a6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ee:	89 10                	mov    DWORD PTR [eax],edx
c000a6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f4:	83 ec 0c             	sub    esp,0xc
c000a6f7:	50                   	push   eax
c000a6f8:	e8 01 f2 ff ff       	call   c00098fe <Device::~Device()>
c000a6fd:	83 c4 10             	add    esp,0x10
c000a700:	90                   	nop
c000a701:	83 c4 0c             	add    esp,0xc
c000a704:	c3                   	ret    
c000a705:	90                   	nop

c000a706 <Keyboard::~Keyboard()>:
c000a706:	83 ec 0c             	sub    esp,0xc
c000a709:	83 ec 0c             	sub    esp,0xc
c000a70c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a710:	e8 cd ff ff ff       	call   c000a6e2 <Keyboard::~Keyboard()>
c000a715:	83 c4 10             	add    esp,0x10
c000a718:	83 ec 08             	sub    esp,0x8
c000a71b:	68 5c 01 00 00       	push   0x15c
c000a720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a724:	e8 f6 2b 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000a729:	83 c4 10             	add    esp,0x10
c000a72c:	83 c4 0c             	add    esp,0xc
c000a72f:	c3                   	ret    

c000a730 <LogicalDisk::close(int, int, void*)>:
c000a730:	83 c8 ff             	or     eax,0xffffffff
c000a733:	c3                   	ret    

c000a734 <LogicalDisk::~LogicalDisk()>:
c000a734:	83 ec 0c             	sub    esp,0xc
c000a737:	ba 58 36 02 c0       	mov    edx,0xc0023658
c000a73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a740:	89 10                	mov    DWORD PTR [eax],edx
c000a742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a746:	83 ec 0c             	sub    esp,0xc
c000a749:	50                   	push   eax
c000a74a:	e8 af f1 ff ff       	call   c00098fe <Device::~Device()>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	90                   	nop
c000a753:	83 c4 0c             	add    esp,0xc
c000a756:	c3                   	ret    
c000a757:	90                   	nop

c000a758 <LogicalDisk::~LogicalDisk()>:
c000a758:	83 ec 0c             	sub    esp,0xc
c000a75b:	83 ec 0c             	sub    esp,0xc
c000a75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a762:	e8 cd ff ff ff       	call   c000a734 <LogicalDisk::~LogicalDisk()>
c000a767:	83 c4 10             	add    esp,0x10
c000a76a:	83 ec 08             	sub    esp,0x8
c000a76d:	68 78 01 00 00       	push   0x178
c000a772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a776:	e8 a4 2b 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000a77b:	83 c4 10             	add    esp,0x10
c000a77e:	83 c4 0c             	add    esp,0xc
c000a781:	c3                   	ret    

c000a782 <LogicalDisk::open(int, int, void*)>:
c000a782:	83 ec 18             	sub    esp,0x18
c000a785:	68 0c 36 02 c0       	push   0xc002360c
c000a78a:	e8 4f 58 00 00       	call   c000ffde <KePanic(char const*)>
c000a78f:	83 c8 ff             	or     eax,0xffffffff
c000a792:	83 c4 1c             	add    esp,0x1c
c000a795:	c3                   	ret    

c000a796 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a796:	53                   	push   ebx
c000a797:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a79b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a79f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7a3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a7a9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a7af:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a7b5:	77 10                	ja     c000a7c7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a7b7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a7bd:	89 d3                	mov    ebx,edx
c000a7bf:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a7c5:	72 05                	jb     c000a7cc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a7c7:	83 c8 ff             	or     eax,0xffffffff
c000a7ca:	89 c2                	mov    edx,eax
c000a7cc:	5b                   	pop    ebx
c000a7cd:	c3                   	ret    

c000a7ce <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a7ce:	56                   	push   esi
c000a7cf:	83 c8 ff             	or     eax,0xffffffff
c000a7d2:	53                   	push   ebx
c000a7d3:	89 c2                	mov    edx,eax
c000a7d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a7d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7e1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a7e7:	77 27                	ja     c000a810 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7e9:	89 d8                	mov    eax,ebx
c000a7eb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a7f1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a7f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a7fc:	89 c2                	mov    edx,eax
c000a7fe:	73 10                	jae    c000a810 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a800:	89 c8                	mov    eax,ecx
c000a802:	89 da                	mov    edx,ebx
c000a804:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a80a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a810:	5b                   	pop    ebx
c000a811:	5e                   	pop    esi
c000a812:	c3                   	ret    
c000a813:	90                   	nop

c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a814:	83 ec 1c             	sub    esp,0x1c
c000a817:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a81b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a81f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a823:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a827:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a82b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a82e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a832:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a836:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a83a:	83 ec 08             	sub    esp,0x8
c000a83d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a841:	50                   	push   eax
c000a842:	e8 17 f3 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000a847:	83 c4 10             	add    esp,0x10
c000a84a:	ba 58 36 02 c0       	mov    edx,0xc0023658
c000a84f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a853:	89 10                	mov    DWORD PTR [eax],edx
c000a855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a859:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a860:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a864:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a86f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a87a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a884:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a88c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a890:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a896:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a89c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a7:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a8ad:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a8b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a8bb:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a8c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c5:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a8cf:	90                   	nop
c000a8d0:	83 c4 1c             	add    esp,0x1c
c000a8d3:	c3                   	ret    

c000a8d4 <LogicalDisk::assignDriveLetter()>:
c000a8d4:	55                   	push   ebp
c000a8d5:	57                   	push   edi
c000a8d6:	56                   	push   esi
c000a8d7:	53                   	push   ebx
c000a8d8:	83 ec 14             	sub    esp,0x14
c000a8db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a8df:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a8e5:	b0 41                	mov    al,0x41
c000a8e7:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a8ed:	84 d2                	test   dl,dl
c000a8ef:	75 02                	jne    c000a8f3 <LogicalDisk::assignDriveLetter()+0x1f>
c000a8f1:	b0 43                	mov    al,0x43
c000a8f3:	8b 3d c0 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac0
c000a8f9:	0f b6 ca             	movzx  ecx,dl
c000a8fc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a900:	0f be e8             	movsx  ebp,al
c000a903:	8b 3d c4 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac4
c000a909:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a90d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a911:	3c 43                	cmp    al,0x43
c000a913:	75 10                	jne    c000a925 <LogicalDisk::assignDriveLetter()+0x51>
c000a915:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a91c:	75 5a                	jne    c000a978 <LogicalDisk::assignDriveLetter()+0xa4>
c000a91e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a923:	75 53                	jne    c000a978 <LogicalDisk::assignDriveLetter()+0xa4>
c000a925:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a928:	ba 01 00 00 00       	mov    edx,0x1
c000a92d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a930:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a933:	d3 e2                	shl    edx,cl
c000a935:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a939:	89 d7                	mov    edi,edx
c000a93b:	89 d6                	mov    esi,edx
c000a93d:	c1 ff 1f             	sar    edi,0x1f
c000a940:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a944:	21 f9                	and    ecx,edi
c000a946:	09 d1                	or     ecx,edx
c000a948:	75 2e                	jne    c000a978 <LogicalDisk::assignDriveLetter()+0xa4>
c000a94a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a94e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a952:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a958:	09 f2                	or     edx,esi
c000a95a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a95d:	89 15 c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,edx
c000a963:	89 1c b5 e0 ba 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4520],ebx
c000a96a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a96e:	09 fa                	or     edx,edi
c000a970:	89 15 c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,edx
c000a976:	eb 0d                	jmp    c000a985 <LogicalDisk::assignDriveLetter()+0xb1>
c000a978:	8d 50 01             	lea    edx,[eax+0x1]
c000a97b:	45                   	inc    ebp
c000a97c:	88 d0                	mov    al,dl
c000a97e:	80 fa 5b             	cmp    dl,0x5b
c000a981:	75 8e                	jne    c000a911 <LogicalDisk::assignDriveLetter()+0x3d>
c000a983:	31 c0                	xor    eax,eax
c000a985:	83 c4 14             	add    esp,0x14
c000a988:	5b                   	pop    ebx
c000a989:	5e                   	pop    esi
c000a98a:	5f                   	pop    edi
c000a98b:	5d                   	pop    ebp
c000a98c:	c3                   	ret    
c000a98d:	90                   	nop

c000a98e <LogicalDisk::mount()>:
c000a98e:	56                   	push   esi
c000a98f:	53                   	push   ebx
c000a990:	53                   	push   ebx
c000a991:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a995:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c000a99b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9a5:	85 db                	test   ebx,ebx
c000a9a7:	74 27                	je     c000a9d0 <LogicalDisk::mount()+0x42>
c000a9a9:	51                   	push   ecx
c000a9aa:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a9b1:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a9b3:	83 e8 41             	sub    eax,0x41
c000a9b6:	50                   	push   eax
c000a9b7:	56                   	push   esi
c000a9b8:	53                   	push   ebx
c000a9b9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	84 c0                	test   al,al
c000a9c1:	74 08                	je     c000a9cb <LogicalDisk::mount()+0x3d>
c000a9c3:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a9c9:	eb 07                	jmp    c000a9d2 <LogicalDisk::mount()+0x44>
c000a9cb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a9ce:	eb d5                	jmp    c000a9a5 <LogicalDisk::mount()+0x17>
c000a9d0:	31 c0                	xor    eax,eax
c000a9d2:	5a                   	pop    edx
c000a9d3:	5b                   	pop    ebx
c000a9d4:	5e                   	pop    esi
c000a9d5:	c3                   	ret    

c000a9d6 <LogicalDisk::unmount()>:
c000a9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9da:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a9e4:	c3                   	ret    
c000a9e5:	90                   	nop

c000a9e6 <LogicalDisk::eject()>:
c000a9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a9f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a9f9:	90                   	nop

c000a9fa <LogicalDisk::unassignDriveLetter()>:
c000a9fa:	57                   	push   edi
c000a9fb:	56                   	push   esi
c000a9fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa00:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa07:	85 c9                	test   ecx,ecx
c000aa09:	75 0f                	jne    c000aa1a <LogicalDisk::unassignDriveLetter()+0x20>
c000aa0b:	c7 44 24 0c 30 36 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023630
c000aa13:	5e                   	pop    esi
c000aa14:	5f                   	pop    edi
c000aa15:	e9 c4 55 00 00       	jmp    c000ffde <KePanic(char const*)>
c000aa1a:	83 e9 41             	sub    ecx,0x41
c000aa1d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa24:	b8 01 00 00 00       	mov    eax,0x1
c000aa29:	c7 04 8d e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4520],0x0
c000aa34:	d3 e0                	shl    eax,cl
c000aa36:	89 c7                	mov    edi,eax
c000aa38:	f7 d0                	not    eax
c000aa3a:	c1 ff 1f             	sar    edi,0x1f
c000aa3d:	21 05 c0 ba 02 c0    	and    DWORD PTR ds:0xc002bac0,eax
c000aa43:	89 fe                	mov    esi,edi
c000aa45:	f7 d6                	not    esi
c000aa47:	21 35 c4 ba 02 c0    	and    DWORD PTR ds:0xc002bac4,esi
c000aa4d:	5e                   	pop    esi
c000aa4e:	5f                   	pop    edi
c000aa4f:	c3                   	ret    

c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa50:	57                   	push   edi
c000aa51:	56                   	push   esi
c000aa52:	53                   	push   ebx
c000aa53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa63:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa69:	77 41                	ja     c000aaac <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa6b:	99                   	cdq    
c000aa6c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa72:	01 c8                	add    eax,ecx
c000aa74:	11 da                	adc    edx,ebx
c000aa76:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa7c:	19 d7                	sbb    edi,edx
c000aa7e:	72 33                	jb     c000aab3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa80:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa86:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa8c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa90:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa94:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa9a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaa0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaa4:	5b                   	pop    ebx
c000aaa5:	5e                   	pop    esi
c000aaa6:	5f                   	pop    edi
c000aaa7:	e9 a2 0b 00 00       	jmp    c000b64e <VCache::read(unsigned long long, int, void*)>
c000aaac:	b8 05 00 00 00       	mov    eax,0x5
c000aab1:	eb 05                	jmp    c000aab8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aab3:	b8 07 00 00 00       	mov    eax,0x7
c000aab8:	5b                   	pop    ebx
c000aab9:	5e                   	pop    esi
c000aaba:	5f                   	pop    edi
c000aabb:	c3                   	ret    

c000aabc <LogicalDisk::write(unsigned long long, int, void*)>:
c000aabc:	57                   	push   edi
c000aabd:	56                   	push   esi
c000aabe:	53                   	push   ebx
c000aabf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aac3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aac7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aacb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aacf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aad5:	77 41                	ja     c000ab18 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aad7:	99                   	cdq    
c000aad8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aade:	01 c8                	add    eax,ecx
c000aae0:	11 da                	adc    edx,ebx
c000aae2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aae8:	19 d7                	sbb    edi,edx
c000aaea:	72 33                	jb     c000ab1f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aaec:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aaf2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aaf8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aafc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab00:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab06:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab10:	5b                   	pop    ebx
c000ab11:	5e                   	pop    esi
c000ab12:	5f                   	pop    edi
c000ab13:	e9 68 09 00 00       	jmp    c000b480 <VCache::write(unsigned long long, int, void*)>
c000ab18:	b8 05 00 00 00       	mov    eax,0x5
c000ab1d:	eb 05                	jmp    c000ab24 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab1f:	b8 07 00 00 00       	mov    eax,0x7
c000ab24:	5b                   	pop    ebx
c000ab25:	5e                   	pop    esi
c000ab26:	5f                   	pop    edi
c000ab27:	c3                   	ret    

c000ab28 <Mouse::Mouse(char const*)>:
c000ab28:	83 ec 0c             	sub    esp,0xc
c000ab2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2f:	83 ec 08             	sub    esp,0x8
c000ab32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab36:	50                   	push   eax
c000ab37:	e8 22 f0 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	ba 84 36 02 c0       	mov    edx,0xc0023684
c000ab44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab48:	89 10                	mov    DWORD PTR [eax],edx
c000ab4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab58:	90                   	nop
c000ab59:	83 c4 0c             	add    esp,0xc
c000ab5c:	c3                   	ret    
c000ab5d:	90                   	nop
c000ab5e:	66 90                	xchg   ax,ax

c000ab60 <Mouse::~Mouse()>:
c000ab60:	83 ec 0c             	sub    esp,0xc
c000ab63:	ba 84 36 02 c0       	mov    edx,0xc0023684
c000ab68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6c:	89 10                	mov    DWORD PTR [eax],edx
c000ab6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab72:	83 ec 0c             	sub    esp,0xc
c000ab75:	50                   	push   eax
c000ab76:	e8 83 ed ff ff       	call   c00098fe <Device::~Device()>
c000ab7b:	83 c4 10             	add    esp,0x10
c000ab7e:	90                   	nop
c000ab7f:	83 c4 0c             	add    esp,0xc
c000ab82:	c3                   	ret    
c000ab83:	90                   	nop

c000ab84 <Mouse::~Mouse()>:
c000ab84:	83 ec 0c             	sub    esp,0xc
c000ab87:	83 ec 0c             	sub    esp,0xc
c000ab8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8e:	e8 cd ff ff ff       	call   c000ab60 <Mouse::~Mouse()>
c000ab93:	83 c4 10             	add    esp,0x10
c000ab96:	83 ec 08             	sub    esp,0x8
c000ab99:	68 58 01 00 00       	push   0x158
c000ab9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aba2:	e8 78 27 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	83 c4 0c             	add    esp,0xc
c000abad:	c3                   	ret    

c000abae <NIC::getMAC()>:
c000abae:	31 c0                	xor    eax,eax
c000abb0:	31 d2                	xor    edx,edx
c000abb2:	c3                   	ret    
c000abb3:	90                   	nop

c000abb4 <NIC::write(int, unsigned char*, int*)>:
c000abb4:	b8 01 00 00 00       	mov    eax,0x1
c000abb9:	c3                   	ret    

c000abba <NIC::NIC(char const*)>:
c000abba:	83 ec 0c             	sub    esp,0xc
c000abbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc1:	83 ec 08             	sub    esp,0x8
c000abc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc8:	50                   	push   eax
c000abc9:	e8 90 ef ff ff       	call   c0009b5e <Device::Device(char const*)>
c000abce:	83 c4 10             	add    esp,0x10
c000abd1:	ba b0 36 02 c0       	mov    edx,0xc00236b0
c000abd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abda:	89 10                	mov    DWORD PTR [eax],edx
c000abdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000abea:	90                   	nop
c000abeb:	83 c4 0c             	add    esp,0xc
c000abee:	c3                   	ret    
c000abef:	90                   	nop

c000abf0 <NIC::~NIC()>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	ba b0 36 02 c0       	mov    edx,0xc00236b0
c000abf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abfc:	89 10                	mov    DWORD PTR [eax],edx
c000abfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac02:	83 ec 0c             	sub    esp,0xc
c000ac05:	50                   	push   eax
c000ac06:	e8 f3 ec ff ff       	call   c00098fe <Device::~Device()>
c000ac0b:	83 c4 10             	add    esp,0x10
c000ac0e:	90                   	nop
c000ac0f:	83 c4 0c             	add    esp,0xc
c000ac12:	c3                   	ret    
c000ac13:	90                   	nop

c000ac14 <NIC::~NIC()>:
c000ac14:	83 ec 0c             	sub    esp,0xc
c000ac17:	83 ec 0c             	sub    esp,0xc
c000ac1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1e:	e8 cd ff ff ff       	call   c000abf0 <NIC::~NIC()>
c000ac23:	83 c4 10             	add    esp,0x10
c000ac26:	83 ec 08             	sub    esp,0x8
c000ac29:	68 58 01 00 00       	push   0x158
c000ac2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac32:	e8 e8 26 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000ac37:	83 c4 10             	add    esp,0x10
c000ac3a:	83 c4 0c             	add    esp,0xc
c000ac3d:	c3                   	ret    

c000ac3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac3e:	55                   	push   ebp
c000ac3f:	57                   	push   edi
c000ac40:	56                   	push   esi
c000ac41:	53                   	push   ebx
c000ac42:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac48:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ac4f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ac56:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ac5d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ac64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac68:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac6c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac73:	e8 e2 ef ff ff       	call   c0009c5a <Device::getName()>
c000ac78:	5a                   	pop    edx
c000ac79:	59                   	pop    ecx
c000ac7a:	50                   	push   eax
c000ac7b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac7f:	55                   	push   ebp
c000ac80:	e8 bb 59 ff ff       	call   c0000640 <strcpy>
c000ac85:	5b                   	pop    ebx
c000ac86:	58                   	pop    eax
c000ac87:	68 dc 36 02 c0       	push   0xc00236dc
c000ac8c:	55                   	push   ebp
c000ac8d:	e8 ae 5b ff ff       	call   c0000840 <strcat>
c000ac92:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac99:	e8 f9 4f 00 00       	call   c000fc97 <malloc>
c000ac9e:	83 c4 0c             	add    esp,0xc
c000aca1:	89 c3                	mov    ebx,eax
c000aca3:	57                   	push   edi
c000aca4:	56                   	push   esi
c000aca5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aca9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acad:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000acb4:	55                   	push   ebp
c000acb5:	50                   	push   eax
c000acb6:	e8 59 fb ff ff       	call   c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000acbb:	83 c4 14             	add    esp,0x14
c000acbe:	53                   	push   ebx
c000acbf:	e8 10 fc ff ff       	call   c000a8d4 <LogicalDisk::assignDriveLetter()>
c000acc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000acc7:	e8 c2 fc ff ff       	call   c000a98e <LogicalDisk::mount()>
c000accc:	58                   	pop    eax
c000accd:	5a                   	pop    edx
c000acce:	53                   	push   ebx
c000accf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000acd6:	e8 21 ed ff ff       	call   c00099fc <Device::addChild(Device*)>
c000acdb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ace1:	5b                   	pop    ebx
c000ace2:	5e                   	pop    esi
c000ace3:	5f                   	pop    edi
c000ace4:	5d                   	pop    ebp
c000ace5:	c3                   	ret    

c000ace6 <createPartitionsForDisk(PhysicalDisk*)>:
c000ace6:	55                   	push   ebp
c000ace7:	57                   	push   edi
c000ace8:	56                   	push   esi
c000ace9:	53                   	push   ebx
c000acea:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000acf0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000acf7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000acfd:	3d 00 02 00 00       	cmp    eax,0x200
c000ad02:	74 27                	je     c000ad2b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad04:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad0a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad10:	83 ec 10             	sub    esp,0x10
c000ad13:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad17:	99                   	cdq    
c000ad18:	c1 e6 0a             	shl    esi,0xa
c000ad1b:	52                   	push   edx
c000ad1c:	89 fd                	mov    ebp,edi
c000ad1e:	50                   	push   eax
c000ad1f:	55                   	push   ebp
c000ad20:	56                   	push   esi
c000ad21:	e8 5e 6b 01 00       	call   c0021884 <__udivdi3>
c000ad26:	e9 b9 00 00 00       	jmp    c000ade4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad2b:	83 ec 0c             	sub    esp,0xc
c000ad2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad30:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad34:	56                   	push   esi
c000ad35:	6a 01                	push   0x1
c000ad37:	6a 00                	push   0x0
c000ad39:	6a 00                	push   0x0
c000ad3b:	53                   	push   ebx
c000ad3c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad3f:	83 c4 20             	add    esp,0x20
c000ad42:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad4a:	75 0a                	jne    c000ad56 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad4c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad54:	74 2c                	je     c000ad82 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad56:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad5c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad62:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad68:	83 ec 10             	sub    esp,0x10
c000ad6b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad6f:	89 f7                	mov    edi,esi
c000ad71:	c1 e0 0a             	shl    eax,0xa
c000ad74:	c1 ff 1f             	sar    edi,0x1f
c000ad77:	57                   	push   edi
c000ad78:	56                   	push   esi
c000ad79:	52                   	push   edx
c000ad7a:	50                   	push   eax
c000ad7b:	e8 04 6b 01 00       	call   c0021884 <__udivdi3>
c000ad80:	eb 62                	jmp    c000ade4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad82:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad89:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad90:	89 cf                	mov    edi,ecx
c000ad92:	83 e2 7f             	and    edx,0x7f
c000ad95:	83 e7 7f             	and    edi,0x7f
c000ad98:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad9f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ada2:	83 e0 7f             	and    eax,0x7f
c000ada5:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ada8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000adaf:	83 e0 7f             	and    eax,0x7f
c000adb2:	01 d0                	add    eax,edx
c000adb4:	89 c5                	mov    ebp,eax
c000adb6:	84 c0                	test   al,al
c000adb8:	74 41                	je     c000adfb <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000adba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adc0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adc6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adcc:	83 ec 10             	sub    esp,0x10
c000adcf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000add3:	89 f7                	mov    edi,esi
c000add5:	c1 e0 0a             	shl    eax,0xa
c000add8:	c1 ff 1f             	sar    edi,0x1f
c000addb:	57                   	push   edi
c000addc:	56                   	push   esi
c000addd:	52                   	push   edx
c000adde:	50                   	push   eax
c000addf:	e8 a0 6a 01 00       	call   c0021884 <__udivdi3>
c000ade4:	83 c4 14             	add    esp,0x14
c000ade7:	52                   	push   edx
c000ade8:	50                   	push   eax
c000ade9:	6a 00                	push   0x0
c000adeb:	6a 00                	push   0x0
c000aded:	53                   	push   ebx
c000adee:	e8 4b fe ff ff       	call   c000ac3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000adf3:	83 c4 20             	add    esp,0x20
c000adf6:	e9 73 01 00 00       	jmp    c000af6e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000adfb:	89 f0                	mov    eax,esi
c000adfd:	31 c9                	xor    ecx,ecx
c000adff:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae06:	75 02                	jne    c000ae0a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae08:	89 cd                	mov    ebp,ecx
c000ae0a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae11:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae18:	c1 e2 08             	shl    edx,0x8
c000ae1b:	c1 e6 10             	shl    esi,0x10
c000ae1e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae26:	09 f2                	or     edx,esi
c000ae28:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae30:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae37:	83 c0 10             	add    eax,0x10
c000ae3a:	09 f2                	or     edx,esi
c000ae3c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae43:	c1 e6 18             	shl    esi,0x18
c000ae46:	09 f2                	or     edx,esi
c000ae48:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae4f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae53:	c1 e6 10             	shl    esi,0x10
c000ae56:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae5d:	c1 e2 08             	shl    edx,0x8
c000ae60:	09 f2                	or     edx,esi
c000ae62:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae69:	09 f2                	or     edx,esi
c000ae6b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae72:	c1 e6 18             	shl    esi,0x18
c000ae75:	09 f2                	or     edx,esi
c000ae77:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae7b:	41                   	inc    ecx
c000ae7c:	83 f9 04             	cmp    ecx,0x4
c000ae7f:	0f 85 7a ff ff ff    	jne    c000adff <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae89:	83 f0 01             	xor    eax,0x1
c000ae8c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae90:	75 4f                	jne    c000aee1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae96:	83 f0 01             	xor    eax,0x1
c000ae99:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae9d:	75 42                	jne    c000aee1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae9f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aea7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000aeaf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000aeb5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000aebb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000aec1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000aec5:	89 f7                	mov    edi,esi
c000aec7:	c1 e0 0a             	shl    eax,0xa
c000aeca:	c1 ff 1f             	sar    edi,0x1f
c000aecd:	57                   	push   edi
c000aece:	56                   	push   esi
c000aecf:	52                   	push   edx
c000aed0:	50                   	push   eax
c000aed1:	e8 ae 69 01 00       	call   c0021884 <__udivdi3>
c000aed6:	83 c4 10             	add    esp,0x10
c000aed9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aedd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000aee1:	89 e8                	mov    eax,ebp
c000aee3:	0f b6 e8             	movzx  ebp,al
c000aee6:	85 ed                	test   ebp,ebp
c000aee8:	74 50                	je     c000af3a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000aeea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000aef2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aef6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000aefa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aefe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af02:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af06:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af16:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af1a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af1e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af22:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af2a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af2e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af32:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af36:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af3a:	31 ed                	xor    ebp,ebp
c000af3c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af40:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af44:	89 f8                	mov    eax,edi
c000af46:	09 f0                	or     eax,esi
c000af48:	74 1e                	je     c000af68 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af4a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af4e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af52:	89 d1                	mov    ecx,edx
c000af54:	09 c1                	or     ecx,eax
c000af56:	74 10                	je     c000af68 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af58:	83 ec 0c             	sub    esp,0xc
c000af5b:	57                   	push   edi
c000af5c:	56                   	push   esi
c000af5d:	52                   	push   edx
c000af5e:	50                   	push   eax
c000af5f:	53                   	push   ebx
c000af60:	e8 d9 fc ff ff       	call   c000ac3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af65:	83 c4 20             	add    esp,0x20
c000af68:	45                   	inc    ebp
c000af69:	83 fd 04             	cmp    ebp,0x4
c000af6c:	75 ce                	jne    c000af3c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af6e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af74:	5b                   	pop    ebx
c000af75:	5e                   	pop    esi
c000af76:	5f                   	pop    edi
c000af77:	5d                   	pop    ebp
c000af78:	c3                   	ret    
c000af79:	66 90                	xchg   ax,ax
c000af7b:	90                   	nop

c000af7c <Serial::Serial(char const*)>:
c000af7c:	83 ec 0c             	sub    esp,0xc
c000af7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af83:	83 ec 08             	sub    esp,0x8
c000af86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af8a:	50                   	push   eax
c000af8b:	e8 ce eb ff ff       	call   c0009b5e <Device::Device(char const*)>
c000af90:	83 c4 10             	add    esp,0x10
c000af93:	ba f0 36 02 c0       	mov    edx,0xc00236f0
c000af98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9c:	89 10                	mov    DWORD PTR [eax],edx
c000af9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000afac:	90                   	nop
c000afad:	83 c4 0c             	add    esp,0xc
c000afb0:	c3                   	ret    
c000afb1:	90                   	nop
c000afb2:	66 90                	xchg   ax,ax

c000afb4 <Serial::~Serial()>:
c000afb4:	83 ec 0c             	sub    esp,0xc
c000afb7:	ba f0 36 02 c0       	mov    edx,0xc00236f0
c000afbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc0:	89 10                	mov    DWORD PTR [eax],edx
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	83 ec 0c             	sub    esp,0xc
c000afc9:	50                   	push   eax
c000afca:	e8 2f e9 ff ff       	call   c00098fe <Device::~Device()>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	90                   	nop
c000afd3:	83 c4 0c             	add    esp,0xc
c000afd6:	c3                   	ret    
c000afd7:	90                   	nop

c000afd8 <Serial::~Serial()>:
c000afd8:	83 ec 0c             	sub    esp,0xc
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe2:	e8 cd ff ff ff       	call   c000afb4 <Serial::~Serial()>
c000afe7:	83 c4 10             	add    esp,0x10
c000afea:	83 ec 08             	sub    esp,0x8
c000afed:	68 58 01 00 00       	push   0x158
c000aff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aff6:	e8 24 23 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000affb:	83 c4 10             	add    esp,0x10
c000affe:	83 c4 0c             	add    esp,0xc
c000b001:	c3                   	ret    
c000b002:	66 90                	xchg   ax,ax

c000b004 <Timer::Timer(char const*)>:
c000b004:	83 ec 0c             	sub    esp,0xc
c000b007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b00b:	83 ec 08             	sub    esp,0x8
c000b00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b012:	50                   	push   eax
c000b013:	e8 46 eb ff ff       	call   c0009b5e <Device::Device(char const*)>
c000b018:	83 c4 10             	add    esp,0x10
c000b01b:	ba cc 37 02 c0       	mov    edx,0xc00237cc
c000b020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b024:	89 10                	mov    DWORD PTR [eax],edx
c000b026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b034:	90                   	nop
c000b035:	83 c4 0c             	add    esp,0xc
c000b038:	c3                   	ret    
c000b039:	90                   	nop
c000b03a:	66 90                	xchg   ax,ax

c000b03c <Timer::~Timer()>:
c000b03c:	83 ec 0c             	sub    esp,0xc
c000b03f:	ba cc 37 02 c0       	mov    edx,0xc00237cc
c000b044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b048:	89 10                	mov    DWORD PTR [eax],edx
c000b04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04e:	83 ec 0c             	sub    esp,0xc
c000b051:	50                   	push   eax
c000b052:	e8 a7 e8 ff ff       	call   c00098fe <Device::~Device()>
c000b057:	83 c4 10             	add    esp,0x10
c000b05a:	90                   	nop
c000b05b:	83 c4 0c             	add    esp,0xc
c000b05e:	c3                   	ret    
c000b05f:	90                   	nop

c000b060 <Timer::~Timer()>:
c000b060:	83 ec 0c             	sub    esp,0xc
c000b063:	83 ec 0c             	sub    esp,0xc
c000b066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b06a:	e8 cd ff ff ff       	call   c000b03c <Timer::~Timer()>
c000b06f:	83 c4 10             	add    esp,0x10
c000b072:	83 ec 08             	sub    esp,0x8
c000b075:	68 5c 01 00 00       	push   0x15c
c000b07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b07e:	e8 9c 22 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	83 c4 0c             	add    esp,0xc
c000b089:	c3                   	ret    

c000b08a <Timer::read()>:
c000b08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b094:	c3                   	ret    

c000b095 <setupTimer(int)>:
c000b095:	53                   	push   ebx
c000b096:	83 ec 14             	sub    esp,0x14
c000b099:	68 5c 01 00 00       	push   0x15c
c000b09e:	e8 f4 4b 00 00       	call   c000fc97 <malloc>
c000b0a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0a6:	89 c3                	mov    ebx,eax
c000b0a8:	e8 8f 60 01 00       	call   c002113c <PIT::PIT()>
c000b0ad:	58                   	pop    eax
c000b0ae:	5a                   	pop    edx
c000b0af:	53                   	push   ebx
c000b0b0:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c000b0b6:	e8 41 e9 ff ff       	call   c00099fc <Device::addChild(Device*)>
c000b0bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0bd:	6a 00                	push   0x0
c000b0bf:	6a 00                	push   0x0
c000b0c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b0c5:	53                   	push   ebx
c000b0c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0c9:	89 d8                	mov    eax,ebx
c000b0cb:	83 c4 28             	add    esp,0x28
c000b0ce:	5b                   	pop    ebx
c000b0cf:	c3                   	ret    

c000b0d0 <timerHandler(unsigned int)>:
c000b0d0:	57                   	push   edi
c000b0d1:	31 d2                	xor    edx,edx
c000b0d3:	56                   	push   esi
c000b0d4:	53                   	push   ebx
c000b0d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0d9:	01 1d 50 bb 02 c0    	add    DWORD PTR ds:0xc002bb50,ebx
c000b0df:	11 15 54 bb 02 c0    	adc    DWORD PTR ds:0xc002bb54,edx
c000b0e5:	80 3d d5 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d5,0x0
c000b0ec:	75 12                	jne    c000b100 <timerHandler(unsigned int)+0x30>
c000b0ee:	c7 44 24 10 7f 37 02 c0 	mov    DWORD PTR [esp+0x10],0xc002377f
c000b0f6:	5b                   	pop    ebx
c000b0f7:	5e                   	pop    esi
c000b0f8:	5f                   	pop    edi
c000b0f9:	e9 66 be ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c000b0fe:	66 90                	xchg   ax,ax
c000b100:	fa                   	cli    
c000b101:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	68 40 ea 02 c0       	push   0xc002ea40
c000b10f:	e8 08 6b 01 00       	call   c0021c1c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b114:	83 c4 10             	add    esp,0x10
c000b117:	84 c0                	test   al,al
c000b119:	0f 85 a9 00 00 00    	jne    c000b1c8 <timerHandler(unsigned int)+0xf8>
c000b11f:	83 ec 0c             	sub    esp,0xc
c000b122:	68 40 ea 02 c0       	push   0xc002ea40
c000b127:	e8 0c 6b 01 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	89 c6                	mov    esi,eax
c000b131:	8d 76 00             	lea    esi,[esi+0x0]
c000b134:	83 ec 0c             	sub    esp,0xc
c000b137:	68 40 ea 02 c0       	push   0xc002ea40
c000b13c:	e8 f7 6a 01 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b141:	c7 04 24 40 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea40
c000b148:	89 c7                	mov    edi,eax
c000b14a:	e8 f1 6a 01 00       	call   c0021c40 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b14f:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b152:	83 c4 10             	add    esp,0x10
c000b155:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b158:	39 15 50 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb50,edx
c000b15e:	a1 54 bb 02 c0       	mov    eax,ds:0xc002bb54
c000b163:	19 c8                	sbb    eax,ecx
c000b165:	72 21                	jb     c000b188 <timerHandler(unsigned int)+0xb8>
c000b167:	83 ec 0c             	sub    esp,0xc
c000b16a:	57                   	push   edi
c000b16b:	e8 18 c1 00 00       	call   c0017288 <unblockTask(ThreadControlBlock*)>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	39 fe                	cmp    esi,edi
c000b175:	75 25                	jne    c000b19c <timerHandler(unsigned int)+0xcc>
c000b177:	83 ec 0c             	sub    esp,0xc
c000b17a:	68 40 ea 02 c0       	push   0xc002ea40
c000b17f:	e8 b4 6a 01 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b184:	89 c6                	mov    esi,eax
c000b186:	eb 10                	jmp    c000b198 <timerHandler(unsigned int)+0xc8>
c000b188:	50                   	push   eax
c000b189:	50                   	push   eax
c000b18a:	57                   	push   edi
c000b18b:	68 40 ea 02 c0       	push   0xc002ea40
c000b190:	e8 67 6b 01 00       	call   c0021cfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b195:	8d 76 00             	lea    esi,[esi+0x0]
c000b198:	83 c4 10             	add    esp,0x10
c000b19b:	90                   	nop
c000b19c:	83 ec 0c             	sub    esp,0xc
c000b19f:	68 40 ea 02 c0       	push   0xc002ea40
c000b1a4:	e8 73 6a 01 00       	call   c0021c1c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b1a9:	83 c4 10             	add    esp,0x10
c000b1ac:	84 c0                	test   al,al
c000b1ae:	75 18                	jne    c000b1c8 <timerHandler(unsigned int)+0xf8>
c000b1b0:	83 ec 0c             	sub    esp,0xc
c000b1b3:	68 40 ea 02 c0       	push   0xc002ea40
c000b1b8:	e8 7b 6a 01 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1bd:	83 c4 10             	add    esp,0x10
c000b1c0:	39 f0                	cmp    eax,esi
c000b1c2:	0f 85 6c ff ff ff    	jne    c000b134 <timerHandler(unsigned int)+0x64>
c000b1c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b1d0:	85 c0                	test   eax,eax
c000b1d2:	74 48                	je     c000b21c <timerHandler(unsigned int)+0x14c>
c000b1d4:	80 3d d4 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d4,0x0
c000b1db:	74 3f                	je     c000b21c <timerHandler(unsigned int)+0x14c>
c000b1dd:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b1e2:	76 1c                	jbe    c000b200 <timerHandler(unsigned int)+0x130>
c000b1e4:	83 ec 0c             	sub    esp,0xc
c000b1e7:	68 95 37 02 c0       	push   0xc0023795
c000b1ec:	e8 73 bd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b1f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1f6:	83 c4 10             	add    esp,0x10
c000b1f9:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b200:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b206:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b209:	89 c1                	mov    ecx,eax
c000b20b:	29 d9                	sub    ecx,ebx
c000b20d:	39 d8                	cmp    eax,ebx
c000b20f:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b212:	77 08                	ja     c000b21c <timerHandler(unsigned int)+0x14c>
c000b214:	e8 13 bd 00 00       	call   c0016f2c <schedule()>
c000b219:	8d 76 00             	lea    esi,[esi+0x0]
c000b21c:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000b223:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000b22a:	75 04                	jne    c000b230 <timerHandler(unsigned int)+0x160>
c000b22c:	fb                   	sti    
c000b22d:	8d 76 00             	lea    esi,[esi+0x0]
c000b230:	5b                   	pop    ebx
c000b231:	5e                   	pop    esi
c000b232:	5f                   	pop    edi
c000b233:	c3                   	ret    

c000b234 <VCache::VCache(PhysicalDisk*)>:
c000b234:	53                   	push   ebx
c000b235:	83 ec 18             	sub    esp,0x18
c000b238:	ba 3c 38 02 c0       	mov    edx,0xc002383c
c000b23d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b241:	89 10                	mov    DWORD PTR [eax],edx
c000b243:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b247:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b24e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b252:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b25d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b264:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b26b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b26f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b276:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b27d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b281:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b28c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b294:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b29b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b2a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2a6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b2aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ae:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b2b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b2ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2be:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b2c5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b2cd:	83 ec 0c             	sub    esp,0xc
c000b2d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2d4:	e8 be 49 00 00       	call   c000fc97 <malloc>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	89 c3                	mov    ebx,eax
c000b2de:	83 ec 0c             	sub    esp,0xc
c000b2e1:	53                   	push   ebx
c000b2e2:	e8 dd 4c 00 00       	call   c000ffc4 <Mutex::Mutex()>
c000b2e7:	83 c4 10             	add    esp,0x10
c000b2ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ee:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b2f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b2f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b2fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b300:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b307:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b30b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b315:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b318:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b31c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b322:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b328:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b32c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b32f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b336:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b33a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b33e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b344:	05 00 01 00 00       	add    eax,0x100
c000b349:	c1 e0 04             	shl    eax,0x4
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	50                   	push   eax
c000b350:	e8 42 49 00 00       	call   c000fc97 <malloc>
c000b355:	83 c4 10             	add    esp,0x10
c000b358:	89 c2                	mov    edx,eax
c000b35a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b35e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b365:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b36c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b370:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b374:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b378:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b37e:	89 d0                	mov    eax,edx
c000b380:	c1 e0 02             	shl    eax,0x2
c000b383:	01 d0                	add    eax,edx
c000b385:	c1 e0 04             	shl    eax,0x4
c000b388:	83 ec 0c             	sub    esp,0xc
c000b38b:	50                   	push   eax
c000b38c:	e8 06 49 00 00       	call   c000fc97 <malloc>
c000b391:	83 c4 10             	add    esp,0x10
c000b394:	89 c2                	mov    edx,eax
c000b396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b39a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b39d:	90                   	nop
c000b39e:	83 c4 18             	add    esp,0x18
c000b3a1:	5b                   	pop    ebx
c000b3a2:	c3                   	ret    
c000b3a3:	90                   	nop

c000b3a4 <VCache::invalidateReadBuffer()>:
c000b3a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b3ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b3b2:	c3                   	ret    
c000b3b3:	90                   	nop

c000b3b4 <VCache::writeWriteBuffer()>:
c000b3b4:	53                   	push   ebx
c000b3b5:	83 ec 08             	sub    esp,0x8
c000b3b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b3bc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b3c0:	74 1e                	je     c000b3e0 <VCache::writeWriteBuffer()+0x2c>
c000b3c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b3c5:	83 ec 0c             	sub    esp,0xc
c000b3c8:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3ca:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b3cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b3d0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b3d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b3d6:	50                   	push   eax
c000b3d7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b3da:	83 c4 20             	add    esp,0x20
c000b3dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b3e0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b3e7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b3ee:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b3f2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b3f9:	83 c4 08             	add    esp,0x8
c000b3fc:	5b                   	pop    ebx
c000b3fd:	c3                   	ret    
c000b3fe:	66 90                	xchg   ax,ax

c000b400 <VCache::~VCache()>:
c000b400:	83 ec 0c             	sub    esp,0xc
c000b403:	ba 3c 38 02 c0       	mov    edx,0xc002383c
c000b408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40c:	89 10                	mov    DWORD PTR [eax],edx
c000b40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b412:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b415:	0f b6 c0             	movzx  eax,al
c000b418:	85 c0                	test   eax,eax
c000b41a:	74 10                	je     c000b42c <VCache::~VCache()+0x2c>
c000b41c:	83 ec 0c             	sub    esp,0xc
c000b41f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b423:	e8 8c ff ff ff       	call   c000b3b4 <VCache::writeWriteBuffer()>
c000b428:	83 c4 10             	add    esp,0x10
c000b42b:	90                   	nop
c000b42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b430:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b433:	83 ec 0c             	sub    esp,0xc
c000b436:	50                   	push   eax
c000b437:	e8 6b 48 00 00       	call   c000fca7 <free>
c000b43c:	83 c4 10             	add    esp,0x10
c000b43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b443:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b446:	83 ec 0c             	sub    esp,0xc
c000b449:	50                   	push   eax
c000b44a:	e8 58 48 00 00       	call   c000fca7 <free>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	90                   	nop
c000b453:	83 c4 0c             	add    esp,0xc
c000b456:	c3                   	ret    
c000b457:	90                   	nop

c000b458 <VCache::~VCache()>:
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	83 ec 0c             	sub    esp,0xc
c000b45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b462:	e8 99 ff ff ff       	call   c000b400 <VCache::~VCache()>
c000b467:	83 c4 10             	add    esp,0x10
c000b46a:	83 ec 08             	sub    esp,0x8
c000b46d:	6a 44                	push   0x44
c000b46f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b473:	e8 a7 1e 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	83 c4 0c             	add    esp,0xc
c000b47e:	c3                   	ret    
c000b47f:	90                   	nop

c000b480 <VCache::write(unsigned long long, int, void*)>:
c000b480:	55                   	push   ebp
c000b481:	57                   	push   edi
c000b482:	56                   	push   esi
c000b483:	53                   	push   ebx
c000b484:	83 ec 1c             	sub    esp,0x1c
c000b487:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b48b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b48f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b493:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b497:	e8 b0 b7 00 00       	call   c0016c4c <KeDisablePreemption()>
c000b49c:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4a1:	50                   	push   eax
c000b4a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4a5:	0f af c3             	imul   eax,ebx
c000b4a8:	05 ff 0f 00 00       	add    eax,0xfff
c000b4ad:	99                   	cdq    
c000b4ae:	f7 f9                	idiv   ecx
c000b4b0:	50                   	push   eax
c000b4b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4b5:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b4bb:	e8 5e 8d 00 00       	call   c001421e <VAS::canLockPages(unsigned long, int)>
c000b4c0:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b4c4:	83 c4 10             	add    esp,0x10
c000b4c7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4cc:	74 2a                	je     c000b4f8 <VCache::write(unsigned long long, int, void*)+0x78>
c000b4ce:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4d3:	50                   	push   eax
c000b4d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4d7:	0f af c3             	imul   eax,ebx
c000b4da:	05 ff 0f 00 00       	add    eax,0xfff
c000b4df:	99                   	cdq    
c000b4e0:	f7 f9                	idiv   ecx
c000b4e2:	50                   	push   eax
c000b4e3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4e7:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b4ed:	e8 26 91 00 00       	call   c0014618 <VAS::lockPages(unsigned long, int)>
c000b4f2:	83 c4 10             	add    esp,0x10
c000b4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f8:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b4fc:	74 0e                	je     c000b50c <VCache::write(unsigned long long, int, void*)+0x8c>
c000b4fe:	83 ec 0c             	sub    esp,0xc
c000b501:	55                   	push   ebp
c000b502:	e8 9d fe ff ff       	call   c000b3a4 <VCache::invalidateReadBuffer()>
c000b507:	83 c4 10             	add    esp,0x10
c000b50a:	66 90                	xchg   ax,ax
c000b50c:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b510:	74 72                	je     c000b584 <VCache::write(unsigned long long, int, void*)+0x104>
c000b512:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b515:	89 c8                	mov    eax,ecx
c000b517:	99                   	cdq    
c000b518:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b51b:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b51e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b522:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b52a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b52e:	31 f0                	xor    eax,esi
c000b530:	31 fa                	xor    edx,edi
c000b532:	09 d0                	or     eax,edx
c000b534:	75 42                	jne    c000b578 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b536:	83 fb 01             	cmp    ebx,0x1
c000b539:	75 3d                	jne    c000b578 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b53e:	89 cf                	mov    edi,ecx
c000b540:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b546:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b54a:	0f af f8             	imul   edi,eax
c000b54d:	89 c1                	mov    ecx,eax
c000b54f:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b552:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b554:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b557:	40                   	inc    eax
c000b558:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b55b:	83 f8 50             	cmp    eax,0x50
c000b55e:	0f 85 a8 00 00 00    	jne    c000b60c <VCache::write(unsigned long long, int, void*)+0x18c>
c000b564:	83 ec 0c             	sub    esp,0xc
c000b567:	55                   	push   ebp
c000b568:	e8 47 fe ff ff       	call   c000b3b4 <VCache::writeWriteBuffer()>
c000b56d:	83 c4 10             	add    esp,0x10
c000b570:	e9 97 00 00 00       	jmp    c000b60c <VCache::write(unsigned long long, int, void*)+0x18c>
c000b575:	8d 76 00             	lea    esi,[esi+0x0]
c000b578:	83 ec 0c             	sub    esp,0xc
c000b57b:	55                   	push   ebp
c000b57c:	e8 33 fe ff ff       	call   c000b3b4 <VCache::writeWriteBuffer()>
c000b581:	83 c4 10             	add    esp,0x10
c000b584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b587:	83 fb 4f             	cmp    ebx,0x4f
c000b58a:	7f 20                	jg     c000b5ac <VCache::write(unsigned long long, int, void*)+0x12c>
c000b58c:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b58f:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b592:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b595:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b599:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b59c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5a2:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5a8:	eb 62                	jmp    c000b60c <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5aa:	66 90                	xchg   ax,ax
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5b1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b5b5:	53                   	push   ebx
c000b5b6:	57                   	push   edi
c000b5b7:	56                   	push   esi
c000b5b8:	50                   	push   eax
c000b5b9:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b5bc:	83 c4 20             	add    esp,0x20
c000b5bf:	89 c6                	mov    esi,eax
c000b5c1:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5c6:	74 28                	je     c000b5f0 <VCache::write(unsigned long long, int, void*)+0x170>
c000b5c8:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5cd:	52                   	push   edx
c000b5ce:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5d2:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5d8:	99                   	cdq    
c000b5d9:	f7 f9                	idiv   ecx
c000b5db:	50                   	push   eax
c000b5dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5e0:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b5e6:	e8 6f 8c 00 00       	call   c001425a <VAS::unlockPages(unsigned long, int)>
c000b5eb:	83 c4 10             	add    esp,0x10
c000b5ee:	66 90                	xchg   ax,ax
c000b5f0:	e8 7f b6 00 00       	call   c0016c74 <KeRestorePreemption()>
c000b5f5:	85 f6                	test   esi,esi
c000b5f7:	74 4b                	je     c000b644 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5f9:	83 ec 0c             	sub    esp,0xc
c000b5fc:	68 f4 37 02 c0       	push   0xc00237f4
c000b601:	e8 5e b9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b606:	83 c4 10             	add    esp,0x10
c000b609:	eb 39                	jmp    c000b644 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b60b:	90                   	nop
c000b60c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b611:	74 29                	je     c000b63c <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b613:	b9 00 10 00 00       	mov    ecx,0x1000
c000b618:	50                   	push   eax
c000b619:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b61d:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b623:	99                   	cdq    
c000b624:	f7 f9                	idiv   ecx
c000b626:	50                   	push   eax
c000b627:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b62b:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b631:	e8 24 8c 00 00       	call   c001425a <VAS::unlockPages(unsigned long, int)>
c000b636:	83 c4 10             	add    esp,0x10
c000b639:	8d 76 00             	lea    esi,[esi+0x0]
c000b63c:	e8 33 b6 00 00       	call   c0016c74 <KeRestorePreemption()>
c000b641:	31 f6                	xor    esi,esi
c000b643:	90                   	nop
c000b644:	83 c4 1c             	add    esp,0x1c
c000b647:	89 f0                	mov    eax,esi
c000b649:	5b                   	pop    ebx
c000b64a:	5e                   	pop    esi
c000b64b:	5f                   	pop    edi
c000b64c:	5d                   	pop    ebp
c000b64d:	c3                   	ret    

c000b64e <VCache::read(unsigned long long, int, void*)>:
c000b64e:	55                   	push   ebp
c000b64f:	57                   	push   edi
c000b650:	bf 00 10 00 00       	mov    edi,0x1000
c000b655:	56                   	push   esi
c000b656:	53                   	push   ebx
c000b657:	83 ec 2c             	sub    esp,0x2c
c000b65a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b65e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b662:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b666:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b66a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b66e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b672:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b676:	e8 d1 b5 00 00       	call   c0016c4c <KeDisablePreemption()>
c000b67b:	50                   	push   eax
c000b67c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b67f:	0f af c6             	imul   eax,esi
c000b682:	05 ff 0f 00 00       	add    eax,0xfff
c000b687:	99                   	cdq    
c000b688:	f7 ff                	idiv   edi
c000b68a:	50                   	push   eax
c000b68b:	55                   	push   ebp
c000b68c:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b692:	e8 87 8b 00 00       	call   c001421e <VAS::canLockPages(unsigned long, int)>
c000b697:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b69b:	83 c4 10             	add    esp,0x10
c000b69e:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b6a3:	74 1f                	je     c000b6c4 <VCache::read(unsigned long long, int, void*)+0x76>
c000b6a5:	50                   	push   eax
c000b6a6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6a9:	0f af c6             	imul   eax,esi
c000b6ac:	05 ff 0f 00 00       	add    eax,0xfff
c000b6b1:	99                   	cdq    
c000b6b2:	f7 ff                	idiv   edi
c000b6b4:	50                   	push   eax
c000b6b5:	55                   	push   ebp
c000b6b6:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b6bc:	e8 57 8f 00 00       	call   c0014618 <VAS::lockPages(unsigned long, int)>
c000b6c1:	83 c4 10             	add    esp,0x10
c000b6c4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b6c8:	74 0e                	je     c000b6d8 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b6ca:	83 ec 0c             	sub    esp,0xc
c000b6cd:	53                   	push   ebx
c000b6ce:	e8 e1 fc ff ff       	call   c000b3b4 <VCache::writeWriteBuffer()>
c000b6d3:	83 c4 10             	add    esp,0x10
c000b6d6:	66 90                	xchg   ax,ax
c000b6d8:	83 fe 01             	cmp    esi,0x1
c000b6db:	0f 85 ef 00 00 00    	jne    c000b7d0 <VCache::read(unsigned long long, int, void*)+0x182>
c000b6e1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b6e4:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b6eb:	0f 85 df 00 00 00    	jne    c000b7d0 <VCache::read(unsigned long long, int, void*)+0x182>
c000b6f1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b6f4:	89 fe                	mov    esi,edi
c000b6f6:	f7 de                	neg    esi
c000b6f8:	89 f0                	mov    eax,esi
c000b6fa:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b6fe:	c1 f8 1f             	sar    eax,0x1f
c000b701:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b705:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b709:	89 f0                	mov    eax,esi
c000b70b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b70f:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b713:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b717:	89 f2                	mov    edx,esi
c000b719:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b71e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b722:	74 0c                	je     c000b730 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b724:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b727:	75 07                	jne    c000b730 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b729:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b72c:	74 4e                	je     c000b77c <VCache::read(unsigned long long, int, void*)+0x12e>
c000b72e:	66 90                	xchg   ax,ax
c000b730:	83 ec 0c             	sub    esp,0xc
c000b733:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b737:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b73a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b73d:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b73f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b742:	57                   	push   edi
c000b743:	52                   	push   edx
c000b744:	50                   	push   eax
c000b745:	51                   	push   ecx
c000b746:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b749:	83 c4 20             	add    esp,0x20
c000b74c:	89 c7                	mov    edi,eax
c000b74e:	85 c0                	test   eax,eax
c000b750:	74 2a                	je     c000b77c <VCache::read(unsigned long long, int, void*)+0x12e>
c000b752:	83 ec 0c             	sub    esp,0xc
c000b755:	68 0c 38 02 c0       	push   0xc002380c
c000b75a:	e8 05 b8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b75f:	83 c4 10             	add    esp,0x10
c000b762:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b767:	0f 84 b3 00 00 00    	je     c000b820 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b76d:	51                   	push   ecx
c000b76e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b771:	05 ff 0f 00 00       	add    eax,0xfff
c000b776:	e9 8d 00 00 00       	jmp    c000b808 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b77b:	90                   	nop
c000b77c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b77f:	89 ef                	mov    edi,ebp
c000b781:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b787:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b78a:	8d 70 ff             	lea    esi,[eax-0x1]
c000b78d:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b791:	0f af f1             	imul   esi,ecx
c000b794:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b797:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b799:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b79e:	74 24                	je     c000b7c4 <VCache::read(unsigned long long, int, void*)+0x176>
c000b7a0:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7a5:	52                   	push   edx
c000b7a6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7a9:	05 ff 0f 00 00       	add    eax,0xfff
c000b7ae:	99                   	cdq    
c000b7af:	f7 f9                	idiv   ecx
c000b7b1:	50                   	push   eax
c000b7b2:	55                   	push   ebp
c000b7b3:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b7b9:	e8 9c 8a 00 00       	call   c001425a <VAS::unlockPages(unsigned long, int)>
c000b7be:	83 c4 10             	add    esp,0x10
c000b7c1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7c4:	e8 ab b4 00 00       	call   c0016c74 <KeRestorePreemption()>
c000b7c9:	31 ff                	xor    edi,edi
c000b7cb:	eb 5b                	jmp    c000b828 <VCache::read(unsigned long long, int, void*)+0x1da>
c000b7cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b7d0:	83 ec 0c             	sub    esp,0xc
c000b7d3:	53                   	push   ebx
c000b7d4:	e8 cb fb ff ff       	call   c000b3a4 <VCache::invalidateReadBuffer()>
c000b7d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7de:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b7e1:	56                   	push   esi
c000b7e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7ea:	50                   	push   eax
c000b7eb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b7ee:	83 c4 20             	add    esp,0x20
c000b7f1:	89 c7                	mov    edi,eax
c000b7f3:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b7f8:	74 26                	je     c000b820 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7fa:	50                   	push   eax
c000b7fb:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b7ff:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b805:	8d 76 00             	lea    esi,[esi+0x0]
c000b808:	b9 00 10 00 00       	mov    ecx,0x1000
c000b80d:	99                   	cdq    
c000b80e:	f7 f9                	idiv   ecx
c000b810:	50                   	push   eax
c000b811:	55                   	push   ebp
c000b812:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b818:	e8 3d 8a 00 00       	call   c001425a <VAS::unlockPages(unsigned long, int)>
c000b81d:	83 c4 10             	add    esp,0x10
c000b820:	e8 4f b4 00 00       	call   c0016c74 <KeRestorePreemption()>
c000b825:	8d 76 00             	lea    esi,[esi+0x0]
c000b828:	83 c4 2c             	add    esp,0x2c
c000b82b:	89 f8                	mov    eax,edi
c000b82d:	5b                   	pop    ebx
c000b82e:	5e                   	pop    esi
c000b82f:	5f                   	pop    edi
c000b830:	5d                   	pop    ebp
c000b831:	c3                   	ret    

c000b832 <Video::putrect(int, int, int, int, unsigned int)>:
c000b832:	55                   	push   ebp
c000b833:	57                   	push   edi
c000b834:	56                   	push   esi
c000b835:	53                   	push   ebx
c000b836:	83 ec 1c             	sub    esp,0x1c
c000b839:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b83d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b841:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b845:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b849:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b84d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b851:	01 df                	add    edi,ebx
c000b853:	39 fb                	cmp    ebx,edi
c000b855:	7d 1f                	jge    c000b876 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b857:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b85b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b85f:	7d 12                	jge    c000b873 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b861:	8b 16                	mov    edx,DWORD PTR [esi]
c000b863:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b867:	53                   	push   ebx
c000b868:	55                   	push   ebp
c000b869:	45                   	inc    ebp
c000b86a:	56                   	push   esi
c000b86b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b86e:	83 c4 10             	add    esp,0x10
c000b871:	eb e8                	jmp    c000b85b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b873:	43                   	inc    ebx
c000b874:	eb dd                	jmp    c000b853 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b876:	83 c4 1c             	add    esp,0x1c
c000b879:	5b                   	pop    ebx
c000b87a:	5e                   	pop    esi
c000b87b:	5f                   	pop    edi
c000b87c:	5d                   	pop    ebp
c000b87d:	c3                   	ret    

c000b87e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b87e:	55                   	push   ebp
c000b87f:	57                   	push   edi
c000b880:	31 ff                	xor    edi,edi
c000b882:	56                   	push   esi
c000b883:	53                   	push   ebx
c000b884:	83 ec 1c             	sub    esp,0x1c
c000b887:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b88b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b88f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b896:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b89b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b89f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8a3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8a7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b8aa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8ae:	01 f9                	add    ecx,edi
c000b8b0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b8b4:	7d 2f                	jge    c000b8e5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b8b6:	31 f6                	xor    esi,esi
c000b8b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8bc:	01 f2                	add    edx,esi
c000b8be:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8c2:	7d 1a                	jge    c000b8de <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b8c4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b8c7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b8ca:	46                   	inc    esi
c000b8cb:	51                   	push   ecx
c000b8cc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b8d0:	52                   	push   edx
c000b8d1:	55                   	push   ebp
c000b8d2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8d5:	83 c4 10             	add    esp,0x10
c000b8d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b8dc:	eb da                	jmp    c000b8b8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b8de:	47                   	inc    edi
c000b8df:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b8e3:	eb c5                	jmp    c000b8aa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b8e5:	83 c4 1c             	add    esp,0x1c
c000b8e8:	5b                   	pop    ebx
c000b8e9:	5e                   	pop    esi
c000b8ea:	5f                   	pop    edi
c000b8eb:	5d                   	pop    ebp
c000b8ec:	c3                   	ret    
c000b8ed:	90                   	nop

c000b8ee <Video::blit(unsigned int*, int, int, int, int)>:
c000b8ee:	55                   	push   ebp
c000b8ef:	57                   	push   edi
c000b8f0:	56                   	push   esi
c000b8f1:	53                   	push   ebx
c000b8f2:	83 ec 1c             	sub    esp,0x1c
c000b8f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8fd:	85 c0                	test   eax,eax
c000b8ff:	79 02                	jns    c000b903 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b901:	31 c0                	xor    eax,eax
c000b903:	c1 e0 02             	shl    eax,0x2
c000b906:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b90a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b90e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b912:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b916:	39 d8                	cmp    eax,ebx
c000b918:	7e 49                	jle    c000b963 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b91a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b920:	7c 41                	jl     c000b963 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b922:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b926:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b92a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b92e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b932:	39 f9                	cmp    ecx,edi
c000b934:	7e 22                	jle    c000b958 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b936:	83 c5 04             	add    ebp,0x4
c000b939:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b93f:	7c 14                	jl     c000b955 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b941:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b943:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b946:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b94a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b94e:	56                   	push   esi
c000b94f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b952:	83 c4 10             	add    esp,0x10
c000b955:	47                   	inc    edi
c000b956:	eb d2                	jmp    c000b92a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b958:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b95c:	43                   	inc    ebx
c000b95d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b961:	eb ab                	jmp    c000b90e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b963:	83 c4 1c             	add    esp,0x1c
c000b966:	5b                   	pop    ebx
c000b967:	5e                   	pop    esi
c000b968:	5f                   	pop    edi
c000b969:	5d                   	pop    ebp
c000b96a:	c3                   	ret    
c000b96b:	90                   	nop

c000b96c <Video::clearScreen(unsigned int)>:
c000b96c:	57                   	push   edi
c000b96d:	56                   	push   esi
c000b96e:	53                   	push   ebx
c000b96f:	31 db                	xor    ebx,ebx
c000b971:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b975:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b97b:	7e 1f                	jle    c000b99c <Video::clearScreen(unsigned int)+0x30>
c000b97d:	31 ff                	xor    edi,edi
c000b97f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b985:	7e 12                	jle    c000b999 <Video::clearScreen(unsigned int)+0x2d>
c000b987:	8b 06                	mov    eax,DWORD PTR [esi]
c000b989:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b98d:	53                   	push   ebx
c000b98e:	57                   	push   edi
c000b98f:	47                   	inc    edi
c000b990:	56                   	push   esi
c000b991:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b994:	83 c4 10             	add    esp,0x10
c000b997:	eb e6                	jmp    c000b97f <Video::clearScreen(unsigned int)+0x13>
c000b999:	43                   	inc    ebx
c000b99a:	eb d9                	jmp    c000b975 <Video::clearScreen(unsigned int)+0x9>
c000b99c:	5b                   	pop    ebx
c000b99d:	5e                   	pop    esi
c000b99e:	5f                   	pop    edi
c000b99f:	c3                   	ret    

c000b9a0 <Video::putpixel(int, int, unsigned int)>:
c000b9a0:	c7 44 24 04 44 38 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023844
c000b9a8:	e9 31 46 00 00       	jmp    c000ffde <KePanic(char const*)>
c000b9ad:	90                   	nop

c000b9ae <Video::readPixelApprox(int, int)>:
c000b9ae:	83 ec 18             	sub    esp,0x18
c000b9b1:	68 65 38 02 c0       	push   0xc0023865
c000b9b6:	e8 23 46 00 00       	call   c000ffde <KePanic(char const*)>
c000b9bb:	31 c0                	xor    eax,eax
c000b9bd:	83 c4 1c             	add    esp,0x1c
c000b9c0:	c3                   	ret    
c000b9c1:	90                   	nop

c000b9c2 <Video::Video(char const*)>:
c000b9c2:	83 ec 0c             	sub    esp,0xc
c000b9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c9:	83 ec 08             	sub    esp,0x8
c000b9cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d0:	50                   	push   eax
c000b9d1:	e8 88 e1 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000b9d6:	83 c4 10             	add    esp,0x10
c000b9d9:	ba 08 39 02 c0       	mov    edx,0xc0023908
c000b9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e2:	89 10                	mov    DWORD PTR [eax],edx
c000b9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b9f2:	90                   	nop
c000b9f3:	83 c4 0c             	add    esp,0xc
c000b9f6:	c3                   	ret    
c000b9f7:	90                   	nop

c000b9f8 <Video::~Video()>:
c000b9f8:	83 ec 0c             	sub    esp,0xc
c000b9fb:	ba 08 39 02 c0       	mov    edx,0xc0023908
c000ba00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba04:	89 10                	mov    DWORD PTR [eax],edx
c000ba06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba0a:	83 ec 0c             	sub    esp,0xc
c000ba0d:	50                   	push   eax
c000ba0e:	e8 eb de ff ff       	call   c00098fe <Device::~Device()>
c000ba13:	83 c4 10             	add    esp,0x10
c000ba16:	90                   	nop
c000ba17:	83 c4 0c             	add    esp,0xc
c000ba1a:	c3                   	ret    
c000ba1b:	90                   	nop

c000ba1c <Video::~Video()>:
c000ba1c:	83 ec 0c             	sub    esp,0xc
c000ba1f:	83 ec 0c             	sub    esp,0xc
c000ba22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba26:	e8 cd ff ff ff       	call   c000b9f8 <Video::~Video()>
c000ba2b:	83 c4 10             	add    esp,0x10
c000ba2e:	83 ec 08             	sub    esp,0x8
c000ba31:	68 64 01 00 00       	push   0x164
c000ba36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba3a:	e8 e0 18 00 00       	call   c000d31f <operator delete(void*, unsigned long)>
c000ba3f:	83 c4 10             	add    esp,0x10
c000ba42:	83 c4 0c             	add    esp,0xc
c000ba45:	c3                   	ret    

c000ba46 <Video::isMonochrome()>:
c000ba46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba4a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba50:	c3                   	ret    
c000ba51:	90                   	nop

c000ba52 <Video::getWidth()>:
c000ba52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba5c:	c3                   	ret    
c000ba5d:	90                   	nop

c000ba5e <Video::getHeight()>:
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba68:	c3                   	ret    
c000ba69:	90                   	nop

c000ba6a <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba6a:	55                   	push   ebp
c000ba6b:	57                   	push   edi
c000ba6c:	56                   	push   esi
c000ba6d:	53                   	push   ebx
c000ba6e:	83 ec 2c             	sub    esp,0x2c
c000ba71:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ba75:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ba79:	83 f8 01             	cmp    eax,0x1
c000ba7c:	19 c9                	sbb    ecx,ecx
c000ba7e:	31 db                	xor    ebx,ebx
c000ba80:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ba84:	89 cd                	mov    ebp,ecx
c000ba86:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ba8e:	f7 d5                	not    ebp
c000ba90:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ba96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ba9a:	01 d8                	add    eax,ebx
c000ba9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baa0:	56                   	push   esi
c000baa1:	e8 b8 ff ff ff       	call   c000ba5e <Video::getHeight()>
c000baa6:	59                   	pop    ecx
c000baa7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000baab:	7e 70                	jle    c000bb1d <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000baad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bab1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bab5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000babc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bac0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bac7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bacb:	89 f8                	mov    eax,edi
c000bacd:	83 c0 20             	add    eax,0x20
c000bad0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bad4:	56                   	push   esi
c000bad5:	e8 78 ff ff ff       	call   c000ba52 <Video::getWidth()>
c000bada:	5a                   	pop    edx
c000badb:	39 c7                	cmp    edi,eax
c000badd:	7d 34                	jge    c000bb13 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000badf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bae4:	74 05                	je     c000baeb <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bae6:	8b 06                	mov    eax,DWORD PTR [esi]
c000bae8:	55                   	push   ebp
c000bae9:	eb 0d                	jmp    c000baf8 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000baeb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000baf0:	74 12                	je     c000bb04 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000baf2:	8b 06                	mov    eax,DWORD PTR [esi]
c000baf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baf8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bafc:	57                   	push   edi
c000bafd:	56                   	push   esi
c000bafe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb01:	83 c4 10             	add    esp,0x10
c000bb04:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb08:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb0c:	47                   	inc    edi
c000bb0d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bb11:	75 c1                	jne    c000bad4 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb13:	43                   	inc    ebx
c000bb14:	83 fb 20             	cmp    ebx,0x20
c000bb17:	0f 85 79 ff ff ff    	jne    c000ba96 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb1d:	83 c4 2c             	add    esp,0x2c
c000bb20:	5b                   	pop    ebx
c000bb21:	5e                   	pop    esi
c000bb22:	5f                   	pop    edi
c000bb23:	5d                   	pop    ebp
c000bb24:	c3                   	ret    
c000bb25:	90                   	nop

c000bb26 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb26:	55                   	push   ebp
c000bb27:	57                   	push   edi
c000bb28:	56                   	push   esi
c000bb29:	53                   	push   ebx
c000bb2a:	83 ec 48             	sub    esp,0x48
c000bb2d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb31:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb35:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb39:	c1 e0 08             	shl    eax,0x8
c000bb3c:	01 d0                	add    eax,edx
c000bb3e:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb46:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb4a:	c1 e0 08             	shl    eax,0x8
c000bb4d:	01 d0                	add    eax,edx
c000bb4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bb57:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bb5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb64:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb6b:	50                   	push   eax
c000bb6c:	e8 26 41 00 00       	call   c000fc97 <malloc>
c000bb71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb75:	83 c4 10             	add    esp,0x10
c000bb78:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bb7d:	75 10                	jne    c000bb8f <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bb7f:	83 ec 0c             	sub    esp,0xc
c000bb82:	68 90 38 02 c0       	push   0xc0023890
c000bb87:	e8 52 44 00 00       	call   c000ffde <KePanic(char const*)>
c000bb8c:	83 c4 10             	add    esp,0x10
c000bb8f:	51                   	push   ecx
c000bb90:	51                   	push   ecx
c000bb91:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bb95:	50                   	push   eax
c000bb96:	68 a0 38 02 c0       	push   0xc00238a0
c000bb9b:	e8 c4 b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bba0:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bba3:	83 e0 20             	and    eax,0x20
c000bba6:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bbaa:	85 c0                	test   eax,eax
c000bbac:	5e                   	pop    esi
c000bbad:	0f 94 c0             	sete   al
c000bbb0:	5f                   	pop    edi
c000bbb1:	0f b6 c0             	movzx  eax,al
c000bbb4:	be 12 00 00 00       	mov    esi,0x12
c000bbb9:	50                   	push   eax
c000bbba:	68 aa 38 02 c0       	push   0xc00238aa
c000bbbf:	e8 a0 b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bbc4:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bbc8:	83 c4 10             	add    esp,0x10
c000bbcb:	89 d0                	mov    eax,edx
c000bbcd:	85 d2                	test   edx,edx
c000bbcf:	74 11                	je     c000bbe2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bbd1:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bbd5:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bbd9:	c1 fe 03             	sar    esi,0x3
c000bbdc:	0f af f1             	imul   esi,ecx
c000bbdf:	83 c6 12             	add    esi,0x12
c000bbe2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bbe7:	74 07                	je     c000bbf0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bbe9:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bbee:	75 12                	jne    c000bc02 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bbf0:	83 ec 0c             	sub    esp,0xc
c000bbf3:	68 b8 38 02 c0       	push   0xc00238b8
c000bbf8:	e8 67 b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bbfd:	e9 a0 02 00 00       	jmp    c000bea2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bc02:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc06:	83 f9 02             	cmp    ecx,0x2
c000bc09:	74 0e                	je     c000bc19 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bc0b:	83 f9 0a             	cmp    ecx,0xa
c000bc0e:	0f 84 c8 00 00 00    	je     c000bcdc <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bc14:	e9 72 02 00 00       	jmp    c000be8b <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bc19:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc1e:	75 0e                	jne    c000bc2e <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc20:	84 c0                	test   al,al
c000bc22:	75 0a                	jne    c000bc2e <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc24:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc27:	83 e8 18             	sub    eax,0x18
c000bc2a:	a8 f7                	test   al,0xf7
c000bc2c:	74 0d                	je     c000bc3b <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bc2e:	83 ec 0c             	sub    esp,0xc
c000bc31:	68 cd 38 02 c0       	push   0xc00238cd
c000bc36:	e9 58 02 00 00       	jmp    c000be93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bc3b:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc40:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc48:	31 c0                	xor    eax,eax
c000bc4a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc4e:	89 c7                	mov    edi,eax
c000bc50:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc58:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bc5d:	75 15                	jne    c000bc74 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bc5f:	99                   	cdq    
c000bc60:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bc64:	85 d2                	test   edx,edx
c000bc66:	75 0c                	jne    c000bc74 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bc68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc6c:	29 c7                	sub    edi,eax
c000bc6e:	4f                   	dec    edi
c000bc6f:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bc74:	31 d2                	xor    edx,edx
c000bc76:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bc7a:	75 08                	jne    c000bc84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bc7c:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bc81:	c1 e2 18             	shl    edx,0x18
c000bc84:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bc89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bc8d:	c1 e1 10             	shl    ecx,0x10
c000bc90:	8d 47 01             	lea    eax,[edi+0x1]
c000bc93:	89 cd                	mov    ebp,ecx
c000bc95:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bc9a:	c1 e1 08             	shl    ecx,0x8
c000bc9d:	09 e9                	or     ecx,ebp
c000bc9f:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bca3:	09 e9                	or     ecx,ebp
c000bca5:	09 d1                	or     ecx,edx
c000bca7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bcab:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bcae:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bcb2:	c1 fa 03             	sar    edx,0x3
c000bcb5:	01 d6                	add    esi,edx
c000bcb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bcbb:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bcbf:	7e 04                	jle    c000bcc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bcc1:	89 c7                	mov    edi,eax
c000bcc3:	eb 93                	jmp    c000bc58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bcc5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bcc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bccd:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bcd1:	0f 8f 77 ff ff ff    	jg     c000bc4e <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bcd7:	e9 d3 01 00 00       	jmp    c000beaf <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bcdc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bce1:	75 0e                	jne    c000bcf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bce3:	85 d2                	test   edx,edx
c000bce5:	75 0a                	jne    c000bcf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bce7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bcea:	83 e8 18             	sub    eax,0x18
c000bced:	a8 f7                	test   al,0xf7
c000bcef:	74 0d                	je     c000bcfe <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bcf1:	83 ec 0c             	sub    esp,0xc
c000bcf4:	68 db 38 02 c0       	push   0xc00238db
c000bcf9:	e9 95 01 00 00       	jmp    c000be93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bcfe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd06:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bd0e:	31 c9                	xor    ecx,ecx
c000bd10:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd14:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bd18:	0f 8e 91 01 00 00    	jle    c000beaf <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd1e:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bd22:	0f 8d 87 01 00 00    	jge    c000beaf <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd28:	8d 46 01             	lea    eax,[esi+0x1]
c000bd2b:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd33:	83 fd 7f             	cmp    ebp,0x7f
c000bd36:	89 e8                	mov    eax,ebp
c000bd38:	0f 8e 9d 00 00 00    	jle    c000bddb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd3e:	83 e0 7f             	and    eax,0x7f
c000bd41:	31 d2                	xor    edx,edx
c000bd43:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd47:	40                   	inc    eax
c000bd48:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd50:	75 0a                	jne    c000bd5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bd52:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bd57:	89 ea                	mov    edx,ebp
c000bd59:	c1 e2 18             	shl    edx,0x18
c000bd5c:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bd61:	c1 e0 10             	shl    eax,0x10
c000bd64:	89 c7                	mov    edi,eax
c000bd66:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bd6b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd6f:	c1 e0 08             	shl    eax,0x8
c000bd72:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd76:	09 f8                	or     eax,edi
c000bd78:	31 f6                	xor    esi,esi
c000bd7a:	09 c5                	or     ebp,eax
c000bd7c:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bd81:	09 d5                	or     ebp,edx
c000bd83:	85 ff                	test   edi,edi
c000bd85:	75 1d                	jne    c000bda4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bd87:	89 c8                	mov    eax,ecx
c000bd89:	99                   	cdq    
c000bd8a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bd8e:	85 d2                	test   edx,edx
c000bd90:	75 12                	jne    c000bda4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bd92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd96:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bd9a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd9e:	49                   	dec    ecx
c000bd9f:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bda4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bda8:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdab:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000bdae:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000bdb2:	8d 46 01             	lea    eax,[esi+0x1]
c000bdb5:	7e 06                	jle    c000bdbd <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000bdb7:	89 c6                	mov    esi,eax
c000bdb9:	89 d1                	mov    ecx,edx
c000bdbb:	eb c6                	jmp    c000bd83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000bdbd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000bdc1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bdc5:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bdc9:	c1 f8 03             	sar    eax,0x3
c000bdcc:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000bdd0:	89 d1                	mov    ecx,edx
c000bdd2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bdd6:	e9 35 ff ff ff       	jmp    c000bd10 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000bddb:	8d 45 01             	lea    eax,[ebp+0x1]
c000bdde:	31 f6                	xor    esi,esi
c000bde0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bde4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bde9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bded:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000bdf2:	75 1d                	jne    c000be11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000bdf4:	89 c8                	mov    eax,ecx
c000bdf6:	99                   	cdq    
c000bdf7:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bdfb:	85 d2                	test   edx,edx
c000bdfd:	75 12                	jne    c000be11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000bdff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be03:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000be07:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000be0b:	49                   	dec    ecx
c000be0c:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000be11:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be19:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be1d:	75 10                	jne    c000be2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000be1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be23:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000be28:	c1 e7 18             	shl    edi,0x18
c000be2b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be33:	8d 51 01             	lea    edx,[ecx+0x1]
c000be36:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000be3b:	c1 e0 10             	shl    eax,0x10
c000be3e:	89 c7                	mov    edi,eax
c000be40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be44:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000be49:	c1 e0 08             	shl    eax,0x8
c000be4c:	09 f8                	or     eax,edi
c000be4e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000be52:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000be56:	09 f8                	or     eax,edi
c000be58:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000be5c:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be60:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000be63:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be67:	c1 f8 03             	sar    eax,0x3
c000be6a:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be6e:	8d 46 01             	lea    eax,[esi+0x1]
c000be71:	39 f5                	cmp    ebp,esi
c000be73:	7e 09                	jle    c000be7e <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000be75:	89 c6                	mov    esi,eax
c000be77:	89 d1                	mov    ecx,edx
c000be79:	e9 6f ff ff ff       	jmp    c000bded <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000be7e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000be82:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000be86:	e9 45 ff ff ff       	jmp    c000bdd0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000be8b:	52                   	push   edx
c000be8c:	52                   	push   edx
c000be8d:	51                   	push   ecx
c000be8e:	68 ea 38 02 c0       	push   0xc00238ea
c000be93:	e8 cc b0 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000be98:	58                   	pop    eax
c000be99:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000be9d:	e8 05 3e 00 00       	call   c000fca7 <free>
c000bea2:	83 c4 10             	add    esp,0x10
c000bea5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bead:	eb 14                	jmp    c000bec3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000beaf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000beb3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000beb7:	89 18                	mov    DWORD PTR [eax],ebx
c000beb9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000bebd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bec1:	89 18                	mov    DWORD PTR [eax],ebx
c000bec3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bec7:	83 c4 3c             	add    esp,0x3c
c000beca:	5b                   	pop    ebx
c000becb:	5e                   	pop    esi
c000becc:	5f                   	pop    edi
c000becd:	5d                   	pop    ebp
c000bece:	c3                   	ret    
c000becf:	90                   	nop

c000bed0 <Video::putTGA(int, int, unsigned char*, int)>:
c000bed0:	55                   	push   ebp
c000bed1:	57                   	push   edi
c000bed2:	56                   	push   esi
c000bed3:	53                   	push   ebx
c000bed4:	83 ec 28             	sub    esp,0x28
c000bed7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000bedb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bedf:	50                   	push   eax
c000bee0:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bee4:	50                   	push   eax
c000bee5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bee9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000beed:	57                   	push   edi
c000beee:	e8 33 fc ff ff       	call   c000bb26 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bef3:	83 c4 20             	add    esp,0x20
c000bef6:	85 c0                	test   eax,eax
c000bef8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000befc:	74 3a                	je     c000bf38 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000befe:	89 c6                	mov    esi,eax
c000bf00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf04:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf08:	39 d8                	cmp    eax,ebx
c000bf0a:	7e 2c                	jle    c000bf38 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf0c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf14:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf18:	39 e8                	cmp    eax,ebp
c000bf1a:	7e 19                	jle    c000bf35 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bf1c:	83 c6 04             	add    esi,0x4
c000bf1f:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf22:	85 c0                	test   eax,eax
c000bf24:	79 0c                	jns    c000bf32 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000bf26:	8b 17                	mov    edx,DWORD PTR [edi]
c000bf28:	50                   	push   eax
c000bf29:	53                   	push   ebx
c000bf2a:	55                   	push   ebp
c000bf2b:	57                   	push   edi
c000bf2c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bf2f:	83 c4 10             	add    esp,0x10
c000bf32:	45                   	inc    ebp
c000bf33:	eb db                	jmp    c000bf10 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf35:	43                   	inc    ebx
c000bf36:	eb c8                	jmp    c000bf00 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf38:	83 c4 1c             	add    esp,0x1c
c000bf3b:	5b                   	pop    ebx
c000bf3c:	5e                   	pop    esi
c000bf3d:	5f                   	pop    edi
c000bf3e:	5d                   	pop    ebp
c000bf3f:	c3                   	ret    

c000bf40 <ACPI::close(int, int, void*)>:
c000bf40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf45:	c3                   	ret    
c000bf46:	66 90                	xchg   ax,ax

c000bf48 <loadACPITables(unsigned char*)>:
c000bf48:	57                   	push   edi
c000bf49:	56                   	push   esi
c000bf4a:	53                   	push   ebx
c000bf4b:	83 ec 60             	sub    esp,0x60
c000bf4e:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf53:	0f 84 43 02 00 00    	je     c000c19c <loadACPITables(unsigned char*)+0x254>
c000bf59:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c000bf5e:	0f b6 c0             	movzx  eax,al
c000bf61:	85 c0                	test   eax,eax
c000bf63:	74 7b                	je     c000bfe0 <loadACPITables(unsigned char*)+0x98>
c000bf65:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf69:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf74:	83 e8 24             	sub    eax,0x24
c000bf77:	c1 e8 03             	shr    eax,0x3
c000bf7a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bf7e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bf86:	66 90                	xchg   ax,ax
c000bf88:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf8c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bf90:	0f 8d ba 00 00 00    	jge    c000c050 <loadACPITables(unsigned char*)+0x108>
c000bf96:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf9a:	83 c0 24             	add    eax,0x24
c000bf9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfa1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bfa5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bfa9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfad:	c1 e0 03             	shl    eax,0x3
c000bfb0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfb4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfb8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfbb:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfbd:	89 c1                	mov    ecx,eax
c000bfbf:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bfc4:	8d 50 01             	lea    edx,[eax+0x1]
c000bfc7:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000bfcd:	89 ca                	mov    edx,ecx
c000bfcf:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000bfd6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bfdb:	eb ab                	jmp    c000bf88 <loadACPITables(unsigned char*)+0x40>
c000bfdd:	8d 76 00             	lea    esi,[esi+0x0]
c000bfe0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfe4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bfe8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfef:	83 e8 24             	sub    eax,0x24
c000bff2:	c1 e8 02             	shr    eax,0x2
c000bff5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000bff9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c001:	8d 76 00             	lea    esi,[esi+0x0]
c000c004:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c008:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c00c:	7d 42                	jge    c000c050 <loadACPITables(unsigned char*)+0x108>
c000c00e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c012:	83 c0 24             	add    eax,0x24
c000c015:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c019:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c01d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c021:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c025:	c1 e0 02             	shl    eax,0x2
c000c028:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c02c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c030:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c032:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c037:	8d 50 01             	lea    edx,[eax+0x1]
c000c03a:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c040:	89 ca                	mov    edx,ecx
c000c042:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c049:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c04e:	eb b4                	jmp    c000c004 <loadACPITables(unsigned char*)+0xbc>
c000c050:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c058:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c05d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c061:	0f 8d 39 01 00 00    	jge    c000c1a0 <loadACPITables(unsigned char*)+0x258>
c000c067:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c06b:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c072:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c07e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c082:	25 ff 0f 00 00       	and    eax,0xfff
c000c087:	89 c6                	mov    esi,eax
c000c089:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c08f:	83 ec 0c             	sub    esp,0xc
c000c092:	6a 01                	push   0x1
c000c094:	e8 30 74 00 00       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0a0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0a6:	83 ec 0c             	sub    esp,0xc
c000c0a9:	6a 01                	push   0x1
c000c0ab:	6a 01                	push   0x1
c000c0ad:	50                   	push   eax
c000c0ae:	52                   	push   edx
c000c0af:	53                   	push   ebx
c000c0b0:	e8 e1 7c 00 00       	call   c0013d96 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0b5:	83 c4 20             	add    esp,0x20
c000c0b8:	09 f0                	or     eax,esi
c000c0ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0be:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0c2:	c1 e0 03             	shl    eax,0x3
c000c0c5:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c0ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0d6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c0de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c0f2:	89 c6                	mov    esi,eax
c000c0f4:	89 d7                	mov    edi,edx
c000c0f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c0f8:	89 c8                	mov    eax,ecx
c000c0fa:	89 fa                	mov    edx,edi
c000c0fc:	89 f3                	mov    ebx,esi
c000c0fe:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c102:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c106:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c10a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c10e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c111:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c115:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c119:	05 00 10 00 00       	add    eax,0x1000
c000c11e:	c1 e8 0c             	shr    eax,0xc
c000c121:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c125:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c129:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c12d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c131:	25 ff 0f 00 00       	and    eax,0xfff
c000c136:	89 c6                	mov    esi,eax
c000c138:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c13e:	83 ec 0c             	sub    esp,0xc
c000c141:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c145:	e8 7f 73 00 00       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c000c14a:	83 c4 10             	add    esp,0x10
c000c14d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c151:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c157:	83 ec 0c             	sub    esp,0xc
c000c15a:	6a 01                	push   0x1
c000c15c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c160:	50                   	push   eax
c000c161:	52                   	push   edx
c000c162:	53                   	push   ebx
c000c163:	e8 2e 7c 00 00       	call   c0013d96 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c168:	83 c4 20             	add    esp,0x20
c000c16b:	09 f0                	or     eax,esi
c000c16d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c175:	83 ec 0c             	sub    esp,0xc
c000c178:	50                   	push   eax
c000c179:	e8 53 76 00 00       	call   c00137d1 <Virt::freeKernelVirtualPages(unsigned long)>
c000c17e:	83 c4 10             	add    esp,0x10
c000c181:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c185:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c189:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c190:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c195:	e9 be fe ff ff       	jmp    c000c058 <loadACPITables(unsigned char*)+0x110>
c000c19a:	66 90                	xchg   ax,ax
c000c19c:	90                   	nop
c000c19d:	8d 76 00             	lea    esi,[esi+0x0]
c000c1a0:	83 c4 60             	add    esp,0x60
c000c1a3:	5b                   	pop    ebx
c000c1a4:	5e                   	pop    esi
c000c1a5:	5f                   	pop    edi
c000c1a6:	c3                   	ret    
c000c1a7:	90                   	nop

c000c1a8 <findRSDT(unsigned char*)>:
c000c1a8:	57                   	push   edi
c000c1a9:	56                   	push   esi
c000c1aa:	53                   	push   ebx
c000c1ab:	83 ec 50             	sub    esp,0x50
c000c1ae:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c1b3:	85 c0                	test   eax,eax
c000c1b5:	75 0d                	jne    c000c1c4 <findRSDT(unsigned char*)+0x1c>
c000c1b7:	b8 00 00 00 00       	mov    eax,0x0
c000c1bc:	e9 2b 01 00 00       	jmp    c000c2ec <findRSDT(unsigned char*)+0x144>
c000c1c1:	8d 76 00             	lea    esi,[esi+0x0]
c000c1c4:	89 e0                	mov    eax,esp
c000c1c6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1ca:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c1d2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c1da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c1de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c1e6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c1ea:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c1ee:	89 c6                	mov    esi,eax
c000c1f0:	89 d7                	mov    edi,edx
c000c1f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c1f4:	89 c8                	mov    eax,ecx
c000c1f6:	89 fa                	mov    edx,edi
c000c1f8:	89 f3                	mov    ebx,esi
c000c1fa:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c1fe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c202:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c206:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c20a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c20e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c216:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c21a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c21e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c226:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c22a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c22e:	25 ff 0f 00 00       	and    eax,0xfff
c000c233:	89 c6                	mov    esi,eax
c000c235:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c23b:	83 ec 0c             	sub    esp,0xc
c000c23e:	6a 02                	push   0x2
c000c240:	e8 84 72 00 00       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c000c245:	83 c4 10             	add    esp,0x10
c000c248:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c24c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c252:	83 ec 0c             	sub    esp,0xc
c000c255:	6a 01                	push   0x1
c000c257:	6a 02                	push   0x2
c000c259:	50                   	push   eax
c000c25a:	52                   	push   edx
c000c25b:	53                   	push   ebx
c000c25c:	e8 35 7b 00 00       	call   c0013d96 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c261:	83 c4 20             	add    esp,0x20
c000c264:	09 f0                	or     eax,esi
c000c266:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c26a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c26e:	25 ff 0f 00 00       	and    eax,0xfff
c000c273:	89 c6                	mov    esi,eax
c000c275:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c27b:	83 ec 0c             	sub    esp,0xc
c000c27e:	6a 02                	push   0x2
c000c280:	e8 44 72 00 00       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c000c285:	83 c4 10             	add    esp,0x10
c000c288:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c28c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c292:	83 ec 0c             	sub    esp,0xc
c000c295:	6a 01                	push   0x1
c000c297:	6a 02                	push   0x2
c000c299:	50                   	push   eax
c000c29a:	52                   	push   edx
c000c29b:	53                   	push   ebx
c000c29c:	e8 f5 7a 00 00       	call   c0013d96 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2a1:	83 c4 20             	add    esp,0x20
c000c2a4:	09 f0                	or     eax,esi
c000c2a6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2aa:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2af:	85 c0                	test   eax,eax
c000c2b1:	75 11                	jne    c000c2c4 <findRSDT(unsigned char*)+0x11c>
c000c2b3:	c6 05 80 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bd80,0x0
c000c2ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2c2:	eb 24                	jmp    c000c2e8 <findRSDT(unsigned char*)+0x140>
c000c2c4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2c9:	83 f8 02             	cmp    eax,0x2
c000c2cc:	75 12                	jne    c000c2e0 <findRSDT(unsigned char*)+0x138>
c000c2ce:	c6 05 80 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd80,0x1
c000c2d5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c2d9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2dd:	eb 09                	jmp    c000c2e8 <findRSDT(unsigned char*)+0x140>
c000c2df:	90                   	nop
c000c2e0:	b8 00 00 00 00       	mov    eax,0x0
c000c2e5:	eb 05                	jmp    c000c2ec <findRSDT(unsigned char*)+0x144>
c000c2e7:	90                   	nop
c000c2e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c2ec:	83 c4 50             	add    esp,0x50
c000c2ef:	5b                   	pop    ebx
c000c2f0:	5e                   	pop    esi
c000c2f1:	5f                   	pop    edi
c000c2f2:	c3                   	ret    
c000c2f3:	90                   	nop

c000c2f4 <findDataTable(unsigned char*, char*)>:
c000c2f4:	83 ec 1c             	sub    esp,0x1c
c000c2f7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c2fc:	75 0a                	jne    c000c308 <findDataTable(unsigned char*, char*)+0x14>
c000c2fe:	b8 00 00 00 00       	mov    eax,0x0
c000c303:	eb 5f                	jmp    c000c364 <findDataTable(unsigned char*, char*)+0x70>
c000c305:	8d 76 00             	lea    esi,[esi+0x0]
c000c308:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c310:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c315:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c319:	7d 41                	jge    c000c35c <findDataTable(unsigned char*, char*)+0x68>
c000c31b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c31f:	c1 e0 03             	shl    eax,0x3
c000c322:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c327:	83 ec 04             	sub    esp,0x4
c000c32a:	6a 04                	push   0x4
c000c32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c330:	50                   	push   eax
c000c331:	e8 4a 40 ff ff       	call   c0000380 <memcmp>
c000c336:	83 c4 10             	add    esp,0x10
c000c339:	85 c0                	test   eax,eax
c000c33b:	0f 94 c0             	sete   al
c000c33e:	0f b6 c0             	movzx  eax,al
c000c341:	85 c0                	test   eax,eax
c000c343:	74 0f                	je     c000c354 <findDataTable(unsigned char*, char*)+0x60>
c000c345:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c349:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c350:	eb 12                	jmp    c000c364 <findDataTable(unsigned char*, char*)+0x70>
c000c352:	66 90                	xchg   ax,ax
c000c354:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c359:	eb b5                	jmp    c000c310 <findDataTable(unsigned char*, char*)+0x1c>
c000c35b:	90                   	nop
c000c35c:	b8 00 00 00 00       	mov    eax,0x0
c000c361:	8d 76 00             	lea    esi,[esi+0x0]
c000c364:	83 c4 1c             	add    esp,0x1c
c000c367:	c3                   	ret    

c000c368 <scanMADT()>:
c000c368:	53                   	push   ebx
c000c369:	83 ec 38             	sub    esp,0x38
c000c36c:	c7 05 88 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd88,0x0
c000c376:	c7 05 84 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd84,0x0
c000c380:	e8 33 d4 00 00       	call   c00197b8 <HalFindRSDP()>
c000c385:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c000c38a:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c38f:	85 c0                	test   eax,eax
c000c391:	0f 84 11 04 00 00    	je     c000c7a8 <scanMADT()+0x440>
c000c397:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c39c:	83 ec 0c             	sub    esp,0xc
c000c39f:	50                   	push   eax
c000c3a0:	e8 03 fe ff ff       	call   c000c1a8 <findRSDT(unsigned char*)>
c000c3a5:	83 c4 10             	add    esp,0x10
c000c3a8:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c000c3ad:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3b2:	85 c0                	test   eax,eax
c000c3b4:	0f 84 f2 03 00 00    	je     c000c7ac <scanMADT()+0x444>
c000c3ba:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3bf:	83 ec 0c             	sub    esp,0xc
c000c3c2:	50                   	push   eax
c000c3c3:	e8 80 fb ff ff       	call   c000bf48 <loadACPITables(unsigned char*)>
c000c3c8:	83 c4 10             	add    esp,0x10
c000c3cb:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3d0:	83 ec 08             	sub    esp,0x8
c000c3d3:	68 4c 39 02 c0       	push   0xc002394c
c000c3d8:	50                   	push   eax
c000c3d9:	e8 16 ff ff ff       	call   c000c2f4 <findDataTable(unsigned char*, char*)>
c000c3de:	83 c4 10             	add    esp,0x10
c000c3e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3e5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c3ea:	0f 84 c0 03 00 00    	je     c000c7b0 <scanMADT()+0x448>
c000c3f0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c3f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c3fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c3ff:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c403:	0f 87 af 03 00 00    	ja     c000c7b8 <scanMADT()+0x450>
c000c409:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c411:	0f 87 a1 03 00 00    	ja     c000c7b8 <scanMADT()+0x450>
c000c417:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c41b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c41f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c423:	8d 50 01             	lea    edx,[eax+0x1]
c000c426:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c42a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c42e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c432:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c436:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c43a:	8d 50 01             	lea    edx,[eax+0x1]
c000c43d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c441:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c445:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c449:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c44d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c452:	83 f8 02             	cmp    eax,0x2
c000c455:	0f 86 59 03 00 00    	jbe    c000c7b4 <scanMADT()+0x44c>
c000c45b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c460:	85 c0                	test   eax,eax
c000c462:	75 58                	jne    c000c4bc <scanMADT()+0x154>
c000c464:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c468:	8d 50 01             	lea    edx,[eax+0x1]
c000c46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c46f:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c475:	0f b6 d2             	movzx  edx,dl
c000c478:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c47c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c480:	88 82 c0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4040],al
c000c486:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c48a:	8d 50 01             	lea    edx,[eax+0x1]
c000c48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c491:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c497:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c49a:	88 0d 80 bf 02 c0    	mov    BYTE PTR ds:0xc002bf80,cl
c000c4a0:	0f b6 d2             	movzx  edx,dl
c000c4a3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4a7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4ab:	88 82 a0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4060],al
c000c4b1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c4b6:	e9 d9 02 00 00       	jmp    c000c794 <scanMADT()+0x42c>
c000c4bb:	90                   	nop
c000c4bc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4c1:	83 f8 01             	cmp    eax,0x1
c000c4c4:	0f 85 1a 01 00 00    	jne    c000c5e4 <scanMADT()+0x27c>
c000c4ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4ce:	8d 50 01             	lea    edx,[eax+0x1]
c000c4d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d5:	8a 15 40 be 02 c0    	mov    dl,BYTE PTR ds:0xc002be40
c000c4db:	0f b6 d2             	movzx  edx,dl
c000c4de:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4e2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4e6:	88 82 60 be 02 c0    	mov    BYTE PTR [edx-0x3ffd41a0],al
c000c4ec:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c4f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4f9:	01 d0                	add    eax,edx
c000c4fb:	83 c0 2c             	add    eax,0x2c
c000c4fe:	8a 00                	mov    al,BYTE PTR [eax]
c000c500:	0f b6 d0             	movzx  edx,al
c000c503:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c507:	8d 48 01             	lea    ecx,[eax+0x1]
c000c50a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c50e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c512:	0f b6 c0             	movzx  eax,al
c000c515:	c1 e0 08             	shl    eax,0x8
c000c518:	89 d1                	mov    ecx,edx
c000c51a:	09 c1                	or     ecx,eax
c000c51c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c520:	8d 50 02             	lea    edx,[eax+0x2]
c000c523:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c527:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c52b:	0f b6 c0             	movzx  eax,al
c000c52e:	c1 e0 10             	shl    eax,0x10
c000c531:	09 c1                	or     ecx,eax
c000c533:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c537:	8d 50 03             	lea    edx,[eax+0x3]
c000c53a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c53e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c542:	0f b6 c0             	movzx  eax,al
c000c545:	c1 e0 18             	shl    eax,0x18
c000c548:	09 c1                	or     ecx,eax
c000c54a:	89 ca                	mov    edx,ecx
c000c54c:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c551:	0f b6 c0             	movzx  eax,al
c000c554:	89 14 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],edx
c000c55b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c560:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c564:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c568:	01 d0                	add    eax,edx
c000c56a:	83 c0 2c             	add    eax,0x2c
c000c56d:	8a 00                	mov    al,BYTE PTR [eax]
c000c56f:	0f b6 d0             	movzx  edx,al
c000c572:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c576:	8d 48 01             	lea    ecx,[eax+0x1]
c000c579:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c57d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c581:	0f b6 c0             	movzx  eax,al
c000c584:	c1 e0 08             	shl    eax,0x8
c000c587:	89 d1                	mov    ecx,edx
c000c589:	09 c1                	or     ecx,eax
c000c58b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c58f:	8d 50 02             	lea    edx,[eax+0x2]
c000c592:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c596:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c59a:	0f b6 c0             	movzx  eax,al
c000c59d:	c1 e0 10             	shl    eax,0x10
c000c5a0:	09 c1                	or     ecx,eax
c000c5a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5a6:	8d 50 03             	lea    edx,[eax+0x3]
c000c5a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5ad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5b1:	0f b6 c0             	movzx  eax,al
c000c5b4:	c1 e0 18             	shl    eax,0x18
c000c5b7:	09 c1                	or     ecx,eax
c000c5b9:	89 ca                	mov    edx,ecx
c000c5bb:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c5c0:	0f b6 c0             	movzx  eax,al
c000c5c3:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c000c5ca:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5cf:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c5d4:	83 c0 01             	add    eax,0x1
c000c5d7:	a2 40 be 02 c0       	mov    ds:0xc002be40,al
c000c5dc:	e9 b3 01 00 00       	jmp    c000c794 <scanMADT()+0x42c>
c000c5e1:	8d 76 00             	lea    esi,[esi+0x0]
c000c5e4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c5e9:	83 f8 02             	cmp    eax,0x2
c000c5ec:	0f 85 ea 00 00 00    	jne    c000c6dc <scanMADT()+0x374>
c000c5f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5f6:	8d 50 01             	lea    edx,[eax+0x1]
c000c5f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c601:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c605:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c609:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c60d:	8d 50 01             	lea    edx,[eax+0x1]
c000c610:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c614:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c618:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c61c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c620:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c624:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c628:	01 d0                	add    eax,edx
c000c62a:	83 c0 2c             	add    eax,0x2c
c000c62d:	8a 00                	mov    al,BYTE PTR [eax]
c000c62f:	0f b6 d0             	movzx  edx,al
c000c632:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c636:	8d 48 01             	lea    ecx,[eax+0x1]
c000c639:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c63d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c641:	0f b6 c0             	movzx  eax,al
c000c644:	c1 e0 08             	shl    eax,0x8
c000c647:	89 d1                	mov    ecx,edx
c000c649:	09 c1                	or     ecx,eax
c000c64b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c64f:	8d 50 02             	lea    edx,[eax+0x2]
c000c652:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c656:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c65a:	0f b6 c0             	movzx  eax,al
c000c65d:	c1 e0 10             	shl    eax,0x10
c000c660:	09 c1                	or     ecx,eax
c000c662:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c666:	8d 50 03             	lea    edx,[eax+0x3]
c000c669:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c66d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c671:	0f b6 c0             	movzx  eax,al
c000c674:	c1 e0 18             	shl    eax,0x18
c000c677:	09 c8                	or     eax,ecx
c000c679:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c67d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c682:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c686:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c68a:	01 d0                	add    eax,edx
c000c68c:	83 c0 2c             	add    eax,0x2c
c000c68f:	8a 00                	mov    al,BYTE PTR [eax]
c000c691:	0f b6 c0             	movzx  eax,al
c000c694:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c698:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c69b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c69f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c6a3:	0f b6 d2             	movzx  edx,dl
c000c6a6:	c1 e2 08             	shl    edx,0x8
c000c6a9:	09 d0                	or     eax,edx
c000c6ab:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c6b0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c6b5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c6ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6be:	88 90 68 60 02 c0    	mov    BYTE PTR [eax-0x3ffd9f98],dl
c000c6c4:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c6c9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c6ce:	66 89 84 12 20 be 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd41e0],ax
c000c6d6:	e9 b9 00 00 00       	jmp    c000c794 <scanMADT()+0x42c>
c000c6db:	90                   	nop
c000c6dc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c6e1:	83 f8 04             	cmp    eax,0x4
c000c6e4:	0f 85 9a 00 00 00    	jne    c000c784 <scanMADT()+0x41c>
c000c6ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ee:	8d 50 01             	lea    edx,[eax+0x1]
c000c6f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6fd:	0f b6 c0             	movzx  eax,al
c000c700:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c704:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c70c:	01 d0                	add    eax,edx
c000c70e:	83 c0 2c             	add    eax,0x2c
c000c711:	8a 00                	mov    al,BYTE PTR [eax]
c000c713:	0f b6 d0             	movzx  edx,al
c000c716:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c71a:	8d 48 01             	lea    ecx,[eax+0x1]
c000c71d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c721:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c725:	0f b6 c0             	movzx  eax,al
c000c728:	c1 e0 08             	shl    eax,0x8
c000c72b:	09 d0                	or     eax,edx
c000c72d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c731:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c736:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c73a:	8d 50 01             	lea    edx,[eax+0x1]
c000c73d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c741:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c745:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c749:	0f b6 c0             	movzx  eax,al
c000c74c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c754:	c1 e0 08             	shl    eax,0x8
c000c757:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c75b:	89 c1                	mov    ecx,eax
c000c75d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c761:	c1 e0 18             	shl    eax,0x18
c000c764:	89 c3                	mov    ebx,eax
c000c766:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c000c76b:	8d 50 01             	lea    edx,[eax+0x1]
c000c76e:	89 15 8c bd 02 c0    	mov    DWORD PTR ds:0xc002bd8c,edx
c000c774:	09 d9                	or     ecx,ebx
c000c776:	89 ca                	mov    edx,ecx
c000c778:	89 14 85 a0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4260],edx
c000c77f:	eb 13                	jmp    c000c794 <scanMADT()+0x42c>
c000c781:	8d 76 00             	lea    esi,[esi+0x0]
c000c784:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c789:	83 f8 05             	cmp    eax,0x5
c000c78c:	75 06                	jne    c000c794 <scanMADT()+0x42c>
c000c78e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c793:	90                   	nop
c000c794:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c799:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c79d:	01 d0                	add    eax,edx
c000c79f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c7a3:	e9 50 fc ff ff       	jmp    c000c3f8 <scanMADT()+0x90>
c000c7a8:	90                   	nop
c000c7a9:	eb 0d                	jmp    c000c7b8 <scanMADT()+0x450>
c000c7ab:	90                   	nop
c000c7ac:	90                   	nop
c000c7ad:	eb 09                	jmp    c000c7b8 <scanMADT()+0x450>
c000c7af:	90                   	nop
c000c7b0:	90                   	nop
c000c7b1:	eb 05                	jmp    c000c7b8 <scanMADT()+0x450>
c000c7b3:	90                   	nop
c000c7b4:	90                   	nop
c000c7b5:	8d 76 00             	lea    esi,[esi+0x0]
c000c7b8:	83 c4 38             	add    esp,0x38
c000c7bb:	5b                   	pop    ebx
c000c7bc:	c3                   	ret    
c000c7bd:	90                   	nop
c000c7be:	66 90                	xchg   ax,ax

c000c7c0 <ACPI::ACPI()>:
c000c7c0:	83 ec 0c             	sub    esp,0xc
c000c7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c7:	83 ec 08             	sub    esp,0x8
c000c7ca:	68 51 39 02 c0       	push   0xc0023951
c000c7cf:	50                   	push   eax
c000c7d0:	e8 89 d3 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000c7d5:	83 c4 10             	add    esp,0x10
c000c7d8:	ba 4c 3b 02 c0       	mov    edx,0xc0023b4c
c000c7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7e1:	89 10                	mov    DWORD PTR [eax],edx
c000c7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7e7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7f2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c800:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c80a:	e8 59 fb ff ff       	call   c000c368 <scanMADT()>
c000c80f:	90                   	nop
c000c810:	83 c4 0c             	add    esp,0xc
c000c813:	c3                   	ret    

c000c814 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c814:	83 ec 2c             	sub    esp,0x2c
c000c817:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c81b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c81f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c823:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c827:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c82c:	88 d0                	mov    al,dl
c000c82e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c832:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c837:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c83f:	90                   	nop
c000c840:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c844:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c84a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c84e:	0f 8d b0 00 00 00    	jge    c000c904 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c854:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c858:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c85c:	83 c2 2a             	add    edx,0x2a
c000c85f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c863:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c868:	0f b7 c0             	movzx  eax,ax
c000c86b:	39 c2                	cmp    edx,eax
c000c86d:	0f 85 85 00 00 00    	jne    c000c8f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c873:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c877:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c87b:	83 c2 2a             	add    edx,0x2a
c000c87e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c882:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c887:	0f b6 c0             	movzx  eax,al
c000c88a:	39 c2                	cmp    edx,eax
c000c88c:	75 6a                	jne    c000c8f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c88e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c893:	85 c0                	test   eax,eax
c000c895:	74 3d                	je     c000c8d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c897:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c89b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c89f:	83 c2 2a             	add    edx,0x2a
c000c8a2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c8a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8ad:	39 c2                	cmp    edx,eax
c000c8af:	74 13                	je     c000c8c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c8b1:	83 ec 0c             	sub    esp,0xc
c000c8b4:	68 cc 3a 02 c0       	push   0xc0023acc
c000c8b9:	e8 20 37 00 00       	call   c000ffde <KePanic(char const*)>
c000c8be:	83 c4 10             	add    esp,0x10
c000c8c1:	8d 76 00             	lea    esi,[esi+0x0]
c000c8c4:	83 ec 0c             	sub    esp,0xc
c000c8c7:	68 56 39 02 c0       	push   0xc0023956
c000c8cc:	e8 0d 37 00 00       	call   c000ffde <KePanic(char const*)>
c000c8d1:	83 c4 10             	add    esp,0x10
c000c8d4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c8d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8e0:	83 c2 2a             	add    edx,0x2a
c000c8e3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c8e7:	8b 02                	mov    eax,DWORD PTR [edx]
c000c8e9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c8ec:	89 01                	mov    DWORD PTR [ecx],eax
c000c8ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c8f1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c8f6:	66 90                	xchg   ax,ax
c000c8f8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c8fd:	e9 3e ff ff ff       	jmp    c000c840 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c902:	66 90                	xchg   ax,ax
c000c904:	90                   	nop
c000c905:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c909:	83 c4 2c             	add    esp,0x2c
c000c90c:	c2 04 00             	ret    0x4
c000c90f:	90                   	nop

c000c910 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c910:	83 ec 1c             	sub    esp,0x1c
c000c913:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c917:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c91b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c91f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c924:	88 c8                	mov    al,cl
c000c926:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c92a:	88 d0                	mov    al,dl
c000c92c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c934:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c93e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c941:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c945:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c949:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c94d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c953:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c957:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000c95a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c95e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000c963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c967:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c96d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c971:	83 c0 01             	add    eax,0x1
c000c974:	88 c1                	mov    cl,al
c000c976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97a:	83 c2 2a             	add    edx,0x2a
c000c97d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c985:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c98b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c98f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c992:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c996:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c99a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9a4:	8d 50 01             	lea    edx,[eax+0x1]
c000c9a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ab:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c9b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9bb:	3d 00 02 00 00       	cmp    eax,0x200
c000c9c0:	75 12                	jne    c000c9d4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c9c2:	83 ec 0c             	sub    esp,0xc
c000c9c5:	68 65 39 02 c0       	push   0xc0023965
c000c9ca:	e8 0f 36 00 00       	call   c000ffde <KePanic(char const*)>
c000c9cf:	83 c4 10             	add    esp,0x10
c000c9d2:	66 90                	xchg   ax,ax
c000c9d4:	90                   	nop
c000c9d5:	83 c4 1c             	add    esp,0x1c
c000c9d8:	c3                   	ret    
c000c9d9:	90                   	nop
c000c9da:	66 90                	xchg   ax,ax

c000c9dc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000c9dc:	b8 00 00 00 00       	mov    eax,0x0
c000c9e1:	c3                   	ret    
c000c9e2:	66 90                	xchg   ax,ax

c000c9e4 <ACPI::detectPCI()>:
c000c9e4:	53                   	push   ebx
c000c9e5:	83 ec 28             	sub    esp,0x28
c000c9e8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c9ed:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000c9f2:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c9f7:	83 ec 08             	sub    esp,0x8
c000c9fa:	68 82 39 02 c0       	push   0xc0023982
c000c9ff:	50                   	push   eax
c000ca00:	e8 ef f8 ff ff       	call   c000c2f4 <findDataTable(unsigned char*, char*)>
c000ca05:	83 c4 10             	add    esp,0x10
c000ca08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca0c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca11:	74 0d                	je     c000ca20 <ACPI::detectPCI()+0x3c>
c000ca13:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca18:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ca20:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ca28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca2c:	8a 00                	mov    al,BYTE PTR [eax]
c000ca2e:	0f b6 c0             	movzx  eax,al
c000ca31:	83 f8 01             	cmp    eax,0x1
c000ca34:	75 0e                	jne    c000ca44 <ACPI::detectPCI()+0x60>
c000ca36:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca3b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca40:	eb 2e                	jmp    c000ca70 <ACPI::detectPCI()+0x8c>
c000ca42:	66 90                	xchg   ax,ax
c000ca44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca48:	8a 00                	mov    al,BYTE PTR [eax]
c000ca4a:	0f b6 c0             	movzx  eax,al
c000ca4d:	83 f8 02             	cmp    eax,0x2
c000ca50:	75 1e                	jne    c000ca70 <ACPI::detectPCI()+0x8c>
c000ca52:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca57:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ca5c:	85 c0                	test   eax,eax
c000ca5e:	74 10                	je     c000ca70 <ACPI::detectPCI()+0x8c>
c000ca60:	83 ec 0c             	sub    esp,0xc
c000ca63:	68 fc 3a 02 c0       	push   0xc0023afc
c000ca68:	e8 71 35 00 00       	call   c000ffde <KePanic(char const*)>
c000ca6d:	83 c4 10             	add    esp,0x10
c000ca70:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ca74:	83 f0 01             	xor    eax,0x1
c000ca77:	0f b6 c0             	movzx  eax,al
c000ca7a:	85 c0                	test   eax,eax
c000ca7c:	74 46                	je     c000cac4 <ACPI::detectPCI()+0xe0>
c000ca7e:	e8 ad 36 ff ff       	call   c0000130 <manualPCIProbe>
c000ca83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca87:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ca8c:	75 0e                	jne    c000ca9c <ACPI::detectPCI()+0xb8>
c000ca8e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca93:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca98:	eb 2a                	jmp    c000cac4 <ACPI::detectPCI()+0xe0>
c000ca9a:	66 90                	xchg   ax,ax
c000ca9c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000caa1:	75 21                	jne    c000cac4 <ACPI::detectPCI()+0xe0>
c000caa3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000caa8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000caad:	85 c0                	test   eax,eax
c000caaf:	74 13                	je     c000cac4 <ACPI::detectPCI()+0xe0>
c000cab1:	83 ec 0c             	sub    esp,0xc
c000cab4:	68 fc 3a 02 c0       	push   0xc0023afc
c000cab9:	e8 20 35 00 00       	call   c000ffde <KePanic(char const*)>
c000cabe:	83 c4 10             	add    esp,0x10
c000cac1:	8d 76 00             	lea    esi,[esi+0x0]
c000cac4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cac9:	85 c0                	test   eax,eax
c000cacb:	0f 84 87 00 00 00    	je     c000cb58 <ACPI::detectPCI()+0x174>
c000cad1:	83 ec 0c             	sub    esp,0xc
c000cad4:	68 87 39 02 c0       	push   0xc0023987
c000cad9:	e8 81 07 00 00       	call   c000d25f <KeSetBootMessage(char const*)>
c000cade:	83 c4 10             	add    esp,0x10
c000cae1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cae9:	83 ec 0c             	sub    esp,0xc
c000caec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000caf0:	e8 a2 31 00 00       	call   c000fc97 <malloc>
c000caf5:	83 c4 10             	add    esp,0x10
c000caf8:	89 c3                	mov    ebx,eax
c000cafa:	83 ec 0c             	sub    esp,0xc
c000cafd:	53                   	push   ebx
c000cafe:	e8 5d 0a 01 00       	call   c001d560 <PCI::PCI()>
c000cb03:	83 c4 10             	add    esp,0x10
c000cb06:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb0e:	83 ec 08             	sub    esp,0x8
c000cb11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb15:	50                   	push   eax
c000cb16:	e8 e1 ce ff ff       	call   c00099fc <Device::addChild(Device*)>
c000cb1b:	83 c4 10             	add    esp,0x10
c000cb1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb22:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb24:	83 c0 08             	add    eax,0x8
c000cb27:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb29:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cb2e:	85 d2                	test   edx,edx
c000cb30:	74 0a                	je     c000cb3c <ACPI::detectPCI()+0x158>
c000cb32:	ba 01 00 00 00       	mov    edx,0x1
c000cb37:	eb 0b                	jmp    c000cb44 <ACPI::detectPCI()+0x160>
c000cb39:	8d 76 00             	lea    esi,[esi+0x0]
c000cb3c:	ba 02 00 00 00       	mov    edx,0x2
c000cb41:	8d 76 00             	lea    esi,[esi+0x0]
c000cb44:	6a 00                	push   0x0
c000cb46:	6a 00                	push   0x0
c000cb48:	52                   	push   edx
c000cb49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb4d:	ff d0                	call   eax
c000cb4f:	83 c4 10             	add    esp,0x10
c000cb52:	e9 91 00 00 00       	jmp    c000cbe8 <ACPI::detectPCI()+0x204>
c000cb57:	90                   	nop
c000cb58:	83 ec 0c             	sub    esp,0xc
c000cb5b:	68 9f 39 02 c0       	push   0xc002399f
c000cb60:	e8 fa 06 00 00       	call   c000d25f <KeSetBootMessage(char const*)>
c000cb65:	83 c4 10             	add    esp,0x10
c000cb68:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cb6f:	83 ec 0c             	sub    esp,0xc
c000cb72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb76:	e8 1c 31 00 00       	call   c000fc97 <malloc>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	89 c3                	mov    ebx,eax
c000cb80:	83 ec 0c             	sub    esp,0xc
c000cb83:	53                   	push   ebx
c000cb84:	e8 dd 15 01 00       	call   c001e166 <IDE::IDE()>
c000cb89:	83 c4 10             	add    esp,0x10
c000cb8c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cb90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb94:	83 ec 08             	sub    esp,0x8
c000cb97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb9b:	50                   	push   eax
c000cb9c:	e8 5b ce ff ff       	call   c00099fc <Device::addChild(Device*)>
c000cba1:	83 c4 10             	add    esp,0x10
c000cba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cba8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cbb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbb6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cbbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbc3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cbcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd2:	83 c0 08             	add    eax,0x8
c000cbd5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd7:	6a 00                	push   0x0
c000cbd9:	6a 00                	push   0x0
c000cbdb:	6a 00                	push   0x0
c000cbdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe1:	ff d0                	call   eax
c000cbe3:	83 c4 10             	add    esp,0x10
c000cbe6:	66 90                	xchg   ax,ax
c000cbe8:	90                   	nop
c000cbe9:	83 c4 28             	add    esp,0x28
c000cbec:	5b                   	pop    ebx
c000cbed:	c3                   	ret    
c000cbee:	66 90                	xchg   ax,ax

c000cbf0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cbf0:	83 ec 0c             	sub    esp,0xc
c000cbf3:	83 ec 0c             	sub    esp,0xc
c000cbf6:	68 b4 39 02 c0       	push   0xc00239b4
c000cbfb:	e8 de 33 00 00       	call   c000ffde <KePanic(char const*)>
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	90                   	nop
c000cc04:	83 c4 0c             	add    esp,0xc
c000cc07:	c3                   	ret    

c000cc08 <ACPI::open(int, int, void*)>:
c000cc08:	57                   	push   edi
c000cc09:	56                   	push   esi
c000cc0a:	53                   	push   ebx
c000cc0b:	81 ec 70 01 00 00    	sub    esp,0x170
c000cc11:	83 ec 0c             	sub    esp,0xc
c000cc14:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000cc1b:	e8 c4 fd ff ff       	call   c000c9e4 <ACPI::detectPCI()>
c000cc20:	83 c4 10             	add    esp,0x10
c000cc23:	83 ec 0c             	sub    esp,0xc
c000cc26:	68 24 3b 02 c0       	push   0xc0023b24
c000cc2b:	e8 2f 06 00 00       	call   c000d25f <KeSetBootMessage(char const*)>
c000cc30:	83 c4 10             	add    esp,0x10
c000cc33:	b8 4c 05 00 00       	mov    eax,0x54c
c000cc38:	8a 00                	mov    al,BYTE PTR [eax]
c000cc3a:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000cc41:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cc49:	83 f8 01             	cmp    eax,0x1
c000cc4c:	75 12                	jne    c000cc60 <ACPI::open(int, int, void*)+0x58>
c000cc4e:	83 ec 0c             	sub    esp,0xc
c000cc51:	68 c5 39 02 c0       	push   0xc00239c5
c000cc56:	e8 ea 8c 00 00       	call   c0015945 <Thr::loadKernelSymbolTable(char const*)>
c000cc5b:	83 c4 10             	add    esp,0x10
c000cc5e:	eb 34                	jmp    c000cc94 <ACPI::open(int, int, void*)+0x8c>
c000cc60:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cc68:	3d bb 00 00 00       	cmp    eax,0xbb
c000cc6d:	75 15                	jne    c000cc84 <ACPI::open(int, int, void*)+0x7c>
c000cc6f:	83 ec 0c             	sub    esp,0xc
c000cc72:	68 e3 39 02 c0       	push   0xc00239e3
c000cc77:	e8 c9 8c 00 00       	call   c0015945 <Thr::loadKernelSymbolTable(char const*)>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	eb 13                	jmp    c000cc94 <ACPI::open(int, int, void*)+0x8c>
c000cc81:	8d 76 00             	lea    esi,[esi+0x0]
c000cc84:	83 ec 0c             	sub    esp,0xc
c000cc87:	68 01 3a 02 c0       	push   0xc0023a01
c000cc8c:	e8 4d 33 00 00       	call   c000ffde <KePanic(char const*)>
c000cc91:	83 c4 10             	add    esp,0x10
c000cc94:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000cc9c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000cca7:	83 ec 0c             	sub    esp,0xc
c000ccaa:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ccb1:	e8 e1 2f 00 00       	call   c000fc97 <malloc>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 c3                	mov    ebx,eax
c000ccbb:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000ccc0:	83 ec 04             	sub    esp,0x4
c000ccc3:	50                   	push   eax
c000ccc4:	68 1b 3a 02 c0       	push   0xc0023a1b
c000ccc9:	53                   	push   ebx
c000ccca:	e8 63 b4 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000cccf:	83 c4 10             	add    esp,0x10
c000ccd2:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ccd9:	83 ec 08             	sub    esp,0x8
c000ccdc:	6a 01                	push   0x1
c000ccde:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cce5:	e8 66 b4 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000ccea:	83 c4 10             	add    esp,0x10
c000cced:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ccf4:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ccfc:	75 16                	jne    c000cd14 <ACPI::open(int, int, void*)+0x10c>
c000ccfe:	83 ec 0c             	sub    esp,0xc
c000cd01:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd08:	e8 a1 b4 ff ff       	call   c00081ae <File::close()>
c000cd0d:	83 c4 10             	add    esp,0x10
c000cd10:	eb 0a                	jmp    c000cd1c <ACPI::open(int, int, void*)+0x114>
c000cd12:	66 90                	xchg   ax,ax
c000cd14:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000cd1c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000cd24:	74 1e                	je     c000cd44 <ACPI::open(int, int, void*)+0x13c>
c000cd26:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000cd2d:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd2f:	83 c0 08             	add    eax,0x8
c000cd32:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd34:	83 ec 0c             	sub    esp,0xc
c000cd37:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd3e:	ff d0                	call   eax
c000cd40:	83 c4 10             	add    esp,0x10
c000cd43:	90                   	nop
c000cd44:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000cd4b:	83 f0 01             	xor    eax,0x1
c000cd4e:	0f b6 c0             	movzx  eax,al
c000cd51:	85 c0                	test   eax,eax
c000cd53:	74 2f                	je     c000cd84 <ACPI::open(int, int, void*)+0x17c>
c000cd55:	83 ec 0c             	sub    esp,0xc
c000cd58:	68 39 3a 02 c0       	push   0xc0023a39
c000cd5d:	e8 fd 04 00 00       	call   c000d25f <KeSetBootMessage(char const*)>
c000cd62:	83 c4 10             	add    esp,0x10
c000cd65:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000cd70:	83 ec 0c             	sub    esp,0xc
c000cd73:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000cd7a:	e8 79 69 00 00       	call   c00136f8 <Virt::setupPageSwapping(int)>
c000cd7f:	83 c4 10             	add    esp,0x10
c000cd82:	66 90                	xchg   ax,ax
c000cd84:	83 ec 0c             	sub    esp,0xc
c000cd87:	68 54 3a 02 c0       	push   0xc0023a54
c000cd8c:	e8 ce 04 00 00       	call   c000d25f <KeSetBootMessage(char const*)>
c000cd91:	83 c4 10             	add    esp,0x10
c000cd94:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000cd9b:	83 ec 08             	sub    esp,0x8
c000cd9e:	6a 13                	push   0x13
c000cda0:	50                   	push   eax
c000cda1:	e8 84 cf ff ff       	call   c0009d2a <getDevicesOfType(DeviceType)>
c000cda6:	83 c4 0c             	add    esp,0xc
c000cda9:	8d 76 00             	lea    esi,[esi+0x0]
c000cdac:	83 ec 0c             	sub    esp,0xc
c000cdaf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cdb6:	50                   	push   eax
c000cdb7:	e8 70 50 01 00       	call   c0021e2c <LinkedList<Device>::isEmpty()>
c000cdbc:	83 c4 10             	add    esp,0x10
c000cdbf:	83 f0 01             	xor    eax,0x1
c000cdc2:	0f b6 c0             	movzx  eax,al
c000cdc5:	85 c0                	test   eax,eax
c000cdc7:	0f 84 47 01 00 00    	je     c000cf14 <ACPI::open(int, int, void*)+0x30c>
c000cdcd:	83 ec 0c             	sub    esp,0xc
c000cdd0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cdd7:	50                   	push   eax
c000cdd8:	e8 6b 50 01 00       	call   c0021e48 <LinkedList<Device>::getFirstElement()>
c000cddd:	83 c4 10             	add    esp,0x10
c000cde0:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000cde7:	83 ec 0c             	sub    esp,0xc
c000cdea:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cdf1:	50                   	push   eax
c000cdf2:	e8 59 50 01 00       	call   c0021e50 <LinkedList<Device>::removeFirst()>
c000cdf7:	83 c4 10             	add    esp,0x10
c000cdfa:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ce01:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ce08:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ce0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ce13:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ce19:	ba 09 00 00 00       	mov    edx,0x9
c000ce1e:	fc                   	cld    
c000ce1f:	89 c7                	mov    edi,eax
c000ce21:	89 de                	mov    esi,ebx
c000ce23:	89 d1                	mov    ecx,edx
c000ce25:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ce27:	83 ec 08             	sub    esp,0x8
c000ce2a:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ce2e:	50                   	push   eax
c000ce2f:	83 ec 24             	sub    esp,0x24
c000ce32:	89 e0                	mov    eax,esp
c000ce34:	89 c3                	mov    ebx,eax
c000ce36:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ce3a:	ba 09 00 00 00       	mov    edx,0x9
c000ce3f:	89 df                	mov    edi,ebx
c000ce41:	89 c6                	mov    esi,eax
c000ce43:	89 d1                	mov    ecx,edx
c000ce45:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ce47:	e8 fe 0b 01 00       	call   c001da4a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ce4c:	83 c4 30             	add    esp,0x30
c000ce4f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ce56:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ce5e:	0f 84 48 ff ff ff    	je     c000cdac <ACPI::open(int, int, void*)+0x1a4>
c000ce64:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ce6f:	83 ec 0c             	sub    esp,0xc
c000ce72:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ce79:	e8 19 2e 00 00       	call   c000fc97 <malloc>
c000ce7e:	83 c4 10             	add    esp,0x10
c000ce81:	89 c3                	mov    ebx,eax
c000ce83:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000ce88:	83 ec 04             	sub    esp,0x4
c000ce8b:	50                   	push   eax
c000ce8c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ce93:	53                   	push   ebx
c000ce94:	e8 99 b2 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000ce99:	83 c4 10             	add    esp,0x10
c000ce9c:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000cea3:	83 ec 0c             	sub    esp,0xc
c000cea6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cead:	e8 62 b5 ff ff       	call   c0008414 <File::exists()>
c000ceb2:	83 c4 10             	add    esp,0x10
c000ceb5:	0f b6 c0             	movzx  eax,al
c000ceb8:	85 c0                	test   eax,eax
c000ceba:	74 28                	je     c000cee4 <ACPI::open(int, int, void*)+0x2dc>
c000cebc:	83 ec 08             	sub    esp,0x8
c000cebf:	6a 01                	push   0x1
c000cec1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cec8:	e8 f2 94 00 00       	call   c00163bf <Thr::loadDLL(char const*, bool)>
c000cecd:	83 c4 10             	add    esp,0x10
c000ced0:	83 ec 08             	sub    esp,0x8
c000ced3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ceda:	50                   	push   eax
c000cedb:	e8 31 97 00 00       	call   c0016611 <Thr::executeDLL(unsigned long, void*)>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	90                   	nop
c000cee4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ceec:	0f 84 ba fe ff ff    	je     c000cdac <ACPI::open(int, int, void*)+0x1a4>
c000cef2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000cef9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cefb:	83 c0 08             	add    eax,0x8
c000cefe:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf00:	83 ec 0c             	sub    esp,0xc
c000cf03:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf0a:	ff d0                	call   eax
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	e9 98 fe ff ff       	jmp    c000cdac <ACPI::open(int, int, void*)+0x1a4>
c000cf14:	83 ec 0c             	sub    esp,0xc
c000cf17:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cf1e:	50                   	push   eax
c000cf1f:	e8 04 4f 01 00       	call   c0021e28 <LinkedList<Device>::~LinkedList()>
c000cf24:	83 c4 10             	add    esp,0x10
c000cf27:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000cf2d:	83 ec 08             	sub    esp,0x8
c000cf30:	6a 01                	push   0x1
c000cf32:	68 6e 3a 02 c0       	push   0xc0023a6e
c000cf37:	e8 83 94 00 00       	call   c00163bf <Thr::loadDLL(char const*, bool)>
c000cf3c:	83 c4 10             	add    esp,0x10
c000cf3f:	83 ec 08             	sub    esp,0x8
c000cf42:	53                   	push   ebx
c000cf43:	50                   	push   eax
c000cf44:	e8 c8 96 00 00       	call   c0016611 <Thr::executeDLL(unsigned long, void*)>
c000cf49:	83 c4 10             	add    esp,0x10
c000cf4c:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cf51:	85 c0                	test   eax,eax
c000cf53:	0f 84 27 01 00 00    	je     c000d080 <ACPI::open(int, int, void*)+0x478>
c000cf59:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000cf5e:	85 c0                	test   eax,eax
c000cf60:	0f 84 1a 01 00 00    	je     c000d080 <ACPI::open(int, int, void*)+0x478>
c000cf66:	83 ec 0c             	sub    esp,0xc
c000cf69:	68 8b 3a 02 c0       	push   0xc0023a8b
c000cf6e:	e8 ec 02 00 00       	call   c000d25f <KeSetBootMessage(char const*)>
c000cf73:	83 c4 10             	add    esp,0x10
c000cf76:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000cf81:	83 ec 0c             	sub    esp,0xc
c000cf84:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000cf8b:	e8 07 2d 00 00       	call   c000fc97 <malloc>
c000cf90:	83 c4 10             	add    esp,0x10
c000cf93:	89 c3                	mov    ebx,eax
c000cf95:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cf9a:	83 ec 04             	sub    esp,0x4
c000cf9d:	50                   	push   eax
c000cf9e:	68 a8 3a 02 c0       	push   0xc0023aa8
c000cfa3:	53                   	push   ebx
c000cfa4:	e8 89 b1 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000cfa9:	83 c4 10             	add    esp,0x10
c000cfac:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000cfb3:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000cfbb:	74 1f                	je     c000cfdc <ACPI::open(int, int, void*)+0x3d4>
c000cfbd:	83 ec 0c             	sub    esp,0xc
c000cfc0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000cfc7:	e8 48 b4 ff ff       	call   c0008414 <File::exists()>
c000cfcc:	83 c4 10             	add    esp,0x10
c000cfcf:	0f b6 c0             	movzx  eax,al
c000cfd2:	85 c0                	test   eax,eax
c000cfd4:	74 06                	je     c000cfdc <ACPI::open(int, int, void*)+0x3d4>
c000cfd6:	b0 01                	mov    al,0x1
c000cfd8:	eb 06                	jmp    c000cfe0 <ACPI::open(int, int, void*)+0x3d8>
c000cfda:	66 90                	xchg   ax,ax
c000cfdc:	b0 00                	mov    al,0x0
c000cfde:	66 90                	xchg   ax,ax
c000cfe0:	0f b6 c0             	movzx  eax,al
c000cfe3:	85 c0                	test   eax,eax
c000cfe5:	74 25                	je     c000d00c <ACPI::open(int, int, void*)+0x404>
c000cfe7:	83 ec 08             	sub    esp,0x8
c000cfea:	6a 01                	push   0x1
c000cfec:	68 a8 3a 02 c0       	push   0xc0023aa8
c000cff1:	e8 c9 93 00 00       	call   c00163bf <Thr::loadDLL(char const*, bool)>
c000cff6:	83 c4 10             	add    esp,0x10
c000cff9:	83 ec 08             	sub    esp,0x8
c000cffc:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000d003:	50                   	push   eax
c000d004:	e8 08 96 00 00       	call   c0016611 <Thr::executeDLL(unsigned long, void*)>
c000d009:	83 c4 10             	add    esp,0x10
c000d00c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d014:	74 2a                	je     c000d040 <ACPI::open(int, int, void*)+0x438>
c000d016:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d01e:	74 20                	je     c000d040 <ACPI::open(int, int, void*)+0x438>
c000d020:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d027:	8b 00                	mov    eax,DWORD PTR [eax]
c000d029:	83 c0 08             	add    eax,0x8
c000d02c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d02e:	83 ec 0c             	sub    esp,0xc
c000d031:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d038:	ff d0                	call   eax
c000d03a:	83 c4 10             	add    esp,0x10
c000d03d:	8d 76 00             	lea    esi,[esi+0x0]
c000d040:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000d045:	83 ec 08             	sub    esp,0x8
c000d048:	68 c5 3a 02 c0       	push   0xc0023ac5
c000d04d:	50                   	push   eax
c000d04e:	e8 a1 f2 ff ff       	call   c000c2f4 <findDataTable(unsigned char*, char*)>
c000d053:	83 c4 10             	add    esp,0x10
c000d056:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d05d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d065:	74 19                	je     c000d080 <ACPI::open(int, int, void*)+0x478>
c000d067:	83 ec 08             	sub    esp,0x8
c000d06a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d071:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d078:	e8 73 fb ff ff       	call   c000cbf0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d07d:	83 c4 10             	add    esp,0x10
c000d080:	b8 00 00 00 00       	mov    eax,0x0
c000d085:	81 c4 70 01 00 00    	add    esp,0x170
c000d08b:	5b                   	pop    ebx
c000d08c:	5e                   	pop    esi
c000d08d:	5f                   	pop    edi
c000d08e:	c3                   	ret    
c000d08f:	90                   	nop

c000d090 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d090:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d096:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d09d:	89 c2                	mov    edx,eax
c000d09f:	c1 fa 1f             	sar    edx,0x1f
c000d0a2:	83 ec 04             	sub    esp,0x4
c000d0a5:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d0a9:	51                   	push   ecx
c000d0aa:	52                   	push   edx
c000d0ab:	50                   	push   eax
c000d0ac:	e8 db 29 00 00       	call   c000fa8c <KeItoa(long long, char*)>
c000d0b1:	83 c4 10             	add    esp,0x10
c000d0b4:	83 ec 08             	sub    esp,0x8
c000d0b7:	68 70 3b 02 c0       	push   0xc0023b70
c000d0bc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0c0:	50                   	push   eax
c000d0c1:	e8 7a 35 ff ff       	call   c0000640 <strcpy>
c000d0c6:	83 c4 10             	add    esp,0x10
c000d0c9:	83 ec 08             	sub    esp,0x8
c000d0cc:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d0d3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0d7:	50                   	push   eax
c000d0d8:	e8 63 37 ff ff       	call   c0000840 <strcat>
c000d0dd:	83 c4 10             	add    esp,0x10
c000d0e0:	83 ec 08             	sub    esp,0x8
c000d0e3:	68 7e 3b 02 c0       	push   0xc0023b7e
c000d0e8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0ec:	50                   	push   eax
c000d0ed:	e8 4e 37 ff ff       	call   c0000840 <strcat>
c000d0f2:	83 c4 10             	add    esp,0x10
c000d0f5:	83 ec 08             	sub    esp,0x8
c000d0f8:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d0ff:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d103:	50                   	push   eax
c000d104:	e8 37 37 ff ff       	call   c0000840 <strcat>
c000d109:	83 c4 10             	add    esp,0x10
c000d10c:	83 ec 08             	sub    esp,0x8
c000d10f:	68 81 3b 02 c0       	push   0xc0023b81
c000d114:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d118:	50                   	push   eax
c000d119:	e8 22 37 ff ff       	call   c0000840 <strcat>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	83 ec 08             	sub    esp,0x8
c000d124:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d12b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d12f:	50                   	push   eax
c000d130:	e8 0b 37 ff ff       	call   c0000840 <strcat>
c000d135:	83 c4 10             	add    esp,0x10
c000d138:	83 ec 08             	sub    esp,0x8
c000d13b:	68 81 3b 02 c0       	push   0xc0023b81
c000d140:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d144:	50                   	push   eax
c000d145:	e8 f6 36 ff ff       	call   c0000840 <strcat>
c000d14a:	83 c4 10             	add    esp,0x10
c000d14d:	83 ec 08             	sub    esp,0x8
c000d150:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d154:	50                   	push   eax
c000d155:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d159:	50                   	push   eax
c000d15a:	e8 e1 36 ff ff       	call   c0000840 <strcat>
c000d15f:	83 c4 10             	add    esp,0x10
c000d162:	83 ec 0c             	sub    esp,0xc
c000d165:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d169:	50                   	push   eax
c000d16a:	e8 6f 2e 00 00       	call   c000ffde <KePanic(char const*)>
c000d16f:	83 c4 10             	add    esp,0x10
c000d172:	90                   	nop
c000d173:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d179:	c3                   	ret    

c000d17a <KeInitialiseAtexit()>:
c000d17a:	83 ec 10             	sub    esp,0x10
c000d17d:	c7 05 e0 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bfe0,0x0
c000d187:	6a 60                	push   0x60
c000d189:	6a 00                	push   0x0
c000d18b:	68 60 c0 02 c0       	push   0xc002c060
c000d190:	e8 5b 33 ff ff       	call   c00004f0 <memset>
c000d195:	83 c4 1c             	add    esp,0x1c
c000d198:	c3                   	ret    

c000d199 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d199:	a1 e0 bf 02 c0       	mov    eax,ds:0xc002bfe0
c000d19e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1a2:	89 14 85 60 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3fa0],edx
c000d1a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1ad:	89 14 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],edx
c000d1b4:	40                   	inc    eax
c000d1b5:	a3 e0 bf 02 c0       	mov    ds:0xc002bfe0,eax
c000d1ba:	83 f8 17             	cmp    eax,0x17
c000d1bd:	7e 0d                	jle    c000d1cc <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d1bf:	c7 44 24 04 83 3b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023b83
c000d1c7:	e9 12 2e 00 00       	jmp    c000ffde <KePanic(char const*)>
c000d1cc:	c3                   	ret    

c000d1cd <KeExecuteAtexit()>:
c000d1cd:	53                   	push   ebx
c000d1ce:	31 db                	xor    ebx,ebx
c000d1d0:	83 ec 08             	sub    esp,0x8
c000d1d3:	39 1d e0 bf 02 c0    	cmp    DWORD PTR ds:0xc002bfe0,ebx
c000d1d9:	7e 50                	jle    c000d22b <KeExecuteAtexit()+0x5e>
c000d1db:	8b 04 9d 60 c0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3fa0]
c000d1e2:	85 c0                	test   eax,eax
c000d1e4:	74 42                	je     c000d228 <KeExecuteAtexit()+0x5b>
c000d1e6:	51                   	push   ecx
c000d1e7:	50                   	push   eax
c000d1e8:	53                   	push   ebx
c000d1e9:	68 9c 3b 02 c0       	push   0xc0023b9c
c000d1ee:	e8 71 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d1f3:	58                   	pop    eax
c000d1f4:	ff 34 9d 00 c0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4000]
c000d1fb:	ff 14 9d 60 c0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd3fa0]
c000d202:	c7 04 24 be 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bbe
c000d209:	e8 56 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d20e:	c7 04 24 4f 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f4f
c000d215:	c7 04 9d 60 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd3fa0],0x0
c000d220:	e8 3f 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d225:	83 c4 10             	add    esp,0x10
c000d228:	43                   	inc    ebx
c000d229:	eb a8                	jmp    c000d1d3 <KeExecuteAtexit()+0x6>
c000d22b:	83 c4 08             	add    esp,0x8
c000d22e:	5b                   	pop    ebx
c000d22f:	c3                   	ret    

c000d230 <KeDisplaySplashScreen()>:
c000d230:	53                   	push   ebx
c000d231:	bb 01 00 00 00       	mov    ebx,0x1
c000d236:	83 ec 08             	sub    esp,0x8
c000d239:	43                   	inc    ebx
c000d23a:	0f be 83 c1 3b 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc43f]
c000d241:	85 c0                	test   eax,eax
c000d243:	74 15                	je     c000d25a <KeDisplaySplashScreen()+0x2a>
c000d245:	83 ec 0c             	sub    esp,0xc
c000d248:	6a 01                	push   0x1
c000d24a:	53                   	push   ebx
c000d24b:	6a 00                	push   0x0
c000d24d:	6a 0f                	push   0xf
c000d24f:	50                   	push   eax
c000d250:	e8 eb de 00 00       	call   c001b140 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d255:	83 c4 20             	add    esp,0x20
c000d258:	eb df                	jmp    c000d239 <KeDisplaySplashScreen()+0x9>
c000d25a:	83 c4 08             	add    esp,0x8
c000d25d:	5b                   	pop    ebx
c000d25e:	c3                   	ret    

c000d25f <KeSetBootMessage(char const*)>:
c000d25f:	57                   	push   edi
c000d260:	56                   	push   esi
c000d261:	53                   	push   ebx
c000d262:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d268:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d26f:	68 9e 00 00 00       	push   0x9e
c000d274:	6a 00                	push   0x0
c000d276:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d27a:	56                   	push   esi
c000d27b:	e8 70 32 ff ff       	call   c00004f0 <memset>
c000d280:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d283:	e8 e8 32 ff ff       	call   c0000570 <strlen>
c000d288:	ba 50 00 00 00       	mov    edx,0x50
c000d28d:	83 c4 10             	add    esp,0x10
c000d290:	29 c2                	sub    edx,eax
c000d292:	31 c9                	xor    ecx,ecx
c000d294:	83 e2 fe             	and    edx,0xfffffffe
c000d297:	01 f2                	add    edx,esi
c000d299:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d29e:	84 c0                	test   al,al
c000d2a0:	74 0a                	je     c000d2ac <KeSetBootMessage(char const*)+0x4d>
c000d2a2:	80 cc 07             	or     ah,0x7
c000d2a5:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d2a9:	41                   	inc    ecx
c000d2aa:	eb ed                	jmp    c000d299 <KeSetBootMessage(char const*)+0x3a>
c000d2ac:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d2b1:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d2b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d2b8:	50                   	push   eax
c000d2b9:	50                   	push   eax
c000d2ba:	53                   	push   ebx
c000d2bb:	68 d6 3b 02 c0       	push   0xc0023bd6
c000d2c0:	e8 9f 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d2c5:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d2cb:	5b                   	pop    ebx
c000d2cc:	5e                   	pop    esi
c000d2cd:	5f                   	pop    edi
c000d2ce:	c3                   	ret    

c000d2cf <__cxa_atexit>:
c000d2cf:	31 c0                	xor    eax,eax
c000d2d1:	c3                   	ret    

c000d2d2 <__cxa_finalize>:
c000d2d2:	c3                   	ret    

c000d2d3 <__stack_chk_fail>:
c000d2d3:	55                   	push   ebp
c000d2d4:	89 e5                	mov    ebp,esp
c000d2d6:	83 ec 10             	sub    esp,0x10
c000d2d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2dc:	68 e4 3b 02 c0       	push   0xc0023be4
c000d2e1:	e8 7e 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d2e6:	58                   	pop    eax
c000d2e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ea:	5a                   	pop    edx
c000d2eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d2ee:	68 e4 3b 02 c0       	push   0xc0023be4
c000d2f3:	e8 6c 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d2f8:	c7 04 24 ec 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bec
c000d2ff:	e8 da 2c 00 00       	call   c000ffde <KePanic(char const*)>
c000d304:	83 c4 10             	add    esp,0x10
c000d307:	c9                   	leave  
c000d308:	c3                   	ret    

c000d309 <__cxa_pure_virtual>:
c000d309:	83 ec 18             	sub    esp,0x18
c000d30c:	68 04 3c 02 c0       	push   0xc0023c04
c000d311:	e8 c8 2c 00 00       	call   c000ffde <KePanic(char const*)>
c000d316:	83 c4 1c             	add    esp,0x1c
c000d319:	c3                   	ret    

c000d31a <operator new[](unsigned long)>:
c000d31a:	e9 78 29 00 00       	jmp    c000fc97 <malloc>

c000d31f <operator delete(void*, unsigned long)>:
c000d31f:	e9 93 29 00 00       	jmp    c000fcb7 <rfree>

c000d324 <operator delete[](void*)>:
c000d324:	e9 8e 29 00 00       	jmp    c000fcb7 <rfree>

c000d329 <operator delete[](void*, unsigned long)>:
c000d329:	e9 89 29 00 00       	jmp    c000fcb7 <rfree>
c000d32e:	66 90                	xchg   ax,ax

c000d330 <CUnlockScheduler>:
c000d330:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000d338:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d33d:	85 c0                	test   eax,eax
c000d33f:	75 03                	jne    c000d344 <CUnlockScheduler+0x14>
c000d341:	fb                   	sti    
c000d342:	66 90                	xchg   ax,ax
c000d344:	90                   	nop
c000d345:	c3                   	ret    
c000d346:	66 90                	xchg   ax,ax

c000d348 <CLockScheduler>:
c000d348:	fa                   	cli    
c000d349:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d34e:	83 c0 01             	add    eax,0x1
c000d351:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000d356:	90                   	nop
c000d357:	c3                   	ret    

c000d358 <CPrintf>:
c000d358:	83 ec 0c             	sub    esp,0xc
c000d35b:	83 ec 08             	sub    esp,0x8
c000d35e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d362:	68 17 3c 02 c0       	push   0xc0023c17
c000d367:	e8 f8 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d36c:	83 c4 10             	add    esp,0x10
c000d36f:	90                   	nop
c000d370:	83 c4 0c             	add    esp,0xc
c000d373:	c3                   	ret    

c000d374 <CmOpen(char const*)>:
c000d374:	57                   	push   edi
c000d375:	56                   	push   esi
c000d376:	53                   	push   ebx
c000d377:	83 ec 1c             	sub    esp,0x1c
c000d37a:	6a 30                	push   0x30
c000d37c:	e8 16 29 00 00       	call   c000fc97 <malloc>
c000d381:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d388:	89 c3                	mov    ebx,eax
c000d38a:	e8 08 29 00 00       	call   c000fc97 <malloc>
c000d38f:	83 c4 0c             	add    esp,0xc
c000d392:	89 c6                	mov    esi,eax
c000d394:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000d39a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d39e:	50                   	push   eax
c000d39f:	e8 8e ad ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000d3a4:	83 c4 0c             	add    esp,0xc
c000d3a7:	89 33                	mov    DWORD PTR [ebx],esi
c000d3a9:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d3ad:	50                   	push   eax
c000d3ae:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d3b2:	50                   	push   eax
c000d3b3:	56                   	push   esi
c000d3b4:	e8 99 b0 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000d3b9:	5a                   	pop    edx
c000d3ba:	59                   	pop    ecx
c000d3bb:	6a 01                	push   0x1
c000d3bd:	ff 33                	push   DWORD PTR [ebx]
c000d3bf:	e8 8c ad ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000d3c4:	5e                   	pop    esi
c000d3c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3c9:	e8 c9 28 00 00       	call   c000fc97 <malloc>
c000d3ce:	5a                   	pop    edx
c000d3cf:	89 c7                	mov    edi,eax
c000d3d1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d3d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3d7:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3d9:	56                   	push   esi
c000d3da:	57                   	push   edi
c000d3db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3e3:	50                   	push   eax
c000d3e4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3e7:	83 c4 14             	add    esp,0x14
c000d3ea:	ff 33                	push   DWORD PTR [ebx]
c000d3ec:	e8 bd ad ff ff       	call   c00081ae <File::close()>
c000d3f1:	59                   	pop    ecx
c000d3f2:	58                   	pop    eax
c000d3f3:	6a 13                	push   0x13
c000d3f5:	ff 33                	push   DWORD PTR [ebx]
c000d3f7:	e8 54 ad ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000d3fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3fe:	8b 10                	mov    edx,DWORD PTR [eax]
c000d400:	89 34 24             	mov    DWORD PTR [esp],esi
c000d403:	57                   	push   edi
c000d404:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d408:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d40c:	50                   	push   eax
c000d40d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d410:	83 c4 14             	add    esp,0x14
c000d413:	57                   	push   edi
c000d414:	e8 8e 28 00 00       	call   c000fca7 <free>
c000d419:	83 c4 10             	add    esp,0x10
c000d41c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d41f:	75 10                	jne    c000d431 <CmOpen(char const*)+0xbd>
c000d421:	83 ec 0c             	sub    esp,0xc
c000d424:	68 1a 3c 02 c0       	push   0xc0023c1a
c000d429:	e8 b0 2b 00 00       	call   c000ffde <KePanic(char const*)>
c000d42e:	83 c4 10             	add    esp,0x10
c000d431:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d434:	50                   	push   eax
c000d435:	6a 00                	push   0x0
c000d437:	6a 00                	push   0x0
c000d439:	ff 33                	push   DWORD PTR [ebx]
c000d43b:	e8 ce ad ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d440:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d442:	8b 10                	mov    edx,DWORD PTR [eax]
c000d444:	89 34 24             	mov    DWORD PTR [esp],esi
c000d447:	57                   	push   edi
c000d448:	6a 00                	push   0x0
c000d44a:	6a 2b                	push   0x2b
c000d44c:	50                   	push   eax
c000d44d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d450:	83 c4 1c             	add    esp,0x1c
c000d453:	6a 00                	push   0x0
c000d455:	6a 00                	push   0x0
c000d457:	ff 33                	push   DWORD PTR [ebx]
c000d459:	e8 b0 ad ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d45e:	83 c4 0c             	add    esp,0xc
c000d461:	6a 08                	push   0x8
c000d463:	68 2b 3c 02 c0       	push   0xc0023c2b
c000d468:	57                   	push   edi
c000d469:	e8 12 2f ff ff       	call   c0000380 <memcmp>
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	85 c0                	test   eax,eax
c000d473:	74 10                	je     c000d485 <CmOpen(char const*)+0x111>
c000d475:	83 ec 0c             	sub    esp,0xc
c000d478:	68 34 3c 02 c0       	push   0xc0023c34
c000d47d:	e8 5c 2b 00 00       	call   c000ffde <KePanic(char const*)>
c000d482:	83 c4 10             	add    esp,0x10
c000d485:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d489:	89 d8                	mov    eax,ebx
c000d48b:	83 c4 10             	add    esp,0x10
c000d48e:	5b                   	pop    ebx
c000d48f:	5e                   	pop    esi
c000d490:	5f                   	pop    edi
c000d491:	c3                   	ret    

c000d492 <CmClose(Reghive_Tag*)>:
c000d492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d496:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d49a:	74 0b                	je     c000d4a7 <CmClose(Reghive_Tag*)+0x15>
c000d49c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d49e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d4a2:	e9 07 ad ff ff       	jmp    c00081ae <File::close()>
c000d4a7:	c3                   	ret    

c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d4a8:	53                   	push   ebx
c000d4a9:	83 ec 18             	sub    esp,0x18
c000d4ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d4b0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d4b4:	74 29                	je     c000d4df <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d4b6:	50                   	push   eax
c000d4b7:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d4bc:	99                   	cdq    
c000d4bd:	52                   	push   edx
c000d4be:	50                   	push   eax
c000d4bf:	ff 33                	push   DWORD PTR [ebx]
c000d4c1:	e8 48 ad ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d4c6:	5a                   	pop    edx
c000d4c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4c9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d4cd:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4cf:	51                   	push   ecx
c000d4d0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d4d4:	6a 00                	push   0x0
c000d4d6:	6a 2b                	push   0x2b
c000d4d8:	50                   	push   eax
c000d4d9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d4dc:	83 c4 20             	add    esp,0x20
c000d4df:	83 c4 18             	add    esp,0x18
c000d4e2:	5b                   	pop    ebx
c000d4e3:	c3                   	ret    

c000d4e4 <CmGetString(Reghive_Tag*, int, char*)>:
c000d4e4:	55                   	push   ebp
c000d4e5:	57                   	push   edi
c000d4e6:	56                   	push   esi
c000d4e7:	53                   	push   ebx
c000d4e8:	31 db                	xor    ebx,ebx
c000d4ea:	83 ec 70             	sub    esp,0x70
c000d4ed:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d4f4:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d4f8:	50                   	push   eax
c000d4f9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d500:	55                   	push   ebp
c000d501:	e8 a2 ff ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d50e:	c1 e0 08             	shl    eax,0x8
c000d511:	89 c2                	mov    edx,eax
c000d513:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d518:	09 d0                	or     eax,edx
c000d51a:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d51f:	c1 e0 08             	shl    eax,0x8
c000d522:	09 d0                	or     eax,edx
c000d524:	74 25                	je     c000d54b <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d526:	6b fb 0d             	imul   edi,ebx,0xd
c000d529:	52                   	push   edx
c000d52a:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d52e:	52                   	push   edx
c000d52f:	50                   	push   eax
c000d530:	55                   	push   ebp
c000d531:	e8 72 ff ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d536:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d53a:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d541:	b9 27 00 00 00       	mov    ecx,0x27
c000d546:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d548:	83 c4 10             	add    esp,0x10
c000d54b:	83 c3 03             	add    ebx,0x3
c000d54e:	83 fb 15             	cmp    ebx,0x15
c000d551:	75 b6                	jne    c000d509 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d553:	83 c4 6c             	add    esp,0x6c
c000d556:	5b                   	pop    ebx
c000d557:	5e                   	pop    esi
c000d558:	5f                   	pop    edi
c000d559:	5d                   	pop    ebp
c000d55a:	c3                   	ret    

c000d55b <CmEnterDirectory(Reghive_Tag*, int)>:
c000d55b:	83 ec 40             	sub    esp,0x40
c000d55e:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d562:	50                   	push   eax
c000d563:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d567:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d56b:	e8 38 ff ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	83 c8 ff             	or     eax,0xffffffff
c000d576:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d57b:	75 19                	jne    c000d596 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d57d:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d582:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d587:	c1 e0 08             	shl    eax,0x8
c000d58a:	09 c2                	or     edx,eax
c000d58c:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d591:	c1 e0 10             	shl    eax,0x10
c000d594:	09 d0                	or     eax,edx
c000d596:	83 c4 3c             	add    esp,0x3c
c000d599:	c3                   	ret    

c000d59a <CmGetNext(Reghive_Tag*, int)>:
c000d59a:	83 ec 40             	sub    esp,0x40
c000d59d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d5a1:	50                   	push   eax
c000d5a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5a6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5aa:	e8 f9 fe ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5af:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d5b4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d5b9:	c1 e0 08             	shl    eax,0x8
c000d5bc:	09 c2                	or     edx,eax
c000d5be:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d5c3:	83 c4 4c             	add    esp,0x4c
c000d5c6:	c1 e0 10             	shl    eax,0x10
c000d5c9:	09 d0                	or     eax,edx
c000d5cb:	c3                   	ret    

c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d5cc:	53                   	push   ebx
c000d5cd:	83 ec 18             	sub    esp,0x18
c000d5d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d5d4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d5d8:	74 29                	je     c000d603 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d5da:	50                   	push   eax
c000d5db:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d5e0:	99                   	cdq    
c000d5e1:	52                   	push   edx
c000d5e2:	50                   	push   eax
c000d5e3:	ff 33                	push   DWORD PTR [ebx]
c000d5e5:	e8 24 ac ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d5ea:	5a                   	pop    edx
c000d5eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d5ed:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d5f1:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5f3:	51                   	push   ecx
c000d5f4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d5f8:	6a 00                	push   0x0
c000d5fa:	6a 2b                	push   0x2b
c000d5fc:	50                   	push   eax
c000d5fd:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d600:	83 c4 20             	add    esp,0x20
c000d603:	83 c4 18             	add    esp,0x18
c000d606:	5b                   	pop    ebx
c000d607:	c3                   	ret    

c000d608 <CmFreeExtent(Reghive_Tag*, int)>:
c000d608:	53                   	push   ebx
c000d609:	83 ec 3c             	sub    esp,0x3c
c000d60c:	6a 2b                	push   0x2b
c000d60e:	6a 00                	push   0x0
c000d610:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d614:	53                   	push   ebx
c000d615:	e8 d6 2e ff ff       	call   c00004f0 <memset>
c000d61a:	83 c4 0c             	add    esp,0xc
c000d61d:	53                   	push   ebx
c000d61e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d622:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d626:	e8 a1 ff ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d62b:	83 c4 48             	add    esp,0x48
c000d62e:	5b                   	pop    ebx
c000d62f:	c3                   	ret    

c000d630 <CmUpdateHeader(Reghive_Tag*)>:
c000d630:	83 ec 0c             	sub    esp,0xc
c000d633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d637:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d63b:	74 10                	je     c000d64d <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d63d:	52                   	push   edx
c000d63e:	8d 50 05             	lea    edx,[eax+0x5]
c000d641:	52                   	push   edx
c000d642:	6a 00                	push   0x0
c000d644:	50                   	push   eax
c000d645:	e8 82 ff ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d64a:	83 c4 10             	add    esp,0x10
c000d64d:	83 c4 0c             	add    esp,0xc
c000d650:	c3                   	ret    

c000d651 <CmExpand(Reghive_Tag*, int)>:
c000d651:	57                   	push   edi
c000d652:	56                   	push   esi
c000d653:	83 ce ff             	or     esi,0xffffffff
c000d656:	53                   	push   ebx
c000d657:	83 ec 30             	sub    esp,0x30
c000d65a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d65e:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d662:	74 5f                	je     c000d6c3 <CmExpand(Reghive_Tag*, int)+0x72>
c000d664:	31 d2                	xor    edx,edx
c000d666:	31 f6                	xor    esi,esi
c000d668:	50                   	push   eax
c000d669:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d66d:	52                   	push   edx
c000d66e:	50                   	push   eax
c000d66f:	ff 33                	push   DWORD PTR [ebx]
c000d671:	e8 98 ab ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d676:	83 c4 0c             	add    esp,0xc
c000d679:	6a 2b                	push   0x2b
c000d67b:	6a 00                	push   0x0
c000d67d:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d681:	57                   	push   edi
c000d682:	e8 69 2e ff ff       	call   c00004f0 <memset>
c000d687:	83 c4 10             	add    esp,0x10
c000d68a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d68e:	7d 1b                	jge    c000d6ab <CmExpand(Reghive_Tag*, int)+0x5a>
c000d690:	83 ec 0c             	sub    esp,0xc
c000d693:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d695:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d699:	8b 10                	mov    edx,DWORD PTR [eax]
c000d69b:	46                   	inc    esi
c000d69c:	51                   	push   ecx
c000d69d:	57                   	push   edi
c000d69e:	6a 00                	push   0x0
c000d6a0:	6a 2b                	push   0x2b
c000d6a2:	50                   	push   eax
c000d6a3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d6a6:	83 c4 20             	add    esp,0x20
c000d6a9:	eb df                	jmp    c000d68a <CmExpand(Reghive_Tag*, int)+0x39>
c000d6ab:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d6af:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d6b2:	83 ec 0c             	sub    esp,0xc
c000d6b5:	01 f2                	add    edx,esi
c000d6b7:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d6ba:	53                   	push   ebx
c000d6bb:	e8 70 ff ff ff       	call   c000d630 <CmUpdateHeader(Reghive_Tag*)>
c000d6c0:	83 c4 10             	add    esp,0x10
c000d6c3:	83 c4 30             	add    esp,0x30
c000d6c6:	89 f0                	mov    eax,esi
c000d6c8:	5b                   	pop    ebx
c000d6c9:	5e                   	pop    esi
c000d6ca:	5f                   	pop    edi
c000d6cb:	c3                   	ret    

c000d6cc <CmFindUnusedExtent(Reghive_Tag*)>:
c000d6cc:	55                   	push   ebp
c000d6cd:	57                   	push   edi
c000d6ce:	56                   	push   esi
c000d6cf:	53                   	push   ebx
c000d6d0:	83 cb ff             	or     ebx,0xffffffff
c000d6d3:	83 ec 1c             	sub    esp,0x1c
c000d6d6:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d6da:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d6de:	74 68                	je     c000d748 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d6e0:	be 2b 00 00 00       	mov    esi,0x2b
c000d6e5:	51                   	push   ecx
c000d6e6:	31 ff                	xor    edi,edi
c000d6e8:	6a 00                	push   0x0
c000d6ea:	31 db                	xor    ebx,ebx
c000d6ec:	6a 00                	push   0x0
c000d6ee:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d6f1:	e8 18 ab ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d6f6:	83 c4 10             	add    esp,0x10
c000d6f9:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d6fc:	76 3b                	jbe    c000d739 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d6fe:	83 ec 0c             	sub    esp,0xc
c000d701:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d704:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d708:	8b 10                	mov    edx,DWORD PTR [eax]
c000d70a:	51                   	push   ecx
c000d70b:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d70f:	51                   	push   ecx
c000d710:	6a 00                	push   0x0
c000d712:	6a 01                	push   0x1
c000d714:	50                   	push   eax
c000d715:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d718:	83 c4 20             	add    esp,0x20
c000d71b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d720:	74 26                	je     c000d748 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d722:	43                   	inc    ebx
c000d723:	52                   	push   edx
c000d724:	57                   	push   edi
c000d725:	56                   	push   esi
c000d726:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d729:	e8 e0 aa ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d72e:	83 c6 2b             	add    esi,0x2b
c000d731:	83 d7 00             	adc    edi,0x0
c000d734:	83 c4 10             	add    esp,0x10
c000d737:	eb c0                	jmp    c000d6f9 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d739:	50                   	push   eax
c000d73a:	50                   	push   eax
c000d73b:	6a 40                	push   0x40
c000d73d:	55                   	push   ebp
c000d73e:	e8 0e ff ff ff       	call   c000d651 <CmExpand(Reghive_Tag*, int)>
c000d743:	83 c4 10             	add    esp,0x10
c000d746:	89 c3                	mov    ebx,eax
c000d748:	83 c4 1c             	add    esp,0x1c
c000d74b:	89 d8                	mov    eax,ebx
c000d74d:	5b                   	pop    ebx
c000d74e:	5e                   	pop    esi
c000d74f:	5f                   	pop    edi
c000d750:	5d                   	pop    ebp
c000d751:	c3                   	ret    

c000d752 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d752:	55                   	push   ebp
c000d753:	57                   	push   edi
c000d754:	56                   	push   esi
c000d755:	53                   	push   ebx
c000d756:	81 ec 88 00 00 00    	sub    esp,0x88
c000d75c:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d763:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d76a:	e8 5d ff ff ff       	call   c000d6cc <CmFindUnusedExtent(Reghive_Tag*)>
c000d76f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d773:	83 c4 0c             	add    esp,0xc
c000d776:	6a 2b                	push   0x2b
c000d778:	6a 00                	push   0x0
c000d77a:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d77e:	55                   	push   ebp
c000d77f:	e8 6c 2d ff ff       	call   c00004f0 <memset>
c000d784:	83 c4 10             	add    esp,0x10
c000d787:	85 db                	test   ebx,ebx
c000d789:	74 12                	je     c000d79d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d78b:	51                   	push   ecx
c000d78c:	55                   	push   ebp
c000d78d:	53                   	push   ebx
c000d78e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d795:	e8 0e fd ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d79a:	83 c4 10             	add    esp,0x10
c000d79d:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d7a1:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d7a8:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d7ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7af:	85 db                	test   ebx,ebx
c000d7b1:	74 49                	je     c000d7fc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d7b3:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d7b8:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d7bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d7c1:	c1 e0 08             	shl    eax,0x8
c000d7c4:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d7ca:	09 c8                	or     eax,ecx
c000d7cc:	74 11                	je     c000d7df <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d7ce:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d7d2:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d7d6:	c1 e8 10             	shr    eax,0x10
c000d7d9:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d7dd:	eb 0f                	jmp    c000d7ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d7df:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d7e4:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d7e9:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d7ee:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d7f2:	c1 ea 08             	shr    edx,0x8
c000d7f5:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d7fa:	eb 0f                	jmp    c000d80b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d7fc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d801:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d806:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d80b:	52                   	push   edx
c000d80c:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d810:	50                   	push   eax
c000d811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d815:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d81c:	e8 ab fd ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d821:	83 c4 10             	add    esp,0x10
c000d824:	85 db                	test   ebx,ebx
c000d826:	74 12                	je     c000d83a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d828:	50                   	push   eax
c000d829:	55                   	push   ebp
c000d82a:	53                   	push   ebx
c000d82b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d832:	e8 95 fd ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d837:	83 c4 10             	add    esp,0x10
c000d83a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d83e:	83 c4 7c             	add    esp,0x7c
c000d841:	5b                   	pop    ebx
c000d842:	5e                   	pop    esi
c000d843:	5f                   	pop    edi
c000d844:	5d                   	pop    ebp
c000d845:	c3                   	ret    

c000d846 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d846:	55                   	push   ebp
c000d847:	57                   	push   edi
c000d848:	56                   	push   esi
c000d849:	53                   	push   ebx
c000d84a:	bb 27 00 00 00       	mov    ebx,0x27
c000d84f:	81 ec 88 00 00 00    	sub    esp,0x88
c000d855:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d85c:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d863:	e8 08 2d ff ff       	call   c0000570 <strlen>
c000d868:	8d 48 26             	lea    ecx,[eax+0x26]
c000d86b:	89 c8                	mov    eax,ecx
c000d86d:	99                   	cdq    
c000d86e:	f7 fb                	idiv   ebx
c000d870:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d874:	83 c4 10             	add    esp,0x10
c000d877:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d87d:	7e 10                	jle    c000d88f <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d87f:	83 ec 0c             	sub    esp,0xc
c000d882:	68 45 3c 02 c0       	push   0xc0023c45
c000d887:	e8 52 27 00 00       	call   c000ffde <KePanic(char const*)>
c000d88c:	83 c4 10             	add    esp,0x10
c000d88f:	31 ff                	xor    edi,edi
c000d891:	50                   	push   eax
c000d892:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d896:	53                   	push   ebx
c000d897:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d89e:	56                   	push   esi
c000d89f:	e8 04 fc ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d8a4:	83 c4 10             	add    esp,0x10
c000d8a7:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d8ab:	89 d0                	mov    eax,edx
c000d8ad:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d8b1:	c1 e0 08             	shl    eax,0x8
c000d8b4:	09 c2                	or     edx,eax
c000d8b6:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d8ba:	c1 e2 08             	shl    edx,0x8
c000d8bd:	09 c2                	or     edx,eax
c000d8bf:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d8c3:	7e 76                	jle    c000d93b <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d8c5:	85 d2                	test   edx,edx
c000d8c7:	75 25                	jne    c000d8ee <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d8c9:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d8ce:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d8d2:	50                   	push   eax
c000d8d3:	6a 00                	push   0x0
c000d8d5:	6a 00                	push   0x0
c000d8d7:	56                   	push   esi
c000d8d8:	e8 75 fe ff ff       	call   c000d752 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d8dd:	83 c4 10             	add    esp,0x10
c000d8e0:	89 c2                	mov    edx,eax
c000d8e2:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d8e5:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d8e8:	c1 f8 10             	sar    eax,0x10
c000d8eb:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d8ee:	55                   	push   ebp
c000d8ef:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d8f3:	55                   	push   ebp
c000d8f4:	52                   	push   edx
c000d8f5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d8f9:	56                   	push   esi
c000d8fa:	e8 a9 fb ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d8ff:	83 c4 0c             	add    esp,0xc
c000d902:	6a 27                	push   0x27
c000d904:	6a 00                	push   0x0
c000d906:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d90a:	51                   	push   ecx
c000d90b:	e8 e0 2b ff ff       	call   c00004f0 <memset>
c000d910:	83 c4 0c             	add    esp,0xc
c000d913:	6b c7 27             	imul   eax,edi,0x27
c000d916:	6a 27                	push   0x27
c000d918:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d91f:	50                   	push   eax
c000d920:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d924:	51                   	push   ecx
c000d925:	e8 56 2d ff ff       	call   c0000680 <strncpy>
c000d92a:	83 c4 0c             	add    esp,0xc
c000d92d:	55                   	push   ebp
c000d92e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d932:	52                   	push   edx
c000d933:	56                   	push   esi
c000d934:	e8 93 fc ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d939:	eb 19                	jmp    c000d954 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000d93b:	85 d2                	test   edx,edx
c000d93d:	74 18                	je     c000d957 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000d93f:	51                   	push   ecx
c000d940:	51                   	push   ecx
c000d941:	52                   	push   edx
c000d942:	56                   	push   esi
c000d943:	e8 c0 fc ff ff       	call   c000d608 <CmFreeExtent(Reghive_Tag*, int)>
c000d948:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d94c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d950:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d954:	83 c4 10             	add    esp,0x10
c000d957:	47                   	inc    edi
c000d958:	83 c3 03             	add    ebx,0x3
c000d95b:	83 ff 07             	cmp    edi,0x7
c000d95e:	0f 85 43 ff ff ff    	jne    c000d8a7 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d964:	50                   	push   eax
c000d965:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d969:	50                   	push   eax
c000d96a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d971:	56                   	push   esi
c000d972:	e8 55 fc ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d977:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d97d:	5b                   	pop    ebx
c000d97e:	5e                   	pop    esi
c000d97f:	5f                   	pop    edi
c000d980:	5d                   	pop    ebp
c000d981:	c3                   	ret    

c000d982 <CmGetMatch(char*, char*, bool, bool*)>:
c000d982:	56                   	push   esi
c000d983:	53                   	push   ebx
c000d984:	50                   	push   eax
c000d985:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d989:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d98e:	74 25                	je     c000d9b5 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d990:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d993:	31 db                	xor    ebx,ebx
c000d995:	50                   	push   eax
c000d996:	50                   	push   eax
c000d997:	8d 04 9d 80 60 02 c0 	lea    eax,[ebx*4-0x3ffd9f80]
c000d99e:	50                   	push   eax
c000d99f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a3:	e8 a8 2d ff ff       	call   c0000750 <strcmp>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	85 c0                	test   eax,eax
c000d9ad:	74 2e                	je     c000d9dd <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d9af:	43                   	inc    ebx
c000d9b0:	83 fb 3f             	cmp    ebx,0x3f
c000d9b3:	75 e0                	jne    c000d995 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d9b5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d9b8:	31 db                	xor    ebx,ebx
c000d9ba:	8d 04 9d 80 60 02 c0 	lea    eax,[ebx*4-0x3ffd9f80]
c000d9c1:	51                   	push   ecx
c000d9c2:	51                   	push   ecx
c000d9c3:	50                   	push   eax
c000d9c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d9c8:	e8 83 2d ff ff       	call   c0000750 <strcmp>
c000d9cd:	83 c4 10             	add    esp,0x10
c000d9d0:	85 c0                	test   eax,eax
c000d9d2:	74 09                	je     c000d9dd <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d9d4:	43                   	inc    ebx
c000d9d5:	83 fb 3f             	cmp    ebx,0x3f
c000d9d8:	75 e0                	jne    c000d9ba <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d9da:	83 cb ff             	or     ebx,0xffffffff
c000d9dd:	89 d8                	mov    eax,ebx
c000d9df:	5a                   	pop    edx
c000d9e0:	5b                   	pop    ebx
c000d9e1:	5e                   	pop    esi
c000d9e2:	c3                   	ret    

c000d9e3 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d9e3:	55                   	push   ebp
c000d9e4:	31 c0                	xor    eax,eax
c000d9e6:	57                   	push   edi
c000d9e7:	56                   	push   esi
c000d9e8:	53                   	push   ebx
c000d9e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9ed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d9f1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d9f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d9f7:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d9fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d9fe:	83 fd 1f             	cmp    ebp,0x1f
c000da01:	7f 0b                	jg     c000da0e <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000da03:	0f b6 c2             	movzx  eax,dl
c000da06:	d3 e0                	shl    eax,cl
c000da08:	09 07                	or     DWORD PTR [edi],eax
c000da0a:	b0 01                	mov    al,0x1
c000da0c:	01 33                	add    DWORD PTR [ebx],esi
c000da0e:	5b                   	pop    ebx
c000da0f:	5e                   	pop    esi
c000da10:	5f                   	pop    edi
c000da11:	5d                   	pop    ebp
c000da12:	c3                   	ret    

c000da13 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000da13:	57                   	push   edi
c000da14:	56                   	push   esi
c000da15:	53                   	push   ebx
c000da16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000da1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000da1e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da22:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000da26:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000da28:	7c 17                	jl     c000da41 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000da2a:	8b 17                	mov    edx,DWORD PTR [edi]
c000da2c:	b8 01 00 00 00       	mov    eax,0x1
c000da31:	d3 e0                	shl    eax,cl
c000da33:	48                   	dec    eax
c000da34:	21 d0                	and    eax,edx
c000da36:	d3 ea                	shr    edx,cl
c000da38:	89 17                	mov    DWORD PTR [edi],edx
c000da3a:	29 0b                	sub    DWORD PTR [ebx],ecx
c000da3c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da3f:	eb 05                	jmp    c000da46 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000da41:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da44:	31 c0                	xor    eax,eax
c000da46:	5b                   	pop    ebx
c000da47:	5e                   	pop    esi
c000da48:	5f                   	pop    edi
c000da49:	c3                   	ret    

c000da4a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000da4a:	83 ec 40             	sub    esp,0x40
c000da4d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000da51:	50                   	push   eax
c000da52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da5a:	e8 49 fa ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da5f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000da63:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000da67:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000da6b:	89 10                	mov    DWORD PTR [eax],edx
c000da6d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000da70:	83 c4 4c             	add    esp,0x4c
c000da73:	c3                   	ret    

c000da74 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000da74:	55                   	push   ebp
c000da75:	57                   	push   edi
c000da76:	56                   	push   esi
c000da77:	53                   	push   ebx
c000da78:	83 ec 40             	sub    esp,0x40
c000da7b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000da7f:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000da83:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000da87:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000da8b:	53                   	push   ebx
c000da8c:	56                   	push   esi
c000da8d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da91:	e8 12 fa ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da96:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000da9a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000da9e:	83 c4 0c             	add    esp,0xc
c000daa1:	53                   	push   ebx
c000daa2:	56                   	push   esi
c000daa3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000daa7:	e8 20 fb ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000daac:	83 c4 4c             	add    esp,0x4c
c000daaf:	5b                   	pop    ebx
c000dab0:	5e                   	pop    esi
c000dab1:	5f                   	pop    edi
c000dab2:	5d                   	pop    ebp
c000dab3:	c3                   	ret    

c000dab4 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000dab4:	55                   	push   ebp
c000dab5:	57                   	push   edi
c000dab6:	56                   	push   esi
c000dab7:	31 f6                	xor    esi,esi
c000dab9:	53                   	push   ebx
c000daba:	31 db                	xor    ebx,ebx
c000dabc:	83 ec 40             	sub    esp,0x40
c000dabf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000dacf:	6a 12                	push   0x12
c000dad1:	68 ee 00 00 00       	push   0xee
c000dad6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000dada:	e8 11 2a ff ff       	call   c00004f0 <memset>
c000dadf:	83 c4 10             	add    esp,0x10
c000dae2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000dae6:	6a 08                	push   0x8
c000dae8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000daec:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000daf0:	50                   	push   eax
c000daf1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000daf5:	55                   	push   ebp
c000daf6:	57                   	push   edi
c000daf7:	e8 e7 fe ff ff       	call   c000d9e3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dafc:	83 c4 10             	add    esp,0x10
c000daff:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db03:	50                   	push   eax
c000db04:	6a 06                	push   0x6
c000db06:	55                   	push   ebp
c000db07:	57                   	push   edi
c000db08:	e8 06 ff ff ff       	call   c000da13 <CmGetShift(unsigned int*, int*, int, bool*)>
c000db0d:	83 c4 10             	add    esp,0x10
c000db10:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000db15:	74 07                	je     c000db1e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000db17:	46                   	inc    esi
c000db18:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000db1c:	eb e1                	jmp    c000daff <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000db1e:	43                   	inc    ebx
c000db1f:	83 fb 12             	cmp    ebx,0x12
c000db22:	75 c2                	jne    c000dae6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000db24:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000db28:	31 db                	xor    ebx,ebx
c000db2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000db2d:	50                   	push   eax
c000db2e:	50                   	push   eax
c000db2f:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000db34:	43                   	inc    ebx
c000db35:	8d 04 85 80 60 02 c0 	lea    eax,[eax*4-0x3ffd9f80]
c000db3c:	50                   	push   eax
c000db3d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db41:	e8 fa 2c ff ff       	call   c0000840 <strcat>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	83 fb 18             	cmp    ebx,0x18
c000db4c:	75 df                	jne    c000db2d <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000db4e:	83 c4 3c             	add    esp,0x3c
c000db51:	31 c0                	xor    eax,eax
c000db53:	5b                   	pop    ebx
c000db54:	5e                   	pop    esi
c000db55:	5f                   	pop    edi
c000db56:	5d                   	pop    ebp
c000db57:	c3                   	ret    

c000db58 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000db58:	83 ec 40             	sub    esp,0x40
c000db5b:	8d 44 24 09          	lea    eax,[esp+0x9]
c000db5f:	50                   	push   eax
c000db60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db68:	e8 3b f9 ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db6d:	58                   	pop    eax
c000db6e:	5a                   	pop    edx
c000db6f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000db73:	8d 44 24 15          	lea    eax,[esp+0x15]
c000db77:	50                   	push   eax
c000db78:	e8 37 ff ff ff       	call   c000dab4 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000db7d:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000db82:	83 c4 4c             	add    esp,0x4c
c000db85:	c3                   	ret    

c000db86 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000db86:	55                   	push   ebp
c000db87:	57                   	push   edi
c000db88:	56                   	push   esi
c000db89:	53                   	push   ebx
c000db8a:	31 db                	xor    ebx,ebx
c000db8c:	83 ec 70             	sub    esp,0x70
c000db8f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000db96:	6a 30                	push   0x30
c000db98:	6a 00                	push   0x0
c000db9a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000db9e:	56                   	push   esi
c000db9f:	e8 4c 29 ff ff       	call   c00004f0 <memset>
c000dba4:	83 c4 10             	add    esp,0x10
c000dba7:	83 ec 0c             	sub    esp,0xc
c000dbaa:	57                   	push   edi
c000dbab:	e8 c0 29 ff ff       	call   c0000570 <strlen>
c000dbb0:	83 c4 10             	add    esp,0x10
c000dbb3:	39 d8                	cmp    eax,ebx
c000dbb5:	76 16                	jbe    c000dbcd <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dbb7:	83 ec 0c             	sub    esp,0xc
c000dbba:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dbbe:	50                   	push   eax
c000dbbf:	e8 6c 2d ff ff       	call   c0000930 <toupper>
c000dbc4:	83 c4 10             	add    esp,0x10
c000dbc7:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000dbca:	43                   	inc    ebx
c000dbcb:	eb da                	jmp    c000dba7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000dbcd:	31 f6                	xor    esi,esi
c000dbcf:	52                   	push   edx
c000dbd0:	31 ff                	xor    edi,edi
c000dbd2:	6a 18                	push   0x18
c000dbd4:	6a 3f                	push   0x3f
c000dbd6:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dbda:	50                   	push   eax
c000dbdb:	e8 10 29 ff ff       	call   c00004f0 <memset>
c000dbe0:	83 c4 10             	add    esp,0x10
c000dbe3:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000dbe7:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000dbeb:	84 c0                	test   al,al
c000dbed:	0f 84 b0 00 00 00    	je     c000dca3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dbf3:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dbf7:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000dbfc:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000dc00:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000dc05:	8d 6e 01             	lea    ebp,[esi+0x1]
c000dc08:	83 ec 0c             	sub    esp,0xc
c000dc0b:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dc0f:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dc13:	53                   	push   ebx
c000dc14:	e8 57 29 ff ff       	call   c0000570 <strlen>
c000dc19:	83 c4 10             	add    esp,0x10
c000dc1c:	85 c0                	test   eax,eax
c000dc1e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc22:	74 0b                	je     c000dc2f <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dc24:	50                   	push   eax
c000dc25:	6a 01                	push   0x1
c000dc27:	53                   	push   ebx
c000dc28:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dc2c:	50                   	push   eax
c000dc2d:	eb 0a                	jmp    c000dc39 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dc2f:	50                   	push   eax
c000dc30:	6a 00                	push   0x0
c000dc32:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dc36:	50                   	push   eax
c000dc37:	6a 00                	push   0x0
c000dc39:	e8 44 fd ff ff       	call   c000d982 <CmGetMatch(char*, char*, bool, bool*)>
c000dc3e:	83 c4 10             	add    esp,0x10
c000dc41:	83 f8 ff             	cmp    eax,0xffffffff
c000dc44:	75 1a                	jne    c000dc60 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	68 5a 3c 02 c0       	push   0xc0023c5a
c000dc4e:	e8 8b 23 00 00       	call   c000ffde <KePanic(char const*)>
c000dc53:	83 c4 10             	add    esp,0x10
c000dc56:	b8 02 00 00 00       	mov    eax,0x2
c000dc5b:	e9 bc 00 00 00       	jmp    c000dd1c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dc60:	83 ff 18             	cmp    edi,0x18
c000dc63:	75 1a                	jne    c000dc7f <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dc65:	83 ec 0c             	sub    esp,0xc
c000dc68:	68 6f 3c 02 c0       	push   0xc0023c6f
c000dc6d:	e8 6c 23 00 00       	call   c000ffde <KePanic(char const*)>
c000dc72:	83 c4 10             	add    esp,0x10
c000dc75:	b8 01 00 00 00       	mov    eax,0x1
c000dc7a:	e9 9d 00 00 00       	jmp    c000dd1c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dc7f:	47                   	inc    edi
c000dc80:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc85:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dc89:	74 02                	je     c000dc8d <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dc8b:	89 ee                	mov    esi,ebp
c000dc8d:	83 ec 0c             	sub    esp,0xc
c000dc90:	53                   	push   ebx
c000dc91:	e8 da 28 ff ff       	call   c0000570 <strlen>
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	85 c0                	test   eax,eax
c000dc9b:	74 06                	je     c000dca3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dc9d:	46                   	inc    esi
c000dc9e:	e9 40 ff ff ff       	jmp    c000dbe3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dca3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dcab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dcb3:	31 f6                	xor    esi,esi
c000dcb5:	50                   	push   eax
c000dcb6:	31 ff                	xor    edi,edi
c000dcb8:	6a 12                	push   0x12
c000dcba:	68 ee 00 00 00       	push   0xee
c000dcbf:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dcc6:	e8 25 28 ff ff       	call   c00004f0 <memset>
c000dccb:	83 c4 10             	add    esp,0x10
c000dcce:	83 fe 17             	cmp    esi,0x17
c000dcd1:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dcd5:	7e 26                	jle    c000dcfd <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dcd7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dcdb:	50                   	push   eax
c000dcdc:	6a 08                	push   0x8
c000dcde:	55                   	push   ebp
c000dcdf:	53                   	push   ebx
c000dce0:	e8 2e fd ff ff       	call   c000da13 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dce5:	83 c4 10             	add    esp,0x10
c000dce8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dced:	74 26                	je     c000dd15 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000dcef:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dcf6:	4e                   	dec    esi
c000dcf7:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dcfa:	47                   	inc    edi
c000dcfb:	eb 1c                	jmp    c000dd19 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dcfd:	6a 06                	push   0x6
c000dcff:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000dd04:	50                   	push   eax
c000dd05:	55                   	push   ebp
c000dd06:	53                   	push   ebx
c000dd07:	e8 d7 fc ff ff       	call   c000d9e3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dd0c:	83 c4 10             	add    esp,0x10
c000dd0f:	84 c0                	test   al,al
c000dd11:	75 06                	jne    c000dd19 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dd13:	eb c2                	jmp    c000dcd7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dd15:	31 c0                	xor    eax,eax
c000dd17:	eb 03                	jmp    c000dd1c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd19:	46                   	inc    esi
c000dd1a:	eb b2                	jmp    c000dcce <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000dd1c:	83 c4 6c             	add    esp,0x6c
c000dd1f:	5b                   	pop    ebx
c000dd20:	5e                   	pop    esi
c000dd21:	5f                   	pop    edi
c000dd22:	5d                   	pop    ebp
c000dd23:	c3                   	ret    

c000dd24 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dd24:	53                   	push   ebx
c000dd25:	83 ec 3c             	sub    esp,0x3c
c000dd28:	6a 2b                	push   0x2b
c000dd2a:	6a 00                	push   0x0
c000dd2c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd30:	53                   	push   ebx
c000dd31:	e8 ba 27 ff ff       	call   c00004f0 <memset>
c000dd36:	58                   	pop    eax
c000dd37:	5a                   	pop    edx
c000dd38:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd3c:	50                   	push   eax
c000dd3d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd41:	e8 40 fe ff ff       	call   c000db86 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd46:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dd4b:	83 c4 0c             	add    esp,0xc
c000dd4e:	6a 15                	push   0x15
c000dd50:	6a 00                	push   0x0
c000dd52:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dd56:	50                   	push   eax
c000dd57:	e8 94 27 ff ff       	call   c00004f0 <memset>
c000dd5c:	53                   	push   ebx
c000dd5d:	6a 00                	push   0x0
c000dd5f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd63:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd67:	e8 e6 f9 ff ff       	call   c000d752 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd6c:	83 c4 58             	add    esp,0x58
c000dd6f:	5b                   	pop    ebx
c000dd70:	c3                   	ret    

c000dd71 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dd71:	56                   	push   esi
c000dd72:	53                   	push   ebx
c000dd73:	83 ec 48             	sub    esp,0x48
c000dd76:	6a 12                	push   0x12
c000dd78:	68 ff 00 00 00       	push   0xff
c000dd7d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dd81:	56                   	push   esi
c000dd82:	e8 69 27 ff ff       	call   c00004f0 <memset>
c000dd87:	5a                   	pop    edx
c000dd88:	59                   	pop    ecx
c000dd89:	56                   	push   esi
c000dd8a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dd8e:	e8 f3 fd ff ff       	call   c000db86 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd93:	83 c4 10             	add    esp,0x10
c000dd96:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dd9a:	85 db                	test   ebx,ebx
c000dd9c:	74 42                	je     c000dde0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dd9e:	50                   	push   eax
c000dd9f:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dda3:	50                   	push   eax
c000dda4:	53                   	push   ebx
c000dda5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dda9:	e8 fa f6 ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ddae:	83 c4 0c             	add    esp,0xc
c000ddb1:	6a 12                	push   0x12
c000ddb3:	8d 44 24 21          	lea    eax,[esp+0x21]
c000ddb7:	50                   	push   eax
c000ddb8:	56                   	push   esi
c000ddb9:	e8 c2 25 ff ff       	call   c0000380 <memcmp>
c000ddbe:	83 c4 10             	add    esp,0x10
c000ddc1:	85 c0                	test   eax,eax
c000ddc3:	74 1e                	je     c000dde3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000ddc5:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000ddca:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000ddcf:	c1 e3 08             	shl    ebx,0x8
c000ddd2:	09 d8                	or     eax,ebx
c000ddd4:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000ddd9:	c1 e3 10             	shl    ebx,0x10
c000dddc:	09 c3                	or     ebx,eax
c000ddde:	eb ba                	jmp    c000dd9a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dde0:	83 cb ff             	or     ebx,0xffffffff
c000dde3:	89 d8                	mov    eax,ebx
c000dde5:	83 c4 44             	add    esp,0x44
c000dde8:	5b                   	pop    ebx
c000dde9:	5e                   	pop    esi
c000ddea:	c3                   	ret    

c000ddeb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000ddeb:	57                   	push   edi
c000ddec:	56                   	push   esi
c000dded:	53                   	push   ebx
c000ddee:	83 ec 34             	sub    esp,0x34
c000ddf1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000ddf5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000ddf9:	6a 2b                	push   0x2b
c000ddfb:	6a 00                	push   0x0
c000ddfd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000de01:	53                   	push   ebx
c000de02:	e8 e9 26 ff ff       	call   c00004f0 <memset>
c000de07:	58                   	pop    eax
c000de08:	5a                   	pop    edx
c000de09:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de0d:	50                   	push   eax
c000de0e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de12:	e8 6f fd ff ff       	call   c000db86 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de17:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000de1b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000de1f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000de23:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000de27:	53                   	push   ebx
c000de28:	6a 00                	push   0x0
c000de2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de32:	e8 1b f9 ff ff       	call   c000d752 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de37:	83 c4 50             	add    esp,0x50
c000de3a:	5b                   	pop    ebx
c000de3b:	5e                   	pop    esi
c000de3c:	5f                   	pop    edi
c000de3d:	c3                   	ret    

c000de3e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000de3e:	55                   	push   ebp
c000de3f:	57                   	push   edi
c000de40:	56                   	push   esi
c000de41:	53                   	push   ebx
c000de42:	83 ec 40             	sub    esp,0x40
c000de45:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000de49:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de4d:	6a 2b                	push   0x2b
c000de4f:	6a 00                	push   0x0
c000de51:	8d 74 24 11          	lea    esi,[esp+0x11]
c000de55:	56                   	push   esi
c000de56:	e8 95 26 ff ff       	call   c00004f0 <memset>
c000de5b:	5f                   	pop    edi
c000de5c:	89 ef                	mov    edi,ebp
c000de5e:	58                   	pop    eax
c000de5f:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de63:	50                   	push   eax
c000de64:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000de68:	e8 19 fd ff ff       	call   c000db86 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de6d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000de72:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000de77:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000de7c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000de81:	83 c4 10             	add    esp,0x10
c000de84:	85 ed                	test   ebp,ebp
c000de86:	74 14                	je     c000de9c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de88:	51                   	push   ecx
c000de89:	51                   	push   ecx
c000de8a:	57                   	push   edi
c000de8b:	53                   	push   ebx
c000de8c:	e8 09 f7 ff ff       	call   c000d59a <CmGetNext(Reghive_Tag*, int)>
c000de91:	83 c4 10             	add    esp,0x10
c000de94:	85 c0                	test   eax,eax
c000de96:	74 04                	je     c000de9c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de98:	89 c7                	mov    edi,eax
c000de9a:	eb e8                	jmp    c000de84 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000de9c:	56                   	push   esi
c000de9d:	6a 00                	push   0x0
c000de9f:	57                   	push   edi
c000dea0:	53                   	push   ebx
c000dea1:	e8 ac f8 ff ff       	call   c000d752 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dea6:	83 c4 0c             	add    esp,0xc
c000dea9:	89 c7                	mov    edi,eax
c000deab:	56                   	push   esi
c000deac:	50                   	push   eax
c000dead:	53                   	push   ebx
c000deae:	e8 f5 f5 ff ff       	call   c000d4a8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000deb3:	58                   	pop    eax
c000deb4:	5a                   	pop    edx
c000deb5:	6a 6c                	push   0x6c
c000deb7:	6a 00                	push   0x0
c000deb9:	6a 00                	push   0x0
c000debb:	68 80 3c 02 c0       	push   0xc0023c80
c000dec0:	57                   	push   edi
c000dec1:	53                   	push   ebx
c000dec2:	e8 24 ff ff ff       	call   c000ddeb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000dec7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000decb:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000decf:	c1 e8 10             	shr    eax,0x10
c000ded2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000ded6:	83 c4 1c             	add    esp,0x1c
c000ded9:	56                   	push   esi
c000deda:	57                   	push   edi
c000dedb:	53                   	push   ebx
c000dedc:	e8 eb f6 ff ff       	call   c000d5cc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dee1:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000dee6:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000deeb:	c1 e0 08             	shl    eax,0x8
c000deee:	09 c2                	or     edx,eax
c000def0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000def5:	83 c4 4c             	add    esp,0x4c
c000def8:	c1 e0 10             	shl    eax,0x10
c000defb:	5b                   	pop    ebx
c000defc:	09 d0                	or     eax,edx
c000defe:	5e                   	pop    esi
c000deff:	5f                   	pop    edi
c000df00:	5d                   	pop    ebp
c000df01:	c3                   	ret    

c000df02 <zStrtok(char*, char const*)>:
c000df02:	55                   	push   ebp
c000df03:	57                   	push   edi
c000df04:	56                   	push   esi
c000df05:	53                   	push   ebx
c000df06:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000df0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df0e:	85 db                	test   ebx,ebx
c000df10:	74 2f                	je     c000df41 <zStrtok(char*, char const*)+0x3f>
c000df12:	85 c0                	test   eax,eax
c000df14:	75 09                	jne    c000df1f <zStrtok(char*, char const*)+0x1d>
c000df16:	a1 c0 c0 02 c0       	mov    eax,ds:0xc002c0c0
c000df1b:	85 c0                	test   eax,eax
c000df1d:	74 50                	je     c000df6f <zStrtok(char*, char const*)+0x6d>
c000df1f:	31 c9                	xor    ecx,ecx
c000df21:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000df25:	74 03                	je     c000df2a <zStrtok(char*, char const*)+0x28>
c000df27:	41                   	inc    ecx
c000df28:	eb f7                	jmp    c000df21 <zStrtok(char*, char const*)+0x1f>
c000df2a:	31 d2                	xor    edx,edx
c000df2c:	39 ca                	cmp    edx,ecx
c000df2e:	74 15                	je     c000df45 <zStrtok(char*, char const*)+0x43>
c000df30:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000df34:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000df37:	8d 3c 10             	lea    edi,[eax+edx*1]
c000df3a:	39 ee                	cmp    esi,ebp
c000df3c:	74 13                	je     c000df51 <zStrtok(char*, char const*)+0x4f>
c000df3e:	42                   	inc    edx
c000df3f:	eb eb                	jmp    c000df2c <zStrtok(char*, char const*)+0x2a>
c000df41:	31 c0                	xor    eax,eax
c000df43:	eb 2a                	jmp    c000df6f <zStrtok(char*, char const*)+0x6d>
c000df45:	c7 05 c0 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c0c0,0x0
c000df4f:	eb 1e                	jmp    c000df6f <zStrtok(char*, char const*)+0x6d>
c000df51:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000df54:	39 ce                	cmp    esi,ecx
c000df56:	75 0a                	jne    c000df62 <zStrtok(char*, char const*)+0x60>
c000df58:	40                   	inc    eax
c000df59:	a3 c0 c0 02 c0       	mov    ds:0xc002c0c0,eax
c000df5e:	89 d8                	mov    eax,ebx
c000df60:	eb 0d                	jmp    c000df6f <zStrtok(char*, char const*)+0x6d>
c000df62:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000df66:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000df69:	89 15 c0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0c0,edx
c000df6f:	5b                   	pop    ebx
c000df70:	5e                   	pop    esi
c000df71:	5f                   	pop    edi
c000df72:	5d                   	pop    ebp
c000df73:	c3                   	ret    

c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000df74:	57                   	push   edi
c000df75:	56                   	push   esi
c000df76:	53                   	push   ebx
c000df77:	81 ec 08 01 00 00    	sub    esp,0x108
c000df7d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000df84:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000df8b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000df8f:	53                   	push   ebx
c000df90:	e8 ab 26 ff ff       	call   c0000640 <strcpy>
c000df95:	59                   	pop    ecx
c000df96:	5e                   	pop    esi
c000df97:	68 f5 4e 02 c0       	push   0xc0024ef5
c000df9c:	53                   	push   ebx
c000df9d:	bb 01 00 00 00       	mov    ebx,0x1
c000dfa2:	e8 5b ff ff ff       	call   c000df02 <zStrtok(char*, char const*)>
c000dfa7:	83 c4 10             	add    esp,0x10
c000dfaa:	85 c0                	test   eax,eax
c000dfac:	74 3b                	je     c000dfe9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfae:	52                   	push   edx
c000dfaf:	50                   	push   eax
c000dfb0:	6a 01                	push   0x1
c000dfb2:	57                   	push   edi
c000dfb3:	e8 b9 fd ff ff       	call   c000dd71 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000dfb8:	59                   	pop    ecx
c000dfb9:	89 c3                	mov    ebx,eax
c000dfbb:	5e                   	pop    esi
c000dfbc:	68 f5 4e 02 c0       	push   0xc0024ef5
c000dfc1:	6a 00                	push   0x0
c000dfc3:	e8 3a ff ff ff       	call   c000df02 <zStrtok(char*, char const*)>
c000dfc8:	83 c4 10             	add    esp,0x10
c000dfcb:	89 c6                	mov    esi,eax
c000dfcd:	85 c0                	test   eax,eax
c000dfcf:	74 18                	je     c000dfe9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfd1:	52                   	push   edx
c000dfd2:	52                   	push   edx
c000dfd3:	53                   	push   ebx
c000dfd4:	57                   	push   edi
c000dfd5:	e8 81 f5 ff ff       	call   c000d55b <CmEnterDirectory(Reghive_Tag*, int)>
c000dfda:	83 c4 10             	add    esp,0x10
c000dfdd:	89 c3                	mov    ebx,eax
c000dfdf:	83 f8 ff             	cmp    eax,0xffffffff
c000dfe2:	74 05                	je     c000dfe9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfe4:	50                   	push   eax
c000dfe5:	56                   	push   esi
c000dfe6:	53                   	push   ebx
c000dfe7:	eb c9                	jmp    c000dfb2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000dfe9:	81 c4 00 01 00 00    	add    esp,0x100
c000dfef:	89 d8                	mov    eax,ebx
c000dff1:	5b                   	pop    ebx
c000dff2:	5e                   	pop    esi
c000dff3:	5f                   	pop    edi
c000dff4:	c3                   	ret    

c000dff5 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000dff5:	55                   	push   ebp
c000dff6:	57                   	push   edi
c000dff7:	56                   	push   esi
c000dff8:	53                   	push   ebx
c000dff9:	83 ec 5c             	sub    esp,0x5c
c000dffc:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000e000:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000e004:	85 db                	test   ebx,ebx
c000e006:	0f 8e 84 00 00 00    	jle    c000e090 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000e00c:	31 ed                	xor    ebp,ebp
c000e00e:	57                   	push   edi
c000e00f:	6a 32                	push   0x32
c000e011:	6a 00                	push   0x0
c000e013:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000e017:	57                   	push   edi
c000e018:	e8 d3 24 ff ff       	call   c00004f0 <memset>
c000e01d:	83 c4 0c             	add    esp,0xc
c000e020:	57                   	push   edi
c000e021:	53                   	push   ebx
c000e022:	56                   	push   esi
c000e023:	e8 30 fb ff ff       	call   c000db58 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000e028:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e02c:	83 c4 10             	add    esp,0x10
c000e02f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000e033:	7d 13                	jge    c000e048 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000e035:	83 ec 0c             	sub    esp,0xc
c000e038:	45                   	inc    ebp
c000e039:	68 e8 53 02 c0       	push   0xc00253e8
c000e03e:	e8 21 8f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e043:	83 c4 10             	add    esp,0x10
c000e046:	eb e7                	jmp    c000e02f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000e048:	51                   	push   ecx
c000e049:	57                   	push   edi
c000e04a:	53                   	push   ebx
c000e04b:	68 86 3c 02 c0       	push   0xc0023c86
c000e050:	e8 0f 8f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e055:	83 c4 10             	add    esp,0x10
c000e058:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000e05d:	75 1e                	jne    c000e07d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000e05f:	52                   	push   edx
c000e060:	52                   	push   edx
c000e061:	53                   	push   ebx
c000e062:	56                   	push   esi
c000e063:	e8 f3 f4 ff ff       	call   c000d55b <CmEnterDirectory(Reghive_Tag*, int)>
c000e068:	83 c4 0c             	add    esp,0xc
c000e06b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000e06f:	8d 51 04             	lea    edx,[ecx+0x4]
c000e072:	52                   	push   edx
c000e073:	50                   	push   eax
c000e074:	56                   	push   esi
c000e075:	e8 7b ff ff ff       	call   c000dff5 <CmDisplayTree(Reghive_Tag*, int, int)>
c000e07a:	83 c4 10             	add    esp,0x10
c000e07d:	50                   	push   eax
c000e07e:	50                   	push   eax
c000e07f:	53                   	push   ebx
c000e080:	56                   	push   esi
c000e081:	e8 14 f5 ff ff       	call   c000d59a <CmGetNext(Reghive_Tag*, int)>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 c3                	mov    ebx,eax
c000e08b:	e9 74 ff ff ff       	jmp    c000e004 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000e090:	83 c4 5c             	add    esp,0x5c
c000e093:	5b                   	pop    ebx
c000e094:	5e                   	pop    esi
c000e095:	5f                   	pop    edi
c000e096:	5d                   	pop    ebp
c000e097:	c3                   	ret    

c000e098 <CmSplitFinalSlashInPlace(char*)>:
c000e098:	53                   	push   ebx
c000e099:	83 ec 14             	sub    esp,0x14
c000e09c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e0a0:	53                   	push   ebx
c000e0a1:	e8 ca 24 ff ff       	call   c0000570 <strlen>
c000e0a6:	83 c4 10             	add    esp,0x10
c000e0a9:	48                   	dec    eax
c000e0aa:	85 c0                	test   eax,eax
c000e0ac:	74 15                	je     c000e0c3 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000e0ae:	8d 14 03             	lea    edx,[ebx+eax*1]
c000e0b1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000e0b5:	75 09                	jne    c000e0c0 <CmSplitFinalSlashInPlace(char*)+0x28>
c000e0b7:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000e0ba:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000e0be:	eb 05                	jmp    c000e0c5 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000e0c0:	48                   	dec    eax
c000e0c1:	eb e7                	jmp    c000e0aa <CmSplitFinalSlashInPlace(char*)+0x12>
c000e0c3:	31 c0                	xor    eax,eax
c000e0c5:	83 c4 08             	add    esp,0x8
c000e0c8:	5b                   	pop    ebx
c000e0c9:	c3                   	ret    
c000e0ca:	66 90                	xchg   ax,ax

c000e0cc <Krnl::handlePowerButton()>:
c000e0cc:	83 ec 0c             	sub    esp,0xc
c000e0cf:	e8 46 28 00 00       	call   c001091a <KeHandlePowerButton()>
c000e0d4:	90                   	nop
c000e0d5:	83 c4 0c             	add    esp,0xc
c000e0d8:	c3                   	ret    
c000e0d9:	8d 76 00             	lea    esi,[esi+0x0]

c000e0dc <Krnl::handleSleepButton()>:
c000e0dc:	83 ec 0c             	sub    esp,0xc
c000e0df:	e8 4e 28 00 00       	call   c0010932 <KeHandleSleepButton()>
c000e0e4:	90                   	nop
c000e0e5:	83 c4 0c             	add    esp,0xc
c000e0e8:	c3                   	ret    
c000e0e9:	90                   	nop

c000e0ea <Computer::close(int, int, void*)>:
c000e0ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e0ef:	c3                   	ret    

c000e0f0 <Computer::open(int, int, void*)>:
c000e0f0:	56                   	push   esi
c000e0f1:	53                   	push   ebx
c000e0f2:	83 ec 04             	sub    esp,0x4
c000e0f5:	f6 05 24 e1 02 c0 04 	test   BYTE PTR ds:0xc002e124,0x4
c000e0fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e100:	0f 94 05 60 67 02 c0 	sete   BYTE PTR ds:0xc0026760
c000e107:	39 1d d0 c0 02 c0    	cmp    DWORD PTR ds:0xc002c0d0,ebx
c000e10d:	74 10                	je     c000e11f <Computer::open(int, int, void*)+0x2f>
c000e10f:	83 ec 0c             	sub    esp,0xc
c000e112:	68 90 3c 02 c0       	push   0xc0023c90
c000e117:	e8 c2 1e 00 00       	call   c000ffde <KePanic(char const*)>
c000e11c:	83 c4 10             	add    esp,0x10
c000e11f:	83 ec 0c             	sub    esp,0xc
c000e122:	68 48 3d 02 c0       	push   0xc0023d48
c000e127:	e8 33 f1 ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e12c:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e133:	e8 5f 1b 00 00       	call   c000fc97 <malloc>
c000e138:	89 04 24             	mov    DWORD PTR [esp],eax
c000e13b:	89 c6                	mov    esi,eax
c000e13d:	e8 7e e6 ff ff       	call   c000c7c0 <ACPI::ACPI()>
c000e142:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000e148:	58                   	pop    eax
c000e149:	5a                   	pop    edx
c000e14a:	56                   	push   esi
c000e14b:	53                   	push   ebx
c000e14c:	e8 ab b8 ff ff       	call   c00099fc <Device::addChild(Device*)>
c000e151:	c7 04 24 60 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d60
c000e158:	e8 02 f1 ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e15d:	e8 91 b5 00 00       	call   c00196f3 <HalEnableNMI()>
c000e162:	e8 c1 a7 00 00       	call   c0018928 <HalDetectFeatures()>
c000e167:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000e16e:	e8 24 1b 00 00       	call   c000fc97 <malloc>
c000e173:	89 04 24             	mov    DWORD PTR [esp],eax
c000e176:	89 c6                	mov    esi,eax
c000e178:	e8 b1 c0 00 00       	call   c001a22e <CPU::CPU()>
c000e17d:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e183:	59                   	pop    ecx
c000e184:	58                   	pop    eax
c000e185:	56                   	push   esi
c000e186:	53                   	push   ebx
c000e187:	e8 70 b8 ff ff       	call   c00099fc <Device::addChild(Device*)>
c000e18c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e190:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e196:	8b 10                	mov    edx,DWORD PTR [eax]
c000e198:	51                   	push   ecx
c000e199:	6a 00                	push   0x0
c000e19b:	6a 00                	push   0x0
c000e19d:	50                   	push   eax
c000e19e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e1a1:	83 c4 14             	add    esp,0x14
c000e1a4:	68 bc 3c 02 c0       	push   0xc0023cbc
c000e1a9:	e8 b1 f0 ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e1ae:	e8 d6 bc 00 00       	call   c0019e89 <HalInitialiseCoprocessor()>
c000e1b3:	c7 04 24 7a 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d7a
c000e1ba:	e8 a0 f0 ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e1bf:	c7 04 24 d6 e1 00 c0 	mov    DWORD PTR [esp],0xc000e1d6
c000e1c6:	e8 29 8c 00 00       	call   c0016df4 <setupMultitasking(void (*)())>
c000e1cb:	83 c4 14             	add    esp,0x14
c000e1ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e1d3:	5b                   	pop    ebx
c000e1d4:	5e                   	pop    esi
c000e1d5:	c3                   	ret    

c000e1d6 <KeFirstTask()>:
c000e1d6:	53                   	push   ebx
c000e1d7:	83 ec 14             	sub    esp,0x14
c000e1da:	fb                   	sti    
c000e1db:	68 95 3d 02 c0       	push   0xc0023d95
c000e1e0:	e8 7a f0 ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e1e5:	c7 04 24 84 07 00 00 	mov    DWORD PTR [esp],0x784
c000e1ec:	e8 a6 1a 00 00       	call   c000fc97 <malloc>
c000e1f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e1f8:	89 c3                	mov    ebx,eax
c000e1fa:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000e1ff:	50                   	push   eax
c000e200:	68 ae 3d 02 c0       	push   0xc0023dae
c000e205:	6a 01                	push   0x1
c000e207:	53                   	push   ebx
c000e208:	e8 47 88 00 00       	call   c0016a54 <Process::Process(bool, char const*, Process*, char**)>
c000e20d:	83 c4 20             	add    esp,0x20
c000e210:	68 ff 00 00 00       	push   0xff
c000e215:	6a 00                	push   0x0
c000e217:	68 d5 ee 00 c0       	push   0xc000eed5
c000e21c:	53                   	push   ebx
c000e21d:	e8 72 8a 00 00       	call   c0016c94 <Process::createThread(void (*)(void*), void*, int)>
c000e222:	8b 15 58 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea58
c000e228:	6a 7a                	push   0x7a
c000e22a:	6a 00                	push   0x0
c000e22c:	68 18 76 01 c0       	push   0xc0017618
c000e231:	52                   	push   edx
c000e232:	e8 5d 8a 00 00       	call   c0016c94 <Process::createThread(void (*)(void*), void*, int)>
c000e237:	83 c4 14             	add    esp,0x14
c000e23a:	a3 10 ea 02 c0       	mov    ds:0xc002ea10,eax
c000e23f:	68 e0 3c 02 c0       	push   0xc0023ce0
c000e244:	e8 16 f0 ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e249:	c6 05 d5 c0 02 c0 01 	mov    BYTE PTR ds:0xc002c0d5,0x1
c000e250:	e8 e9 27 00 00       	call   c0010a3e <KeInitRand()>
c000e255:	e8 8c 97 00 00       	call   c00179e6 <Vm::initialise8086()>
c000e25a:	e8 91 9b ff ff       	call   c0007df0 <Fs::initVFS()>
c000e25f:	c7 04 24 54 3a 02 c0 	mov    DWORD PTR [esp],0xc0023a54
c000e266:	e8 f4 ef ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e26b:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e270:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e276:	8b 10                	mov    edx,DWORD PTR [eax]
c000e278:	6a 00                	push   0x0
c000e27a:	6a 00                	push   0x0
c000e27c:	6a 00                	push   0x0
c000e27e:	50                   	push   eax
c000e27f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e282:	83 c4 14             	add    esp,0x14
c000e285:	68 e0 3c 02 c0       	push   0xc0023ce0
c000e28a:	e8 d0 ef ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e28f:	e8 41 93 ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000e294:	e8 f5 05 00 00       	call   c000e88e <KeLoadSystemEnv()>
c000e299:	e8 ac 26 00 00       	call   c001094a <KeSetupPowerManager()>
c000e29e:	c7 04 24 04 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d04
c000e2a5:	e8 b5 ef ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e2aa:	59                   	pop    ecx
c000e2ab:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e2b0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000e2b6:	53                   	push   ebx
c000e2b7:	e8 5c b8 ff ff       	call   c0009b18 <Device::loadDriversForAll()>
c000e2bc:	c7 04 24 bb 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dbb
c000e2c3:	e8 97 ef ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c000e2c8:	58                   	pop    eax
c000e2c9:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000e2cf:	5a                   	pop    edx
c000e2d0:	6a 01                	push   0x1
c000e2d2:	68 cc 3d 02 c0       	push   0xc0023dcc
c000e2d7:	e8 e3 80 00 00       	call   c00163bf <Thr::loadDLL(char const*, bool)>
c000e2dc:	59                   	pop    ecx
c000e2dd:	5a                   	pop    edx
c000e2de:	53                   	push   ebx
c000e2df:	50                   	push   eax
c000e2e0:	e8 2c 83 00 00       	call   c0016611 <Thr::executeDLL(unsigned long, void*)>
c000e2e5:	83 c4 10             	add    esp,0x10
c000e2e8:	83 ec 0c             	sub    esp,0xc
c000e2eb:	6a 02                	push   0x2
c000e2ed:	e8 fa 8c 00 00       	call   c0016fec <blockTask(TaskState)>
c000e2f2:	83 c4 10             	add    esp,0x10
c000e2f5:	eb f1                	jmp    c000e2e8 <KeFirstTask()+0x112>
c000e2f7:	90                   	nop

c000e2f8 <Computer::Computer()>:
c000e2f8:	83 ec 0c             	sub    esp,0xc
c000e2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ff:	83 ec 08             	sub    esp,0x8
c000e302:	68 e8 3d 02 c0       	push   0xc0023de8
c000e307:	50                   	push   eax
c000e308:	e8 51 b8 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000e30d:	83 c4 10             	add    esp,0x10
c000e310:	ba fc 3d 02 c0       	mov    edx,0xc0023dfc
c000e315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e319:	89 10                	mov    DWORD PTR [eax],edx
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e337:	90                   	nop
c000e338:	83 c4 0c             	add    esp,0xc
c000e33b:	c3                   	ret    

c000e33c <KePrepareShutdown()>:
c000e33c:	83 ec 0c             	sub    esp,0xc
c000e33f:	e8 89 ee ff ff       	call   c000d1cd <KeExecuteAtexit()>
c000e344:	83 ec 0c             	sub    esp,0xc
c000e347:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e34c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e352:	50                   	push   eax
c000e353:	e8 0c b9 ff ff       	call   c0009c64 <Device::closeAll()>
c000e358:	83 c4 1c             	add    esp,0x1c
c000e35b:	c3                   	ret    

c000e35c <KeShutdown()>:
c000e35c:	83 ec 0c             	sub    esp,0xc
c000e35f:	e8 d8 ff ff ff       	call   c000e33c <KePrepareShutdown()>
c000e364:	a1 cc c0 02 c0       	mov    eax,ds:0xc002c0cc
c000e369:	85 c0                	test   eax,eax
c000e36b:	74 02                	je     c000e36f <KeShutdown()+0x13>
c000e36d:	ff d0                	call   eax
c000e36f:	83 ec 0c             	sub    esp,0xc
c000e372:	68 24 3d 02 c0       	push   0xc0023d24
c000e377:	e8 62 1c 00 00       	call   c000ffde <KePanic(char const*)>
c000e37c:	83 c4 1c             	add    esp,0x1c
c000e37f:	c3                   	ret    

c000e380 <KeSleep()>:
c000e380:	a1 c4 c0 02 c0       	mov    eax,ds:0xc002c0c4
c000e385:	85 c0                	test   eax,eax
c000e387:	74 02                	je     c000e38b <KeSleep()+0xb>
c000e389:	ff e0                	jmp    eax
c000e38b:	c3                   	ret    

c000e38c <KeRestart()>:
c000e38c:	83 ec 0c             	sub    esp,0xc
c000e38f:	e8 a8 ff ff ff       	call   c000e33c <KePrepareShutdown()>
c000e394:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c000e399:	85 c0                	test   eax,eax
c000e39b:	74 02                	je     c000e39f <KeRestart()+0x13>
c000e39d:	ff d0                	call   eax
c000e39f:	e4 64                	in     al,0x64
c000e3a1:	a8 02                	test   al,0x2
c000e3a3:	75 fa                	jne    c000e39f <KeRestart()+0x13>
c000e3a5:	b0 fe                	mov    al,0xfe
c000e3a7:	e6 64                	out    0x64,al
c000e3a9:	83 c4 0c             	add    esp,0xc
c000e3ac:	c3                   	ret    

c000e3ad <KeCalculateCRC32(unsigned char*, int)>:
c000e3ad:	53                   	push   ebx
c000e3ae:	83 c8 ff             	or     eax,0xffffffff
c000e3b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e3b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e3b9:	01 cb                	add    ebx,ecx
c000e3bb:	39 d9                	cmp    ecx,ebx
c000e3bd:	74 15                	je     c000e3d4 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e3bf:	41                   	inc    ecx
c000e3c0:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e3c3:	31 c2                	xor    edx,eax
c000e3c5:	c1 e8 08             	shr    eax,0x8
c000e3c8:	0f b6 d2             	movzx  edx,dl
c000e3cb:	33 04 95 80 61 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9e80]
c000e3d2:	eb e7                	jmp    c000e3bb <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e3d4:	f7 d0                	not    eax
c000e3d6:	5b                   	pop    ebx
c000e3d7:	c3                   	ret    

c000e3d8 <EnvVarContainer::getEnv(char const*)>:
c000e3d8:	57                   	push   edi
c000e3d9:	56                   	push   esi
c000e3da:	53                   	push   ebx
c000e3db:	31 db                	xor    ebx,ebx
c000e3dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e3e1:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e3e3:	7e 2b                	jle    c000e410 <EnvVarContainer::getEnv(char const*)+0x38>
c000e3e5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e3ec:	50                   	push   eax
c000e3ed:	50                   	push   eax
c000e3ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e3f1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e3f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3f8:	e8 53 23 ff ff       	call   c0000750 <strcmp>
c000e3fd:	83 c4 10             	add    esp,0x10
c000e400:	85 c0                	test   eax,eax
c000e402:	75 09                	jne    c000e40d <EnvVarContainer::getEnv(char const*)+0x35>
c000e404:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e407:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e40b:	eb 05                	jmp    c000e412 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e40d:	43                   	inc    ebx
c000e40e:	eb d1                	jmp    c000e3e1 <EnvVarContainer::getEnv(char const*)+0x9>
c000e410:	31 c0                	xor    eax,eax
c000e412:	5b                   	pop    ebx
c000e413:	5e                   	pop    esi
c000e414:	5f                   	pop    edi
c000e415:	c3                   	ret    

c000e416 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e416:	55                   	push   ebp
c000e417:	57                   	push   edi
c000e418:	56                   	push   esi
c000e419:	53                   	push   ebx
c000e41a:	83 ec 28             	sub    esp,0x28
c000e41d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e421:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e425:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e429:	56                   	push   esi
c000e42a:	e8 41 21 ff ff       	call   c0000570 <strlen>
c000e42f:	40                   	inc    eax
c000e430:	89 04 24             	mov    DWORD PTR [esp],eax
c000e433:	e8 5f 18 00 00       	call   c000fc97 <malloc>
c000e438:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e43b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e43f:	e8 2c 21 ff ff       	call   c0000570 <strlen>
c000e444:	40                   	inc    eax
c000e445:	89 04 24             	mov    DWORD PTR [esp],eax
c000e448:	e8 4a 18 00 00       	call   c000fc97 <malloc>
c000e44d:	89 34 24             	mov    DWORD PTR [esp],esi
c000e450:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e454:	e8 17 21 ff ff       	call   c0000570 <strlen>
c000e459:	83 c4 0c             	add    esp,0xc
c000e45c:	40                   	inc    eax
c000e45d:	50                   	push   eax
c000e45e:	6a 00                	push   0x0
c000e460:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e464:	e8 87 20 ff ff       	call   c00004f0 <memset>
c000e469:	89 34 24             	mov    DWORD PTR [esp],esi
c000e46c:	e8 ff 20 ff ff       	call   c0000570 <strlen>
c000e471:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e475:	8d 48 01             	lea    ecx,[eax+0x1]
c000e478:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e47a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e47d:	89 de                	mov    esi,ebx
c000e47f:	e8 ec 20 ff ff       	call   c0000570 <strlen>
c000e484:	83 c4 0c             	add    esp,0xc
c000e487:	40                   	inc    eax
c000e488:	50                   	push   eax
c000e489:	6a 00                	push   0x0
c000e48b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e48f:	e8 5c 20 ff ff       	call   c00004f0 <memset>
c000e494:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e497:	e8 d4 20 ff ff       	call   c0000570 <strlen>
c000e49c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e4a0:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e4a8:	40                   	inc    eax
c000e4a9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e4ac:	c1 e0 03             	shl    eax,0x3
c000e4af:	5a                   	pop    edx
c000e4b0:	59                   	pop    ecx
c000e4b1:	50                   	push   eax
c000e4b2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e4b5:	e8 c9 17 00 00       	call   c000fc83 <realloc>
c000e4ba:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e4be:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e4c1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e4c4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e4c8:	b9 08 00 00 00       	mov    ecx,0x8
c000e4cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4cf:	83 c4 2c             	add    esp,0x2c
c000e4d2:	5b                   	pop    ebx
c000e4d3:	5e                   	pop    esi
c000e4d4:	5f                   	pop    edi
c000e4d5:	5d                   	pop    ebp
c000e4d6:	c3                   	ret    
c000e4d7:	90                   	nop

c000e4d8 <EnvVarContainer::deleteEnv(char const*)>:
c000e4d8:	c3                   	ret    
c000e4d9:	90                   	nop

c000e4da <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e4da:	55                   	push   ebp
c000e4db:	57                   	push   edi
c000e4dc:	56                   	push   esi
c000e4dd:	53                   	push   ebx
c000e4de:	81 ec 38 01 00 00    	sub    esp,0x138
c000e4e4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e4eb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e4f2:	68 14 01 00 00       	push   0x114
c000e4f7:	e8 9b 17 00 00       	call   c000fc97 <malloc>
c000e4fc:	83 c4 0c             	add    esp,0xc
c000e4ff:	89 c3                	mov    ebx,eax
c000e501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e504:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e50b:	50                   	push   eax
c000e50c:	e8 21 9c ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000e511:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e514:	e8 fb 9e ff ff       	call   c0008414 <File::exists()>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	84 c0                	test   al,al
c000e51e:	75 31                	jne    c000e551 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e520:	50                   	push   eax
c000e521:	50                   	push   eax
c000e522:	6a 12                	push   0x12
c000e524:	53                   	push   ebx
c000e525:	e8 26 9c ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000e52a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e52c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e52f:	89 34 24             	mov    DWORD PTR [esp],esi
c000e532:	e8 39 20 ff ff       	call   c0000570 <strlen>
c000e537:	5a                   	pop    edx
c000e538:	31 d2                	xor    edx,edx
c000e53a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e53e:	51                   	push   ecx
c000e53f:	56                   	push   esi
c000e540:	52                   	push   edx
c000e541:	50                   	push   eax
c000e542:	53                   	push   ebx
c000e543:	ff d7                	call   edi
c000e545:	83 c4 14             	add    esp,0x14
c000e548:	53                   	push   ebx
c000e549:	e8 60 9c ff ff       	call   c00081ae <File::close()>
c000e54e:	83 c4 10             	add    esp,0x10
c000e551:	56                   	push   esi
c000e552:	31 f6                	xor    esi,esi
c000e554:	68 00 01 00 00       	push   0x100
c000e559:	6a 00                	push   0x0
c000e55b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e55f:	50                   	push   eax
c000e560:	e8 8b 1f ff ff       	call   c00004f0 <memset>
c000e565:	5f                   	pop    edi
c000e566:	58                   	pop    eax
c000e567:	6a 01                	push   0x1
c000e569:	53                   	push   ebx
c000e56a:	e8 e1 9b ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e57a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e582:	83 ec 0c             	sub    esp,0xc
c000e585:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e587:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e58b:	51                   	push   ecx
c000e58c:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e590:	52                   	push   edx
c000e591:	6a 00                	push   0x0
c000e593:	6a 01                	push   0x1
c000e595:	53                   	push   ebx
c000e596:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e599:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e59e:	83 c4 20             	add    esp,0x20
c000e5a1:	89 c2                	mov    edx,eax
c000e5a3:	85 c0                	test   eax,eax
c000e5a5:	0f 84 36 01 00 00    	je     c000e6e1 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e5ab:	83 f8 0d             	cmp    eax,0xd
c000e5ae:	0f 84 22 01 00 00    	je     c000e6d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5b4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e5b9:	0f 84 f0 00 00 00    	je     c000e6af <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e5bf:	83 f8 0a             	cmp    eax,0xa
c000e5c2:	74 13                	je     c000e5d7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e5c4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e5c9:	74 0c                	je     c000e5d7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e5cb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e5d1:	0f 8e f6 00 00 00    	jle    c000e6cd <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e5d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5db:	83 ec 0c             	sub    esp,0xc
c000e5de:	8d 78 01             	lea    edi,[eax+0x1]
c000e5e1:	57                   	push   edi
c000e5e2:	e8 b0 16 00 00       	call   c000fc97 <malloc>
c000e5e7:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e5eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5ef:	8d 56 04             	lea    edx,[esi+0x4]
c000e5f2:	89 14 24             	mov    DWORD PTR [esp],edx
c000e5f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e5f9:	e8 99 16 00 00       	call   c000fc97 <malloc>
c000e5fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	57                   	push   edi
c000e606:	6a 00                	push   0x0
c000e608:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e60c:	e8 df 1e ff ff       	call   c00004f0 <memset>
c000e611:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e615:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e619:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e61d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e61f:	83 c4 0c             	add    esp,0xc
c000e622:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e626:	52                   	push   edx
c000e627:	6a 00                	push   0x0
c000e629:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e62d:	e8 be 1e ff ff       	call   c00004f0 <memset>
c000e632:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e636:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e63a:	89 34 24             	mov    DWORD PTR [esp],esi
c000e63d:	e8 2e 1f ff ff       	call   c0000570 <strlen>
c000e642:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e646:	89 c1                	mov    ecx,eax
c000e648:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e64a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e64d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e650:	40                   	inc    eax
c000e651:	83 c4 10             	add    esp,0x10
c000e654:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e657:	85 d2                	test   edx,edx
c000e659:	75 0c                	jne    c000e667 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e65b:	83 ec 0c             	sub    esp,0xc
c000e65e:	6a 08                	push   0x8
c000e660:	e8 32 16 00 00       	call   c000fc97 <malloc>
c000e665:	eb 0c                	jmp    c000e673 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e667:	c1 e0 03             	shl    eax,0x3
c000e66a:	51                   	push   ecx
c000e66b:	51                   	push   ecx
c000e66c:	50                   	push   eax
c000e66d:	52                   	push   edx
c000e66e:	e8 10 16 00 00       	call   c000fc83 <realloc>
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e679:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e67c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e67f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e683:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e687:	b9 08 00 00 00       	mov    ecx,0x8
c000e68c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e68e:	31 f6                	xor    esi,esi
c000e690:	50                   	push   eax
c000e691:	68 00 01 00 00       	push   0x100
c000e696:	6a 00                	push   0x0
c000e698:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e69c:	50                   	push   eax
c000e69d:	e8 4e 1e ff ff       	call   c00004f0 <memset>
c000e6a2:	83 c4 10             	add    esp,0x10
c000e6a5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e6ad:	eb 27                	jmp    c000e6d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e6af:	83 f8 3d             	cmp    eax,0x3d
c000e6b2:	74 1e                	je     c000e6d2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e6b4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e6ba:	7f 07                	jg     c000e6c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e6bc:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e6c0:	46                   	inc    esi
c000e6c1:	eb 13                	jmp    c000e6d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e6c3:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e6cb:	eb 09                	jmp    c000e6d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e6cd:	83 f8 3d             	cmp    eax,0x3d
c000e6d0:	75 ea                	jne    c000e6bc <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e6d2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e6d6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e6db:	0f 85 99 fe ff ff    	jne    c000e57a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e6e1:	83 ec 0c             	sub    esp,0xc
c000e6e4:	53                   	push   ebx
c000e6e5:	e8 c4 9a ff ff       	call   c00081ae <File::close()>
c000e6ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e6ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e6f2:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e6f8:	5b                   	pop    ebx
c000e6f9:	5e                   	pop    esi
c000e6fa:	5f                   	pop    edi
c000e6fb:	5d                   	pop    ebp
c000e6fc:	c3                   	ret    
c000e6fd:	90                   	nop

c000e6fe <EnvVarContainer::__loadSystem()>:
c000e6fe:	83 ec 10             	sub    esp,0x10
c000e701:	68 80 65 02 c0       	push   0xc0026580
c000e706:	68 20 3e 02 c0       	push   0xc0023e20
c000e70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e70f:	e8 c6 fd ff ff       	call   c000e4da <EnvVarContainer::loadFrom(char const*, char const*)>
c000e714:	83 c4 1c             	add    esp,0x1c
c000e717:	c3                   	ret    

c000e718 <EnvVarContainer::__loadUser()>:
c000e718:	c3                   	ret    
c000e719:	90                   	nop

c000e71a <EnvVarContainer::EnvVarContainer(Process*)>:
c000e71a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e71e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e728:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e72c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e72f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e733:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e73a:	90                   	nop
c000e73b:	c3                   	ret    

c000e73c <EnvVarContainer::~EnvVarContainer()>:
c000e73c:	83 ec 0c             	sub    esp,0xc
c000e73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e743:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e746:	85 c0                	test   eax,eax
c000e748:	74 1d                	je     c000e767 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e74e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e750:	85 c0                	test   eax,eax
c000e752:	74 13                	je     c000e767 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e75b:	83 ec 0c             	sub    esp,0xc
c000e75e:	50                   	push   eax
c000e75f:	e8 43 15 00 00       	call   c000fca7 <free>
c000e764:	83 c4 10             	add    esp,0x10
c000e767:	90                   	nop
c000e768:	83 c4 0c             	add    esp,0xc
c000e76b:	c3                   	ret    

c000e76c <KeGetEnv(Process*, char const*)>:
c000e76c:	53                   	push   ebx
c000e76d:	83 ec 08             	sub    esp,0x8
c000e770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e774:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e778:	39 05 58 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea58,eax
c000e77e:	74 04                	je     c000e784 <KeGetEnv(Process*, char const*)+0x18>
c000e780:	85 c0                	test   eax,eax
c000e782:	75 0b                	jne    c000e78f <KeGetEnv(Process*, char const*)+0x23>
c000e784:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e789:	85 c0                	test   eax,eax
c000e78b:	75 19                	jne    c000e7a6 <KeGetEnv(Process*, char const*)+0x3a>
c000e78d:	eb 27                	jmp    c000e7b6 <KeGetEnv(Process*, char const*)+0x4a>
c000e78f:	52                   	push   edx
c000e790:	52                   	push   edx
c000e791:	53                   	push   ebx
c000e792:	ff b0 7a 07 00 00    	push   DWORD PTR [eax+0x77a]
c000e798:	e8 3b fc ff ff       	call   c000e3d8 <EnvVarContainer::getEnv(char const*)>
c000e79d:	83 c4 10             	add    esp,0x10
c000e7a0:	85 c0                	test   eax,eax
c000e7a2:	75 28                	jne    c000e7cc <KeGetEnv(Process*, char const*)+0x60>
c000e7a4:	eb de                	jmp    c000e784 <KeGetEnv(Process*, char const*)+0x18>
c000e7a6:	52                   	push   edx
c000e7a7:	52                   	push   edx
c000e7a8:	53                   	push   ebx
c000e7a9:	50                   	push   eax
c000e7aa:	e8 29 fc ff ff       	call   c000e3d8 <EnvVarContainer::getEnv(char const*)>
c000e7af:	83 c4 10             	add    esp,0x10
c000e7b2:	85 c0                	test   eax,eax
c000e7b4:	75 16                	jne    c000e7cc <KeGetEnv(Process*, char const*)+0x60>
c000e7b6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e7ba:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e7bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7c3:	83 c4 08             	add    esp,0x8
c000e7c6:	5b                   	pop    ebx
c000e7c7:	e9 0c fc ff ff       	jmp    c000e3d8 <EnvVarContainer::getEnv(char const*)>
c000e7cc:	83 c4 08             	add    esp,0x8
c000e7cf:	5b                   	pop    ebx
c000e7d0:	c3                   	ret    

c000e7d1 <KeSetEnvSystem(char const*, char const*)>:
c000e7d1:	83 ec 10             	sub    esp,0x10
c000e7d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7dc:	ff 35 dc c0 02 c0    	push   DWORD PTR ds:0xc002c0dc
c000e7e2:	e8 2f fc ff ff       	call   c000e416 <EnvVarContainer::setEnv(char const*, char const*)>
c000e7e7:	83 c4 1c             	add    esp,0x1c
c000e7ea:	c3                   	ret    

c000e7eb <KeSetEnvUser(char const*, char const*)>:
c000e7eb:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e7f0:	85 c0                	test   eax,eax
c000e7f2:	74 15                	je     c000e809 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e7f4:	83 ec 10             	sub    esp,0x10
c000e7f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7ff:	50                   	push   eax
c000e800:	e8 11 fc ff ff       	call   c000e416 <EnvVarContainer::setEnv(char const*, char const*)>
c000e805:	83 c4 1c             	add    esp,0x1c
c000e808:	c3                   	ret    
c000e809:	c3                   	ret    

c000e80a <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e80e:	8b 80 7a 07 00 00    	mov    eax,DWORD PTR [eax+0x77a]
c000e814:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e818:	e9 f9 fb ff ff       	jmp    c000e416 <EnvVarContainer::setEnv(char const*, char const*)>

c000e81d <KeDeleteEnvSystem(char const*)>:
c000e81d:	c3                   	ret    

c000e81e <KeDeleteEnvUser(char const*)>:
c000e81e:	c3                   	ret    

c000e81f <KeDeleteEnvProcess(Process*, char const*)>:
c000e81f:	c3                   	ret    

c000e820 <KeNewProcessEnv(Process*)>:
c000e820:	83 ec 28             	sub    esp,0x28
c000e823:	6a 0c                	push   0xc
c000e825:	e8 6d 14 00 00       	call   c000fc97 <malloc>
c000e82a:	5a                   	pop    edx
c000e82b:	59                   	pop    ecx
c000e82c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e830:	50                   	push   eax
c000e831:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e835:	e8 e0 fe ff ff       	call   c000e71a <EnvVarContainer::EnvVarContainer(Process*)>
c000e83a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e83e:	83 c4 2c             	add    esp,0x2c
c000e841:	c3                   	ret    

c000e842 <KeCopyProcessEnv(Process*, Process*)>:
c000e842:	57                   	push   edi
c000e843:	56                   	push   esi
c000e844:	53                   	push   ebx
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	83 ec 0c             	sub    esp,0xc
c000e84c:	8b b8 7a 07 00 00    	mov    edi,DWORD PTR [eax+0x77a]
c000e852:	6a 0c                	push   0xc
c000e854:	e8 3e 14 00 00       	call   c000fc97 <malloc>
c000e859:	89 c3                	mov    ebx,eax
c000e85b:	58                   	pop    eax
c000e85c:	5a                   	pop    edx
c000e85d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e861:	53                   	push   ebx
c000e862:	e8 b3 fe ff ff       	call   c000e71a <EnvVarContainer::EnvVarContainer(Process*)>
c000e867:	8b 07                	mov    eax,DWORD PTR [edi]
c000e869:	89 03                	mov    DWORD PTR [ebx],eax
c000e86b:	c1 e0 03             	shl    eax,0x3
c000e86e:	89 04 24             	mov    DWORD PTR [esp],eax
c000e871:	e8 21 14 00 00       	call   c000fc97 <malloc>
c000e876:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e879:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e87b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e87e:	c1 e1 03             	shl    ecx,0x3
c000e881:	89 c7                	mov    edi,eax
c000e883:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e885:	83 c4 10             	add    esp,0x10
c000e888:	89 d8                	mov    eax,ebx
c000e88a:	5b                   	pop    ebx
c000e88b:	5e                   	pop    esi
c000e88c:	5f                   	pop    edi
c000e88d:	c3                   	ret    

c000e88e <KeLoadSystemEnv()>:
c000e88e:	53                   	push   ebx
c000e88f:	83 ec 14             	sub    esp,0x14
c000e892:	6a 0c                	push   0xc
c000e894:	e8 fe 13 00 00       	call   c000fc97 <malloc>
c000e899:	89 c3                	mov    ebx,eax
c000e89b:	58                   	pop    eax
c000e89c:	5a                   	pop    edx
c000e89d:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e8a3:	53                   	push   ebx
c000e8a4:	e8 71 fe ff ff       	call   c000e71a <EnvVarContainer::EnvVarContainer(Process*)>
c000e8a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e8ac:	89 1d dc c0 02 c0    	mov    DWORD PTR ds:0xc002c0dc,ebx
c000e8b2:	e8 47 fe ff ff       	call   c000e6fe <EnvVarContainer::__loadSystem()>
c000e8b7:	83 c4 18             	add    esp,0x18
c000e8ba:	5b                   	pop    ebx
c000e8bb:	c3                   	ret    

c000e8bc <KeLoadUserEnv()>:
c000e8bc:	53                   	push   ebx
c000e8bd:	83 ec 14             	sub    esp,0x14
c000e8c0:	6a 0c                	push   0xc
c000e8c2:	e8 d0 13 00 00       	call   c000fc97 <malloc>
c000e8c7:	89 c3                	mov    ebx,eax
c000e8c9:	58                   	pop    eax
c000e8ca:	5a                   	pop    edx
c000e8cb:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e8d1:	53                   	push   ebx
c000e8d2:	e8 43 fe ff ff       	call   c000e71a <EnvVarContainer::EnvVarContainer(Process*)>
c000e8d7:	89 1d d8 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d8,ebx
c000e8dd:	83 c4 18             	add    esp,0x18
c000e8e0:	5b                   	pop    ebx
c000e8e1:	c3                   	ret    

c000e8e2 <KeFlushEnv()>:
c000e8e2:	c3                   	ret    

c000e8e3 <KeGetProcessTotalEnvCount(Process*)>:
c000e8e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8e7:	8b 15 d8 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0d8
c000e8ed:	8b 88 7a 07 00 00    	mov    ecx,DWORD PTR [eax+0x77a]
c000e8f3:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e8f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8fa:	03 01                	add    eax,DWORD PTR [ecx]
c000e8fc:	85 d2                	test   edx,edx
c000e8fe:	74 02                	je     c000e902 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e900:	03 02                	add    eax,DWORD PTR [edx]
c000e902:	c3                   	ret    

c000e903 <KeGetProcessEnvPair(Process*, int)>:
c000e903:	57                   	push   edi
c000e904:	56                   	push   esi
c000e905:	8b 35 d8 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0d8
c000e90b:	53                   	push   ebx
c000e90c:	85 f6                	test   esi,esi
c000e90e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e912:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e916:	8b 88 7a 07 00 00    	mov    ecx,DWORD PTR [eax+0x77a]
c000e91c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e920:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e922:	75 16                	jne    c000e93a <KeGetProcessEnvPair(Process*, int)+0x37>
c000e924:	39 c2                	cmp    edx,eax
c000e926:	7c 16                	jl     c000e93e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e928:	8b 0d dc c0 02 c0    	mov    ecx,DWORD PTR ds:0xc002c0dc
c000e92e:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e930:	01 c6                	add    esi,eax
c000e932:	39 d6                	cmp    esi,edx
c000e934:	7e 3c                	jle    c000e972 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e936:	29 c2                	sub    edx,eax
c000e938:	eb 04                	jmp    c000e93e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e93a:	39 c2                	cmp    edx,eax
c000e93c:	7d 05                	jge    c000e943 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e93e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e941:	eb 20                	jmp    c000e963 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e943:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e945:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e948:	39 d1                	cmp    ecx,edx
c000e94a:	7e 04                	jle    c000e950 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e94c:	29 c2                	sub    edx,eax
c000e94e:	eb 10                	jmp    c000e960 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e950:	8b 35 dc c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0dc
c000e956:	03 0e                	add    ecx,DWORD PTR [esi]
c000e958:	39 d1                	cmp    ecx,edx
c000e95a:	7e 16                	jle    c000e972 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e95c:	29 c2                	sub    edx,eax
c000e95e:	29 fa                	sub    edx,edi
c000e960:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e963:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e966:	8b 02                	mov    eax,DWORD PTR [edx]
c000e968:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e96b:	89 03                	mov    DWORD PTR [ebx],eax
c000e96d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e970:	eb 1d                	jmp    c000e98f <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e972:	83 ec 0c             	sub    esp,0xc
c000e975:	68 42 3e 02 c0       	push   0xc0023e42
c000e97a:	e8 5f 16 00 00       	call   c000ffde <KePanic(char const*)>
c000e97f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e985:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e98c:	83 c4 10             	add    esp,0x10
c000e98f:	89 d8                	mov    eax,ebx
c000e991:	5b                   	pop    ebx
c000e992:	5e                   	pop    esi
c000e993:	5f                   	pop    edi
c000e994:	c2 04 00             	ret    0x4
c000e997:	90                   	nop

c000e998 <KeSetupInterrupts()>:
c000e998:	83 ec 10             	sub    esp,0x10
c000e99b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e9a3:	90                   	nop
c000e9a4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e9ac:	7f 5a                	jg     c000ea08 <KeSetupInterrupts()+0x70>
c000e9ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e9b6:	66 90                	xchg   ax,ax
c000e9b8:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e9bd:	7f 41                	jg     c000ea00 <KeSetupInterrupts()+0x68>
c000e9bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9ce:	01 d0                	add    eax,edx
c000e9d0:	c7 04 85 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f20],0x0
c000e9db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9df:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9ea:	01 d0                	add    eax,edx
c000e9ec:	c7 04 85 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd3f20],0x0
c000e9f7:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e9fc:	eb ba                	jmp    c000e9b8 <KeSetupInterrupts()+0x20>
c000e9fe:	66 90                	xchg   ax,ax
c000ea00:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000ea05:	eb 9d                	jmp    c000e9a4 <KeSetupInterrupts()+0xc>
c000ea07:	90                   	nop
c000ea08:	90                   	nop
c000ea09:	83 c4 10             	add    esp,0x10
c000ea0c:	c3                   	ret    
c000ea0d:	8d 76 00             	lea    esi,[esi+0x0]

c000ea10 <int_handler>:
c000ea10:	83 ec 2c             	sub    esp,0x2c
c000ea13:	90                   	nop
c000ea14:	a0 28 e1 02 c0       	mov    al,ds:0xc002e128
c000ea19:	0f b6 c0             	movzx  eax,al
c000ea1c:	85 c0                	test   eax,eax
c000ea1e:	74 04                	je     c000ea24 <int_handler+0x14>
c000ea20:	fa                   	cli    
c000ea21:	f4                   	hlt    
c000ea22:	eb f0                	jmp    c000ea14 <int_handler+0x4>
c000ea24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea28:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000ea2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea2f:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000ea34:	7e 1a                	jle    c000ea50 <int_handler+0x40>
c000ea36:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000ea3b:	7f 13                	jg     c000ea50 <int_handler+0x40>
c000ea3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea41:	83 e8 20             	sub    eax,0x20
c000ea44:	83 ec 0c             	sub    esp,0xc
c000ea47:	50                   	push   eax
c000ea48:	e8 b3 b7 00 00       	call   c001a200 <HalEndOfInterrupt(int)>
c000ea4d:	83 c4 10             	add    esp,0x10
c000ea50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea54:	c1 e0 04             	shl    eax,0x4
c000ea57:	05 e0 d0 02 c0       	add    eax,0xc002d0e0
c000ea5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea64:	c1 e0 04             	shl    eax,0x4
c000ea67:	05 e0 c0 02 c0       	add    eax,0xc002c0e0
c000ea6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea70:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ea78:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000ea7d:	0f 8f ad 00 00 00    	jg     c000eb30 <int_handler+0x120>
c000ea83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea87:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea92:	01 d0                	add    eax,edx
c000ea94:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea96:	85 c0                	test   eax,eax
c000ea98:	0f 84 86 00 00 00    	je     c000eb24 <int_handler+0x114>
c000ea9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaa2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000eaa5:	83 f8 60             	cmp    eax,0x60
c000eaa8:	75 46                	jne    c000eaf0 <int_handler+0xe0>
c000eaaa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eaae:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eab5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eab9:	01 d0                	add    eax,edx
c000eabb:	8b 00                	mov    eax,DWORD PTR [eax]
c000eabd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eac1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eac8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eacc:	01 ca                	add    edx,ecx
c000eace:	8b 12                	mov    edx,DWORD PTR [edx]
c000ead0:	83 ec 08             	sub    esp,0x8
c000ead3:	52                   	push   edx
c000ead4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ead8:	ff d0                	call   eax
c000eada:	83 c4 10             	add    esp,0x10
c000eadd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eae1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eae5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eae9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eaed:	eb 4d                	jmp    c000eb3c <int_handler+0x12c>
c000eaef:	90                   	nop
c000eaf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eaf4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eafb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eaff:	01 d0                	add    eax,edx
c000eb01:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb07:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eb12:	01 ca                	add    edx,ecx
c000eb14:	8b 12                	mov    edx,DWORD PTR [edx]
c000eb16:	83 ec 08             	sub    esp,0x8
c000eb19:	52                   	push   edx
c000eb1a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eb1e:	ff d0                	call   eax
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	90                   	nop
c000eb24:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000eb29:	e9 4a ff ff ff       	jmp    c000ea78 <int_handler+0x68>
c000eb2e:	66 90                	xchg   ax,ax
c000eb30:	b8 00 00 00 00       	mov    eax,0x0
c000eb35:	ba 00 00 00 00       	mov    edx,0x0
c000eb3a:	66 90                	xchg   ax,ax
c000eb3c:	83 c4 2c             	add    esp,0x2c
c000eb3f:	c3                   	ret    

c000eb40 <KeDisplayProgramFault(char const*)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	83 ec 0c             	sub    esp,0xc
c000eb46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb4a:	e8 15 84 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000eb4f:	83 c4 10             	add    esp,0x10
c000eb52:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb57:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb59:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb5c:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c000eb62:	85 c0                	test   eax,eax
c000eb64:	74 22                	je     c000eb88 <KeDisplayProgramFault(char const*)+0x48>
c000eb66:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb6b:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb70:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c000eb76:	6a 04                	push   0x4
c000eb78:	6a 0f                	push   0xf
c000eb7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eb7e:	50                   	push   eax
c000eb7f:	e8 80 3d 00 00       	call   c0012904 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000eb84:	83 c4 10             	add    esp,0x10
c000eb87:	90                   	nop
c000eb88:	90                   	nop
c000eb89:	83 c4 0c             	add    esp,0xc
c000eb8c:	c3                   	ret    
c000eb8d:	8d 76 00             	lea    esi,[esi+0x0]

c000eb90 <KeGeneralProtectionFault(void*, void*)>:
c000eb90:	83 ec 0c             	sub    esp,0xc
c000eb93:	83 ec 08             	sub    esp,0x8
c000eb96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb9e:	e8 ff ab 00 00       	call   c00197a2 <HalHandleGeneralProtectionFault(void*, void*)>
c000eba3:	83 c4 10             	add    esp,0x10
c000eba6:	0f b6 c0             	movzx  eax,al
c000eba9:	85 c0                	test   eax,eax
c000ebab:	75 2f                	jne    c000ebdc <KeGeneralProtectionFault(void*, void*)+0x4c>
c000ebad:	83 ec 0c             	sub    esp,0xc
c000ebb0:	68 5c 3e 02 c0       	push   0xc0023e5c
c000ebb5:	e8 86 ff ff ff       	call   c000eb40 <KeDisplayProgramFault(char const*)>
c000ebba:	83 c4 10             	add    esp,0x10
c000ebbd:	83 ec 0c             	sub    esp,0xc
c000ebc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebc4:	e8 73 ad 00 00       	call   c001993c <HalDisplayDebugInfo(void*)>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	6a 00                	push   0x0
c000ebd1:	e8 6a 8c 00 00       	call   c0017840 <Thr::terminateFromIRQ(int)>
c000ebd6:	83 c4 10             	add    esp,0x10
c000ebd9:	eb 05                	jmp    c000ebe0 <KeGeneralProtectionFault(void*, void*)+0x50>
c000ebdb:	90                   	nop
c000ebdc:	90                   	nop
c000ebdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ebe0:	83 c4 0c             	add    esp,0xc
c000ebe3:	c3                   	ret    

c000ebe4 <KePageFault(void*, void*)>:
c000ebe4:	83 ec 0c             	sub    esp,0xc
c000ebe7:	83 ec 0c             	sub    esp,0xc
c000ebea:	68 75 3e 02 c0       	push   0xc0023e75
c000ebef:	e8 70 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ebf4:	83 c4 10             	add    esp,0x10
c000ebf7:	83 ec 08             	sub    esp,0x8
c000ebfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec02:	e8 46 ac 00 00       	call   c001984d <HalHandlePageFault(void*, void*)>
c000ec07:	83 c4 10             	add    esp,0x10
c000ec0a:	0f b6 c0             	movzx  eax,al
c000ec0d:	85 c0                	test   eax,eax
c000ec0f:	75 2f                	jne    c000ec40 <KePageFault(void*, void*)+0x5c>
c000ec11:	83 ec 0c             	sub    esp,0xc
c000ec14:	68 82 3e 02 c0       	push   0xc0023e82
c000ec19:	e8 22 ff ff ff       	call   c000eb40 <KeDisplayProgramFault(char const*)>
c000ec1e:	83 c4 10             	add    esp,0x10
c000ec21:	83 ec 0c             	sub    esp,0xc
c000ec24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec28:	e8 0f ad 00 00       	call   c001993c <HalDisplayDebugInfo(void*)>
c000ec2d:	83 c4 10             	add    esp,0x10
c000ec30:	83 ec 0c             	sub    esp,0xc
c000ec33:	6a 00                	push   0x0
c000ec35:	e8 06 8c 00 00       	call   c0017840 <Thr::terminateFromIRQ(int)>
c000ec3a:	83 c4 10             	add    esp,0x10
c000ec3d:	eb 05                	jmp    c000ec44 <KePageFault(void*, void*)+0x60>
c000ec3f:	90                   	nop
c000ec40:	90                   	nop
c000ec41:	8d 76 00             	lea    esi,[esi+0x0]
c000ec44:	83 c4 0c             	add    esp,0xc
c000ec47:	c3                   	ret    

c000ec48 <KeNonMaskableInterrupt(void*, void*)>:
c000ec48:	83 ec 0c             	sub    esp,0xc
c000ec4b:	e8 7a b0 00 00       	call   c0019cca <HalReceivedNMI()>
c000ec50:	90                   	nop
c000ec51:	83 c4 0c             	add    esp,0xc
c000ec54:	c3                   	ret    
c000ec55:	8d 76 00             	lea    esi,[esi+0x0]

c000ec58 <KeOtherFault(void*, void*)>:
c000ec58:	83 ec 0c             	sub    esp,0xc
c000ec5b:	83 ec 0c             	sub    esp,0xc
c000ec5e:	68 90 3e 02 c0       	push   0xc0023e90
c000ec63:	e8 d8 fe ff ff       	call   c000eb40 <KeDisplayProgramFault(char const*)>
c000ec68:	83 c4 10             	add    esp,0x10
c000ec6b:	83 ec 0c             	sub    esp,0xc
c000ec6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec72:	e8 c5 ac 00 00       	call   c001993c <HalDisplayDebugInfo(void*)>
c000ec77:	83 c4 10             	add    esp,0x10
c000ec7a:	83 ec 0c             	sub    esp,0xc
c000ec7d:	6a 00                	push   0x0
c000ec7f:	e8 bc 8b 00 00       	call   c0017840 <Thr::terminateFromIRQ(int)>
c000ec84:	83 c4 10             	add    esp,0x10
c000ec87:	90                   	nop
c000ec88:	83 c4 0c             	add    esp,0xc
c000ec8b:	c3                   	ret    

c000ec8c <KeOpcodeFault(void*, void*)>:
c000ec8c:	55                   	push   ebp
c000ec8d:	89 e5                	mov    ebp,esp
c000ec8f:	83 ec 08             	sub    esp,0x8
c000ec92:	83 ec 08             	sub    esp,0x8
c000ec95:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ec98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ec9b:	e8 5a ac 00 00       	call   c00198fa <HalHandleOpcodeFault(void*, void*)>
c000eca0:	83 c4 10             	add    esp,0x10
c000eca3:	0f b6 c0             	movzx  eax,al
c000eca6:	85 c0                	test   eax,eax
c000eca8:	75 2e                	jne    c000ecd8 <KeOpcodeFault(void*, void*)+0x4c>
c000ecaa:	83 ec 0c             	sub    esp,0xc
c000ecad:	68 b8 3e 02 c0       	push   0xc0023eb8
c000ecb2:	e8 89 fe ff ff       	call   c000eb40 <KeDisplayProgramFault(char const*)>
c000ecb7:	83 c4 10             	add    esp,0x10
c000ecba:	83 ec 0c             	sub    esp,0xc
c000ecbd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ecc0:	e8 77 ac 00 00       	call   c001993c <HalDisplayDebugInfo(void*)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	83 ec 0c             	sub    esp,0xc
c000eccb:	6a 00                	push   0x0
c000eccd:	e8 6e 8b 00 00       	call   c0017840 <Thr::terminateFromIRQ(int)>
c000ecd2:	83 c4 10             	add    esp,0x10
c000ecd5:	eb 05                	jmp    c000ecdc <KeOpcodeFault(void*, void*)+0x50>
c000ecd7:	90                   	nop
c000ecd8:	90                   	nop
c000ecd9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecdc:	c9                   	leave  
c000ecdd:	c3                   	ret    
c000ecde:	66 90                	xchg   ax,ax

c000ece0 <KeDoubleFault(void*, void*)>:
c000ece0:	55                   	push   ebp
c000ece1:	89 e5                	mov    ebp,esp
c000ece3:	83 ec 08             	sub    esp,0x8
c000ece6:	83 ec 0c             	sub    esp,0xc
c000ece9:	68 c5 3e 02 c0       	push   0xc0023ec5
c000ecee:	e8 eb 12 00 00       	call   c000ffde <KePanic(char const*)>
c000ecf3:	83 c4 10             	add    esp,0x10
c000ecf6:	90                   	nop
c000ecf7:	c9                   	leave  
c000ecf8:	c3                   	ret    
c000ecf9:	90                   	nop

c000ecfa <GDTEntry::setBase(unsigned int)>:
c000ecfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecfe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed02:	89 c1                	mov    ecx,eax
c000ed04:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ed08:	c1 e9 10             	shr    ecx,0x10
c000ed0b:	c1 e8 18             	shr    eax,0x18
c000ed0e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ed11:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ed14:	c3                   	ret    
c000ed15:	90                   	nop

c000ed16 <GDTEntry::setLimit(unsigned int)>:
c000ed16:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed1e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ed21:	66 89 01             	mov    WORD PTR [ecx],ax
c000ed24:	83 e2 f0             	and    edx,0xfffffff0
c000ed27:	c1 e8 10             	shr    eax,0x10
c000ed2a:	83 e0 0f             	and    eax,0xf
c000ed2d:	09 d0                	or     eax,edx
c000ed2f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ed32:	c3                   	ret    
c000ed33:	90                   	nop

c000ed34 <GDT::GDT()>:
c000ed34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed48:	90                   	nop
c000ed49:	c3                   	ret    

c000ed4a <GDT::addEntry(GDTEntry)>:
c000ed4a:	53                   	push   ebx
c000ed4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed53:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed59:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ed5d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ed61:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed64:	c1 e0 03             	shl    eax,0x3
c000ed67:	89 0a                	mov    DWORD PTR [edx],ecx
c000ed69:	5b                   	pop    ebx
c000ed6a:	c3                   	ret    
c000ed6b:	90                   	nop

c000ed6c <GDT::getNumberOfEntries()>:
c000ed6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed70:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed72:	c3                   	ret    
c000ed73:	90                   	nop

c000ed74 <GDT::flush()>:
c000ed74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed78:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed7a:	83 c0 04             	add    eax,0x4
c000ed7d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed84:	a3 e2 e0 02 c0       	mov    ds:0xc002e0e2,eax
c000ed89:	66 89 15 e0 e0 02 c0 	mov    WORD PTR ds:0xc002e0e0,dx
c000ed90:	e9 c5 15 ff ff       	jmp    c000035a <loadGDT>
c000ed95:	90                   	nop

c000ed96 <GDT::setup()>:
c000ed96:	57                   	push   edi
c000ed97:	56                   	push   esi
c000ed98:	53                   	push   ebx
c000ed99:	83 ec 30             	sub    esp,0x30
c000ed9c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eda0:	6a 00                	push   0x0
c000eda2:	8d 74 24 14          	lea    esi,[esp+0x14]
c000eda6:	56                   	push   esi
c000eda7:	e8 4e ff ff ff       	call   c000ecfa <GDTEntry::setBase(unsigned int)>
c000edac:	6a 00                	push   0x0
c000edae:	56                   	push   esi
c000edaf:	e8 62 ff ff ff       	call   c000ed16 <GDTEntry::setLimit(unsigned int)>
c000edb4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000edbc:	6a 00                	push   0x0
c000edbe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000edc2:	56                   	push   esi
c000edc3:	e8 32 ff ff ff       	call   c000ecfa <GDTEntry::setBase(unsigned int)>
c000edc8:	68 ff ff ff 00       	push   0xffffff
c000edcd:	56                   	push   esi
c000edce:	e8 43 ff ff ff       	call   c000ed16 <GDTEntry::setLimit(unsigned int)>
c000edd3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000edd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eddb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000eddf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ede3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ede8:	0d 00 9a c0 00       	or     eax,0xc09a00
c000eded:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edf5:	89 f8                	mov    eax,edi
c000edf7:	89 fa                	mov    edx,edi
c000edf9:	80 e4 f7             	and    ah,0xf7
c000edfc:	80 ce 60             	or     dh,0x60
c000edff:	89 c7                	mov    edi,eax
c000ee01:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ee05:	80 cc 60             	or     ah,0x60
c000ee08:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ee0c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ee10:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ee14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee18:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee1c:	83 c4 20             	add    esp,0x20
c000ee1f:	6a 00                	push   0x0
c000ee21:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ee25:	50                   	push   eax
c000ee26:	e8 cf fe ff ff       	call   c000ecfa <GDTEntry::setBase(unsigned int)>
c000ee2b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ee2f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ee33:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ee37:	83 e0 3f             	and    eax,0x3f
c000ee3a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ee3e:	6a 00                	push   0x0
c000ee40:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ee44:	50                   	push   eax
c000ee45:	e8 b0 fe ff ff       	call   c000ecfa <GDTEntry::setBase(unsigned int)>
c000ee4a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ee4e:	83 e0 3f             	and    eax,0x3f
c000ee51:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ee55:	83 c4 0c             	add    esp,0xc
c000ee58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee60:	53                   	push   ebx
c000ee61:	e8 e4 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000ee66:	83 c4 0c             	add    esp,0xc
c000ee69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee71:	53                   	push   ebx
c000ee72:	e8 d3 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000ee77:	83 c4 0c             	add    esp,0xc
c000ee7a:	57                   	push   edi
c000ee7b:	56                   	push   esi
c000ee7c:	53                   	push   ebx
c000ee7d:	e8 c8 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000ee82:	83 c4 0c             	add    esp,0xc
c000ee85:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ee89:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ee8d:	53                   	push   ebx
c000ee8e:	e8 b7 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000ee93:	83 c4 0c             	add    esp,0xc
c000ee96:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ee9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ee9e:	53                   	push   ebx
c000ee9f:	e8 a6 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000eea4:	83 c4 0c             	add    esp,0xc
c000eea7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeaf:	53                   	push   ebx
c000eeb0:	e8 95 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000eeb5:	83 c4 0c             	add    esp,0xc
c000eeb8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eebc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eec0:	53                   	push   ebx
c000eec1:	e8 84 fe ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c000eec6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec9:	e8 a6 fe ff ff       	call   c000ed74 <GDT::flush()>
c000eece:	83 c4 40             	add    esp,0x40
c000eed1:	5b                   	pop    ebx
c000eed2:	5e                   	pop    esi
c000eed3:	5f                   	pop    edi
c000eed4:	c3                   	ret    

c000eed5 <idleFunction(void*)>:
c000eed5:	83 ec 0c             	sub    esp,0xc
c000eed8:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000eedf:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000eee6:	75 01                	jne    c000eee9 <idleFunction(void*)+0x14>
c000eee8:	fb                   	sti    
c000eee9:	e8 77 ae 00 00       	call   c0019d65 <HalSystemIdle()>
c000eeee:	e8 63 30 01 00       	call   c0021f56 <idleCommon()>
c000eef3:	eb f4                	jmp    c000eee9 <idleFunction(void*)+0x14>
c000eef5:	66 90                	xchg   ax,ax
c000eef7:	90                   	nop

c000eef8 <IDTEntry::IDTEntry(bool)>:
c000eef8:	53                   	push   ebx
c000eef9:	83 ec 04             	sub    esp,0x4
c000eefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef00:	88 04 24             	mov    BYTE PTR [esp],al
c000ef03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef07:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ef0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef11:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ef15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef19:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef1c:	83 e2 f0             	and    edx,0xfffffff0
c000ef1f:	83 ca 0e             	or     edx,0xe
c000ef22:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef29:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2c:	83 e2 ef             	and    edx,0xffffffef
c000ef2f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef32:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ef36:	85 c0                	test   eax,eax
c000ef38:	74 06                	je     c000ef40 <IDTEntry::IDTEntry(bool)+0x48>
c000ef3a:	b2 03                	mov    dl,0x3
c000ef3c:	eb 06                	jmp    c000ef44 <IDTEntry::IDTEntry(bool)+0x4c>
c000ef3e:	66 90                	xchg   ax,ax
c000ef40:	b2 00                	mov    dl,0x0
c000ef42:	66 90                	xchg   ax,ax
c000ef44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef48:	83 e2 03             	and    edx,0x3
c000ef4b:	89 d3                	mov    ebx,edx
c000ef4d:	c1 e3 05             	shl    ebx,0x5
c000ef50:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef53:	83 e2 9f             	and    edx,0xffffff9f
c000ef56:	88 d1                	mov    cl,dl
c000ef58:	88 da                	mov    dl,bl
c000ef5a:	09 ca                	or     edx,ecx
c000ef5c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef63:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef66:	83 ca 80             	or     edx,0xffffff80
c000ef69:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef6c:	90                   	nop
c000ef6d:	83 c4 04             	add    esp,0x4
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDTEntry::setOffset(unsigned int)>:
c000ef72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef7a:	66 89 02             	mov    WORD PTR [edx],ax
c000ef7d:	c1 e8 10             	shr    eax,0x10
c000ef80:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef84:	c3                   	ret    
c000ef85:	90                   	nop
c000ef86:	66 90                	xchg   ax,ax

c000ef88 <IDT::IDT()>:
c000ef88:	90                   	nop
c000ef89:	c3                   	ret    

c000ef8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef8e:	83 c0 30             	add    eax,0x30
c000ef91:	c3                   	ret    

c000ef92 <IDT::addEntry(IDTEntry, int)>:
c000ef92:	53                   	push   ebx
c000ef93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000efa3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000efa6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000efaa:	5b                   	pop    ebx
c000efab:	c3                   	ret    

c000efac <IDT::addEntry(int, void (*)(), bool)>:
c000efac:	53                   	push   ebx
c000efad:	83 ec 10             	sub    esp,0x10
c000efb0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000efb5:	50                   	push   eax
c000efb6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000efba:	53                   	push   ebx
c000efbb:	e8 38 ff ff ff       	call   c000eef8 <IDTEntry::IDTEntry(bool)>
c000efc0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000efc4:	53                   	push   ebx
c000efc5:	e8 a8 ff ff ff       	call   c000ef72 <IDTEntry::setOffset(unsigned int)>
c000efca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000efd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000efd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efda:	e8 b3 ff ff ff       	call   c000ef92 <IDT::addEntry(IDTEntry, int)>
c000efdf:	83 c4 30             	add    esp,0x30
c000efe2:	5b                   	pop    ebx
c000efe3:	c3                   	ret    

c000efe4 <IDT::flush()>:
c000efe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efe8:	66 c7 05 e8 e0 02 c0 ff 07 	mov    WORD PTR ds:0xc002e0e8,0x7ff
c000eff1:	a3 ea e0 02 c0       	mov    ds:0xc002e0ea,eax
c000eff6:	0f 01 1d e8 e0 02 c0 	lidtd  ds:0xc002e0e8
c000effd:	c3                   	ret    

c000effe <IDT::setup()>:
c000effe:	57                   	push   edi
c000efff:	56                   	push   esi
c000f000:	53                   	push   ebx
c000f001:	83 ec 10             	sub    esp,0x10
c000f004:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f008:	6a 00                	push   0x0
c000f00a:	68 30 12 02 c0       	push   0xc0021230
c000f00f:	6a 00                	push   0x0
c000f011:	53                   	push   ebx
c000f012:	e8 95 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f017:	6a 00                	push   0x0
c000f019:	68 40 12 02 c0       	push   0xc0021240
c000f01e:	6a 01                	push   0x1
c000f020:	53                   	push   ebx
c000f021:	e8 86 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f026:	83 c4 20             	add    esp,0x20
c000f029:	6a 00                	push   0x0
c000f02b:	68 4a 12 02 c0       	push   0xc002124a
c000f030:	6a 02                	push   0x2
c000f032:	53                   	push   ebx
c000f033:	e8 74 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f038:	6a 00                	push   0x0
c000f03a:	68 54 12 02 c0       	push   0xc0021254
c000f03f:	6a 03                	push   0x3
c000f041:	53                   	push   ebx
c000f042:	e8 65 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f047:	83 c4 20             	add    esp,0x20
c000f04a:	6a 00                	push   0x0
c000f04c:	68 5e 12 02 c0       	push   0xc002125e
c000f051:	6a 04                	push   0x4
c000f053:	53                   	push   ebx
c000f054:	e8 53 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f059:	6a 00                	push   0x0
c000f05b:	68 68 12 02 c0       	push   0xc0021268
c000f060:	6a 05                	push   0x5
c000f062:	53                   	push   ebx
c000f063:	e8 44 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f068:	83 c4 20             	add    esp,0x20
c000f06b:	6a 00                	push   0x0
c000f06d:	68 72 12 02 c0       	push   0xc0021272
c000f072:	6a 06                	push   0x6
c000f074:	53                   	push   ebx
c000f075:	e8 32 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f07a:	6a 00                	push   0x0
c000f07c:	68 7c 12 02 c0       	push   0xc002127c
c000f081:	6a 07                	push   0x7
c000f083:	53                   	push   ebx
c000f084:	e8 23 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f089:	83 c4 20             	add    esp,0x20
c000f08c:	6a 00                	push   0x0
c000f08e:	68 86 12 02 c0       	push   0xc0021286
c000f093:	6a 08                	push   0x8
c000f095:	53                   	push   ebx
c000f096:	e8 11 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f09b:	6a 00                	push   0x0
c000f09d:	68 8e 12 02 c0       	push   0xc002128e
c000f0a2:	6a 09                	push   0x9
c000f0a4:	53                   	push   ebx
c000f0a5:	e8 02 ff ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f0aa:	83 c4 20             	add    esp,0x20
c000f0ad:	6a 00                	push   0x0
c000f0af:	68 98 12 02 c0       	push   0xc0021298
c000f0b4:	6a 0a                	push   0xa
c000f0b6:	53                   	push   ebx
c000f0b7:	e8 f0 fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f0bc:	6a 00                	push   0x0
c000f0be:	68 a0 12 02 c0       	push   0xc00212a0
c000f0c3:	6a 0b                	push   0xb
c000f0c5:	53                   	push   ebx
c000f0c6:	e8 e1 fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f0cb:	83 c4 20             	add    esp,0x20
c000f0ce:	6a 00                	push   0x0
c000f0d0:	68 a8 12 02 c0       	push   0xc00212a8
c000f0d5:	6a 0c                	push   0xc
c000f0d7:	53                   	push   ebx
c000f0d8:	e8 cf fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f0dd:	6a 00                	push   0x0
c000f0df:	68 b0 12 02 c0       	push   0xc00212b0
c000f0e4:	6a 0d                	push   0xd
c000f0e6:	53                   	push   ebx
c000f0e7:	e8 c0 fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f0ec:	83 c4 20             	add    esp,0x20
c000f0ef:	6a 00                	push   0x0
c000f0f1:	68 ca 12 02 c0       	push   0xc00212ca
c000f0f6:	6a 0e                	push   0xe
c000f0f8:	53                   	push   ebx
c000f0f9:	e8 ae fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f0fe:	6a 00                	push   0x0
c000f100:	68 d2 12 02 c0       	push   0xc00212d2
c000f105:	6a 0f                	push   0xf
c000f107:	53                   	push   ebx
c000f108:	e8 9f fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f10d:	83 c4 20             	add    esp,0x20
c000f110:	6a 00                	push   0x0
c000f112:	68 dc 12 02 c0       	push   0xc00212dc
c000f117:	6a 10                	push   0x10
c000f119:	53                   	push   ebx
c000f11a:	e8 8d fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f11f:	6a 00                	push   0x0
c000f121:	68 e6 12 02 c0       	push   0xc00212e6
c000f126:	6a 11                	push   0x11
c000f128:	53                   	push   ebx
c000f129:	e8 7e fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f12e:	83 c4 20             	add    esp,0x20
c000f131:	6a 00                	push   0x0
c000f133:	68 f0 12 02 c0       	push   0xc00212f0
c000f138:	6a 12                	push   0x12
c000f13a:	53                   	push   ebx
c000f13b:	e8 6c fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f140:	6a 01                	push   0x1
c000f142:	68 8a 13 02 c0       	push   0xc002138a
c000f147:	6a 60                	push   0x60
c000f149:	53                   	push   ebx
c000f14a:	e8 5d fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f14f:	83 c4 20             	add    esp,0x20
c000f152:	6a 00                	push   0x0
c000f154:	68 91 13 02 c0       	push   0xc0021391
c000f159:	6a 20                	push   0x20
c000f15b:	53                   	push   ebx
c000f15c:	e8 4b fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f161:	6a 00                	push   0x0
c000f163:	68 7c 13 02 c0       	push   0xc002137c
c000f168:	6a 21                	push   0x21
c000f16a:	53                   	push   ebx
c000f16b:	e8 3c fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f170:	83 c4 20             	add    esp,0x20
c000f173:	6a 00                	push   0x0
c000f175:	68 83 13 02 c0       	push   0xc0021383
c000f17a:	6a 22                	push   0x22
c000f17c:	53                   	push   ebx
c000f17d:	e8 2a fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f182:	6a 00                	push   0x0
c000f184:	68 fa 12 02 c0       	push   0xc00212fa
c000f189:	6a 23                	push   0x23
c000f18b:	53                   	push   ebx
c000f18c:	e8 1b fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f191:	83 c4 20             	add    esp,0x20
c000f194:	6a 00                	push   0x0
c000f196:	68 04 13 02 c0       	push   0xc0021304
c000f19b:	6a 24                	push   0x24
c000f19d:	53                   	push   ebx
c000f19e:	e8 09 fe ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f1a3:	6a 00                	push   0x0
c000f1a5:	68 0e 13 02 c0       	push   0xc002130e
c000f1aa:	6a 25                	push   0x25
c000f1ac:	53                   	push   ebx
c000f1ad:	e8 fa fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f1b2:	83 c4 20             	add    esp,0x20
c000f1b5:	6a 00                	push   0x0
c000f1b7:	68 18 13 02 c0       	push   0xc0021318
c000f1bc:	6a 26                	push   0x26
c000f1be:	53                   	push   ebx
c000f1bf:	e8 e8 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f1c4:	6a 00                	push   0x0
c000f1c6:	68 22 13 02 c0       	push   0xc0021322
c000f1cb:	6a 27                	push   0x27
c000f1cd:	53                   	push   ebx
c000f1ce:	e8 d9 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f1d3:	83 c4 20             	add    esp,0x20
c000f1d6:	6a 00                	push   0x0
c000f1d8:	68 2c 13 02 c0       	push   0xc002132c
c000f1dd:	6a 28                	push   0x28
c000f1df:	53                   	push   ebx
c000f1e0:	e8 c7 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f1e5:	6a 00                	push   0x0
c000f1e7:	68 36 13 02 c0       	push   0xc0021336
c000f1ec:	6a 29                	push   0x29
c000f1ee:	53                   	push   ebx
c000f1ef:	e8 b8 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f1f4:	83 c4 20             	add    esp,0x20
c000f1f7:	6a 00                	push   0x0
c000f1f9:	68 40 13 02 c0       	push   0xc0021340
c000f1fe:	6a 2a                	push   0x2a
c000f200:	53                   	push   ebx
c000f201:	e8 a6 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f206:	6a 00                	push   0x0
c000f208:	68 4a 13 02 c0       	push   0xc002134a
c000f20d:	6a 2b                	push   0x2b
c000f20f:	53                   	push   ebx
c000f210:	e8 97 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f215:	83 c4 20             	add    esp,0x20
c000f218:	6a 00                	push   0x0
c000f21a:	68 54 13 02 c0       	push   0xc0021354
c000f21f:	6a 2c                	push   0x2c
c000f221:	53                   	push   ebx
c000f222:	e8 85 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f227:	6a 00                	push   0x0
c000f229:	68 5e 13 02 c0       	push   0xc002135e
c000f22e:	6a 2d                	push   0x2d
c000f230:	53                   	push   ebx
c000f231:	e8 76 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f236:	83 c4 20             	add    esp,0x20
c000f239:	6a 00                	push   0x0
c000f23b:	68 68 13 02 c0       	push   0xc0021368
c000f240:	6a 2e                	push   0x2e
c000f242:	53                   	push   ebx
c000f243:	e8 64 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f248:	6a 00                	push   0x0
c000f24a:	68 72 13 02 c0       	push   0xc0021372
c000f24f:	6a 2f                	push   0x2f
c000f251:	53                   	push   ebx
c000f252:	e8 55 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f257:	83 c4 20             	add    esp,0x20
c000f25a:	6a 00                	push   0x0
c000f25c:	68 94 14 02 c0       	push   0xc0021494
c000f261:	6a 30                	push   0x30
c000f263:	53                   	push   ebx
c000f264:	e8 43 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f269:	6a 00                	push   0x0
c000f26b:	68 9e 14 02 c0       	push   0xc002149e
c000f270:	6a 31                	push   0x31
c000f272:	53                   	push   ebx
c000f273:	e8 34 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f278:	83 c4 20             	add    esp,0x20
c000f27b:	6a 00                	push   0x0
c000f27d:	68 a8 14 02 c0       	push   0xc00214a8
c000f282:	6a 32                	push   0x32
c000f284:	53                   	push   ebx
c000f285:	e8 22 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f28a:	6a 00                	push   0x0
c000f28c:	68 b2 14 02 c0       	push   0xc00214b2
c000f291:	6a 33                	push   0x33
c000f293:	53                   	push   ebx
c000f294:	e8 13 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f299:	83 c4 20             	add    esp,0x20
c000f29c:	6a 00                	push   0x0
c000f29e:	68 bc 14 02 c0       	push   0xc00214bc
c000f2a3:	6a 34                	push   0x34
c000f2a5:	53                   	push   ebx
c000f2a6:	e8 01 fd ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f2ab:	6a 00                	push   0x0
c000f2ad:	68 c6 14 02 c0       	push   0xc00214c6
c000f2b2:	6a 35                	push   0x35
c000f2b4:	53                   	push   ebx
c000f2b5:	e8 f2 fc ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f2ba:	83 c4 20             	add    esp,0x20
c000f2bd:	6a 00                	push   0x0
c000f2bf:	68 d0 14 02 c0       	push   0xc00214d0
c000f2c4:	6a 36                	push   0x36
c000f2c6:	53                   	push   ebx
c000f2c7:	e8 e0 fc ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f2cc:	6a 00                	push   0x0
c000f2ce:	68 da 14 02 c0       	push   0xc00214da
c000f2d3:	6a 37                	push   0x37
c000f2d5:	53                   	push   ebx
c000f2d6:	e8 d1 fc ff ff       	call   c000efac <IDT::addEntry(int, void (*)(), bool)>
c000f2db:	83 c4 1c             	add    esp,0x1c
c000f2de:	6a 03                	push   0x3
c000f2e0:	6a 02                	push   0x2
c000f2e2:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000f2e8:	e8 c3 49 00 00       	call   c0013cb0 <VAS::allocatePages(int, int)>
c000f2ed:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2f4:	89 c6                	mov    esi,eax
c000f2f6:	e8 9c 09 00 00       	call   c000fc97 <malloc>
c000f2fb:	81 c6 00 20 00 00    	add    esi,0x2000
c000f301:	89 04 24             	mov    DWORD PTR [esp],eax
c000f304:	89 c7                	mov    edi,eax
c000f306:	e8 61 3a 00 00       	call   c0012d6c <TSS::TSS()>
c000f30b:	83 c4 0c             	add    esp,0xc
c000f30e:	68 86 12 02 c0       	push   0xc0021286
c000f313:	56                   	push   esi
c000f314:	57                   	push   edi
c000f315:	e8 96 3a 00 00       	call   c0012db0 <TSS::setup(unsigned long, unsigned long)>
c000f31a:	89 c6                	mov    esi,eax
c000f31c:	58                   	pop    eax
c000f31d:	5a                   	pop    edx
c000f31e:	6a 00                	push   0x0
c000f320:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f324:	50                   	push   eax
c000f325:	e8 ce fb ff ff       	call   c000eef8 <IDTEntry::IDTEntry(bool)>
c000f32a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f32e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f333:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f33a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f340:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f344:	80 ce 05             	or     dh,0x5
c000f347:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f34a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f34e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f352:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f355:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f358:	e8 87 fc ff ff       	call   c000efe4 <IDT::flush()>
c000f35d:	83 c4 20             	add    esp,0x20
c000f360:	5b                   	pop    ebx
c000f361:	5e                   	pop    esi
c000f362:	5f                   	pop    edi
c000f363:	c3                   	ret    

c000f364 <CPU::current()>:
c000f364:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000f369:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f36f:	c3                   	ret    

c000f370 <operator new(unsigned long)>:
c000f370:	e9 22 09 00 00       	jmp    c000fc97 <malloc>

c000f375 <operator delete(void*)>:
c000f375:	e9 3d 09 00 00       	jmp    c000fcb7 <rfree>

c000f37a <disableIRQs()>:
c000f37a:	fa                   	cli    
c000f37b:	c3                   	ret    

c000f37c <enableIRQs()>:
c000f37c:	fb                   	sti    
c000f37d:	c3                   	ret    

c000f37e <lockScheduler()>:
c000f37e:	fa                   	cli    
c000f37f:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f385:	c3                   	ret    

c000f386 <unlockScheduler()>:
c000f386:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f38d:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f394:	75 01                	jne    c000f397 <unlockScheduler()+0x11>
c000f396:	fb                   	sti    
c000f397:	c3                   	ret    

c000f398 <lockStuff()>:
c000f398:	fa                   	cli    
c000f399:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f39f:	ff 05 2c ea 02 c0    	inc    DWORD PTR ds:0xc002ea2c
c000f3a5:	c3                   	ret    

c000f3a6 <unlockStuff()>:
c000f3a6:	83 ec 0c             	sub    esp,0xc
c000f3a9:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000f3ae:	48                   	dec    eax
c000f3af:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000f3b4:	75 18                	jne    c000f3ce <unlockStuff()+0x28>
c000f3b6:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c000f3bd:	74 0f                	je     c000f3ce <unlockStuff()+0x28>
c000f3bf:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000f3c9:	e8 5e 7b 00 00       	call   c0016f2c <schedule()>
c000f3ce:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f3d5:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f3dc:	75 01                	jne    c000f3df <unlockStuff()+0x39>
c000f3de:	fb                   	sti    
c000f3df:	83 c4 0c             	add    esp,0xc
c000f3e2:	c3                   	ret    

c000f3e3 <Virt::getAKernelVAS()>:
c000f3e3:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c000f3e8:	c3                   	ret    

c000f3e9 <__not_memcpy>:
c000f3e9:	57                   	push   edi
c000f3ea:	56                   	push   esi
c000f3eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f3f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f3f7:	89 c7                	mov    edi,eax
c000f3f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3fb:	5e                   	pop    esi
c000f3fc:	5f                   	pop    edi
c000f3fd:	c3                   	ret    

c000f3fe <KeFormatDate(char*, int, int, int, int, bool)>:
c000f3fe:	55                   	push   ebp
c000f3ff:	b9 0a 00 00 00       	mov    ecx,0xa
c000f404:	57                   	push   edi
c000f405:	56                   	push   esi
c000f406:	53                   	push   ebx
c000f407:	bb e8 03 00 00       	mov    ebx,0x3e8
c000f40c:	81 ec ac 00 00 00    	sub    esp,0xac
c000f412:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f419:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f41e:	99                   	cdq    
c000f41f:	f7 f9                	idiv   ecx
c000f421:	89 d5                	mov    ebp,edx
c000f423:	99                   	cdq    
c000f424:	f7 f9                	idiv   ecx
c000f426:	8d 42 30             	lea    eax,[edx+0x30]
c000f429:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f42d:	8d 45 30             	lea    eax,[ebp+0x30]
c000f430:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f434:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f43b:	99                   	cdq    
c000f43c:	f7 fb                	idiv   ebx
c000f43e:	bb 64 00 00 00       	mov    ebx,0x64
c000f443:	99                   	cdq    
c000f444:	f7 f9                	idiv   ecx
c000f446:	8d 42 30             	lea    eax,[edx+0x30]
c000f449:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f44d:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f454:	99                   	cdq    
c000f455:	f7 fb                	idiv   ebx
c000f457:	31 db                	xor    ebx,ebx
c000f459:	99                   	cdq    
c000f45a:	f7 f9                	idiv   ecx
c000f45c:	8d 42 30             	lea    eax,[edx+0x30]
c000f45f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f463:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f46b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f46f:	0f be 8b 04 e1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd1efc]
c000f476:	83 f9 59             	cmp    ecx,0x59
c000f479:	74 1c                	je     c000f497 <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f47b:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f482:	83 f9 4d             	cmp    ecx,0x4d
c000f485:	0f 84 e3 00 00 00    	je     c000f56e <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f48b:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f492:	e9 d7 00 00 00       	jmp    c000f56e <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f497:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f49c:	74 27                	je     c000f4c5 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f49e:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f4a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f4a7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4ab:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f4af:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f4b3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f4b7:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f4bb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f4bf:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f4c3:	eb 15                	jmp    c000f4da <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f4c5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f4c9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4cd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f4d1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f4d5:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f4da:	50                   	push   eax
c000f4db:	50                   	push   eax
c000f4dc:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f4e0:	57                   	push   edi
c000f4e1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f4e5:	56                   	push   esi
c000f4e6:	e8 55 13 ff ff       	call   c0000840 <strcat>
c000f4eb:	83 c4 10             	add    esp,0x10
c000f4ee:	83 fb 02             	cmp    ebx,0x2
c000f4f1:	74 1a                	je     c000f50d <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f4f3:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f4f8:	a1 08 e1 02 c0       	mov    eax,ds:0xc002e108
c000f4fd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f501:	55                   	push   ebp
c000f502:	55                   	push   ebp
c000f503:	57                   	push   edi
c000f504:	56                   	push   esi
c000f505:	e8 36 13 ff ff       	call   c0000840 <strcat>
c000f50a:	83 c4 10             	add    esp,0x10
c000f50d:	43                   	inc    ebx
c000f50e:	83 fb 03             	cmp    ebx,0x3
c000f511:	0f 85 58 ff ff ff    	jne    c000f46f <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f517:	51                   	push   ecx
c000f518:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f51f:	6a 00                	push   0x0
c000f521:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f528:	e8 c3 0f ff ff       	call   c00004f0 <memset>
c000f52d:	89 34 24             	mov    DWORD PTR [esp],esi
c000f530:	e8 3b 10 ff ff       	call   c0000570 <strlen>
c000f535:	83 c4 10             	add    esp,0x10
c000f538:	40                   	inc    eax
c000f539:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f540:	72 17                	jb     c000f559 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f542:	52                   	push   edx
c000f543:	52                   	push   edx
c000f544:	56                   	push   esi
c000f545:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f54c:	e8 ef 10 ff ff       	call   c0000640 <strcpy>
c000f551:	83 c4 10             	add    esp,0x10
c000f554:	e9 8a 00 00 00       	jmp    c000f5e3 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f559:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f560:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f567:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f56a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f56c:	eb 75                	jmp    c000f5e3 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f56e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f572:	89 ef                	mov    edi,ebp
c000f574:	50                   	push   eax
c000f575:	c1 ff 1f             	sar    edi,0x1f
c000f578:	50                   	push   eax
c000f579:	57                   	push   edi
c000f57a:	55                   	push   ebp
c000f57b:	e8 70 04 00 00       	call   c000f9f0 <KeGetDigitsInNumber(long long)>
c000f580:	83 c4 10             	add    esp,0x10
c000f583:	48                   	dec    eax
c000f584:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f588:	75 1c                	jne    c000f5a6 <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f58a:	83 f9 44             	cmp    ecx,0x44
c000f58d:	75 09                	jne    c000f598 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f58f:	80 3d 20 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e120,0x0
c000f596:	eb 0c                	jmp    c000f5a4 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f598:	83 f9 4d             	cmp    ecx,0x4d
c000f59b:	75 2b                	jne    c000f5c8 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f59d:	80 3d 21 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e121,0x0
c000f5a4:	74 22                	je     c000f5c8 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f5a6:	89 e8                	mov    eax,ebp
c000f5a8:	b9 0a 00 00 00       	mov    ecx,0xa
c000f5ad:	99                   	cdq    
c000f5ae:	f7 f9                	idiv   ecx
c000f5b0:	89 d5                	mov    ebp,edx
c000f5b2:	99                   	cdq    
c000f5b3:	f7 f9                	idiv   ecx
c000f5b5:	83 c2 30             	add    edx,0x30
c000f5b8:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f5bc:	8d 55 30             	lea    edx,[ebp+0x30]
c000f5bf:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f5c3:	e9 0d ff ff ff       	jmp    c000f4d5 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f5c8:	89 e8                	mov    eax,ebp
c000f5ca:	b9 0a 00 00 00       	mov    ecx,0xa
c000f5cf:	99                   	cdq    
c000f5d0:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f5d5:	f7 f9                	idiv   ecx
c000f5d7:	83 c2 30             	add    edx,0x30
c000f5da:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f5de:	e9 f7 fe ff ff       	jmp    c000f4da <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f5e3:	81 c4 ac 00 00 00    	add    esp,0xac
c000f5e9:	5b                   	pop    ebx
c000f5ea:	5e                   	pop    esi
c000f5eb:	5f                   	pop    edi
c000f5ec:	5d                   	pop    ebp
c000f5ed:	c3                   	ret    

c000f5ee <KeFormatShortDate(char*, int, int, int, int)>:
c000f5ee:	83 ec 14             	sub    esp,0x14
c000f5f1:	6a 00                	push   0x0
c000f5f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f603:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f607:	e8 f2 fd ff ff       	call   c000f3fe <KeFormatDate(char*, int, int, int, int, bool)>
c000f60c:	83 c4 2c             	add    esp,0x2c
c000f60f:	c3                   	ret    

c000f610 <KeFormatLongDate(char*, int, int, int, int)>:
c000f610:	83 ec 14             	sub    esp,0x14
c000f613:	6a 01                	push   0x1
c000f615:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f619:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f61d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f621:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f625:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f629:	e8 d0 fd ff ff       	call   c000f3fe <KeFormatDate(char*, int, int, int, int, bool)>
c000f62e:	83 c4 2c             	add    esp,0x2c
c000f631:	c3                   	ret    

c000f632 <KeSetLocale(klocale_t)>:
c000f632:	57                   	push   edi
c000f633:	b9 09 00 00 00       	mov    ecx,0x9
c000f638:	56                   	push   esi
c000f639:	bf 00 e1 02 c0       	mov    edi,0xc002e100
c000f63e:	fc                   	cld    
c000f63f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f643:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f645:	5e                   	pop    esi
c000f646:	5f                   	pop    edi
c000f647:	c3                   	ret    

c000f648 <KeInitialiseLocale()>:
c000f648:	57                   	push   edi
c000f649:	56                   	push   esi
c000f64a:	83 ec 3c             	sub    esp,0x3c
c000f64d:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f655:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f65d:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f665:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f66d:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f674:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f67c:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f684:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f68b:	68 d2 3e 02 c0       	push   0xc0023ed2
c000f690:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f694:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f698:	50                   	push   eax
c000f699:	e8 a2 0f ff ff       	call   c0000640 <strcpy>
c000f69e:	83 ec 20             	sub    esp,0x20
c000f6a1:	b9 09 00 00 00       	mov    ecx,0x9
c000f6a6:	fc                   	cld    
c000f6a7:	89 e7                	mov    edi,esp
c000f6a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f6ab:	e8 82 ff ff ff       	call   c000f632 <KeSetLocale(klocale_t)>
c000f6b0:	83 c4 64             	add    esp,0x64
c000f6b3:	5e                   	pop    esi
c000f6b4:	5f                   	pop    edi
c000f6b5:	c3                   	ret    

c000f6b6 <KeFormatCurrency(char*, int, long long, long long)>:
c000f6b6:	c3                   	ret    

c000f6b7 <KeFormatCurrency(char*, int, double)>:
c000f6b7:	c3                   	ret    

c000f6b8 <KeFormatNumber(char*, long long, long long)>:
c000f6b8:	c3                   	ret    

c000f6b9 <KeFormatNumber(char*, double)>:
c000f6b9:	c3                   	ret    
c000f6ba:	66 90                	xchg   ax,ax

c000f6bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f6bc:	55                   	push   ebp
c000f6bd:	57                   	push   edi
c000f6be:	56                   	push   esi
c000f6bf:	53                   	push   ebx
c000f6c0:	83 ec 5c             	sub    esp,0x5c
c000f6c3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f6c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f6cb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f6cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f6d3:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f6d7:	bb 4f 2c 02 c0       	mov    ebx,0xc0022c4f
c000f6dc:	bd 11 00 00 00       	mov    ebp,0x11
c000f6e1:	89 d0                	mov    eax,edx
c000f6e3:	83 e0 01             	and    eax,0x1
c000f6e6:	74 10                	je     c000f6f8 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f6e8:	8a 03                	mov    al,BYTE PTR [ebx]
c000f6ea:	88 02                	mov    BYTE PTR [edx],al
c000f6ec:	8d 52 01             	lea    edx,[edx+0x1]
c000f6ef:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f6f2:	83 ed 01             	sub    ebp,0x1
c000f6f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f6f8:	89 d0                	mov    eax,edx
c000f6fa:	83 e0 02             	and    eax,0x2
c000f6fd:	74 11                	je     c000f710 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f6ff:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f702:	66 89 02             	mov    WORD PTR [edx],ax
c000f705:	8d 52 02             	lea    edx,[edx+0x2]
c000f708:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f70b:	83 ed 02             	sub    ebp,0x2
c000f70e:	66 90                	xchg   ax,ax
c000f710:	89 e8                	mov    eax,ebp
c000f712:	c1 e8 02             	shr    eax,0x2
c000f715:	fc                   	cld    
c000f716:	89 d7                	mov    edi,edx
c000f718:	89 de                	mov    esi,ebx
c000f71a:	89 c1                	mov    ecx,eax
c000f71c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f71e:	89 f3                	mov    ebx,esi
c000f720:	89 fa                	mov    edx,edi
c000f722:	b9 00 00 00 00       	mov    ecx,0x0
c000f727:	89 e8                	mov    eax,ebp
c000f729:	83 e0 02             	and    eax,0x2
c000f72c:	74 0e                	je     c000f73c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f72e:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f732:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f736:	8d 41 02             	lea    eax,[ecx+0x2]
c000f739:	89 c1                	mov    ecx,eax
c000f73b:	90                   	nop
c000f73c:	89 e8                	mov    eax,ebp
c000f73e:	83 e0 01             	and    eax,0x1
c000f741:	74 09                	je     c000f74c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f743:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f746:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f749:	8d 76 00             	lea    esi,[esi+0x0]
c000f74c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f750:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f754:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f758:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f75c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f760:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f764:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f769:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f76d:	89 c2                	mov    edx,eax
c000f76f:	c1 fa 1f             	sar    edx,0x1f
c000f772:	52                   	push   edx
c000f773:	50                   	push   eax
c000f774:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f778:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f77c:	e8 03 21 01 00       	call   c0021884 <__udivdi3>
c000f781:	83 c4 10             	add    esp,0x10
c000f784:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f788:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f78c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f790:	80 f4 00             	xor    ah,0x0
c000f793:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f797:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f79b:	80 f4 00             	xor    ah,0x0
c000f79e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f7a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f7a6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f7aa:	89 f8                	mov    eax,edi
c000f7ac:	09 f0                	or     eax,esi
c000f7ae:	74 04                	je     c000f7b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f7b0:	eb b2                	jmp    c000f764 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f7b2:	66 90                	xchg   ax,ax
c000f7b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7b8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f7bb:	90                   	nop
c000f7bc:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f7c0:	89 c1                	mov    ecx,eax
c000f7c2:	89 c3                	mov    ebx,eax
c000f7c4:	c1 fb 1f             	sar    ebx,0x1f
c000f7c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f7cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f7cf:	53                   	push   ebx
c000f7d0:	51                   	push   ecx
c000f7d1:	52                   	push   edx
c000f7d2:	50                   	push   eax
c000f7d3:	e8 ac 21 01 00       	call   c0021984 <__umoddi3>
c000f7d8:	83 c4 10             	add    esp,0x10
c000f7db:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f7e0:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f7e4:	01 c8                	add    eax,ecx
c000f7e6:	8a 10                	mov    dl,BYTE PTR [eax]
c000f7e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7ec:	88 10                	mov    BYTE PTR [eax],dl
c000f7ee:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f7f2:	89 c2                	mov    edx,eax
c000f7f4:	c1 fa 1f             	sar    edx,0x1f
c000f7f7:	52                   	push   edx
c000f7f8:	50                   	push   eax
c000f7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f7fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f801:	e8 7e 20 01 00       	call   c0021884 <__udivdi3>
c000f806:	83 c4 10             	add    esp,0x10
c000f809:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f80d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f811:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f815:	80 f4 00             	xor    ah,0x0
c000f818:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f81c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f820:	80 f4 00             	xor    ah,0x0
c000f823:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f827:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f82b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f82f:	89 f8                	mov    eax,edi
c000f831:	09 f0                	or     eax,esi
c000f833:	74 03                	je     c000f838 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f835:	eb 85                	jmp    c000f7bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f837:	90                   	nop
c000f838:	90                   	nop
c000f839:	83 c4 5c             	add    esp,0x5c
c000f83c:	5b                   	pop    ebx
c000f83d:	5e                   	pop    esi
c000f83e:	5f                   	pop    edi
c000f83f:	5d                   	pop    ebp
c000f840:	c3                   	ret    
c000f841:	8d 76 00             	lea    esi,[esi+0x0]

c000f844 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f844:	55                   	push   ebp
c000f845:	57                   	push   edi
c000f846:	56                   	push   esi
c000f847:	53                   	push   ebx
c000f848:	83 ec 5c             	sub    esp,0x5c
c000f84b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f84f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f853:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f857:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f85b:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f85f:	bb 4f 2c 02 c0       	mov    ebx,0xc0022c4f
c000f864:	bd 11 00 00 00       	mov    ebp,0x11
c000f869:	89 d0                	mov    eax,edx
c000f86b:	83 e0 01             	and    eax,0x1
c000f86e:	74 10                	je     c000f880 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f870:	8a 03                	mov    al,BYTE PTR [ebx]
c000f872:	88 02                	mov    BYTE PTR [edx],al
c000f874:	8d 52 01             	lea    edx,[edx+0x1]
c000f877:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f87a:	83 ed 01             	sub    ebp,0x1
c000f87d:	8d 76 00             	lea    esi,[esi+0x0]
c000f880:	89 d0                	mov    eax,edx
c000f882:	83 e0 02             	and    eax,0x2
c000f885:	74 11                	je     c000f898 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f887:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f88a:	66 89 02             	mov    WORD PTR [edx],ax
c000f88d:	8d 52 02             	lea    edx,[edx+0x2]
c000f890:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f893:	83 ed 02             	sub    ebp,0x2
c000f896:	66 90                	xchg   ax,ax
c000f898:	89 e8                	mov    eax,ebp
c000f89a:	c1 e8 02             	shr    eax,0x2
c000f89d:	fc                   	cld    
c000f89e:	89 d7                	mov    edi,edx
c000f8a0:	89 de                	mov    esi,ebx
c000f8a2:	89 c1                	mov    ecx,eax
c000f8a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f8a6:	89 f3                	mov    ebx,esi
c000f8a8:	89 fa                	mov    edx,edi
c000f8aa:	b9 00 00 00 00       	mov    ecx,0x0
c000f8af:	89 e8                	mov    eax,ebp
c000f8b1:	83 e0 02             	and    eax,0x2
c000f8b4:	74 0e                	je     c000f8c4 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f8b6:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f8ba:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f8be:	8d 41 02             	lea    eax,[ecx+0x2]
c000f8c1:	89 c1                	mov    ecx,eax
c000f8c3:	90                   	nop
c000f8c4:	89 e8                	mov    eax,ebp
c000f8c6:	83 e0 01             	and    eax,0x1
c000f8c9:	74 09                	je     c000f8d4 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f8cb:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f8ce:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f8d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f8d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f8dc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f8e1:	79 1d                	jns    c000f900 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f8e3:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f8e7:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f8ec:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f8f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f8f4:	8d 50 01             	lea    edx,[eax+0x1]
c000f8f7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f8fb:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f8fe:	66 90                	xchg   ax,ax
c000f900:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f904:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f908:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f90c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f910:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f915:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f919:	89 c2                	mov    edx,eax
c000f91b:	c1 fa 1f             	sar    edx,0x1f
c000f91e:	52                   	push   edx
c000f91f:	50                   	push   eax
c000f920:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f924:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f928:	e8 57 1f 01 00       	call   c0021884 <__udivdi3>
c000f92d:	83 c4 10             	add    esp,0x10
c000f930:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f934:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f938:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f93c:	80 f4 00             	xor    ah,0x0
c000f93f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f943:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f947:	80 f4 00             	xor    ah,0x0
c000f94a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f94e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f952:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f956:	89 f8                	mov    eax,edi
c000f958:	09 f0                	or     eax,esi
c000f95a:	74 04                	je     c000f960 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f95c:	eb b2                	jmp    c000f910 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f95e:	66 90                	xchg   ax,ax
c000f960:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f964:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f967:	90                   	nop
c000f968:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f96c:	89 c1                	mov    ecx,eax
c000f96e:	89 c3                	mov    ebx,eax
c000f970:	c1 fb 1f             	sar    ebx,0x1f
c000f973:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f977:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f97b:	53                   	push   ebx
c000f97c:	51                   	push   ecx
c000f97d:	52                   	push   edx
c000f97e:	50                   	push   eax
c000f97f:	e8 80 1d 01 00       	call   c0021704 <__moddi3>
c000f984:	83 c4 10             	add    esp,0x10
c000f987:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f98c:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f990:	01 c8                	add    eax,ecx
c000f992:	8a 10                	mov    dl,BYTE PTR [eax]
c000f994:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f998:	88 10                	mov    BYTE PTR [eax],dl
c000f99a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f99e:	89 c2                	mov    edx,eax
c000f9a0:	c1 fa 1f             	sar    edx,0x1f
c000f9a3:	52                   	push   edx
c000f9a4:	50                   	push   eax
c000f9a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9ad:	e8 06 1c 01 00       	call   c00215b8 <__divdi3>
c000f9b2:	83 c4 10             	add    esp,0x10
c000f9b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f9c1:	80 f4 00             	xor    ah,0x0
c000f9c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f9c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f9cc:	80 f4 00             	xor    ah,0x0
c000f9cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f9d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f9d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f9db:	89 f8                	mov    eax,edi
c000f9dd:	09 f0                	or     eax,esi
c000f9df:	74 03                	je     c000f9e4 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000f9e1:	eb 85                	jmp    c000f968 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000f9e3:	90                   	nop
c000f9e4:	90                   	nop
c000f9e5:	83 c4 5c             	add    esp,0x5c
c000f9e8:	5b                   	pop    ebx
c000f9e9:	5e                   	pop    esi
c000f9ea:	5f                   	pop    edi
c000f9eb:	5d                   	pop    ebp
c000f9ec:	c3                   	ret    
c000f9ed:	8d 76 00             	lea    esi,[esi+0x0]

c000f9f0 <KeGetDigitsInNumber(long long)>:
c000f9f0:	56                   	push   esi
c000f9f1:	53                   	push   ebx
c000f9f2:	83 ec 24             	sub    esp,0x24
c000f9f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f9fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa05:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000fa0d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa14:	80 f4 00             	xor    ah,0x0
c000fa17:	89 c3                	mov    ebx,eax
c000fa19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa1d:	80 f4 00             	xor    ah,0x0
c000fa20:	89 c6                	mov    esi,eax
c000fa22:	89 f0                	mov    eax,esi
c000fa24:	09 d8                	or     eax,ebx
c000fa26:	74 28                	je     c000fa50 <KeGetDigitsInNumber(long long)+0x60>
c000fa28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fa30:	6a 00                	push   0x0
c000fa32:	6a 0a                	push   0xa
c000fa34:	52                   	push   edx
c000fa35:	50                   	push   eax
c000fa36:	e8 7d 1b 01 00       	call   c00215b8 <__divdi3>
c000fa3b:	83 c4 10             	add    esp,0x10
c000fa3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fa46:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000fa4b:	eb c3                	jmp    c000fa10 <KeGetDigitsInNumber(long long)+0x20>
c000fa4d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa54:	83 c4 24             	add    esp,0x24
c000fa57:	5b                   	pop    ebx
c000fa58:	5e                   	pop    esi
c000fa59:	c3                   	ret    
c000fa5a:	66 90                	xchg   ax,ax

c000fa5c <KeItoa(unsigned long long, char*)>:
c000fa5c:	83 ec 1c             	sub    esp,0x1c
c000fa5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa6f:	6a 0a                	push   0xa
c000fa71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa7d:	e8 3a fc ff ff       	call   c000f6bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fa82:	83 c4 10             	add    esp,0x10
c000fa85:	90                   	nop
c000fa86:	83 c4 1c             	add    esp,0x1c
c000fa89:	c3                   	ret    
c000fa8a:	66 90                	xchg   ax,ax

c000fa8c <KeItoa(long long, char*)>:
c000fa8c:	83 ec 1c             	sub    esp,0x1c
c000fa8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa9f:	6a 0a                	push   0xa
c000faa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000faa5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000faa9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000faad:	e8 92 fd ff ff       	call   c000f844 <KeBasedSignedIntegerToString(long long, char*, int)>
c000fab2:	83 c4 10             	add    esp,0x10
c000fab5:	90                   	nop
c000fab6:	83 c4 1c             	add    esp,0x1c
c000fab9:	c3                   	ret    
c000faba:	66 90                	xchg   ax,ax

c000fabc <KeXtoa(unsigned long long, char*)>:
c000fabc:	83 ec 1c             	sub    esp,0x1c
c000fabf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fac3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fac7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000facb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000facf:	6a 10                	push   0x10
c000fad1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fadd:	e8 da fb ff ff       	call   c000f6bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fae2:	83 c4 10             	add    esp,0x10
c000fae5:	90                   	nop
c000fae6:	83 c4 1c             	add    esp,0x1c
c000fae9:	c3                   	ret    

c000faea <sbrk>:
c000faea:	55                   	push   ebp
c000faeb:	57                   	push   edi
c000faec:	56                   	push   esi
c000faed:	53                   	push   ebx
c000faee:	83 ec 1c             	sub    esp,0x1c
c000faf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000faf5:	85 c0                	test   eax,eax
c000faf7:	74 61                	je     c000fb5a <sbrk+0x70>
c000faf9:	78 66                	js     c000fb61 <sbrk+0x77>
c000fafb:	8b 15 d0 65 02 c0    	mov    edx,DWORD PTR ds:0xc00265d0
c000fb01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fb05:	05 ff 0f 00 00       	add    eax,0xfff
c000fb0a:	89 c5                	mov    ebp,eax
c000fb0c:	78 6b                	js     c000fb79 <sbrk+0x8f>
c000fb0e:	c1 fd 0c             	sar    ebp,0xc
c000fb11:	bb 00 00 00 00       	mov    ebx,0x0
c000fb16:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000fb1c:	8b 3d d0 65 02 c0    	mov    edi,DWORD PTR ds:0xc00265d0
c000fb22:	e8 ab 06 00 00       	call   c00101d2 <Phys::allocatePage()>
c000fb27:	68 01 04 00 00       	push   0x401
c000fb2c:	57                   	push   edi
c000fb2d:	50                   	push   eax
c000fb2e:	56                   	push   esi
c000fb2f:	e8 78 40 00 00       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c000fb34:	81 05 d0 65 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00265d0,0x1000
c000fb3e:	83 c3 01             	add    ebx,0x1
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	39 dd                	cmp    ebp,ebx
c000fb46:	75 ce                	jne    c000fb16 <sbrk+0x2c>
c000fb48:	0f 20 d8             	mov    eax,cr3
c000fb4b:	0f 22 d8             	mov    cr3,eax
c000fb4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb52:	83 c4 1c             	add    esp,0x1c
c000fb55:	5b                   	pop    ebx
c000fb56:	5e                   	pop    esi
c000fb57:	5f                   	pop    edi
c000fb58:	5d                   	pop    ebp
c000fb59:	c3                   	ret    
c000fb5a:	a1 d0 65 02 c0       	mov    eax,ds:0xc00265d0
c000fb5f:	eb f1                	jmp    c000fb52 <sbrk+0x68>
c000fb61:	83 ec 08             	sub    esp,0x8
c000fb64:	50                   	push   eax
c000fb65:	68 d8 3e 02 c0       	push   0xc0023ed8
c000fb6a:	e8 f5 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fb6f:	83 c4 10             	add    esp,0x10
c000fb72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fb77:	eb d9                	jmp    c000fb52 <sbrk+0x68>
c000fb79:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000fb7f:	eb 8d                	jmp    c000fb0e <sbrk+0x24>

c000fb81 <sbrk_thunk>:
c000fb81:	83 ec 0c             	sub    esp,0xc
c000fb84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb88:	3d ff bf 00 00       	cmp    eax,0xbfff
c000fb8d:	7f 10                	jg     c000fb9f <sbrk_thunk+0x1e>
c000fb8f:	83 ec 0c             	sub    esp,0xc
c000fb92:	50                   	push   eax
c000fb93:	e8 52 ff ff ff       	call   c000faea <sbrk>
c000fb98:	83 c4 10             	add    esp,0x10
c000fb9b:	83 c4 0c             	add    esp,0xc
c000fb9e:	c3                   	ret    
c000fb9f:	83 ec 08             	sub    esp,0x8
c000fba2:	50                   	push   eax
c000fba3:	68 08 3f 02 c0       	push   0xc0023f08
c000fba8:	e8 b7 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fbad:	83 c4 10             	add    esp,0x10
c000fbb0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fbb5:	eb e4                	jmp    c000fb9b <sbrk_thunk+0x1a>

c000fbb7 <mmap>:
c000fbb7:	55                   	push   ebp
c000fbb8:	57                   	push   edi
c000fbb9:	56                   	push   esi
c000fbba:	53                   	push   ebx
c000fbbb:	83 ec 18             	sub    esp,0x18
c000fbbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fbc2:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fbc8:	89 fb                	mov    ebx,edi
c000fbca:	c1 eb 0c             	shr    ebx,0xc
c000fbcd:	53                   	push   ebx
c000fbce:	e8 f6 38 00 00       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c000fbd3:	89 c5                	mov    ebp,eax
c000fbd5:	83 c4 10             	add    esp,0x10
c000fbd8:	85 db                	test   ebx,ebx
c000fbda:	7e 2f                	jle    c000fc0b <mmap+0x54>
c000fbdc:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fbe2:	01 c7                	add    edi,eax
c000fbe4:	89 c3                	mov    ebx,eax
c000fbe6:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000fbec:	e8 e1 05 00 00       	call   c00101d2 <Phys::allocatePage()>
c000fbf1:	68 01 04 00 00       	push   0x401
c000fbf6:	53                   	push   ebx
c000fbf7:	50                   	push   eax
c000fbf8:	56                   	push   esi
c000fbf9:	e8 ae 3f 00 00       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c000fbfe:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fc04:	83 c4 10             	add    esp,0x10
c000fc07:	39 fb                	cmp    ebx,edi
c000fc09:	75 db                	jne    c000fbe6 <mmap+0x2f>
c000fc0b:	89 e8                	mov    eax,ebp
c000fc0d:	83 c4 0c             	add    esp,0xc
c000fc10:	5b                   	pop    ebx
c000fc11:	5e                   	pop    esi
c000fc12:	5f                   	pop    edi
c000fc13:	5d                   	pop    ebp
c000fc14:	c3                   	ret    

c000fc15 <munmap>:
c000fc15:	83 ec 18             	sub    esp,0x18
c000fc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc1c:	e8 b0 3b 00 00       	call   c00137d1 <Virt::freeKernelVirtualPages(unsigned long)>
c000fc21:	b8 00 00 00 00       	mov    eax,0x0
c000fc26:	83 c4 1c             	add    esp,0x1c
c000fc29:	c3                   	ret    

c000fc2a <liballoc_lock()>:
c000fc2a:	fa                   	cli    
c000fc2b:	83 05 30 ea 02 c0 01 	add    DWORD PTR ds:0xc002ea30,0x1
c000fc32:	b8 00 00 00 00       	mov    eax,0x0
c000fc37:	c3                   	ret    

c000fc38 <liballoc_unlock()>:
c000fc38:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fc40:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000fc47:	75 01                	jne    c000fc4a <liballoc_unlock()+0x12>
c000fc49:	fb                   	sti    
c000fc4a:	b8 00 00 00 00       	mov    eax,0x0
c000fc4f:	c3                   	ret    

c000fc50 <liballoc_alloc(int)>:
c000fc50:	83 ec 10             	sub    esp,0x10
c000fc53:	6a 01                	push   0x1
c000fc55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc59:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fc5f:	e8 4c 40 00 00       	call   c0013cb0 <VAS::allocatePages(int, int)>
c000fc64:	83 c4 1c             	add    esp,0x1c
c000fc67:	c3                   	ret    

c000fc68 <liballoc_free(void*, int)>:
c000fc68:	83 ec 14             	sub    esp,0x14
c000fc6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc6f:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fc75:	e8 94 3c 00 00       	call   c001390e <VAS::freeAllocatedPages(unsigned long)>
c000fc7a:	b8 00 00 00 00       	mov    eax,0x0
c000fc7f:	83 c4 1c             	add    esp,0x1c
c000fc82:	c3                   	ret    

c000fc83 <realloc>:
c000fc83:	83 ec 14             	sub    esp,0x14
c000fc86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc8e:	e8 c4 1a ff ff       	call   c0001757 <dlrealloc>
c000fc93:	83 c4 1c             	add    esp,0x1c
c000fc96:	c3                   	ret    

c000fc97 <malloc>:
c000fc97:	83 ec 18             	sub    esp,0x18
c000fc9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc9e:	e8 77 15 ff ff       	call   c000121a <dlmalloc>
c000fca3:	83 c4 1c             	add    esp,0x1c
c000fca6:	c3                   	ret    

c000fca7 <free>:
c000fca7:	83 ec 18             	sub    esp,0x18
c000fcaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcae:	e8 a0 10 ff ff       	call   c0000d53 <dlfree>
c000fcb3:	83 c4 1c             	add    esp,0x1c
c000fcb6:	c3                   	ret    

c000fcb7 <rfree>:
c000fcb7:	83 ec 18             	sub    esp,0x18
c000fcba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcbe:	e8 90 10 ff ff       	call   c0000d53 <dlfree>
c000fcc3:	83 c4 1c             	add    esp,0x1c
c000fcc6:	c3                   	ret    

c000fcc7 <calloc>:
c000fcc7:	56                   	push   esi
c000fcc8:	53                   	push   ebx
c000fcc9:	83 ec 10             	sub    esp,0x10
c000fccc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fcd0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fcd5:	53                   	push   ebx
c000fcd6:	e8 bc ff ff ff       	call   c000fc97 <malloc>
c000fcdb:	89 c6                	mov    esi,eax
c000fcdd:	83 c4 0c             	add    esp,0xc
c000fce0:	53                   	push   ebx
c000fce1:	6a 00                	push   0x0
c000fce3:	50                   	push   eax
c000fce4:	e8 07 08 ff ff       	call   c00004f0 <memset>
c000fce9:	89 f0                	mov    eax,esi
c000fceb:	83 c4 14             	add    esp,0x14
c000fcee:	5b                   	pop    ebx
c000fcef:	5e                   	pop    esi
c000fcf0:	c3                   	ret    
c000fcf1:	66 90                	xchg   ax,ax
c000fcf3:	90                   	nop

c000fcf4 <KeMailboxTryPost(Mailbox*, void*)>:
c000fcf4:	83 ec 10             	sub    esp,0x10
c000fcf7:	fa                   	cli    
c000fcf8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fcfd:	83 c0 01             	add    eax,0x1
c000fd00:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fd05:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd11:	85 c0                	test   eax,eax
c000fd13:	75 23                	jne    c000fd38 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fd15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fd1d:	89 10                	mov    DWORD PTR [eax],edx
c000fd1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd26:	8d 50 01             	lea    edx,[eax+0x1]
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fd30:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fd35:	8d 76 00             	lea    esi,[esi+0x0]
c000fd38:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fd40:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fd45:	85 c0                	test   eax,eax
c000fd47:	75 03                	jne    c000fd4c <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fd49:	fb                   	sti    
c000fd4a:	66 90                	xchg   ax,ax
c000fd4c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fd50:	83 c4 10             	add    esp,0x10
c000fd53:	c3                   	ret    

c000fd54 <KeMailboxTryGet(Mailbox*, void**)>:
c000fd54:	83 ec 10             	sub    esp,0x10
c000fd57:	fa                   	cli    
c000fd58:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fd5d:	83 c0 01             	add    eax,0x1
c000fd60:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fd65:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd71:	83 f8 01             	cmp    eax,0x1
c000fd74:	75 22                	jne    c000fd98 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fd76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd7a:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fd80:	89 10                	mov    DWORD PTR [eax],edx
c000fd82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd89:	8d 50 ff             	lea    edx,[eax-0x1]
c000fd8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fd93:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fd98:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fda0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fda5:	85 c0                	test   eax,eax
c000fda7:	75 03                	jne    c000fdac <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fda9:	fb                   	sti    
c000fdaa:	66 90                	xchg   ax,ax
c000fdac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fdb0:	83 c4 10             	add    esp,0x10
c000fdb3:	c3                   	ret    

c000fdb4 <KeMailboxCreate()>:
c000fdb4:	83 ec 1c             	sub    esp,0x1c
c000fdb7:	83 ec 0c             	sub    esp,0xc
c000fdba:	6a 08                	push   0x8
c000fdbc:	e8 d6 fe ff ff       	call   c000fc97 <malloc>
c000fdc1:	83 c4 10             	add    esp,0x10
c000fdc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fdc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdcc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fdd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fde1:	83 c4 1c             	add    esp,0x1c
c000fde4:	c3                   	ret    
c000fde5:	8d 76 00             	lea    esi,[esi+0x0]

c000fde8 <KeMailboxPost(Mailbox*, void*)>:
c000fde8:	83 ec 1c             	sub    esp,0x1c
c000fdeb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fdf0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdf8:	e8 f7 fe ff ff       	call   c000fcf4 <KeMailboxTryPost(Mailbox*, void*)>
c000fdfd:	83 c4 08             	add    esp,0x8
c000fe00:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe04:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe08:	83 f0 01             	xor    eax,0x1
c000fe0b:	0f b6 c0             	movzx  eax,al
c000fe0e:	85 c0                	test   eax,eax
c000fe10:	74 26                	je     c000fe38 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fe12:	fa                   	cli    
c000fe13:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fe18:	83 c0 01             	add    eax,0x1
c000fe1b:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fe20:	e8 07 71 00 00       	call   c0016f2c <schedule()>
c000fe25:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fe2d:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fe32:	85 c0                	test   eax,eax
c000fe34:	75 02                	jne    c000fe38 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fe36:	fb                   	sti    
c000fe37:	90                   	nop
c000fe38:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fe3d:	85 c0                	test   eax,eax
c000fe3f:	75 03                	jne    c000fe44 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fe41:	eb ad                	jmp    c000fdf0 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fe43:	90                   	nop
c000fe44:	90                   	nop
c000fe45:	83 c4 1c             	add    esp,0x1c
c000fe48:	c3                   	ret    
c000fe49:	8d 76 00             	lea    esi,[esi+0x0]

c000fe4c <KeMailboxGet(Mailbox*, void**)>:
c000fe4c:	83 ec 1c             	sub    esp,0x1c
c000fe4f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fe54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe5c:	e8 f3 fe ff ff       	call   c000fd54 <KeMailboxTryGet(Mailbox*, void**)>
c000fe61:	83 c4 08             	add    esp,0x8
c000fe64:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe6c:	83 f0 01             	xor    eax,0x1
c000fe6f:	0f b6 c0             	movzx  eax,al
c000fe72:	85 c0                	test   eax,eax
c000fe74:	74 26                	je     c000fe9c <KeMailboxGet(Mailbox*, void**)+0x50>
c000fe76:	fa                   	cli    
c000fe77:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fe7c:	83 c0 01             	add    eax,0x1
c000fe7f:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fe84:	e8 a3 70 00 00       	call   c0016f2c <schedule()>
c000fe89:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fe91:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fe96:	85 c0                	test   eax,eax
c000fe98:	75 02                	jne    c000fe9c <KeMailboxGet(Mailbox*, void**)+0x50>
c000fe9a:	fb                   	sti    
c000fe9b:	90                   	nop
c000fe9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fea1:	85 c0                	test   eax,eax
c000fea3:	75 03                	jne    c000fea8 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fea5:	eb ad                	jmp    c000fe54 <KeMailboxGet(Mailbox*, void**)+0x8>
c000fea7:	90                   	nop
c000fea8:	90                   	nop
c000fea9:	83 c4 1c             	add    esp,0x1c
c000feac:	c3                   	ret    
c000fead:	8d 76 00             	lea    esi,[esi+0x0]

c000feb0 <KeMailboxDestroy(Mailbox*)>:
c000feb0:	83 ec 0c             	sub    esp,0xc
c000feb3:	83 ec 0c             	sub    esp,0xc
c000feb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feba:	e8 e8 fd ff ff       	call   c000fca7 <free>
c000febf:	83 c4 10             	add    esp,0x10
c000fec2:	90                   	nop
c000fec3:	83 c4 0c             	add    esp,0xc
c000fec6:	c3                   	ret    

c000fec7 <KeEntryPoint>:
c000fec7:	57                   	push   edi
c000fec8:	bf f9 03 00 00       	mov    edi,0x3f9
c000fecd:	56                   	push   esi
c000fece:	89 fa                	mov    edx,edi
c000fed0:	53                   	push   ebx
c000fed1:	31 f6                	xor    esi,esi
c000fed3:	83 ec 2c             	sub    esp,0x2c
c000fed6:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fedb:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c000fee0:	89 f0                	mov    eax,esi
c000fee2:	ee                   	out    dx,al
c000fee3:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fee8:	b0 80                	mov    al,0x80
c000feea:	89 da                	mov    edx,ebx
c000feec:	ee                   	out    dx,al
c000feed:	b1 03                	mov    cl,0x3
c000feef:	ba f8 03 00 00       	mov    edx,0x3f8
c000fef4:	88 c8                	mov    al,cl
c000fef6:	ee                   	out    dx,al
c000fef7:	89 f0                	mov    eax,esi
c000fef9:	89 fa                	mov    edx,edi
c000fefb:	ee                   	out    dx,al
c000fefc:	88 c8                	mov    al,cl
c000fefe:	89 da                	mov    edx,ebx
c000ff00:	ee                   	out    dx,al
c000ff01:	b0 c7                	mov    al,0xc7
c000ff03:	ba fa 03 00 00       	mov    edx,0x3fa
c000ff08:	ee                   	out    dx,al
c000ff09:	b0 0b                	mov    al,0xb
c000ff0b:	ba fc 03 00 00       	mov    edx,0x3fc
c000ff10:	ee                   	out    dx,al
c000ff11:	68 17 3f 02 c0       	push   0xc0023f17
c000ff16:	e8 49 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff1b:	e8 10 d3 ff ff       	call   c000d230 <KeDisplaySplashScreen()>
c000ff20:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ff25:	05 ff 0f 00 00       	add    eax,0xfff
c000ff2a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff2f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff32:	e8 2c 04 00 00       	call   c0010363 <Phys::physicalMemorySetup(unsigned int)>
c000ff37:	e8 6b 37 00 00       	call   c00136a7 <Virt::virtualMemorySetup()>
c000ff3c:	e8 39 d2 ff ff       	call   c000d17a <KeInitialiseAtexit()>
c000ff41:	c7 04 24 2e 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f2e
c000ff48:	e8 17 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff4d:	58                   	pop    eax
c000ff4e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ff52:	53                   	push   ebx
c000ff53:	e8 36 3a 00 00       	call   c001398e <VAS::VAS()>
c000ff58:	c7 04 24 3e 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f3e
c000ff5f:	89 1d 50 e2 02 c0    	mov    DWORD PTR ds:0xc002e250,ebx
c000ff65:	e8 fa 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff6a:	e8 2f 1b 01 00       	call   c0021a9e <_init>
c000ff6f:	c7 04 24 52 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f52
c000ff76:	e8 e9 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff7b:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ff82:	e8 10 fd ff ff       	call   c000fc97 <malloc>
c000ff87:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff8a:	89 c6                	mov    esi,eax
c000ff8c:	e8 67 e3 ff ff       	call   c000e2f8 <Computer::Computer()>
c000ff91:	5a                   	pop    edx
c000ff92:	89 35 d0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d0,esi
c000ff98:	59                   	pop    ecx
c000ff99:	56                   	push   esi
c000ff9a:	68 61 3f 02 c0       	push   0xc0023f61
c000ff9f:	e8 c0 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ffa4:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000ffa9:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffab:	53                   	push   ebx
c000ffac:	6a 00                	push   0x0
c000ffae:	6a 00                	push   0x0
c000ffb0:	50                   	push   eax
c000ffb1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ffb4:	83 c4 14             	add    esp,0x14
c000ffb7:	53                   	push   ebx
c000ffb8:	e8 87 3a 00 00       	call   c0013a44 <VAS::~VAS()>
c000ffbd:	83 c4 30             	add    esp,0x30
c000ffc0:	5b                   	pop    ebx
c000ffc1:	5e                   	pop    esi
c000ffc2:	5f                   	pop    edi
c000ffc3:	c3                   	ret    

c000ffc4 <Mutex::Mutex()>:
c000ffc4:	83 ec 0c             	sub    esp,0xc
c000ffc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffcb:	83 ec 08             	sub    esp,0x8
c000ffce:	6a 01                	push   0x1
c000ffd0:	50                   	push   eax
c000ffd1:	e8 56 0c 00 00       	call   c0010c2c <Semaphore::Semaphore(int)>
c000ffd6:	83 c4 10             	add    esp,0x10
c000ffd9:	90                   	nop
c000ffda:	83 c4 0c             	add    esp,0xc
c000ffdd:	c3                   	ret    

c000ffde <KePanic(char const*)>:
c000ffde:	c6 05 28 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e128,0x1
c000ffe5:	e9 23 9f 00 00       	jmp    c0019f0d <HalPanic(char const*)>

c000ffea <Phys::allocateDMA(unsigned long)>:
c000ffea:	55                   	push   ebp
c000ffeb:	31 ed                	xor    ebp,ebp
c000ffed:	57                   	push   edi
c000ffee:	56                   	push   esi
c000ffef:	53                   	push   ebx
c000fff0:	31 db                	xor    ebx,ebx
c000fff2:	83 ec 1c             	sub    esp,0x1c
c000fff5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fff9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010001:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0010007:	31 c0                	xor    eax,eax
c0010009:	c1 ef 0c             	shr    edi,0xc
c001000c:	eb 1b                	jmp    c0010029 <Phys::allocateDMA(unsigned long)+0x3f>
c001000e:	85 c0                	test   eax,eax
c0010010:	75 06                	jne    c0010018 <Phys::allocateDMA(unsigned long)+0x2e>
c0010012:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010016:	89 dd                	mov    ebp,ebx
c0010018:	8d 70 01             	lea    esi,[eax+0x1]
c001001b:	39 f7                	cmp    edi,esi
c001001d:	74 37                	je     c0010056 <Phys::allocateDMA(unsigned long)+0x6c>
c001001f:	89 f0                	mov    eax,esi
c0010021:	83 c3 01             	add    ebx,0x1
c0010024:	83 fb 0f             	cmp    ebx,0xf
c0010027:	7f 13                	jg     c001003c <Phys::allocateDMA(unsigned long)+0x52>
c0010029:	80 bb 44 e1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd1ebc],0x0
c0010030:	74 dc                	je     c001000e <Phys::allocateDMA(unsigned long)+0x24>
c0010032:	31 c0                	xor    eax,eax
c0010034:	83 c3 01             	add    ebx,0x1
c0010037:	83 fb 0f             	cmp    ebx,0xf
c001003a:	7e ed                	jle    c0010029 <Phys::allocateDMA(unsigned long)+0x3f>
c001003c:	83 ec 0c             	sub    esp,0xc
c001003f:	68 78 3f 02 c0       	push   0xc0023f78
c0010044:	e8 95 ff ff ff       	call   c000ffde <KePanic(char const*)>
c0010049:	83 c4 10             	add    esp,0x10
c001004c:	31 c0                	xor    eax,eax
c001004e:	83 c4 1c             	add    esp,0x1c
c0010051:	5b                   	pop    ebx
c0010052:	5e                   	pop    esi
c0010053:	5f                   	pop    edi
c0010054:	5d                   	pop    ebp
c0010055:	c3                   	ret    
c0010056:	89 e9                	mov    ecx,ebp
c0010058:	c1 f9 04             	sar    ecx,0x4
c001005b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001005f:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0010063:	89 ca                	mov    edx,ecx
c0010065:	83 ea 01             	sub    edx,0x1
c0010068:	79 03                	jns    c001006d <Phys::allocateDMA(unsigned long)+0x83>
c001006a:	8d 51 0e             	lea    edx,[ecx+0xe]
c001006d:	c1 fa 04             	sar    edx,0x4
c0010070:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0010074:	74 08                	je     c001007e <Phys::allocateDMA(unsigned long)+0x94>
c0010076:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001007a:	31 c0                	xor    eax,eax
c001007c:	eb b6                	jmp    c0010034 <Phys::allocateDMA(unsigned long)+0x4a>
c001007e:	85 f6                	test   esi,esi
c0010080:	74 17                	je     c0010099 <Phys::allocateDMA(unsigned long)+0xaf>
c0010082:	8d 95 44 e1 02 c0    	lea    edx,[ebp-0x3ffd1ebc]
c0010088:	8d 84 05 45 e1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd1ebb]
c001008f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0010092:	83 c2 01             	add    edx,0x1
c0010095:	39 d0                	cmp    eax,edx
c0010097:	75 f6                	jne    c001008f <Phys::allocateDMA(unsigned long)+0xa5>
c0010099:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c001009e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100a2:	01 f8                	add    eax,edi
c00100a4:	85 d2                	test   edx,edx
c00100a6:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c00100ab:	74 17                	je     c00100c4 <Phys::allocateDMA(unsigned long)+0xda>
c00100ad:	83 ec 0c             	sub    esp,0xc
c00100b0:	68 78 3f 02 c0       	push   0xc0023f78
c00100b5:	e8 24 ff ff ff       	call   c000ffde <KePanic(char const*)>
c00100ba:	83 c4 10             	add    esp,0x10
c00100bd:	89 f0                	mov    eax,esi
c00100bf:	e9 5d ff ff ff       	jmp    c0010021 <Phys::allocateDMA(unsigned long)+0x37>
c00100c4:	c1 e5 0c             	shl    ebp,0xc
c00100c7:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00100cd:	e9 7c ff ff ff       	jmp    c001004e <Phys::allocateDMA(unsigned long)+0x64>

c00100d2 <Phys::freeDMA(unsigned long, unsigned long)>:
c00100d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00100d6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00100dc:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c00100e1:	c1 ea 0c             	shr    edx,0xc
c00100e4:	29 d0                	sub    eax,edx
c00100e6:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c00100eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ef:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00100f4:	c1 e8 0c             	shr    eax,0xc
c00100f7:	85 d2                	test   edx,edx
c00100f9:	74 11                	je     c001010c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00100fb:	05 44 e1 02 c0       	add    eax,0xc002e144
c0010100:	01 c2                	add    edx,eax
c0010102:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010105:	83 c0 01             	add    eax,0x1
c0010108:	39 d0                	cmp    eax,edx
c001010a:	75 f6                	jne    c0010102 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c001010c:	c3                   	ret    

c001010d <Phys::setPageState(unsigned long, bool)>:
c001010d:	57                   	push   edi
c001010e:	56                   	push   esi
c001010f:	8b 35 d4 65 02 c0    	mov    esi,DWORD PTR ds:0xc00265d4
c0010115:	53                   	push   ebx
c0010116:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c001011b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001011f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010123:	0f b6 c0             	movzx  eax,al
c0010126:	89 ca                	mov    edx,ecx
c0010128:	83 e1 07             	and    ecx,0x7
c001012b:	c1 ea 03             	shr    edx,0x3
c001012e:	d3 c3                	rol    ebx,cl
c0010130:	01 d6                	add    esi,edx
c0010132:	d3 e0                	shl    eax,cl
c0010134:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0010137:	21 fb                	and    ebx,edi
c0010139:	88 1e                	mov    BYTE PTR [esi],bl
c001013b:	8b 1d d4 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265d4
c0010141:	01 da                	add    edx,ebx
c0010143:	8a 0a                	mov    cl,BYTE PTR [edx]
c0010145:	09 c8                	or     eax,ecx
c0010147:	88 02                	mov    BYTE PTR [edx],al
c0010149:	5b                   	pop    ebx
c001014a:	5e                   	pop    esi
c001014b:	5f                   	pop    edi
c001014c:	c3                   	ret    

c001014d <Phys::getPageState(unsigned long)>:
c001014d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010151:	8b 15 d4 65 02 c0    	mov    edx,DWORD PTR ds:0xc00265d4
c0010157:	89 c8                	mov    eax,ecx
c0010159:	83 e1 07             	and    ecx,0x7
c001015c:	c1 e8 03             	shr    eax,0x3
c001015f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0010163:	d3 f8                	sar    eax,cl
c0010165:	83 e0 01             	and    eax,0x1
c0010168:	c3                   	ret    

c0010169 <Phys::freePage(unsigned long)>:
c0010169:	53                   	push   ebx
c001016a:	83 ec 08             	sub    esp,0x8
c001016d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010171:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0010177:	81 fa ff ff 00 00    	cmp    edx,0xffff
c001017d:	76 41                	jbe    c00101c0 <Phys::freePage(unsigned long)+0x57>
c001017f:	c1 e8 0c             	shr    eax,0xc
c0010182:	50                   	push   eax
c0010183:	89 c3                	mov    ebx,eax
c0010185:	e8 c3 ff ff ff       	call   c001014d <Phys::getPageState(unsigned long)>
c001018a:	5a                   	pop    edx
c001018b:	84 c0                	test   al,al
c001018d:	74 20                	je     c00101af <Phys::freePage(unsigned long)+0x46>
c001018f:	83 ec 08             	sub    esp,0x8
c0010192:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c0010197:	6a 00                	push   0x0
c0010199:	83 e8 01             	sub    eax,0x1
c001019c:	53                   	push   ebx
c001019d:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c00101a2:	e8 66 ff ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c00101a7:	83 c4 10             	add    esp,0x10
c00101aa:	83 c4 08             	add    esp,0x8
c00101ad:	5b                   	pop    ebx
c00101ae:	c3                   	ret    
c00101af:	c7 44 24 10 7d 40 02 c0 	mov    DWORD PTR [esp+0x10],0xc002407d
c00101b7:	83 c4 08             	add    esp,0x8
c00101ba:	5b                   	pop    ebx
c00101bb:	e9 1e fe ff ff       	jmp    c000ffde <KePanic(char const*)>
c00101c0:	68 00 10 00 00       	push   0x1000
c00101c5:	50                   	push   eax
c00101c6:	e8 07 ff ff ff       	call   c00100d2 <Phys::freeDMA(unsigned long, unsigned long)>
c00101cb:	59                   	pop    ecx
c00101cc:	5b                   	pop    ebx
c00101cd:	83 c4 08             	add    esp,0x8
c00101d0:	5b                   	pop    ebx
c00101d1:	c3                   	ret    

c00101d2 <Phys::allocatePage()>:
c00101d2:	56                   	push   esi
c00101d3:	53                   	push   ebx
c00101d4:	83 ec 14             	sub    esp,0x14
c00101d7:	8b 35 30 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e130
c00101dd:	89 f3                	mov    ebx,esi
c00101df:	eb 0a                	jmp    c00101eb <Phys::allocatePage()+0x19>
c00101e1:	89 1d 30 e1 02 c0    	mov    DWORD PTR ds:0xc002e130,ebx
c00101e7:	39 de                	cmp    esi,ebx
c00101e9:	74 26                	je     c0010211 <Phys::allocatePage()+0x3f>
c00101eb:	53                   	push   ebx
c00101ec:	e8 5c ff ff ff       	call   c001014d <Phys::getPageState(unsigned long)>
c00101f1:	59                   	pop    ecx
c00101f2:	84 c0                	test   al,al
c00101f4:	74 67                	je     c001025d <Phys::allocatePage()+0x8b>
c00101f6:	83 c3 01             	add    ebx,0x1
c00101f9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00101ff:	75 e0                	jne    c00101e1 <Phys::allocatePage()+0xf>
c0010201:	31 db                	xor    ebx,ebx
c0010203:	c7 05 30 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e130,0x0
c001020d:	39 de                	cmp    esi,ebx
c001020f:	75 da                	jne    c00101eb <Phys::allocatePage()+0x19>
c0010211:	83 ec 0c             	sub    esp,0xc
c0010214:	a0 54 e1 02 c0       	mov    al,ds:0xc002e154
c0010219:	83 f0 01             	xor    eax,0x1
c001021c:	a2 54 e1 02 c0       	mov    ds:0xc002e154,al
c0010221:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010226:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010229:	8b 88 72 05 00 00    	mov    ecx,DWORD PTR [eax+0x572]
c001022f:	51                   	push   ecx
c0010230:	e8 bf 44 00 00       	call   c00146f4 <VAS::scanForEviction()>
c0010235:	83 c4 10             	add    esp,0x10
c0010238:	85 c0                	test   eax,eax
c001023a:	75 48                	jne    c0010284 <Phys::allocatePage()+0xb2>
c001023c:	83 ec 0c             	sub    esp,0xc
c001023f:	68 a0 3f 02 c0       	push   0xc0023fa0
c0010244:	e8 95 fd ff ff       	call   c000ffde <KePanic(char const*)>
c0010249:	83 c4 10             	add    esp,0x10
c001024c:	8b 1d 30 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e130
c0010252:	53                   	push   ebx
c0010253:	e8 f5 fe ff ff       	call   c001014d <Phys::getPageState(unsigned long)>
c0010258:	59                   	pop    ecx
c0010259:	84 c0                	test   al,al
c001025b:	75 99                	jne    c00101f6 <Phys::allocatePage()+0x24>
c001025d:	6a 01                	push   0x1
c001025f:	53                   	push   ebx
c0010260:	e8 a8 fe ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c0010265:	8b 1d 3c e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e13c
c001026b:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c0010270:	83 c3 01             	add    ebx,0x1
c0010273:	5e                   	pop    esi
c0010274:	89 1d 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,ebx
c001027a:	c1 e0 0c             	shl    eax,0xc
c001027d:	5a                   	pop    edx
c001027e:	83 c4 14             	add    esp,0x14
c0010281:	5b                   	pop    ebx
c0010282:	5e                   	pop    esi
c0010283:	c3                   	ret    
c0010284:	83 ec 08             	sub    esp,0x8
c0010287:	8b 15 3c e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e13c
c001028d:	6a 01                	push   0x1
c001028f:	83 c2 01             	add    edx,0x1
c0010292:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010296:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c001029c:	89 c2                	mov    edx,eax
c001029e:	c1 ea 0c             	shr    edx,0xc
c00102a1:	52                   	push   edx
c00102a2:	e8 66 fe ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102ae:	eb ce                	jmp    c001027e <Phys::allocatePage()+0xac>

c00102b0 <Phys::allocateContiguousPages(int)>:
c00102b0:	57                   	push   edi
c00102b1:	56                   	push   esi
c00102b2:	53                   	push   ebx
c00102b3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00102b7:	fa                   	cli    
c00102b8:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00102be:	83 ec 0c             	sub    esp,0xc
c00102c1:	83 c2 01             	add    edx,0x1
c00102c4:	68 d0 3f 02 c0       	push   0xc0023fd0
c00102c9:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c00102cf:	31 db                	xor    ebx,ebx
c00102d1:	e8 8e 6c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00102d6:	83 c4 10             	add    esp,0x10
c00102d9:	85 db                	test   ebx,ebx
c00102db:	75 11                	jne    c00102ee <Phys::allocateContiguousPages(int)+0x3e>
c00102dd:	e8 f0 fe ff ff       	call   c00101d2 <Phys::allocatePage()>
c00102e2:	83 ff 01             	cmp    edi,0x1
c00102e5:	89 c6                	mov    esi,eax
c00102e7:	74 21                	je     c001030a <Phys::allocateContiguousPages(int)+0x5a>
c00102e9:	bb 01 00 00 00       	mov    ebx,0x1
c00102ee:	e8 df fe ff ff       	call   c00101d2 <Phys::allocatePage()>
c00102f3:	89 da                	mov    edx,ebx
c00102f5:	c1 e2 0c             	shl    edx,0xc
c00102f8:	01 f2                	add    edx,esi
c00102fa:	39 c2                	cmp    edx,eax
c00102fc:	74 24                	je     c0010322 <Phys::allocateContiguousPages(int)+0x72>
c00102fe:	bb 01 00 00 00       	mov    ebx,0x1
c0010303:	89 c6                	mov    esi,eax
c0010305:	83 ff 01             	cmp    edi,0x1
c0010308:	75 e4                	jne    c00102ee <Phys::allocateContiguousPages(int)+0x3e>
c001030a:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010312:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010317:	85 c0                	test   eax,eax
c0010319:	75 01                	jne    c001031c <Phys::allocateContiguousPages(int)+0x6c>
c001031b:	fb                   	sti    
c001031c:	89 f0                	mov    eax,esi
c001031e:	5b                   	pop    ebx
c001031f:	5e                   	pop    esi
c0010320:	5f                   	pop    edi
c0010321:	c3                   	ret    
c0010322:	83 c3 01             	add    ebx,0x1
c0010325:	39 fb                	cmp    ebx,edi
c0010327:	75 b0                	jne    c00102d9 <Phys::allocateContiguousPages(int)+0x29>
c0010329:	eb df                	jmp    c001030a <Phys::allocateContiguousPages(int)+0x5a>

c001032b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001032b:	56                   	push   esi
c001032c:	53                   	push   ebx
c001032d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010331:	39 1d 34 e1 02 c0    	cmp    DWORD PTR ds:0xc002e134,ebx
c0010337:	73 06                	jae    c001033f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010339:	89 1d 34 e1 02 c0    	mov    DWORD PTR ds:0xc002e134,ebx
c001033f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010343:	c1 eb 0c             	shr    ebx,0xc
c0010346:	c1 e8 0c             	shr    eax,0xc
c0010349:	39 d8                	cmp    eax,ebx
c001034b:	73 13                	jae    c0010360 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001034d:	6a 00                	push   0x0
c001034f:	8d 70 01             	lea    esi,[eax+0x1]
c0010352:	50                   	push   eax
c0010353:	e8 b5 fd ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c0010358:	5a                   	pop    edx
c0010359:	89 f0                	mov    eax,esi
c001035b:	59                   	pop    ecx
c001035c:	39 f3                	cmp    ebx,esi
c001035e:	75 ed                	jne    c001034d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010360:	5b                   	pop    ebx
c0010361:	5e                   	pop    esi
c0010362:	c3                   	ret    

c0010363 <Phys::physicalMemorySetup(unsigned int)>:
c0010363:	55                   	push   ebp
c0010364:	57                   	push   edi
c0010365:	56                   	push   esi
c0010366:	53                   	push   ebx
c0010367:	83 ec 40             	sub    esp,0x40
c001036a:	6a 10                	push   0x10
c001036c:	6a 00                	push   0x0
c001036e:	68 44 e1 02 c0       	push   0xc002e144
c0010373:	e8 78 01 ff ff       	call   c00004f0 <memset>
c0010378:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001037c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010381:	05 00 10 00 00       	add    eax,0x1000
c0010386:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001038a:	5b                   	pop    ebx
c001038b:	31 db                	xor    ebx,ebx
c001038d:	5e                   	pop    esi
c001038e:	50                   	push   eax
c001038f:	68 93 40 02 c0       	push   0xc0024093
c0010394:	e8 cb 6b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010399:	83 c4 10             	add    esp,0x10
c001039c:	83 ec 08             	sub    esp,0x8
c001039f:	6a 01                	push   0x1
c00103a1:	53                   	push   ebx
c00103a2:	83 c3 01             	add    ebx,0x1
c00103a5:	e8 63 fd ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c00103aa:	83 c4 10             	add    esp,0x10
c00103ad:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00103b3:	75 e7                	jne    c001039c <Phys::physicalMemorySetup(unsigned int)+0x39>
c00103b5:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00103bc:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00103c3:	c1 e0 08             	shl    eax,0x8
c00103c6:	09 c2                	or     edx,eax
c00103c8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00103cc:	0f 84 98 01 00 00    	je     c001056a <Phys::physicalMemorySetup(unsigned int)+0x207>
c00103d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103d6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00103de:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00103e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103e7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00103ef:	eb 1c                	jmp    c001040d <Phys::physicalMemorySetup(unsigned int)+0xaa>
c00103f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103f5:	83 c3 18             	add    ebx,0x18
c00103f8:	83 c6 01             	add    esi,0x1
c00103fb:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00103ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010403:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010407:	0f 84 6d 01 00 00    	je     c001057a <Phys::physicalMemorySetup(unsigned int)+0x217>
c001040d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010410:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010413:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001041a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001041e:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010420:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010423:	01 f0                	add    eax,esi
c0010425:	55                   	push   ebp
c0010426:	11 fa                	adc    edx,edi
c0010428:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001042c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010430:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010434:	51                   	push   ecx
c0010435:	56                   	push   esi
c0010436:	68 30 40 02 c0       	push   0xc0024030
c001043b:	e8 24 6b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010440:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010444:	83 c4 10             	add    esp,0x10
c0010447:	09 f8                	or     eax,edi
c0010449:	0f 85 2b 01 00 00    	jne    c001057a <Phys::physicalMemorySetup(unsigned int)+0x217>
c001044f:	83 fd 01             	cmp    ebp,0x1
c0010452:	75 9d                	jne    c00103f1 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010454:	ba 00 00 08 00       	mov    edx,0x80000
c0010459:	89 c1                	mov    ecx,eax
c001045b:	39 f2                	cmp    edx,esi
c001045d:	19 f9                	sbb    ecx,edi
c001045f:	0f 82 ab 00 00 00    	jb     c0010510 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0010465:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010469:	89 c1                	mov    ecx,eax
c001046b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001046f:	0f 83 9b 00 00 00    	jae    c0010510 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0010475:	ba 00 00 0a 00       	mov    edx,0xa0000
c001047a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001047e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010482:	39 fa                	cmp    edx,edi
c0010484:	19 e8                	sbb    eax,ebp
c0010486:	0f 82 b0 01 00 00    	jb     c001063c <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c001048c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010490:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010494:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001049a:	ba ff 1f 00 00       	mov    edx,0x1fff
c001049f:	83 d5 ff             	adc    ebp,0xffffffff
c00104a2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00104a6:	31 c0                	xor    eax,eax
c00104a8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00104ac:	39 fa                	cmp    edx,edi
c00104ae:	89 c1                	mov    ecx,eax
c00104b0:	19 e9                	sbb    ecx,ebp
c00104b2:	0f 83 39 ff ff ff    	jae    c00103f1 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00104b8:	be 00 00 08 00       	mov    esi,0x80000
c00104bd:	83 ec 04             	sub    esp,0x4
c00104c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00104c4:	57                   	push   edi
c00104c5:	56                   	push   esi
c00104c6:	68 54 40 02 c0       	push   0xc0024054
c00104cb:	e8 94 6a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00104d0:	5d                   	pop    ebp
c00104d1:	58                   	pop    eax
c00104d2:	57                   	push   edi
c00104d3:	56                   	push   esi
c00104d4:	e8 52 fe ff ff       	call   c001032b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00104d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00104dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104e1:	83 c4 0c             	add    esp,0xc
c00104e4:	0f ac d0 0c          	shrd   eax,edx,0xc
c00104e8:	8b 15 40 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e140
c00104ee:	01 d0                	add    eax,edx
c00104f0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104f7:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00104fc:	52                   	push   edx
c00104fd:	50                   	push   eax
c00104fe:	68 b9 40 02 c0       	push   0xc00240b9
c0010503:	e8 5c 6a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010508:	83 c4 10             	add    esp,0x10
c001050b:	e9 e1 fe ff ff       	jmp    c00103f1 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010510:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010514:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010518:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001051c:	39 ea                	cmp    edx,ebp
c001051e:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010522:	0f 82 c9 fe ff ff    	jb     c00103f1 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010528:	ba ff 1f 00 00       	mov    edx,0x1fff
c001052d:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010531:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010535:	0f 83 b6 fe ff ff    	jae    c00103f1 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001053b:	39 ee                	cmp    esi,ebp
c001053d:	89 f8                	mov    eax,edi
c001053f:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010543:	0f 83 74 ff ff ff    	jae    c00104bd <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0010549:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001054d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010551:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010555:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010559:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001055d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010561:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010565:	e9 53 ff ff ff       	jmp    c00104bd <Phys::physicalMemorySetup(unsigned int)+0x15a>
c001056a:	83 ec 0c             	sub    esp,0xc
c001056d:	68 ab 40 02 c0       	push   0xc00240ab
c0010572:	e8 67 fa ff ff       	call   c000ffde <KePanic(char const*)>
c0010577:	83 c4 10             	add    esp,0x10
c001057a:	83 ec 08             	sub    esp,0x8
c001057d:	bb 60 00 00 00       	mov    ebx,0x60
c0010582:	6a 00                	push   0x0
c0010584:	6a 06                	push   0x6
c0010586:	e8 82 fb ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c001058b:	58                   	pop    eax
c001058c:	5a                   	pop    edx
c001058d:	6a 00                	push   0x0
c001058f:	6a 07                	push   0x7
c0010591:	e8 77 fb ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c0010596:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c001059c:	83 c4 10             	add    esp,0x10
c001059f:	83 c1 02             	add    ecx,0x2
c00105a2:	89 0d 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,ecx
c00105a8:	83 ec 08             	sub    esp,0x8
c00105ab:	6a 00                	push   0x0
c00105ad:	53                   	push   ebx
c00105ae:	83 c3 01             	add    ebx,0x1
c00105b1:	e8 57 fb ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c00105b6:	83 c4 10             	add    esp,0x10
c00105b9:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00105bf:	75 e7                	jne    c00105a8 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00105c1:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00105c6:	bb 40 01 00 00       	mov    ebx,0x140
c00105cb:	83 c0 20             	add    eax,0x20
c00105ce:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00105d3:	eb 26                	jmp    c00105fb <Phys::physicalMemorySetup(unsigned int)+0x298>
c00105d5:	83 ec 08             	sub    esp,0x8
c00105d8:	6a 00                	push   0x0
c00105da:	53                   	push   ebx
c00105db:	83 c3 01             	add    ebx,0x1
c00105de:	e8 2a fb ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c00105e3:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00105e8:	83 c4 10             	add    esp,0x10
c00105eb:	83 c0 01             	add    eax,0x1
c00105ee:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00105f4:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00105f9:	74 07                	je     c0010602 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00105fb:	3d ff 03 00 00       	cmp    eax,0x3ff
c0010600:	7e d3                	jle    c00105d5 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0010602:	bb d0 01 00 00       	mov    ebx,0x1d0
c0010607:	3d ff 07 00 00       	cmp    eax,0x7ff
c001060c:	7f 26                	jg     c0010634 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c001060e:	83 ec 08             	sub    esp,0x8
c0010611:	6a 00                	push   0x0
c0010613:	53                   	push   ebx
c0010614:	83 c3 01             	add    ebx,0x1
c0010617:	e8 f1 fa ff ff       	call   c001010d <Phys::setPageState(unsigned long, bool)>
c001061c:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c0010621:	83 c4 10             	add    esp,0x10
c0010624:	83 c0 01             	add    eax,0x1
c0010627:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c001062d:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c0010632:	75 d3                	jne    c0010607 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0010634:	83 c4 3c             	add    esp,0x3c
c0010637:	5b                   	pop    ebx
c0010638:	5e                   	pop    esi
c0010639:	5f                   	pop    edi
c001063a:	5d                   	pop    ebp
c001063b:	c3                   	ret    
c001063c:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010644:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001064c:	e9 3b fe ff ff       	jmp    c001048c <Phys::physicalMemorySetup(unsigned int)+0x129>
c0010651:	90                   	nop

c0010652 <Pipe::isAtty()>:
c0010652:	31 c0                	xor    eax,eax
c0010654:	c3                   	ret    
c0010655:	90                   	nop

c0010656 <Pipe::~Pipe()>:
c0010656:	83 ec 0c             	sub    esp,0xc
c0010659:	ba 18 41 02 c0       	mov    edx,0xc0024118
c001065e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010662:	89 10                	mov    DWORD PTR [eax],edx
c0010664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010668:	83 ec 0c             	sub    esp,0xc
c001066b:	50                   	push   eax
c001066c:	e8 dd 2b 00 00       	call   c001324e <UnixFile::~UnixFile()>
c0010671:	83 c4 10             	add    esp,0x10
c0010674:	90                   	nop
c0010675:	83 c4 0c             	add    esp,0xc
c0010678:	c3                   	ret    
c0010679:	90                   	nop

c001067a <Pipe::~Pipe()>:
c001067a:	83 ec 0c             	sub    esp,0xc
c001067d:	83 ec 0c             	sub    esp,0xc
c0010680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010684:	e8 cd ff ff ff       	call   c0010656 <Pipe::~Pipe()>
c0010689:	83 c4 10             	add    esp,0x10
c001068c:	83 ec 08             	sub    esp,0x8
c001068f:	6a 20                	push   0x20
c0010691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010695:	e8 85 cc ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001069a:	83 c4 10             	add    esp,0x10
c001069d:	83 c4 0c             	add    esp,0xc
c00106a0:	c3                   	ret    
c00106a1:	90                   	nop

c00106a2 <Pipe::write(unsigned long long, void*, int*)>:
c00106a2:	55                   	push   ebp
c00106a3:	57                   	push   edi
c00106a4:	56                   	push   esi
c00106a5:	53                   	push   ebx
c00106a6:	83 ec 1c             	sub    esp,0x1c
c00106a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00106ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00106b1:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00106b4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00106b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00106bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106bf:	89 d8                	mov    eax,ebx
c00106c1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00106c4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00106c8:	89 d6                	mov    esi,edx
c00106ca:	89 d7                	mov    edi,edx
c00106cc:	c1 ff 1f             	sar    edi,0x1f
c00106cf:	03 34 24             	add    esi,DWORD PTR [esp]
c00106d2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00106d6:	c1 f8 1f             	sar    eax,0x1f
c00106d9:	39 f3                	cmp    ebx,esi
c00106db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106e3:	19 f8                	sbb    eax,edi
c00106e5:	b8 01 00 00 00       	mov    eax,0x1
c00106ea:	72 6e                	jb     c001075a <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00106ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00106ef:	01 d0                	add    eax,edx
c00106f1:	99                   	cdq    
c00106f2:	f7 fb                	idiv   ebx
c00106f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f8:	29 d3                	sub    ebx,edx
c00106fa:	89 d7                	mov    edi,edx
c00106fc:	89 de                	mov    esi,ebx
c00106fe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010701:	c1 fb 1f             	sar    ebx,0x1f
c0010704:	39 f2                	cmp    edx,esi
c0010706:	19 d8                	sbb    eax,ebx
c0010708:	b8 00 00 00 00       	mov    eax,0x0
c001070d:	72 04                	jb     c0010713 <Pipe::write(unsigned long long, void*, int*)+0x71>
c001070f:	89 d0                	mov    eax,edx
c0010711:	29 f0                	sub    eax,esi
c0010713:	89 d3                	mov    ebx,edx
c0010715:	29 c3                	sub    ebx,eax
c0010717:	74 0b                	je     c0010724 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010719:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001071c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010720:	89 d9                	mov    ecx,ebx
c0010722:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010724:	85 c0                	test   eax,eax
c0010726:	74 0d                	je     c0010735 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010728:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001072c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001072f:	89 de                	mov    esi,ebx
c0010731:	89 c1                	mov    ecx,eax
c0010733:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010735:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010738:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001073d:	75 10                	jne    c001074f <Pipe::write(unsigned long long, void*, int*)+0xad>
c001073f:	83 ec 0c             	sub    esp,0xc
c0010742:	68 d5 40 02 c0       	push   0xc00240d5
c0010747:	e8 92 f8 ff ff       	call   c000ffde <KePanic(char const*)>
c001074c:	83 c4 10             	add    esp,0x10
c001074f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010753:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010756:	89 08                	mov    DWORD PTR [eax],ecx
c0010758:	31 c0                	xor    eax,eax
c001075a:	83 c4 1c             	add    esp,0x1c
c001075d:	5b                   	pop    ebx
c001075e:	5e                   	pop    esi
c001075f:	5f                   	pop    edi
c0010760:	5d                   	pop    ebp
c0010761:	c3                   	ret    

c0010762 <Pipe::read(unsigned long long, void*, int*)>:
c0010762:	55                   	push   ebp
c0010763:	57                   	push   edi
c0010764:	56                   	push   esi
c0010765:	53                   	push   ebx
c0010766:	83 ec 1c             	sub    esp,0x1c
c0010769:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001076d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010771:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010775:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010778:	89 c8                	mov    eax,ecx
c001077a:	99                   	cdq    
c001077b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001077f:	74 27                	je     c00107a8 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010781:	39 f9                	cmp    ecx,edi
c0010783:	89 d1                	mov    ecx,edx
c0010785:	19 f1                	sbb    ecx,esi
c0010787:	73 1f                	jae    c00107a8 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010789:	fa                   	cli    
c001078a:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0010790:	e8 97 67 00 00       	call   c0016f2c <schedule()>
c0010795:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001079c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00107a3:	75 d0                	jne    c0010775 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00107a5:	fb                   	sti    
c00107a6:	eb cd                	jmp    c0010775 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00107a8:	39 f8                	cmp    eax,edi
c00107aa:	89 d1                	mov    ecx,edx
c00107ac:	89 3c 24             	mov    DWORD PTR [esp],edi
c00107af:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00107b3:	19 f1                	sbb    ecx,esi
c00107b5:	73 07                	jae    c00107be <Pipe::read(unsigned long long, void*, int*)+0x5c>
c00107b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00107ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00107be:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00107c1:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00107c4:	29 f7                	sub    edi,esi
c00107c6:	89 f8                	mov    eax,edi
c00107c8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00107cc:	99                   	cdq    
c00107cd:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00107d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d4:	19 d0                	sbb    eax,edx
c00107d6:	73 07                	jae    c00107df <Pipe::read(unsigned long long, void*, int*)+0x7d>
c00107d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00107db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107df:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00107e2:	89 ea                	mov    edx,ebp
c00107e4:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00107e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00107ed:	74 0d                	je     c00107fc <Pipe::read(unsigned long long, void*, int*)+0x9a>
c00107ef:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00107f2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00107f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00107fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107fc:	85 d2                	test   edx,edx
c00107fe:	74 11                	je     c0010811 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010800:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010804:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010807:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001080b:	89 d1                	mov    ecx,edx
c001080d:	89 c7                	mov    edi,eax
c001080f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010811:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010814:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010817:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001081a:	99                   	cdq    
c001081b:	89 f7                	mov    edi,esi
c001081d:	03 04 24             	add    eax,DWORD PTR [esp]
c0010820:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010824:	c1 ff 1f             	sar    edi,0x1f
c0010827:	57                   	push   edi
c0010828:	56                   	push   esi
c0010829:	52                   	push   edx
c001082a:	50                   	push   eax
c001082b:	e8 54 11 01 00       	call   c0021984 <__umoddi3>
c0010830:	83 c4 10             	add    esp,0x10
c0010833:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010836:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001083b:	75 10                	jne    c001084d <Pipe::read(unsigned long long, void*, int*)+0xeb>
c001083d:	83 ec 0c             	sub    esp,0xc
c0010840:	68 f2 40 02 c0       	push   0xc00240f2
c0010845:	e8 94 f7 ff ff       	call   c000ffde <KePanic(char const*)>
c001084a:	83 c4 10             	add    esp,0x10
c001084d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010851:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010854:	89 10                	mov    DWORD PTR [eax],edx
c0010856:	83 c4 1c             	add    esp,0x1c
c0010859:	31 c0                	xor    eax,eax
c001085b:	5b                   	pop    ebx
c001085c:	5e                   	pop    esi
c001085d:	5f                   	pop    edi
c001085e:	5d                   	pop    ebp
c001085f:	c3                   	ret    

c0010860 <Pipe::Pipe(int)>:
c0010860:	83 ec 0c             	sub    esp,0xc
c0010863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010867:	83 ec 08             	sub    esp,0x8
c001086a:	6a 00                	push   0x0
c001086c:	50                   	push   eax
c001086d:	e8 f6 27 00 00       	call   c0013068 <UnixFile::UnixFile(int)>
c0010872:	83 c4 10             	add    esp,0x10
c0010875:	ba 18 41 02 c0       	mov    edx,0xc0024118
c001087a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087e:	89 10                	mov    DWORD PTR [eax],edx
c0010880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010884:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010888:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001088b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00108a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108a5:	83 ec 0c             	sub    esp,0xc
c00108a8:	50                   	push   eax
c00108a9:	e8 e9 f3 ff ff       	call   c000fc97 <malloc>
c00108ae:	83 c4 10             	add    esp,0x10
c00108b1:	89 c2                	mov    edx,eax
c00108b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108be:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00108c2:	90                   	nop
c00108c3:	83 c4 0c             	add    esp,0xc
c00108c6:	c3                   	ret    

c00108c7 <KePowerThread(void*)>:
c00108c7:	83 ec 0c             	sub    esp,0xc
c00108ca:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00108d1:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00108d8:	75 01                	jne    c00108db <KePowerThread(void*)+0x14>
c00108da:	fb                   	sti    
c00108db:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c00108e2:	50                   	push   eax
c00108e3:	50                   	push   eax
c00108e4:	6a 00                	push   0x0
c00108e6:	6a 0a                	push   0xa
c00108e8:	e8 4b 68 00 00       	call   c0017138 <sleep(unsigned long long)>
c00108ed:	83 05 a4 e1 02 c0 0a 	add    DWORD PTR ds:0xc002e1a4,0xa
c00108f4:	83 c4 10             	add    esp,0x10
c00108f7:	eb e2                	jmp    c00108db <KePowerThread(void*)+0x14>

c00108f9 <KeChangePowerSettings(PowerSettings)>:
c00108f9:	57                   	push   edi
c00108fa:	b9 09 00 00 00       	mov    ecx,0x9
c00108ff:	56                   	push   esi
c0010900:	bf 80 e1 02 c0       	mov    edi,0xc002e180
c0010905:	fc                   	cld    
c0010906:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001090a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001090c:	5e                   	pop    esi
c001090d:	5f                   	pop    edi
c001090e:	c3                   	ret    

c001090f <KeUserIOReceived()>:
c001090f:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c0010919:	c3                   	ret    

c001091a <KeHandlePowerButton()>:
c001091a:	a1 80 e1 02 c0       	mov    eax,ds:0xc002e180
c001091f:	83 f8 02             	cmp    eax,0x2
c0010922:	75 05                	jne    c0010929 <KeHandlePowerButton()+0xf>
c0010924:	e9 33 da ff ff       	jmp    c000e35c <KeShutdown()>
c0010929:	48                   	dec    eax
c001092a:	75 05                	jne    c0010931 <KeHandlePowerButton()+0x17>
c001092c:	e9 4f da ff ff       	jmp    c000e380 <KeSleep()>
c0010931:	c3                   	ret    

c0010932 <KeHandleSleepButton()>:
c0010932:	a1 84 e1 02 c0       	mov    eax,ds:0xc002e184
c0010937:	83 f8 02             	cmp    eax,0x2
c001093a:	75 05                	jne    c0010941 <KeHandleSleepButton()+0xf>
c001093c:	e9 1b da ff ff       	jmp    c000e35c <KeShutdown()>
c0010941:	48                   	dec    eax
c0010942:	75 05                	jne    c0010949 <KeHandleSleepButton()+0x17>
c0010944:	e9 37 da ff ff       	jmp    c000e380 <KeSleep()>
c0010949:	c3                   	ret    

c001094a <KeSetupPowerManager()>:
c001094a:	83 ec 0c             	sub    esp,0xc
c001094d:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c0010957:	68 f0 00 00 00       	push   0xf0
c001095c:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c0010963:	6a 00                	push   0x0
c0010965:	68 c7 08 01 c0       	push   0xc00108c7
c001096a:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0010970:	e8 1f 63 00 00       	call   c0016c94 <Process::createThread(void (*)(void*), void*, int)>
c0010975:	c7 05 80 e1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002e180,0x2
c001097f:	c7 05 84 e1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e184,0x1
c0010989:	c7 05 88 e1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002e188,0x3
c0010993:	c7 05 8c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e18c,0x0
c001099d:	c7 05 98 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e198,0x0
c00109a7:	c7 05 90 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e190,0x0
c00109b1:	c7 05 9c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e19c,0x0
c00109bb:	c7 05 94 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e194,0x3c
c00109c5:	c7 05 a0 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e1a0,0x3c
c00109cf:	83 c4 1c             	add    esp,0x1c
c00109d2:	c3                   	ret    

c00109d3 <KeRand()>:
c00109d3:	69 05 a8 e1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002e1a8,0x2875
c00109dd:	69 0d ac e1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002e1ac,0xa2e7b175
c00109e7:	53                   	push   ebx
c00109e8:	01 c1                	add    ecx,eax
c00109ea:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00109ef:	f7 25 a8 e1 02 c0    	mul    DWORD PTR ds:0xc002e1a8
c00109f5:	01 ca                	add    edx,ecx
c00109f7:	05 ef 04 b5 00       	add    eax,0xb504ef
c00109fc:	83 d2 00             	adc    edx,0x0
c00109ff:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c0010a04:	0f b7 da             	movzx  ebx,dx
c0010a07:	89 da                	mov    edx,ebx
c0010a09:	89 1d ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,ebx
c0010a0f:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010a13:	5b                   	pop    ebx
c0010a14:	c3                   	ret    

c0010a15 <KeSeedRand(unsigned int)>:
c0010a15:	53                   	push   ebx
c0010a16:	83 ec 08             	sub    esp,0x8
c0010a19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a1d:	e8 db 97 00 00       	call   c001a1fd <HalGetRand()>
c0010a22:	c7 05 ac e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1ac,0x0
c0010a2c:	31 d8                	xor    eax,ebx
c0010a2e:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c0010a33:	e8 9b ff ff ff       	call   c00109d3 <KeRand()>
c0010a38:	83 c4 08             	add    esp,0x8
c0010a3b:	5b                   	pop    ebx
c0010a3c:	eb 95                	jmp    c00109d3 <KeRand()>

c0010a3e <KeInitRand()>:
c0010a3e:	83 ec 0c             	sub    esp,0xc
c0010a41:	e8 db 95 00 00       	call   c001a021 <HalQueryPerformanceCounter()>
c0010a46:	0f 20 da             	mov    edx,cr3
c0010a49:	0f 22 da             	mov    cr3,edx
c0010a4c:	0f 20 da             	mov    edx,cr3
c0010a4f:	0f 22 da             	mov    cr3,edx
c0010a52:	0f 20 da             	mov    edx,cr3
c0010a55:	0f 22 da             	mov    cr3,edx
c0010a58:	0f 20 da             	mov    edx,cr3
c0010a5b:	0f 22 da             	mov    cr3,edx
c0010a5e:	83 ec 0c             	sub    esp,0xc
c0010a61:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a66:	50                   	push   eax
c0010a67:	e8 a9 ff ff ff       	call   c0010a15 <KeSeedRand(unsigned int)>
c0010a6c:	83 c4 1c             	add    esp,0x1c
c0010a6f:	c3                   	ret    

c0010a70 <KeResolveCompatibilitySymbol(char*)>:
c0010a70:	83 ec 0c             	sub    esp,0xc
c0010a73:	83 ec 08             	sub    esp,0x8
c0010a76:	68 2c 41 02 c0       	push   0xc002412c
c0010a7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a7f:	e8 cc fc fe ff       	call   c0000750 <strcmp>
c0010a84:	83 c4 10             	add    esp,0x10
c0010a87:	85 c0                	test   eax,eax
c0010a89:	0f 94 c0             	sete   al
c0010a8c:	0f b6 c0             	movzx  eax,al
c0010a8f:	85 c0                	test   eax,eax
c0010a91:	74 0d                	je     c0010aa0 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a93:	b8 d0 c0 02 c0       	mov    eax,0xc002c0d0
c0010a98:	e9 8b 01 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010aa0:	83 ec 08             	sub    esp,0x8
c0010aa3:	68 35 41 02 c0       	push   0xc0024135
c0010aa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aac:	e8 9f fc fe ff       	call   c0000750 <strcmp>
c0010ab1:	83 c4 10             	add    esp,0x10
c0010ab4:	85 c0                	test   eax,eax
c0010ab6:	0f 94 c0             	sete   al
c0010ab9:	0f b6 c0             	movzx  eax,al
c0010abc:	85 c0                	test   eax,eax
c0010abe:	74 0c                	je     c0010acc <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010ac0:	b8 84 18 02 c0       	mov    eax,0xc0021884
c0010ac5:	e9 5e 01 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aca:	66 90                	xchg   ax,ax
c0010acc:	83 ec 08             	sub    esp,0x8
c0010acf:	68 3f 41 02 c0       	push   0xc002413f
c0010ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ad8:	e8 73 fc fe ff       	call   c0000750 <strcmp>
c0010add:	83 c4 10             	add    esp,0x10
c0010ae0:	85 c0                	test   eax,eax
c0010ae2:	0f 94 c0             	sete   al
c0010ae5:	0f b6 c0             	movzx  eax,al
c0010ae8:	85 c0                	test   eax,eax
c0010aea:	74 0c                	je     c0010af8 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010aec:	b8 b8 15 02 c0       	mov    eax,0xc00215b8
c0010af1:	e9 32 01 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010af6:	66 90                	xchg   ax,ax
c0010af8:	83 ec 08             	sub    esp,0x8
c0010afb:	68 48 41 02 c0       	push   0xc0024148
c0010b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b04:	e8 47 fc fe ff       	call   c0000750 <strcmp>
c0010b09:	83 c4 10             	add    esp,0x10
c0010b0c:	85 c0                	test   eax,eax
c0010b0e:	0f 94 c0             	sete   al
c0010b11:	0f b6 c0             	movzx  eax,al
c0010b14:	85 c0                	test   eax,eax
c0010b16:	74 0c                	je     c0010b24 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010b18:	b8 de ff 00 c0       	mov    eax,0xc000ffde
c0010b1d:	e9 06 01 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b22:	66 90                	xchg   ax,ax
c0010b24:	83 ec 08             	sub    esp,0x8
c0010b27:	68 5b 41 02 c0       	push   0xc002415b
c0010b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b30:	e8 1b fc fe ff       	call   c0000750 <strcmp>
c0010b35:	83 c4 10             	add    esp,0x10
c0010b38:	85 c0                	test   eax,eax
c0010b3a:	0f 94 c0             	sete   al
c0010b3d:	0f b6 c0             	movzx  eax,al
c0010b40:	85 c0                	test   eax,eax
c0010b42:	74 0c                	je     c0010b50 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010b44:	b8 5f d2 00 c0       	mov    eax,0xc000d25f
c0010b49:	e9 da 00 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b4e:	66 90                	xchg   ax,ax
c0010b50:	83 ec 08             	sub    esp,0x8
c0010b53:	68 78 41 02 c0       	push   0xc0024178
c0010b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b5c:	e8 ef fb fe ff       	call   c0000750 <strcmp>
c0010b61:	83 c4 10             	add    esp,0x10
c0010b64:	85 c0                	test   eax,eax
c0010b66:	0f 94 c0             	sete   al
c0010b69:	0f b6 c0             	movzx  eax,al
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	74 0c                	je     c0010b7c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b70:	b8 84 19 02 c0       	mov    eax,0xc0021984
c0010b75:	e9 ae 00 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b7a:	66 90                	xchg   ax,ax
c0010b7c:	83 ec 08             	sub    esp,0x8
c0010b7f:	68 82 41 02 c0       	push   0xc0024182
c0010b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b88:	e8 c3 fb fe ff       	call   c0000750 <strcmp>
c0010b8d:	83 c4 10             	add    esp,0x10
c0010b90:	85 c0                	test   eax,eax
c0010b92:	0f 94 c0             	sete   al
c0010b95:	0f b6 c0             	movzx  eax,al
c0010b98:	85 c0                	test   eax,eax
c0010b9a:	74 0c                	je     c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b9c:	b8 04 17 02 c0       	mov    eax,0xc0021704
c0010ba1:	e9 82 00 00 00       	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ba6:	66 90                	xchg   ax,ax
c0010ba8:	83 ec 08             	sub    esp,0x8
c0010bab:	68 8b 41 02 c0       	push   0xc002418b
c0010bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb4:	e8 97 fb fe ff       	call   c0000750 <strcmp>
c0010bb9:	83 c4 10             	add    esp,0x10
c0010bbc:	85 c0                	test   eax,eax
c0010bbe:	0f 94 c0             	sete   al
c0010bc1:	0f b6 c0             	movzx  eax,al
c0010bc4:	85 c0                	test   eax,eax
c0010bc6:	74 08                	je     c0010bd0 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010bc8:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c0010bcd:	eb 59                	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bcf:	90                   	nop
c0010bd0:	83 ec 08             	sub    esp,0x8
c0010bd3:	68 a3 41 02 c0       	push   0xc00241a3
c0010bd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bdc:	e8 6f fb fe ff       	call   c0000750 <strcmp>
c0010be1:	83 c4 10             	add    esp,0x10
c0010be4:	85 c0                	test   eax,eax
c0010be6:	0f 94 c0             	sete   al
c0010be9:	0f b6 c0             	movzx  eax,al
c0010bec:	85 c0                	test   eax,eax
c0010bee:	74 08                	je     c0010bf8 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010bf0:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c0010bf5:	eb 31                	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bf7:	90                   	nop
c0010bf8:	83 ec 08             	sub    esp,0x8
c0010bfb:	68 b0 41 02 c0       	push   0xc00241b0
c0010c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c04:	e8 47 fb fe ff       	call   c0000750 <strcmp>
c0010c09:	83 c4 10             	add    esp,0x10
c0010c0c:	85 c0                	test   eax,eax
c0010c0e:	0f 94 c0             	sete   al
c0010c11:	0f b6 c0             	movzx  eax,al
c0010c14:	85 c0                	test   eax,eax
c0010c16:	74 08                	je     c0010c20 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010c18:	b8 d5 c0 02 c0       	mov    eax,0xc002c0d5
c0010c1d:	eb 09                	jmp    c0010c28 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c1f:	90                   	nop
c0010c20:	b8 00 00 00 00       	mov    eax,0x0
c0010c25:	8d 76 00             	lea    esi,[esi+0x0]
c0010c28:	83 c4 0c             	add    esp,0xc
c0010c2b:	c3                   	ret    

c0010c2c <Semaphore::Semaphore(int)>:
c0010c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c34:	89 10                	mov    DWORD PTR [eax],edx
c0010c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c3a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010c41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c45:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c50:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010c57:	90                   	nop
c0010c58:	c3                   	ret    
c0010c59:	90                   	nop
c0010c5a:	66 90                	xchg   ax,ax

c0010c5c <Semaphore::tryAcquire()>:
c0010c5c:	83 ec 0c             	sub    esp,0xc
c0010c5f:	fa                   	cli    
c0010c60:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010c65:	83 c0 01             	add    eax,0x1
c0010c68:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010c6d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010c72:	83 c0 01             	add    eax,0x1
c0010c75:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c7e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c85:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c87:	39 c2                	cmp    edx,eax
c0010c89:	7d 59                	jge    c0010ce4 <Semaphore::tryAcquire()+0x88>
c0010c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c8f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c92:	8d 50 01             	lea    edx,[eax+0x1]
c0010c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c99:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c9c:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ca1:	83 e8 01             	sub    eax,0x1
c0010ca4:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010ca9:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010cae:	85 c0                	test   eax,eax
c0010cb0:	75 1a                	jne    c0010ccc <Semaphore::tryAcquire()+0x70>
c0010cb2:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010cb7:	85 c0                	test   eax,eax
c0010cb9:	74 11                	je     c0010ccc <Semaphore::tryAcquire()+0x70>
c0010cbb:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010cc5:	e8 62 62 00 00       	call   c0016f2c <schedule()>
c0010cca:	66 90                	xchg   ax,ax
c0010ccc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010cd4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010cd9:	85 c0                	test   eax,eax
c0010cdb:	75 03                	jne    c0010ce0 <Semaphore::tryAcquire()+0x84>
c0010cdd:	fb                   	sti    
c0010cde:	66 90                	xchg   ax,ax
c0010ce0:	b0 01                	mov    al,0x1
c0010ce2:	eb 48                	jmp    c0010d2c <Semaphore::tryAcquire()+0xd0>
c0010ce4:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ce9:	83 e8 01             	sub    eax,0x1
c0010cec:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010cf1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010cf6:	85 c0                	test   eax,eax
c0010cf8:	75 1a                	jne    c0010d14 <Semaphore::tryAcquire()+0xb8>
c0010cfa:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010cff:	85 c0                	test   eax,eax
c0010d01:	74 11                	je     c0010d14 <Semaphore::tryAcquire()+0xb8>
c0010d03:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010d0d:	e8 1a 62 00 00       	call   c0016f2c <schedule()>
c0010d12:	66 90                	xchg   ax,ax
c0010d14:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010d1c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010d21:	85 c0                	test   eax,eax
c0010d23:	75 03                	jne    c0010d28 <Semaphore::tryAcquire()+0xcc>
c0010d25:	fb                   	sti    
c0010d26:	66 90                	xchg   ax,ax
c0010d28:	b0 00                	mov    al,0x0
c0010d2a:	66 90                	xchg   ax,ax
c0010d2c:	83 c4 0c             	add    esp,0xc
c0010d2f:	c3                   	ret    

c0010d30 <Semaphore::assertLocked(char const*)>:
c0010d30:	83 ec 0c             	sub    esp,0xc
c0010d33:	fa                   	cli    
c0010d34:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010d39:	83 c0 01             	add    eax,0x1
c0010d3c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010d41:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d46:	83 c0 01             	add    eax,0x1
c0010d49:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d52:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d5b:	39 c2                	cmp    edx,eax
c0010d5d:	7d 11                	jge    c0010d70 <Semaphore::assertLocked(char const*)+0x40>
c0010d5f:	83 ec 0c             	sub    esp,0xc
c0010d62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d66:	e8 73 f2 ff ff       	call   c000ffde <KePanic(char const*)>
c0010d6b:	83 c4 10             	add    esp,0x10
c0010d6e:	66 90                	xchg   ax,ax
c0010d70:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d75:	83 e8 01             	sub    eax,0x1
c0010d78:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010d7d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d82:	85 c0                	test   eax,eax
c0010d84:	75 1a                	jne    c0010da0 <Semaphore::assertLocked(char const*)+0x70>
c0010d86:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010d8b:	85 c0                	test   eax,eax
c0010d8d:	74 11                	je     c0010da0 <Semaphore::assertLocked(char const*)+0x70>
c0010d8f:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010d99:	e8 8e 61 00 00       	call   c0016f2c <schedule()>
c0010d9e:	66 90                	xchg   ax,ax
c0010da0:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010da8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010dad:	85 c0                	test   eax,eax
c0010daf:	75 03                	jne    c0010db4 <Semaphore::assertLocked(char const*)+0x84>
c0010db1:	fb                   	sti    
c0010db2:	66 90                	xchg   ax,ax
c0010db4:	90                   	nop
c0010db5:	83 c4 0c             	add    esp,0xc
c0010db8:	c3                   	ret    
c0010db9:	90                   	nop
c0010dba:	66 90                	xchg   ax,ax

c0010dbc <Semaphore::acquire(int)>:
c0010dbc:	83 ec 1c             	sub    esp,0x1c
c0010dbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010dc4:	0f 84 ae 00 00 00    	je     c0010e78 <Semaphore::acquire(int)+0xbc>
c0010dca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010dd2:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010dd7:	90                   	nop
c0010dd8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010ddd:	85 c0                	test   eax,eax
c0010ddf:	0f 84 87 00 00 00    	je     c0010e6c <Semaphore::acquire(int)+0xb0>
c0010de5:	83 ec 0c             	sub    esp,0xc
c0010de8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dec:	e8 6b fe ff ff       	call   c0010c5c <Semaphore::tryAcquire()>
c0010df1:	83 c4 10             	add    esp,0x10
c0010df4:	83 f0 01             	xor    eax,0x1
c0010df7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010dfb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010dff:	83 f0 01             	xor    eax,0x1
c0010e02:	0f b6 c0             	movzx  eax,al
c0010e05:	85 c0                	test   eax,eax
c0010e07:	75 5f                	jne    c0010e68 <Semaphore::acquire(int)+0xac>
c0010e09:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010e0e:	7f 34                	jg     c0010e44 <Semaphore::acquire(int)+0x88>
c0010e10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010e14:	89 d0                	mov    eax,edx
c0010e16:	c1 e0 02             	shl    eax,0x2
c0010e19:	01 d0                	add    eax,edx
c0010e1b:	01 c0                	add    eax,eax
c0010e1d:	89 c2                	mov    edx,eax
c0010e1f:	c1 fa 1f             	sar    edx,0x1f
c0010e22:	83 ec 08             	sub    esp,0x8
c0010e25:	52                   	push   edx
c0010e26:	50                   	push   eax
c0010e27:	e8 f4 62 00 00       	call   c0017120 <milliTenthSleep(unsigned long long)>
c0010e2c:	83 c4 10             	add    esp,0x10
c0010e2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e33:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010e37:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010e3f:	eb 97                	jmp    c0010dd8 <Semaphore::acquire(int)+0x1c>
c0010e41:	8d 76 00             	lea    esi,[esi+0x0]
c0010e44:	83 ec 08             	sub    esp,0x8
c0010e47:	6a 00                	push   0x0
c0010e49:	68 90 01 00 00       	push   0x190
c0010e4e:	e8 cd 62 00 00       	call   c0017120 <milliTenthSleep(unsigned long long)>
c0010e53:	83 c4 10             	add    esp,0x10
c0010e56:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010e5b:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010e60:	e9 73 ff ff ff       	jmp    c0010dd8 <Semaphore::acquire(int)+0x1c>
c0010e65:	8d 76 00             	lea    esi,[esi+0x0]
c0010e68:	90                   	nop
c0010e69:	8d 76 00             	lea    esi,[esi+0x0]
c0010e6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e70:	e9 fb 00 00 00       	jmp    c0010f70 <Semaphore::acquire(int)+0x1b4>
c0010e75:	8d 76 00             	lea    esi,[esi+0x0]
c0010e78:	fa                   	cli    
c0010e79:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010e7e:	83 c0 01             	add    eax,0x1
c0010e81:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010e86:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010e8b:	83 c0 01             	add    eax,0x1
c0010e8e:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010e93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e97:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010e9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ea0:	39 c2                	cmp    edx,eax
c0010ea2:	7d 14                	jge    c0010eb8 <Semaphore::acquire(int)+0xfc>
c0010ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ea8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010eab:	8d 50 01             	lea    edx,[eax+0x1]
c0010eae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010eb5:	eb 6d                	jmp    c0010f24 <Semaphore::acquire(int)+0x168>
c0010eb7:	90                   	nop
c0010eb8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010ebd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ebf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ecd:	85 c0                	test   eax,eax
c0010ecf:	75 13                	jne    c0010ee4 <Semaphore::acquire(int)+0x128>
c0010ed1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010ed6:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010edc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010edf:	eb 17                	jmp    c0010ef8 <Semaphore::acquire(int)+0x13c>
c0010ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ee4:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010ee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010ef0:	8b 12                	mov    edx,DWORD PTR [edx]
c0010ef2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ef8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010efd:	8b 10                	mov    edx,DWORD PTR [eax]
c0010eff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f03:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f06:	83 ec 0c             	sub    esp,0xc
c0010f09:	68 c0 41 02 c0       	push   0xc00241c0
c0010f0e:	e8 51 60 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010f13:	83 c4 10             	add    esp,0x10
c0010f16:	83 ec 0c             	sub    esp,0xc
c0010f19:	6a 05                	push   0x5
c0010f1b:	e8 cc 60 00 00       	call   c0016fec <blockTask(TaskState)>
c0010f20:	83 c4 10             	add    esp,0x10
c0010f23:	90                   	nop
c0010f24:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010f29:	83 e8 01             	sub    eax,0x1
c0010f2c:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010f31:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010f36:	85 c0                	test   eax,eax
c0010f38:	75 1a                	jne    c0010f54 <Semaphore::acquire(int)+0x198>
c0010f3a:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010f3f:	85 c0                	test   eax,eax
c0010f41:	74 11                	je     c0010f54 <Semaphore::acquire(int)+0x198>
c0010f43:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010f4d:	e8 da 5f 00 00       	call   c0016f2c <schedule()>
c0010f52:	66 90                	xchg   ax,ax
c0010f54:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010f5c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010f61:	85 c0                	test   eax,eax
c0010f63:	75 03                	jne    c0010f68 <Semaphore::acquire(int)+0x1ac>
c0010f65:	fb                   	sti    
c0010f66:	66 90                	xchg   ax,ax
c0010f68:	b8 00 00 00 00       	mov    eax,0x0
c0010f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0010f70:	83 c4 1c             	add    esp,0x1c
c0010f73:	c3                   	ret    

c0010f74 <Semaphore::acquire()>:
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	83 ec 08             	sub    esp,0x8
c0010f7a:	6a 00                	push   0x0
c0010f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f80:	e8 37 fe ff ff       	call   c0010dbc <Semaphore::acquire(int)>
c0010f85:	83 c4 10             	add    esp,0x10
c0010f88:	90                   	nop
c0010f89:	83 c4 0c             	add    esp,0xc
c0010f8c:	c3                   	ret    
c0010f8d:	90                   	nop
c0010f8e:	66 90                	xchg   ax,ax

c0010f90 <Semaphore::release()>:
c0010f90:	83 ec 1c             	sub    esp,0x1c
c0010f93:	fa                   	cli    
c0010f94:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010f99:	83 c0 01             	add    eax,0x1
c0010f9c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010fa1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010fa6:	83 c0 01             	add    eax,0x1
c0010fa9:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010fae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb5:	85 c0                	test   eax,eax
c0010fb7:	74 2b                	je     c0010fe4 <Semaphore::release()+0x54>
c0010fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010fc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fc8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fcf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fd2:	83 ec 0c             	sub    esp,0xc
c0010fd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fd9:	e8 aa 62 00 00       	call   c0017288 <unblockTask(ThreadControlBlock*)>
c0010fde:	83 c4 10             	add    esp,0x10
c0010fe1:	eb 15                	jmp    c0010ff8 <Semaphore::release()+0x68>
c0010fe3:	90                   	nop
c0010fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fe8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010feb:	8d 50 ff             	lea    edx,[eax-0x1]
c0010fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ff2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ff8:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ffd:	83 e8 01             	sub    eax,0x1
c0011000:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0011005:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c001100a:	85 c0                	test   eax,eax
c001100c:	75 1a                	jne    c0011028 <Semaphore::release()+0x98>
c001100e:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0011013:	85 c0                	test   eax,eax
c0011015:	74 11                	je     c0011028 <Semaphore::release()+0x98>
c0011017:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0011021:	e8 06 5f 00 00       	call   c0016f2c <schedule()>
c0011026:	66 90                	xchg   ax,ax
c0011028:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0011030:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0011035:	85 c0                	test   eax,eax
c0011037:	75 03                	jne    c001103c <Semaphore::release()+0xac>
c0011039:	fb                   	sti    
c001103a:	66 90                	xchg   ax,ax
c001103c:	90                   	nop
c001103d:	83 c4 1c             	add    esp,0x1c
c0011040:	c3                   	ret    

c0011041 <KiSigKill(int)>:
c0011041:	83 ec 0c             	sub    esp,0xc
c0011044:	6a 00                	push   0x0
c0011046:	6a 00                	push   0x0
c0011048:	6a ff                	push   0xffffffff
c001104a:	6a 01                	push   0x1
c001104c:	e8 01 60 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011051:	83 c4 1c             	add    esp,0x1c
c0011054:	c3                   	ret    

c0011055 <KiDefaultSignalHandlerIgnore(int)>:
c0011055:	c3                   	ret    

c0011056 <KiDefaultSignalHandlerPause(int)>:
c0011056:	57                   	push   edi
c0011057:	b9 07 00 00 00       	mov    ecx,0x7
c001105c:	56                   	push   esi
c001105d:	be 1b 42 02 c0       	mov    esi,0xc002421b
c0011062:	83 ec 24             	sub    esp,0x24
c0011065:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011069:	fc                   	cld    
c001106a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001106c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011070:	50                   	push   eax
c0011071:	6a 00                	push   0x0
c0011073:	6a 00                	push   0x0
c0011075:	6a 27                	push   0x27
c0011077:	e8 d6 5f 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001107c:	83 c4 34             	add    esp,0x34
c001107f:	5e                   	pop    esi
c0011080:	5f                   	pop    edi
c0011081:	c3                   	ret    

c0011082 <KiDefaultSignalHandlerResume(int)>:
c0011082:	57                   	push   edi
c0011083:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011088:	56                   	push   esi
c0011089:	be 37 42 02 c0       	mov    esi,0xc0024237
c001108e:	83 ec 24             	sub    esp,0x24
c0011091:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011095:	fc                   	cld    
c0011096:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011098:	8d 44 24 03          	lea    eax,[esp+0x3]
c001109c:	50                   	push   eax
c001109d:	6a 00                	push   0x0
c001109f:	6a 00                	push   0x0
c00110a1:	6a 27                	push   0x27
c00110a3:	e8 aa 5f 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00110a8:	83 c4 34             	add    esp,0x34
c00110ab:	5e                   	pop    esi
c00110ac:	5f                   	pop    edi
c00110ad:	c3                   	ret    

c00110ae <KeDeinitSignals(SigHandlerBlock*)>:
c00110ae:	e9 f4 eb ff ff       	jmp    c000fca7 <free>

c00110b3 <KeInitSignals()>:
c00110b3:	53                   	push   ebx
c00110b4:	83 ec 14             	sub    esp,0x14
c00110b7:	68 c8 00 00 00       	push   0xc8
c00110bc:	e8 d6 eb ff ff       	call   c000fc97 <malloc>
c00110c1:	83 c4 0c             	add    esp,0xc
c00110c4:	89 c3                	mov    ebx,eax
c00110c6:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00110d0:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00110da:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00110e1:	6a 20                	push   0x20
c00110e3:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00110e9:	6a 00                	push   0x0
c00110eb:	50                   	push   eax
c00110ec:	e8 ff f3 fe ff       	call   c00004f0 <memset>
c00110f1:	83 c4 0c             	add    esp,0xc
c00110f4:	6a 44                	push   0x44
c00110f6:	6a 00                	push   0x0
c00110f8:	53                   	push   ebx
c00110f9:	e8 f2 f3 fe ff       	call   c00004f0 <memset>
c00110fe:	83 c4 0c             	add    esp,0xc
c0011101:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0011107:	6a 11                	push   0x11
c0011109:	6a 00                	push   0x0
c001110b:	50                   	push   eax
c001110c:	e8 df f3 fe ff       	call   c00004f0 <memset>
c0011111:	89 d8                	mov    eax,ebx
c0011113:	83 c4 18             	add    esp,0x18
c0011116:	5b                   	pop    ebx
c0011117:	c3                   	ret    

c0011118 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011118:	53                   	push   ebx
c0011119:	b8 01 00 00 00       	mov    eax,0x1
c001111e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011126:	83 f9 10             	cmp    ecx,0x10
c0011129:	7f 21                	jg     c001114c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001112b:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001112e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011132:	89 03                	mov    DWORD PTR [ebx],eax
c0011134:	b8 01 00 00 00       	mov    eax,0x1
c0011139:	d3 e0                	shl    eax,cl
c001113b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001113f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011142:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001114a:	31 c0                	xor    eax,eax
c001114c:	5b                   	pop    ebx
c001114d:	c3                   	ret    

c001114e <KeRaiseSignal(SigHandlerBlock*, int)>:
c001114e:	55                   	push   ebp
c001114f:	57                   	push   edi
c0011150:	bf 08 00 00 00       	mov    edi,0x8
c0011155:	56                   	push   esi
c0011156:	53                   	push   ebx
c0011157:	83 ec 14             	sub    esp,0x14
c001115a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001115e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011162:	68 54 42 02 c0       	push   0xc0024254
c0011167:	e8 f8 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001116c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011173:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011179:	83 c4 10             	add    esp,0x10
c001117c:	31 c9                	xor    ecx,ecx
c001117e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011182:	99                   	cdq    
c0011183:	f7 ff                	idiv   edi
c0011185:	8d 42 24             	lea    eax,[edx+0x24]
c0011188:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c001118c:	85 f6                	test   esi,esi
c001118e:	75 1a                	jne    c00111aa <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0011190:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011194:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0011198:	50                   	push   eax
c0011199:	50                   	push   eax
c001119a:	52                   	push   edx
c001119b:	68 6a 42 02 c0       	push   0xc002426a
c00111a0:	e8 bf 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00111a5:	83 c4 10             	add    esp,0x10
c00111a8:	eb 1b                	jmp    c00111c5 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c00111aa:	41                   	inc    ecx
c00111ab:	83 f9 08             	cmp    ecx,0x8
c00111ae:	75 ce                	jne    c001117e <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c00111b0:	83 ec 0c             	sub    esp,0xc
c00111b3:	be 01 00 00 00       	mov    esi,0x1
c00111b8:	68 8b 42 02 c0       	push   0xc002428b
c00111bd:	e8 a2 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00111c2:	83 c4 10             	add    esp,0x10
c00111c5:	83 c4 0c             	add    esp,0xc
c00111c8:	89 f0                	mov    eax,esi
c00111ca:	5b                   	pop    ebx
c00111cb:	5e                   	pop    esi
c00111cc:	5f                   	pop    edi
c00111cd:	5d                   	pop    ebp
c00111ce:	c3                   	ret    

c00111cf <KeCheckSignal(SigHandlerBlock*, int*)>:
c00111cf:	55                   	push   ebp
c00111d0:	57                   	push   edi
c00111d1:	56                   	push   esi
c00111d2:	53                   	push   ebx
c00111d3:	83 ec 28             	sub    esp,0x28
c00111d6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00111da:	68 9c 42 02 c0       	push   0xc002429c
c00111df:	e8 80 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00111e4:	83 c4 10             	add    esp,0x10
c00111e7:	85 db                	test   ebx,ebx
c00111e9:	0f 84 38 01 00 00    	je     c0011327 <KeCheckSignal(SigHandlerBlock*, int*)+0x158>
c00111ef:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00111f6:	75 0d                	jne    c0011205 <KeCheckSignal(SigHandlerBlock*, int*)+0x36>
c00111f8:	83 ec 0c             	sub    esp,0xc
c00111fb:	68 ab 42 02 c0       	push   0xc00242ab
c0011200:	e9 83 00 00 00       	jmp    c0011288 <KeCheckSignal(SigHandlerBlock*, int*)+0xb9>
c0011205:	83 ec 0c             	sub    esp,0xc
c0011208:	31 ff                	xor    edi,edi
c001120a:	68 c7 42 02 c0       	push   0xc00242c7
c001120f:	e8 50 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011214:	83 c4 10             	add    esp,0x10
c0011217:	8b 83 bc 00 00 00    	mov    eax,DWORD PTR [ebx+0xbc]
c001121d:	bd 08 00 00 00       	mov    ebp,0x8
c0011222:	01 f8                	add    eax,edi
c0011224:	99                   	cdq    
c0011225:	51                   	push   ecx
c0011226:	f7 fd                	idiv   ebp
c0011228:	ff b4 93 9c 00 00 00 	push   DWORD PTR [ebx+edx*4+0x9c]
c001122f:	52                   	push   edx
c0011230:	68 db 42 02 c0       	push   0xc00242db
c0011235:	e8 2a 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001123a:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011240:	83 c4 10             	add    esp,0x10
c0011243:	8d 04 3e             	lea    eax,[esi+edi*1]
c0011246:	99                   	cdq    
c0011247:	f7 fd                	idiv   ebp
c0011249:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011250:	85 ed                	test   ebp,ebp
c0011252:	0f 84 f0 00 00 00    	je     c0011348 <KeCheckSignal(SigHandlerBlock*, int*)+0x179>
c0011258:	89 e9                	mov    ecx,ebp
c001125a:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011260:	bf 01 00 00 00       	mov    edi,0x1
c0011265:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011269:	d3 e7                	shl    edi,cl
c001126b:	31 c9                	xor    ecx,ecx
c001126d:	b8 01 00 00 00       	mov    eax,0x1
c0011272:	d3 e0                	shl    eax,cl
c0011274:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c0011278:	74 18                	je     c0011292 <KeCheckSignal(SigHandlerBlock*, int*)+0xc3>
c001127a:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001127e:	74 12                	je     c0011292 <KeCheckSignal(SigHandlerBlock*, int*)+0xc3>
c0011280:	83 ec 0c             	sub    esp,0xc
c0011283:	68 ef 42 02 c0       	push   0xc00242ef
c0011288:	e8 d7 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001128d:	e9 92 00 00 00       	jmp    c0011324 <KeCheckSignal(SigHandlerBlock*, int*)+0x155>
c0011292:	41                   	inc    ecx
c0011293:	83 f9 11             	cmp    ecx,0x11
c0011296:	75 d5                	jne    c001126d <KeCheckSignal(SigHandlerBlock*, int*)+0x9e>
c0011298:	46                   	inc    esi
c0011299:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001129d:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00112a3:	09 f8                	or     eax,edi
c00112a5:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00112b0:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00112b6:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00112bd:	31 c0                	xor    eax,eax
c00112bf:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00112c7:	74 09                	je     c00112d2 <KeCheckSignal(SigHandlerBlock*, int*)+0x103>
c00112c9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00112d0:	eb 06                	jmp    c00112d8 <KeCheckSignal(SigHandlerBlock*, int*)+0x109>
c00112d2:	40                   	inc    eax
c00112d3:	83 f8 08             	cmp    eax,0x8
c00112d6:	75 e7                	jne    c00112bf <KeCheckSignal(SigHandlerBlock*, int*)+0xf0>
c00112d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112dc:	8b 34 ab             	mov    esi,DWORD PTR [ebx+ebp*4]
c00112df:	89 28                	mov    DWORD PTR [eax],ebp
c00112e1:	50                   	push   eax
c00112e2:	50                   	push   eax
c00112e3:	56                   	push   esi
c00112e4:	68 03 43 02 c0       	push   0xc0024303
c00112e9:	e8 76 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00112ee:	83 c4 10             	add    esp,0x10
c00112f1:	83 fd 09             	cmp    ebp,0x9
c00112f4:	75 14                	jne    c001130a <KeCheckSignal(SigHandlerBlock*, int*)+0x13b>
c00112f6:	83 ec 0c             	sub    esp,0xc
c00112f9:	be 41 10 01 c0       	mov    esi,0xc0011041
c00112fe:	68 13 43 02 c0       	push   0xc0024313
c0011303:	e8 5c 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011308:	eb 39                	jmp    c0011343 <KeCheckSignal(SigHandlerBlock*, int*)+0x174>
c001130a:	83 fe 01             	cmp    esi,0x1
c001130d:	75 1c                	jne    c001132b <KeCheckSignal(SigHandlerBlock*, int*)+0x15c>
c001130f:	83 ec 0c             	sub    esp,0xc
c0011312:	f7 d7                	not    edi
c0011314:	68 1d 43 02 c0       	push   0xc002431d
c0011319:	e8 46 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001131e:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011324:	83 c4 10             	add    esp,0x10
c0011327:	31 f6                	xor    esi,esi
c0011329:	eb 30                	jmp    c001135b <KeCheckSignal(SigHandlerBlock*, int*)+0x18c>
c001132b:	85 f6                	test   esi,esi
c001132d:	75 2c                	jne    c001135b <KeCheckSignal(SigHandlerBlock*, int*)+0x18c>
c001132f:	83 ec 0c             	sub    esp,0xc
c0011332:	68 2a 43 02 c0       	push   0xc002432a
c0011337:	e8 28 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001133c:	8b 34 ad e0 65 02 c0 	mov    esi,DWORD PTR [ebp*4-0x3ffd9a20]
c0011343:	83 c4 10             	add    esp,0x10
c0011346:	eb 13                	jmp    c001135b <KeCheckSignal(SigHandlerBlock*, int*)+0x18c>
c0011348:	46                   	inc    esi
c0011349:	47                   	inc    edi
c001134a:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011350:	83 ff 08             	cmp    edi,0x8
c0011353:	0f 85 be fe ff ff    	jne    c0011217 <KeCheckSignal(SigHandlerBlock*, int*)+0x48>
c0011359:	eb cc                	jmp    c0011327 <KeCheckSignal(SigHandlerBlock*, int*)+0x158>
c001135b:	83 c4 1c             	add    esp,0x1c
c001135e:	89 f0                	mov    eax,esi
c0011360:	5b                   	pop    ebx
c0011361:	5e                   	pop    esi
c0011362:	5f                   	pop    edi
c0011363:	5d                   	pop    ebp
c0011364:	c3                   	ret    

c0011365 <KiCheckSignalZ>:
c0011365:	53                   	push   ebx
c0011366:	31 db                	xor    ebx,ebx
c0011368:	83 ec 20             	sub    esp,0x20
c001136b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001136f:	50                   	push   eax
c0011370:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011375:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011378:	ff b0 80 07 00 00    	push   DWORD PTR [eax+0x780]
c001137e:	e8 4c fe ff ff       	call   c00111cf <KeCheckSignal(SigHandlerBlock*, int*)>
c0011383:	83 c4 10             	add    esp,0x10
c0011386:	85 c0                	test   eax,eax
c0011388:	74 2a                	je     c00113b4 <KiCheckSignalZ+0x4f>
c001138a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011390:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0011393:	89 03                	mov    DWORD PTR [ebx],eax
c0011395:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001139c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00113a0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00113a3:	52                   	push   edx
c00113a4:	6a 00                	push   0x0
c00113a6:	50                   	push   eax
c00113a7:	68 4d 43 02 c0       	push   0xc002434d
c00113ac:	e8 b3 5b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00113b1:	83 c4 10             	add    esp,0x10
c00113b4:	89 d8                	mov    eax,ebx
c00113b6:	83 c4 18             	add    esp,0x18
c00113b9:	5b                   	pop    ebx
c00113ba:	c3                   	ret    

c00113bb <KeCompleteSignal(SigHandlerBlock*, int)>:
c00113bb:	56                   	push   esi
c00113bc:	53                   	push   ebx
c00113bd:	bb 01 00 00 00       	mov    ebx,0x1
c00113c2:	52                   	push   edx
c00113c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00113c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00113cb:	d3 e3                	shl    ebx,cl
c00113cd:	83 f9 10             	cmp    ecx,0x10
c00113d0:	7f 08                	jg     c00113da <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00113d2:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00113d8:	75 10                	jne    c00113ea <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00113da:	83 ec 0c             	sub    esp,0xc
c00113dd:	68 69 43 02 c0       	push   0xc0024369
c00113e2:	e8 f7 eb ff ff       	call   c000ffde <KePanic(char const*)>
c00113e7:	83 c4 10             	add    esp,0x10
c00113ea:	f7 d3                	not    ebx
c00113ec:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00113f2:	58                   	pop    eax
c00113f3:	5b                   	pop    ebx
c00113f4:	5e                   	pop    esi
c00113f5:	c3                   	ret    

c00113f6 <KiFinishSignalZ>:
c00113f6:	53                   	push   ebx
c00113f7:	83 ec 08             	sub    esp,0x8
c00113fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011403:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0011406:	83 fa 08             	cmp    edx,0x8
c0011409:	75 0c                	jne    c0011417 <KiFinishSignalZ+0x21>
c001140b:	83 ec 0c             	sub    esp,0xc
c001140e:	50                   	push   eax
c001140f:	e8 74 5e 00 00       	call   c0017288 <unblockTask(ThreadControlBlock*)>
c0011414:	83 c4 10             	add    esp,0x10
c0011417:	50                   	push   eax
c0011418:	50                   	push   eax
c0011419:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001141c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011421:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011424:	ff b0 80 07 00 00    	push   DWORD PTR [eax+0x780]
c001142a:	e8 8c ff ff ff       	call   c00113bb <KeCompleteSignal(SigHandlerBlock*, int)>
c001142f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011435:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001143c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011443:	83 c4 18             	add    esp,0x18
c0011446:	5b                   	pop    ebx
c0011447:	c3                   	ret    

c0011448 <SysSeekDir(regs*)>:
c0011448:	31 c0                	xor    eax,eax
c001144a:	31 d2                	xor    edx,edx
c001144c:	c3                   	ret    

c001144d <SysTellDir(regs*)>:
c001144d:	31 c0                	xor    eax,eax
c001144f:	31 d2                	xor    edx,edx
c0011451:	c3                   	ret    

c0011452 <SysVerify(regs*)>:
c0011452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011456:	31 d2                	xor    edx,edx
c0011458:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001145b:	c3                   	ret    

c001145c <SysGetArgc(regs*)>:
c001145c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011461:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011464:	8b 80 76 05 00 00    	mov    eax,DWORD PTR [eax+0x576]
c001146a:	89 c2                	mov    edx,eax
c001146c:	c1 fa 1f             	sar    edx,0x1f
c001146f:	c3                   	ret    

c0011470 <SysTTYName(regs*)>:
c0011470:	b8 01 00 00 00       	mov    eax,0x1
c0011475:	31 d2                	xor    edx,edx
c0011477:	c3                   	ret    

c0011478 <SysFormatDisk(regs*)>:
c0011478:	56                   	push   esi
c0011479:	53                   	push   ebx
c001147a:	83 ec 04             	sub    esp,0x4
c001147d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011481:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c0011487:	eb 28                	jmp    c00114b1 <SysFormatDisk(regs*)+0x39>
c0011489:	83 ec 0c             	sub    esp,0xc
c001148c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001148f:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011492:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011494:	51                   	push   ecx
c0011495:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011498:	51                   	push   ecx
c0011499:	50                   	push   eax
c001149a:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00114a1:	50                   	push   eax
c00114a2:	53                   	push   ebx
c00114a3:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00114a6:	83 c4 20             	add    esp,0x20
c00114a9:	83 f8 08             	cmp    eax,0x8
c00114ac:	75 14                	jne    c00114c2 <SysFormatDisk(regs*)+0x4a>
c00114ae:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00114b1:	85 db                	test   ebx,ebx
c00114b3:	75 d4                	jne    c0011489 <SysFormatDisk(regs*)+0x11>
c00114b5:	83 c4 04             	add    esp,0x4
c00114b8:	b8 03 00 00 00       	mov    eax,0x3
c00114bd:	31 d2                	xor    edx,edx
c00114bf:	5b                   	pop    ebx
c00114c0:	5e                   	pop    esi
c00114c1:	c3                   	ret    
c00114c2:	85 c0                	test   eax,eax
c00114c4:	74 1f                	je     c00114e5 <SysFormatDisk(regs*)+0x6d>
c00114c6:	83 f8 09             	cmp    eax,0x9
c00114c9:	74 0d                	je     c00114d8 <SysFormatDisk(regs*)+0x60>
c00114cb:	83 c4 04             	add    esp,0x4
c00114ce:	b8 02 00 00 00       	mov    eax,0x2
c00114d3:	31 d2                	xor    edx,edx
c00114d5:	5b                   	pop    ebx
c00114d6:	5e                   	pop    esi
c00114d7:	c3                   	ret    
c00114d8:	83 c4 04             	add    esp,0x4
c00114db:	b8 01 00 00 00       	mov    eax,0x1
c00114e0:	31 d2                	xor    edx,edx
c00114e2:	5b                   	pop    ebx
c00114e3:	5e                   	pop    esi
c00114e4:	c3                   	ret    
c00114e5:	83 c4 04             	add    esp,0x4
c00114e8:	31 c0                	xor    eax,eax
c00114ea:	31 d2                	xor    edx,edx
c00114ec:	5b                   	pop    ebx
c00114ed:	5e                   	pop    esi
c00114ee:	c3                   	ret    

c00114ef <SysSetDiskVolumeLabel(regs*)>:
c00114ef:	56                   	push   esi
c00114f0:	53                   	push   ebx
c00114f1:	83 ec 04             	sub    esp,0x4
c00114f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114f8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00114fb:	83 f8 19             	cmp    eax,0x19
c00114fe:	77 33                	ja     c0011533 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011500:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c0011507:	85 c9                	test   ecx,ecx
c0011509:	74 28                	je     c0011533 <SysSetDiskVolumeLabel(regs*)+0x44>
c001150b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001150e:	85 db                	test   ebx,ebx
c0011510:	74 21                	je     c0011533 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011512:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011518:	85 d2                	test   edx,edx
c001151a:	74 17                	je     c0011533 <SysSetDiskVolumeLabel(regs*)+0x44>
c001151c:	8b 32                	mov    esi,DWORD PTR [edx]
c001151e:	53                   	push   ebx
c001151f:	50                   	push   eax
c0011520:	51                   	push   ecx
c0011521:	52                   	push   edx
c0011522:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011525:	83 c4 10             	add    esp,0x10
c0011528:	89 c2                	mov    edx,eax
c001152a:	83 c4 04             	add    esp,0x4
c001152d:	c1 fa 1f             	sar    edx,0x1f
c0011530:	5b                   	pop    ebx
c0011531:	5e                   	pop    esi
c0011532:	c3                   	ret    
c0011533:	83 c4 04             	add    esp,0x4
c0011536:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001153b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011540:	5b                   	pop    ebx
c0011541:	5e                   	pop    esi
c0011542:	c3                   	ret    

c0011543 <SysGetDiskVolumeLabel(regs*)>:
c0011543:	57                   	push   edi
c0011544:	56                   	push   esi
c0011545:	53                   	push   ebx
c0011546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001154a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001154d:	83 fa 19             	cmp    edx,0x19
c0011550:	77 3c                	ja     c001158e <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011552:	8b 0c 95 e0 ba 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4520]
c0011559:	85 c9                	test   ecx,ecx
c001155b:	74 31                	je     c001158e <SysGetDiskVolumeLabel(regs*)+0x4b>
c001155d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011560:	85 db                	test   ebx,ebx
c0011562:	74 2a                	je     c001158e <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011564:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011567:	85 f6                	test   esi,esi
c0011569:	74 23                	je     c001158e <SysGetDiskVolumeLabel(regs*)+0x4b>
c001156b:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011571:	85 c0                	test   eax,eax
c0011573:	74 19                	je     c001158e <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011575:	83 ec 0c             	sub    esp,0xc
c0011578:	8b 38                	mov    edi,DWORD PTR [eax]
c001157a:	56                   	push   esi
c001157b:	53                   	push   ebx
c001157c:	52                   	push   edx
c001157d:	51                   	push   ecx
c001157e:	50                   	push   eax
c001157f:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011582:	83 c4 20             	add    esp,0x20
c0011585:	89 c2                	mov    edx,eax
c0011587:	5b                   	pop    ebx
c0011588:	c1 fa 1f             	sar    edx,0x1f
c001158b:	5e                   	pop    esi
c001158c:	5f                   	pop    edi
c001158d:	c3                   	ret    
c001158e:	5b                   	pop    ebx
c001158f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011594:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011599:	5e                   	pop    esi
c001159a:	5f                   	pop    edi
c001159b:	c3                   	ret    

c001159c <SysRealpath(regs*)>:
c001159c:	83 ec 0c             	sub    esp,0xc
c001159f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115a3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00115a6:	85 d2                	test   edx,edx
c00115a8:	74 07                	je     c00115b1 <SysRealpath(regs*)+0x15>
c00115aa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00115ad:	85 c0                	test   eax,eax
c00115af:	75 0b                	jne    c00115bc <SysRealpath(regs*)+0x20>
c00115b1:	b8 01 00 00 00       	mov    eax,0x1
c00115b6:	31 d2                	xor    edx,edx
c00115b8:	83 c4 0c             	add    esp,0xc
c00115bb:	c3                   	ret    
c00115bc:	6a 00                	push   0x0
c00115be:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00115c4:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00115c7:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00115cd:	51                   	push   ecx
c00115ce:	52                   	push   edx
c00115cf:	50                   	push   eax
c00115d0:	e8 45 68 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00115d5:	83 c4 10             	add    esp,0x10
c00115d8:	31 c0                	xor    eax,eax
c00115da:	31 d2                	xor    edx,edx
c00115dc:	83 c4 0c             	add    esp,0xc
c00115df:	c3                   	ret    

c00115e0 <SysReadDir(regs*)>:
c00115e0:	53                   	push   ebx
c00115e1:	83 ec 18             	sub    esp,0x18
c00115e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115e8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115eb:	83 f8 02             	cmp    eax,0x2
c00115ee:	76 61                	jbe    c0011651 <SysReadDir(regs*)+0x71>
c00115f0:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00115f7:	77 49                	ja     c0011642 <SysReadDir(regs*)+0x62>
c00115f9:	83 ec 0c             	sub    esp,0xc
c00115fc:	50                   	push   eax
c00115fd:	e8 5b 1d 00 00       	call   c001335d <KeGetFileFromDescriptor(int)>
c0011602:	83 c4 10             	add    esp,0x10
c0011605:	85 c0                	test   eax,eax
c0011607:	74 39                	je     c0011642 <SysReadDir(regs*)+0x62>
c0011609:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011611:	83 ec 0c             	sub    esp,0xc
c0011614:	8b 10                	mov    edx,DWORD PTR [eax]
c0011616:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001161a:	51                   	push   ecx
c001161b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001161e:	51                   	push   ecx
c001161f:	6a 00                	push   0x0
c0011621:	68 10 01 00 00       	push   0x110
c0011626:	50                   	push   eax
c0011627:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001162a:	83 c4 20             	add    esp,0x20
c001162d:	85 c0                	test   eax,eax
c001162f:	74 29                	je     c001165a <SysReadDir(regs*)+0x7a>
c0011631:	83 f8 07             	cmp    eax,0x7
c0011634:	74 1b                	je     c0011651 <SysReadDir(regs*)+0x71>
c0011636:	b8 02 00 00 00       	mov    eax,0x2
c001163b:	31 d2                	xor    edx,edx
c001163d:	83 c4 18             	add    esp,0x18
c0011640:	5b                   	pop    ebx
c0011641:	c3                   	ret    
c0011642:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011647:	ba ff ff ff ff       	mov    edx,0xffffffff
c001164c:	83 c4 18             	add    esp,0x18
c001164f:	5b                   	pop    ebx
c0011650:	c3                   	ret    
c0011651:	b8 01 00 00 00       	mov    eax,0x1
c0011656:	31 d2                	xor    edx,edx
c0011658:	eb e3                	jmp    c001163d <SysReadDir(regs*)+0x5d>
c001165a:	31 c0                	xor    eax,eax
c001165c:	31 d2                	xor    edx,edx
c001165e:	eb dd                	jmp    c001163d <SysReadDir(regs*)+0x5d>

c0011660 <SysIsATTY(regs*)>:
c0011660:	83 ec 0c             	sub    esp,0xc
c0011663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011667:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001166a:	83 f8 02             	cmp    eax,0x2
c001166d:	76 07                	jbe    c0011676 <SysIsATTY(regs*)+0x16>
c001166f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011674:	75 26                	jne    c001169c <SysIsATTY(regs*)+0x3c>
c0011676:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001167b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001167e:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0011684:	85 c0                	test   eax,eax
c0011686:	74 24                	je     c00116ac <SysIsATTY(regs*)+0x4c>
c0011688:	83 ec 0c             	sub    esp,0xc
c001168b:	8b 10                	mov    edx,DWORD PTR [eax]
c001168d:	50                   	push   eax
c001168e:	ff 12                	call   DWORD PTR [edx]
c0011690:	31 d2                	xor    edx,edx
c0011692:	0f b6 c0             	movzx  eax,al
c0011695:	83 c4 10             	add    esp,0x10
c0011698:	83 c4 0c             	add    esp,0xc
c001169b:	c3                   	ret    
c001169c:	83 ec 0c             	sub    esp,0xc
c001169f:	50                   	push   eax
c00116a0:	e8 b8 1c 00 00       	call   c001335d <KeGetFileFromDescriptor(int)>
c00116a5:	83 c4 10             	add    esp,0x10
c00116a8:	85 c0                	test   eax,eax
c00116aa:	75 dc                	jne    c0011688 <SysIsATTY(regs*)+0x28>
c00116ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116b6:	83 c4 0c             	add    esp,0xc
c00116b9:	c3                   	ret    

c00116ba <SysSeek(regs*)>:
c00116ba:	53                   	push   ebx
c00116bb:	83 ec 08             	sub    esp,0x8
c00116be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116c5:	8d 50 fd             	lea    edx,[eax-0x3]
c00116c8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00116ce:	77 39                	ja     c0011709 <SysSeek(regs*)+0x4f>
c00116d0:	83 ec 0c             	sub    esp,0xc
c00116d3:	50                   	push   eax
c00116d4:	e8 84 1c 00 00       	call   c001335d <KeGetFileFromDescriptor(int)>
c00116d9:	83 c4 10             	add    esp,0x10
c00116dc:	85 c0                	test   eax,eax
c00116de:	74 29                	je     c0011709 <SysSeek(regs*)+0x4f>
c00116e0:	83 ec 04             	sub    esp,0x4
c00116e3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00116e6:	31 db                	xor    ebx,ebx
c00116e8:	53                   	push   ebx
c00116e9:	51                   	push   ecx
c00116ea:	50                   	push   eax
c00116eb:	e8 1e 6b ff ff       	call   c000820e <File::seek(unsigned long long)>
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	85 c0                	test   eax,eax
c00116f5:	0f 95 c0             	setne  al
c00116f8:	31 d2                	xor    edx,edx
c00116fa:	0f b6 c0             	movzx  eax,al
c00116fd:	f7 d8                	neg    eax
c00116ff:	83 d2 00             	adc    edx,0x0
c0011702:	83 c4 08             	add    esp,0x8
c0011705:	f7 da                	neg    edx
c0011707:	5b                   	pop    ebx
c0011708:	c3                   	ret    
c0011709:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001170e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011713:	83 c4 08             	add    esp,0x8
c0011716:	5b                   	pop    ebx
c0011717:	c3                   	ret    

c0011718 <SysTell(regs*)>:
c0011718:	53                   	push   ebx
c0011719:	83 ec 08             	sub    esp,0x8
c001171c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011720:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011723:	83 f8 02             	cmp    eax,0x2
c0011726:	76 56                	jbe    c001177e <SysTell(regs*)+0x66>
c0011728:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001172d:	76 19                	jbe    c0011748 <SysTell(regs*)+0x30>
c001172f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011732:	31 d2                	xor    edx,edx
c0011734:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001173a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011741:	31 c0                	xor    eax,eax
c0011743:	83 c4 08             	add    esp,0x8
c0011746:	5b                   	pop    ebx
c0011747:	c3                   	ret    
c0011748:	83 ec 0c             	sub    esp,0xc
c001174b:	50                   	push   eax
c001174c:	e8 0c 1c 00 00       	call   c001335d <KeGetFileFromDescriptor(int)>
c0011751:	83 c4 10             	add    esp,0x10
c0011754:	85 c0                	test   eax,eax
c0011756:	74 26                	je     c001177e <SysTell(regs*)+0x66>
c0011758:	83 ec 08             	sub    esp,0x8
c001175b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001175e:	52                   	push   edx
c001175f:	50                   	push   eax
c0011760:	e8 55 6b ff ff       	call   c00082ba <File::tell(unsigned long long*)>
c0011765:	83 c4 10             	add    esp,0x10
c0011768:	85 c0                	test   eax,eax
c001176a:	0f 95 c0             	setne  al
c001176d:	31 d2                	xor    edx,edx
c001176f:	0f b6 c0             	movzx  eax,al
c0011772:	f7 d8                	neg    eax
c0011774:	83 d2 00             	adc    edx,0x0
c0011777:	83 c4 08             	add    esp,0x8
c001177a:	f7 da                	neg    edx
c001177c:	5b                   	pop    ebx
c001177d:	c3                   	ret    
c001177e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011783:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011788:	83 c4 08             	add    esp,0x8
c001178b:	5b                   	pop    ebx
c001178c:	c3                   	ret    

c001178d <SysSize(regs*)>:
c001178d:	53                   	push   ebx
c001178e:	83 ec 18             	sub    esp,0x18
c0011791:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011795:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011798:	83 f8 02             	cmp    eax,0x2
c001179b:	76 5b                	jbe    c00117f8 <SysSize(regs*)+0x6b>
c001179d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117a2:	76 19                	jbe    c00117bd <SysSize(regs*)+0x30>
c00117a4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00117a7:	31 d2                	xor    edx,edx
c00117a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00117af:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117b6:	31 c0                	xor    eax,eax
c00117b8:	83 c4 18             	add    esp,0x18
c00117bb:	5b                   	pop    ebx
c00117bc:	c3                   	ret    
c00117bd:	83 ec 0c             	sub    esp,0xc
c00117c0:	50                   	push   eax
c00117c1:	e8 97 1b 00 00       	call   c001335d <KeGetFileFromDescriptor(int)>
c00117c6:	83 c4 10             	add    esp,0x10
c00117c9:	85 c0                	test   eax,eax
c00117cb:	74 2b                	je     c00117f8 <SysSize(regs*)+0x6b>
c00117cd:	83 ec 04             	sub    esp,0x4
c00117d0:	8d 54 24 13          	lea    edx,[esp+0x13]
c00117d4:	52                   	push   edx
c00117d5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117d8:	52                   	push   edx
c00117d9:	50                   	push   eax
c00117da:	e8 73 6c ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c00117df:	83 c4 10             	add    esp,0x10
c00117e2:	85 c0                	test   eax,eax
c00117e4:	0f 95 c0             	setne  al
c00117e7:	31 d2                	xor    edx,edx
c00117e9:	0f b6 c0             	movzx  eax,al
c00117ec:	f7 d8                	neg    eax
c00117ee:	83 d2 00             	adc    edx,0x0
c00117f1:	83 c4 18             	add    esp,0x18
c00117f4:	f7 da                	neg    edx
c00117f6:	5b                   	pop    ebx
c00117f7:	c3                   	ret    
c00117f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011802:	83 c4 18             	add    esp,0x18
c0011805:	5b                   	pop    ebx
c0011806:	c3                   	ret    

c0011807 <SysSizeFromFilename(regs*)>:
c0011807:	55                   	push   ebp
c0011808:	57                   	push   edi
c0011809:	56                   	push   esi
c001180a:	53                   	push   ebx
c001180b:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011811:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011818:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001181b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001181e:	85 f6                	test   esi,esi
c0011820:	74 34                	je     c0011856 <SysSizeFromFilename(regs*)+0x4f>
c0011822:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011828:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001182b:	83 f8 02             	cmp    eax,0x2
c001182e:	76 2d                	jbe    c001185d <SysSizeFromFilename(regs*)+0x56>
c0011830:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011835:	76 3b                	jbe    c0011872 <SysSizeFromFilename(regs*)+0x6b>
c0011837:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001183a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011840:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011847:	81 c4 4c 02 00 00    	add    esp,0x24c
c001184d:	31 c0                	xor    eax,eax
c001184f:	5b                   	pop    ebx
c0011850:	31 d2                	xor    edx,edx
c0011852:	5e                   	pop    esi
c0011853:	5f                   	pop    edi
c0011854:	5d                   	pop    ebp
c0011855:	c3                   	ret    
c0011856:	89 f8                	mov    eax,edi
c0011858:	83 f8 02             	cmp    eax,0x2
c001185b:	77 d3                	ja     c0011830 <SysSizeFromFilename(regs*)+0x29>
c001185d:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011863:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011868:	5b                   	pop    ebx
c0011869:	ba ff ff ff ff       	mov    edx,0xffffffff
c001186e:	5e                   	pop    esi
c001186f:	5f                   	pop    edi
c0011870:	5d                   	pop    ebp
c0011871:	c3                   	ret    
c0011872:	83 ec 0c             	sub    esp,0xc
c0011875:	68 14 01 00 00       	push   0x114
c001187a:	e8 18 e4 ff ff       	call   c000fc97 <malloc>
c001187f:	6a 01                	push   0x1
c0011881:	89 c5                	mov    ebp,eax
c0011883:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011888:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001188b:	50                   	push   eax
c001188c:	57                   	push   edi
c001188d:	55                   	push   ebp
c001188e:	e8 a1 67 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011893:	83 c4 20             	add    esp,0x20
c0011896:	85 ed                	test   ebp,ebp
c0011898:	74 c3                	je     c001185d <SysSizeFromFilename(regs*)+0x56>
c001189a:	83 ec 04             	sub    esp,0x4
c001189d:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118a1:	50                   	push   eax
c00118a2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00118a5:	51                   	push   ecx
c00118a6:	55                   	push   ebp
c00118a7:	e8 a6 6b ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c00118ac:	89 c3                	mov    ebx,eax
c00118ae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00118b1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00118b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118b7:	83 c4 10             	add    esp,0x10
c00118ba:	85 db                	test   ebx,ebx
c00118bc:	75 9f                	jne    c001185d <SysSizeFromFilename(regs*)+0x56>
c00118be:	6a 00                	push   0x0
c00118c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118c8:	05 0c 01 00 00       	add    eax,0x10c
c00118cd:	50                   	push   eax
c00118ce:	57                   	push   edi
c00118cf:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00118d6:	53                   	push   ebx
c00118d7:	e8 3e 65 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00118dc:	58                   	pop    eax
c00118dd:	5a                   	pop    edx
c00118de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00118e2:	50                   	push   eax
c00118e3:	53                   	push   ebx
c00118e4:	e8 b8 5f ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00118e9:	83 c4 10             	add    esp,0x10
c00118ec:	83 f8 01             	cmp    eax,0x1
c00118ef:	74 1a                	je     c001190b <SysSizeFromFilename(regs*)+0x104>
c00118f1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00118f6:	74 26                	je     c001191e <SysSizeFromFilename(regs*)+0x117>
c00118f8:	85 f6                	test   esi,esi
c00118fa:	0f 84 47 ff ff ff    	je     c0011847 <SysSizeFromFilename(regs*)+0x40>
c0011900:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011906:	e9 3c ff ff ff       	jmp    c0011847 <SysSizeFromFilename(regs*)+0x40>
c001190b:	85 f6                	test   esi,esi
c001190d:	0f 84 34 ff ff ff    	je     c0011847 <SysSizeFromFilename(regs*)+0x40>
c0011913:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011919:	e9 29 ff ff ff       	jmp    c0011847 <SysSizeFromFilename(regs*)+0x40>
c001191e:	85 f6                	test   esi,esi
c0011920:	0f 84 21 ff ff ff    	je     c0011847 <SysSizeFromFilename(regs*)+0x40>
c0011926:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001192c:	e9 16 ff ff ff       	jmp    c0011847 <SysSizeFromFilename(regs*)+0x40>

c0011931 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011931:	55                   	push   ebp
c0011932:	57                   	push   edi
c0011933:	56                   	push   esi
c0011934:	53                   	push   ebx
c0011935:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001193b:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011942:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011945:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011948:	85 f6                	test   esi,esi
c001194a:	74 34                	je     c0011980 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c001194c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011952:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011955:	83 f8 02             	cmp    eax,0x2
c0011958:	76 2d                	jbe    c0011987 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001195a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001195f:	76 3b                	jbe    c001199c <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0011961:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011964:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001196a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011971:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011977:	31 c0                	xor    eax,eax
c0011979:	5b                   	pop    ebx
c001197a:	31 d2                	xor    edx,edx
c001197c:	5e                   	pop    esi
c001197d:	5f                   	pop    edi
c001197e:	5d                   	pop    ebp
c001197f:	c3                   	ret    
c0011980:	89 f8                	mov    eax,edi
c0011982:	83 f8 02             	cmp    eax,0x2
c0011985:	77 d3                	ja     c001195a <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011987:	81 c4 4c 02 00 00    	add    esp,0x24c
c001198d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011992:	5b                   	pop    ebx
c0011993:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011998:	5e                   	pop    esi
c0011999:	5f                   	pop    edi
c001199a:	5d                   	pop    ebp
c001199b:	c3                   	ret    
c001199c:	83 ec 0c             	sub    esp,0xc
c001199f:	68 14 01 00 00       	push   0x114
c00119a4:	e8 ee e2 ff ff       	call   c000fc97 <malloc>
c00119a9:	6a 00                	push   0x0
c00119ab:	89 c5                	mov    ebp,eax
c00119ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119b5:	50                   	push   eax
c00119b6:	57                   	push   edi
c00119b7:	55                   	push   ebp
c00119b8:	e8 77 66 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00119bd:	83 c4 20             	add    esp,0x20
c00119c0:	85 ed                	test   ebp,ebp
c00119c2:	74 c3                	je     c0011987 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00119c4:	83 ec 04             	sub    esp,0x4
c00119c7:	8d 44 24 13          	lea    eax,[esp+0x13]
c00119cb:	50                   	push   eax
c00119cc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00119cf:	51                   	push   ecx
c00119d0:	55                   	push   ebp
c00119d1:	e8 7c 6a ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c00119d6:	89 c3                	mov    ebx,eax
c00119d8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00119db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00119de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119e1:	83 c4 10             	add    esp,0x10
c00119e4:	85 db                	test   ebx,ebx
c00119e6:	75 9f                	jne    c0011987 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00119e8:	6a 00                	push   0x0
c00119ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119f2:	05 0c 01 00 00       	add    eax,0x10c
c00119f7:	50                   	push   eax
c00119f8:	57                   	push   edi
c00119f9:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011a00:	53                   	push   ebx
c0011a01:	e8 14 64 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011a06:	58                   	pop    eax
c0011a07:	5a                   	pop    edx
c0011a08:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011a0c:	50                   	push   eax
c0011a0d:	53                   	push   ebx
c0011a0e:	e8 8e 5e ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0011a13:	83 c4 10             	add    esp,0x10
c0011a16:	83 f8 01             	cmp    eax,0x1
c0011a19:	74 1a                	je     c0011a35 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c0011a1b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a20:	74 26                	je     c0011a48 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c0011a22:	85 f6                	test   esi,esi
c0011a24:	0f 84 47 ff ff ff    	je     c0011971 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a2a:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011a30:	e9 3c ff ff ff       	jmp    c0011971 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a35:	85 f6                	test   esi,esi
c0011a37:	0f 84 34 ff ff ff    	je     c0011971 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a3d:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011a43:	e9 29 ff ff ff       	jmp    c0011971 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a48:	85 f6                	test   esi,esi
c0011a4a:	0f 84 21 ff ff ff    	je     c0011971 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a50:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011a56:	e9 16 ff ff ff       	jmp    c0011971 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0011a5b <SysClose(regs*)>:
c0011a5b:	53                   	push   ebx
c0011a5c:	83 ec 08             	sub    esp,0x8
c0011a5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a63:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a66:	83 f8 02             	cmp    eax,0x2
c0011a69:	76 41                	jbe    c0011aac <SysClose(regs*)+0x51>
c0011a6b:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011a71:	83 fa 01             	cmp    edx,0x1
c0011a74:	76 2d                	jbe    c0011aa3 <SysClose(regs*)+0x48>
c0011a76:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011a7b:	77 2f                	ja     c0011aac <SysClose(regs*)+0x51>
c0011a7d:	83 ec 0c             	sub    esp,0xc
c0011a80:	50                   	push   eax
c0011a81:	e8 d7 18 00 00       	call   c001335d <KeGetFileFromDescriptor(int)>
c0011a86:	83 c4 10             	add    esp,0x10
c0011a89:	89 c3                	mov    ebx,eax
c0011a8b:	85 c0                	test   eax,eax
c0011a8d:	74 1d                	je     c0011aac <SysClose(regs*)+0x51>
c0011a8f:	83 ec 0c             	sub    esp,0xc
c0011a92:	50                   	push   eax
c0011a93:	e8 16 67 ff ff       	call   c00081ae <File::close()>
c0011a98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a9d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011aa0:	83 c4 10             	add    esp,0x10
c0011aa3:	31 c0                	xor    eax,eax
c0011aa5:	31 d2                	xor    edx,edx
c0011aa7:	83 c4 08             	add    esp,0x8
c0011aaa:	5b                   	pop    ebx
c0011aab:	c3                   	ret    
c0011aac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ab1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ab6:	83 c4 08             	add    esp,0x8
c0011ab9:	5b                   	pop    ebx
c0011aba:	c3                   	ret    

c0011abb <SysOpenDir(regs*)>:
c0011abb:	56                   	push   esi
c0011abc:	53                   	push   ebx
c0011abd:	83 ec 04             	sub    esp,0x4
c0011ac0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ac4:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ac7:	85 c9                	test   ecx,ecx
c0011ac9:	74 5d                	je     c0011b28 <SysOpenDir(regs*)+0x6d>
c0011acb:	83 ec 0c             	sub    esp,0xc
c0011ace:	68 14 01 00 00       	push   0x114
c0011ad3:	e8 bf e1 ff ff       	call   c000fc97 <malloc>
c0011ad8:	83 c4 0c             	add    esp,0xc
c0011adb:	89 c6                	mov    esi,eax
c0011add:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ae2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ae5:	50                   	push   eax
c0011ae6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ae9:	52                   	push   edx
c0011aea:	56                   	push   esi
c0011aeb:	e8 22 6b ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c0011af0:	83 c4 10             	add    esp,0x10
c0011af3:	85 f6                	test   esi,esi
c0011af5:	74 31                	je     c0011b28 <SysOpenDir(regs*)+0x6d>
c0011af7:	83 ec 0c             	sub    esp,0xc
c0011afa:	56                   	push   esi
c0011afb:	e8 da 6b ff ff       	call   c00086da <Directory::open()>
c0011b00:	83 c4 10             	add    esp,0x10
c0011b03:	85 c0                	test   eax,eax
c0011b05:	75 21                	jne    c0011b28 <SysOpenDir(regs*)+0x6d>
c0011b07:	83 ec 0c             	sub    esp,0xc
c0011b0a:	56                   	push   esi
c0011b0b:	e8 50 15 00 00       	call   c0013060 <UnixFile::getFileDescriptor()>
c0011b10:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b13:	83 c4 10             	add    esp,0x10
c0011b16:	89 02                	mov    DWORD PTR [edx],eax
c0011b18:	c1 f8 1f             	sar    eax,0x1f
c0011b1b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b1e:	83 c4 04             	add    esp,0x4
c0011b21:	31 c0                	xor    eax,eax
c0011b23:	31 d2                	xor    edx,edx
c0011b25:	5b                   	pop    ebx
c0011b26:	5e                   	pop    esi
c0011b27:	c3                   	ret    
c0011b28:	83 c4 04             	add    esp,0x4
c0011b2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b30:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b35:	5b                   	pop    ebx
c0011b36:	5e                   	pop    esi
c0011b37:	c3                   	ret    

c0011b38 <SysMakeDir(regs*)>:
c0011b38:	56                   	push   esi
c0011b39:	53                   	push   ebx
c0011b3a:	83 ec 10             	sub    esp,0x10
c0011b3d:	68 14 01 00 00       	push   0x114
c0011b42:	e8 50 e1 ff ff       	call   c000fc97 <malloc>
c0011b47:	83 c4 0c             	add    esp,0xc
c0011b4a:	89 c3                	mov    ebx,eax
c0011b4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b51:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b54:	50                   	push   eax
c0011b55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b59:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011b5c:	52                   	push   edx
c0011b5d:	53                   	push   ebx
c0011b5e:	e8 af 6a ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c0011b63:	83 c4 10             	add    esp,0x10
c0011b66:	85 db                	test   ebx,ebx
c0011b68:	74 2c                	je     c0011b96 <SysMakeDir(regs*)+0x5e>
c0011b6a:	83 ec 0c             	sub    esp,0xc
c0011b6d:	53                   	push   ebx
c0011b6e:	e8 47 6d ff ff       	call   c00088ba <Directory::create()>
c0011b73:	89 c6                	mov    esi,eax
c0011b75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b7a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b7d:	83 c4 10             	add    esp,0x10
c0011b80:	31 c0                	xor    eax,eax
c0011b82:	85 f6                	test   esi,esi
c0011b84:	0f 95 c0             	setne  al
c0011b87:	31 d2                	xor    edx,edx
c0011b89:	f7 d8                	neg    eax
c0011b8b:	83 d2 00             	adc    edx,0x0
c0011b8e:	83 c4 04             	add    esp,0x4
c0011b91:	f7 da                	neg    edx
c0011b93:	5b                   	pop    ebx
c0011b94:	5e                   	pop    esi
c0011b95:	c3                   	ret    
c0011b96:	83 c4 04             	add    esp,0x4
c0011b99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b9e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ba3:	5b                   	pop    ebx
c0011ba4:	5e                   	pop    esi
c0011ba5:	c3                   	ret    

c0011ba6 <SysCloseDir(regs*)>:
c0011ba6:	53                   	push   ebx
c0011ba7:	83 ec 08             	sub    esp,0x8
c0011baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bb1:	8d 50 fd             	lea    edx,[eax-0x3]
c0011bb4:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011bba:	77 2f                	ja     c0011beb <SysCloseDir(regs*)+0x45>
c0011bbc:	83 ec 0c             	sub    esp,0xc
c0011bbf:	50                   	push   eax
c0011bc0:	e8 98 17 00 00       	call   c001335d <KeGetFileFromDescriptor(int)>
c0011bc5:	83 c4 10             	add    esp,0x10
c0011bc8:	89 c3                	mov    ebx,eax
c0011bca:	85 c0                	test   eax,eax
c0011bcc:	74 1d                	je     c0011beb <SysCloseDir(regs*)+0x45>
c0011bce:	83 ec 0c             	sub    esp,0xc
c0011bd1:	50                   	push   eax
c0011bd2:	e8 5f 6b ff ff       	call   c0008736 <Directory::close()>
c0011bd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011bd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bdc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bdf:	83 c4 10             	add    esp,0x10
c0011be2:	31 c0                	xor    eax,eax
c0011be4:	31 d2                	xor    edx,edx
c0011be6:	83 c4 08             	add    esp,0x8
c0011be9:	5b                   	pop    ebx
c0011bea:	c3                   	ret    
c0011beb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bf0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bf5:	83 c4 08             	add    esp,0x8
c0011bf8:	5b                   	pop    ebx
c0011bf9:	c3                   	ret    

c0011bfa <SysWait(regs*)>:
c0011bfa:	83 ec 10             	sub    esp,0x10
c0011bfd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c01:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011c04:	52                   	push   edx
c0011c05:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011c08:	51                   	push   ecx
c0011c09:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c0c:	50                   	push   eax
c0011c0d:	e8 16 54 00 00       	call   c0017028 <waitTask(int, int*, int)>
c0011c12:	83 c4 1c             	add    esp,0x1c
c0011c15:	89 c2                	mov    edx,eax
c0011c17:	c1 fa 1f             	sar    edx,0x1f
c0011c1a:	c3                   	ret    

c0011c1b <SysNotImpl(regs*)>:
c0011c1b:	83 ec 18             	sub    esp,0x18
c0011c1e:	68 7a 43 02 c0       	push   0xc002437a
c0011c23:	e8 b6 e3 ff ff       	call   c000ffde <KePanic(char const*)>
c0011c28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c32:	83 c4 1c             	add    esp,0x1c
c0011c35:	c3                   	ret    

c0011c36 <SysPanic(regs*)>:
c0011c36:	83 ec 18             	sub    esp,0x18
c0011c39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c3d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011c40:	50                   	push   eax
c0011c41:	e8 98 e3 ff ff       	call   c000ffde <KePanic(char const*)>
c0011c46:	b8 01 00 00 00       	mov    eax,0x1
c0011c4b:	31 d2                	xor    edx,edx
c0011c4d:	83 c4 1c             	add    esp,0x1c
c0011c50:	c3                   	ret    

c0011c51 <SysRmdir(regs*)>:
c0011c51:	56                   	push   esi
c0011c52:	53                   	push   ebx
c0011c53:	83 ec 20             	sub    esp,0x20
c0011c56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c5a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011c5d:	68 14 01 00 00       	push   0x114
c0011c62:	e8 30 e0 ff ff       	call   c000fc97 <malloc>
c0011c67:	6a 00                	push   0x0
c0011c69:	89 c3                	mov    ebx,eax
c0011c6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c73:	50                   	push   eax
c0011c74:	56                   	push   esi
c0011c75:	53                   	push   ebx
c0011c76:	e8 b9 63 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011c7b:	83 c4 14             	add    esp,0x14
c0011c7e:	53                   	push   ebx
c0011c7f:	e8 9a 66 ff ff       	call   c000831e <File::unlink()>
c0011c84:	83 c4 10             	add    esp,0x10
c0011c87:	85 db                	test   ebx,ebx
c0011c89:	74 14                	je     c0011c9f <SysRmdir(regs*)+0x4e>
c0011c8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c8f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c91:	83 ec 0c             	sub    esp,0xc
c0011c94:	53                   	push   ebx
c0011c95:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c98:	83 c4 10             	add    esp,0x10
c0011c9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c9f:	85 c0                	test   eax,eax
c0011ca1:	0f 95 c0             	setne  al
c0011ca4:	31 d2                	xor    edx,edx
c0011ca6:	0f b6 c0             	movzx  eax,al
c0011ca9:	f7 d8                	neg    eax
c0011cab:	83 d2 00             	adc    edx,0x0
c0011cae:	83 c4 14             	add    esp,0x14
c0011cb1:	f7 da                	neg    edx
c0011cb3:	5b                   	pop    ebx
c0011cb4:	5e                   	pop    esi
c0011cb5:	c3                   	ret    

c0011cb6 <SysUnlink(regs*)>:
c0011cb6:	56                   	push   esi
c0011cb7:	53                   	push   ebx
c0011cb8:	83 ec 20             	sub    esp,0x20
c0011cbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cbf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011cc2:	68 14 01 00 00       	push   0x114
c0011cc7:	e8 cb df ff ff       	call   c000fc97 <malloc>
c0011ccc:	6a 00                	push   0x0
c0011cce:	89 c3                	mov    ebx,eax
c0011cd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cd5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011cd8:	50                   	push   eax
c0011cd9:	56                   	push   esi
c0011cda:	53                   	push   ebx
c0011cdb:	e8 54 63 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011ce0:	83 c4 14             	add    esp,0x14
c0011ce3:	53                   	push   ebx
c0011ce4:	e8 35 66 ff ff       	call   c000831e <File::unlink()>
c0011ce9:	83 c4 10             	add    esp,0x10
c0011cec:	85 db                	test   ebx,ebx
c0011cee:	74 14                	je     c0011d04 <SysUnlink(regs*)+0x4e>
c0011cf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cf4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cf6:	83 ec 0c             	sub    esp,0xc
c0011cf9:	53                   	push   ebx
c0011cfa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011cfd:	83 c4 10             	add    esp,0x10
c0011d00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d04:	85 c0                	test   eax,eax
c0011d06:	0f 95 c0             	setne  al
c0011d09:	31 d2                	xor    edx,edx
c0011d0b:	0f b6 c0             	movzx  eax,al
c0011d0e:	f7 d8                	neg    eax
c0011d10:	83 d2 00             	adc    edx,0x0
c0011d13:	83 c4 14             	add    esp,0x14
c0011d16:	f7 da                	neg    edx
c0011d18:	5b                   	pop    ebx
c0011d19:	5e                   	pop    esi
c0011d1a:	c3                   	ret    

c0011d1b <SysGetArgv(regs*)>:
c0011d1b:	83 ec 0c             	sub    esp,0xc
c0011d1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d22:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d25:	85 c0                	test   eax,eax
c0011d27:	78 2c                	js     c0011d55 <SysGetArgv(regs*)+0x3a>
c0011d29:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011d2f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011d32:	3b 81 76 05 00 00    	cmp    eax,DWORD PTR [ecx+0x576]
c0011d38:	7d 1b                	jge    c0011d55 <SysGetArgv(regs*)+0x3a>
c0011d3a:	8b 84 81 7a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x57a]
c0011d41:	85 c0                	test   eax,eax
c0011d43:	74 18                	je     c0011d5d <SysGetArgv(regs*)+0x42>
c0011d45:	83 ec 08             	sub    esp,0x8
c0011d48:	50                   	push   eax
c0011d49:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011d4c:	50                   	push   eax
c0011d4d:	e8 ee e8 fe ff       	call   c0000640 <strcpy>
c0011d52:	83 c4 10             	add    esp,0x10
c0011d55:	31 c0                	xor    eax,eax
c0011d57:	31 d2                	xor    edx,edx
c0011d59:	83 c4 0c             	add    esp,0xc
c0011d5c:	c3                   	ret    
c0011d5d:	b8 01 00 00 00       	mov    eax,0x1
c0011d62:	31 d2                	xor    edx,edx
c0011d64:	83 c4 0c             	add    esp,0xc
c0011d67:	c3                   	ret    

c0011d68 <SysUSleep(regs*)>:
c0011d68:	83 ec 1c             	sub    esp,0x1c
c0011d6b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011d6f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011d72:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011d75:	6a 00                	push   0x0
c0011d77:	6a 64                	push   0x64
c0011d79:	52                   	push   edx
c0011d7a:	50                   	push   eax
c0011d7b:	e8 04 fb 00 00       	call   c0021884 <__udivdi3>
c0011d80:	83 c4 18             	add    esp,0x18
c0011d83:	52                   	push   edx
c0011d84:	50                   	push   eax
c0011d85:	e8 96 53 00 00       	call   c0017120 <milliTenthSleep(unsigned long long)>
c0011d8a:	31 c0                	xor    eax,eax
c0011d8c:	31 d2                	xor    edx,edx
c0011d8e:	83 c4 1c             	add    esp,0x1c
c0011d91:	c3                   	ret    

c0011d92 <SysSpawn(regs*)>:
c0011d92:	56                   	push   esi
c0011d93:	53                   	push   ebx
c0011d94:	83 ec 04             	sub    esp,0x4
c0011d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d9b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011d9e:	85 f6                	test   esi,esi
c0011da0:	75 0a                	jne    c0011dac <SysSpawn(regs*)+0x1a>
c0011da2:	83 c4 04             	add    esp,0x4
c0011da5:	31 c0                	xor    eax,eax
c0011da7:	31 d2                	xor    edx,edx
c0011da9:	5b                   	pop    ebx
c0011daa:	5e                   	pop    esi
c0011dab:	c3                   	ret    
c0011dac:	83 ec 0c             	sub    esp,0xc
c0011daf:	68 84 07 00 00       	push   0x784
c0011db4:	e8 de de ff ff       	call   c000fc97 <malloc>
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011dbf:	89 c6                	mov    esi,eax
c0011dc1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011dc4:	85 c9                	test   ecx,ecx
c0011dc6:	74 39                	je     c0011e01 <SysSpawn(regs*)+0x6f>
c0011dc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dcd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011dd0:	52                   	push   edx
c0011dd1:	50                   	push   eax
c0011dd2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dd5:	50                   	push   eax
c0011dd6:	56                   	push   esi
c0011dd7:	e8 50 4a 00 00       	call   c001682c <Process::Process(char const*, Process*, char**)>
c0011ddc:	83 c4 10             	add    esp,0x10
c0011ddf:	80 be 7e 07 00 00 00 	cmp    BYTE PTR [esi+0x77e],0x0
c0011de6:	75 ba                	jne    c0011da2 <SysSpawn(regs*)+0x10>
c0011de8:	83 ec 0c             	sub    esp,0xc
c0011deb:	56                   	push   esi
c0011dec:	e8 e3 4f 00 00       	call   c0016dd4 <Process::createUserThread()>
c0011df1:	8b 06                	mov    eax,DWORD PTR [esi]
c0011df3:	83 c4 10             	add    esp,0x10
c0011df6:	89 c2                	mov    edx,eax
c0011df8:	83 c4 04             	add    esp,0x4
c0011dfb:	c1 fa 1f             	sar    edx,0x1f
c0011dfe:	5b                   	pop    ebx
c0011dff:	5e                   	pop    esi
c0011e00:	c3                   	ret    
c0011e01:	31 c0                	xor    eax,eax
c0011e03:	eb cb                	jmp    c0011dd0 <SysSpawn(regs*)+0x3e>

c0011e05 <SysGetEnv(regs*)>:
c0011e05:	57                   	push   edi
c0011e06:	56                   	push   esi
c0011e07:	53                   	push   ebx
c0011e08:	83 ec 1c             	sub    esp,0x1c
c0011e0b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011e0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e14:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011e17:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011e1a:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011e1d:	51                   	push   ecx
c0011e1e:	e8 c0 ca ff ff       	call   c000e8e3 <KeGetProcessTotalEnvCount(Process*)>
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	39 c7                	cmp    edi,eax
c0011e28:	7c 14                	jl     c0011e3e <SysGetEnv(regs*)+0x39>
c0011e2a:	85 f6                	test   esi,esi
c0011e2c:	75 0b                	jne    c0011e39 <SysGetEnv(regs*)+0x34>
c0011e2e:	83 c4 10             	add    esp,0x10
c0011e31:	31 c0                	xor    eax,eax
c0011e33:	5b                   	pop    ebx
c0011e34:	31 d2                	xor    edx,edx
c0011e36:	5e                   	pop    esi
c0011e37:	5f                   	pop    edi
c0011e38:	c3                   	ret    
c0011e39:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e3c:	eb f0                	jmp    c0011e2e <SysGetEnv(regs*)+0x29>
c0011e3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011e42:	83 ec 04             	sub    esp,0x4
c0011e45:	57                   	push   edi
c0011e46:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011e4c:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011e4f:	57                   	push   edi
c0011e50:	50                   	push   eax
c0011e51:	e8 ad ca ff ff       	call   c000e903 <KeGetProcessEnvPair(Process*, int)>
c0011e56:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011e5d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011e61:	83 c4 0c             	add    esp,0xc
c0011e64:	85 d2                	test   edx,edx
c0011e66:	75 23                	jne    c0011e8b <SysGetEnv(regs*)+0x86>
c0011e68:	83 ec 0c             	sub    esp,0xc
c0011e6b:	50                   	push   eax
c0011e6c:	e8 ff e6 fe ff       	call   c0000570 <strlen>
c0011e71:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e74:	89 c3                	mov    ebx,eax
c0011e76:	e8 f5 e6 fe ff       	call   c0000570 <strlen>
c0011e7b:	83 c4 10             	add    esp,0x10
c0011e7e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011e82:	83 c4 10             	add    esp,0x10
c0011e85:	31 d2                	xor    edx,edx
c0011e87:	5b                   	pop    ebx
c0011e88:	5e                   	pop    esi
c0011e89:	5f                   	pop    edi
c0011e8a:	c3                   	ret    
c0011e8b:	83 ec 08             	sub    esp,0x8
c0011e8e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e91:	50                   	push   eax
c0011e92:	56                   	push   esi
c0011e93:	e8 a8 e7 fe ff       	call   c0000640 <strcpy>
c0011e98:	58                   	pop    eax
c0011e99:	5a                   	pop    edx
c0011e9a:	68 94 43 02 c0       	push   0xc0024394
c0011e9f:	56                   	push   esi
c0011ea0:	e8 9b e9 fe ff       	call   c0000840 <strcat>
c0011ea5:	59                   	pop    ecx
c0011ea6:	5b                   	pop    ebx
c0011ea7:	57                   	push   edi
c0011ea8:	56                   	push   esi
c0011ea9:	e8 92 e9 fe ff       	call   c0000840 <strcat>
c0011eae:	83 c4 10             	add    esp,0x10
c0011eb1:	e9 78 ff ff ff       	jmp    c0011e2e <SysGetEnv(regs*)+0x29>

c0011eb6 <SysSetFatAttrib(regs*)>:
c0011eb6:	57                   	push   edi
c0011eb7:	56                   	push   esi
c0011eb8:	53                   	push   ebx
c0011eb9:	83 ec 1c             	sub    esp,0x1c
c0011ebc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011ec0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011ec3:	68 14 01 00 00       	push   0x114
c0011ec8:	e8 ca dd ff ff       	call   c000fc97 <malloc>
c0011ecd:	83 c4 0c             	add    esp,0xc
c0011ed0:	89 c3                	mov    ebx,eax
c0011ed2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ed7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011eda:	50                   	push   eax
c0011edb:	57                   	push   edi
c0011edc:	53                   	push   ebx
c0011edd:	e8 50 62 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0011ee2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011ee5:	83 c4 0c             	add    esp,0xc
c0011ee8:	0f b6 d4             	movzx  edx,ah
c0011eeb:	0f b6 c0             	movzx  eax,al
c0011eee:	52                   	push   edx
c0011eef:	50                   	push   eax
c0011ef0:	53                   	push   ebx
c0011ef1:	e8 c2 64 ff ff       	call   c00083b8 <File::chfatattr(unsigned char, unsigned char)>
c0011ef6:	83 c4 10             	add    esp,0x10
c0011ef9:	85 db                	test   ebx,ebx
c0011efb:	74 14                	je     c0011f11 <SysSetFatAttrib(regs*)+0x5b>
c0011efd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f01:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011f03:	83 ec 0c             	sub    esp,0xc
c0011f06:	53                   	push   ebx
c0011f07:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011f0a:	83 c4 10             	add    esp,0x10
c0011f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f11:	85 c0                	test   eax,eax
c0011f13:	0f 95 c0             	setne  al
c0011f16:	31 d2                	xor    edx,edx
c0011f18:	0f b6 c0             	movzx  eax,al
c0011f1b:	f7 d8                	neg    eax
c0011f1d:	83 d2 00             	adc    edx,0x0
c0011f20:	83 c4 10             	add    esp,0x10
c0011f23:	f7 da                	neg    edx
c0011f25:	5b                   	pop    ebx
c0011f26:	5e                   	pop    esi
c0011f27:	5f                   	pop    edi
c0011f28:	c3                   	ret    

c0011f29 <SysShutdown(regs*)>:
c0011f29:	83 ec 1c             	sub    esp,0x1c
c0011f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f30:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011f33:	85 c9                	test   ecx,ecx
c0011f35:	74 18                	je     c0011f4f <SysShutdown(regs*)+0x26>
c0011f37:	83 f9 01             	cmp    ecx,0x1
c0011f3a:	74 26                	je     c0011f62 <SysShutdown(regs*)+0x39>
c0011f3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f41:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f46:	83 f9 02             	cmp    ecx,0x2
c0011f49:	74 24                	je     c0011f6f <SysShutdown(regs*)+0x46>
c0011f4b:	83 c4 1c             	add    esp,0x1c
c0011f4e:	c3                   	ret    
c0011f4f:	e8 08 c4 ff ff       	call   c000e35c <KeShutdown()>
c0011f54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f59:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f5e:	83 c4 1c             	add    esp,0x1c
c0011f61:	c3                   	ret    
c0011f62:	e8 19 c4 ff ff       	call   c000e380 <KeSleep()>
c0011f67:	31 c0                	xor    eax,eax
c0011f69:	31 d2                	xor    edx,edx
c0011f6b:	83 c4 1c             	add    esp,0x1c
c0011f6e:	c3                   	ret    
c0011f6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f77:	e8 10 c4 ff ff       	call   c000e38c <KeRestart()>
c0011f7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f84:	eb c5                	jmp    c0011f4b <SysShutdown(regs*)+0x22>

c0011f86 <SysPipe(regs*)>:
c0011f86:	57                   	push   edi
c0011f87:	56                   	push   esi
c0011f88:	53                   	push   ebx
c0011f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f8d:	83 ec 0c             	sub    esp,0xc
c0011f90:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011f93:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011f96:	6a 20                	push   0x20
c0011f98:	e8 fa dc ff ff       	call   c000fc97 <malloc>
c0011f9d:	89 c3                	mov    ebx,eax
c0011f9f:	58                   	pop    eax
c0011fa0:	5a                   	pop    edx
c0011fa1:	68 00 50 00 00       	push   0x5000
c0011fa6:	53                   	push   ebx
c0011fa7:	e8 b4 e8 ff ff       	call   c0010860 <Pipe::Pipe(int)>
c0011fac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011faf:	e8 ac 10 00 00       	call   c0013060 <UnixFile::getFileDescriptor()>
c0011fb4:	89 07                	mov    DWORD PTR [edi],eax
c0011fb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fb9:	e8 a2 10 00 00       	call   c0013060 <UnixFile::getFileDescriptor()>
c0011fbe:	83 c4 10             	add    esp,0x10
c0011fc1:	89 06                	mov    DWORD PTR [esi],eax
c0011fc3:	31 d2                	xor    edx,edx
c0011fc5:	5b                   	pop    ebx
c0011fc6:	31 c0                	xor    eax,eax
c0011fc8:	5e                   	pop    esi
c0011fc9:	5f                   	pop    edi
c0011fca:	c3                   	ret    

c0011fcb <SysGetUnixTime(regs*)>:
c0011fcb:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0011fd0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011fd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011fda:	e9 03 71 ff ff       	jmp    c00090e2 <Clock::timeInSecondsLocal()>

c0011fdf <string_ends_with(char const*, char const*)>:
c0011fdf:	57                   	push   edi
c0011fe0:	56                   	push   esi
c0011fe1:	53                   	push   ebx
c0011fe2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fe6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011fea:	83 ec 0c             	sub    esp,0xc
c0011fed:	53                   	push   ebx
c0011fee:	e8 7d e5 fe ff       	call   c0000570 <strlen>
c0011ff3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ff6:	89 c6                	mov    esi,eax
c0011ff8:	e8 73 e5 fe ff       	call   c0000570 <strlen>
c0011ffd:	83 c4 10             	add    esp,0x10
c0012000:	39 c6                	cmp    esi,eax
c0012002:	7d 06                	jge    c001200a <string_ends_with(char const*, char const*)+0x2b>
c0012004:	5b                   	pop    ebx
c0012005:	31 c0                	xor    eax,eax
c0012007:	5e                   	pop    esi
c0012008:	5f                   	pop    edi
c0012009:	c3                   	ret    
c001200a:	83 ec 08             	sub    esp,0x8
c001200d:	29 c6                	sub    esi,eax
c001200f:	57                   	push   edi
c0012010:	01 f3                	add    ebx,esi
c0012012:	53                   	push   ebx
c0012013:	e8 38 e7 fe ff       	call   c0000750 <strcmp>
c0012018:	83 c4 10             	add    esp,0x10
c001201b:	85 c0                	test   eax,eax
c001201d:	5b                   	pop    ebx
c001201e:	0f 94 c0             	sete   al
c0012021:	5e                   	pop    esi
c0012022:	0f b6 c0             	movzx  eax,al
c0012025:	5f                   	pop    edi
c0012026:	c3                   	ret    

c0012027 <SysOpen(regs*)>:
c0012027:	56                   	push   esi
c0012028:	53                   	push   ebx
c0012029:	81 ec 04 01 00 00    	sub    esp,0x104
c001202f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012036:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012039:	85 c0                	test   eax,eax
c001203b:	0f 84 bc 01 00 00    	je     c00121fd <SysOpen(regs*)+0x1d6>
c0012041:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012044:	85 c0                	test   eax,eax
c0012046:	0f 84 b1 01 00 00    	je     c00121fd <SysOpen(regs*)+0x1d6>
c001204c:	6a 00                	push   0x0
c001204e:	68 96 43 02 c0       	push   0xc0024396
c0012053:	50                   	push   eax
c0012054:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012058:	56                   	push   esi
c0012059:	e8 bc 5d ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001205e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012061:	e8 0a e5 fe ff       	call   c0000570 <strlen>
c0012066:	83 c4 10             	add    esp,0x10
c0012069:	83 e8 01             	sub    eax,0x1
c001206c:	74 21                	je     c001208f <SysOpen(regs*)+0x68>
c001206e:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012072:	eb 12                	jmp    c0012086 <SysOpen(regs*)+0x5f>
c0012074:	83 fa 3a             	cmp    edx,0x3a
c0012077:	74 12                	je     c001208b <SysOpen(regs*)+0x64>
c0012079:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001207d:	83 e8 01             	sub    eax,0x1
c0012080:	74 0d                	je     c001208f <SysOpen(regs*)+0x68>
c0012082:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012086:	83 fa 2e             	cmp    edx,0x2e
c0012089:	75 e9                	jne    c0012074 <SysOpen(regs*)+0x4d>
c001208b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001208f:	83 ec 08             	sub    esp,0x8
c0012092:	68 9a 43 02 c0       	push   0xc002439a
c0012097:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001209a:	50                   	push   eax
c001209b:	e8 3f ff ff ff       	call   c0011fdf <string_ends_with(char const*, char const*)>
c00120a0:	83 c4 10             	add    esp,0x10
c00120a3:	85 c0                	test   eax,eax
c00120a5:	74 1d                	je     c00120c4 <SysOpen(regs*)+0x9d>
c00120a7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120aa:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00120b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120b7:	81 c4 04 01 00 00    	add    esp,0x104
c00120bd:	31 c0                	xor    eax,eax
c00120bf:	31 d2                	xor    edx,edx
c00120c1:	5b                   	pop    ebx
c00120c2:	5e                   	pop    esi
c00120c3:	c3                   	ret    
c00120c4:	83 ec 08             	sub    esp,0x8
c00120c7:	68 9f 43 02 c0       	push   0xc002439f
c00120cc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120cf:	50                   	push   eax
c00120d0:	e8 0a ff ff ff       	call   c0011fdf <string_ends_with(char const*, char const*)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	85 c0                	test   eax,eax
c00120da:	75 cb                	jne    c00120a7 <SysOpen(regs*)+0x80>
c00120dc:	83 ec 08             	sub    esp,0x8
c00120df:	68 9b 43 02 c0       	push   0xc002439b
c00120e4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120e7:	50                   	push   eax
c00120e8:	e8 63 e6 fe ff       	call   c0000750 <strcmp>
c00120ed:	83 c4 10             	add    esp,0x10
c00120f0:	85 c0                	test   eax,eax
c00120f2:	74 b3                	je     c00120a7 <SysOpen(regs*)+0x80>
c00120f4:	83 ec 08             	sub    esp,0x8
c00120f7:	68 9a 43 02 c0       	push   0xc002439a
c00120fc:	56                   	push   esi
c00120fd:	e8 dd fe ff ff       	call   c0011fdf <string_ends_with(char const*, char const*)>
c0012102:	83 c4 10             	add    esp,0x10
c0012105:	85 c0                	test   eax,eax
c0012107:	75 9e                	jne    c00120a7 <SysOpen(regs*)+0x80>
c0012109:	83 ec 08             	sub    esp,0x8
c001210c:	68 a4 43 02 c0       	push   0xc00243a4
c0012111:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012114:	50                   	push   eax
c0012115:	e8 c5 fe ff ff       	call   c0011fdf <string_ends_with(char const*, char const*)>
c001211a:	83 c4 10             	add    esp,0x10
c001211d:	85 c0                	test   eax,eax
c001211f:	0f 85 eb 00 00 00    	jne    c0012210 <SysOpen(regs*)+0x1e9>
c0012125:	83 ec 08             	sub    esp,0x8
c0012128:	68 a9 43 02 c0       	push   0xc00243a9
c001212d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012130:	50                   	push   eax
c0012131:	e8 a9 fe ff ff       	call   c0011fdf <string_ends_with(char const*, char const*)>
c0012136:	83 c4 10             	add    esp,0x10
c0012139:	85 c0                	test   eax,eax
c001213b:	0f 85 cf 00 00 00    	jne    c0012210 <SysOpen(regs*)+0x1e9>
c0012141:	83 ec 08             	sub    esp,0x8
c0012144:	68 a5 43 02 c0       	push   0xc00243a5
c0012149:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001214c:	51                   	push   ecx
c001214d:	e8 fe e5 fe ff       	call   c0000750 <strcmp>
c0012152:	83 c4 10             	add    esp,0x10
c0012155:	85 c0                	test   eax,eax
c0012157:	0f 84 b3 00 00 00    	je     c0012210 <SysOpen(regs*)+0x1e9>
c001215d:	83 ec 08             	sub    esp,0x8
c0012160:	68 a4 43 02 c0       	push   0xc00243a4
c0012165:	56                   	push   esi
c0012166:	e8 74 fe ff ff       	call   c0011fdf <string_ends_with(char const*, char const*)>
c001216b:	83 c4 10             	add    esp,0x10
c001216e:	85 c0                	test   eax,eax
c0012170:	0f 85 9a 00 00 00    	jne    c0012210 <SysOpen(regs*)+0x1e9>
c0012176:	83 ec 0c             	sub    esp,0xc
c0012179:	68 14 01 00 00       	push   0x114
c001217e:	e8 14 db ff ff       	call   c000fc97 <malloc>
c0012183:	83 c4 0c             	add    esp,0xc
c0012186:	89 c6                	mov    esi,eax
c0012188:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001218d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012190:	50                   	push   eax
c0012191:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012194:	52                   	push   edx
c0012195:	56                   	push   esi
c0012196:	e8 97 5f ff ff       	call   c0008132 <File::File(char const*, Process*)>
c001219b:	83 c4 10             	add    esp,0x10
c001219e:	85 f6                	test   esi,esi
c00121a0:	74 5b                	je     c00121fd <SysOpen(regs*)+0x1d6>
c00121a2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121a5:	0f b6 c2             	movzx  eax,dl
c00121a8:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00121ab:	89 d0                	mov    eax,edx
c00121ad:	83 e0 01             	and    eax,0x1
c00121b0:	f6 c2 02             	test   dl,0x2
c00121b3:	74 03                	je     c00121b8 <SysOpen(regs*)+0x191>
c00121b5:	83 c8 02             	or     eax,0x2
c00121b8:	f6 c2 04             	test   dl,0x4
c00121bb:	74 03                	je     c00121c0 <SysOpen(regs*)+0x199>
c00121bd:	83 c8 04             	or     eax,0x4
c00121c0:	f6 c2 08             	test   dl,0x8
c00121c3:	74 03                	je     c00121c8 <SysOpen(regs*)+0x1a1>
c00121c5:	83 c8 0a             	or     eax,0xa
c00121c8:	80 e2 10             	and    dl,0x10
c00121cb:	74 03                	je     c00121d0 <SysOpen(regs*)+0x1a9>
c00121cd:	83 c8 12             	or     eax,0x12
c00121d0:	83 ec 08             	sub    esp,0x8
c00121d3:	50                   	push   eax
c00121d4:	56                   	push   esi
c00121d5:	e8 76 5f ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00121da:	83 c4 10             	add    esp,0x10
c00121dd:	85 c0                	test   eax,eax
c00121df:	75 1c                	jne    c00121fd <SysOpen(regs*)+0x1d6>
c00121e1:	83 ec 0c             	sub    esp,0xc
c00121e4:	56                   	push   esi
c00121e5:	e8 76 0e 00 00       	call   c0013060 <UnixFile::getFileDescriptor()>
c00121ea:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00121ed:	83 c4 10             	add    esp,0x10
c00121f0:	89 02                	mov    DWORD PTR [edx],eax
c00121f2:	c1 f8 1f             	sar    eax,0x1f
c00121f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00121f8:	e9 ba fe ff ff       	jmp    c00120b7 <SysOpen(regs*)+0x90>
c00121fd:	81 c4 04 01 00 00    	add    esp,0x104
c0012203:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012208:	ba ff ff ff ff       	mov    edx,0xffffffff
c001220d:	5b                   	pop    ebx
c001220e:	5e                   	pop    esi
c001220f:	c3                   	ret    
c0012210:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012213:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012219:	e9 92 fe ff ff       	jmp    c00120b0 <SysOpen(regs*)+0x89>

c001221e <KeSystemCall(regs*, void*)>:
c001221e:	53                   	push   ebx
c001221f:	83 ec 08             	sub    esp,0x8
c0012222:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012226:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012229:	83 f8 42             	cmp    eax,0x42
c001222c:	77 16                	ja     c0012244 <KeSystemCall(regs*, void*)+0x26>
c001222e:	8b 14 85 40 66 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd99c0]
c0012235:	85 d2                	test   edx,edx
c0012237:	74 0b                	je     c0012244 <KeSystemCall(regs*, void*)+0x26>
c0012239:	83 ec 0c             	sub    esp,0xc
c001223c:	53                   	push   ebx
c001223d:	ff d2                	call   edx
c001223f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012242:	eb 0d                	jmp    c0012251 <KeSystemCall(regs*, void*)+0x33>
c0012244:	52                   	push   edx
c0012245:	52                   	push   edx
c0012246:	50                   	push   eax
c0012247:	68 ae 43 02 c0       	push   0xc00243ae
c001224c:	e8 13 4d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012251:	83 c4 10             	add    esp,0x10
c0012254:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012259:	31 d2                	xor    edx,edx
c001225b:	83 c4 08             	add    esp,0x8
c001225e:	5b                   	pop    ebx
c001225f:	c3                   	ret    

c0012260 <VgaText::isAtty()>:
c0012260:	b0 01                	mov    al,0x1
c0012262:	c3                   	ret    
c0012263:	90                   	nop

c0012264 <VgaText::~VgaText()>:
c0012264:	83 ec 0c             	sub    esp,0xc
c0012267:	ba 18 44 02 c0       	mov    edx,0xc0024418
c001226c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012270:	89 10                	mov    DWORD PTR [eax],edx
c0012272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012276:	83 ec 0c             	sub    esp,0xc
c0012279:	50                   	push   eax
c001227a:	e8 cf 0f 00 00       	call   c001324e <UnixFile::~UnixFile()>
c001227f:	83 c4 10             	add    esp,0x10
c0012282:	90                   	nop
c0012283:	83 c4 0c             	add    esp,0xc
c0012286:	c3                   	ret    
c0012287:	90                   	nop

c0012288 <VgaText::~VgaText()>:
c0012288:	83 ec 0c             	sub    esp,0xc
c001228b:	83 ec 0c             	sub    esp,0xc
c001228e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012292:	e8 cd ff ff ff       	call   c0012264 <VgaText::~VgaText()>
c0012297:	83 c4 10             	add    esp,0x10
c001229a:	83 ec 08             	sub    esp,0x8
c001229d:	68 84 01 00 00       	push   0x184
c00122a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122a6:	e8 74 b0 ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00122ab:	83 c4 10             	add    esp,0x10
c00122ae:	83 c4 0c             	add    esp,0xc
c00122b1:	c3                   	ret    

c00122b2 <VgaText::read(unsigned long long, void*, int*)>:
c00122b2:	83 ec 10             	sub    esp,0x10
c00122b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00122bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122c1:	e8 87 82 ff ff       	call   c000a54d <readKeyboard(VgaText*, char*, unsigned long)>
c00122c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00122ca:	89 02                	mov    DWORD PTR [edx],eax
c00122cc:	31 c0                	xor    eax,eax
c00122ce:	83 c4 1c             	add    esp,0x1c
c00122d1:	c3                   	ret    

c00122d2 <setTerminalScrollLock(bool)>:
c00122d2:	c3                   	ret    

c00122d3 <doTerminalCycle()>:
c00122d3:	c3                   	ret    

c00122d4 <addToTerminalCycle(VgaText*)>:
c00122d4:	c3                   	ret    

c00122d5 <scrollTerminalScrollLock(int)>:
c00122d5:	c3                   	ret    

c00122d6 <VgaText::updateTitle()>:
c00122d6:	c3                   	ret    
c00122d7:	90                   	nop

c00122d8 <VgaText::load()>:
c00122d8:	c3                   	ret    
c00122d9:	90                   	nop

c00122da <VgaText::updateCursor()>:
c00122da:	83 ec 14             	sub    esp,0x14
c00122dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122e1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00122e4:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00122e7:	e8 b8 8e 00 00       	call   c001b1a4 <HalConsoleCursorUpdate(int, int)>
c00122ec:	83 c4 1c             	add    esp,0x1c
c00122ef:	c3                   	ret    

c00122f0 <VgaText::doANSI_SGR(int)>:
c00122f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00122f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122f8:	85 d2                	test   edx,edx
c00122fa:	75 0b                	jne    c0012307 <VgaText::doANSI_SGR(int)+0x17>
c00122fc:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00122ff:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012302:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012305:	eb 59                	jmp    c0012360 <VgaText::doANSI_SGR(int)+0x70>
c0012307:	83 fa 07             	cmp    edx,0x7
c001230a:	75 0b                	jne    c0012317 <VgaText::doANSI_SGR(int)+0x27>
c001230c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001230f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0012312:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0012315:	eb 49                	jmp    c0012360 <VgaText::doANSI_SGR(int)+0x70>
c0012317:	83 fa 1b             	cmp    edx,0x1b
c001231a:	74 e0                	je     c00122fc <VgaText::doANSI_SGR(int)+0xc>
c001231c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001231f:	83 f9 07             	cmp    ecx,0x7
c0012322:	77 09                	ja     c001232d <VgaText::doANSI_SGR(int)+0x3d>
c0012324:	8b 14 8d 80 67 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9880]
c001232b:	eb 20                	jmp    c001234d <VgaText::doANSI_SGR(int)+0x5d>
c001232d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0012330:	83 f9 07             	cmp    ecx,0x7
c0012333:	77 09                	ja     c001233e <VgaText::doANSI_SGR(int)+0x4e>
c0012335:	8b 14 8d 80 67 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9880]
c001233c:	eb 22                	jmp    c0012360 <VgaText::doANSI_SGR(int)+0x70>
c001233e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0012341:	83 f9 07             	cmp    ecx,0x7
c0012344:	77 0b                	ja     c0012351 <VgaText::doANSI_SGR(int)+0x61>
c0012346:	8b 14 95 38 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd99c8]
c001234d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012350:	c3                   	ret    
c0012351:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0012354:	83 f9 07             	cmp    ecx,0x7
c0012357:	77 0a                	ja     c0012363 <VgaText::doANSI_SGR(int)+0x73>
c0012359:	8b 14 95 10 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd99f0]
c0012360:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012363:	c3                   	ret    

c0012364 <VgaText::setDefaultBgColour(VgaColour)>:
c0012364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012368:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001236c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001236f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012372:	c3                   	ret    
c0012373:	90                   	nop

c0012374 <VgaText::setDefaultFgColour(VgaColour)>:
c0012374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012378:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001237c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001237f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012382:	c3                   	ret    
c0012383:	90                   	nop

c0012384 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0012384:	53                   	push   ebx
c0012385:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012389:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001238d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012391:	51                   	push   ecx
c0012392:	e8 cd ff ff ff       	call   c0012364 <VgaText::setDefaultBgColour(VgaColour)>
c0012397:	58                   	pop    eax
c0012398:	5a                   	pop    edx
c0012399:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001239d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00123a1:	5b                   	pop    ebx
c00123a2:	eb d0                	jmp    c0012374 <VgaText::setDefaultFgColour(VgaColour)>

c00123a4 <VgaText::setTitleTextColour(VgaColour)>:
c00123a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123ac:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00123af:	c3                   	ret    

c00123b0 <VgaText::setTitleColour(VgaColour)>:
c00123b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123b8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00123bb:	c3                   	ret    

c00123bc <VgaText::setTitle(char*)>:
c00123bc:	c3                   	ret    
c00123bd:	90                   	nop

c00123be <VgaText::combineColours(unsigned char, unsigned char)>:
c00123be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123c2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00123c7:	83 e0 0f             	and    eax,0xf
c00123ca:	c1 e2 04             	shl    edx,0x4
c00123cd:	09 d0                	or     eax,edx
c00123cf:	c3                   	ret    

c00123d0 <VgaText::scrollScreen()>:
c00123d0:	55                   	push   ebp
c00123d1:	57                   	push   edi
c00123d2:	56                   	push   esi
c00123d3:	be 01 00 00 00       	mov    esi,0x1
c00123d8:	53                   	push   ebx
c00123d9:	83 ec 0c             	sub    esp,0xc
c00123dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00123e0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00123e3:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00123e9:	31 ff                	xor    edi,edi
c00123eb:	01 e9                	add    ecx,ebp
c00123ed:	8a 01                	mov    al,BYTE PTR [ecx]
c00123ef:	83 fe 18             	cmp    esi,0x18
c00123f2:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00123f8:	75 20                	jne    c001241a <VgaText::scrollScreen()+0x4a>
c00123fa:	f7 c7 01 00 00 00    	test   edi,0x1
c0012400:	74 15                	je     c0012417 <VgaText::scrollScreen()+0x47>
c0012402:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012406:	50                   	push   eax
c0012407:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001240b:	50                   	push   eax
c001240c:	e8 ad ff ff ff       	call   c00123be <VgaText::combineColours(unsigned char, unsigned char)>
c0012411:	5a                   	pop    edx
c0012412:	5a                   	pop    edx
c0012413:	88 01                	mov    BYTE PTR [ecx],al
c0012415:	eb 03                	jmp    c001241a <VgaText::scrollScreen()+0x4a>
c0012417:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c001241a:	47                   	inc    edi
c001241b:	41                   	inc    ecx
c001241c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012422:	75 c9                	jne    c00123ed <VgaText::scrollScreen()+0x1d>
c0012424:	46                   	inc    esi
c0012425:	83 fe 19             	cmp    esi,0x19
c0012428:	75 b9                	jne    c00123e3 <VgaText::scrollScreen()+0x13>
c001242a:	39 1d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,ebx
c0012430:	75 1f                	jne    c0012451 <VgaText::scrollScreen()+0x81>
c0012432:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0012436:	74 05                	je     c001243d <VgaText::scrollScreen()+0x6d>
c0012438:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001243b:	eb 14                	jmp    c0012451 <VgaText::scrollScreen()+0x81>
c001243d:	50                   	push   eax
c001243e:	50                   	push   eax
c001243f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012443:	50                   	push   eax
c0012444:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012448:	50                   	push   eax
c0012449:	e8 ea 8b 00 00       	call   c001b038 <HalConsoleScroll(int, int)>
c001244e:	83 c4 10             	add    esp,0x10
c0012451:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012455:	83 c4 0c             	add    esp,0xc
c0012458:	5b                   	pop    ebx
c0012459:	5e                   	pop    esi
c001245a:	5f                   	pop    edi
c001245b:	5d                   	pop    ebp
c001245c:	e9 79 fe ff ff       	jmp    c00122da <VgaText::updateCursor()>
c0012461:	90                   	nop

c0012462 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012462:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012467:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001246c:	c1 e0 08             	shl    eax,0x8
c001246f:	09 d0                	or     eax,edx
c0012471:	c3                   	ret    

c0012472 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012472:	55                   	push   ebp
c0012473:	57                   	push   edi
c0012474:	56                   	push   esi
c0012475:	53                   	push   ebx
c0012476:	83 ec 1c             	sub    esp,0x1c
c0012479:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001247d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012481:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012485:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012488:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001248c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012490:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012494:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012498:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001249c:	85 ed                	test   ebp,ebp
c001249e:	75 14                	jne    c00124b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c00124a0:	c7 44 24 30 c2 43 02 c0 	mov    DWORD PTR [esp+0x30],0xc00243c2
c00124a8:	83 c4 1c             	add    esp,0x1c
c00124ab:	5b                   	pop    ebx
c00124ac:	5e                   	pop    esi
c00124ad:	5f                   	pop    edi
c00124ae:	5d                   	pop    ebp
c00124af:	e9 2a db ff ff       	jmp    c000ffde <KePanic(char const*)>
c00124b4:	50                   	push   eax
c00124b5:	50                   	push   eax
c00124b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00124bb:	50                   	push   eax
c00124bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00124c1:	50                   	push   eax
c00124c2:	e8 f7 fe ff ff       	call   c00123be <VgaText::combineColours(unsigned char, unsigned char)>
c00124c7:	5a                   	pop    edx
c00124c8:	0f be c9             	movsx  ecx,cl
c00124cb:	5a                   	pop    edx
c00124cc:	0f b6 c0             	movzx  eax,al
c00124cf:	50                   	push   eax
c00124d0:	51                   	push   ecx
c00124d1:	e8 8c ff ff ff       	call   c0012462 <VgaText::combineCharAndColour(char, unsigned char)>
c00124d6:	6b d6 50             	imul   edx,esi,0x50
c00124d9:	83 c4 10             	add    esp,0x10
c00124dc:	01 da                	add    edx,ebx
c00124de:	0f b7 d2             	movzx  edx,dx
c00124e1:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c00124e6:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c00124ec:	75 28                	jne    c0012516 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c00124ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00124f6:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00124fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00124fe:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012502:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012506:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001250a:	83 c4 1c             	add    esp,0x1c
c001250d:	5b                   	pop    ebx
c001250e:	5e                   	pop    esi
c001250f:	5f                   	pop    edi
c0012510:	5d                   	pop    ebp
c0012511:	e9 2a 8c 00 00       	jmp    c001b140 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012516:	83 c4 1c             	add    esp,0x1c
c0012519:	5b                   	pop    ebx
c001251a:	5e                   	pop    esi
c001251b:	5f                   	pop    edi
c001251c:	5d                   	pop    ebp
c001251d:	c3                   	ret    

c001251e <VgaText::getCursorX()>:
c001251e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012522:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0012525:	c3                   	ret    

c0012526 <VgaText::getCursorY()>:
c0012526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001252a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001252d:	c3                   	ret    

c001252e <VgaText::setCursor(int, int)>:
c001252e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012532:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012536:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0012539:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001253d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012540:	e9 95 fd ff ff       	jmp    c00122da <VgaText::updateCursor()>

c0012545 <setActiveTerminal(VgaText*)>:
c0012545:	53                   	push   ebx
c0012546:	83 ec 08             	sub    esp,0x8
c0012549:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001254d:	85 db                	test   ebx,ebx
c001254f:	75 11                	jne    c0012562 <setActiveTerminal(VgaText*)+0x1d>
c0012551:	c7 44 24 10 d2 43 02 c0 	mov    DWORD PTR [esp+0x10],0xc00243d2
c0012559:	83 c4 08             	add    esp,0x8
c001255c:	5b                   	pop    ebx
c001255d:	e9 7c da ff ff       	jmp    c000ffde <KePanic(char const*)>
c0012562:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0012567:	85 c0                	test   eax,eax
c0012569:	74 0c                	je     c0012577 <setActiveTerminal(VgaText*)+0x32>
c001256b:	83 ec 0c             	sub    esp,0xc
c001256e:	50                   	push   eax
c001256f:	e8 66 fd ff ff       	call   c00122da <VgaText::updateCursor()>
c0012574:	83 c4 10             	add    esp,0x10
c0012577:	89 1d b4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1b4,ebx
c001257d:	50                   	push   eax
c001257e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012581:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012584:	53                   	push   ebx
c0012585:	e8 a4 ff ff ff       	call   c001252e <VgaText::setCursor(int, int)>
c001258a:	83 c4 18             	add    esp,0x18
c001258d:	5b                   	pop    ebx
c001258e:	c3                   	ret    
c001258f:	90                   	nop

c0012590 <VgaText::clearScreen()>:
c0012590:	57                   	push   edi
c0012591:	56                   	push   esi
c0012592:	31 f6                	xor    esi,esi
c0012594:	53                   	push   ebx
c0012595:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012599:	52                   	push   edx
c001259a:	6a 00                	push   0x0
c001259c:	6a 00                	push   0x0
c001259e:	53                   	push   ebx
c001259f:	e8 8a ff ff ff       	call   c001252e <VgaText::setCursor(int, int)>
c00125a4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00125ab:	83 c4 10             	add    esp,0x10
c00125ae:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00125b1:	7e 20                	jle    c00125d3 <VgaText::clearScreen()+0x43>
c00125b3:	31 ff                	xor    edi,edi
c00125b5:	50                   	push   eax
c00125b6:	50                   	push   eax
c00125b7:	56                   	push   esi
c00125b8:	57                   	push   edi
c00125b9:	47                   	inc    edi
c00125ba:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00125bd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00125c0:	6a 20                	push   0x20
c00125c2:	53                   	push   ebx
c00125c3:	e8 aa fe ff ff       	call   c0012472 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00125c8:	83 c4 20             	add    esp,0x20
c00125cb:	83 ff 50             	cmp    edi,0x50
c00125ce:	75 e5                	jne    c00125b5 <VgaText::clearScreen()+0x25>
c00125d0:	46                   	inc    esi
c00125d1:	eb db                	jmp    c00125ae <VgaText::clearScreen()+0x1e>
c00125d3:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00125da:	5b                   	pop    ebx
c00125db:	5e                   	pop    esi
c00125dc:	5f                   	pop    edi
c00125dd:	c3                   	ret    

c00125de <VgaText::setCursorX(int)>:
c00125de:	83 ec 10             	sub    esp,0x10
c00125e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125e5:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00125e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125ec:	50                   	push   eax
c00125ed:	e8 3c ff ff ff       	call   c001252e <VgaText::setCursor(int, int)>
c00125f2:	83 c4 1c             	add    esp,0x1c
c00125f5:	c3                   	ret    

c00125f6 <VgaText::setCursorY(int)>:
c00125f6:	83 ec 10             	sub    esp,0x10
c00125f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012601:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012604:	50                   	push   eax
c0012605:	e8 24 ff ff ff       	call   c001252e <VgaText::setCursor(int, int)>
c001260a:	83 c4 1c             	add    esp,0x1c
c001260d:	c3                   	ret    

c001260e <VgaText::incrementCursor(bool)>:
c001260e:	56                   	push   esi
c001260f:	53                   	push   ebx
c0012610:	51                   	push   ecx
c0012611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012619:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001261c:	40                   	inc    eax
c001261d:	83 f8 50             	cmp    eax,0x50
c0012620:	74 05                	je     c0012627 <VgaText::incrementCursor(bool)+0x19>
c0012622:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0012625:	eb 24                	jmp    c001264b <VgaText::incrementCursor(bool)+0x3d>
c0012627:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001262a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012631:	8d 50 01             	lea    edx,[eax+0x1]
c0012634:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012637:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001263a:	75 0f                	jne    c001264b <VgaText::incrementCursor(bool)+0x3d>
c001263c:	83 ec 0c             	sub    esp,0xc
c001263f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012642:	53                   	push   ebx
c0012643:	e8 88 fd ff ff       	call   c00123d0 <VgaText::scrollScreen()>
c0012648:	83 c4 10             	add    esp,0x10
c001264b:	89 f0                	mov    eax,esi
c001264d:	84 c0                	test   al,al
c001264f:	74 0c                	je     c001265d <VgaText::incrementCursor(bool)+0x4f>
c0012651:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012655:	5a                   	pop    edx
c0012656:	5b                   	pop    ebx
c0012657:	5e                   	pop    esi
c0012658:	e9 7d fc ff ff       	jmp    c00122da <VgaText::updateCursor()>
c001265d:	58                   	pop    eax
c001265e:	5b                   	pop    ebx
c001265f:	5e                   	pop    esi
c0012660:	c3                   	ret    
c0012661:	90                   	nop

c0012662 <VgaText::decrementCursor(bool)>:
c0012662:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012666:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001266a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001266d:	85 c0                	test   eax,eax
c001266f:	74 04                	je     c0012675 <VgaText::decrementCursor(bool)+0x13>
c0012671:	48                   	dec    eax
c0012672:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012675:	84 c9                	test   cl,cl
c0012677:	74 09                	je     c0012682 <VgaText::decrementCursor(bool)+0x20>
c0012679:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001267d:	e9 58 fc ff ff       	jmp    c00122da <VgaText::updateCursor()>
c0012682:	c3                   	ret    
c0012683:	90                   	nop

c0012684 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012684:	53                   	push   ebx
c0012685:	83 ec 08             	sub    esp,0x8
c0012688:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001268d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012691:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012695:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012699:	83 f8 07             	cmp    eax,0x7
c001269c:	75 21                	jne    c00126bf <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c001269e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00126a6:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00126ae:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00126b6:	83 c4 08             	add    esp,0x8
c00126b9:	5b                   	pop    ebx
c00126ba:	e9 14 63 ff ff       	jmp    c00089d3 <KeBeep(int, int, bool)>
c00126bf:	83 f8 0d             	cmp    eax,0xd
c00126c2:	75 09                	jne    c00126cd <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00126c4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00126cb:	eb 2d                	jmp    c00126fa <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00126cd:	83 f8 0a             	cmp    eax,0xa
c00126d0:	75 31                	jne    c0012703 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00126d2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00126d5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00126dc:	8d 50 01             	lea    edx,[eax+0x1]
c00126df:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00126e2:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00126e5:	75 0f                	jne    c00126f6 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00126e7:	83 ec 0c             	sub    esp,0xc
c00126ea:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00126ed:	53                   	push   ebx
c00126ee:	e8 dd fc ff ff       	call   c00123d0 <VgaText::scrollScreen()>
c00126f3:	83 c4 10             	add    esp,0x10
c00126f6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00126fa:	83 c4 08             	add    esp,0x8
c00126fd:	5b                   	pop    ebx
c00126fe:	e9 d7 fb ff ff       	jmp    c00122da <VgaText::updateCursor()>
c0012703:	83 f8 08             	cmp    eax,0x8
c0012706:	75 25                	jne    c001272d <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012708:	50                   	push   eax
c0012709:	50                   	push   eax
c001270a:	6a 01                	push   0x1
c001270c:	53                   	push   ebx
c001270d:	e8 50 ff ff ff       	call   c0012662 <VgaText::decrementCursor(bool)>
c0012712:	5a                   	pop    edx
c0012713:	59                   	pop    ecx
c0012714:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012717:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001271a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001271d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012720:	6a 20                	push   0x20
c0012722:	53                   	push   ebx
c0012723:	e8 4a fd ff ff       	call   c0012472 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012728:	83 c4 28             	add    esp,0x28
c001272b:	5b                   	pop    ebx
c001272c:	c3                   	ret    
c001272d:	83 ec 08             	sub    esp,0x8
c0012730:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012733:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012736:	51                   	push   ecx
c0012737:	52                   	push   edx
c0012738:	50                   	push   eax
c0012739:	53                   	push   ebx
c001273a:	e8 33 fd ff ff       	call   c0012472 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001273f:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0012743:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001274b:	83 c4 28             	add    esp,0x28
c001274e:	5b                   	pop    ebx
c001274f:	e9 ba fe ff ff       	jmp    c001260e <VgaText::incrementCursor(bool)>

c0012754 <VgaText::putchar(char)>:
c0012754:	57                   	push   edi
c0012755:	56                   	push   esi
c0012756:	53                   	push   ebx
c0012757:	83 ec 10             	sub    esp,0x10
c001275a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001275e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012762:	89 f8                	mov    eax,edi
c0012764:	0f be c0             	movsx  eax,al
c0012767:	83 f8 5b             	cmp    eax,0x5b
c001276a:	75 18                	jne    c0012784 <VgaText::putchar(char)+0x30>
c001276c:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0012770:	74 20                	je     c0012792 <VgaText::putchar(char)+0x3e>
c0012772:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0012778:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001277f:	e9 c1 00 00 00       	jmp    c0012845 <VgaText::putchar(char)+0xf1>
c0012784:	83 f8 1b             	cmp    eax,0x1b
c0012787:	75 09                	jne    c0012792 <VgaText::putchar(char)+0x3e>
c0012789:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001278d:	e9 b3 00 00 00       	jmp    c0012845 <VgaText::putchar(char)+0xf1>
c0012792:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0012795:	84 c9                	test   cl,cl
c0012797:	0f 84 98 00 00 00    	je     c0012835 <VgaText::putchar(char)+0xe1>
c001279d:	8d 77 c0             	lea    esi,[edi-0x40]
c00127a0:	89 f2                	mov    edx,esi
c00127a2:	80 fa 3e             	cmp    dl,0x3e
c00127a5:	77 78                	ja     c001281f <VgaText::putchar(char)+0xcb>
c00127a7:	83 f8 6d             	cmp    eax,0x6d
c00127aa:	75 47                	jne    c00127f3 <VgaText::putchar(char)+0x9f>
c00127ac:	31 f6                	xor    esi,esi
c00127ae:	31 d2                	xor    edx,edx
c00127b0:	31 c0                	xor    eax,eax
c00127b2:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00127b5:	7e 2d                	jle    c00127e4 <VgaText::putchar(char)+0x90>
c00127b7:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00127bc:	83 fa 3b             	cmp    edx,0x3b
c00127bf:	75 17                	jne    c00127d8 <VgaText::putchar(char)+0x84>
c00127c1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00127c5:	50                   	push   eax
c00127c6:	53                   	push   ebx
c00127c7:	e8 24 fb ff ff       	call   c00122f0 <VgaText::doANSI_SGR(int)>
c00127cc:	59                   	pop    ecx
c00127cd:	31 d2                	xor    edx,edx
c00127cf:	5f                   	pop    edi
c00127d0:	31 c0                	xor    eax,eax
c00127d2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00127d6:	eb 09                	jmp    c00127e1 <VgaText::putchar(char)+0x8d>
c00127d8:	6b c0 0a             	imul   eax,eax,0xa
c00127db:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00127df:	88 ca                	mov    dl,cl
c00127e1:	46                   	inc    esi
c00127e2:	eb ce                	jmp    c00127b2 <VgaText::putchar(char)+0x5e>
c00127e4:	84 d2                	test   dl,dl
c00127e6:	74 2f                	je     c0012817 <VgaText::putchar(char)+0xc3>
c00127e8:	50                   	push   eax
c00127e9:	53                   	push   ebx
c00127ea:	e8 01 fb ff ff       	call   c00122f0 <VgaText::doANSI_SGR(int)>
c00127ef:	58                   	pop    eax
c00127f0:	5a                   	pop    edx
c00127f1:	eb 24                	jmp    c0012817 <VgaText::putchar(char)+0xc3>
c00127f3:	83 f8 4a             	cmp    eax,0x4a
c00127f6:	75 1f                	jne    c0012817 <VgaText::putchar(char)+0xc3>
c00127f8:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00127fc:	75 19                	jne    c0012817 <VgaText::putchar(char)+0xc3>
c00127fe:	83 ec 0c             	sub    esp,0xc
c0012801:	53                   	push   ebx
c0012802:	e8 89 fd ff ff       	call   c0012590 <VgaText::clearScreen()>
c0012807:	83 c4 0c             	add    esp,0xc
c001280a:	6a 00                	push   0x0
c001280c:	6a 00                	push   0x0
c001280e:	53                   	push   ebx
c001280f:	e8 1a fd ff ff       	call   c001252e <VgaText::setCursor(int, int)>
c0012814:	83 c4 10             	add    esp,0x10
c0012817:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001281d:	eb 26                	jmp    c0012845 <VgaText::putchar(char)+0xf1>
c001281f:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012822:	83 f8 0e             	cmp    eax,0xe
c0012825:	7f 1e                	jg     c0012845 <VgaText::putchar(char)+0xf1>
c0012827:	8d 48 01             	lea    ecx,[eax+0x1]
c001282a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001282d:	89 f9                	mov    ecx,edi
c001282f:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0012833:	eb 10                	jmp    c0012845 <VgaText::putchar(char)+0xf1>
c0012835:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012838:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001283b:	50                   	push   eax
c001283c:	53                   	push   ebx
c001283d:	e8 42 fe ff ff       	call   c0012684 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012842:	83 c4 10             	add    esp,0x10
c0012845:	83 c4 10             	add    esp,0x10
c0012848:	5b                   	pop    ebx
c0012849:	5e                   	pop    esi
c001284a:	5f                   	pop    edi
c001284b:	c3                   	ret    

c001284c <VgaText::putx(unsigned int)>:
c001284c:	57                   	push   edi
c001284d:	b9 11 00 00 00       	mov    ecx,0x11
c0012852:	56                   	push   esi
c0012853:	be 4f 2c 02 c0       	mov    esi,0xc0022c4f
c0012858:	53                   	push   ebx
c0012859:	83 ec 20             	sub    esp,0x20
c001285c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012860:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012864:	fc                   	cld    
c0012865:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012867:	be 08 00 00 00       	mov    esi,0x8
c001286c:	50                   	push   eax
c001286d:	50                   	push   eax
c001286e:	89 d8                	mov    eax,ebx
c0012870:	c1 e3 04             	shl    ebx,0x4
c0012873:	c1 e8 1c             	shr    eax,0x1c
c0012876:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001287b:	50                   	push   eax
c001287c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012880:	e8 cf fe ff ff       	call   c0012754 <VgaText::putchar(char)>
c0012885:	83 c4 10             	add    esp,0x10
c0012888:	4e                   	dec    esi
c0012889:	75 e1                	jne    c001286c <VgaText::putx(unsigned int)+0x20>
c001288b:	83 c4 20             	add    esp,0x20
c001288e:	5b                   	pop    ebx
c001288f:	5e                   	pop    esi
c0012890:	5f                   	pop    edi
c0012891:	c3                   	ret    

c0012892 <VgaText::puts(char const*)>:
c0012892:	53                   	push   ebx
c0012893:	83 ec 08             	sub    esp,0x8
c0012896:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001289a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001289d:	85 c0                	test   eax,eax
c001289f:	74 12                	je     c00128b3 <VgaText::puts(char const*)+0x21>
c00128a1:	43                   	inc    ebx
c00128a2:	51                   	push   ecx
c00128a3:	51                   	push   ecx
c00128a4:	50                   	push   eax
c00128a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128a9:	e8 a6 fe ff ff       	call   c0012754 <VgaText::putchar(char)>
c00128ae:	83 c4 10             	add    esp,0x10
c00128b1:	eb e7                	jmp    c001289a <VgaText::puts(char const*)+0x8>
c00128b3:	83 c4 08             	add    esp,0x8
c00128b6:	5b                   	pop    ebx
c00128b7:	c3                   	ret    

c00128b8 <VgaText::write(unsigned long long, void*, int*)>:
c00128b8:	55                   	push   ebp
c00128b9:	57                   	push   edi
c00128ba:	56                   	push   esi
c00128bb:	53                   	push   ebx
c00128bc:	83 ec 0c             	sub    esp,0xc
c00128bf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128c3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00128c7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00128cb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00128d2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00128d5:	39 eb                	cmp    ebx,ebp
c00128d7:	74 13                	je     c00128ec <VgaText::write(unsigned long long, void*, int*)+0x34>
c00128d9:	43                   	inc    ebx
c00128da:	50                   	push   eax
c00128db:	50                   	push   eax
c00128dc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00128e0:	50                   	push   eax
c00128e1:	56                   	push   esi
c00128e2:	e8 6d fe ff ff       	call   c0012754 <VgaText::putchar(char)>
c00128e7:	83 c4 10             	add    esp,0x10
c00128ea:	eb e9                	jmp    c00128d5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00128ec:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00128f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128f7:	89 38                	mov    DWORD PTR [eax],edi
c00128f9:	83 c4 0c             	add    esp,0xc
c00128fc:	31 c0                	xor    eax,eax
c00128fe:	5b                   	pop    ebx
c00128ff:	5e                   	pop    esi
c0012900:	5f                   	pop    edi
c0012901:	5d                   	pop    ebp
c0012902:	c3                   	ret    
c0012903:	90                   	nop

c0012904 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012904:	55                   	push   ebp
c0012905:	57                   	push   edi
c0012906:	56                   	push   esi
c0012907:	53                   	push   ebx
c0012908:	83 ec 1c             	sub    esp,0x1c
c001290b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001290f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012913:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012917:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c001291a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001291e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012922:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012926:	85 db                	test   ebx,ebx
c0012928:	75 14                	jne    c001293e <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c001292a:	c7 44 24 30 e0 43 02 c0 	mov    DWORD PTR [esp+0x30],0xc00243e0
c0012932:	83 c4 1c             	add    esp,0x1c
c0012935:	5b                   	pop    ebx
c0012936:	5e                   	pop    esi
c0012937:	5f                   	pop    edi
c0012938:	5d                   	pop    ebp
c0012939:	e9 a0 d6 ff ff       	jmp    c000ffde <KePanic(char const*)>
c001293e:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0012945:	50                   	push   eax
c0012946:	50                   	push   eax
c0012947:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001294c:	50                   	push   eax
c001294d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012952:	50                   	push   eax
c0012953:	e8 66 fa ff ff       	call   c00123be <VgaText::combineColours(unsigned char, unsigned char)>
c0012958:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c001295c:	83 c4 10             	add    esp,0x10
c001295f:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012962:	0f b6 e8             	movzx  ebp,al
c0012965:	0f b7 c9             	movzx  ecx,cx
c0012968:	01 c9                	add    ecx,ecx
c001296a:	01 cb                	add    ebx,ecx
c001296c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001296f:	85 c0                	test   eax,eax
c0012971:	0f 84 ef 00 00 00    	je     c0012a66 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012977:	83 f8 0d             	cmp    eax,0xd
c001297a:	75 0c                	jne    c0012988 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c001297c:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012983:	e9 d8 00 00 00       	jmp    c0012a60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012988:	83 f8 0a             	cmp    eax,0xa
c001298b:	75 44                	jne    c00129d1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c001298d:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012990:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012997:	8d 48 01             	lea    ecx,[eax+0x1]
c001299a:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c001299d:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00129a0:	75 0f                	jne    c00129b1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c00129a2:	83 ec 0c             	sub    esp,0xc
c00129a5:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c00129a8:	57                   	push   edi
c00129a9:	e8 22 fa ff ff       	call   c00123d0 <VgaText::scrollScreen()>
c00129ae:	83 c4 10             	add    esp,0x10
c00129b1:	83 ec 0c             	sub    esp,0xc
c00129b4:	57                   	push   edi
c00129b5:	e8 20 f9 ff ff       	call   c00122da <VgaText::updateCursor()>
c00129ba:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00129be:	83 c4 10             	add    esp,0x10
c00129c1:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00129c4:	0f b7 db             	movzx  ebx,bx
c00129c7:	01 db                	add    ebx,ebx
c00129c9:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00129cc:	e9 8f 00 00 00       	jmp    c0012a60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00129d1:	83 f8 08             	cmp    eax,0x8
c00129d4:	75 34                	jne    c0012a0a <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c00129d6:	51                   	push   ecx
c00129d7:	51                   	push   ecx
c00129d8:	6a 01                	push   0x1
c00129da:	57                   	push   edi
c00129db:	e8 82 fc ff ff       	call   c0012662 <VgaText::decrementCursor(bool)>
c00129e0:	5b                   	pop    ebx
c00129e1:	58                   	pop    eax
c00129e2:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00129e5:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00129e8:	ff 77 30             	push   DWORD PTR [edi+0x30]
c00129eb:	ff 77 34             	push   DWORD PTR [edi+0x34]
c00129ee:	6a 20                	push   0x20
c00129f0:	57                   	push   edi
c00129f1:	e8 7c fa ff ff       	call   c0012472 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00129f6:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00129fa:	83 c4 20             	add    esp,0x20
c00129fd:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012a00:	0f b7 db             	movzx  ebx,bx
c0012a03:	01 db                	add    ebx,ebx
c0012a05:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012a08:	eb 56                	jmp    c0012a60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012a0a:	52                   	push   edx
c0012a0b:	52                   	push   edx
c0012a0c:	55                   	push   ebp
c0012a0d:	50                   	push   eax
c0012a0e:	e8 4f fa ff ff       	call   c0012462 <VgaText::combineCharAndColour(char, unsigned char)>
c0012a13:	83 c4 10             	add    esp,0x10
c0012a16:	66 89 03             	mov    WORD PTR [ebx],ax
c0012a19:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c0012a1f:	75 1d                	jne    c0012a3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012a21:	83 ec 0c             	sub    esp,0xc
c0012a24:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012a27:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012a2a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a32:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012a35:	50                   	push   eax
c0012a36:	e8 05 87 00 00       	call   c001b140 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012a3b:	83 c4 20             	add    esp,0x20
c0012a3e:	83 c3 02             	add    ebx,0x2
c0012a41:	50                   	push   eax
c0012a42:	50                   	push   eax
c0012a43:	6a 00                	push   0x0
c0012a45:	57                   	push   edi
c0012a46:	e8 c3 fb ff ff       	call   c001260e <VgaText::incrementCursor(bool)>
c0012a4b:	83 c4 10             	add    esp,0x10
c0012a4e:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012a52:	75 0c                	jne    c0012a60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012a54:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012a58:	0f b7 db             	movzx  ebx,bx
c0012a5b:	01 db                	add    ebx,ebx
c0012a5d:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012a60:	46                   	inc    esi
c0012a61:	e9 06 ff ff ff       	jmp    c001296c <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012a66:	83 ec 0c             	sub    esp,0xc
c0012a69:	57                   	push   edi
c0012a6a:	e8 6b f8 ff ff       	call   c00122da <VgaText::updateCursor()>
c0012a6f:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012a76:	83 c4 2c             	add    esp,0x2c
c0012a79:	5b                   	pop    ebx
c0012a7a:	5e                   	pop    esi
c0012a7b:	5f                   	pop    edi
c0012a7c:	5d                   	pop    ebp
c0012a7d:	c3                   	ret    

c0012a7e <VgaText::VgaText(char const*)>:
c0012a7e:	56                   	push   esi
c0012a7f:	53                   	push   ebx
c0012a80:	83 ec 04             	sub    esp,0x4
c0012a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a87:	83 ec 08             	sub    esp,0x8
c0012a8a:	6a 00                	push   0x0
c0012a8c:	50                   	push   eax
c0012a8d:	e8 d6 05 00 00       	call   c0013068 <UnixFile::UnixFile(int)>
c0012a92:	83 c4 10             	add    esp,0x10
c0012a95:	ba 18 44 02 c0       	mov    edx,0xc0024418
c0012a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a9e:	89 10                	mov    DWORD PTR [eax],edx
c0012aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aaf:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aba:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ac2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aca:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ad5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ae0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aeb:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012af2:	83 ec 0c             	sub    esp,0xc
c0012af5:	68 f0 43 02 c0       	push   0xc00243f0
c0012afa:	e8 65 44 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012aff:	83 c4 10             	add    esp,0x10
c0012b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b06:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012b0d:	83 ec 0c             	sub    esp,0xc
c0012b10:	6a 01                	push   0x1
c0012b12:	e8 b2 09 00 00       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c0012b17:	83 c4 10             	add    esp,0x10
c0012b1a:	89 c2                	mov    edx,eax
c0012b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b20:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012b23:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0012b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b30:	89 c6                	mov    esi,eax
c0012b32:	e8 9b d6 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0012b37:	68 05 0c 00 00       	push   0xc05
c0012b3c:	56                   	push   esi
c0012b3d:	50                   	push   eax
c0012b3e:	53                   	push   ebx
c0012b3f:	e8 68 10 00 00       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b44:	83 c4 10             	add    esp,0x10
c0012b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b4b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b4e:	83 ec 04             	sub    esp,0x4
c0012b51:	68 a0 0f 00 00       	push   0xfa0
c0012b56:	6a 00                	push   0x0
c0012b58:	50                   	push   eax
c0012b59:	e8 92 d9 fe ff       	call   c00004f0 <memset>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	83 ec 04             	sub    esp,0x4
c0012b64:	6a 00                	push   0x0
c0012b66:	6a 07                	push   0x7
c0012b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b6c:	e8 13 f8 ff ff       	call   c0012384 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	83 ec 04             	sub    esp,0x4
c0012b77:	6a 00                	push   0x0
c0012b79:	6a 00                	push   0x0
c0012b7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b7f:	e8 aa f9 ff ff       	call   c001252e <VgaText::setCursor(int, int)>
c0012b84:	83 c4 10             	add    esp,0x10
c0012b87:	83 ec 0c             	sub    esp,0xc
c0012b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b8e:	e8 fd f9 ff ff       	call   c0012590 <VgaText::clearScreen()>
c0012b93:	83 c4 10             	add    esp,0x10
c0012b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b9a:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba2:	05 82 00 00 00       	add    eax,0x82
c0012ba7:	83 ec 04             	sub    esp,0x4
c0012baa:	68 80 00 00 00       	push   0x80
c0012baf:	6a 00                	push   0x0
c0012bb1:	50                   	push   eax
c0012bb2:	e8 39 d9 fe ff       	call   c00004f0 <memset>
c0012bb7:	83 c4 10             	add    esp,0x10
c0012bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbe:	05 02 01 00 00       	add    eax,0x102
c0012bc3:	83 ec 04             	sub    esp,0x4
c0012bc6:	68 80 00 00 00       	push   0x80
c0012bcb:	6a 00                	push   0x0
c0012bcd:	50                   	push   eax
c0012bce:	e8 1d d9 fe ff       	call   c00004f0 <memset>
c0012bd3:	83 c4 10             	add    esp,0x10
c0012bd6:	90                   	nop
c0012bd7:	83 c4 04             	add    esp,0x4
c0012bda:	5b                   	pop    ebx
c0012bdb:	5e                   	pop    esi
c0012bdc:	c3                   	ret    
c0012bdd:	90                   	nop

c0012bde <VgaText::receiveKey(unsigned char)>:
c0012bde:	55                   	push   ebp
c0012bdf:	57                   	push   edi
c0012be0:	56                   	push   esi
c0012be1:	53                   	push   ebx
c0012be2:	83 ec 2c             	sub    esp,0x2c
c0012be5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012be9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012bed:	89 ef                	mov    edi,ebp
c0012bef:	81 e7 ff 00 00 00    	and    edi,0xff
c0012bf5:	0f 84 66 01 00 00    	je     c0012d61 <VgaText::receiveKey(unsigned char)+0x183>
c0012bfb:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012c01:	83 ff 08             	cmp    edi,0x8
c0012c04:	75 73                	jne    c0012c79 <VgaText::receiveKey(unsigned char)+0x9b>
c0012c06:	83 ec 0c             	sub    esp,0xc
c0012c09:	56                   	push   esi
c0012c0a:	e8 61 d9 fe ff       	call   c0000570 <strlen>
c0012c0f:	83 c4 10             	add    esp,0x10
c0012c12:	85 c0                	test   eax,eax
c0012c14:	0f 84 02 01 00 00    	je     c0012d1c <VgaText::receiveKey(unsigned char)+0x13e>
c0012c1a:	50                   	push   eax
c0012c1b:	50                   	push   eax
c0012c1c:	6a 08                	push   0x8
c0012c1e:	53                   	push   ebx
c0012c1f:	e8 30 fb ff ff       	call   c0012754 <VgaText::putchar(char)>
c0012c24:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c27:	e8 44 d9 fe ff       	call   c0000570 <strlen>
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012c37:	83 fa 0d             	cmp    edx,0xd
c0012c3a:	89 d0                	mov    eax,edx
c0012c3c:	0f 95 c1             	setne  cl
c0012c3f:	83 fa 1f             	cmp    edx,0x1f
c0012c42:	0f 9e c2             	setle  dl
c0012c45:	0f b6 d2             	movzx  edx,dl
c0012c48:	85 ca                	test   edx,ecx
c0012c4a:	74 17                	je     c0012c63 <VgaText::receiveKey(unsigned char)+0x85>
c0012c4c:	83 e8 08             	sub    eax,0x8
c0012c4f:	3c 02                	cmp    al,0x2
c0012c51:	76 10                	jbe    c0012c63 <VgaText::receiveKey(unsigned char)+0x85>
c0012c53:	55                   	push   ebp
c0012c54:	55                   	push   ebp
c0012c55:	68 03 44 02 c0       	push   0xc0024403
c0012c5a:	53                   	push   ebx
c0012c5b:	e8 32 fc ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0012c60:	83 c4 10             	add    esp,0x10
c0012c63:	83 ec 0c             	sub    esp,0xc
c0012c66:	56                   	push   esi
c0012c67:	e8 04 d9 fe ff       	call   c0000570 <strlen>
c0012c6c:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012c74:	e9 a0 00 00 00       	jmp    c0012d19 <VgaText::receiveKey(unsigned char)+0x13b>
c0012c79:	83 ec 0c             	sub    esp,0xc
c0012c7c:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012c82:	50                   	push   eax
c0012c83:	e8 e8 d8 fe ff       	call   c0000570 <strlen>
c0012c88:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c8f:	e8 dc d8 fe ff       	call   c0000570 <strlen>
c0012c94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012c98:	83 c4 10             	add    esp,0x10
c0012c9b:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012c9f:	3d 80 00 00 00       	cmp    eax,0x80
c0012ca4:	0f 87 b7 00 00 00    	ja     c0012d61 <VgaText::receiveKey(unsigned char)+0x183>
c0012caa:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012cad:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012cb0:	3c 1e                	cmp    al,0x1e
c0012cb2:	0f 96 c0             	setbe  al
c0012cb5:	80 fa 01             	cmp    dl,0x1
c0012cb8:	0f 97 c2             	seta   dl
c0012cbb:	0f b6 d2             	movzx  edx,dl
c0012cbe:	85 c2                	test   edx,eax
c0012cc0:	74 2e                	je     c0012cf0 <VgaText::receiveKey(unsigned char)+0x112>
c0012cc2:	83 ff 0d             	cmp    edi,0xd
c0012cc5:	74 29                	je     c0012cf0 <VgaText::receiveKey(unsigned char)+0x112>
c0012cc7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012cca:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012ccd:	68 09 44 02 c0       	push   0xc0024409
c0012cd2:	53                   	push   ebx
c0012cd3:	e8 2c fc ff ff       	call   c0012904 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012cd8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012cdb:	8d 45 40             	lea    eax,[ebp+0x40]
c0012cde:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012ce1:	0f b6 c0             	movzx  eax,al
c0012ce4:	50                   	push   eax
c0012ce5:	53                   	push   ebx
c0012ce6:	e8 99 f9 ff ff       	call   c0012684 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012ceb:	83 c4 20             	add    esp,0x20
c0012cee:	eb 11                	jmp    c0012d01 <VgaText::receiveKey(unsigned char)+0x123>
c0012cf0:	89 e8                	mov    eax,ebp
c0012cf2:	51                   	push   ecx
c0012cf3:	0f be c0             	movsx  eax,al
c0012cf6:	51                   	push   ecx
c0012cf7:	50                   	push   eax
c0012cf8:	53                   	push   ebx
c0012cf9:	e8 56 fa ff ff       	call   c0012754 <VgaText::putchar(char)>
c0012cfe:	83 c4 10             	add    esp,0x10
c0012d01:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012d06:	89 e8                	mov    eax,ebp
c0012d08:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012d0c:	52                   	push   edx
c0012d0d:	52                   	push   edx
c0012d0e:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012d12:	50                   	push   eax
c0012d13:	56                   	push   esi
c0012d14:	e8 27 db fe ff       	call   c0000840 <strcat>
c0012d19:	83 c4 10             	add    esp,0x10
c0012d1c:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012d22:	b0 01                	mov    al,0x1
c0012d24:	83 ff 1c             	cmp    edi,0x1c
c0012d27:	77 0e                	ja     c0012d37 <VgaText::receiveKey(unsigned char)+0x159>
c0012d29:	b8 08 04 00 10       	mov    eax,0x10000408
c0012d2e:	89 f9                	mov    ecx,edi
c0012d30:	d3 e8                	shr    eax,cl
c0012d32:	f7 d0                	not    eax
c0012d34:	83 e0 01             	and    eax,0x1
c0012d37:	84 c0                	test   al,al
c0012d39:	74 04                	je     c0012d3f <VgaText::receiveKey(unsigned char)+0x161>
c0012d3b:	84 d2                	test   dl,dl
c0012d3d:	74 22                	je     c0012d61 <VgaText::receiveKey(unsigned char)+0x183>
c0012d3f:	81 c3 02 01 00 00    	add    ebx,0x102
c0012d45:	50                   	push   eax
c0012d46:	50                   	push   eax
c0012d47:	56                   	push   esi
c0012d48:	53                   	push   ebx
c0012d49:	e8 f2 da fe ff       	call   c0000840 <strcat>
c0012d4e:	83 c4 0c             	add    esp,0xc
c0012d51:	68 80 00 00 00       	push   0x80
c0012d56:	6a 00                	push   0x0
c0012d58:	56                   	push   esi
c0012d59:	e8 92 d7 fe ff       	call   c00004f0 <memset>
c0012d5e:	83 c4 10             	add    esp,0x10
c0012d61:	83 c4 2c             	add    esp,0x2c
c0012d64:	5b                   	pop    ebx
c0012d65:	5e                   	pop    esi
c0012d66:	5f                   	pop    edi
c0012d67:	5d                   	pop    ebp
c0012d68:	c3                   	ret    
c0012d69:	90                   	nop

c0012d6a <VgaText::doUpdate()>:
c0012d6a:	c3                   	ret    
c0012d6b:	90                   	nop

c0012d6c <TSS::TSS()>:
c0012d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d70:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012d77:	90                   	nop
c0012d78:	c3                   	ret    
c0012d79:	90                   	nop
c0012d7a:	66 90                	xchg   ax,ax

c0012d7c <TSS::setESP(unsigned long)>:
c0012d7c:	55                   	push   ebp
c0012d7d:	89 e5                	mov    ebp,esp
c0012d7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d85:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012d88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012d8b:	90                   	nop
c0012d8c:	5d                   	pop    ebp
c0012d8d:	c3                   	ret    
c0012d8e:	66 90                	xchg   ax,ax

c0012d90 <TSS::flush()>:
c0012d90:	55                   	push   ebp
c0012d91:	89 e5                	mov    ebp,esp
c0012d93:	83 ec 10             	sub    esp,0x10
c0012d96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d99:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d9b:	83 c8 03             	or     eax,0x3
c0012d9e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012da2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012da6:	66 89 d0             	mov    ax,dx
c0012da9:	0f 00 d8             	ltr    ax
c0012dac:	90                   	nop
c0012dad:	c9                   	leave  
c0012dae:	c3                   	ret    
c0012daf:	90                   	nop

c0012db0 <TSS::setup(unsigned long, unsigned long)>:
c0012db0:	55                   	push   ebp
c0012db1:	89 e5                	mov    ebp,esp
c0012db3:	83 ec 18             	sub    esp,0x18
c0012db6:	83 ec 0c             	sub    esp,0xc
c0012db9:	6a 68                	push   0x68
c0012dbb:	e8 d7 ce ff ff       	call   c000fc97 <malloc>
c0012dc0:	83 c4 10             	add    esp,0x10
c0012dc3:	89 c2                	mov    edx,eax
c0012dc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dc8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dd1:	83 ec 08             	sub    esp,0x8
c0012dd4:	50                   	push   eax
c0012dd5:	68 2c 44 02 c0       	push   0xc002442c
c0012dda:	e8 85 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012ddf:	83 c4 10             	add    esp,0x10
c0012de2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012de5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012de8:	83 ec 04             	sub    esp,0x4
c0012deb:	6a 68                	push   0x68
c0012ded:	6a 00                	push   0x0
c0012def:	50                   	push   eax
c0012df0:	e8 fb d6 fe ff       	call   c00004f0 <memset>
c0012df5:	83 c4 10             	add    esp,0x10
c0012df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dfe:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012e04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e0a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012e10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e16:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012e19:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e22:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e2e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e3a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012e40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e46:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e52:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e5e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e6a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012e6d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012e70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e76:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012e79:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e82:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012e89:	83 ec 0c             	sub    esp,0xc
c0012e8c:	68 43 44 02 c0       	push   0xc0024443
c0012e91:	e8 ce 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e9f:	0f 20 da             	mov    edx,cr3
c0012ea2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012ea5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012ea8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012eab:	83 ec 0c             	sub    esp,0xc
c0012eae:	68 46 44 02 c0       	push   0xc0024446
c0012eb3:	e8 ac 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012eb8:	83 c4 10             	add    esp,0x10
c0012ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ebe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ec1:	83 ec 08             	sub    esp,0x8
c0012ec4:	50                   	push   eax
c0012ec5:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012ec8:	50                   	push   eax
c0012ec9:	e8 2c be ff ff       	call   c000ecfa <GDTEntry::setBase(unsigned int)>
c0012ece:	83 c4 10             	add    esp,0x10
c0012ed1:	83 ec 08             	sub    esp,0x8
c0012ed4:	6a 68                	push   0x68
c0012ed6:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012ed9:	50                   	push   eax
c0012eda:	e8 37 be ff ff       	call   c000ed16 <GDTEntry::setLimit(unsigned int)>
c0012edf:	83 c4 10             	add    esp,0x10
c0012ee2:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012ee6:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012ee9:	83 e0 0f             	and    eax,0xf
c0012eec:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012eef:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012ef2:	83 c8 40             	or     eax,0x40
c0012ef5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012ef8:	83 ec 0c             	sub    esp,0xc
c0012efb:	68 49 44 02 c0       	push   0xc0024449
c0012f00:	e8 5f 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f05:	83 c4 10             	add    esp,0x10
c0012f08:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012f0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f13:	83 ec 08             	sub    esp,0x8
c0012f16:	50                   	push   eax
c0012f17:	68 4c 44 02 c0       	push   0xc002444c
c0012f1c:	e8 43 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f21:	83 c4 10             	add    esp,0x10
c0012f24:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012f29:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f2f:	05 64 01 00 00       	add    eax,0x164
c0012f34:	83 ec 04             	sub    esp,0x4
c0012f37:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012f3a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012f3d:	50                   	push   eax
c0012f3e:	e8 07 be ff ff       	call   c000ed4a <GDT::addEntry(GDTEntry)>
c0012f43:	83 c4 10             	add    esp,0x10
c0012f46:	89 c2                	mov    edx,eax
c0012f48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f4b:	89 10                	mov    DWORD PTR [eax],edx
c0012f4d:	83 ec 0c             	sub    esp,0xc
c0012f50:	68 61 44 02 c0       	push   0xc0024461
c0012f55:	e8 0a 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f5a:	83 c4 10             	add    esp,0x10
c0012f5d:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012f62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f68:	05 64 01 00 00       	add    eax,0x164
c0012f6d:	83 ec 0c             	sub    esp,0xc
c0012f70:	50                   	push   eax
c0012f71:	e8 fe bd ff ff       	call   c000ed74 <GDT::flush()>
c0012f76:	83 c4 10             	add    esp,0x10
c0012f79:	83 ec 0c             	sub    esp,0xc
c0012f7c:	68 64 44 02 c0       	push   0xc0024464
c0012f81:	e8 de 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f86:	83 c4 10             	add    esp,0x10
c0012f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f8e:	c9                   	leave  
c0012f8f:	c3                   	ret    

c0012f90 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f9b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012fa0:	75 08                	jne    c0012faa <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012fa2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012fa8:	eb 38                	jmp    c0012fe2 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012faa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012faf:	75 17                	jne    c0012fc8 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012fb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fb6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012fb9:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0012fbf:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fc1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012fc5:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012fc8:	89 c1                	mov    ecx,eax
c0012fca:	83 e1 fd             	and    ecx,0xfffffffd
c0012fcd:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012fd3:	74 cd                	je     c0012fa2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012fd5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012fda:	83 e0 ef             	and    eax,0xffffffef
c0012fdd:	83 f8 08             	cmp    eax,0x8
c0012fe0:	76 c0                	jbe    c0012fa2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012fe2:	31 c0                	xor    eax,eax
c0012fe4:	c3                   	ret    
c0012fe5:	90                   	nop

c0012fe6 <ReservedFilename::isAtty()>:
c0012fe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012fed:	31 c0                	xor    eax,eax
c0012fef:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012ff5:	74 09                	je     c0013000 <ReservedFilename::isAtty()+0x1a>
c0012ff7:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012ffd:	0f 94 c0             	sete   al
c0013000:	c3                   	ret    
c0013001:	90                   	nop

c0013002 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0013002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013006:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001300a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001300d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013011:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0013016:	75 08                	jne    c0013020 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0013018:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001301e:	eb 3d                	jmp    c001305d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013020:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013025:	75 17                	jne    c001303e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0013027:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001302c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001302f:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0013035:	8b 10                	mov    edx,DWORD PTR [eax]
c0013037:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001303b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001303e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013043:	75 04                	jne    c0013049 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0013045:	89 0a                	mov    DWORD PTR [edx],ecx
c0013047:	eb 14                	jmp    c001305d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013049:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001304e:	74 c8                	je     c0013018 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013050:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013055:	83 e0 ef             	and    eax,0xffffffef
c0013058:	83 f8 08             	cmp    eax,0x8
c001305b:	76 bb                	jbe    c0013018 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001305d:	31 c0                	xor    eax,eax
c001305f:	c3                   	ret    

c0013060 <UnixFile::getFileDescriptor()>:
c0013060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013064:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013067:	c3                   	ret    

c0013068 <UnixFile::UnixFile(int)>:
c0013068:	53                   	push   ebx
c0013069:	83 ec 28             	sub    esp,0x28
c001306c:	ba b4 44 02 c0       	mov    edx,0xc00244b4
c0013071:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013075:	89 10                	mov    DWORD PTR [eax],edx
c0013077:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001307f:	0f 8f 90 01 00 00    	jg     c0013215 <UnixFile::UnixFile(int)+0x1ad>
c0013085:	a1 c0 67 02 c0       	mov    eax,ds:0xc00267c0
c001308a:	8d 50 01             	lea    edx,[eax+0x1]
c001308d:	89 15 c0 67 02 c0    	mov    DWORD PTR ds:0xc00267c0,edx
c0013093:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013097:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001309a:	83 ec 08             	sub    esp,0x8
c001309d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00130a1:	68 38 e2 02 c0       	push   0xc002e238
c00130a6:	e8 13 ef 00 00       	call   c0021fbe <LinkedList<UnixFile>::addElement(UnixFile*)>
c00130ab:	83 c4 10             	add    esp,0x10
c00130ae:	a0 34 e2 02 c0       	mov    al,ds:0xc002e234
c00130b3:	83 f0 01             	xor    eax,0x1
c00130b6:	0f b6 c0             	movzx  eax,al
c00130b9:	85 c0                	test   eax,eax
c00130bb:	0f 84 55 01 00 00    	je     c0013216 <UnixFile::UnixFile(int)+0x1ae>
c00130c1:	c6 05 34 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e234,0x1
c00130c8:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130d7:	e8 bb cb ff ff       	call   c000fc97 <malloc>
c00130dc:	83 c4 10             	add    esp,0x10
c00130df:	89 c3                	mov    ebx,eax
c00130e1:	83 ec 08             	sub    esp,0x8
c00130e4:	68 03 ff ff 0f       	push   0xfffff03
c00130e9:	53                   	push   ebx
c00130ea:	e8 2d 01 00 00       	call   c001321c <ReservedFilename::ReservedFilename(int)>
c00130ef:	83 c4 10             	add    esp,0x10
c00130f2:	89 1d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ebx
c00130f8:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013107:	e8 8b cb ff ff       	call   c000fc97 <malloc>
c001310c:	83 c4 10             	add    esp,0x10
c001310f:	89 c3                	mov    ebx,eax
c0013111:	83 ec 08             	sub    esp,0x8
c0013114:	68 01 ff ff 0f       	push   0xfffff01
c0013119:	53                   	push   ebx
c001311a:	e8 fd 00 00 00       	call   c001321c <ReservedFilename::ReservedFilename(int)>
c001311f:	83 c4 10             	add    esp,0x10
c0013122:	89 1d 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,ebx
c0013128:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0013130:	83 ec 0c             	sub    esp,0xc
c0013133:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013137:	e8 5b cb ff ff       	call   c000fc97 <malloc>
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	89 c3                	mov    ebx,eax
c0013141:	83 ec 08             	sub    esp,0x8
c0013144:	68 00 ff ff 0f       	push   0xfffff00
c0013149:	53                   	push   ebx
c001314a:	e8 cd 00 00 00       	call   c001321c <ReservedFilename::ReservedFilename(int)>
c001314f:	83 c4 10             	add    esp,0x10
c0013152:	89 1d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebx
c0013158:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0013160:	83 ec 0c             	sub    esp,0xc
c0013163:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013167:	e8 2b cb ff ff       	call   c000fc97 <malloc>
c001316c:	83 c4 10             	add    esp,0x10
c001316f:	89 c3                	mov    ebx,eax
c0013171:	83 ec 08             	sub    esp,0x8
c0013174:	68 02 ff ff 0f       	push   0xfffff02
c0013179:	53                   	push   ebx
c001317a:	e8 9d 00 00 00       	call   c001321c <ReservedFilename::ReservedFilename(int)>
c001317f:	83 c4 10             	add    esp,0x10
c0013182:	89 1d 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,ebx
c0013188:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013190:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013195:	7f 7f                	jg     c0013216 <UnixFile::UnixFile(int)+0x1ae>
c0013197:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001319f:	83 ec 0c             	sub    esp,0xc
c00131a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131a6:	e8 ec ca ff ff       	call   c000fc97 <malloc>
c00131ab:	83 c4 10             	add    esp,0x10
c00131ae:	89 c3                	mov    ebx,eax
c00131b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131b4:	05 10 ff ff 0f       	add    eax,0xfffff10
c00131b9:	83 ec 08             	sub    esp,0x8
c00131bc:	50                   	push   eax
c00131bd:	53                   	push   ebx
c00131be:	e8 59 00 00 00       	call   c001321c <ReservedFilename::ReservedFilename(int)>
c00131c3:	83 c4 10             	add    esp,0x10
c00131c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131ca:	89 1c 85 00 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e00],ebx
c00131d1:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00131d9:	83 ec 0c             	sub    esp,0xc
c00131dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131e0:	e8 b2 ca ff ff       	call   c000fc97 <malloc>
c00131e5:	83 c4 10             	add    esp,0x10
c00131e8:	89 c3                	mov    ebx,eax
c00131ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131ee:	05 20 ff ff 0f       	add    eax,0xfffff20
c00131f3:	83 ec 08             	sub    esp,0x8
c00131f6:	50                   	push   eax
c00131f7:	53                   	push   ebx
c00131f8:	e8 1f 00 00 00       	call   c001321c <ReservedFilename::ReservedFilename(int)>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013204:	89 1c 85 c0 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e40],ebx
c001320b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013210:	e9 7b ff ff ff       	jmp    c0013190 <UnixFile::UnixFile(int)+0x128>
c0013215:	90                   	nop
c0013216:	83 c4 28             	add    esp,0x28
c0013219:	5b                   	pop    ebx
c001321a:	c3                   	ret    
c001321b:	90                   	nop

c001321c <ReservedFilename::ReservedFilename(int)>:
c001321c:	83 ec 0c             	sub    esp,0xc
c001321f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013223:	83 ec 08             	sub    esp,0x8
c0013226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001322a:	50                   	push   eax
c001322b:	e8 38 fe ff ff       	call   c0013068 <UnixFile::UnixFile(int)>
c0013230:	83 c4 10             	add    esp,0x10
c0013233:	ba d0 44 02 c0       	mov    edx,0xc00244d0
c0013238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001323c:	89 10                	mov    DWORD PTR [eax],edx
c001323e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013242:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013246:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013249:	90                   	nop
c001324a:	83 c4 0c             	add    esp,0xc
c001324d:	c3                   	ret    

c001324e <UnixFile::~UnixFile()>:
c001324e:	83 ec 1c             	sub    esp,0x1c
c0013251:	ba b4 44 02 c0       	mov    edx,0xc00244b4
c0013256:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001325a:	89 10                	mov    DWORD PTR [eax],edx
c001325c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013260:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013263:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0013268:	7f 76                	jg     c00132e0 <UnixFile::~UnixFile()+0x92>
c001326a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013272:	83 ec 0c             	sub    esp,0xc
c0013275:	68 38 e2 02 c0       	push   0xc002e238
c001327a:	e8 13 ee 00 00       	call   c0022092 <LinkedList<UnixFile>::getFirstElement()>
c001327f:	83 c4 10             	add    esp,0x10
c0013282:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013286:	83 ec 0c             	sub    esp,0xc
c0013289:	68 38 e2 02 c0       	push   0xc002e238
c001328e:	e8 07 ee 00 00       	call   c002209a <LinkedList<UnixFile>::removeFirst()>
c0013293:	83 c4 10             	add    esp,0x10
c0013296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001329a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001329e:	74 43                	je     c00132e3 <UnixFile::~UnixFile()+0x95>
c00132a0:	83 ec 08             	sub    esp,0x8
c00132a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132a7:	68 38 e2 02 c0       	push   0xc002e238
c00132ac:	e8 0d ed 00 00       	call   c0021fbe <LinkedList<UnixFile>::addElement(UnixFile*)>
c00132b1:	83 c4 10             	add    esp,0x10
c00132b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132b8:	8d 50 01             	lea    edx,[eax+0x1]
c00132bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00132bf:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00132c4:	0f 94 c0             	sete   al
c00132c7:	0f b6 c0             	movzx  eax,al
c00132ca:	85 c0                	test   eax,eax
c00132cc:	74 a4                	je     c0013272 <UnixFile::~UnixFile()+0x24>
c00132ce:	83 ec 0c             	sub    esp,0xc
c00132d1:	68 68 44 02 c0       	push   0xc0024468
c00132d6:	e8 03 cd ff ff       	call   c000ffde <KePanic(char const*)>
c00132db:	83 c4 10             	add    esp,0x10
c00132de:	eb 92                	jmp    c0013272 <UnixFile::~UnixFile()+0x24>
c00132e0:	90                   	nop
c00132e1:	eb 01                	jmp    c00132e4 <UnixFile::~UnixFile()+0x96>
c00132e3:	90                   	nop
c00132e4:	90                   	nop
c00132e5:	83 c4 1c             	add    esp,0x1c
c00132e8:	c3                   	ret    
c00132e9:	90                   	nop

c00132ea <UnixFile::~UnixFile()>:
c00132ea:	83 ec 0c             	sub    esp,0xc
c00132ed:	83 ec 0c             	sub    esp,0xc
c00132f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132f4:	e8 55 ff ff ff       	call   c001324e <UnixFile::~UnixFile()>
c00132f9:	83 c4 10             	add    esp,0x10
c00132fc:	83 ec 08             	sub    esp,0x8
c00132ff:	6a 0c                	push   0xc
c0013301:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013305:	e8 15 a0 ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001330a:	83 c4 10             	add    esp,0x10
c001330d:	83 c4 0c             	add    esp,0xc
c0013310:	c3                   	ret    
c0013311:	90                   	nop

c0013312 <ReservedFilename::~ReservedFilename()>:
c0013312:	83 ec 0c             	sub    esp,0xc
c0013315:	ba d0 44 02 c0       	mov    edx,0xc00244d0
c001331a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331e:	89 10                	mov    DWORD PTR [eax],edx
c0013320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013324:	83 ec 0c             	sub    esp,0xc
c0013327:	50                   	push   eax
c0013328:	e8 21 ff ff ff       	call   c001324e <UnixFile::~UnixFile()>
c001332d:	83 c4 10             	add    esp,0x10
c0013330:	90                   	nop
c0013331:	83 c4 0c             	add    esp,0xc
c0013334:	c3                   	ret    
c0013335:	90                   	nop

c0013336 <ReservedFilename::~ReservedFilename()>:
c0013336:	83 ec 0c             	sub    esp,0xc
c0013339:	83 ec 0c             	sub    esp,0xc
c001333c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013340:	e8 cd ff ff ff       	call   c0013312 <ReservedFilename::~ReservedFilename()>
c0013345:	83 c4 10             	add    esp,0x10
c0013348:	83 ec 08             	sub    esp,0x8
c001334b:	6a 0c                	push   0xc
c001334d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013351:	e8 c9 9f ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0013356:	83 c4 10             	add    esp,0x10
c0013359:	83 c4 0c             	add    esp,0xc
c001335c:	c3                   	ret    

c001335d <KeGetFileFromDescriptor(int)>:
c001335d:	53                   	push   ebx
c001335e:	83 ec 10             	sub    esp,0x10
c0013361:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013365:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001336b:	53                   	push   ebx
c001336c:	68 88 44 02 c0       	push   0xc0024488
c0013371:	e8 ee 3b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001337f:	7f 30                	jg     c00133b1 <KeGetFileFromDescriptor(int)+0x54>
c0013381:	83 ec 0c             	sub    esp,0xc
c0013384:	68 38 e2 02 c0       	push   0xc002e238
c0013389:	e8 04 ed 00 00       	call   c0022092 <LinkedList<UnixFile>::getFirstElement()>
c001338e:	83 c4 10             	add    esp,0x10
c0013391:	8d 50 ff             	lea    edx,[eax-0x1]
c0013394:	83 fa fd             	cmp    edx,0xfffffffd
c0013397:	76 04                	jbe    c001339d <KeGetFileFromDescriptor(int)+0x40>
c0013399:	31 c0                	xor    eax,eax
c001339b:	eb 6e                	jmp    c001340b <KeGetFileFromDescriptor(int)+0xae>
c001339d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00133a0:	74 69                	je     c001340b <KeGetFileFromDescriptor(int)+0xae>
c00133a2:	52                   	push   edx
c00133a3:	52                   	push   edx
c00133a4:	50                   	push   eax
c00133a5:	68 38 e2 02 c0       	push   0xc002e238
c00133aa:	e8 8d ed 00 00       	call   c002213c <LinkedList<UnixFile>::getNext(UnixFile*)>
c00133af:	eb dd                	jmp    c001338e <KeGetFileFromDescriptor(int)+0x31>
c00133b1:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c00133b6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00133bc:	74 4d                	je     c001340b <KeGetFileFromDescriptor(int)+0xae>
c00133be:	a1 30 e2 02 c0       	mov    eax,ds:0xc002e230
c00133c3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00133c9:	74 40                	je     c001340b <KeGetFileFromDescriptor(int)+0xae>
c00133cb:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00133d0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00133d6:	74 33                	je     c001340b <KeGetFileFromDescriptor(int)+0xae>
c00133d8:	a1 24 e2 02 c0       	mov    eax,ds:0xc002e224
c00133dd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00133e3:	74 26                	je     c001340b <KeGetFileFromDescriptor(int)+0xae>
c00133e5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00133eb:	83 f8 08             	cmp    eax,0x8
c00133ee:	77 09                	ja     c00133f9 <KeGetFileFromDescriptor(int)+0x9c>
c00133f0:	8b 04 85 00 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e00]
c00133f7:	eb 12                	jmp    c001340b <KeGetFileFromDescriptor(int)+0xae>
c00133f9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00133ff:	83 fb 08             	cmp    ebx,0x8
c0013402:	77 95                	ja     c0013399 <KeGetFileFromDescriptor(int)+0x3c>
c0013404:	8b 04 9d c0 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1e40]
c001340b:	83 c4 08             	add    esp,0x8
c001340e:	5b                   	pop    ebx
c001340f:	c3                   	ret    

c0013410 <__static_initialization_and_destruction_0(int, int)>:
c0013410:	83 ec 0c             	sub    esp,0xc
c0013413:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013418:	75 34                	jne    c001344e <__static_initialization_and_destruction_0(int, int)+0x3e>
c001341a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013422:	75 2a                	jne    c001344e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013424:	83 ec 0c             	sub    esp,0xc
c0013427:	68 38 e2 02 c0       	push   0xc002e238
c001342c:	e8 4b eb 00 00       	call   c0021f7c <LinkedList<UnixFile>::LinkedList()>
c0013431:	83 c4 10             	add    esp,0x10
c0013434:	83 ec 04             	sub    esp,0x4
c0013437:	68 38 60 02 c0       	push   0xc0026038
c001343c:	68 38 e2 02 c0       	push   0xc002e238
c0013441:	68 7a 1f 02 c0       	push   0xc0021f7a
c0013446:	e8 84 9e ff ff       	call   c000d2cf <__cxa_atexit>
c001344b:	83 c4 10             	add    esp,0x10
c001344e:	90                   	nop
c001344f:	83 c4 0c             	add    esp,0xc
c0013452:	c3                   	ret    

c0013453 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013453:	83 ec 0c             	sub    esp,0xc
c0013456:	83 ec 08             	sub    esp,0x8
c0013459:	68 ff ff 00 00       	push   0xffff
c001345e:	6a 01                	push   0x1
c0013460:	e8 ab ff ff ff       	call   c0013410 <__static_initialization_and_destruction_0(int, int)>
c0013465:	83 c4 10             	add    esp,0x10
c0013468:	83 c4 0c             	add    esp,0xc
c001346b:	c3                   	ret    

c001346c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001346c:	53                   	push   ebx
c001346d:	8b 15 c8 67 02 c0    	mov    edx,DWORD PTR ds:0xc00267c8
c0013473:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013477:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001347b:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013481:	89 d8                	mov    eax,ebx
c0013483:	d1 e8                	shr    eax,1
c0013485:	01 d0                	add    eax,edx
c0013487:	80 e3 01             	and    bl,0x1
c001348a:	8a 10                	mov    dl,BYTE PTR [eax]
c001348c:	75 09                	jne    c0013497 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c001348e:	83 e2 f0             	and    edx,0xfffffff0
c0013491:	09 ca                	or     edx,ecx
c0013493:	88 10                	mov    BYTE PTR [eax],dl
c0013495:	5b                   	pop    ebx
c0013496:	c3                   	ret    
c0013497:	83 e2 0f             	and    edx,0xf
c001349a:	0f b6 c9             	movzx  ecx,cl
c001349d:	c1 e1 04             	shl    ecx,0x4
c00134a0:	09 ca                	or     edx,ecx
c00134a2:	88 10                	mov    BYTE PTR [eax],dl
c00134a4:	5b                   	pop    ebx
c00134a5:	c3                   	ret    

c00134a6 <Virt::getPageState(unsigned long)>:
c00134a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134aa:	8b 0d c8 67 02 c0    	mov    ecx,DWORD PTR ds:0xc00267c8
c00134b0:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00134b6:	89 d0                	mov    eax,edx
c00134b8:	d1 e8                	shr    eax,1
c00134ba:	80 e2 01             	and    dl,0x1
c00134bd:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00134c0:	74 03                	je     c00134c5 <Virt::getPageState(unsigned long)+0x1f>
c00134c2:	c1 e8 04             	shr    eax,0x4
c00134c5:	83 e0 0f             	and    eax,0xf
c00134c8:	c3                   	ret    

c00134c9 <Virt::allocateKernelVirtualPages(int)>:
c00134c9:	55                   	push   ebp
c00134ca:	31 ed                	xor    ebp,ebp
c00134cc:	57                   	push   edi
c00134cd:	31 ff                	xor    edi,edi
c00134cf:	56                   	push   esi
c00134d0:	53                   	push   ebx
c00134d1:	31 db                	xor    ebx,ebx
c00134d3:	83 ec 0c             	sub    esp,0xc
c00134d6:	8b 35 c4 67 02 c0    	mov    esi,DWORD PTR ds:0xc00267c4
c00134dc:	56                   	push   esi
c00134dd:	e8 c4 ff ff ff       	call   c00134a6 <Virt::getPageState(unsigned long)>
c00134e2:	5a                   	pop    edx
c00134e3:	84 c0                	test   al,al
c00134e5:	75 41                	jne    c0013528 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00134e7:	85 db                	test   ebx,ebx
c00134e9:	75 02                	jne    c00134ed <Virt::allocateKernelVirtualPages(int)+0x24>
c00134eb:	89 f5                	mov    ebp,esi
c00134ed:	83 c3 01             	add    ebx,0x1
c00134f0:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00134f4:	74 5f                	je     c0013555 <Virt::allocateKernelVirtualPages(int)+0x8c>
c00134f6:	83 c6 01             	add    esi,0x1
c00134f9:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00134ff:	76 34                	jbe    c0013535 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0013501:	c7 05 c4 67 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00267c4,0xc8000
c001350b:	f7 c7 01 00 00 00    	test   edi,0x1
c0013511:	75 2a                	jne    c001353d <Virt::allocateKernelVirtualPages(int)+0x74>
c0013513:	be 00 80 0c 00       	mov    esi,0xc8000
c0013518:	bf 01 00 00 00       	mov    edi,0x1
c001351d:	56                   	push   esi
c001351e:	e8 83 ff ff ff       	call   c00134a6 <Virt::getPageState(unsigned long)>
c0013523:	5a                   	pop    edx
c0013524:	84 c0                	test   al,al
c0013526:	74 bf                	je     c00134e7 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0013528:	31 db                	xor    ebx,ebx
c001352a:	83 c6 01             	add    esi,0x1
c001352d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013533:	77 cc                	ja     c0013501 <Virt::allocateKernelVirtualPages(int)+0x38>
c0013535:	89 35 c4 67 02 c0    	mov    DWORD PTR ds:0xc00267c4,esi
c001353b:	eb 9f                	jmp    c00134dc <Virt::allocateKernelVirtualPages(int)+0x13>
c001353d:	83 ec 0c             	sub    esp,0xc
c0013540:	68 e4 44 02 c0       	push   0xc00244e4
c0013545:	e8 94 ca ff ff       	call   c000ffde <KePanic(char const*)>
c001354a:	8b 35 c4 67 02 c0    	mov    esi,DWORD PTR ds:0xc00267c4
c0013550:	83 c4 10             	add    esp,0x10
c0013553:	eb 87                	jmp    c00134dc <Virt::allocateKernelVirtualPages(int)+0x13>
c0013555:	89 2d c4 67 02 c0    	mov    DWORD PTR ds:0xc00267c4,ebp
c001355b:	83 fb 01             	cmp    ebx,0x1
c001355e:	74 6f                	je     c00135cf <Virt::allocateKernelVirtualPages(int)+0x106>
c0013560:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013564:	85 c9                	test   ecx,ecx
c0013566:	74 49                	je     c00135b1 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0013568:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001356c:	89 e8                	mov    eax,ebp
c001356e:	31 db                	xor    ebx,ebx
c0013570:	8d 79 ff             	lea    edi,[ecx-0x1]
c0013573:	eb 18                	jmp    c001358d <Virt::allocateKernelVirtualPages(int)+0xc4>
c0013575:	6a 01                	push   0x1
c0013577:	83 c3 01             	add    ebx,0x1
c001357a:	50                   	push   eax
c001357b:	e8 ec fe ff ff       	call   c001346c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013580:	58                   	pop    eax
c0013581:	5a                   	pop    edx
c0013582:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013586:	74 29                	je     c00135b1 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0013588:	a1 c4 67 02 c0       	mov    eax,ds:0xc00267c4
c001358d:	8d 50 01             	lea    edx,[eax+0x1]
c0013590:	85 db                	test   ebx,ebx
c0013592:	89 15 c4 67 02 c0    	mov    DWORD PTR ds:0xc00267c4,edx
c0013598:	74 24                	je     c00135be <Virt::allocateKernelVirtualPages(int)+0xf5>
c001359a:	39 df                	cmp    edi,ebx
c001359c:	75 d7                	jne    c0013575 <Virt::allocateKernelVirtualPages(int)+0xac>
c001359e:	6a 03                	push   0x3
c00135a0:	83 c3 01             	add    ebx,0x1
c00135a3:	50                   	push   eax
c00135a4:	e8 c3 fe ff ff       	call   c001346c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135a9:	59                   	pop    ecx
c00135aa:	5e                   	pop    esi
c00135ab:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00135af:	75 d7                	jne    c0013588 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00135b1:	83 c4 0c             	add    esp,0xc
c00135b4:	89 e8                	mov    eax,ebp
c00135b6:	5b                   	pop    ebx
c00135b7:	c1 e0 0c             	shl    eax,0xc
c00135ba:	5e                   	pop    esi
c00135bb:	5f                   	pop    edi
c00135bc:	5d                   	pop    ebp
c00135bd:	c3                   	ret    
c00135be:	6a 02                	push   0x2
c00135c0:	bb 01 00 00 00       	mov    ebx,0x1
c00135c5:	50                   	push   eax
c00135c6:	e8 a1 fe ff ff       	call   c001346c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135cb:	58                   	pop    eax
c00135cc:	5a                   	pop    edx
c00135cd:	eb b9                	jmp    c0013588 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00135cf:	6a 04                	push   0x4
c00135d1:	8d 45 01             	lea    eax,[ebp+0x1]
c00135d4:	55                   	push   ebp
c00135d5:	a3 c4 67 02 c0       	mov    ds:0xc00267c4,eax
c00135da:	e8 8d fe ff ff       	call   c001346c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135df:	5b                   	pop    ebx
c00135e0:	89 e8                	mov    eax,ebp
c00135e2:	5e                   	pop    esi
c00135e3:	c1 e0 0c             	shl    eax,0xc
c00135e6:	83 c4 0c             	add    esp,0xc
c00135e9:	5b                   	pop    ebx
c00135ea:	5e                   	pop    esi
c00135eb:	5f                   	pop    edi
c00135ec:	5d                   	pop    ebp
c00135ed:	c3                   	ret    

c00135ee <Virt::freeSwapfilePage(unsigned long)>:
c00135ee:	53                   	push   ebx
c00135ef:	8b 15 4c e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e24c
c00135f5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00135f9:	b8 01 00 00 00       	mov    eax,0x1
c00135fe:	89 cb                	mov    ebx,ecx
c0013600:	d3 e0                	shl    eax,cl
c0013602:	c1 eb 05             	shr    ebx,0x5
c0013605:	f7 d0                	not    eax
c0013607:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001360a:	21 c1                	and    ecx,eax
c001360c:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001360f:	5b                   	pop    ebx
c0013610:	c3                   	ret    

c0013611 <Virt::swapIDToSector(unsigned long)>:
c0013611:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013615:	8b 15 cc 67 02 c0    	mov    edx,DWORD PTR ds:0xc00267cc
c001361b:	8b 0d d4 67 02 c0    	mov    ecx,DWORD PTR ds:0xc00267d4
c0013621:	0f af c2             	imul   eax,edx
c0013624:	01 c8                	add    eax,ecx
c0013626:	c3                   	ret    

c0013627 <Virt::allocateSwapfilePage()>:
c0013627:	55                   	push   ebp
c0013628:	31 d2                	xor    edx,edx
c001362a:	57                   	push   edi
c001362b:	56                   	push   esi
c001362c:	53                   	push   ebx
c001362d:	83 ec 0c             	sub    esp,0xc
c0013630:	8b 0d cc 67 02 c0    	mov    ecx,DWORD PTR ds:0xc00267cc
c0013636:	a1 d0 67 02 c0       	mov    eax,ds:0xc00267d0
c001363b:	f7 f1                	div    ecx
c001363d:	39 0d d0 67 02 c0    	cmp    DWORD PTR ds:0xc00267d0,ecx
c0013643:	72 2f                	jb     c0013674 <Virt::allocateSwapfilePage()+0x4d>
c0013645:	8b 35 4c e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e24c
c001364b:	8b 16                	mov    edx,DWORD PTR [esi]
c001364d:	f6 c2 01             	test   dl,0x1
c0013650:	74 3e                	je     c0013690 <Virt::allocateSwapfilePage()+0x69>
c0013652:	31 c9                	xor    ecx,ecx
c0013654:	bf 01 00 00 00       	mov    edi,0x1
c0013659:	eb 12                	jmp    c001366d <Virt::allocateSwapfilePage()+0x46>
c001365b:	89 fd                	mov    ebp,edi
c001365d:	89 ca                	mov    edx,ecx
c001365f:	d3 e5                	shl    ebp,cl
c0013661:	c1 ea 05             	shr    edx,0x5
c0013664:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013667:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013669:	85 ea                	test   edx,ebp
c001366b:	74 2c                	je     c0013699 <Virt::allocateSwapfilePage()+0x72>
c001366d:	83 c1 01             	add    ecx,0x1
c0013670:	39 c8                	cmp    eax,ecx
c0013672:	77 e7                	ja     c001365b <Virt::allocateSwapfilePage()+0x34>
c0013674:	83 ec 0c             	sub    esp,0xc
c0013677:	68 67 4a 02 c0       	push   0xc0024a67
c001367c:	e8 5d c9 ff ff       	call   c000ffde <KePanic(char const*)>
c0013681:	83 c4 10             	add    esp,0x10
c0013684:	31 c9                	xor    ecx,ecx
c0013686:	83 c4 0c             	add    esp,0xc
c0013689:	89 c8                	mov    eax,ecx
c001368b:	5b                   	pop    ebx
c001368c:	5e                   	pop    esi
c001368d:	5f                   	pop    edi
c001368e:	5d                   	pop    ebp
c001368f:	c3                   	ret    
c0013690:	89 f3                	mov    ebx,esi
c0013692:	bd 01 00 00 00       	mov    ebp,0x1
c0013697:	31 c9                	xor    ecx,ecx
c0013699:	09 ea                	or     edx,ebp
c001369b:	89 c8                	mov    eax,ecx
c001369d:	89 13                	mov    DWORD PTR [ebx],edx
c001369f:	83 c4 0c             	add    esp,0xc
c00136a2:	5b                   	pop    ebx
c00136a3:	5e                   	pop    esi
c00136a4:	5f                   	pop    edi
c00136a5:	5d                   	pop    ebp
c00136a6:	c3                   	ret    

c00136a7 <Virt::virtualMemorySetup()>:
c00136a7:	53                   	push   ebx
c00136a8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00136ad:	6a 0f                	push   0xf
c00136af:	53                   	push   ebx
c00136b0:	83 c3 01             	add    ebx,0x1
c00136b3:	e8 b4 fd ff ff       	call   c001346c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136b8:	58                   	pop    eax
c00136b9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00136bf:	5a                   	pop    edx
c00136c0:	75 eb                	jne    c00136ad <Virt::virtualMemorySetup()+0x6>
c00136c2:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00136c7:	6a 00                	push   0x0
c00136c9:	53                   	push   ebx
c00136ca:	83 c3 01             	add    ebx,0x1
c00136cd:	e8 9a fd ff ff       	call   c001346c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136d2:	59                   	pop    ecx
c00136d3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00136d9:	58                   	pop    eax
c00136da:	75 eb                	jne    c00136c7 <Virt::virtualMemorySetup()+0x20>
c00136dc:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00136e1:	6a 0f                	push   0xf
c00136e3:	53                   	push   ebx
c00136e4:	83 c3 01             	add    ebx,0x1
c00136e7:	e8 80 fd ff ff       	call   c001346c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136ec:	58                   	pop    eax
c00136ed:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00136f3:	5a                   	pop    edx
c00136f4:	75 eb                	jne    c00136e1 <Virt::virtualMemorySetup()+0x3a>
c00136f6:	5b                   	pop    ebx
c00136f7:	c3                   	ret    

c00136f8 <Virt::setupPageSwapping(int)>:
c00136f8:	53                   	push   ebx
c00136f9:	83 ec 0c             	sub    esp,0xc
c00136fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013700:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c0013705:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001370b:	8b 10                	mov    edx,DWORD PTR [eax]
c001370d:	53                   	push   ebx
c001370e:	c1 e3 0b             	shl    ebx,0xb
c0013711:	68 7e 4a 02 c0       	push   0xc0024a7e
c0013716:	50                   	push   eax
c0013717:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001371a:	89 1d d0 67 02 c0    	mov    DWORD PTR ds:0xc00267d0,ebx
c0013720:	c6 05 d8 67 02 c0 43 	mov    BYTE PTR ds:0xc00267d8,0x43
c0013727:	c1 eb 08             	shr    ebx,0x8
c001372a:	a3 d4 67 02 c0       	mov    ds:0xc00267d4,eax
c001372f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013732:	c7 05 cc 67 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00267cc,0x8
c001373c:	e8 56 c5 ff ff       	call   c000fc97 <malloc>
c0013741:	83 c4 0c             	add    esp,0xc
c0013744:	89 c1                	mov    ecx,eax
c0013746:	a3 4c e2 02 c0       	mov    ds:0xc002e24c,eax
c001374b:	31 d2                	xor    edx,edx
c001374d:	a1 d0 67 02 c0       	mov    eax,ds:0xc00267d0
c0013752:	f7 35 cc 67 02 c0    	div    DWORD PTR ds:0xc00267cc
c0013758:	c1 e8 05             	shr    eax,0x5
c001375b:	50                   	push   eax
c001375c:	6a 00                	push   0x0
c001375e:	51                   	push   ecx
c001375f:	e8 8c cd fe ff       	call   c00004f0 <memset>
c0013764:	83 c4 18             	add    esp,0x18
c0013767:	5b                   	pop    ebx
c0013768:	c3                   	ret    
c0013769:	90                   	nop

c001376a <VAS::setCPUSpecific(unsigned long)>:
c001376a:	c3                   	ret    
c001376b:	90                   	nop

c001376c <VAS::VAS(VAS*)>:
c001376c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013770:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013777:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001377b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013782:	90                   	nop
c0013783:	c3                   	ret    

c0013784 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013788:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001378d:	89 c2                	mov    edx,eax
c001378f:	c1 e8 0a             	shr    eax,0xa
c0013792:	c1 ea 16             	shr    edx,0x16
c0013795:	83 f9 01             	cmp    ecx,0x1
c0013798:	19 c9                	sbb    ecx,ecx
c001379a:	c1 e2 0c             	shl    edx,0xc
c001379d:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00137a3:	25 fc 0f 00 00       	and    eax,0xffc
c00137a8:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00137af:	01 d0                	add    eax,edx
c00137b1:	c3                   	ret    

c00137b2 <VAS::getPageTableEntry(unsigned long)>:
c00137b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00137b6:	89 ca                	mov    edx,ecx
c00137b8:	c1 e9 0a             	shr    ecx,0xa
c00137bb:	c1 ea 16             	shr    edx,0x16
c00137be:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00137c4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00137ca:	c1 e0 0c             	shl    eax,0xc
c00137cd:	8d 04 08             	lea    eax,[eax+ecx*1]
c00137d0:	c3                   	ret    

c00137d1 <Virt::freeKernelVirtualPages(unsigned long)>:
c00137d1:	55                   	push   ebp
c00137d2:	57                   	push   edi
c00137d3:	bf 01 00 00 00       	mov    edi,0x1
c00137d8:	56                   	push   esi
c00137d9:	53                   	push   ebx
c00137da:	83 ec 1c             	sub    esp,0x1c
c00137dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00137e1:	c1 ee 0c             	shr    esi,0xc
c00137e4:	eb 48                	jmp    c001382e <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00137e6:	83 ec 08             	sub    esp,0x8
c00137e9:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c00137ee:	55                   	push   ebp
c00137ef:	50                   	push   eax
c00137f0:	e8 bd ff ff ff       	call   c00137b2 <VAS::getPageTableEntry(unsigned long)>
c00137f5:	83 c4 10             	add    esp,0x10
c00137f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00137fa:	f6 c6 04             	test   dh,0x4
c00137fd:	75 70                	jne    c001386f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00137ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013805:	83 fb 04             	cmp    ebx,0x4
c0013808:	0f 84 8a 00 00 00    	je     c0013898 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001380e:	83 fb 02             	cmp    ebx,0x2
c0013811:	0f 84 9a 00 00 00    	je     c00138b1 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013817:	83 fb 03             	cmp    ebx,0x3
c001381a:	0f 84 be 00 00 00    	je     c00138de <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013820:	83 fb 01             	cmp    ebx,0x1
c0013823:	0f 84 a2 00 00 00    	je     c00138cb <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013829:	83 c6 01             	add    esi,0x1
c001382c:	31 ff                	xor    edi,edi
c001382e:	56                   	push   esi
c001382f:	89 f5                	mov    ebp,esi
c0013831:	e8 70 fc ff ff       	call   c00134a6 <Virt::getPageState(unsigned long)>
c0013836:	c1 e5 0c             	shl    ebp,0xc
c0013839:	0f b6 d8             	movzx  ebx,al
c001383c:	5a                   	pop    edx
c001383d:	85 db                	test   ebx,ebx
c001383f:	75 a5                	jne    c00137e6 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013841:	83 ec 0c             	sub    esp,0xc
c0013844:	68 95 4a 02 c0       	push   0xc0024a95
c0013849:	e8 90 c7 ff ff       	call   c000ffde <KePanic(char const*)>
c001384e:	5a                   	pop    edx
c001384f:	59                   	pop    ecx
c0013850:	55                   	push   ebp
c0013851:	8b 2d 50 e2 02 c0    	mov    ebp,DWORD PTR ds:0xc002e250
c0013857:	55                   	push   ebp
c0013858:	e8 55 ff ff ff       	call   c00137b2 <VAS::getPageTableEntry(unsigned long)>
c001385d:	83 c4 10             	add    esp,0x10
c0013860:	8b 10                	mov    edx,DWORD PTR [eax]
c0013862:	f6 c6 04             	test   dh,0x4
c0013865:	75 08                	jne    c001386f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013867:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001386d:	eb ba                	jmp    c0013829 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001386f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013873:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013879:	83 ec 0c             	sub    esp,0xc
c001387c:	52                   	push   edx
c001387d:	e8 e7 c8 ff ff       	call   c0010169 <Phys::freePage(unsigned long)>
c0013882:	83 c4 10             	add    esp,0x10
c0013885:	83 fb 04             	cmp    ebx,0x4
c0013888:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001388c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013892:	0f 85 76 ff ff ff    	jne    c001380e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0013898:	83 e7 01             	and    edi,0x1
c001389b:	75 46                	jne    c00138e3 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001389d:	c7 44 24 30 04 45 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024504
c00138a5:	83 c4 1c             	add    esp,0x1c
c00138a8:	5b                   	pop    ebx
c00138a9:	5e                   	pop    esi
c00138aa:	5f                   	pop    edi
c00138ab:	5d                   	pop    ebp
c00138ac:	e9 2d c7 ff ff       	jmp    c000ffde <KePanic(char const*)>
c00138b1:	83 e7 01             	and    edi,0x1
c00138b4:	75 15                	jne    c00138cb <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00138b6:	83 ec 0c             	sub    esp,0xc
c00138b9:	68 b1 4a 02 c0       	push   0xc0024ab1
c00138be:	e8 1b c7 ff ff       	call   c000ffde <KePanic(char const*)>
c00138c3:	83 c4 10             	add    esp,0x10
c00138c6:	e9 5e ff ff ff       	jmp    c0013829 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00138cb:	83 ec 08             	sub    esp,0x8
c00138ce:	6a 00                	push   0x0
c00138d0:	56                   	push   esi
c00138d1:	e8 96 fb ff ff       	call   c001346c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00138d6:	83 c4 10             	add    esp,0x10
c00138d9:	e9 4b ff ff ff       	jmp    c0013829 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00138de:	83 e7 01             	and    edi,0x1
c00138e1:	75 16                	jne    c00138f9 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00138e3:	83 ec 08             	sub    esp,0x8
c00138e6:	6a 00                	push   0x0
c00138e8:	56                   	push   esi
c00138e9:	e8 7e fb ff ff       	call   c001346c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00138ee:	83 c4 10             	add    esp,0x10
c00138f1:	83 c4 1c             	add    esp,0x1c
c00138f4:	5b                   	pop    ebx
c00138f5:	5e                   	pop    esi
c00138f6:	5f                   	pop    edi
c00138f7:	5d                   	pop    ebp
c00138f8:	c3                   	ret    
c00138f9:	c7 44 24 30 cd 4a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024acd
c0013901:	83 c4 1c             	add    esp,0x1c
c0013904:	5b                   	pop    ebx
c0013905:	5e                   	pop    esi
c0013906:	5f                   	pop    edi
c0013907:	5d                   	pop    ebp
c0013908:	e9 d1 c6 ff ff       	jmp    c000ffde <KePanic(char const*)>
c001390d:	90                   	nop

c001390e <VAS::freeAllocatedPages(unsigned long)>:
c001390e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013912:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013916:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001391a:	74 09                	je     c0013925 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001391c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013920:	e9 ac fe ff ff       	jmp    c00137d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013925:	c7 44 24 04 28 45 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024528
c001392d:	e9 32 36 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0013932 <VAS::virtualToPhysical(unsigned long)>:
c0013932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013936:	50                   	push   eax
c0013937:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001393b:	52                   	push   edx
c001393c:	e8 71 fe ff ff       	call   c00137b2 <VAS::getPageTableEntry(unsigned long)>
c0013941:	59                   	pop    ecx
c0013942:	8b 00                	mov    eax,DWORD PTR [eax]
c0013944:	5a                   	pop    edx
c0013945:	25 00 f0 ff ff       	and    eax,0xfffff000
c001394a:	c3                   	ret    
c001394b:	90                   	nop

c001394c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c001394c:	55                   	push   ebp
c001394d:	57                   	push   edi
c001394e:	56                   	push   esi
c001394f:	53                   	push   ebx
c0013950:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013954:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013958:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001395c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013960:	85 db                	test   ebx,ebx
c0013962:	7e 24                	jle    c0013988 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013964:	c1 e3 0c             	shl    ebx,0xc
c0013967:	01 f3                	add    ebx,esi
c0013969:	56                   	push   esi
c001396a:	81 c6 00 10 00 00    	add    esi,0x1000
c0013970:	55                   	push   ebp
c0013971:	e8 3c fe ff ff       	call   c00137b2 <VAS::getPageTableEntry(unsigned long)>
c0013976:	5a                   	pop    edx
c0013977:	59                   	pop    ecx
c0013978:	8b 08                	mov    ecx,DWORD PTR [eax]
c001397a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001397e:	21 f9                	and    ecx,edi
c0013980:	09 d1                	or     ecx,edx
c0013982:	39 f3                	cmp    ebx,esi
c0013984:	89 08                	mov    DWORD PTR [eax],ecx
c0013986:	75 e1                	jne    c0013969 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0013988:	5b                   	pop    ebx
c0013989:	5e                   	pop    esi
c001398a:	5f                   	pop    edi
c001398b:	5d                   	pop    ebp
c001398c:	c3                   	ret    
c001398d:	90                   	nop

c001398e <VAS::VAS()>:
c001398e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013992:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013999:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001399d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00139a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139a8:	a3 50 e2 02 c0       	mov    ds:0xc002e250,eax
c00139ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139b1:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00139b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139b9:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00139bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139c0:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00139c7:	ba 7d 70 02 c0       	mov    edx,0xc002707d
c00139cc:	b8 00 70 02 c0       	mov    eax,0xc0027000
c00139d1:	29 c2                	sub    edx,eax
c00139d3:	89 d0                	mov    eax,edx
c00139d5:	05 ff 0f 00 00       	add    eax,0xfff
c00139da:	c1 e8 0c             	shr    eax,0xc
c00139dd:	89 c2                	mov    edx,eax
c00139df:	b8 00 70 02 c0       	mov    eax,0xc0027000
c00139e4:	6a 04                	push   0x4
c00139e6:	6a ff                	push   0xffffffff
c00139e8:	52                   	push   edx
c00139e9:	50                   	push   eax
c00139ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00139ee:	e8 59 ff ff ff       	call   c001394c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00139f3:	83 c4 14             	add    esp,0x14
c00139f6:	90                   	nop
c00139f7:	c3                   	ret    

c00139f8 <VAS::setToWriteCombining(unsigned long, int)>:
c00139f8:	a1 e4 ea 02 c0       	mov    eax,ds:0xc002eae4
c00139fd:	50                   	push   eax
c00139fe:	6a ff                	push   0xffffffff
c0013a00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013a04:	52                   	push   edx
c0013a05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013a09:	51                   	push   ecx
c0013a0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a0e:	50                   	push   eax
c0013a0f:	e8 38 ff ff ff       	call   c001394c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013a14:	83 c4 14             	add    esp,0x14
c0013a17:	c3                   	ret    

c0013a18 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a1c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013a1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a23:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013a26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013a2b:	83 f8 01             	cmp    eax,0x1
c0013a2e:	19 c0                	sbb    eax,eax
c0013a30:	83 ca 03             	or     edx,0x3
c0013a33:	83 e0 fc             	and    eax,0xfffffffc
c0013a36:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013a3d:	0f 20 d8             	mov    eax,cr3
c0013a40:	0f 22 d8             	mov    cr3,eax
c0013a43:	c3                   	ret    

c0013a44 <VAS::~VAS()>:
c0013a44:	83 ec 2c             	sub    esp,0x2c
c0013a47:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a4f:	fa                   	cli    
c0013a50:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013a55:	83 c0 01             	add    eax,0x1
c0013a58:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0013a5d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a64:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013a67:	8b 80 72 05 00 00    	mov    eax,DWORD PTR [eax+0x572]
c0013a6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013a71:	6a 01                	push   0x1
c0013a73:	50                   	push   eax
c0013a74:	e8 9f ff ff ff       	call   c0013a18 <VAS::mapOtherVASIn(bool, VAS*)>
c0013a79:	83 c4 0c             	add    esp,0xc
c0013a7c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013a84:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013a8c:	0f 8f d8 00 00 00    	jg     c0013b6a <VAS::~VAS()+0x126>
c0013a92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a96:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013a99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a9d:	c1 e2 02             	shl    edx,0x2
c0013aa0:	01 d0                	add    eax,edx
c0013aa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013aa4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aac:	83 e0 01             	and    eax,0x1
c0013aaf:	0f 84 ab 00 00 00    	je     c0013b60 <VAS::~VAS()+0x11c>
c0013ab5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013abd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013ac5:	7f 74                	jg     c0013b3b <VAS::~VAS()+0xf7>
c0013ac7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013acb:	c1 e0 0a             	shl    eax,0xa
c0013ace:	89 c2                	mov    edx,eax
c0013ad0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ad4:	01 d0                	add    eax,edx
c0013ad6:	c1 e0 0c             	shl    eax,0xc
c0013ad9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013add:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ae4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013ae7:	8b 80 72 05 00 00    	mov    eax,DWORD PTR [eax+0x572]
c0013aed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013af1:	6a 01                	push   0x1
c0013af3:	50                   	push   eax
c0013af4:	e8 8b fc ff ff       	call   c0013784 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013af9:	83 c4 0c             	add    esp,0xc
c0013afc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b0e:	25 01 04 00 00       	and    eax,0x401
c0013b13:	3d 01 04 00 00       	cmp    eax,0x401
c0013b18:	75 1a                	jne    c0013b34 <VAS::~VAS()+0xf0>
c0013b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b23:	83 ec 0c             	sub    esp,0xc
c0013b26:	50                   	push   eax
c0013b27:	e8 3d c6 ff ff       	call   c0010169 <Phys::freePage(unsigned long)>
c0013b2c:	83 c4 10             	add    esp,0x10
c0013b2f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b34:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013b39:	eb 82                	jmp    c0013abd <VAS::~VAS()+0x79>
c0013b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b3f:	25 00 04 00 00       	and    eax,0x400
c0013b44:	74 1a                	je     c0013b60 <VAS::~VAS()+0x11c>
c0013b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b4a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b4f:	83 ec 0c             	sub    esp,0xc
c0013b52:	50                   	push   eax
c0013b53:	e8 11 c6 ff ff       	call   c0010169 <Phys::freePage(unsigned long)>
c0013b58:	83 c4 10             	add    esp,0x10
c0013b5b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b60:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013b65:	e9 1a ff ff ff       	jmp    c0013a84 <VAS::~VAS()+0x40>
c0013b6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b6e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b71:	83 ec 0c             	sub    esp,0xc
c0013b74:	50                   	push   eax
c0013b75:	e8 57 fc ff ff       	call   c00137d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013b7a:	83 c4 10             	add    esp,0x10
c0013b7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b81:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013b84:	83 ec 0c             	sub    esp,0xc
c0013b87:	50                   	push   eax
c0013b88:	e8 dc c5 ff ff       	call   c0010169 <Phys::freePage(unsigned long)>
c0013b8d:	83 c4 10             	add    esp,0x10
c0013b90:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b95:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0013b9d:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013ba2:	85 c0                	test   eax,eax
c0013ba4:	75 01                	jne    c0013ba7 <VAS::~VAS()+0x163>
c0013ba6:	fb                   	sti    
c0013ba7:	90                   	nop
c0013ba8:	83 c4 2c             	add    esp,0x2c
c0013bab:	c3                   	ret    

c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013bac:	55                   	push   ebp
c0013bad:	57                   	push   edi
c0013bae:	56                   	push   esi
c0013baf:	53                   	push   ebx
c0013bb0:	83 ec 1c             	sub    esp,0x1c
c0013bb3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013bb7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013bbb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013bc1:	77 08                	ja     c0013bcb <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013bc3:	0f 20 d8             	mov    eax,cr3
c0013bc6:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013bc9:	75 49                	jne    c0013c14 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013bcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013bcf:	09 d8                	or     eax,ebx
c0013bd1:	a9 ff 0f 00 00       	test   eax,0xfff
c0013bd6:	75 59                	jne    c0013c31 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013bd8:	89 de                	mov    esi,ebx
c0013bda:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013bdd:	c1 ee 16             	shr    esi,0x16
c0013be0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013be7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013beb:	74 56                	je     c0013c43 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013bed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013bf1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013bf5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013bfb:	c1 eb 0a             	shr    ebx,0xa
c0013bfe:	c1 e6 0c             	shl    esi,0xc
c0013c01:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013c07:	09 d0                	or     eax,edx
c0013c09:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013c0c:	83 c4 1c             	add    esp,0x1c
c0013c0f:	5b                   	pop    ebx
c0013c10:	5e                   	pop    esi
c0013c11:	5f                   	pop    edi
c0013c12:	5d                   	pop    ebp
c0013c13:	c3                   	ret    
c0013c14:	83 ec 0c             	sub    esp,0xc
c0013c17:	68 4c 45 02 c0       	push   0xc002454c
c0013c1c:	e8 43 33 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013c21:	83 c4 10             	add    esp,0x10
c0013c24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c28:	09 d8                	or     eax,ebx
c0013c2a:	a9 ff 0f 00 00       	test   eax,0xfff
c0013c2f:	74 a7                	je     c0013bd8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013c31:	83 ec 0c             	sub    esp,0xc
c0013c34:	68 b4 45 02 c0       	push   0xc00245b4
c0013c39:	e8 a0 c3 ff ff       	call   c000ffde <KePanic(char const*)>
c0013c3e:	83 c4 10             	add    esp,0x10
c0013c41:	eb 95                	jmp    c0013bd8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013c47:	e8 86 c5 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0013c4c:	83 ec 0c             	sub    esp,0xc
c0013c4f:	89 c5                	mov    ebp,eax
c0013c51:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013c57:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013c5b:	6a 01                	push   0x1
c0013c5d:	e8 67 f8 ff ff       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c0013c62:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013c69:	6a 01                	push   0x1
c0013c6b:	50                   	push   eax
c0013c6c:	55                   	push   ebp
c0013c6d:	81 cd 07 04 00 00    	or     ebp,0x407
c0013c73:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013c77:	51                   	push   ecx
c0013c78:	e8 19 01 00 00       	call   c0013d96 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013c7d:	83 c4 1c             	add    esp,0x1c
c0013c80:	68 00 10 00 00       	push   0x1000
c0013c85:	6a 00                	push   0x0
c0013c87:	50                   	push   eax
c0013c88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c8c:	e8 5f c8 fe ff       	call   c00004f0 <memset>
c0013c91:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c95:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013c98:	e8 34 fb ff ff       	call   c00137d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013c9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ca1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013ca4:	83 c4 10             	add    esp,0x10
c0013ca7:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013caa:	e9 3e ff ff ff       	jmp    c0013bed <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013caf:	90                   	nop

c0013cb0 <VAS::allocatePages(int, int)>:
c0013cb0:	55                   	push   ebp
c0013cb1:	57                   	push   edi
c0013cb2:	56                   	push   esi
c0013cb3:	53                   	push   ebx
c0013cb4:	83 ec 1c             	sub    esp,0x1c
c0013cb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013cbb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013cbf:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013cc3:	75 71                	jne    c0013d36 <VAS::allocatePages(int, int)+0x86>
c0013cc5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013cc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ccc:	85 c0                	test   eax,eax
c0013cce:	74 4d                	je     c0013d1d <VAS::allocatePages(int, int)+0x6d>
c0013cd0:	89 dd                	mov    ebp,ebx
c0013cd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013cd6:	c1 e5 0c             	shl    ebp,0xc
c0013cd9:	01 c5                	add    ebp,eax
c0013cdb:	85 db                	test   ebx,ebx
c0013cdd:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013ce0:	7e 29                	jle    c0013d0b <VAS::allocatePages(int, int)+0x5b>
c0013ce2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013ce6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013cea:	81 cf 00 04 00 00    	or     edi,0x400
c0013cf0:	e8 dd c4 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0013cf5:	57                   	push   edi
c0013cf6:	53                   	push   ebx
c0013cf7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013cfd:	50                   	push   eax
c0013cfe:	56                   	push   esi
c0013cff:	e8 a8 fe ff ff       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c0013d04:	83 c4 10             	add    esp,0x10
c0013d07:	39 dd                	cmp    ebp,ebx
c0013d09:	75 e5                	jne    c0013cf0 <VAS::allocatePages(int, int)+0x40>
c0013d0b:	0f 20 d8             	mov    eax,cr3
c0013d0e:	0f 22 d8             	mov    cr3,eax
c0013d11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d15:	83 c4 1c             	add    esp,0x1c
c0013d18:	5b                   	pop    ebx
c0013d19:	5e                   	pop    esi
c0013d1a:	5f                   	pop    edi
c0013d1b:	5d                   	pop    ebp
c0013d1c:	c3                   	ret    
c0013d1d:	83 ec 0c             	sub    esp,0xc
c0013d20:	68 d8 45 02 c0       	push   0xc00245d8
c0013d25:	e8 b4 c2 ff ff       	call   c000ffde <KePanic(char const*)>
c0013d2a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013d2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d31:	83 c4 10             	add    esp,0x10
c0013d34:	eb 9a                	jmp    c0013cd0 <VAS::allocatePages(int, int)+0x20>
c0013d36:	83 ec 0c             	sub    esp,0xc
c0013d39:	53                   	push   ebx
c0013d3a:	e8 8a f7 ff ff       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c0013d3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d43:	83 c4 10             	add    esp,0x10
c0013d46:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013d4b:	77 37                	ja     c0013d84 <VAS::allocatePages(int, int)+0xd4>
c0013d4d:	85 db                	test   ebx,ebx
c0013d4f:	7e ba                	jle    c0013d0b <VAS::allocatePages(int, int)+0x5b>
c0013d51:	c1 e3 0c             	shl    ebx,0xc
c0013d54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d58:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013d5c:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013d5f:	81 cf 00 04 00 00    	or     edi,0x400
c0013d65:	89 c3                	mov    ebx,eax
c0013d67:	e8 66 c4 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0013d6c:	57                   	push   edi
c0013d6d:	53                   	push   ebx
c0013d6e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013d74:	50                   	push   eax
c0013d75:	56                   	push   esi
c0013d76:	e8 31 fe ff ff       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c0013d7b:	83 c4 10             	add    esp,0x10
c0013d7e:	39 dd                	cmp    ebp,ebx
c0013d80:	75 e5                	jne    c0013d67 <VAS::allocatePages(int, int)+0xb7>
c0013d82:	eb 87                	jmp    c0013d0b <VAS::allocatePages(int, int)+0x5b>
c0013d84:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013d88:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013d8d:	09 c2                	or     edx,eax
c0013d8f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013d93:	eb b8                	jmp    c0013d4d <VAS::allocatePages(int, int)+0x9d>
c0013d95:	90                   	nop

c0013d96 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013d96:	55                   	push   ebp
c0013d97:	57                   	push   edi
c0013d98:	56                   	push   esi
c0013d99:	53                   	push   ebx
c0013d9a:	83 ec 0c             	sub    esp,0xc
c0013d9d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013da1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013da5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013da9:	85 db                	test   ebx,ebx
c0013dab:	7e 2f                	jle    c0013ddc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013dad:	c1 e3 0c             	shl    ebx,0xc
c0013db0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013db4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013db8:	01 d3                	add    ebx,edx
c0013dba:	55                   	push   ebp
c0013dbb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013dbf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013dc3:	29 c2                	sub    edx,eax
c0013dc5:	01 f2                	add    edx,esi
c0013dc7:	52                   	push   edx
c0013dc8:	56                   	push   esi
c0013dc9:	81 c6 00 10 00 00    	add    esi,0x1000
c0013dcf:	57                   	push   edi
c0013dd0:	e8 d7 fd ff ff       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c0013dd5:	83 c4 10             	add    esp,0x10
c0013dd8:	39 de                	cmp    esi,ebx
c0013dda:	75 de                	jne    c0013dba <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013ddc:	0f 20 d8             	mov    eax,cr3
c0013ddf:	0f 22 d8             	mov    cr3,eax
c0013de2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013de6:	83 c4 0c             	add    esp,0xc
c0013de9:	5b                   	pop    ebx
c0013dea:	5e                   	pop    esi
c0013deb:	5f                   	pop    edi
c0013dec:	5d                   	pop    ebp
c0013ded:	c3                   	ret    

c0013dee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013dee:	55                   	push   ebp
c0013def:	57                   	push   edi
c0013df0:	56                   	push   esi
c0013df1:	53                   	push   ebx
c0013df2:	83 ec 1c             	sub    esp,0x1c
c0013df5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013df9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013dfd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013e01:	09 f8                	or     eax,edi
c0013e03:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013e07:	a9 ff 0f 00 00       	test   eax,0xfff
c0013e0c:	75 4f                	jne    c0013e5d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013e0e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013e12:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013e15:	c1 eb 16             	shr    ebx,0x16
c0013e18:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013e1f:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013e23:	74 52                	je     c0013e77 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013e25:	0f b6 f2             	movzx  esi,dl
c0013e28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013e2c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013e30:	c1 e8 0a             	shr    eax,0xa
c0013e33:	83 fe 01             	cmp    esi,0x1
c0013e36:	19 d2                	sbb    edx,edx
c0013e38:	c1 e3 0c             	shl    ebx,0xc
c0013e3b:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013e41:	25 fc 0f 00 00       	and    eax,0xffc
c0013e46:	01 d8                	add    eax,ebx
c0013e48:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013e4c:	09 d9                	or     ecx,ebx
c0013e4e:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013e55:	83 c4 1c             	add    esp,0x1c
c0013e58:	5b                   	pop    ebx
c0013e59:	5e                   	pop    esi
c0013e5a:	5f                   	pop    edi
c0013e5b:	5d                   	pop    ebp
c0013e5c:	c3                   	ret    
c0013e5d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013e61:	83 ec 0c             	sub    esp,0xc
c0013e64:	68 04 46 02 c0       	push   0xc0024604
c0013e69:	e8 70 c1 ff ff       	call   c000ffde <KePanic(char const*)>
c0013e6e:	83 c4 10             	add    esp,0x10
c0013e71:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013e75:	eb 97                	jmp    c0013e0e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013e77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013e7b:	e8 52 c3 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0013e80:	83 ec 0c             	sub    esp,0xc
c0013e83:	89 c5                	mov    ebp,eax
c0013e85:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013e8b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013e8f:	6a 01                	push   0x1
c0013e91:	e8 33 f6 ff ff       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c0013e96:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013e9d:	6a 01                	push   0x1
c0013e9f:	50                   	push   eax
c0013ea0:	55                   	push   ebp
c0013ea1:	81 cd 07 04 00 00    	or     ebp,0x407
c0013ea7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013eab:	51                   	push   ecx
c0013eac:	e8 e5 fe ff ff       	call   c0013d96 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013eb1:	83 c4 1c             	add    esp,0x1c
c0013eb4:	68 00 10 00 00       	push   0x1000
c0013eb9:	6a 00                	push   0x0
c0013ebb:	50                   	push   eax
c0013ebc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ec0:	e8 2b c6 fe ff       	call   c00004f0 <memset>
c0013ec5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ec9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013ecc:	e8 00 f9 ff ff       	call   c00137d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013ed1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0013eda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ede:	e9 42 ff ff ff       	jmp    c0013e25 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013ee3:	90                   	nop

c0013ee4 <VAS::VAS(bool)>:
c0013ee4:	53                   	push   ebx
c0013ee5:	83 ec 28             	sub    esp,0x28
c0013ee8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013eec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013ef0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ef4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013efb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013eff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013f06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f0a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013f0e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013f11:	e8 bc c2 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0013f16:	89 c2                	mov    edx,eax
c0013f18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f1c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013f1f:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0013f25:	83 ec 0c             	sub    esp,0xc
c0013f28:	6a 01                	push   0x1
c0013f2a:	e8 9a f5 ff ff       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c0013f2f:	83 c4 10             	add    esp,0x10
c0013f32:	89 c2                	mov    edx,eax
c0013f34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f38:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013f3b:	83 ec 0c             	sub    esp,0xc
c0013f3e:	6a 03                	push   0x3
c0013f40:	6a 01                	push   0x1
c0013f42:	52                   	push   edx
c0013f43:	50                   	push   eax
c0013f44:	53                   	push   ebx
c0013f45:	e8 4c fe ff ff       	call   c0013d96 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013f4a:	83 c4 20             	add    esp,0x20
c0013f4d:	89 c2                	mov    edx,eax
c0013f4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f53:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013f56:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013f5e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013f66:	7f 1d                	jg     c0013f85 <VAS::VAS(bool)+0xa1>
c0013f68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f6f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013f73:	c1 e2 02             	shl    edx,0x2
c0013f76:	01 d0                	add    eax,edx
c0013f78:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013f7e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013f83:	eb d9                	jmp    c0013f5e <VAS::VAS(bool)+0x7a>
c0013f85:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013f8d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013f95:	7f 59                	jg     c0013ff0 <VAS::VAS(bool)+0x10c>
c0013f97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f9b:	2d 00 02 00 00       	sub    eax,0x200
c0013fa0:	c1 e0 0c             	shl    eax,0xc
c0013fa3:	89 c2                	mov    edx,eax
c0013fa5:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013faa:	89 d1                	mov    ecx,edx
c0013fac:	09 c1                	or     ecx,eax
c0013fae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fb2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013fb5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fb9:	c1 e2 02             	shl    edx,0x2
c0013fbc:	01 d0                	add    eax,edx
c0013fbe:	83 c9 05             	or     ecx,0x5
c0013fc1:	89 ca                	mov    edx,ecx
c0013fc3:	89 10                	mov    DWORD PTR [eax],edx
c0013fc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fc9:	2d 40 03 00 00       	sub    eax,0x340
c0013fce:	83 f8 7f             	cmp    eax,0x7f
c0013fd1:	77 16                	ja     c0013fe9 <VAS::VAS(bool)+0x105>
c0013fd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fd7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013fda:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fde:	c1 e2 02             	shl    edx,0x2
c0013fe1:	01 d0                	add    eax,edx
c0013fe3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013fe9:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013fee:	eb 9d                	jmp    c0013f8d <VAS::VAS(bool)+0xa9>
c0013ff0:	8b 15 e8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae8
c0013ff6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ffa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ffd:	05 20 0c 00 00       	add    eax,0xc20
c0014002:	81 ca 03 40 00 00    	or     edx,0x4003
c0014008:	89 10                	mov    DWORD PTR [eax],edx
c001400a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001400e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014011:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0014016:	09 c2                	or     edx,eax
c0014018:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001401c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001401f:	05 fc 0f 00 00       	add    eax,0xffc
c0014024:	83 ca 03             	or     edx,0x3
c0014027:	89 10                	mov    DWORD PTR [eax],edx
c0014029:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001402e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014034:	83 ec 0c             	sub    esp,0xc
c0014037:	50                   	push   eax
c0014038:	e8 1d 5c ff ff       	call   c0009c5a <Device::getName()>
c001403d:	83 c4 10             	add    esp,0x10
c0014040:	83 ec 08             	sub    esp,0x8
c0014043:	68 e7 4a 02 c0       	push   0xc0024ae7
c0014048:	50                   	push   eax
c0014049:	e8 02 c7 fe ff       	call   c0000750 <strcmp>
c001404e:	83 c4 10             	add    esp,0x10
c0014051:	85 c0                	test   eax,eax
c0014053:	0f 94 c0             	sete   al
c0014056:	0f b6 c0             	movzx  eax,al
c0014059:	85 c0                	test   eax,eax
c001405b:	74 68                	je     c00140c5 <VAS::VAS(bool)+0x1e1>
c001405d:	fa                   	cli    
c001405e:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0014063:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014069:	05 68 09 00 00       	add    eax,0x968
c001406e:	83 ec 0c             	sub    esp,0xc
c0014071:	50                   	push   eax
c0014072:	e8 13 af ff ff       	call   c000ef8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0014077:	83 c4 10             	add    esp,0x10
c001407a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001407f:	89 c3                	mov    ebx,eax
c0014081:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0014086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001408c:	05 68 09 00 00       	add    eax,0x968
c0014091:	83 ec 0c             	sub    esp,0xc
c0014094:	50                   	push   eax
c0014095:	e8 f0 ae ff ff       	call   c000ef8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001409a:	83 c4 10             	add    esp,0x10
c001409d:	83 ec 08             	sub    esp,0x8
c00140a0:	50                   	push   eax
c00140a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00140a5:	e8 08 f7 ff ff       	call   c00137b2 <VAS::getPageTableEntry(unsigned long)>
c00140aa:	83 c4 10             	add    esp,0x10
c00140ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00140af:	25 00 f0 ff ff       	and    eax,0xfffff000
c00140b4:	6a 11                	push   0x11
c00140b6:	53                   	push   ebx
c00140b7:	50                   	push   eax
c00140b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00140bc:	e8 eb fa ff ff       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c00140c1:	83 c4 10             	add    esp,0x10
c00140c4:	fb                   	sti    
c00140c5:	90                   	nop
c00140c6:	83 c4 28             	add    esp,0x28
c00140c9:	5b                   	pop    ebx
c00140ca:	c3                   	ret    
c00140cb:	90                   	nop

c00140cc <VAS::evict(unsigned long)>:
c00140cc:	55                   	push   ebp
c00140cd:	57                   	push   edi
c00140ce:	56                   	push   esi
c00140cf:	53                   	push   ebx
c00140d0:	83 ec 24             	sub    esp,0x24
c00140d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00140d7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00140db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140df:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00140e4:	50                   	push   eax
c00140e5:	68 f5 4a 02 c0       	push   0xc0024af5
c00140ea:	e8 75 2e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00140ef:	e8 33 f5 ff ff       	call   c0013627 <Virt::allocateSwapfilePage()>
c00140f4:	83 c4 10             	add    esp,0x10
c00140f7:	89 c7                	mov    edi,eax
c00140f9:	a1 cc 67 02 c0       	mov    eax,ds:0xc00267cc
c00140fe:	85 c0                	test   eax,eax
c0014100:	7e 40                	jle    c0014142 <VAS::evict(unsigned long)+0x76>
c0014102:	89 ee                	mov    esi,ebp
c0014104:	31 db                	xor    ebx,ebx
c0014106:	83 ec 0c             	sub    esp,0xc
c0014109:	57                   	push   edi
c001410a:	e8 02 f5 ff ff       	call   c0013611 <Virt::swapIDToSector(unsigned long)>
c001410f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014112:	01 d8                	add    eax,ebx
c0014114:	6a 01                	push   0x1
c0014116:	31 d2                	xor    edx,edx
c0014118:	83 c3 01             	add    ebx,0x1
c001411b:	52                   	push   edx
c001411c:	81 c6 00 02 00 00    	add    esi,0x200
c0014122:	50                   	push   eax
c0014123:	0f be 05 d8 67 02 c0 	movsx  eax,BYTE PTR ds:0xc00267d8
c001412a:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0014131:	50                   	push   eax
c0014132:	e8 85 69 ff ff       	call   c000aabc <LogicalDisk::write(unsigned long long, int, void*)>
c0014137:	83 c4 20             	add    esp,0x20
c001413a:	39 1d cc 67 02 c0    	cmp    DWORD PTR ds:0xc00267cc,ebx
c0014140:	7f c4                	jg     c0014106 <VAS::evict(unsigned long)+0x3a>
c0014142:	83 ec 08             	sub    esp,0x8
c0014145:	c1 e7 0c             	shl    edi,0xc
c0014148:	55                   	push   ebp
c0014149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001414d:	50                   	push   eax
c001414e:	e8 5f f6 ff ff       	call   c00137b2 <VAS::getPageTableEntry(unsigned long)>
c0014153:	8b 10                	mov    edx,DWORD PTR [eax]
c0014155:	89 d3                	mov    ebx,edx
c0014157:	81 e2 fe 07 00 00    	and    edx,0x7fe
c001415d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014163:	09 d7                	or     edi,edx
c0014165:	89 38                	mov    DWORD PTR [eax],edi
c0014167:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001416a:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c0014170:	83 c2 01             	add    edx,0x1
c0014173:	89 15 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,edx
c0014179:	e8 eb bf ff ff       	call   c0010169 <Phys::freePage(unsigned long)>
c001417e:	0f 20 d8             	mov    eax,cr3
c0014181:	0f 22 d8             	mov    cr3,eax
c0014184:	8b 0d 48 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e248
c001418a:	51                   	push   ecx
c001418b:	55                   	push   ebp
c001418c:	53                   	push   ebx
c001418d:	68 28 46 02 c0       	push   0xc0024628
c0014192:	e8 cd 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014197:	83 c4 18             	add    esp,0x18
c001419a:	a1 44 e2 02 c0       	mov    eax,ds:0xc002e244
c001419f:	50                   	push   eax
c00141a0:	8d 50 01             	lea    edx,[eax+0x1]
c00141a3:	68 0a 4b 02 c0       	push   0xc0024b0a
c00141a8:	89 15 44 e2 02 c0    	mov    DWORD PTR ds:0xc002e244,edx
c00141ae:	e8 b1 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00141b3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00141b8:	c7 44 24 40 1c 4b 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024b1c
c00141c0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00141c4:	83 c4 2c             	add    esp,0x2c
c00141c7:	5b                   	pop    ebx
c00141c8:	5e                   	pop    esi
c00141c9:	5f                   	pop    edi
c00141ca:	5d                   	pop    ebp
c00141cb:	e9 94 2d ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c00141d0 <VAS::canLockPage(unsigned long)>:
c00141d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141d4:	50                   	push   eax
c00141d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00141d9:	52                   	push   edx
c00141da:	e8 d3 f5 ff ff       	call   c00137b2 <VAS::getPageTableEntry(unsigned long)>
c00141df:	59                   	pop    ecx
c00141e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00141e2:	5a                   	pop    edx
c00141e3:	c1 e8 0b             	shr    eax,0xb
c00141e6:	83 e0 01             	and    eax,0x1
c00141e9:	c3                   	ret    

c00141ea <VAS::unlockPage(unsigned long)>:
c00141ea:	83 ec 0c             	sub    esp,0xc
c00141ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141f1:	50                   	push   eax
c00141f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00141f6:	52                   	push   edx
c00141f7:	e8 b6 f5 ff ff       	call   c00137b2 <VAS::getPageTableEntry(unsigned long)>
c00141fc:	59                   	pop    ecx
c00141fd:	5a                   	pop    edx
c00141fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0014200:	f6 c6 08             	test   dh,0x8
c0014203:	75 09                	jne    c001420e <VAS::unlockPage(unsigned long)+0x24>
c0014205:	80 ce 08             	or     dh,0x8
c0014208:	89 10                	mov    DWORD PTR [eax],edx
c001420a:	83 c4 0c             	add    esp,0xc
c001420d:	c3                   	ret    
c001420e:	c7 44 24 10 5c 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc002465c
c0014216:	83 c4 0c             	add    esp,0xc
c0014219:	e9 c0 bd ff ff       	jmp    c000ffde <KePanic(char const*)>

c001421e <VAS::canLockPages(unsigned long, int)>:
c001421e:	55                   	push   ebp
c001421f:	57                   	push   edi
c0014220:	56                   	push   esi
c0014221:	53                   	push   ebx
c0014222:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014226:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001422a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001422e:	85 ff                	test   edi,edi
c0014230:	7e 23                	jle    c0014255 <VAS::canLockPages(unsigned long, int)+0x37>
c0014232:	31 f6                	xor    esi,esi
c0014234:	eb 0d                	jmp    c0014243 <VAS::canLockPages(unsigned long, int)+0x25>
c0014236:	81 c3 00 10 00 00    	add    ebx,0x1000
c001423c:	83 c6 01             	add    esi,0x1
c001423f:	39 f7                	cmp    edi,esi
c0014241:	74 0d                	je     c0014250 <VAS::canLockPages(unsigned long, int)+0x32>
c0014243:	53                   	push   ebx
c0014244:	55                   	push   ebp
c0014245:	e8 86 ff ff ff       	call   c00141d0 <VAS::canLockPage(unsigned long)>
c001424a:	5a                   	pop    edx
c001424b:	84 c0                	test   al,al
c001424d:	59                   	pop    ecx
c001424e:	75 e6                	jne    c0014236 <VAS::canLockPages(unsigned long, int)+0x18>
c0014250:	5b                   	pop    ebx
c0014251:	5e                   	pop    esi
c0014252:	5f                   	pop    edi
c0014253:	5d                   	pop    ebp
c0014254:	c3                   	ret    
c0014255:	b0 01                	mov    al,0x1
c0014257:	eb f7                	jmp    c0014250 <VAS::canLockPages(unsigned long, int)+0x32>
c0014259:	90                   	nop

c001425a <VAS::unlockPages(unsigned long, int)>:
c001425a:	55                   	push   ebp
c001425b:	57                   	push   edi
c001425c:	56                   	push   esi
c001425d:	53                   	push   ebx
c001425e:	83 ec 0c             	sub    esp,0xc
c0014261:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014265:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014269:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001426d:	85 ff                	test   edi,edi
c001426f:	7e 1c                	jle    c001428d <VAS::unlockPages(unsigned long, int)+0x33>
c0014271:	31 f6                	xor    esi,esi
c0014273:	83 ec 08             	sub    esp,0x8
c0014276:	83 c6 01             	add    esi,0x1
c0014279:	53                   	push   ebx
c001427a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014280:	55                   	push   ebp
c0014281:	e8 64 ff ff ff       	call   c00141ea <VAS::unlockPage(unsigned long)>
c0014286:	83 c4 10             	add    esp,0x10
c0014289:	39 f7                	cmp    edi,esi
c001428b:	75 e6                	jne    c0014273 <VAS::unlockPages(unsigned long, int)+0x19>
c001428d:	83 c4 0c             	add    esp,0xc
c0014290:	5b                   	pop    ebx
c0014291:	5e                   	pop    esi
c0014292:	5f                   	pop    edi
c0014293:	5d                   	pop    ebp
c0014294:	c3                   	ret    
c0014295:	90                   	nop

c0014296 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0014296:	55                   	push   ebp
c0014297:	57                   	push   edi
c0014298:	56                   	push   esi
c0014299:	53                   	push   ebx
c001429a:	81 ec 0c 10 00 00    	sub    esp,0x100c
c00142a0:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c00142a7:	89 f3                	mov    ebx,esi
c00142a9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00142af:	53                   	push   ebx
c00142b0:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c00142b7:	50                   	push   eax
c00142b8:	e8 f5 f4 ff ff       	call   c00137b2 <VAS::getPageTableEntry(unsigned long)>
c00142bd:	5a                   	pop    edx
c00142be:	89 c5                	mov    ebp,eax
c00142c0:	59                   	pop    ecx
c00142c1:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c00142c7:	0f 87 cb 00 00 00    	ja     c0014398 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c00142cd:	83 ec 08             	sub    esp,0x8
c00142d0:	56                   	push   esi
c00142d1:	68 8c 46 02 c0       	push   0xc002468c
c00142d6:	e8 89 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00142db:	5e                   	pop    esi
c00142dc:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00142e1:	5f                   	pop    edi
c00142e2:	50                   	push   eax
c00142e3:	68 bc 46 02 c0       	push   0xc00246bc
c00142e8:	e8 77 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00142ed:	58                   	pop    eax
c00142ee:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00142f4:	5a                   	pop    edx
c00142f5:	51                   	push   ecx
c00142f6:	68 e0 46 02 c0       	push   0xc00246e0
c00142fb:	e8 64 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014300:	83 c4 10             	add    esp,0x10
c0014303:	85 db                	test   ebx,ebx
c0014305:	74 5b                	je     c0014362 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0014307:	85 ed                	test   ebp,ebp
c0014309:	74 21                	je     c001432c <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c001430b:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c001430e:	f7 c6 00 02 00 00    	test   esi,0x200
c0014314:	0f 85 c5 00 00 00    	jne    c00143df <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c001431a:	89 f0                	mov    eax,esi
c001431c:	25 01 04 00 00       	and    eax,0x401
c0014321:	3d 00 04 00 00       	cmp    eax,0x400
c0014326:	0f 84 39 01 00 00    	je     c0014465 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c001432c:	83 ec 08             	sub    esp,0x8
c001432f:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0014334:	50                   	push   eax
c0014335:	68 d4 48 02 c0       	push   0xc00248d4
c001433a:	e8 25 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001433f:	5a                   	pop    edx
c0014340:	8b 1d 30 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea30
c0014346:	59                   	pop    ecx
c0014347:	53                   	push   ebx
c0014348:	68 f8 48 02 c0       	push   0xc00248f8
c001434d:	e8 12 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014352:	83 c4 10             	add    esp,0x10
c0014355:	31 c0                	xor    eax,eax
c0014357:	81 c4 0c 10 00 00    	add    esp,0x100c
c001435d:	5b                   	pop    ebx
c001435e:	5e                   	pop    esi
c001435f:	5f                   	pop    edi
c0014360:	5d                   	pop    ebp
c0014361:	c3                   	ret    
c0014362:	83 ec 08             	sub    esp,0x8
c0014365:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c001436a:	50                   	push   eax
c001436b:	68 04 47 02 c0       	push   0xc0024704
c0014370:	e8 ef 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014375:	58                   	pop    eax
c0014376:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c001437c:	5a                   	pop    edx
c001437d:	51                   	push   ecx
c001437e:	68 28 47 02 c0       	push   0xc0024728
c0014383:	e8 dc 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014388:	83 c4 10             	add    esp,0x10
c001438b:	31 c0                	xor    eax,eax
c001438d:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014393:	5b                   	pop    ebx
c0014394:	5e                   	pop    esi
c0014395:	5f                   	pop    edi
c0014396:	5d                   	pop    ebp
c0014397:	c3                   	ret    
c0014398:	83 ec 0c             	sub    esp,0xc
c001439b:	68 31 4b 02 c0       	push   0xc0024b31
c00143a0:	e8 39 bc ff ff       	call   c000ffde <KePanic(char const*)>
c00143a5:	5f                   	pop    edi
c00143a6:	58                   	pop    eax
c00143a7:	56                   	push   esi
c00143a8:	68 8c 46 02 c0       	push   0xc002468c
c00143ad:	e8 b2 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143b2:	58                   	pop    eax
c00143b3:	8b 0d 0c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea0c
c00143b9:	5a                   	pop    edx
c00143ba:	51                   	push   ecx
c00143bb:	68 bc 46 02 c0       	push   0xc00246bc
c00143c0:	e8 9f 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143c5:	5e                   	pop    esi
c00143c6:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00143cb:	5f                   	pop    edi
c00143cc:	50                   	push   eax
c00143cd:	68 e0 46 02 c0       	push   0xc00246e0
c00143d2:	e8 8d 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143d7:	83 c4 10             	add    esp,0x10
c00143da:	e9 28 ff ff ff       	jmp    c0014307 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c00143df:	83 ec 0c             	sub    esp,0xc
c00143e2:	68 4c 47 02 c0       	push   0xc002474c
c00143e7:	e8 78 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143ec:	e8 e1 bd ff ff       	call   c00101d2 <Phys::allocatePage()>
c00143f1:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00143f4:	83 ca 01             	or     edx,0x1
c00143f7:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00143fa:	0f 20 da             	mov    edx,cr3
c00143fd:	0f 22 da             	mov    cr3,edx
c0014400:	ba 00 10 00 00       	mov    edx,0x1000
c0014405:	89 de                	mov    esi,ebx
c0014407:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001440b:	89 d1                	mov    ecx,edx
c001440d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001440f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014412:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0014418:	09 c8                	or     eax,ecx
c001441a:	83 c8 02             	or     eax,0x2
c001441d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014420:	0f 20 d8             	mov    eax,cr3
c0014423:	0f 22 d8             	mov    cr3,eax
c0014426:	8d 74 24 10          	lea    esi,[esp+0x10]
c001442a:	89 df                	mov    edi,ebx
c001442c:	89 d1                	mov    ecx,edx
c001442e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014430:	8b 35 0c ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea0c
c0014436:	59                   	pop    ecx
c0014437:	5b                   	pop    ebx
c0014438:	56                   	push   esi
c0014439:	68 6c 47 02 c0       	push   0xc002476c
c001443e:	e8 21 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014443:	5f                   	pop    edi
c0014444:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014449:	5d                   	pop    ebp
c001444a:	50                   	push   eax
c001444b:	68 90 47 02 c0       	push   0xc0024790
c0014450:	e8 0f 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014455:	83 c4 10             	add    esp,0x10
c0014458:	b0 01                	mov    al,0x1
c001445a:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014460:	5b                   	pop    ebx
c0014461:	5e                   	pop    esi
c0014462:	5f                   	pop    edi
c0014463:	5d                   	pop    ebp
c0014464:	c3                   	ret    
c0014465:	83 ec 08             	sub    esp,0x8
c0014468:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001446d:	c1 ee 0c             	shr    esi,0xc
c0014470:	50                   	push   eax
c0014471:	68 b4 47 02 c0       	push   0xc00247b4
c0014476:	e8 e9 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001447b:	e8 52 bd ff ff       	call   c00101d2 <Phys::allocatePage()>
c0014480:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014486:	89 c7                	mov    edi,eax
c0014488:	58                   	pop    eax
c0014489:	5a                   	pop    edx
c001448a:	51                   	push   ecx
c001448b:	68 d8 47 02 c0       	push   0xc00247d8
c0014490:	e8 cf 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014495:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014498:	83 c4 10             	add    esp,0x10
c001449b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00144a1:	09 fa                	or     edx,edi
c00144a3:	81 ca 01 08 00 00    	or     edx,0x801
c00144a9:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00144ac:	8b 3d cc 67 02 c0    	mov    edi,DWORD PTR ds:0xc00267cc
c00144b2:	85 ff                	test   edi,edi
c00144b4:	7e 65                	jle    c001451b <VAS::tryLoadBackOffDisk(unsigned long)+0x285>
c00144b6:	89 dd                	mov    ebp,ebx
c00144b8:	31 ff                	xor    edi,edi
c00144ba:	83 ec 08             	sub    esp,0x8
c00144bd:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00144c2:	50                   	push   eax
c00144c3:	68 8c 48 02 c0       	push   0xc002488c
c00144c8:	e8 97 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00144cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00144d0:	e8 3c f1 ff ff       	call   c0013611 <Virt::swapIDToSector(unsigned long)>
c00144d5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144d8:	01 f8                	add    eax,edi
c00144da:	6a 01                	push   0x1
c00144dc:	31 d2                	xor    edx,edx
c00144de:	83 c7 01             	add    edi,0x1
c00144e1:	52                   	push   edx
c00144e2:	81 c5 00 02 00 00    	add    ebp,0x200
c00144e8:	50                   	push   eax
c00144e9:	0f be 05 d8 67 02 c0 	movsx  eax,BYTE PTR ds:0xc00267d8
c00144f0:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c00144f7:	50                   	push   eax
c00144f8:	e8 53 65 ff ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c00144fd:	83 c4 18             	add    esp,0x18
c0014500:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014505:	50                   	push   eax
c0014506:	68 b0 48 02 c0       	push   0xc00248b0
c001450b:	e8 54 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014510:	83 c4 10             	add    esp,0x10
c0014513:	39 3d cc 67 02 c0    	cmp    DWORD PTR ds:0xc00267cc,edi
c0014519:	7f 9f                	jg     c00144ba <VAS::tryLoadBackOffDisk(unsigned long)+0x224>
c001451b:	83 ec 08             	sub    esp,0x8
c001451e:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014523:	50                   	push   eax
c0014524:	68 fc 47 02 c0       	push   0xc00247fc
c0014529:	e8 36 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001452e:	83 c4 0c             	add    esp,0xc
c0014531:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014536:	83 e8 01             	sub    eax,0x1
c0014539:	50                   	push   eax
c001453a:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c001453f:	53                   	push   ebx
c0014540:	68 43 4b 02 c0       	push   0xc0024b43
c0014545:	e8 1a 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001454a:	89 34 24             	mov    DWORD PTR [esp],esi
c001454d:	e8 9c f0 ff ff       	call   c00135ee <Virt::freeSwapfilePage(unsigned long)>
c0014552:	58                   	pop    eax
c0014553:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014559:	5a                   	pop    edx
c001455a:	51                   	push   ecx
c001455b:	68 20 48 02 c0       	push   0xc0024820
c0014560:	e8 ff 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014565:	0f 20 d8             	mov    eax,cr3
c0014568:	0f 22 d8             	mov    cr3,eax
c001456b:	c7 04 24 58 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b58
c0014572:	e8 ed 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014577:	5b                   	pop    ebx
c0014578:	8b 3d 0c ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea0c
c001457e:	5e                   	pop    esi
c001457f:	57                   	push   edi
c0014580:	68 44 48 02 c0       	push   0xc0024844
c0014585:	e8 da 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001458a:	5d                   	pop    ebp
c001458b:	58                   	pop    eax
c001458c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014591:	50                   	push   eax
c0014592:	68 68 48 02 c0       	push   0xc0024868
c0014597:	e8 c8 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001459c:	83 c4 10             	add    esp,0x10
c001459f:	b0 01                	mov    al,0x1
c00145a1:	e9 b1 fd ff ff       	jmp    c0014357 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>

c00145a6 <VAS::lockPage(unsigned long)>:
c00145a6:	56                   	push   esi
c00145a7:	53                   	push   ebx
c00145a8:	83 ec 04             	sub    esp,0x4
c00145ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00145b3:	50                   	push   eax
c00145b4:	56                   	push   esi
c00145b5:	e8 f8 f1 ff ff       	call   c00137b2 <VAS::getPageTableEntry(unsigned long)>
c00145ba:	5a                   	pop    edx
c00145bb:	89 c3                	mov    ebx,eax
c00145bd:	59                   	pop    ecx
c00145be:	8b 00                	mov    eax,DWORD PTR [eax]
c00145c0:	a8 01                	test   al,0x1
c00145c2:	74 10                	je     c00145d4 <VAS::lockPage(unsigned long)+0x2e>
c00145c4:	f6 c4 08             	test   ah,0x8
c00145c7:	74 28                	je     c00145f1 <VAS::lockPage(unsigned long)+0x4b>
c00145c9:	80 e4 f7             	and    ah,0xf7
c00145cc:	89 03                	mov    DWORD PTR [ebx],eax
c00145ce:	83 c4 04             	add    esp,0x4
c00145d1:	5b                   	pop    ebx
c00145d2:	5e                   	pop    esi
c00145d3:	c3                   	ret    
c00145d4:	83 ec 08             	sub    esp,0x8
c00145d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00145dc:	50                   	push   eax
c00145dd:	56                   	push   esi
c00145de:	e8 b3 fc ff ff       	call   c0014296 <VAS::tryLoadBackOffDisk(unsigned long)>
c00145e3:	83 c4 10             	add    esp,0x10
c00145e6:	84 c0                	test   al,al
c00145e8:	74 19                	je     c0014603 <VAS::lockPage(unsigned long)+0x5d>
c00145ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145ec:	f6 c4 08             	test   ah,0x8
c00145ef:	75 d8                	jne    c00145c9 <VAS::lockPage(unsigned long)+0x23>
c00145f1:	c7 44 24 10 5c 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc002465c
c00145f9:	83 c4 04             	add    esp,0x4
c00145fc:	5b                   	pop    ebx
c00145fd:	5e                   	pop    esi
c00145fe:	e9 db b9 ff ff       	jmp    c000ffde <KePanic(char const*)>
c0014603:	83 ec 0c             	sub    esp,0xc
c0014606:	68 1c 49 02 c0       	push   0xc002491c
c001460b:	e8 ce b9 ff ff       	call   c000ffde <KePanic(char const*)>
c0014610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014612:	83 c4 10             	add    esp,0x10
c0014615:	eb ad                	jmp    c00145c4 <VAS::lockPage(unsigned long)+0x1e>
c0014617:	90                   	nop

c0014618 <VAS::lockPages(unsigned long, int)>:
c0014618:	55                   	push   ebp
c0014619:	57                   	push   edi
c001461a:	56                   	push   esi
c001461b:	53                   	push   ebx
c001461c:	83 ec 0c             	sub    esp,0xc
c001461f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014623:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014627:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001462b:	85 ff                	test   edi,edi
c001462d:	7e 1c                	jle    c001464b <VAS::lockPages(unsigned long, int)+0x33>
c001462f:	31 f6                	xor    esi,esi
c0014631:	83 ec 08             	sub    esp,0x8
c0014634:	83 c6 01             	add    esi,0x1
c0014637:	53                   	push   ebx
c0014638:	81 c3 00 10 00 00    	add    ebx,0x1000
c001463e:	55                   	push   ebp
c001463f:	e8 62 ff ff ff       	call   c00145a6 <VAS::lockPage(unsigned long)>
c0014644:	83 c4 10             	add    esp,0x10
c0014647:	39 f7                	cmp    edi,esi
c0014649:	75 e6                	jne    c0014631 <VAS::lockPages(unsigned long, int)+0x19>
c001464b:	83 c4 0c             	add    esp,0xc
c001464e:	5b                   	pop    ebx
c001464f:	5e                   	pop    esi
c0014650:	5f                   	pop    edi
c0014651:	5d                   	pop    ebp
c0014652:	c3                   	ret    
c0014653:	90                   	nop

c0014654 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014654:	55                   	push   ebp
c0014655:	57                   	push   edi
c0014656:	56                   	push   esi
c0014657:	53                   	push   ebx
c0014658:	83 ec 28             	sub    esp,0x28
c001465b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001465f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014663:	50                   	push   eax
c0014664:	e8 60 ee ff ff       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c0014669:	83 c4 0c             	add    esp,0xc
c001466c:	89 c5                	mov    ebp,eax
c001466e:	6a 07                	push   0x7
c0014670:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014674:	52                   	push   edx
c0014675:	56                   	push   esi
c0014676:	e8 35 f6 ff ff       	call   c0013cb0 <VAS::allocatePages(int, int)>
c001467b:	83 c4 10             	add    esp,0x10
c001467e:	89 c7                	mov    edi,eax
c0014680:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014684:	85 c9                	test   ecx,ecx
c0014686:	74 2f                	je     c00146b7 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014688:	31 db                	xor    ebx,ebx
c001468a:	e8 43 bb ff ff       	call   c00101d2 <Phys::allocatePage()>
c001468f:	83 c3 01             	add    ebx,0x1
c0014692:	6a 03                	push   0x3
c0014694:	55                   	push   ebp
c0014695:	50                   	push   eax
c0014696:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001469a:	56                   	push   esi
c001469b:	e8 0c f5 ff ff       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c00146a0:	6a 07                	push   0x7
c00146a2:	57                   	push   edi
c00146a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146a7:	50                   	push   eax
c00146a8:	56                   	push   esi
c00146a9:	e8 fe f4 ff ff       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c00146ae:	83 c4 20             	add    esp,0x20
c00146b1:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c00146b5:	75 d3                	jne    c001468a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c00146b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00146bb:	89 28                	mov    DWORD PTR [eax],ebp
c00146bd:	83 c4 1c             	add    esp,0x1c
c00146c0:	89 f8                	mov    eax,edi
c00146c2:	5b                   	pop    ebx
c00146c3:	5e                   	pop    esi
c00146c4:	5f                   	pop    edi
c00146c5:	5d                   	pop    ebp
c00146c6:	c3                   	ret    
c00146c7:	90                   	nop

c00146c8 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00146c8:	53                   	push   ebx
c00146c9:	83 ec 14             	sub    esp,0x14
c00146cc:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00146d0:	68 4c 49 02 c0       	push   0xc002494c
c00146d5:	e8 8a 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00146da:	c7 04 24 ac 49 02 c0 	mov    DWORD PTR [esp],0xc00249ac
c00146e1:	e8 7e 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00146e6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00146ea:	83 c4 18             	add    esp,0x18
c00146ed:	5b                   	pop    ebx
c00146ee:	e9 de f0 ff ff       	jmp    c00137d1 <Virt::freeKernelVirtualPages(unsigned long)>
c00146f3:	90                   	nop

c00146f4 <VAS::scanForEviction()>:
c00146f4:	57                   	push   edi
c00146f5:	56                   	push   esi
c00146f6:	31 f6                	xor    esi,esi
c00146f8:	53                   	push   ebx
c00146f9:	83 ec 18             	sub    esp,0x18
c00146fc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014700:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014705:	50                   	push   eax
c0014706:	68 28 4a 02 c0       	push   0xc0024a28
c001470b:	e8 54 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014710:	c7 04 24 5f 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b5f
c0014717:	e8 48 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001471c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001471f:	83 c4 10             	add    esp,0x10
c0014722:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014728:	75 0e                	jne    c0014738 <VAS::scanForEviction()+0x44>
c001472a:	89 da                	mov    edx,ebx
c001472c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001472f:	c1 ea 16             	shr    edx,0x16
c0014732:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014736:	74 5b                	je     c0014793 <VAS::scanForEviction()+0x9f>
c0014738:	83 ec 08             	sub    esp,0x8
c001473b:	53                   	push   ebx
c001473c:	57                   	push   edi
c001473d:	e8 70 f0 ff ff       	call   c00137b2 <VAS::getPageTableEntry(unsigned long)>
c0014742:	83 c4 10             	add    esp,0x10
c0014745:	8b 10                	mov    edx,DWORD PTR [eax]
c0014747:	89 d1                	mov    ecx,edx
c0014749:	c1 e9 0c             	shr    ecx,0xc
c001474c:	74 10                	je     c001475e <VAS::scanForEviction()+0x6a>
c001474e:	89 d1                	mov    ecx,edx
c0014750:	81 e1 01 08 00 00    	and    ecx,0x801
c0014756:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001475c:	74 40                	je     c001479e <VAS::scanForEviction()+0xaa>
c001475e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014764:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001476a:	76 2d                	jbe    c0014799 <VAS::scanForEviction()+0xa5>
c001476c:	83 c6 01             	add    esi,0x1
c001476f:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014776:	83 fe 03             	cmp    esi,0x3
c0014779:	74 32                	je     c00147ad <VAS::scanForEviction()+0xb9>
c001477b:	31 db                	xor    ebx,ebx
c001477d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014783:	75 b3                	jne    c0014738 <VAS::scanForEviction()+0x44>
c0014785:	89 da                	mov    edx,ebx
c0014787:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001478a:	c1 ea 16             	shr    edx,0x16
c001478d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014791:	75 a5                	jne    c0014738 <VAS::scanForEviction()+0x44>
c0014793:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014799:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001479c:	eb 84                	jmp    c0014722 <VAS::scanForEviction()+0x2e>
c001479e:	f6 c2 20             	test   dl,0x20
c00147a1:	74 13                	je     c00147b6 <VAS::scanForEviction()+0xc2>
c00147a3:	83 e2 df             	and    edx,0xffffffdf
c00147a6:	89 10                	mov    DWORD PTR [eax],edx
c00147a8:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00147ab:	eb b1                	jmp    c001475e <VAS::scanForEviction()+0x6a>
c00147ad:	83 c4 10             	add    esp,0x10
c00147b0:	31 c0                	xor    eax,eax
c00147b2:	5b                   	pop    ebx
c00147b3:	5e                   	pop    esi
c00147b4:	5f                   	pop    edi
c00147b5:	c3                   	ret    
c00147b6:	83 ec 08             	sub    esp,0x8
c00147b9:	89 d0                	mov    eax,edx
c00147bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147c4:	53                   	push   ebx
c00147c5:	68 7b 4b 02 c0       	push   0xc0024b7b
c00147ca:	e8 95 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00147cf:	58                   	pop    eax
c00147d0:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00147d3:	5a                   	pop    edx
c00147d4:	51                   	push   ecx
c00147d5:	57                   	push   edi
c00147d6:	e8 f1 f8 ff ff       	call   c00140cc <VAS::evict(unsigned long)>
c00147db:	5b                   	pop    ebx
c00147dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00147df:	5e                   	pop    esi
c00147e0:	50                   	push   eax
c00147e1:	68 8f 4b 02 c0       	push   0xc0024b8f
c00147e6:	e8 79 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00147eb:	58                   	pop    eax
c00147ec:	5a                   	pop    edx
c00147ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147f1:	50                   	push   eax
c00147f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147f6:	68 a2 4b 02 c0       	push   0xc0024ba2
c00147fb:	e8 64 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014800:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014803:	81 c1 00 10 00 00    	add    ecx,0x1000
c0014809:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c001480c:	8b 3d 30 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea30
c0014812:	5b                   	pop    ebx
c0014813:	5e                   	pop    esi
c0014814:	57                   	push   edi
c0014815:	68 48 4a 02 c0       	push   0xc0024a48
c001481a:	e8 45 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001481f:	83 c4 10             	add    esp,0x10
c0014822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014826:	83 c4 10             	add    esp,0x10
c0014829:	5b                   	pop    ebx
c001482a:	5e                   	pop    esi
c001482b:	5f                   	pop    edi
c001482c:	c3                   	ret    

c001482d <mapVASFirstTime>:
c001482d:	55                   	push   ebp
c001482e:	57                   	push   edi
c001482f:	56                   	push   esi
c0014830:	53                   	push   ebx
c0014831:	83 ec 0c             	sub    esp,0xc
c0014834:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014839:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001483c:	83 fa 01             	cmp    edx,0x1
c001483f:	0f 84 cb 00 00 00    	je     c0014910 <mapVASFirstTime+0xe3>
c0014845:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014848:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001484b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014850:	c1 e5 15             	shl    ebp,0x15
c0014853:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014858:	8b b2 72 05 00 00    	mov    esi,DWORD PTR [edx+0x572]
c001485e:	29 eb                	sub    ebx,ebp
c0014860:	29 ef                	sub    edi,ebp
c0014862:	e8 6b b9 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0014867:	83 ec 0c             	sub    esp,0xc
c001486a:	68 03 04 00 00       	push   0x403
c001486f:	6a 01                	push   0x1
c0014871:	53                   	push   ebx
c0014872:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014878:	50                   	push   eax
c0014879:	56                   	push   esi
c001487a:	e8 17 f5 ff ff       	call   c0013d96 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001487f:	83 c4 20             	add    esp,0x20
c0014882:	39 fb                	cmp    ebx,edi
c0014884:	75 dc                	jne    c0014862 <mapVASFirstTime+0x35>
c0014886:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001488b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014890:	29 eb                	sub    ebx,ebp
c0014892:	29 ef                	sub    edi,ebp
c0014894:	e8 39 b9 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0014899:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001489d:	83 fa 01             	cmp    edx,0x1
c00148a0:	19 d2                	sbb    edx,edx
c00148a2:	83 ec 0c             	sub    esp,0xc
c00148a5:	83 e2 04             	and    edx,0x4
c00148a8:	81 c2 03 04 00 00    	add    edx,0x403
c00148ae:	52                   	push   edx
c00148af:	6a 01                	push   0x1
c00148b1:	53                   	push   ebx
c00148b2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00148b8:	50                   	push   eax
c00148b9:	56                   	push   esi
c00148ba:	e8 d7 f4 ff ff       	call   c0013d96 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00148bf:	83 c4 20             	add    esp,0x20
c00148c2:	39 df                	cmp    edi,ebx
c00148c4:	75 ce                	jne    c0014894 <mapVASFirstTime+0x67>
c00148c6:	83 ec 0c             	sub    esp,0xc
c00148c9:	bb 7c 80 02 c0       	mov    ebx,0xc002807c
c00148ce:	6a 04                	push   0x4
c00148d0:	81 eb 00 70 02 c0    	sub    ebx,0xc0027000
c00148d6:	6a ff                	push   0xffffffff
c00148d8:	c1 eb 0c             	shr    ebx,0xc
c00148db:	53                   	push   ebx
c00148dc:	68 00 70 02 c0       	push   0xc0027000
c00148e1:	56                   	push   esi
c00148e2:	e8 65 f0 ff ff       	call   c001394c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00148e7:	83 c4 14             	add    esp,0x14
c00148ea:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c00148ef:	6a 04                	push   0x4
c00148f1:	6a ff                	push   0xffffffff
c00148f3:	53                   	push   ebx
c00148f4:	68 00 70 02 c0       	push   0xc0027000
c00148f9:	50                   	push   eax
c00148fa:	e8 4d f0 ff ff       	call   c001394c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00148ff:	0f 20 d8             	mov    eax,cr3
c0014902:	0f 22 d8             	mov    cr3,eax
c0014905:	83 c4 20             	add    esp,0x20
c0014908:	83 c4 0c             	add    esp,0xc
c001490b:	5b                   	pop    ebx
c001490c:	5e                   	pop    esi
c001490d:	5f                   	pop    edi
c001490e:	5d                   	pop    ebp
c001490f:	c3                   	ret    
c0014910:	83 ec 0c             	sub    esp,0xc
c0014913:	68 af 4b 02 c0       	push   0xc0024baf
c0014918:	e8 47 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001491d:	83 c4 10             	add    esp,0x10
c0014920:	83 c4 0c             	add    esp,0xc
c0014923:	5b                   	pop    ebx
c0014924:	5e                   	pop    esi
c0014925:	5f                   	pop    edi
c0014926:	5d                   	pop    ebp
c0014927:	c3                   	ret    

c0014928 <SysAlarm(regs*)>:
c0014928:	53                   	push   ebx
c0014929:	83 ec 10             	sub    esp,0x10
c001492c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014930:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014933:	68 c8 4b 02 c0       	push   0xc0024bc8
c0014938:	e8 27 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001493d:	83 c4 0c             	add    esp,0xc
c0014940:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014943:	31 d2                	xor    edx,edx
c0014945:	52                   	push   edx
c0014946:	50                   	push   eax
c0014947:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001494d:	e8 46 09 00 00       	call   c0015298 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014952:	83 c4 18             	add    esp,0x18
c0014955:	5b                   	pop    ebx
c0014956:	c3                   	ret    

c0014957 <SysEject(regs*)>:
c0014957:	83 ec 0c             	sub    esp,0xc
c001495a:	83 ca ff             	or     edx,0xffffffff
c001495d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014961:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014964:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014969:	83 e9 41             	sub    ecx,0x41
c001496c:	83 f9 19             	cmp    ecx,0x19
c001496f:	77 18                	ja     c0014989 <SysEject(regs*)+0x32>
c0014971:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0014978:	85 c9                	test   ecx,ecx
c001497a:	74 0d                	je     c0014989 <SysEject(regs*)+0x32>
c001497c:	83 ec 0c             	sub    esp,0xc
c001497f:	51                   	push   ecx
c0014980:	e8 61 60 ff ff       	call   c000a9e6 <LogicalDisk::eject()>
c0014985:	83 c4 10             	add    esp,0x10
c0014988:	99                   	cdq    
c0014989:	83 c4 0c             	add    esp,0xc
c001498c:	c3                   	ret    

c001498d <SysExit(regs*)>:
c001498d:	83 ec 18             	sub    esp,0x18
c0014990:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014994:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014997:	e8 94 2d 00 00       	call   c0017730 <terminateTask(int)>
c001499c:	83 c8 ff             	or     eax,0xffffffff
c001499f:	83 c4 1c             	add    esp,0x1c
c00149a2:	89 c2                	mov    edx,eax
c00149a4:	c3                   	ret    

c00149a5 <SysGetCwd(regs*)>:
c00149a5:	83 ec 10             	sub    esp,0x10
c00149a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149ac:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00149af:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149b7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00149ba:	e8 07 34 ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c00149bf:	83 c4 1c             	add    esp,0x1c
c00149c2:	99                   	cdq    
c00149c3:	c3                   	ret    

c00149c4 <SysGetPID(regs*)>:
c00149c4:	83 ec 14             	sub    esp,0x14
c00149c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149cf:	ff 30                	push   DWORD PTR [eax]
c00149d1:	68 dd 4b 02 c0       	push   0xc0024bdd
c00149d6:	e8 89 25 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00149db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00149e5:	83 c4 1c             	add    esp,0x1c
c00149e8:	99                   	cdq    
c00149e9:	c3                   	ret    

c00149ea <SysGetRAMData(regs*)>:
c00149ea:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c00149f0:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00149f5:	03 05 3c e1 02 c0    	add    eax,DWORD PTR ds:0xc002e13c
c00149fb:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0014a01:	99                   	cdq    
c0014a02:	f7 f9                	idiv   ecx
c0014a04:	c1 e0 18             	shl    eax,0x18
c0014a07:	09 c8                	or     eax,ecx
c0014a09:	99                   	cdq    
c0014a0a:	c3                   	ret    

c0014a0b <SysGetVGAPtr(regs*)>:
c0014a0b:	55                   	push   ebp
c0014a0c:	57                   	push   edi
c0014a0d:	56                   	push   esi
c0014a0e:	53                   	push   ebx
c0014a0f:	83 ec 0c             	sub    esp,0xc
c0014a12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014a16:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014a19:	83 f8 ff             	cmp    eax,0xffffffff
c0014a1c:	74 1b                	je     c0014a39 <SysGetVGAPtr(regs*)+0x2e>
c0014a1e:	83 ec 0c             	sub    esp,0xc
c0014a21:	50                   	push   eax
c0014a22:	e8 b1 27 00 00       	call   c00171d8 <Thr::processFromPID(int)>
c0014a27:	83 c4 10             	add    esp,0x10
c0014a2a:	89 c1                	mov    ecx,eax
c0014a2c:	31 d2                	xor    edx,edx
c0014a2e:	b8 01 00 00 00       	mov    eax,0x1
c0014a33:	85 c9                	test   ecx,ecx
c0014a35:	75 0a                	jne    c0014a41 <SysGetVGAPtr(regs*)+0x36>
c0014a37:	eb 61                	jmp    c0014a9a <SysGetVGAPtr(regs*)+0x8f>
c0014a39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a3e:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0014a41:	8b a9 66 05 00 00    	mov    ebp,DWORD PTR [ecx+0x566]
c0014a47:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014a4b:	74 0c                	je     c0014a59 <SysGetVGAPtr(regs*)+0x4e>
c0014a4d:	83 ec 0c             	sub    esp,0xc
c0014a50:	55                   	push   ebp
c0014a51:	e8 ef da ff ff       	call   c0012545 <setActiveTerminal(VgaText*)>
c0014a56:	83 c4 10             	add    esp,0x10
c0014a59:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014a5c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014a5f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014a64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a66:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014a69:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a6c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0014a72:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a75:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014a78:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0014a7e:	50                   	push   eax
c0014a7f:	50                   	push   eax
c0014a80:	68 ec 4b 02 c0       	push   0xc0024bec
c0014a85:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a88:	05 a8 0f 00 00       	add    eax,0xfa8
c0014a8d:	50                   	push   eax
c0014a8e:	e8 ad bb fe ff       	call   c0000640 <strcpy>
c0014a93:	83 c4 10             	add    esp,0x10
c0014a96:	31 c0                	xor    eax,eax
c0014a98:	31 d2                	xor    edx,edx
c0014a9a:	83 c4 0c             	add    esp,0xc
c0014a9d:	5b                   	pop    ebx
c0014a9e:	5e                   	pop    esi
c0014a9f:	5f                   	pop    edi
c0014aa0:	5d                   	pop    ebp
c0014aa1:	c3                   	ret    
c0014aa2:	66 90                	xchg   ax,ax

c0014aa4 <SysKill(regs*)>:
c0014aa4:	53                   	push   ebx
c0014aa5:	83 ec 08             	sub    esp,0x8
c0014aa8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014aac:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014ab0:	75 16                	jne    c0014ac8 <SysKill(regs*)+0x24>
c0014ab2:	83 ec 0c             	sub    esp,0xc
c0014ab5:	68 f6 4b 02 c0       	push   0xc0024bf6
c0014aba:	e8 1f b5 ff ff       	call   c000ffde <KePanic(char const*)>
c0014abf:	83 c4 10             	add    esp,0x10
c0014ac2:	e9 89 00 00 00       	jmp    c0014b50 <SysKill(regs*)+0xac>
c0014ac7:	90                   	nop
c0014ac8:	83 ec 0c             	sub    esp,0xc
c0014acb:	68 4c ea 02 c0       	push   0xc002ea4c
c0014ad0:	e8 63 d1 00 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ad8:	83 c4 10             	add    esp,0x10
c0014adb:	85 c0                	test   eax,eax
c0014add:	74 19                	je     c0014af8 <SysKill(regs*)+0x54>
c0014adf:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014ae2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014ae5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014ae7:	74 33                	je     c0014b1c <SysKill(regs*)+0x78>
c0014ae9:	52                   	push   edx
c0014aea:	52                   	push   edx
c0014aeb:	50                   	push   eax
c0014aec:	68 4c ea 02 c0       	push   0xc002ea4c
c0014af1:	e8 4e d6 00 00       	call   c0022144 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014af6:	eb e0                	jmp    c0014ad8 <SysKill(regs*)+0x34>
c0014af8:	83 ec 0c             	sub    esp,0xc
c0014afb:	68 40 ea 02 c0       	push   0xc002ea40
c0014b00:	e8 33 d1 00 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014b05:	8d 76 00             	lea    esi,[esi+0x0]
c0014b08:	83 c4 10             	add    esp,0x10
c0014b0b:	85 c0                	test   eax,eax
c0014b0d:	74 41                	je     c0014b50 <SysKill(regs*)+0xac>
c0014b0f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014b12:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014b15:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014b17:	75 27                	jne    c0014b40 <SysKill(regs*)+0x9c>
c0014b19:	8d 76 00             	lea    esi,[esi+0x0]
c0014b1c:	51                   	push   ecx
c0014b1d:	51                   	push   ecx
c0014b1e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014b21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b29:	ff b0 80 07 00 00    	push   DWORD PTR [eax+0x780]
c0014b2f:	e8 1a c6 ff ff       	call   c001114e <KeRaiseSignal(SigHandlerBlock*, int)>
c0014b34:	83 c4 10             	add    esp,0x10
c0014b37:	31 c0                	xor    eax,eax
c0014b39:	31 d2                	xor    edx,edx
c0014b3b:	eb 1b                	jmp    c0014b58 <SysKill(regs*)+0xb4>
c0014b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0014b40:	52                   	push   edx
c0014b41:	52                   	push   edx
c0014b42:	50                   	push   eax
c0014b43:	68 40 ea 02 c0       	push   0xc002ea40
c0014b48:	e8 f7 d5 00 00       	call   c0022144 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014b4d:	eb b9                	jmp    c0014b08 <SysKill(regs*)+0x64>
c0014b4f:	90                   	nop
c0014b50:	83 c8 ff             	or     eax,0xffffffff
c0014b53:	89 c2                	mov    edx,eax
c0014b55:	8d 76 00             	lea    esi,[esi+0x0]
c0014b58:	83 c4 08             	add    esp,0x8
c0014b5b:	5b                   	pop    ebx
c0014b5c:	c3                   	ret    

c0014b5d <SysLoadDLL(regs*)>:
c0014b5d:	56                   	push   esi
c0014b5e:	53                   	push   ebx
c0014b5f:	31 d2                	xor    edx,edx
c0014b61:	51                   	push   ecx
c0014b62:	b8 01 00 00 00       	mov    eax,0x1
c0014b67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b6b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014b6f:	0f 84 8c 00 00 00    	je     c0014c01 <SysLoadDLL(regs*)+0xa4>
c0014b75:	83 ec 0c             	sub    esp,0xc
c0014b78:	68 14 01 00 00       	push   0x114
c0014b7d:	e8 15 b1 ff ff       	call   c000fc97 <malloc>
c0014b82:	83 c4 0c             	add    esp,0xc
c0014b85:	89 c3                	mov    ebx,eax
c0014b87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b8c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014b8f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014b92:	53                   	push   ebx
c0014b93:	e8 9a 35 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014b98:	83 c4 10             	add    esp,0x10
c0014b9b:	31 d2                	xor    edx,edx
c0014b9d:	b8 02 00 00 00       	mov    eax,0x2
c0014ba2:	85 db                	test   ebx,ebx
c0014ba4:	74 5b                	je     c0014c01 <SysLoadDLL(regs*)+0xa4>
c0014ba6:	83 ec 0c             	sub    esp,0xc
c0014ba9:	53                   	push   ebx
c0014baa:	e8 65 38 ff ff       	call   c0008414 <File::exists()>
c0014baf:	83 c4 10             	add    esp,0x10
c0014bb2:	84 c0                	test   al,al
c0014bb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bb6:	75 11                	jne    c0014bc9 <SysLoadDLL(regs*)+0x6c>
c0014bb8:	83 ec 0c             	sub    esp,0xc
c0014bbb:	53                   	push   ebx
c0014bbc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014bbf:	83 c4 10             	add    esp,0x10
c0014bc2:	b8 03 00 00 00       	mov    eax,0x3
c0014bc7:	eb 36                	jmp    c0014bff <SysLoadDLL(regs*)+0xa2>
c0014bc9:	83 ec 0c             	sub    esp,0xc
c0014bcc:	53                   	push   ebx
c0014bcd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014bd0:	58                   	pop    eax
c0014bd1:	5a                   	pop    edx
c0014bd2:	6a 00                	push   0x0
c0014bd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014bd7:	e8 e3 17 00 00       	call   c00163bf <Thr::loadDLL(char const*, bool)>
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	89 c1                	mov    ecx,eax
c0014be1:	31 d2                	xor    edx,edx
c0014be3:	b8 04 00 00 00       	mov    eax,0x4
c0014be8:	85 c9                	test   ecx,ecx
c0014bea:	74 15                	je     c0014c01 <SysLoadDLL(regs*)+0xa4>
c0014bec:	53                   	push   ebx
c0014bed:	53                   	push   ebx
c0014bee:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0014bf4:	51                   	push   ecx
c0014bf5:	e8 17 1a 00 00       	call   c0016611 <Thr::executeDLL(unsigned long, void*)>
c0014bfa:	83 c4 10             	add    esp,0x10
c0014bfd:	31 c0                	xor    eax,eax
c0014bff:	31 d2                	xor    edx,edx
c0014c01:	59                   	pop    ecx
c0014c02:	5b                   	pop    ebx
c0014c03:	5e                   	pop    esi
c0014c04:	c3                   	ret    

c0014c05 <SysPause(regs*)>:
c0014c05:	83 ec 18             	sub    esp,0x18
c0014c08:	6a 08                	push   0x8
c0014c0a:	e8 dd 23 00 00       	call   c0016fec <blockTask(TaskState)>
c0014c0f:	31 c0                	xor    eax,eax
c0014c11:	31 d2                	xor    edx,edx
c0014c13:	83 c4 1c             	add    esp,0x1c
c0014c16:	c3                   	ret    

c0014c17 <SysRead(regs*)>:
c0014c17:	57                   	push   edi
c0014c18:	56                   	push   esi
c0014c19:	53                   	push   ebx
c0014c1a:	83 ec 10             	sub    esp,0x10
c0014c1d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014c21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014c24:	83 f8 02             	cmp    eax,0x2
c0014c27:	77 10                	ja     c0014c39 <SysRead(regs*)+0x22>
c0014c29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c31:	8b 88 66 05 00 00    	mov    ecx,DWORD PTR [eax+0x566]
c0014c37:	eb 0e                	jmp    c0014c47 <SysRead(regs*)+0x30>
c0014c39:	83 ec 0c             	sub    esp,0xc
c0014c3c:	50                   	push   eax
c0014c3d:	e8 1b e7 ff ff       	call   c001335d <KeGetFileFromDescriptor(int)>
c0014c42:	83 c4 10             	add    esp,0x10
c0014c45:	89 c1                	mov    ecx,eax
c0014c47:	83 c8 ff             	or     eax,0xffffffff
c0014c4a:	85 c9                	test   ecx,ecx
c0014c4c:	89 c2                	mov    edx,eax
c0014c4e:	74 28                	je     c0014c78 <SysRead(regs*)+0x61>
c0014c50:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c58:	31 ff                	xor    edi,edi
c0014c5a:	83 ec 0c             	sub    esp,0xc
c0014c5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014c5f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014c63:	52                   	push   edx
c0014c64:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c67:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014c6a:	57                   	push   edi
c0014c6b:	56                   	push   esi
c0014c6c:	51                   	push   ecx
c0014c6d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014c74:	83 c4 20             	add    esp,0x20
c0014c77:	99                   	cdq    
c0014c78:	83 c4 10             	add    esp,0x10
c0014c7b:	5b                   	pop    ebx
c0014c7c:	5e                   	pop    esi
c0014c7d:	5f                   	pop    edi
c0014c7e:	c3                   	ret    

c0014c7f <SysRegisterSignal(regs*)>:
c0014c7f:	83 ec 18             	sub    esp,0x18
c0014c82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c86:	6a 00                	push   0x0
c0014c88:	6a 00                	push   0x0
c0014c8a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014c8d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c95:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c98:	ff b0 80 07 00 00    	push   DWORD PTR [eax+0x780]
c0014c9e:	e8 75 c4 ff ff       	call   c0011118 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014ca3:	83 c4 2c             	add    esp,0x2c
c0014ca6:	99                   	cdq    
c0014ca7:	c3                   	ret    

c0014ca8 <SysRegistryGetTypeFromPath(regs*)>:
c0014ca8:	53                   	push   ebx
c0014ca9:	81 ec 40 01 00 00    	sub    esp,0x140
c0014caf:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014cb6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014cb9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014cbc:	e8 b3 92 ff ff       	call   c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014cc1:	83 c4 10             	add    esp,0x10
c0014cc4:	89 c1                	mov    ecx,eax
c0014cc6:	85 c0                	test   eax,eax
c0014cc8:	74 15                	je     c0014cdf <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014cca:	50                   	push   eax
c0014ccb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014ccf:	50                   	push   eax
c0014cd0:	51                   	push   ecx
c0014cd1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014cd4:	e8 7f 8e ff ff       	call   c000db58 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014cd9:	83 c4 10             	add    esp,0x10
c0014cdc:	99                   	cdq    
c0014cdd:	eb 05                	jmp    c0014ce4 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014cdf:	83 c8 ff             	or     eax,0xffffffff
c0014ce2:	89 c2                	mov    edx,eax
c0014ce4:	81 c4 38 01 00 00    	add    esp,0x138
c0014cea:	5b                   	pop    ebx
c0014ceb:	c3                   	ret    

c0014cec <SysRegistryReadExtent(regs*)>:
c0014cec:	83 ec 1c             	sub    esp,0x1c
c0014cef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014cf3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014cf6:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014cf9:	85 c0                	test   eax,eax
c0014cfb:	79 1f                	jns    c0014d1c <SysRegistryReadExtent(regs*)+0x30>
c0014cfd:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014d02:	52                   	push   edx
c0014d03:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014d07:	52                   	push   edx
c0014d08:	50                   	push   eax
c0014d09:	51                   	push   ecx
c0014d0a:	e8 3b 8d ff ff       	call   c000da4a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014d0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014d17:	83 c4 10             	add    esp,0x10
c0014d1a:	eb 14                	jmp    c0014d30 <SysRegistryReadExtent(regs*)+0x44>
c0014d1c:	83 ec 04             	sub    esp,0x4
c0014d1f:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014d22:	50                   	push   eax
c0014d23:	51                   	push   ecx
c0014d24:	e8 bb 87 ff ff       	call   c000d4e4 <CmGetString(Reghive_Tag*, int, char*)>
c0014d29:	83 c4 10             	add    esp,0x10
c0014d2c:	31 c0                	xor    eax,eax
c0014d2e:	31 d2                	xor    edx,edx
c0014d30:	83 c4 1c             	add    esp,0x1c
c0014d33:	c3                   	ret    

c0014d34 <SysRegistryPathToExtentLookup(regs*)>:
c0014d34:	83 ec 14             	sub    esp,0x14
c0014d37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d3b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014d3e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d41:	e8 2e 92 ff ff       	call   c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014d46:	83 c4 1c             	add    esp,0x1c
c0014d49:	99                   	cdq    
c0014d4a:	c3                   	ret    

c0014d4b <SysRegistryEnterDirectory(regs*)>:
c0014d4b:	83 ec 14             	sub    esp,0x14
c0014d4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d52:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014d55:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d58:	e8 fe 87 ff ff       	call   c000d55b <CmEnterDirectory(Reghive_Tag*, int)>
c0014d5d:	83 c4 1c             	add    esp,0x1c
c0014d60:	99                   	cdq    
c0014d61:	c3                   	ret    

c0014d62 <SysRegistryGetNext(regs*)>:
c0014d62:	83 ec 14             	sub    esp,0x14
c0014d65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d69:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014d6c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d6f:	e8 26 88 ff ff       	call   c000d59a <CmGetNext(Reghive_Tag*, int)>
c0014d74:	83 c4 1c             	add    esp,0x1c
c0014d77:	99                   	cdq    
c0014d78:	c3                   	ret    

c0014d79 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014d79:	57                   	push   edi
c0014d7a:	56                   	push   esi
c0014d7b:	53                   	push   ebx
c0014d7c:	81 ec 34 01 00 00    	sub    esp,0x134
c0014d82:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014d89:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014d8d:	57                   	push   edi
c0014d8e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014d91:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014d94:	e8 bf 8d ff ff       	call   c000db58 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014d99:	89 c3                	mov    ebx,eax
c0014d9b:	58                   	pop    eax
c0014d9c:	5a                   	pop    edx
c0014d9d:	57                   	push   edi
c0014d9e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014da1:	e8 9a b8 fe ff       	call   c0000640 <strcpy>
c0014da6:	89 d8                	mov    eax,ebx
c0014da8:	81 c4 40 01 00 00    	add    esp,0x140
c0014dae:	99                   	cdq    
c0014daf:	5b                   	pop    ebx
c0014db0:	5e                   	pop    esi
c0014db1:	5f                   	pop    edi
c0014db2:	c3                   	ret    

c0014db3 <SysRegistryOpen(regs*)>:
c0014db3:	83 ec 18             	sub    esp,0x18
c0014db6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dba:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014dbd:	e8 b2 85 ff ff       	call   c000d374 <CmOpen(char const*)>
c0014dc2:	83 c4 1c             	add    esp,0x1c
c0014dc5:	99                   	cdq    
c0014dc6:	c3                   	ret    

c0014dc7 <SysRegistryClose(regs*)>:
c0014dc7:	83 ec 18             	sub    esp,0x18
c0014dca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014dd1:	e8 bc 86 ff ff       	call   c000d492 <CmClose(Reghive_Tag*)>
c0014dd6:	31 c0                	xor    eax,eax
c0014dd8:	31 d2                	xor    edx,edx
c0014dda:	83 c4 1c             	add    esp,0x1c
c0014ddd:	c3                   	ret    

c0014dde <SysRegistryEasyReadString(regs*)>:
c0014dde:	57                   	push   edi
c0014ddf:	56                   	push   esi
c0014de0:	53                   	push   ebx
c0014de1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014de5:	83 ec 0c             	sub    esp,0xc
c0014de8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014deb:	e8 84 85 ff ff       	call   c000d374 <CmOpen(char const*)>
c0014df0:	5a                   	pop    edx
c0014df1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014df4:	59                   	pop    ecx
c0014df5:	89 c3                	mov    ebx,eax
c0014df7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014dfa:	50                   	push   eax
c0014dfb:	e8 74 91 ff ff       	call   c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014e00:	83 c4 10             	add    esp,0x10
c0014e03:	89 c1                	mov    ecx,eax
c0014e05:	b8 01 00 00 00       	mov    eax,0x1
c0014e0a:	85 c9                	test   ecx,ecx
c0014e0c:	7e 16                	jle    c0014e24 <SysRegistryEasyReadString(regs*)+0x46>
c0014e0e:	50                   	push   eax
c0014e0f:	57                   	push   edi
c0014e10:	51                   	push   ecx
c0014e11:	53                   	push   ebx
c0014e12:	e8 cd 86 ff ff       	call   c000d4e4 <CmGetString(Reghive_Tag*, int, char*)>
c0014e17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e1a:	e8 73 86 ff ff       	call   c000d492 <CmClose(Reghive_Tag*)>
c0014e1f:	83 c4 10             	add    esp,0x10
c0014e22:	31 c0                	xor    eax,eax
c0014e24:	5b                   	pop    ebx
c0014e25:	31 d2                	xor    edx,edx
c0014e27:	5e                   	pop    esi
c0014e28:	5f                   	pop    edi
c0014e29:	c3                   	ret    

c0014e2a <SysRegistryEasyReadInteger(regs*)>:
c0014e2a:	56                   	push   esi
c0014e2b:	53                   	push   ebx
c0014e2c:	83 ec 10             	sub    esp,0x10
c0014e2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014e33:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014e36:	e8 39 85 ff ff       	call   c000d374 <CmOpen(char const*)>
c0014e3b:	5a                   	pop    edx
c0014e3c:	89 c3                	mov    ebx,eax
c0014e3e:	59                   	pop    ecx
c0014e3f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014e42:	50                   	push   eax
c0014e43:	e8 2c 91 ff ff       	call   c000df74 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014e48:	83 c4 10             	add    esp,0x10
c0014e4b:	89 c1                	mov    ecx,eax
c0014e4d:	b8 01 00 00 00       	mov    eax,0x1
c0014e52:	85 c9                	test   ecx,ecx
c0014e54:	7e 18                	jle    c0014e6e <SysRegistryEasyReadInteger(regs*)+0x44>
c0014e56:	50                   	push   eax
c0014e57:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014e5a:	51                   	push   ecx
c0014e5b:	53                   	push   ebx
c0014e5c:	e8 e9 8b ff ff       	call   c000da4a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014e61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e64:	e8 29 86 ff ff       	call   c000d492 <CmClose(Reghive_Tag*)>
c0014e69:	83 c4 10             	add    esp,0x10
c0014e6c:	31 c0                	xor    eax,eax
c0014e6e:	59                   	pop    ecx
c0014e6f:	31 d2                	xor    edx,edx
c0014e71:	5b                   	pop    ebx
c0014e72:	5e                   	pop    esi
c0014e73:	c3                   	ret    

c0014e74 <SysSbrk(regs*)>:
c0014e74:	56                   	push   esi
c0014e75:	53                   	push   ebx
c0014e76:	50                   	push   eax
c0014e77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e80:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e83:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014e86:	8b 88 72 05 00 00    	mov    ecx,DWORD PTR [eax+0x572]
c0014e8c:	85 db                	test   ebx,ebx
c0014e8e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014e91:	74 02                	je     c0014e95 <SysSbrk(regs*)+0x21>
c0014e93:	79 06                	jns    c0014e9b <SysSbrk(regs*)+0x27>
c0014e95:	89 f0                	mov    eax,esi
c0014e97:	31 d2                	xor    edx,edx
c0014e99:	eb 2a                	jmp    c0014ec5 <SysSbrk(regs*)+0x51>
c0014e9b:	83 c8 ff             	or     eax,0xffffffff
c0014e9e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014ea4:	89 c2                	mov    edx,eax
c0014ea6:	77 1d                	ja     c0014ec5 <SysSbrk(regs*)+0x51>
c0014ea8:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014eae:	50                   	push   eax
c0014eaf:	c1 ea 0c             	shr    edx,0xc
c0014eb2:	68 07 0c 00 00       	push   0xc07
c0014eb7:	52                   	push   edx
c0014eb8:	51                   	push   ecx
c0014eb9:	e8 f2 ed ff ff       	call   c0013cb0 <VAS::allocatePages(int, int)>
c0014ebe:	89 f0                	mov    eax,esi
c0014ec0:	31 d2                	xor    edx,edx
c0014ec2:	83 c4 10             	add    esp,0x10
c0014ec5:	59                   	pop    ecx
c0014ec6:	5b                   	pop    ebx
c0014ec7:	5e                   	pop    esi
c0014ec8:	c3                   	ret    

c0014ec9 <SysSetCwd(regs*)>:
c0014ec9:	83 ec 14             	sub    esp,0x14
c0014ecc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ed0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ed3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ed8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014edb:	e8 d3 35 ff ff       	call   c00084b3 <Fs::setcwd(Process*, char*)>
c0014ee0:	83 c4 1c             	add    esp,0x1c
c0014ee3:	99                   	cdq    
c0014ee4:	c3                   	ret    

c0014ee5 <SysSetTime(regs*)>:
c0014ee5:	55                   	push   ebp
c0014ee6:	31 d2                	xor    edx,edx
c0014ee8:	57                   	push   edi
c0014ee9:	56                   	push   esi
c0014eea:	be 18 00 00 00       	mov    esi,0x18
c0014eef:	53                   	push   ebx
c0014ef0:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014ef5:	83 ec 20             	sub    esp,0x20
c0014ef8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014efc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014eff:	f7 f3                	div    ebx
c0014f01:	89 d7                	mov    edi,edx
c0014f03:	31 d2                	xor    edx,edx
c0014f05:	f7 f3                	div    ebx
c0014f07:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014f0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014f0e:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014f13:	31 d2                	xor    edx,edx
c0014f15:	f7 f3                	div    ebx
c0014f17:	31 d2                	xor    edx,edx
c0014f19:	f7 f6                	div    esi
c0014f1b:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014f1e:	89 d5                	mov    ebp,edx
c0014f20:	89 c3                	mov    ebx,eax
c0014f22:	be 0c 00 00 00       	mov    esi,0xc
c0014f27:	83 e3 1f             	and    ebx,0x1f
c0014f2a:	c1 e8 05             	shr    eax,0x5
c0014f2d:	43                   	inc    ebx
c0014f2e:	31 d2                	xor    edx,edx
c0014f30:	f7 f6                	div    esi
c0014f32:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014f36:	57                   	push   edi
c0014f37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f3b:	55                   	push   ebp
c0014f3c:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0014f40:	56                   	push   esi
c0014f41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f45:	53                   	push   ebx
c0014f46:	68 17 4c 02 c0       	push   0xc0024c17
c0014f4b:	e8 14 20 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014f50:	83 c4 1c             	add    esp,0x1c
c0014f53:	57                   	push   edi
c0014f54:	c1 e7 10             	shl    edi,0x10
c0014f57:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f5b:	55                   	push   ebp
c0014f5c:	56                   	push   esi
c0014f5d:	c1 e6 10             	shl    esi,0x10
c0014f60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f64:	53                   	push   ebx
c0014f65:	68 39 4c 02 c0       	push   0xc0024c39
c0014f6a:	e8 f5 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014f6f:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0014f74:	31 d2                	xor    edx,edx
c0014f76:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0014f7c:	31 c0                	xor    eax,eax
c0014f7e:	88 d8                	mov    al,bl
c0014f80:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c0014f84:	0f b7 d8             	movzx  ebx,ax
c0014f87:	09 f3                	or     ebx,esi
c0014f89:	89 d8                	mov    eax,ebx
c0014f8b:	89 eb                	mov    ebx,ebp
c0014f8d:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0014f91:	88 da                	mov    dl,bl
c0014f93:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c0014f97:	83 c4 1c             	add    esp,0x1c
c0014f9a:	89 d6                	mov    esi,edx
c0014f9c:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0014fa2:	09 fe                	or     esi,edi
c0014fa4:	56                   	push   esi
c0014fa5:	50                   	push   eax
c0014fa6:	51                   	push   ecx
c0014fa7:	e8 78 45 ff ff       	call   c0009524 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014fac:	83 c4 2c             	add    esp,0x2c
c0014faf:	83 f0 01             	xor    eax,0x1
c0014fb2:	5b                   	pop    ebx
c0014fb3:	0f b6 c0             	movzx  eax,al
c0014fb6:	5e                   	pop    esi
c0014fb7:	31 d2                	xor    edx,edx
c0014fb9:	5f                   	pop    edi
c0014fba:	5d                   	pop    ebp
c0014fbb:	c3                   	ret    

c0014fbc <SysSymlink(regs*)>:
c0014fbc:	56                   	push   esi
c0014fbd:	83 c8 ff             	or     eax,0xffffffff
c0014fc0:	53                   	push   ebx
c0014fc1:	89 c2                	mov    edx,eax
c0014fc3:	81 ec 34 02 00 00    	sub    esp,0x234
c0014fc9:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014fd0:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014fd4:	74 50                	je     c0015026 <SysSymlink(regs*)+0x6a>
c0014fd6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014fd9:	85 c9                	test   ecx,ecx
c0014fdb:	74 49                	je     c0015026 <SysSymlink(regs*)+0x6a>
c0014fdd:	6a 01                	push   0x1
c0014fdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fe4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fe7:	05 0c 01 00 00       	add    eax,0x10c
c0014fec:	50                   	push   eax
c0014fed:	51                   	push   ecx
c0014fee:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014ff2:	56                   	push   esi
c0014ff3:	e8 22 2e ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014ff8:	6a 01                	push   0x1
c0014ffa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015002:	05 0c 01 00 00       	add    eax,0x10c
c0015007:	50                   	push   eax
c0015008:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001500b:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0015012:	53                   	push   ebx
c0015013:	e8 02 2e ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015018:	83 c4 18             	add    esp,0x18
c001501b:	56                   	push   esi
c001501c:	53                   	push   ebx
c001501d:	e8 26 2a ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c0015022:	83 c4 10             	add    esp,0x10
c0015025:	99                   	cdq    
c0015026:	81 c4 34 02 00 00    	add    esp,0x234
c001502c:	5b                   	pop    ebx
c001502d:	5e                   	pop    esi
c001502e:	c3                   	ret    

c001502f <SysTimezone(regs*)>:
c001502f:	83 ec 0c             	sub    esp,0xc
c0015032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015036:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001503a:	75 17                	jne    c0015053 <SysTimezone(regs*)+0x24>
c001503c:	83 ec 0c             	sub    esp,0xc
c001503f:	68 5b 4c 02 c0       	push   0xc0024c5b
c0015044:	e8 1b 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015049:	83 c8 ff             	or     eax,0xffffffff
c001504c:	83 c4 10             	add    esp,0x10
c001504f:	89 c2                	mov    edx,eax
c0015051:	eb 16                	jmp    c0015069 <SysTimezone(regs*)+0x3a>
c0015053:	83 ec 0c             	sub    esp,0xc
c0015056:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015059:	e8 53 3f ff ff       	call   c0008fb1 <KeSetTimezone(int)>
c001505e:	31 d2                	xor    edx,edx
c0015060:	83 f0 01             	xor    eax,0x1
c0015063:	83 c4 10             	add    esp,0x10
c0015066:	0f b6 c0             	movzx  eax,al
c0015069:	83 c4 0c             	add    esp,0xc
c001506c:	c3                   	ret    

c001506d <SysTruncate(regs*)>:
c001506d:	55                   	push   ebp
c001506e:	57                   	push   edi
c001506f:	31 ff                	xor    edi,edi
c0015071:	56                   	push   esi
c0015072:	53                   	push   ebx
c0015073:	83 ec 0c             	sub    esp,0xc
c0015076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001507a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001507d:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0015080:	89 ce                	mov    esi,ecx
c0015082:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0015086:	0f 84 9a 00 00 00    	je     c0015126 <SysTruncate(regs*)+0xb9>
c001508c:	83 ec 0c             	sub    esp,0xc
c001508f:	68 14 01 00 00       	push   0x114
c0015094:	e8 fe ab ff ff       	call   c000fc97 <malloc>
c0015099:	83 c4 0c             	add    esp,0xc
c001509c:	89 c3                	mov    ebx,eax
c001509e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150a3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00150a6:	55                   	push   ebp
c00150a7:	53                   	push   ebx
c00150a8:	e8 85 30 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00150ad:	83 c4 10             	add    esp,0x10
c00150b0:	31 d2                	xor    edx,edx
c00150b2:	b8 03 00 00 00       	mov    eax,0x3
c00150b7:	85 db                	test   ebx,ebx
c00150b9:	0f 84 a2 00 00 00    	je     c0015161 <SysTruncate(regs*)+0xf4>
c00150bf:	51                   	push   ecx
c00150c0:	51                   	push   ecx
c00150c1:	6a 02                	push   0x2
c00150c3:	53                   	push   ebx
c00150c4:	e8 87 30 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00150c9:	83 c4 10             	add    esp,0x10
c00150cc:	85 c0                	test   eax,eax
c00150ce:	74 13                	je     c00150e3 <SysTruncate(regs*)+0x76>
c00150d0:	83 ec 0c             	sub    esp,0xc
c00150d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150d5:	53                   	push   ebx
c00150d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150d9:	83 c4 10             	add    esp,0x10
c00150dc:	b8 04 00 00 00       	mov    eax,0x4
c00150e1:	eb 7c                	jmp    c001515f <SysTruncate(regs*)+0xf2>
c00150e3:	52                   	push   edx
c00150e4:	57                   	push   edi
c00150e5:	56                   	push   esi
c00150e6:	53                   	push   ebx
c00150e7:	e8 78 31 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c00150ec:	83 c4 10             	add    esp,0x10
c00150ef:	85 c0                	test   eax,eax
c00150f1:	74 1b                	je     c001510e <SysTruncate(regs*)+0xa1>
c00150f3:	83 ec 0c             	sub    esp,0xc
c00150f6:	53                   	push   ebx
c00150f7:	e8 b2 30 ff ff       	call   c00081ae <File::close()>
c00150fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015101:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015104:	83 c4 10             	add    esp,0x10
c0015107:	b8 05 00 00 00       	mov    eax,0x5
c001510c:	eb 51                	jmp    c001515f <SysTruncate(regs*)+0xf2>
c001510e:	83 ec 0c             	sub    esp,0xc
c0015111:	53                   	push   ebx
c0015112:	e8 97 30 ff ff       	call   c00081ae <File::close()>
c0015117:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015119:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001511c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001511f:	83 c4 10             	add    esp,0x10
c0015122:	31 c0                	xor    eax,eax
c0015124:	eb 39                	jmp    c001515f <SysTruncate(regs*)+0xf2>
c0015126:	31 d2                	xor    edx,edx
c0015128:	b8 01 00 00 00       	mov    eax,0x1
c001512d:	83 fd 02             	cmp    ebp,0x2
c0015130:	7e 2f                	jle    c0015161 <SysTruncate(regs*)+0xf4>
c0015132:	83 ec 0c             	sub    esp,0xc
c0015135:	51                   	push   ecx
c0015136:	e8 22 e2 ff ff       	call   c001335d <KeGetFileFromDescriptor(int)>
c001513b:	83 c4 10             	add    esp,0x10
c001513e:	89 c1                	mov    ecx,eax
c0015140:	31 d2                	xor    edx,edx
c0015142:	b8 02 00 00 00       	mov    eax,0x2
c0015147:	85 c9                	test   ecx,ecx
c0015149:	74 16                	je     c0015161 <SysTruncate(regs*)+0xf4>
c001514b:	50                   	push   eax
c001514c:	57                   	push   edi
c001514d:	56                   	push   esi
c001514e:	51                   	push   ecx
c001514f:	e8 10 31 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c0015154:	83 c4 10             	add    esp,0x10
c0015157:	85 c0                	test   eax,eax
c0015159:	0f 95 c0             	setne  al
c001515c:	0f b6 c0             	movzx  eax,al
c001515f:	31 d2                	xor    edx,edx
c0015161:	83 c4 0c             	add    esp,0xc
c0015164:	5b                   	pop    ebx
c0015165:	5e                   	pop    esi
c0015166:	5f                   	pop    edi
c0015167:	5d                   	pop    ebp
c0015168:	c3                   	ret    

c0015169 <SysWrite(regs*)>:
c0015169:	57                   	push   edi
c001516a:	56                   	push   esi
c001516b:	53                   	push   ebx
c001516c:	83 ec 10             	sub    esp,0x10
c001516f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015173:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015176:	83 f8 02             	cmp    eax,0x2
c0015179:	77 10                	ja     c001518b <SysWrite(regs*)+0x22>
c001517b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015180:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015183:	8b 88 66 05 00 00    	mov    ecx,DWORD PTR [eax+0x566]
c0015189:	eb 0e                	jmp    c0015199 <SysWrite(regs*)+0x30>
c001518b:	83 ec 0c             	sub    esp,0xc
c001518e:	50                   	push   eax
c001518f:	e8 c9 e1 ff ff       	call   c001335d <KeGetFileFromDescriptor(int)>
c0015194:	83 c4 10             	add    esp,0x10
c0015197:	89 c1                	mov    ecx,eax
c0015199:	83 c8 ff             	or     eax,0xffffffff
c001519c:	85 c9                	test   ecx,ecx
c001519e:	89 c2                	mov    edx,eax
c00151a0:	74 28                	je     c00151ca <SysWrite(regs*)+0x61>
c00151a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00151aa:	31 ff                	xor    edi,edi
c00151ac:	83 ec 0c             	sub    esp,0xc
c00151af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00151b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00151b5:	52                   	push   edx
c00151b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00151b9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00151bc:	57                   	push   edi
c00151bd:	56                   	push   esi
c00151be:	51                   	push   ecx
c00151bf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00151c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00151c6:	83 c4 20             	add    esp,0x20
c00151c9:	99                   	cdq    
c00151ca:	83 c4 10             	add    esp,0x10
c00151cd:	5b                   	pop    ebx
c00151ce:	5e                   	pop    esi
c00151cf:	5f                   	pop    edi
c00151d0:	c3                   	ret    

c00151d1 <SysWsbe(regs*)>:
c00151d1:	55                   	push   ebp
c00151d2:	57                   	push   edi
c00151d3:	56                   	push   esi
c00151d4:	53                   	push   ebx
c00151d5:	83 ec 3c             	sub    esp,0x3c
c00151d8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00151dc:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c00151e3:	75 2d                	jne    c0015212 <SysWsbe(regs*)+0x41>
c00151e5:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c00151ec:	75 24                	jne    c0015212 <SysWsbe(regs*)+0x41>
c00151ee:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00151f5:	75 1b                	jne    c0015212 <SysWsbe(regs*)+0x41>
c00151f7:	6a 01                	push   0x1
c00151f9:	6a 00                	push   0x0
c00151fb:	68 21 9f 00 c0       	push   0xc0009f21
c0015200:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0015206:	e8 89 1a 00 00       	call   c0016c94 <Process::createThread(void (*)(void*), void*, int)>
c001520b:	83 c4 10             	add    esp,0x10
c001520e:	31 c0                	xor    eax,eax
c0015210:	eb 52                	jmp    c0015264 <SysWsbe(regs*)+0x93>
c0015212:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015216:	be 70 4c 02 c0       	mov    esi,0xc0024c70
c001521b:	b9 0b 00 00 00       	mov    ecx,0xb
c0015220:	fc                   	cld    
c0015221:	83 ec 0c             	sub    esp,0xc
c0015224:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015226:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001522a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001522f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015232:	8b b0 66 05 00 00    	mov    esi,DWORD PTR [eax+0x566]
c0015238:	8b 06                	mov    eax,DWORD PTR [esi]
c001523a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c001523d:	57                   	push   edi
c001523e:	e8 2d b3 fe ff       	call   c0000570 <strlen>
c0015243:	5a                   	pop    edx
c0015244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015248:	52                   	push   edx
c0015249:	31 d2                	xor    edx,edx
c001524b:	57                   	push   edi
c001524c:	52                   	push   edx
c001524d:	50                   	push   eax
c001524e:	56                   	push   esi
c001524f:	ff d5                	call   ebp
c0015251:	83 c4 14             	add    esp,0x14
c0015254:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015257:	e8 d4 24 00 00       	call   c0017730 <terminateTask(int)>
c001525c:	83 c4 10             	add    esp,0x10
c001525f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015264:	83 c4 3c             	add    esp,0x3c
c0015267:	31 d2                	xor    edx,edx
c0015269:	5b                   	pop    ebx
c001526a:	5e                   	pop    esi
c001526b:	5f                   	pop    edi
c001526c:	5d                   	pop    ebp
c001526d:	c3                   	ret    

c001526e <SysYield(regs*)>:
c001526e:	83 ec 0c             	sub    esp,0xc
c0015271:	fa                   	cli    
c0015272:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015278:	e8 af 1c 00 00       	call   c0016f2c <schedule()>
c001527d:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0015284:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001528b:	75 01                	jne    c001528e <SysYield(regs*)+0x20>
c001528d:	fb                   	sti    
c001528e:	31 c0                	xor    eax,eax
c0015290:	31 d2                	xor    edx,edx
c0015292:	83 c4 0c             	add    esp,0xc
c0015295:	c3                   	ret    
c0015296:	66 90                	xchg   ax,ax

c0015298 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0015298:	55                   	push   ebp
c0015299:	57                   	push   edi
c001529a:	56                   	push   esi
c001529b:	53                   	push   ebx
c001529c:	83 ec 2c             	sub    esp,0x2c
c001529f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00152a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152a7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00152ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00152b3:	83 ec 08             	sub    esp,0x8
c00152b6:	50                   	push   eax
c00152b7:	68 9c 4c 02 c0       	push   0xc0024c9c
c00152bc:	e8 a3 1c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00152c1:	83 c4 10             	add    esp,0x10
c00152c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152c8:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00152cb:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00152ce:	89 c1                	mov    ecx,eax
c00152d0:	80 f5 00             	xor    ch,0x0
c00152d3:	89 cf                	mov    edi,ecx
c00152d5:	89 d0                	mov    eax,edx
c00152d7:	80 f4 00             	xor    ah,0x0
c00152da:	89 c5                	mov    ebp,eax
c00152dc:	89 e8                	mov    eax,ebp
c00152de:	09 f8                	or     eax,edi
c00152e0:	74 22                	je     c0015304 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x6c>
c00152e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152e6:	8b 78 63             	mov    edi,DWORD PTR [eax+0x63]
c00152e9:	8b 68 67             	mov    ebp,DWORD PTR [eax+0x67]
c00152ec:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c00152f1:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c00152f7:	29 c7                	sub    edi,eax
c00152f9:	19 d5                	sbb    ebp,edx
c00152fb:	89 f8                	mov    eax,edi
c00152fd:	89 ea                	mov    edx,ebp
c00152ff:	eb 0f                	jmp    c0015310 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x78>
c0015301:	8d 76 00             	lea    esi,[esi+0x0]
c0015304:	b8 00 00 00 00       	mov    eax,0x0
c0015309:	ba 00 00 00 00       	mov    edx,0x0
c001530e:	66 90                	xchg   ax,ax
c0015310:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015314:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0015318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001531c:	80 f4 00             	xor    ah,0x0
c001531f:	89 c3                	mov    ebx,eax
c0015321:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015325:	80 f4 00             	xor    ah,0x0
c0015328:	89 c6                	mov    esi,eax
c001532a:	89 f0                	mov    eax,esi
c001532c:	09 d8                	or     eax,ebx
c001532e:	74 1c                	je     c001534c <KeAlarm(ThreadControlBlock*, unsigned long long)+0xb4>
c0015330:	8b 0d 50 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bb50
c0015336:	8b 1d 54 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb54
c001533c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015340:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015344:	01 c8                	add    eax,ecx
c0015346:	11 da                	adc    edx,ebx
c0015348:	eb 0e                	jmp    c0015358 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xc0>
c001534a:	66 90                	xchg   ax,ax
c001534c:	b8 00 00 00 00       	mov    eax,0x0
c0015351:	ba 00 00 00 00       	mov    edx,0x0
c0015356:	66 90                	xchg   ax,ax
c0015358:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001535c:	89 41 63             	mov    DWORD PTR [ecx+0x63],eax
c001535f:	89 51 67             	mov    DWORD PTR [ecx+0x67],edx
c0015362:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015366:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c0015369:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c001536c:	83 ec 08             	sub    esp,0x8
c001536f:	50                   	push   eax
c0015370:	68 b0 4c 02 c0       	push   0xc0024cb0
c0015375:	e8 ea 1b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001537a:	83 c4 10             	add    esp,0x10
c001537d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015381:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015385:	83 c4 2c             	add    esp,0x2c
c0015388:	5b                   	pop    ebx
c0015389:	5e                   	pop    esi
c001538a:	5f                   	pop    edi
c001538b:	5d                   	pop    ebp
c001538c:	c3                   	ret    
c001538d:	8d 76 00             	lea    esi,[esi+0x0]

c0015390 <KeCheckAlarm(ThreadControlBlock*)>:
c0015390:	56                   	push   esi
c0015391:	53                   	push   ebx
c0015392:	83 ec 04             	sub    esp,0x4
c0015395:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c001539a:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c00153a0:	89 c1                	mov    ecx,eax
c00153a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153a6:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00153a9:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00153ac:	83 ec 04             	sub    esp,0x4
c00153af:	51                   	push   ecx
c00153b0:	50                   	push   eax
c00153b1:	68 bc 4c 02 c0       	push   0xc0024cbc
c00153b6:	e8 a9 1b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00153bb:	83 c4 10             	add    esp,0x10
c00153be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153c2:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00153c5:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00153c8:	89 c1                	mov    ecx,eax
c00153ca:	80 f5 00             	xor    ch,0x0
c00153cd:	89 cb                	mov    ebx,ecx
c00153cf:	89 d0                	mov    eax,edx
c00153d1:	80 f4 00             	xor    ah,0x0
c00153d4:	89 c6                	mov    esi,eax
c00153d6:	89 f0                	mov    eax,esi
c00153d8:	09 d8                	or     eax,ebx
c00153da:	74 5c                	je     c0015438 <KeCheckAlarm(ThreadControlBlock*)+0xa8>
c00153dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153e0:	8b 48 63             	mov    ecx,DWORD PTR [eax+0x63]
c00153e3:	8b 58 67             	mov    ebx,DWORD PTR [eax+0x67]
c00153e6:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c00153eb:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c00153f1:	39 c8                	cmp    eax,ecx
c00153f3:	89 d0                	mov    eax,edx
c00153f5:	19 d8                	sbb    eax,ebx
c00153f7:	72 3f                	jb     c0015438 <KeCheckAlarm(ThreadControlBlock*)+0xa8>
c00153f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153fd:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c0015404:	c7 40 67 00 00 00 00 	mov    DWORD PTR [eax+0x67],0x0
c001540b:	83 ec 0c             	sub    esp,0xc
c001540e:	68 d8 4c 02 c0       	push   0xc0024cd8
c0015413:	e8 4c 1b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015418:	83 c4 10             	add    esp,0x10
c001541b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001541f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015422:	8b 80 80 07 00 00    	mov    eax,DWORD PTR [eax+0x780]
c0015428:	83 ec 08             	sub    esp,0x8
c001542b:	6a 0e                	push   0xe
c001542d:	50                   	push   eax
c001542e:	e8 1b bd ff ff       	call   c001114e <KeRaiseSignal(SigHandlerBlock*, int)>
c0015433:	83 c4 10             	add    esp,0x10
c0015436:	66 90                	xchg   ax,ax
c0015438:	90                   	nop
c0015439:	83 c4 04             	add    esp,0x4
c001543c:	5b                   	pop    ebx
c001543d:	5e                   	pop    esi
c001543e:	c3                   	ret    

c001543f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001543f:	55                   	push   ebp
c0015440:	57                   	push   edi
c0015441:	56                   	push   esi
c0015442:	53                   	push   ebx
c0015443:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015449:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015451:	0f 95 c0             	setne  al
c0015454:	31 d2                	xor    edx,edx
c0015456:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001545e:	0f 94 c2             	sete   dl
c0015461:	85 c2                	test   edx,eax
c0015463:	74 34                	je     c0015499 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015465:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015470:	74 27                	je     c0015499 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015472:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015479:	05 00 10 00 00       	add    eax,0x1000
c001547e:	89 c1                	mov    ecx,eax
c0015480:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015485:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001548b:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0015492:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0015499:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00154a0:	83 ec 0c             	sub    esp,0xc
c00154a3:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00154a9:	6a 01                	push   0x1
c00154ab:	e8 19 e0 ff ff       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c00154b0:	83 c4 10             	add    esp,0x10
c00154b3:	89 c3                	mov    ebx,eax
c00154b5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00154bb:	0f 86 26 01 00 00    	jbe    c00155e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00154c1:	c1 ee 0c             	shr    esi,0xc
c00154c4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00154cb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00154cf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00154d7:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00154de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00154e2:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00154e9:	29 ef                	sub    edi,ebp
c00154eb:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00154ef:	0f 83 f9 00 00 00    	jae    c00155ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c00154f5:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00154fb:	76 05                	jbe    c0015502 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00154fd:	bf 00 10 00 00       	mov    edi,0x1000
c0015502:	83 ec 0c             	sub    esp,0xc
c0015505:	31 d2                	xor    edx,edx
c0015507:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001550e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015510:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015514:	50                   	push   eax
c0015515:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015519:	56                   	push   esi
c001551a:	52                   	push   edx
c001551b:	57                   	push   edi
c001551c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015523:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015526:	83 c4 20             	add    esp,0x20
c0015529:	85 c0                	test   eax,eax
c001552b:	75 06                	jne    c0015533 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001552d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015531:	74 13                	je     c0015546 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015533:	83 ec 0c             	sub    esp,0xc
c0015536:	53                   	push   ebx
c0015537:	e8 95 e2 ff ff       	call   c00137d1 <Virt::freeKernelVirtualPages(unsigned long)>
c001553c:	83 c4 10             	add    esp,0x10
c001553f:	31 c0                	xor    eax,eax
c0015541:	e9 80 01 00 00       	jmp    c00156c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0015546:	fa                   	cli    
c0015547:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001554d:	e8 80 ac ff ff       	call   c00101d2 <Phys::allocatePage()>
c0015552:	6a 07                	push   0x7
c0015554:	89 c7                	mov    edi,eax
c0015556:	53                   	push   ebx
c0015557:	50                   	push   eax
c0015558:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001555d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015560:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c0015566:	e8 41 e6 ff ff       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c001556b:	83 c4 0c             	add    esp,0xc
c001556e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015575:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c001557b:	6a 00                	push   0x0
c001557d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015582:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015585:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c001558b:	e8 88 e4 ff ff       	call   c0013a18 <VAS::mapOtherVASIn(bool, VAS*)>
c0015590:	58                   	pop    eax
c0015591:	5a                   	pop    edx
c0015592:	68 07 0c 00 00       	push   0xc07
c0015597:	55                   	push   ebp
c0015598:	57                   	push   edi
c0015599:	89 df                	mov    edi,ebx
c001559b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00155a2:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00155a8:	6a 00                	push   0x0
c00155aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155b2:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00155b8:	e8 31 e8 ff ff       	call   c0013dee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00155bd:	b9 00 10 00 00       	mov    ecx,0x1000
c00155c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00155c4:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00155cb:	83 c4 20             	add    esp,0x20
c00155ce:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00155d5:	75 01                	jne    c00155d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c00155d7:	fb                   	sti    
c00155d8:	81 c5 00 10 00 00    	add    ebp,0x1000
c00155de:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00155e2:	e9 f0 fe ff ff       	jmp    c00154d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00155e7:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00155ee:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00155f5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00155fb:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015601:	0f 86 b1 00 00 00    	jbe    c00156b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015607:	fa                   	cli    
c0015608:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001560e:	c1 ee 0c             	shr    esi,0xc
c0015611:	51                   	push   ecx
c0015612:	31 ff                	xor    edi,edi
c0015614:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001561b:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c0015621:	6a 00                	push   0x0
c0015623:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015628:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001562b:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c0015631:	e8 e2 e3 ff ff       	call   c0013a18 <VAS::mapOtherVASIn(bool, VAS*)>
c0015636:	83 c4 10             	add    esp,0x10
c0015639:	e8 94 ab ff ff       	call   c00101d2 <Phys::allocatePage()>
c001563e:	47                   	inc    edi
c001563f:	6a 07                	push   0x7
c0015641:	53                   	push   ebx
c0015642:	50                   	push   eax
c0015643:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015647:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001564d:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015650:	ff b2 72 05 00 00    	push   DWORD PTR [edx+0x572]
c0015656:	e8 51 e5 ff ff       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c001565b:	58                   	pop    eax
c001565c:	5a                   	pop    edx
c001565d:	68 07 0c 00 00       	push   0xc07
c0015662:	55                   	push   ebp
c0015663:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015669:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001566d:	50                   	push   eax
c001566e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015675:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c001567b:	6a 00                	push   0x0
c001567d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015682:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015685:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c001568b:	e8 5e e7 ff ff       	call   c0013dee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015690:	83 c4 1c             	add    esp,0x1c
c0015693:	68 00 10 00 00       	push   0x1000
c0015698:	6a 00                	push   0x0
c001569a:	53                   	push   ebx
c001569b:	e8 50 ae fe ff       	call   c00004f0 <memset>
c00156a0:	83 c4 10             	add    esp,0x10
c00156a3:	39 fe                	cmp    esi,edi
c00156a5:	77 92                	ja     c0015639 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c00156a7:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00156ae:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00156b5:	75 01                	jne    c00156b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00156b7:	fb                   	sti    
c00156b8:	83 ec 0c             	sub    esp,0xc
c00156bb:	53                   	push   ebx
c00156bc:	e8 10 e1 ff ff       	call   c00137d1 <Virt::freeKernelVirtualPages(unsigned long)>
c00156c1:	83 c4 10             	add    esp,0x10
c00156c4:	b0 01                	mov    al,0x1
c00156c6:	81 c4 2c 10 00 00    	add    esp,0x102c
c00156cc:	5b                   	pop    ebx
c00156cd:	5e                   	pop    esi
c00156ce:	5f                   	pop    edi
c00156cf:	5d                   	pop    ebp
c00156d0:	c3                   	ret    

c00156d1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00156d1:	55                   	push   ebp
c00156d2:	57                   	push   edi
c00156d3:	56                   	push   esi
c00156d4:	53                   	push   ebx
c00156d5:	83 ec 48             	sub    esp,0x48
c00156d8:	68 14 01 00 00       	push   0x114
c00156dd:	e8 b5 a5 ff ff       	call   c000fc97 <malloc>
c00156e2:	83 c4 0c             	add    esp,0xc
c00156e5:	89 c6                	mov    esi,eax
c00156e7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00156eb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00156ef:	50                   	push   eax
c00156f0:	e8 3d 2a ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00156f5:	58                   	pop    eax
c00156f6:	5a                   	pop    edx
c00156f7:	6a 01                	push   0x1
c00156f9:	56                   	push   esi
c00156fa:	e8 51 2a ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00156ff:	83 c4 10             	add    esp,0x10
c0015702:	85 c0                	test   eax,eax
c0015704:	0f 85 43 01 00 00    	jne    c001584d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001570a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0015712:	83 ec 0c             	sub    esp,0xc
c0015715:	6a 34                	push   0x34
c0015717:	e8 7b a5 ff ff       	call   c000fc97 <malloc>
c001571c:	89 c3                	mov    ebx,eax
c001571e:	58                   	pop    eax
c001571f:	8b 06                	mov    eax,DWORD PTR [esi]
c0015721:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0015725:	57                   	push   edi
c0015726:	53                   	push   ebx
c0015727:	6a 00                	push   0x0
c0015729:	6a 34                	push   0x34
c001572b:	56                   	push   esi
c001572c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001572f:	83 c4 20             	add    esp,0x20
c0015732:	85 c0                	test   eax,eax
c0015734:	0f 85 13 01 00 00    	jne    c001584d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001573a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015740:	0f 85 07 01 00 00    	jne    c001584d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0015746:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015749:	85 c0                	test   eax,eax
c001574b:	0f 84 fc 00 00 00    	je     c001584d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0015751:	31 d2                	xor    edx,edx
c0015753:	55                   	push   ebp
c0015754:	52                   	push   edx
c0015755:	50                   	push   eax
c0015756:	56                   	push   esi
c0015757:	e8 b2 2a ff ff       	call   c000820e <File::seek(unsigned long long)>
c001575c:	83 c4 10             	add    esp,0x10
c001575f:	85 c0                	test   eax,eax
c0015761:	0f 85 e6 00 00 00    	jne    c001584d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0015767:	83 ec 0c             	sub    esp,0xc
c001576a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001576d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015771:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015775:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015779:	0f af c2             	imul   eax,edx
c001577c:	50                   	push   eax
c001577d:	e8 15 a5 ff ff       	call   c000fc97 <malloc>
c0015782:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015784:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015788:	89 3c 24             	mov    DWORD PTR [esp],edi
c001578b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001578f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015793:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015797:	0f af c2             	imul   eax,edx
c001579a:	99                   	cdq    
c001579b:	52                   	push   edx
c001579c:	50                   	push   eax
c001579d:	56                   	push   esi
c001579e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00157a1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00157a4:	83 c4 20             	add    esp,0x20
c00157a7:	85 c0                	test   eax,eax
c00157a9:	0f 84 9e 00 00 00    	je     c001584d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00157af:	31 d2                	xor    edx,edx
c00157b1:	51                   	push   ecx
c00157b2:	52                   	push   edx
c00157b3:	50                   	push   eax
c00157b4:	56                   	push   esi
c00157b5:	e8 54 2a ff ff       	call   c000820e <File::seek(unsigned long long)>
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	85 c0                	test   eax,eax
c00157bf:	0f 85 88 00 00 00    	jne    c001584d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00157c5:	83 ec 0c             	sub    esp,0xc
c00157c8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00157cc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00157d0:	31 ed                	xor    ebp,ebp
c00157d2:	0f af c2             	imul   eax,edx
c00157d5:	50                   	push   eax
c00157d6:	e8 bc a4 ff ff       	call   c000fc97 <malloc>
c00157db:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00157dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00157e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00157e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157e8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00157ec:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00157f0:	0f af c2             	imul   eax,edx
c00157f3:	99                   	cdq    
c00157f4:	52                   	push   edx
c00157f5:	50                   	push   eax
c00157f6:	56                   	push   esi
c00157f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00157fa:	83 c4 20             	add    esp,0x20
c00157fd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015805:	0f b7 fd             	movzx  edi,bp
c0015808:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c001580c:	73 7d                	jae    c001588b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c001580e:	c1 e7 05             	shl    edi,0x5
c0015811:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0015815:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015818:	75 6b                	jne    c0015885 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c001581a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001581d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015821:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015824:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015828:	52                   	push   edx
c0015829:	31 d2                	xor    edx,edx
c001582b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001582e:	52                   	push   edx
c001582f:	50                   	push   eax
c0015830:	56                   	push   esi
c0015831:	e8 d8 29 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015836:	83 c4 10             	add    esp,0x10
c0015839:	85 c0                	test   eax,eax
c001583b:	74 17                	je     c0015854 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c001583d:	83 ec 0c             	sub    esp,0xc
c0015840:	68 e9 4c 02 c0       	push   0xc0024ce9
c0015845:	e8 1a 17 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001584a:	83 c4 10             	add    esp,0x10
c001584d:	31 c0                	xor    eax,eax
c001584f:	e9 87 00 00 00       	jmp    c00158db <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0015854:	83 ec 0c             	sub    esp,0xc
c0015857:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001585a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001585d:	50                   	push   eax
c001585e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015862:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015866:	56                   	push   esi
c0015867:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001586b:	e8 cf fb ff ff       	call   c001543f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015870:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015874:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015878:	83 c4 20             	add    esp,0x20
c001587b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001587f:	73 04                	jae    c0015885 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0015881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015885:	45                   	inc    ebp
c0015886:	e9 7a ff ff ff       	jmp    c0015805 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001588b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001588f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015893:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015897:	89 91 6e 05 00 00    	mov    DWORD PTR [ecx+0x56e],edx
c001589d:	83 ec 0c             	sub    esp,0xc
c00158a0:	8b 91 72 05 00 00    	mov    edx,DWORD PTR [ecx+0x572]
c00158a6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158ab:	05 00 10 00 00       	add    eax,0x1000
c00158b0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00158b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158b7:	e8 eb a3 ff ff       	call   c000fca7 <free>
c00158bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00158bf:	e8 e3 a3 ff ff       	call   c000fca7 <free>
c00158c4:	58                   	pop    eax
c00158c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158c9:	e8 d9 a3 ff ff       	call   c000fca7 <free>
c00158ce:	89 34 24             	mov    DWORD PTR [esp],esi
c00158d1:	e8 d8 28 ff ff       	call   c00081ae <File::close()>
c00158d6:	83 c4 10             	add    esp,0x10
c00158d9:	b0 01                	mov    al,0x1
c00158db:	83 c4 3c             	add    esp,0x3c
c00158de:	5b                   	pop    ebx
c00158df:	5e                   	pop    esi
c00158e0:	5f                   	pop    edi
c00158e1:	5d                   	pop    ebp
c00158e2:	c3                   	ret    

c00158e3 <Thr::runtimeReferenceHelper()>:
c00158e3:	83 ec 18             	sub    esp,0x18
c00158e6:	68 f1 4c 02 c0       	push   0xc0024cf1
c00158eb:	e8 74 16 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00158f0:	fa                   	cli    
c00158f1:	83 c4 10             	add    esp,0x10
c00158f4:	eb fe                	jmp    c00158f4 <Thr::runtimeReferenceHelper()+0x11>

c00158f6 <Thr::getAddressOfKernelSymbol(char const*)>:
c00158f6:	57                   	push   edi
c00158f7:	56                   	push   esi
c00158f8:	53                   	push   ebx
c00158f9:	31 db                	xor    ebx,ebx
c00158fb:	39 1d 00 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea00,ebx
c0015901:	7e 3c                	jle    c001593f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015903:	8b 34 9d 80 e9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1680]
c001590a:	31 ff                	xor    edi,edi
c001590c:	39 3c 9d 80 e8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1780],edi
c0015913:	7e 27                	jle    c001593c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015915:	50                   	push   eax
c0015916:	50                   	push   eax
c0015917:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001591b:	8b 06                	mov    eax,DWORD PTR [esi]
c001591d:	03 04 9d 00 e9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1700]
c0015924:	50                   	push   eax
c0015925:	e8 26 ae fe ff       	call   c0000750 <strcmp>
c001592a:	83 c4 10             	add    esp,0x10
c001592d:	85 c0                	test   eax,eax
c001592f:	75 05                	jne    c0015936 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015931:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015934:	eb 0b                	jmp    c0015941 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015936:	83 c6 10             	add    esi,0x10
c0015939:	47                   	inc    edi
c001593a:	eb d0                	jmp    c001590c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001593c:	43                   	inc    ebx
c001593d:	eb bc                	jmp    c00158fb <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001593f:	31 c0                	xor    eax,eax
c0015941:	5b                   	pop    ebx
c0015942:	5e                   	pop    esi
c0015943:	5f                   	pop    edi
c0015944:	c3                   	ret    

c0015945 <Thr::loadKernelSymbolTable(char const*)>:
c0015945:	55                   	push   ebp
c0015946:	57                   	push   edi
c0015947:	56                   	push   esi
c0015948:	53                   	push   ebx
c0015949:	83 ec 68             	sub    esp,0x68
c001594c:	8b 35 58 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea58
c0015952:	68 14 01 00 00       	push   0x114
c0015957:	e8 3b a3 ff ff       	call   c000fc97 <malloc>
c001595c:	83 c4 0c             	add    esp,0xc
c001595f:	89 c3                	mov    ebx,eax
c0015961:	56                   	push   esi
c0015962:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015966:	50                   	push   eax
c0015967:	e8 c6 27 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c001596c:	5e                   	pop    esi
c001596d:	5f                   	pop    edi
c001596e:	6a 01                	push   0x1
c0015970:	53                   	push   ebx
c0015971:	e8 da 27 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0015976:	83 c4 10             	add    esp,0x10
c0015979:	85 c0                	test   eax,eax
c001597b:	74 0a                	je     c0015987 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001597d:	83 ec 0c             	sub    esp,0xc
c0015980:	68 13 4d 02 c0       	push   0xc0024d13
c0015985:	eb 34                	jmp    c00159bb <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015987:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001598f:	83 ec 0c             	sub    esp,0xc
c0015992:	6a 34                	push   0x34
c0015994:	e8 fe a2 ff ff       	call   c000fc97 <malloc>
c0015999:	59                   	pop    ecx
c001599a:	89 c7                	mov    edi,eax
c001599c:	8d 74 24 34          	lea    esi,[esp+0x34]
c00159a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159a2:	56                   	push   esi
c00159a3:	57                   	push   edi
c00159a4:	6a 00                	push   0x0
c00159a6:	6a 34                	push   0x34
c00159a8:	53                   	push   ebx
c00159a9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00159ac:	83 c4 20             	add    esp,0x20
c00159af:	85 c0                	test   eax,eax
c00159b1:	74 17                	je     c00159ca <Thr::loadKernelSymbolTable(char const*)+0x85>
c00159b3:	83 ec 0c             	sub    esp,0xc
c00159b6:	68 2a 4d 02 c0       	push   0xc0024d2a
c00159bb:	e8 1e a6 ff ff       	call   c000ffde <KePanic(char const*)>
c00159c0:	83 c4 10             	add    esp,0x10
c00159c3:	31 c0                	xor    eax,eax
c00159c5:	e9 31 02 00 00       	jmp    c0015bfb <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00159ca:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00159d0:	75 e1                	jne    c00159b3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00159d2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00159d5:	85 c0                	test   eax,eax
c00159d7:	74 da                	je     c00159b3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00159d9:	52                   	push   edx
c00159da:	31 d2                	xor    edx,edx
c00159dc:	52                   	push   edx
c00159dd:	50                   	push   eax
c00159de:	53                   	push   ebx
c00159df:	e8 2a 28 ff ff       	call   c000820e <File::seek(unsigned long long)>
c00159e4:	83 c4 10             	add    esp,0x10
c00159e7:	85 c0                	test   eax,eax
c00159e9:	75 c8                	jne    c00159b3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00159eb:	83 ec 0c             	sub    esp,0xc
c00159ee:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00159f2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00159f6:	31 ed                	xor    ebp,ebp
c00159f8:	0f af c2             	imul   eax,edx
c00159fb:	50                   	push   eax
c00159fc:	e8 96 a2 ff ff       	call   c000fc97 <malloc>
c0015a01:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015a03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015a07:	89 34 24             	mov    DWORD PTR [esp],esi
c0015a0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a0e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015a12:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015a16:	0f af c2             	imul   eax,edx
c0015a19:	99                   	cdq    
c0015a1a:	52                   	push   edx
c0015a1b:	50                   	push   eax
c0015a1c:	53                   	push   ebx
c0015a1d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a20:	83 c4 20             	add    esp,0x20
c0015a23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015a2b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015a33:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015a3b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015a43:	0f b7 f5             	movzx  esi,bp
c0015a46:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015a4a:	0f 83 a7 00 00 00    	jae    c0015af7 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015a50:	6b f6 28             	imul   esi,esi,0x28
c0015a53:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015a57:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015a5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015a5e:	50                   	push   eax
c0015a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a63:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015a67:	8b 16                	mov    edx,DWORD PTR [esi]
c0015a69:	6b c0 28             	imul   eax,eax,0x28
c0015a6c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015a70:	89 d0                	mov    eax,edx
c0015a72:	31 d2                	xor    edx,edx
c0015a74:	52                   	push   edx
c0015a75:	50                   	push   eax
c0015a76:	53                   	push   ebx
c0015a77:	e8 92 27 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015a7c:	83 c4 0c             	add    esp,0xc
c0015a7f:	6a 20                	push   0x20
c0015a81:	6a 00                	push   0x0
c0015a83:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015a87:	52                   	push   edx
c0015a88:	e8 63 aa fe ff       	call   c00004f0 <memset>
c0015a8d:	58                   	pop    eax
c0015a8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a90:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015a94:	51                   	push   ecx
c0015a95:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015a99:	52                   	push   edx
c0015a9a:	6a 00                	push   0x0
c0015a9c:	6a 1f                	push   0x1f
c0015a9e:	53                   	push   ebx
c0015a9f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015aa2:	83 c4 18             	add    esp,0x18
c0015aa5:	68 41 4d 02 c0       	push   0xc0024d41
c0015aaa:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015aae:	52                   	push   edx
c0015aaf:	e8 9c ac fe ff       	call   c0000750 <strcmp>
c0015ab4:	83 c4 10             	add    esp,0x10
c0015ab7:	85 c0                	test   eax,eax
c0015ab9:	75 0f                	jne    c0015aca <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015abb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015abe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ac2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ac6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015aca:	50                   	push   eax
c0015acb:	50                   	push   eax
c0015acc:	68 49 4d 02 c0       	push   0xc0024d49
c0015ad1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015ad5:	50                   	push   eax
c0015ad6:	e8 75 ac fe ff       	call   c0000750 <strcmp>
c0015adb:	83 c4 10             	add    esp,0x10
c0015ade:	85 c0                	test   eax,eax
c0015ae0:	75 0f                	jne    c0015af1 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015ae2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015ae5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015ae9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015aed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015af1:	45                   	inc    ebp
c0015af2:	e9 4c ff ff ff       	jmp    c0015a43 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015af7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015afc:	75 10                	jne    c0015b0e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015afe:	83 ec 0c             	sub    esp,0xc
c0015b01:	68 51 4d 02 c0       	push   0xc0024d51
c0015b06:	e8 d3 a4 ff ff       	call   c000ffde <KePanic(char const*)>
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015b13:	75 10                	jne    c0015b25 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015b15:	83 ec 0c             	sub    esp,0xc
c0015b18:	68 51 4d 02 c0       	push   0xc0024d51
c0015b1d:	e8 bc a4 ff ff       	call   c000ffde <KePanic(char const*)>
c0015b22:	83 c4 10             	add    esp,0x10
c0015b25:	31 d2                	xor    edx,edx
c0015b27:	50                   	push   eax
c0015b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b2c:	52                   	push   edx
c0015b2d:	50                   	push   eax
c0015b2e:	53                   	push   ebx
c0015b2f:	e8 da 26 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015b34:	5a                   	pop    edx
c0015b35:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b39:	e8 59 a1 ff ff       	call   c000fc97 <malloc>
c0015b3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015b46:	31 c9                	xor    ecx,ecx
c0015b48:	5e                   	pop    esi
c0015b49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b4b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015b4f:	55                   	push   ebp
c0015b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b54:	51                   	push   ecx
c0015b55:	52                   	push   edx
c0015b56:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015b5a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015b5e:	53                   	push   ebx
c0015b5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b62:	83 c4 14             	add    esp,0x14
c0015b65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015b69:	e8 29 a1 ff ff       	call   c000fc97 <malloc>
c0015b6e:	89 c6                	mov    esi,eax
c0015b70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b72:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015b75:	56                   	push   esi
c0015b76:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015b7a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015b7e:	51                   	push   ecx
c0015b7f:	52                   	push   edx
c0015b80:	53                   	push   ebx
c0015b81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015b88:	8b 15 00 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea00
c0015b8e:	83 c4 1c             	add    esp,0x1c
c0015b91:	c1 e8 04             	shr    eax,0x4
c0015b94:	89 04 95 80 e8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1780],eax
c0015b9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015b9f:	31 d2                	xor    edx,edx
c0015ba1:	52                   	push   edx
c0015ba2:	50                   	push   eax
c0015ba3:	53                   	push   ebx
c0015ba4:	e8 65 26 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015ba9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015bab:	31 d2                	xor    edx,edx
c0015bad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015bb0:	56                   	push   esi
c0015bb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015bb5:	52                   	push   edx
c0015bb6:	50                   	push   eax
c0015bb7:	53                   	push   ebx
c0015bb8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015bbb:	83 c4 14             	add    esp,0x14
c0015bbe:	53                   	push   ebx
c0015bbf:	e8 ea 25 ff ff       	call   c00081ae <File::close()>
c0015bc4:	5d                   	pop    ebp
c0015bc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015bc9:	e8 d9 a0 ff ff       	call   c000fca7 <free>
c0015bce:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015bd1:	e8 d1 a0 ff ff       	call   c000fca7 <free>
c0015bd6:	a1 00 ea 02 c0       	mov    eax,ds:0xc002ea00
c0015bdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015bdf:	8d 50 01             	lea    edx,[eax+0x1]
c0015be2:	89 0c 85 80 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1680],ecx
c0015be9:	89 34 85 00 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1700],esi
c0015bf0:	89 15 00 ea 02 c0    	mov    DWORD PTR ds:0xc002ea00,edx
c0015bf6:	83 c4 10             	add    esp,0x10
c0015bf9:	b0 01                	mov    al,0x1
c0015bfb:	83 c4 5c             	add    esp,0x5c
c0015bfe:	5b                   	pop    ebx
c0015bff:	5e                   	pop    esi
c0015c00:	5f                   	pop    edi
c0015c01:	5d                   	pop    ebp
c0015c02:	c3                   	ret    

c0015c03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015c03:	55                   	push   ebp
c0015c04:	57                   	push   edi
c0015c05:	56                   	push   esi
c0015c06:	53                   	push   ebx
c0015c07:	81 ec 68 03 00 00    	sub    esp,0x368
c0015c0d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0015c14:	8b 1d 58 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea58
c0015c1a:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015c1e:	68 14 01 00 00       	push   0x114
c0015c23:	e8 6f a0 ff ff       	call   c000fc97 <malloc>
c0015c28:	83 c4 0c             	add    esp,0xc
c0015c2b:	89 c5                	mov    ebp,eax
c0015c2d:	53                   	push   ebx
c0015c2e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015c35:	50                   	push   eax
c0015c36:	e8 f7 24 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0015c3b:	5e                   	pop    esi
c0015c3c:	5f                   	pop    edi
c0015c3d:	6a 01                	push   0x1
c0015c3f:	55                   	push   ebp
c0015c40:	e8 0b 25 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0015c45:	83 c4 10             	add    esp,0x10
c0015c48:	85 c0                	test   eax,eax
c0015c4a:	0f 85 aa 06 00 00    	jne    c00162fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015c50:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015c58:	83 ec 0c             	sub    esp,0xc
c0015c5b:	6a 34                	push   0x34
c0015c5d:	e8 35 a0 ff ff       	call   c000fc97 <malloc>
c0015c62:	5b                   	pop    ebx
c0015c63:	89 c7                	mov    edi,eax
c0015c65:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015c69:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015c6c:	53                   	push   ebx
c0015c6d:	57                   	push   edi
c0015c6e:	6a 00                	push   0x0
c0015c70:	6a 34                	push   0x34
c0015c72:	55                   	push   ebp
c0015c73:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c76:	83 c4 20             	add    esp,0x20
c0015c79:	85 c0                	test   eax,eax
c0015c7b:	0f 85 79 06 00 00    	jne    c00162fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015c81:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015c87:	0f 85 6d 06 00 00    	jne    c00162fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015c8d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015c90:	85 c0                	test   eax,eax
c0015c92:	0f 84 62 06 00 00    	je     c00162fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015c98:	31 d2                	xor    edx,edx
c0015c9a:	51                   	push   ecx
c0015c9b:	52                   	push   edx
c0015c9c:	50                   	push   eax
c0015c9d:	55                   	push   ebp
c0015c9e:	e8 6b 25 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015ca3:	83 c4 10             	add    esp,0x10
c0015ca6:	85 c0                	test   eax,eax
c0015ca8:	0f 85 4c 06 00 00    	jne    c00162fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015cae:	83 ec 0c             	sub    esp,0xc
c0015cb1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015cb4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015cb8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cbc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015cc0:	0f af c2             	imul   eax,edx
c0015cc3:	50                   	push   eax
c0015cc4:	e8 ce 9f ff ff       	call   c000fc97 <malloc>
c0015cc9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015ccc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015cd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015cd7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015cdb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015cdf:	0f af c2             	imul   eax,edx
c0015ce2:	99                   	cdq    
c0015ce3:	52                   	push   edx
c0015ce4:	50                   	push   eax
c0015ce5:	55                   	push   ebp
c0015ce6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ce9:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015cec:	83 c4 20             	add    esp,0x20
c0015cef:	85 c0                	test   eax,eax
c0015cf1:	0f 84 03 06 00 00    	je     c00162fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015cf7:	52                   	push   edx
c0015cf8:	31 d2                	xor    edx,edx
c0015cfa:	52                   	push   edx
c0015cfb:	50                   	push   eax
c0015cfc:	55                   	push   ebp
c0015cfd:	e8 0c 25 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015d02:	83 c4 10             	add    esp,0x10
c0015d05:	85 c0                	test   eax,eax
c0015d07:	0f 85 ed 05 00 00    	jne    c00162fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015d0d:	83 ec 0c             	sub    esp,0xc
c0015d10:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015d14:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015d18:	31 f6                	xor    esi,esi
c0015d1a:	0f af c2             	imul   eax,edx
c0015d1d:	50                   	push   eax
c0015d1e:	e8 74 9f ff ff       	call   c000fc97 <malloc>
c0015d23:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015d26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015d2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015d31:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015d35:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015d39:	0f af c2             	imul   eax,edx
c0015d3c:	99                   	cdq    
c0015d3d:	52                   	push   edx
c0015d3e:	50                   	push   eax
c0015d3f:	55                   	push   ebp
c0015d40:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d43:	83 c4 20             	add    esp,0x20
c0015d46:	0f b7 de             	movzx  ebx,si
c0015d49:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0015d4d:	0f 83 87 00 00 00    	jae    c0015dda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0015d53:	c1 e3 05             	shl    ebx,0x5
c0015d56:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0015d5a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015d5d:	75 75                	jne    c0015dd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0015d5f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015d62:	31 d2                	xor    edx,edx
c0015d64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d68:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015d6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d6f:	50                   	push   eax
c0015d70:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015d73:	52                   	push   edx
c0015d74:	50                   	push   eax
c0015d75:	55                   	push   ebp
c0015d76:	e8 93 24 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015d7b:	83 c4 10             	add    esp,0x10
c0015d7e:	85 c0                	test   eax,eax
c0015d80:	0f 85 74 05 00 00    	jne    c00162fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015d86:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015d8d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015d90:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0015d94:	31 d2                	xor    edx,edx
c0015d96:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015d9a:	83 ec 0c             	sub    esp,0xc
c0015d9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015da1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015da8:	50                   	push   eax
c0015da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015dad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015db1:	52                   	push   edx
c0015db2:	50                   	push   eax
c0015db3:	55                   	push   ebp
c0015db4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015db7:	83 c4 1c             	add    esp,0x1c
c0015dba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015dbd:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015dc0:	50                   	push   eax
c0015dc1:	6a 00                	push   0x0
c0015dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dc7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015dcb:	50                   	push   eax
c0015dcc:	e8 1f a7 fe ff       	call   c00004f0 <memset>
c0015dd1:	83 c4 10             	add    esp,0x10
c0015dd4:	46                   	inc    esi
c0015dd5:	e9 6c ff ff ff       	jmp    c0015d46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015dda:	53                   	push   ebx
c0015ddb:	31 db                	xor    ebx,ebx
c0015ddd:	68 00 01 00 00       	push   0x100
c0015de2:	6a 00                	push   0x0
c0015de4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015de8:	50                   	push   eax
c0015de9:	e8 02 a7 fe ff       	call   c00004f0 <memset>
c0015dee:	83 c4 0c             	add    esp,0xc
c0015df1:	68 00 01 00 00       	push   0x100
c0015df6:	6a 00                	push   0x0
c0015df8:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015dff:	50                   	push   eax
c0015e00:	e8 eb a6 fe ff       	call   c00004f0 <memset>
c0015e05:	83 c4 10             	add    esp,0x10
c0015e08:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015e10:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015e18:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015e20:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015e28:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015e30:	0f b7 f3             	movzx  esi,bx
c0015e33:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015e37:	0f 83 2d 01 00 00    	jae    c0015f6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0015e3d:	6b f6 28             	imul   esi,esi,0x28
c0015e40:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015e44:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015e47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e4b:	52                   	push   edx
c0015e4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e50:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015e54:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e56:	6b d2 28             	imul   edx,edx,0x28
c0015e59:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015e5d:	31 d2                	xor    edx,edx
c0015e5f:	52                   	push   edx
c0015e60:	50                   	push   eax
c0015e61:	55                   	push   ebp
c0015e62:	e8 a7 23 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015e67:	83 c4 0c             	add    esp,0xc
c0015e6a:	6a 20                	push   0x20
c0015e6c:	6a 00                	push   0x0
c0015e6e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015e75:	51                   	push   ecx
c0015e76:	e8 75 a6 fe ff       	call   c00004f0 <memset>
c0015e7b:	59                   	pop    ecx
c0015e7c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015e7f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015e83:	52                   	push   edx
c0015e84:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015e8b:	51                   	push   ecx
c0015e8c:	6a 00                	push   0x0
c0015e8e:	6a 1f                	push   0x1f
c0015e90:	55                   	push   ebp
c0015e91:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e94:	83 c4 1c             	add    esp,0x1c
c0015e97:	6a 09                	push   0x9
c0015e99:	68 6b 4d 02 c0       	push   0xc0024d6b
c0015e9e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015ea5:	51                   	push   ecx
c0015ea6:	e8 d5 a4 fe ff       	call   c0000380 <memcmp>
c0015eab:	83 c4 10             	add    esp,0x10
c0015eae:	85 c0                	test   eax,eax
c0015eb0:	75 21                	jne    c0015ed3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015eb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015eba:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015ebe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ec2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015ec5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015ecc:	89 d0                	mov    eax,edx
c0015ece:	40                   	inc    eax
c0015ecf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ed3:	50                   	push   eax
c0015ed4:	6a 09                	push   0x9
c0015ed6:	68 75 4d 02 c0       	push   0xc0024d75
c0015edb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015ee2:	50                   	push   eax
c0015ee3:	e8 98 a4 fe ff       	call   c0000380 <memcmp>
c0015ee8:	83 c4 10             	add    esp,0x10
c0015eeb:	85 c0                	test   eax,eax
c0015eed:	75 21                	jne    c0015f10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0015eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ef3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ef7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015efb:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0015eff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015f02:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015f09:	89 d0                	mov    eax,edx
c0015f0b:	40                   	inc    eax
c0015f0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f10:	50                   	push   eax
c0015f11:	50                   	push   eax
c0015f12:	68 41 4d 02 c0       	push   0xc0024d41
c0015f17:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015f1e:	50                   	push   eax
c0015f1f:	e8 2c a8 fe ff       	call   c0000750 <strcmp>
c0015f24:	83 c4 10             	add    esp,0x10
c0015f27:	85 c0                	test   eax,eax
c0015f29:	75 0f                	jne    c0015f3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0015f2b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015f2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015f3a:	50                   	push   eax
c0015f3b:	50                   	push   eax
c0015f3c:	68 49 4d 02 c0       	push   0xc0024d49
c0015f41:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015f48:	50                   	push   eax
c0015f49:	e8 02 a8 fe ff       	call   c0000750 <strcmp>
c0015f4e:	83 c4 10             	add    esp,0x10
c0015f51:	85 c0                	test   eax,eax
c0015f53:	75 0f                	jne    c0015f64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0015f55:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015f58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015f5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f60:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015f64:	43                   	inc    ebx
c0015f65:	e9 c6 fe ff ff       	jmp    c0015e30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015f6a:	31 d2                	xor    edx,edx
c0015f6c:	50                   	push   eax
c0015f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f71:	52                   	push   edx
c0015f72:	50                   	push   eax
c0015f73:	55                   	push   ebp
c0015f74:	e8 95 22 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015f79:	58                   	pop    eax
c0015f7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f7e:	e8 14 9d ff ff       	call   c000fc97 <malloc>
c0015f83:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015f86:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015f8a:	31 d2                	xor    edx,edx
c0015f8c:	58                   	pop    eax
c0015f8d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015f91:	53                   	push   ebx
c0015f92:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015f96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f9a:	52                   	push   edx
c0015f9b:	50                   	push   eax
c0015f9c:	55                   	push   ebp
c0015f9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fa0:	83 c4 14             	add    esp,0x14
c0015fa3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015fa7:	e8 eb 9c ff ff       	call   c000fc97 <malloc>
c0015fac:	31 d2                	xor    edx,edx
c0015fae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015fb2:	83 c4 0c             	add    esp,0xc
c0015fb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015fb9:	52                   	push   edx
c0015fba:	50                   	push   eax
c0015fbb:	55                   	push   ebp
c0015fbc:	e8 4d 22 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015fc1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015fc4:	31 d2                	xor    edx,edx
c0015fc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015fcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015fd1:	52                   	push   edx
c0015fd2:	50                   	push   eax
c0015fd3:	55                   	push   ebp
c0015fd4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fd7:	83 c4 20             	add    esp,0x20
c0015fda:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0015fdf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015fe7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015feb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fef:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015ff3:	0f 84 05 03 00 00    	je     c00162fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015ff9:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0016000:	31 d2                	xor    edx,edx
c0016002:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016006:	c1 e8 03             	shr    eax,0x3
c0016009:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001600d:	51                   	push   ecx
c001600e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016012:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0016016:	52                   	push   edx
c0016017:	50                   	push   eax
c0016018:	55                   	push   ebp
c0016019:	e8 f0 21 ff ff       	call   c000820e <File::seek(unsigned long long)>
c001601e:	5b                   	pop    ebx
c001601f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016023:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001602a:	e8 68 9c ff ff       	call   c000fc97 <malloc>
c001602f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016032:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016036:	31 d2                	xor    edx,edx
c0016038:	5e                   	pop    esi
c0016039:	8d 44 24 58          	lea    eax,[esp+0x58]
c001603d:	50                   	push   eax
c001603e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016042:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016046:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001604d:	52                   	push   edx
c001604e:	50                   	push   eax
c001604f:	55                   	push   ebp
c0016050:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016053:	83 c4 20             	add    esp,0x20
c0016056:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001605e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016062:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0016066:	0f 8d 76 02 00 00    	jge    c00162e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c001606c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016070:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016074:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0016079:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c001607c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016080:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016084:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0016088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001608c:	c1 e8 08             	shr    eax,0x8
c001608f:	89 c6                	mov    esi,eax
c0016091:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016095:	c1 e6 04             	shl    esi,0x4
c0016098:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001609c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c001609f:	85 db                	test   ebx,ebx
c00160a1:	0f 85 b3 00 00 00    	jne    c001615a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00160a7:	83 ec 0c             	sub    esp,0xc
c00160aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160ae:	03 06                	add    eax,DWORD PTR [esi]
c00160b0:	50                   	push   eax
c00160b1:	e8 40 f8 ff ff       	call   c00158f6 <Thr::getAddressOfKernelSymbol(char const*)>
c00160b6:	83 c4 10             	add    esp,0x10
c00160b9:	89 c3                	mov    ebx,eax
c00160bb:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00160c0:	85 c0                	test   eax,eax
c00160c2:	0f 85 92 00 00 00    	jne    c001615a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00160c8:	83 ec 0c             	sub    esp,0xc
c00160cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160cf:	03 06                	add    eax,DWORD PTR [esi]
c00160d1:	50                   	push   eax
c00160d2:	e8 99 a9 ff ff       	call   c0010a70 <KeResolveCompatibilitySymbol(char*)>
c00160d7:	83 c4 10             	add    esp,0x10
c00160da:	89 c3                	mov    ebx,eax
c00160dc:	85 c0                	test   eax,eax
c00160de:	75 7a                	jne    c001615a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00160e0:	51                   	push   ecx
c00160e1:	51                   	push   ecx
c00160e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00160e6:	03 06                	add    eax,DWORD PTR [esi]
c00160e8:	50                   	push   eax
c00160e9:	68 7f 4d 02 c0       	push   0xc0024d7f
c00160ee:	e8 71 0e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00160f3:	58                   	pop    eax
c00160f4:	5a                   	pop    edx
c00160f5:	68 99 4d 02 c0       	push   0xc0024d99
c00160fa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016101:	50                   	push   eax
c0016102:	e8 39 a5 fe ff       	call   c0000640 <strcpy>
c0016107:	59                   	pop    ecx
c0016108:	58                   	pop    eax
c0016109:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001610d:	03 06                	add    eax,DWORD PTR [esi]
c001610f:	50                   	push   eax
c0016110:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016117:	50                   	push   eax
c0016118:	e8 23 a7 fe ff       	call   c0000840 <strcat>
c001611d:	58                   	pop    eax
c001611e:	5a                   	pop    edx
c001611f:	68 33 4e 02 c0       	push   0xc0024e33
c0016124:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001612b:	50                   	push   eax
c001612c:	e8 0f a7 fe ff       	call   c0000840 <strcat>
c0016131:	83 c4 10             	add    esp,0x10
c0016134:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016139:	0f 84 5d 01 00 00    	je     c001629c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001613f:	83 ec 0c             	sub    esp,0xc
c0016142:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016149:	50                   	push   eax
c001614a:	e8 8f 9e ff ff       	call   c000ffde <KePanic(char const*)>
c001614f:	83 c4 10             	add    esp,0x10
c0016152:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0016156:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c001615a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001615f:	83 f8 01             	cmp    eax,0x1
c0016162:	0f 85 8f 00 00 00    	jne    c00161f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0016168:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001616f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0016173:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0016177:	01 ce                	add    esi,ecx
c0016179:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0016181:	0f 94 c0             	sete   al
c0016184:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001618c:	0f 94 c2             	sete   dl
c001618f:	09 c2                	or     edx,eax
c0016191:	8b 06                	mov    eax,DWORD PTR [esi]
c0016193:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0016198:	0f b6 d2             	movzx  edx,dl
c001619b:	74 41                	je     c00161de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c001619d:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00161a0:	85 d2                	test   edx,edx
c00161a2:	75 15                	jne    c00161b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00161a4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00161a8:	66 83 f8 0c          	cmp    ax,0xc
c00161ac:	76 05                	jbe    c00161b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00161ae:	b8 0c 00 00 00       	mov    eax,0xc
c00161b3:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00161b7:	76 37                	jbe    c00161f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00161b9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00161bd:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00161c2:	0f 84 d4 00 00 00    	je     c001629c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00161c8:	83 ec 0c             	sub    esp,0xc
c00161cb:	68 b0 4d 02 c0       	push   0xc0024db0
c00161d0:	e8 09 9e ff ff       	call   c000ffde <KePanic(char const*)>
c00161d5:	83 c4 10             	add    esp,0x10
c00161d8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00161dc:	eb 12                	jmp    c00161f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00161de:	01 c1                	add    ecx,eax
c00161e0:	85 d2                	test   edx,edx
c00161e2:	75 0c                	jne    c00161f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00161e4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00161e8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00161ec:	77 02                	ja     c00161f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00161ee:	01 d9                	add    ecx,ebx
c00161f0:	89 0e                	mov    DWORD PTR [esi],ecx
c00161f2:	e9 e2 00 00 00       	jmp    c00162d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00161f7:	83 f8 02             	cmp    eax,0x2
c00161fa:	75 77                	jne    c0016273 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00161fc:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0016203:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0016207:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c001620b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0016213:	74 21                	je     c0016236 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0016215:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001621d:	74 17                	je     c0016236 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001621f:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0016223:	b8 0a 00 00 00       	mov    eax,0xa
c0016228:	83 fa 0e             	cmp    edx,0xe
c001622b:	77 03                	ja     c0016230 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001622d:	8d 42 fc             	lea    eax,[edx-0x4]
c0016230:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016234:	76 17                	jbe    c001624d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0016236:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001623b:	74 5f                	je     c001629c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001623d:	83 ec 0c             	sub    esp,0xc
c0016240:	68 cc 4d 02 c0       	push   0xc0024dcc
c0016245:	e8 94 9d ff ff       	call   c000ffde <KePanic(char const*)>
c001624a:	83 c4 10             	add    esp,0x10
c001624d:	8b 06                	mov    eax,DWORD PTR [esi]
c001624f:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0016254:	74 13                	je     c0016269 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0016256:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001625a:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0016261:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0016265:	01 d0                	add    eax,edx
c0016267:	eb 04                	jmp    c001626d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0016269:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001626d:	01 c3                	add    ebx,eax
c001626f:	89 1e                	mov    DWORD PTR [esi],ebx
c0016271:	eb 66                	jmp    c00162d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0016273:	52                   	push   edx
c0016274:	52                   	push   edx
c0016275:	50                   	push   eax
c0016276:	68 e8 4d 02 c0       	push   0xc0024de8
c001627b:	e8 e4 0c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016280:	83 c4 10             	add    esp,0x10
c0016283:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016288:	74 12                	je     c001629c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001628a:	83 ec 0c             	sub    esp,0xc
c001628d:	68 f3 4d 02 c0       	push   0xc0024df3
c0016292:	e8 47 9d ff ff       	call   c000ffde <KePanic(char const*)>
c0016297:	83 c4 10             	add    esp,0x10
c001629a:	eb 3d                	jmp    c00162d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	55                   	push   ebp
c00162a0:	e8 09 1f ff ff       	call   c00081ae <File::close()>
c00162a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00162a8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00162ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162ae:	59                   	pop    ecx
c00162af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162b3:	e8 ef 99 ff ff       	call   c000fca7 <free>
c00162b8:	5b                   	pop    ebx
c00162b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00162bd:	e8 e5 99 ff ff       	call   c000fca7 <free>
c00162c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00162c5:	e8 dd 99 ff ff       	call   c000fca7 <free>
c00162ca:	5e                   	pop    esi
c00162cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162cf:	e8 d3 99 ff ff       	call   c000fca7 <free>
c00162d4:	83 c4 10             	add    esp,0x10
c00162d7:	eb 21                	jmp    c00162fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00162d9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00162dd:	e9 7c fd ff ff       	jmp    c001605e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00162e2:	83 ec 0c             	sub    esp,0xc
c00162e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162e9:	e8 b9 99 ff ff       	call   c000fca7 <free>
c00162ee:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00162f2:	83 c4 10             	add    esp,0x10
c00162f5:	e9 f1 fc ff ff       	jmp    c0015feb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00162fa:	31 c0                	xor    eax,eax
c00162fc:	eb 33                	jmp    c0016331 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00162fe:	83 ec 0c             	sub    esp,0xc
c0016301:	55                   	push   ebp
c0016302:	e8 a7 1e ff ff       	call   c00081ae <File::close()>
c0016307:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001630a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001630d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016310:	58                   	pop    eax
c0016311:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016315:	e8 8d 99 ff ff       	call   c000fca7 <free>
c001631a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001631d:	e8 85 99 ff ff       	call   c000fca7 <free>
c0016322:	5a                   	pop    edx
c0016323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016327:	e8 7b 99 ff ff       	call   c000fca7 <free>
c001632c:	83 c4 10             	add    esp,0x10
c001632f:	b0 01                	mov    al,0x1
c0016331:	81 c4 5c 03 00 00    	add    esp,0x35c
c0016337:	5b                   	pop    ebx
c0016338:	5e                   	pop    esi
c0016339:	5f                   	pop    edi
c001633a:	5d                   	pop    ebp
c001633b:	c3                   	ret    

c001633c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001633c:	56                   	push   esi
c001633d:	31 d2                	xor    edx,edx
c001633f:	53                   	push   ebx
c0016340:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c0016346:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001634a:	39 d3                	cmp    ebx,edx
c001634c:	7e 1b                	jle    c0016369 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001634e:	8b 04 95 80 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b80]
c0016355:	39 c8                	cmp    eax,ecx
c0016357:	77 0d                	ja     c0016366 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016359:	8b 34 95 80 e2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1d80]
c0016360:	01 c6                	add    esi,eax
c0016362:	39 ce                	cmp    esi,ecx
c0016364:	77 05                	ja     c001636b <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0016366:	42                   	inc    edx
c0016367:	eb e1                	jmp    c001634a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016369:	31 c0                	xor    eax,eax
c001636b:	5b                   	pop    ebx
c001636c:	5e                   	pop    esi
c001636d:	c3                   	ret    

c001636e <Thr::getDriverNameFromAddress(unsigned long)>:
c001636e:	53                   	push   ebx
c001636f:	31 c0                	xor    eax,eax
c0016371:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016375:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c001637b:	39 c3                	cmp    ebx,eax
c001637d:	7e 22                	jle    c00163a1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001637f:	8b 14 85 80 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b80]
c0016386:	39 ca                	cmp    edx,ecx
c0016388:	77 14                	ja     c001639e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001638a:	03 14 85 80 e2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1d80]
c0016391:	39 ca                	cmp    edx,ecx
c0016393:	76 09                	jbe    c001639e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016395:	8b 04 85 80 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1980]
c001639c:	eb 05                	jmp    c00163a3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001639e:	40                   	inc    eax
c001639f:	eb da                	jmp    c001637b <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00163a1:	31 c0                	xor    eax,eax
c00163a3:	5b                   	pop    ebx
c00163a4:	c3                   	ret    

c00163a5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00163a5:	53                   	push   ebx
c00163a6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00163aa:	53                   	push   ebx
c00163ab:	e8 8c ff ff ff       	call   c001633c <Thr::getDriverBaseFromAddress(unsigned long)>
c00163b0:	5a                   	pop    edx
c00163b1:	31 d2                	xor    edx,edx
c00163b3:	85 c0                	test   eax,eax
c00163b5:	74 04                	je     c00163bb <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00163b7:	89 da                	mov    edx,ebx
c00163b9:	29 c2                	sub    edx,eax
c00163bb:	89 d0                	mov    eax,edx
c00163bd:	5b                   	pop    ebx
c00163be:	c3                   	ret    

c00163bf <Thr::loadDLL(char const*, bool)>:
c00163bf:	55                   	push   ebp
c00163c0:	57                   	push   edi
c00163c1:	56                   	push   esi
c00163c2:	53                   	push   ebx
c00163c3:	81 ec 34 01 00 00    	sub    esp,0x134
c00163c9:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00163d0:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00163d7:	56                   	push   esi
c00163d8:	68 0b 4e 02 c0       	push   0xc0024e0b
c00163dd:	e8 82 0b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00163e2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00163e9:	e8 a9 98 ff ff       	call   c000fc97 <malloc>
c00163ee:	83 c4 0c             	add    esp,0xc
c00163f1:	89 c3                	mov    ebx,eax
c00163f3:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00163f9:	56                   	push   esi
c00163fa:	50                   	push   eax
c00163fb:	e8 32 1d ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0016400:	83 c4 10             	add    esp,0x10
c0016403:	85 db                	test   ebx,ebx
c0016405:	75 3c                	jne    c0016443 <Thr::loadDLL(char const*, bool)+0x84>
c0016407:	89 f8                	mov    eax,edi
c0016409:	84 c0                	test   al,al
c001640b:	0f 84 f3 01 00 00    	je     c0016604 <Thr::loadDLL(char const*, bool)+0x245>
c0016411:	55                   	push   ebp
c0016412:	55                   	push   ebp
c0016413:	68 1c 4e 02 c0       	push   0xc0024e1c
c0016418:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001641c:	55                   	push   ebp
c001641d:	e8 1e a2 fe ff       	call   c0000640 <strcpy>
c0016422:	58                   	pop    eax
c0016423:	5a                   	pop    edx
c0016424:	56                   	push   esi
c0016425:	55                   	push   ebp
c0016426:	e8 15 a4 fe ff       	call   c0000840 <strcat>
c001642b:	59                   	pop    ecx
c001642c:	58                   	pop    eax
c001642d:	68 33 4e 02 c0       	push   0xc0024e33
c0016432:	55                   	push   ebp
c0016433:	e8 08 a4 fe ff       	call   c0000840 <strcat>
c0016438:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001643b:	e8 9e 9b ff ff       	call   c000ffde <KePanic(char const*)>
c0016440:	83 c4 10             	add    esp,0x10
c0016443:	51                   	push   ecx
c0016444:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016448:	50                   	push   eax
c0016449:	8d 44 24 20          	lea    eax,[esp+0x20]
c001644d:	50                   	push   eax
c001644e:	53                   	push   ebx
c001644f:	e8 fe 1f ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0016454:	83 c4 10             	add    esp,0x10
c0016457:	89 c5                	mov    ebp,eax
c0016459:	85 db                	test   ebx,ebx
c001645b:	74 0c                	je     c0016469 <Thr::loadDLL(char const*, bool)+0xaa>
c001645d:	83 ec 0c             	sub    esp,0xc
c0016460:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016462:	53                   	push   ebx
c0016463:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016466:	83 c4 10             	add    esp,0x10
c0016469:	83 ec 0c             	sub    esp,0xc
c001646c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0016471:	50                   	push   eax
c0016472:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016476:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001647a:	55                   	push   ebp
c001647b:	68 35 4e 02 c0       	push   0xc0024e35
c0016480:	e8 df 0a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016485:	83 c4 20             	add    esp,0x20
c0016488:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001648d:	75 0a                	jne    c0016499 <Thr::loadDLL(char const*, bool)+0xda>
c001648f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016493:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016497:	75 3c                	jne    c00164d5 <Thr::loadDLL(char const*, bool)+0x116>
c0016499:	89 f8                	mov    eax,edi
c001649b:	84 c0                	test   al,al
c001649d:	0f 84 49 01 00 00    	je     c00165ec <Thr::loadDLL(char const*, bool)+0x22d>
c00164a3:	51                   	push   ecx
c00164a4:	51                   	push   ecx
c00164a5:	68 56 4e 02 c0       	push   0xc0024e56
c00164aa:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00164ae:	53                   	push   ebx
c00164af:	e8 8c a1 fe ff       	call   c0000640 <strcpy>
c00164b4:	5d                   	pop    ebp
c00164b5:	58                   	pop    eax
c00164b6:	56                   	push   esi
c00164b7:	53                   	push   ebx
c00164b8:	e8 83 a3 fe ff       	call   c0000840 <strcat>
c00164bd:	58                   	pop    eax
c00164be:	5a                   	pop    edx
c00164bf:	68 33 4e 02 c0       	push   0xc0024e33
c00164c4:	53                   	push   ebx
c00164c5:	e8 76 a3 fe ff       	call   c0000840 <strcat>
c00164ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164cd:	e8 0c 9b ff ff       	call   c000ffde <KePanic(char const*)>
c00164d2:	83 c4 10             	add    esp,0x10
c00164d5:	52                   	push   edx
c00164d6:	6a 03                	push   0x3
c00164d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164dc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00164e0:	05 ff 0f 00 00       	add    eax,0xfff
c00164e5:	83 d2 00             	adc    edx,0x0
c00164e8:	0f ac d0 0c          	shrd   eax,edx,0xc
c00164ec:	50                   	push   eax
c00164ed:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00164f3:	e8 b8 d7 ff ff       	call   c0013cb0 <VAS::allocatePages(int, int)>
c00164f8:	59                   	pop    ecx
c00164f9:	89 c3                	mov    ebx,eax
c00164fb:	5d                   	pop    ebp
c00164fc:	50                   	push   eax
c00164fd:	68 9e 40 02 c0       	push   0xc002409e
c0016502:	e8 5d 0a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016507:	89 34 24             	mov    DWORD PTR [esp],esi
c001650a:	e8 61 a0 fe ff       	call   c0000570 <strlen>
c001650f:	8b 2d 60 e2 02 c0    	mov    ebp,DWORD PTR ds:0xc002e260
c0016515:	40                   	inc    eax
c0016516:	89 04 24             	mov    DWORD PTR [esp],eax
c0016519:	e8 79 97 ff ff       	call   c000fc97 <malloc>
c001651e:	89 04 ad 80 e6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd1980],eax
c0016525:	58                   	pop    eax
c0016526:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c001652b:	5a                   	pop    edx
c001652c:	56                   	push   esi
c001652d:	ff 34 85 80 e6 02 c0 	push   DWORD PTR [eax*4-0x3ffd1980]
c0016534:	e8 07 a1 fe ff       	call   c0000640 <strcpy>
c0016539:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c001653e:	8d 50 01             	lea    edx,[eax+0x1]
c0016541:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c0016548:	89 15 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,edx
c001654e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016552:	83 c4 0c             	add    esp,0xc
c0016555:	89 14 85 80 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d80],edx
c001655c:	6a 01                	push   0x1
c001655e:	53                   	push   ebx
c001655f:	56                   	push   esi
c0016560:	e8 9e f6 ff ff       	call   c0015c03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016565:	83 c4 10             	add    esp,0x10
c0016568:	0f b6 c0             	movzx  eax,al
c001656b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001656f:	85 c0                	test   eax,eax
c0016571:	0f 85 89 00 00 00    	jne    c0016600 <Thr::loadDLL(char const*, bool)+0x241>
c0016577:	89 f8                	mov    eax,edi
c0016579:	84 c0                	test   al,al
c001657b:	74 73                	je     c00165f0 <Thr::loadDLL(char const*, bool)+0x231>
c001657d:	83 ec 0c             	sub    esp,0xc
c0016580:	68 6f 4e 02 c0       	push   0xc0024e6f
c0016585:	e8 54 9a ff ff       	call   c000ffde <KePanic(char const*)>
c001658a:	83 c4 10             	add    esp,0x10
c001658d:	eb 61                	jmp    c00165f0 <Thr::loadDLL(char const*, bool)+0x231>
c001658f:	50                   	push   eax
c0016590:	50                   	push   eax
c0016591:	89 e8                	mov    eax,ebp
c0016593:	c1 e0 0c             	shl    eax,0xc
c0016596:	01 d8                	add    eax,ebx
c0016598:	50                   	push   eax
c0016599:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001659f:	e8 0e d2 ff ff       	call   c00137b2 <VAS::getPageTableEntry(unsigned long)>
c00165a4:	83 c4 10             	add    esp,0x10
c00165a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00165a9:	a8 60                	test   al,0x60
c00165ab:	75 11                	jne    c00165be <Thr::loadDLL(char const*, bool)+0x1ff>
c00165ad:	83 ec 0c             	sub    esp,0xc
c00165b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00165b5:	50                   	push   eax
c00165b6:	e8 ae 9b ff ff       	call   c0010169 <Phys::freePage(unsigned long)>
c00165bb:	83 c4 10             	add    esp,0x10
c00165be:	45                   	inc    ebp
c00165bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00165c7:	05 ff 0f 00 00       	add    eax,0xfff
c00165cc:	bf 00 00 00 00       	mov    edi,0x0
c00165d1:	83 d2 00             	adc    edx,0x0
c00165d4:	0f ac d0 0c          	shrd   eax,edx,0xc
c00165d8:	c1 ea 0c             	shr    edx,0xc
c00165db:	39 c5                	cmp    ebp,eax
c00165dd:	89 d1                	mov    ecx,edx
c00165df:	89 f8                	mov    eax,edi
c00165e1:	19 c8                	sbb    eax,ecx
c00165e3:	72 aa                	jb     c001658f <Thr::loadDLL(char const*, bool)+0x1d0>
c00165e5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165ea:	75 18                	jne    c0016604 <Thr::loadDLL(char const*, bool)+0x245>
c00165ec:	31 db                	xor    ebx,ebx
c00165ee:	eb 14                	jmp    c0016604 <Thr::loadDLL(char const*, bool)+0x245>
c00165f0:	83 ec 0c             	sub    esp,0xc
c00165f3:	68 8e 4e 02 c0       	push   0xc0024e8e
c00165f8:	e8 e1 99 ff ff       	call   c000ffde <KePanic(char const*)>
c00165fd:	83 c4 10             	add    esp,0x10
c0016600:	31 ed                	xor    ebp,ebp
c0016602:	eb bb                	jmp    c00165bf <Thr::loadDLL(char const*, bool)+0x200>
c0016604:	81 c4 2c 01 00 00    	add    esp,0x12c
c001660a:	89 d8                	mov    eax,ebx
c001660c:	5b                   	pop    ebx
c001660d:	5e                   	pop    esi
c001660e:	5f                   	pop    edi
c001660f:	5d                   	pop    ebp
c0016610:	c3                   	ret    

c0016611 <Thr::executeDLL(unsigned long, void*)>:
c0016611:	56                   	push   esi
c0016612:	53                   	push   ebx
c0016613:	52                   	push   edx
c0016614:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016618:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001661c:	85 db                	test   ebx,ebx
c001661e:	75 10                	jne    c0016630 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0016620:	83 ec 0c             	sub    esp,0xc
c0016623:	68 aa 4e 02 c0       	push   0xc0024eaa
c0016628:	e8 b1 99 ff ff       	call   c000ffde <KePanic(char const*)>
c001662d:	83 c4 10             	add    esp,0x10
c0016630:	50                   	push   eax
c0016631:	50                   	push   eax
c0016632:	53                   	push   ebx
c0016633:	68 d4 4e 02 c0       	push   0xc0024ed4
c0016638:	e8 27 09 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001663d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016641:	89 d8                	mov    eax,ebx
c0016643:	83 c4 14             	add    esp,0x14
c0016646:	5b                   	pop    ebx
c0016647:	5e                   	pop    esi
c0016648:	ff e0                	jmp    eax

c001664a <KeProcessExec(Process*, char const*)>:
c001664a:	56                   	push   esi
c001664b:	53                   	push   ebx
c001664c:	83 ec 04             	sub    esp,0x4
c001664f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016653:	8b b3 72 05 00 00    	mov    esi,DWORD PTR [ebx+0x572]
c0016659:	85 f6                	test   esi,esi
c001665b:	74 16                	je     c0016673 <KeProcessExec(Process*, char const*)+0x29>
c001665d:	83 ec 0c             	sub    esp,0xc
c0016660:	56                   	push   esi
c0016661:	e8 de d3 ff ff       	call   c0013a44 <VAS::~VAS()>
c0016666:	58                   	pop    eax
c0016667:	5a                   	pop    edx
c0016668:	6a 14                	push   0x14
c001666a:	56                   	push   esi
c001666b:	e8 af 6c ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0016670:	83 c4 10             	add    esp,0x10
c0016673:	83 ec 0c             	sub    esp,0xc
c0016676:	6a 14                	push   0x14
c0016678:	e8 1a 96 ff ff       	call   c000fc97 <malloc>
c001667d:	89 c6                	mov    esi,eax
c001667f:	58                   	pop    eax
c0016680:	5a                   	pop    edx
c0016681:	6a 00                	push   0x0
c0016683:	56                   	push   esi
c0016684:	e8 5b d8 ff ff       	call   c0013ee4 <VAS::VAS(bool)>
c0016689:	89 b3 72 05 00 00    	mov    DWORD PTR [ebx+0x572],esi
c001668f:	59                   	pop    ecx
c0016690:	5e                   	pop    esi
c0016691:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016695:	50                   	push   eax
c0016696:	53                   	push   ebx
c0016697:	e8 35 f0 ff ff       	call   c00156d1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001669c:	83 c4 14             	add    esp,0x14
c001669f:	31 c0                	xor    eax,eax
c00166a1:	5b                   	pop    ebx
c00166a2:	5e                   	pop    esi
c00166a3:	c3                   	ret    

c00166a4 <userModeEntryPoint(void*)>:
c00166a4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00166ac:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00166b1:	85 c0                	test   eax,eax
c00166b3:	75 03                	jne    c00166b8 <userModeEntryPoint(void*)+0x14>
c00166b5:	fb                   	sti    
c00166b6:	66 90                	xchg   ax,ax
c00166b8:	fb                   	sti    
c00166b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166c1:	8b 80 6e 05 00 00    	mov    eax,DWORD PTR [eax+0x56e]
c00166c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166cb:	e9 6f 9b fe ff       	jmp    c000023f <goToUsermode>

c00166d0 <changeTSS>:
c00166d0:	83 ec 14             	sub    esp,0x14
c00166d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00166db:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00166e0:	c1 e2 15             	shl    edx,0x15
c00166e3:	29 d0                	sub    eax,edx
c00166e5:	50                   	push   eax
c00166e6:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c00166eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166f1:	05 68 11 00 00       	add    eax,0x1168
c00166f6:	50                   	push   eax
c00166f7:	e8 80 c6 ff ff       	call   c0012d7c <TSS::setESP(unsigned long)>
c00166fc:	83 c4 1c             	add    esp,0x1c
c00166ff:	c3                   	ret    

c0016700 <switchToThread(ThreadControlBlock*)>:
c0016700:	57                   	push   edi
c0016701:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c0016707:	56                   	push   esi
c0016708:	85 c9                	test   ecx,ecx
c001670a:	53                   	push   ebx
c001670b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001670f:	0f 85 9b 00 00 00    	jne    c00167b0 <switchToThread(ThreadControlBlock*)+0xb0>
c0016715:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016719:	81 fa ff 00 00 00    	cmp    edx,0xff
c001671f:	0f 84 87 00 00 00    	je     c00167ac <switchToThread(ThreadControlBlock*)+0xac>
c0016725:	b8 00 04 00 00       	mov    eax,0x400
c001672a:	29 d0                	sub    eax,edx
c001672c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001672f:	d1 f8                	sar    eax,1
c0016731:	01 d0                	add    eax,edx
c0016733:	90                   	nop
c0016734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016737:	e8 e5 38 00 00       	call   c001a021 <HalQueryPerformanceCounter()>
c001673c:	a3 70 ea 02 c0       	mov    ds:0xc002ea70,eax
c0016741:	89 15 74 ea 02 c0    	mov    DWORD PTR ds:0xc002ea74,edx
c0016747:	89 c6                	mov    esi,eax
c0016749:	89 d7                	mov    edi,edx
c001674b:	2b 35 60 ea 02 c0    	sub    esi,DWORD PTR ds:0xc002ea60
c0016751:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c0016756:	1b 3d 64 ea 02 c0    	sbb    edi,DWORD PTR ds:0xc002ea64
c001675c:	89 35 68 ea 02 c0    	mov    DWORD PTR ds:0xc002ea68,esi
c0016762:	89 3d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edi
c0016768:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001676e:	89 15 64 ea 02 c0    	mov    DWORD PTR ds:0xc002ea64,edx
c0016774:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016777:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001677a:	01 c6                	add    esi,eax
c001677c:	11 d7                	adc    edi,edx
c001677e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016781:	83 ec 0c             	sub    esp,0xc
c0016784:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016787:	53                   	push   ebx
c0016788:	e8 ea 9a fe ff       	call   c0000277 <switchToThreadASM>
c001678d:	0f 20 c0             	mov    eax,cr0
c0016790:	83 c8 08             	or     eax,0x8
c0016793:	0f 22 c0             	mov    cr0,eax
c0016796:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001679b:	83 c4 10             	add    esp,0x10
c001679e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167a2:	5b                   	pop    ebx
c00167a3:	5e                   	pop    esi
c00167a4:	5f                   	pop    edi
c00167a5:	e9 e6 eb ff ff       	jmp    c0015390 <KeCheckAlarm(ThreadControlBlock*)>
c00167aa:	66 90                	xchg   ax,ax
c00167ac:	31 c0                	xor    eax,eax
c00167ae:	eb 84                	jmp    c0016734 <switchToThread(ThreadControlBlock*)+0x34>
c00167b0:	5b                   	pop    ebx
c00167b1:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c00167bb:	5e                   	pop    esi
c00167bc:	5f                   	pop    edi
c00167bd:	c3                   	ret    
c00167be:	66 90                	xchg   ax,ax

c00167c0 <Process::addArgs(char**)>:
c00167c0:	57                   	push   edi
c00167c1:	56                   	push   esi
c00167c2:	53                   	push   ebx
c00167c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167c7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00167cb:	c7 86 76 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x576],0x0
c00167d5:	85 ff                	test   edi,edi
c00167d7:	74 4f                	je     c0016828 <Process::addArgs(char**)+0x68>
c00167d9:	8b 07                	mov    eax,DWORD PTR [edi]
c00167db:	85 c0                	test   eax,eax
c00167dd:	74 49                	je     c0016828 <Process::addArgs(char**)+0x68>
c00167df:	31 db                	xor    ebx,ebx
c00167e1:	8d 76 00             	lea    esi,[esi+0x0]
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	50                   	push   eax
c00167e8:	e8 83 9d fe ff       	call   c0000570 <strlen>
c00167ed:	83 c0 01             	add    eax,0x1
c00167f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00167f3:	e8 9f 94 ff ff       	call   c000fc97 <malloc>
c00167f8:	89 84 9e 7a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x57a],eax
c00167ff:	5a                   	pop    edx
c0016800:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0016803:	59                   	pop    ecx
c0016804:	83 c3 01             	add    ebx,0x1
c0016807:	52                   	push   edx
c0016808:	50                   	push   eax
c0016809:	e8 32 9e fe ff       	call   c0000640 <strcpy>
c001680e:	8b 8e 76 05 00 00    	mov    ecx,DWORD PTR [esi+0x576]
c0016814:	83 c4 10             	add    esp,0x10
c0016817:	83 c1 01             	add    ecx,0x1
c001681a:	89 8e 76 05 00 00    	mov    DWORD PTR [esi+0x576],ecx
c0016820:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0016823:	85 c0                	test   eax,eax
c0016825:	75 bd                	jne    c00167e4 <Process::addArgs(char**)+0x24>
c0016827:	90                   	nop
c0016828:	5b                   	pop    ebx
c0016829:	5e                   	pop    esi
c001682a:	5f                   	pop    edi
c001682b:	c3                   	ret    

c001682c <Process::Process(char const*, Process*, char**)>:
c001682c:	56                   	push   esi
c001682d:	53                   	push   ebx
c001682e:	83 ec 14             	sub    esp,0x14
c0016831:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016835:	05 0c 02 00 00       	add    eax,0x20c
c001683a:	bb 07 00 00 00       	mov    ebx,0x7
c001683f:	89 c6                	mov    esi,eax
c0016841:	8d 76 00             	lea    esi,[esi+0x0]
c0016844:	85 db                	test   ebx,ebx
c0016846:	78 14                	js     c001685c <Process::Process(char const*, Process*, char**)+0x30>
c0016848:	83 ec 0c             	sub    esp,0xc
c001684b:	56                   	push   esi
c001684c:	e8 ff b8 00 00       	call   c0022150 <ThreadControlBlock::ThreadControlBlock()>
c0016851:	83 c4 10             	add    esp,0x10
c0016854:	83 c6 6b             	add    esi,0x6b
c0016857:	83 eb 01             	sub    ebx,0x1
c001685a:	eb e8                	jmp    c0016844 <Process::Process(char const*, Process*, char**)+0x18>
c001685c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016860:	c6 80 7e 07 00 00 00 	mov    BYTE PTR [eax+0x77e],0x0
c0016867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686b:	c6 80 7f 07 00 00 00 	mov    BYTE PTR [eax+0x77f],0x0
c0016872:	83 ec 0c             	sub    esp,0xc
c0016875:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016879:	e8 a2 7f ff ff       	call   c000e820 <KeNewProcessEnv(Process*)>
c001687e:	83 c4 10             	add    esp,0x10
c0016881:	89 c2                	mov    edx,eax
c0016883:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016887:	89 90 7a 07 00 00    	mov    DWORD PTR [eax+0x77a],edx
c001688d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016891:	66 c7 80 64 05 00 00 00 00 	mov    WORD PTR [eax+0x564],0x0
c001689a:	a1 dc 67 02 c0       	mov    eax,ds:0xc00267dc
c001689f:	8d 50 01             	lea    edx,[eax+0x1]
c00168a2:	89 15 dc 67 02 c0    	mov    DWORD PTR ds:0xc00267dc,edx
c00168a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00168ac:	89 02                	mov    DWORD PTR [edx],eax
c00168ae:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00168b6:	83 ec 0c             	sub    esp,0xc
c00168b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00168bd:	e8 d5 93 ff ff       	call   c000fc97 <malloc>
c00168c2:	83 c4 10             	add    esp,0x10
c00168c5:	89 c3                	mov    ebx,eax
c00168c7:	83 ec 08             	sub    esp,0x8
c00168ca:	6a 00                	push   0x0
c00168cc:	53                   	push   ebx
c00168cd:	e8 12 d6 ff ff       	call   c0013ee4 <VAS::VAS(bool)>
c00168d2:	83 c4 10             	add    esp,0x10
c00168d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d9:	89 98 72 05 00 00    	mov    DWORD PTR [eax+0x572],ebx
c00168df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e3:	c7 80 76 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x576],0x0
c00168ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168f5:	89 90 6a 05 00 00    	mov    DWORD PTR [eax+0x56a],edx
c00168fb:	e8 b3 a7 ff ff       	call   c00110b3 <KeInitSignals()>
c0016900:	89 c2                	mov    edx,eax
c0016902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016906:	89 90 80 07 00 00    	mov    DWORD PTR [eax+0x780],edx
c001690c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016910:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c0016916:	85 c0                	test   eax,eax
c0016918:	74 42                	je     c001695c <Process::Process(char const*, Process*, char**)+0x130>
c001691a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001691e:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c0016924:	8b 90 66 05 00 00    	mov    edx,DWORD PTR [eax+0x566]
c001692a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001692e:	89 90 66 05 00 00    	mov    DWORD PTR [eax+0x566],edx
c0016934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016938:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c001693e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016948:	05 0c 01 00 00       	add    eax,0x10c
c001694d:	83 ec 08             	sub    esp,0x8
c0016950:	52                   	push   edx
c0016951:	50                   	push   eax
c0016952:	e8 e9 9c fe ff       	call   c0000640 <strcpy>
c0016957:	83 c4 10             	add    esp,0x10
c001695a:	eb 7c                	jmp    c00169d8 <Process::Process(char const*, Process*, char**)+0x1ac>
c001695c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016964:	83 ec 0c             	sub    esp,0xc
c0016967:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001696b:	e8 27 93 ff ff       	call   c000fc97 <malloc>
c0016970:	83 c4 10             	add    esp,0x10
c0016973:	89 c3                	mov    ebx,eax
c0016975:	83 ec 08             	sub    esp,0x8
c0016978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001697c:	53                   	push   ebx
c001697d:	e8 fc c0 ff ff       	call   c0012a7e <VgaText::VgaText(char const*)>
c0016982:	83 c4 10             	add    esp,0x10
c0016985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016989:	89 98 66 05 00 00    	mov    DWORD PTR [eax+0x566],ebx
c001698f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016993:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0016999:	83 ec 0c             	sub    esp,0xc
c001699c:	50                   	push   eax
c001699d:	e8 32 b9 ff ff       	call   c00122d4 <addToTerminalCycle(VgaText*)>
c00169a2:	83 c4 10             	add    esp,0x10
c00169a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169a9:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c00169af:	83 ec 0c             	sub    esp,0xc
c00169b2:	50                   	push   eax
c00169b3:	e8 8d bb ff ff       	call   c0012545 <setActiveTerminal(VgaText*)>
c00169b8:	83 c4 10             	add    esp,0x10
c00169bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169bf:	05 0c 01 00 00       	add    eax,0x10c
c00169c4:	83 ec 08             	sub    esp,0x8
c00169c7:	68 f3 4e 02 c0       	push   0xc0024ef3
c00169cc:	50                   	push   eax
c00169cd:	e8 6e 9c fe ff       	call   c0000640 <strcpy>
c00169d2:	83 c4 10             	add    esp,0x10
c00169d5:	8d 76 00             	lea    esi,[esi+0x0]
c00169d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169dc:	83 c0 0c             	add    eax,0xc
c00169df:	83 ec 08             	sub    esp,0x8
c00169e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169e6:	50                   	push   eax
c00169e7:	e8 54 9c fe ff       	call   c0000640 <strcpy>
c00169ec:	83 c4 10             	add    esp,0x10
c00169ef:	83 ec 08             	sub    esp,0x8
c00169f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00169f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169fa:	e8 c1 fd ff ff       	call   c00167c0 <Process::addArgs(char**)>
c00169ff:	83 c4 10             	add    esp,0x10
c0016a02:	83 ec 08             	sub    esp,0x8
c0016a05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a0d:	e8 bf ec ff ff       	call   c00156d1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016a12:	83 c4 10             	add    esp,0x10
c0016a15:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016a19:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016a1d:	83 f0 01             	xor    eax,0x1
c0016a20:	88 c2                	mov    dl,al
c0016a22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a26:	88 90 7e 07 00 00    	mov    BYTE PTR [eax+0x77e],dl
c0016a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a30:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a32:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016a37:	52                   	push   edx
c0016a38:	50                   	push   eax
c0016a39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a3d:	68 4c 4f 02 c0       	push   0xc0024f4c
c0016a42:	e8 1d 05 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	90                   	nop
c0016a4b:	83 c4 14             	add    esp,0x14
c0016a4e:	5b                   	pop    ebx
c0016a4f:	5e                   	pop    esi
c0016a50:	c3                   	ret    
c0016a51:	90                   	nop
c0016a52:	66 90                	xchg   ax,ax

c0016a54 <Process::Process(bool, char const*, Process*, char**)>:
c0016a54:	56                   	push   esi
c0016a55:	53                   	push   ebx
c0016a56:	83 ec 24             	sub    esp,0x24
c0016a59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a5d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016a61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a65:	05 0c 02 00 00       	add    eax,0x20c
c0016a6a:	bb 07 00 00 00       	mov    ebx,0x7
c0016a6f:	89 c6                	mov    esi,eax
c0016a71:	8d 76 00             	lea    esi,[esi+0x0]
c0016a74:	85 db                	test   ebx,ebx
c0016a76:	78 14                	js     c0016a8c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016a78:	83 ec 0c             	sub    esp,0xc
c0016a7b:	56                   	push   esi
c0016a7c:	e8 cf b6 00 00       	call   c0022150 <ThreadControlBlock::ThreadControlBlock()>
c0016a81:	83 c4 10             	add    esp,0x10
c0016a84:	83 c6 6b             	add    esi,0x6b
c0016a87:	83 eb 01             	sub    ebx,0x1
c0016a8a:	eb e8                	jmp    c0016a74 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016a8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a90:	c6 80 7e 07 00 00 00 	mov    BYTE PTR [eax+0x77e],0x0
c0016a97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a9b:	c6 80 7f 07 00 00 00 	mov    BYTE PTR [eax+0x77f],0x0
c0016aa2:	83 ec 0c             	sub    esp,0xc
c0016aa5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016aa9:	e8 72 7d ff ff       	call   c000e820 <KeNewProcessEnv(Process*)>
c0016aae:	83 c4 10             	add    esp,0x10
c0016ab1:	89 c2                	mov    edx,eax
c0016ab3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ab7:	89 90 7a 07 00 00    	mov    DWORD PTR [eax+0x77a],edx
c0016abd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ac1:	66 c7 80 64 05 00 00 00 00 	mov    WORD PTR [eax+0x564],0x0
c0016aca:	a1 dc 67 02 c0       	mov    eax,ds:0xc00267dc
c0016acf:	8d 50 01             	lea    edx,[eax+0x1]
c0016ad2:	89 15 dc 67 02 c0    	mov    DWORD PTR ds:0xc00267dc,edx
c0016ad8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016adc:	89 02                	mov    DWORD PTR [edx],eax
c0016ade:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016ae6:	83 ec 0c             	sub    esp,0xc
c0016ae9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016aed:	e8 a5 91 ff ff       	call   c000fc97 <malloc>
c0016af2:	83 c4 10             	add    esp,0x10
c0016af5:	89 c3                	mov    ebx,eax
c0016af7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016afc:	83 ec 08             	sub    esp,0x8
c0016aff:	50                   	push   eax
c0016b00:	53                   	push   ebx
c0016b01:	e8 de d3 ff ff       	call   c0013ee4 <VAS::VAS(bool)>
c0016b06:	83 c4 10             	add    esp,0x10
c0016b09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b0d:	89 98 72 05 00 00    	mov    DWORD PTR [eax+0x572],ebx
c0016b13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b17:	c7 80 76 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x576],0x0
c0016b21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b25:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016b29:	89 90 6a 05 00 00    	mov    DWORD PTR [eax+0x56a],edx
c0016b2f:	e8 7f a5 ff ff       	call   c00110b3 <KeInitSignals()>
c0016b34:	89 c2                	mov    edx,eax
c0016b36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b3a:	89 90 80 07 00 00    	mov    DWORD PTR [eax+0x780],edx
c0016b40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b44:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c0016b4a:	85 c0                	test   eax,eax
c0016b4c:	74 42                	je     c0016b90 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016b4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b52:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c0016b58:	8b 90 66 05 00 00    	mov    edx,DWORD PTR [eax+0x566]
c0016b5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b62:	89 90 66 05 00 00    	mov    DWORD PTR [eax+0x566],edx
c0016b68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b6c:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c0016b72:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016b78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b7c:	05 0c 01 00 00       	add    eax,0x10c
c0016b81:	83 ec 08             	sub    esp,0x8
c0016b84:	52                   	push   edx
c0016b85:	50                   	push   eax
c0016b86:	e8 b5 9a fe ff       	call   c0000640 <strcpy>
c0016b8b:	83 c4 10             	add    esp,0x10
c0016b8e:	eb 7c                	jmp    c0016c0c <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016b90:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016b98:	83 ec 0c             	sub    esp,0xc
c0016b9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016b9f:	e8 f3 90 ff ff       	call   c000fc97 <malloc>
c0016ba4:	83 c4 10             	add    esp,0x10
c0016ba7:	89 c3                	mov    ebx,eax
c0016ba9:	83 ec 08             	sub    esp,0x8
c0016bac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016bb0:	53                   	push   ebx
c0016bb1:	e8 c8 be ff ff       	call   c0012a7e <VgaText::VgaText(char const*)>
c0016bb6:	83 c4 10             	add    esp,0x10
c0016bb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bbd:	89 98 66 05 00 00    	mov    DWORD PTR [eax+0x566],ebx
c0016bc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bc7:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0016bcd:	83 ec 0c             	sub    esp,0xc
c0016bd0:	50                   	push   eax
c0016bd1:	e8 fe b6 ff ff       	call   c00122d4 <addToTerminalCycle(VgaText*)>
c0016bd6:	83 c4 10             	add    esp,0x10
c0016bd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bdd:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0016be3:	83 ec 0c             	sub    esp,0xc
c0016be6:	50                   	push   eax
c0016be7:	e8 59 b9 ff ff       	call   c0012545 <setActiveTerminal(VgaText*)>
c0016bec:	83 c4 10             	add    esp,0x10
c0016bef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bf3:	05 0c 01 00 00       	add    eax,0x10c
c0016bf8:	83 ec 08             	sub    esp,0x8
c0016bfb:	68 f3 4e 02 c0       	push   0xc0024ef3
c0016c00:	50                   	push   eax
c0016c01:	e8 3a 9a fe ff       	call   c0000640 <strcpy>
c0016c06:	83 c4 10             	add    esp,0x10
c0016c09:	8d 76 00             	lea    esi,[esi+0x0]
c0016c0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c10:	83 c0 0c             	add    eax,0xc
c0016c13:	83 ec 08             	sub    esp,0x8
c0016c16:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c1a:	50                   	push   eax
c0016c1b:	e8 20 9a fe ff       	call   c0000640 <strcpy>
c0016c20:	83 c4 10             	add    esp,0x10
c0016c23:	83 ec 08             	sub    esp,0x8
c0016c26:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016c2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016c2e:	e8 8d fb ff ff       	call   c00167c0 <Process::addArgs(char**)>
c0016c33:	83 c4 10             	add    esp,0x10
c0016c36:	90                   	nop
c0016c37:	83 c4 24             	add    esp,0x24
c0016c3a:	5b                   	pop    ebx
c0016c3b:	5e                   	pop    esi
c0016c3c:	c3                   	ret    
c0016c3d:	8d 76 00             	lea    esi,[esi+0x0]

c0016c40 <taskStartupFunction>:
c0016c40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c45:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016c48:	c3                   	ret    
c0016c49:	8d 76 00             	lea    esi,[esi+0x0]

c0016c4c <KeDisablePreemption()>:
c0016c4c:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016c51:	85 c0                	test   eax,eax
c0016c53:	75 13                	jne    c0016c68 <KeDisablePreemption()+0x1c>
c0016c55:	8a 15 d4 c0 02 c0    	mov    dl,BYTE PTR ds:0xc002c0d4
c0016c5b:	c6 05 d4 c0 02 c0 00 	mov    BYTE PTR ds:0xc002c0d4,0x0
c0016c62:	88 15 08 ea 02 c0    	mov    BYTE PTR ds:0xc002ea08,dl
c0016c68:	83 c0 01             	add    eax,0x1
c0016c6b:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016c70:	c3                   	ret    
c0016c71:	8d 76 00             	lea    esi,[esi+0x0]

c0016c74 <KeRestorePreemption()>:
c0016c74:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016c79:	83 e8 01             	sub    eax,0x1
c0016c7c:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016c81:	75 0d                	jne    c0016c90 <KeRestorePreemption()+0x1c>
c0016c83:	a0 08 ea 02 c0       	mov    al,ds:0xc002ea08
c0016c88:	a2 d4 c0 02 c0       	mov    ds:0xc002c0d4,al
c0016c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c90:	c3                   	ret    
c0016c91:	90                   	nop
c0016c92:	66 90                	xchg   ax,ax

c0016c94 <Process::createThread(void (*)(void*), void*, int)>:
c0016c94:	55                   	push   ebp
c0016c95:	31 c9                	xor    ecx,ecx
c0016c97:	57                   	push   edi
c0016c98:	56                   	push   esi
c0016c99:	53                   	push   ebx
c0016c9a:	83 ec 0c             	sub    esp,0xc
c0016c9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016ca1:	66 8b b3 64 05 00 00 	mov    si,WORD PTR [ebx+0x564]
c0016ca8:	89 f2                	mov    edx,esi
c0016caa:	66 90                	xchg   ax,ax
c0016cac:	0f b7 c2             	movzx  eax,dx
c0016caf:	80 e2 01             	and    dl,0x1
c0016cb2:	74 18                	je     c0016ccc <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016cb4:	d1 f8                	sar    eax,1
c0016cb6:	83 c1 01             	add    ecx,0x1
c0016cb9:	89 c2                	mov    edx,eax
c0016cbb:	83 f9 10             	cmp    ecx,0x10
c0016cbe:	75 ec                	jne    c0016cac <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016cc0:	83 c4 0c             	add    esp,0xc
c0016cc3:	31 db                	xor    ebx,ebx
c0016cc5:	89 d8                	mov    eax,ebx
c0016cc7:	5b                   	pop    ebx
c0016cc8:	5e                   	pop    esi
c0016cc9:	5f                   	pop    edi
c0016cca:	5d                   	pop    ebp
c0016ccb:	c3                   	ret    
c0016ccc:	b8 01 00 00 00       	mov    eax,0x1
c0016cd1:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0016cd4:	d3 e0                	shl    eax,cl
c0016cd6:	09 c6                	or     esi,eax
c0016cd8:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0016cdb:	66 89 b3 64 05 00 00 	mov    WORD PTR [ebx+0x564],si
c0016ce2:	8d 04 81             	lea    eax,[ecx+eax*4]
c0016ce5:	8d 04 81             	lea    eax,[ecx+eax*4]
c0016ce8:	01 c0                	add    eax,eax
c0016cea:	01 c8                	add    eax,ecx
c0016cec:	01 d8                	add    eax,ebx
c0016cee:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016cf5:	75 0d                	jne    c0016d04 <Process::createThread(void (*)(void*), void*, int)+0x70>
c0016cf7:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016d01:	8d 76 00             	lea    esi,[esi+0x0]
c0016d04:	8b 83 72 05 00 00    	mov    eax,DWORD PTR [ebx+0x572]
c0016d0a:	83 ec 0c             	sub    esp,0xc
c0016d0d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016d10:	01 ca                	add    edx,ecx
c0016d12:	8d 14 91             	lea    edx,[ecx+edx*4]
c0016d15:	8d 34 91             	lea    esi,[ecx+edx*4]
c0016d18:	01 f6                	add    esi,esi
c0016d1a:	01 ce                	add    esi,ecx
c0016d1c:	8d 14 33             	lea    edx,[ebx+esi*1]
c0016d1f:	89 82 0c 02 00 00    	mov    DWORD PTR [edx+0x20c],eax
c0016d25:	8d ba 00 02 00 00    	lea    edi,[edx+0x200]
c0016d2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d2f:	89 8a 48 02 00 00    	mov    DWORD PTR [edx+0x248],ecx
c0016d35:	89 82 51 02 00 00    	mov    DWORD PTR [edx+0x251],eax
c0016d3b:	89 9a 4c 02 00 00    	mov    DWORD PTR [edx+0x24c],ebx
c0016d41:	c7 82 44 02 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x244],0x0
c0016d4b:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0016d52:	c7 82 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x26f],0x0
c0016d5c:	c7 82 73 02 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x273],0x0
c0016d66:	89 c8                	mov    eax,ecx
c0016d68:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016d6c:	f7 d8                	neg    eax
c0016d6e:	c1 e0 15             	shl    eax,0x15
c0016d71:	05 e0 ff ff 01       	add    eax,0x1ffffe0
c0016d76:	89 82 10 02 00 00    	mov    DWORD PTR [edx+0x210],eax
c0016d7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d80:	c7 82 24 02 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x224],0x0
c0016d8a:	88 82 50 02 00 00    	mov    BYTE PTR [edx+0x250],al
c0016d90:	89 8a 18 02 00 00    	mov    DWORD PTR [edx+0x218],ecx
c0016d96:	c7 82 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x21c],0x0
c0016da0:	c7 82 20 02 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x220],0x0
c0016daa:	68 00 01 00 00       	push   0x100
c0016daf:	e8 e3 8e ff ff       	call   c000fc97 <malloc>
c0016db4:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0016db7:	58                   	pop    eax
c0016db8:	5a                   	pop    edx
c0016db9:	53                   	push   ebx
c0016dba:	68 4c ea 02 c0       	push   0xc002ea4c
c0016dbf:	e8 38 af 00 00       	call   c0021cfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016dc4:	89 d8                	mov    eax,ebx
c0016dc6:	83 c4 10             	add    esp,0x10
c0016dc9:	83 c4 0c             	add    esp,0xc
c0016dcc:	5b                   	pop    ebx
c0016dcd:	5e                   	pop    esi
c0016dce:	5f                   	pop    edi
c0016dcf:	5d                   	pop    ebp
c0016dd0:	c3                   	ret    
c0016dd1:	90                   	nop
c0016dd2:	66 90                	xchg   ax,ax

c0016dd4 <Process::createUserThread()>:
c0016dd4:	83 ec 0c             	sub    esp,0xc
c0016dd7:	68 80 00 00 00       	push   0x80
c0016ddc:	6a 00                	push   0x0
c0016dde:	68 a4 66 01 c0       	push   0xc00166a4
c0016de3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016de7:	50                   	push   eax
c0016de8:	e8 a7 fe ff ff       	call   c0016c94 <Process::createThread(void (*)(void*), void*, int)>
c0016ded:	83 c4 1c             	add    esp,0x1c
c0016df0:	c3                   	ret    
c0016df1:	8d 76 00             	lea    esi,[esi+0x0]

c0016df4 <setupMultitasking(void (*)())>:
c0016df4:	56                   	push   esi
c0016df5:	53                   	push   ebx
c0016df6:	83 ec 04             	sub    esp,0x4
c0016df9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016dfd:	eb 11                	jmp    c0016e10 <setupMultitasking(void (*)())+0x1c>
c0016dff:	90                   	nop
c0016e00:	83 ec 0c             	sub    esp,0xc
c0016e03:	68 4c ea 02 c0       	push   0xc002ea4c
c0016e08:	e8 33 ae 00 00       	call   c0021c40 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e0d:	83 c4 10             	add    esp,0x10
c0016e10:	83 ec 0c             	sub    esp,0xc
c0016e13:	68 4c ea 02 c0       	push   0xc002ea4c
c0016e18:	e8 ff ad 00 00       	call   c0021c1c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e1d:	83 c4 10             	add    esp,0x10
c0016e20:	84 c0                	test   al,al
c0016e22:	74 dc                	je     c0016e00 <setupMultitasking(void (*)())+0xc>
c0016e24:	83 ec 0c             	sub    esp,0xc
c0016e27:	68 84 07 00 00       	push   0x784
c0016e2c:	e8 66 8e ff ff       	call   c000fc97 <malloc>
c0016e31:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016e38:	89 c3                	mov    ebx,eax
c0016e3a:	6a 00                	push   0x0
c0016e3c:	68 f7 4e 02 c0       	push   0xc0024ef7
c0016e41:	6a 01                	push   0x1
c0016e43:	50                   	push   eax
c0016e44:	e8 0b fc ff ff       	call   c0016a54 <Process::Process(bool, char const*, Process*, char**)>
c0016e49:	83 c4 14             	add    esp,0x14
c0016e4c:	8b 83 66 05 00 00    	mov    eax,DWORD PTR [ebx+0x566]
c0016e52:	89 1d 58 ea 02 c0    	mov    DWORD PTR ds:0xc002ea58,ebx
c0016e58:	50                   	push   eax
c0016e59:	e8 e7 b6 ff ff       	call   c0012545 <setActiveTerminal(VgaText*)>
c0016e5e:	66 8b 83 64 05 00 00 	mov    ax,WORD PTR [ebx+0x564]
c0016e65:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016e6f:	83 c8 01             	or     eax,0x1
c0016e72:	66 89 83 64 05 00 00 	mov    WORD PTR [ebx+0x564],ax
c0016e79:	8b 83 72 05 00 00    	mov    eax,DWORD PTR [ebx+0x572]
c0016e7f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016e82:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016e8c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016e92:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016e98:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016ea2:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0016eac:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016eb6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016ebc:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016ec6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016ecc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016ed6:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016edd:	e8 b5 8d ff ff       	call   c000fc97 <malloc>
c0016ee2:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016eec:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016ef2:	c7 83 73 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x273],0x0
c0016efc:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016f02:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016f08:	5a                   	pop    edx
c0016f09:	59                   	pop    ecx
c0016f0a:	68 f3 4e 02 c0       	push   0xc0024ef3
c0016f0f:	50                   	push   eax
c0016f10:	e8 2b 97 fe ff       	call   c0000640 <strcpy>
c0016f15:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016f1c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016f20:	83 c4 14             	add    esp,0x14
c0016f23:	5b                   	pop    ebx
c0016f24:	5e                   	pop    esi
c0016f25:	e9 3f 93 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016f2a:	66 90                	xchg   ax,ax

c0016f2c <schedule()>:
c0016f2c:	8b 15 2c ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea2c
c0016f32:	85 d2                	test   edx,edx
c0016f34:	74 0e                	je     c0016f44 <schedule()+0x18>
c0016f36:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c0016f40:	c3                   	ret    
c0016f41:	8d 76 00             	lea    esi,[esi+0x0]
c0016f44:	53                   	push   ebx
c0016f45:	83 ec 14             	sub    esp,0x14
c0016f48:	68 4c ea 02 c0       	push   0xc002ea4c
c0016f4d:	e8 ca ac 00 00       	call   c0021c1c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016f52:	83 c4 10             	add    esp,0x10
c0016f55:	84 c0                	test   al,al
c0016f57:	75 3f                	jne    c0016f98 <schedule()+0x6c>
c0016f59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f5e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016f61:	83 fa 01             	cmp    edx,0x1
c0016f64:	74 3a                	je     c0016fa0 <schedule()+0x74>
c0016f66:	66 90                	xchg   ax,ax
c0016f68:	83 ec 0c             	sub    esp,0xc
c0016f6b:	68 4c ea 02 c0       	push   0xc002ea4c
c0016f70:	e8 c3 ac 00 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f75:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0016f7c:	89 c3                	mov    ebx,eax
c0016f7e:	e8 bd ac 00 00       	call   c0021c40 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016f83:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016f8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f8d:	e8 6e f7 ff ff       	call   c0016700 <switchToThread(ThreadControlBlock*)>
c0016f92:	83 c4 10             	add    esp,0x10
c0016f95:	8d 76 00             	lea    esi,[esi+0x0]
c0016f98:	83 c4 08             	add    esp,0x8
c0016f9b:	5b                   	pop    ebx
c0016f9c:	c3                   	ret    
c0016f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016fa7:	83 ec 08             	sub    esp,0x8
c0016faa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016faf:	50                   	push   eax
c0016fb0:	68 4c ea 02 c0       	push   0xc002ea4c
c0016fb5:	e8 42 ad 00 00       	call   c0021cfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016fba:	83 c4 10             	add    esp,0x10
c0016fbd:	eb a9                	jmp    c0016f68 <schedule()+0x3c>
c0016fbf:	90                   	nop

c0016fc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016fc0:	83 ec 0c             	sub    esp,0xc
c0016fc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016fcc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016fcf:	e8 58 ff ff ff       	call   c0016f2c <schedule()>
c0016fd4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016fdc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016fe1:	85 c0                	test   eax,eax
c0016fe3:	75 03                	jne    c0016fe8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016fe5:	fb                   	sti    
c0016fe6:	66 90                	xchg   ax,ax
c0016fe8:	83 c4 0c             	add    esp,0xc
c0016feb:	c3                   	ret    

c0016fec <blockTask(TaskState)>:
c0016fec:	83 ec 0c             	sub    esp,0xc
c0016fef:	fa                   	cli    
c0016ff0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016ff5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ff9:	83 c0 01             	add    eax,0x1
c0016ffc:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017001:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017006:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017009:	e8 1e ff ff ff       	call   c0016f2c <schedule()>
c001700e:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017016:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c001701c:	85 d2                	test   edx,edx
c001701e:	75 04                	jne    c0017024 <blockTask(TaskState)+0x38>
c0017020:	fb                   	sti    
c0017021:	8d 76 00             	lea    esi,[esi+0x0]
c0017024:	83 c4 0c             	add    esp,0xc
c0017027:	c3                   	ret    

c0017028 <waitTask(int, int*, int)>:
c0017028:	83 ec 18             	sub    esp,0x18
c001702b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017030:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017034:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0017037:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001703b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017040:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017043:	6a 07                	push   0x7
c0017045:	e8 a2 ff ff ff       	call   c0016fec <blockTask(TaskState)>
c001704a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001704f:	83 c4 10             	add    esp,0x10
c0017052:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017055:	85 d2                	test   edx,edx
c0017057:	74 0b                	je     c0017064 <waitTask(int, int*, int)+0x3c>
c0017059:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001705c:	89 02                	mov    DWORD PTR [edx],eax
c001705e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017063:	90                   	nop
c0017064:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0017067:	83 c4 0c             	add    esp,0xc
c001706a:	c3                   	ret    
c001706b:	90                   	nop

c001706c <milliTenthSleepUntil(unsigned long long)>:
c001706c:	83 ec 0c             	sub    esp,0xc
c001706f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017077:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001707d:	89 d1                	mov    ecx,edx
c001707f:	1b 0d 54 bb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002bb54
c0017085:	73 05                	jae    c001708c <milliTenthSleepUntil(unsigned long long)+0x20>
c0017087:	90                   	nop
c0017088:	83 c4 0c             	add    esp,0xc
c001708b:	c3                   	ret    
c001708c:	fa                   	cli    
c001708d:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0017093:	83 ec 08             	sub    esp,0x8
c0017096:	83 c1 01             	add    ecx,0x1
c0017099:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c001709f:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c00170a5:	83 c1 01             	add    ecx,0x1
c00170a8:	89 0d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ecx
c00170ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00170b4:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00170b7:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00170ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170bf:	50                   	push   eax
c00170c0:	68 40 ea 02 c0       	push   0xc002ea40
c00170c5:	e8 32 ac 00 00       	call   c0021cfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00170ca:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00170d1:	e8 16 ff ff ff       	call   c0016fec <blockTask(TaskState)>
c00170d6:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00170db:	83 c4 10             	add    esp,0x10
c00170de:	83 e8 01             	sub    eax,0x1
c00170e1:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00170e6:	85 c0                	test   eax,eax
c00170e8:	75 0a                	jne    c00170f4 <milliTenthSleepUntil(unsigned long long)+0x88>
c00170ea:	8b 15 28 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea28
c00170f0:	85 d2                	test   edx,edx
c00170f2:	75 18                	jne    c001710c <milliTenthSleepUntil(unsigned long long)+0xa0>
c00170f4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00170fc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017101:	85 c0                	test   eax,eax
c0017103:	75 83                	jne    c0017088 <milliTenthSleepUntil(unsigned long long)+0x1c>
c0017105:	fb                   	sti    
c0017106:	83 c4 0c             	add    esp,0xc
c0017109:	c3                   	ret    
c001710a:	66 90                	xchg   ax,ax
c001710c:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0017116:	e8 11 fe ff ff       	call   c0016f2c <schedule()>
c001711b:	eb d7                	jmp    c00170f4 <milliTenthSleepUntil(unsigned long long)+0x88>
c001711d:	8d 76 00             	lea    esi,[esi+0x0]

c0017120 <milliTenthSleep(unsigned long long)>:
c0017120:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0017125:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c001712b:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001712f:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017133:	e9 34 ff ff ff       	jmp    c001706c <milliTenthSleepUntil(unsigned long long)>

c0017138 <sleep(unsigned long long)>:
c0017138:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0017140:	b8 10 27 00 00       	mov    eax,0x2710
c0017145:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017149:	01 ca                	add    edx,ecx
c001714b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001714f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017153:	eb cb                	jmp    c0017120 <milliTenthSleep(unsigned long long)>
c0017155:	8d 76 00             	lea    esi,[esi+0x0]

c0017158 <sleep(unsigned int)>:
c0017158:	83 ec 14             	sub    esp,0x14
c001715b:	b8 10 27 00 00       	mov    eax,0x2710
c0017160:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017164:	52                   	push   edx
c0017165:	50                   	push   eax
c0017166:	e8 b5 ff ff ff       	call   c0017120 <milliTenthSleep(unsigned long long)>
c001716b:	83 c4 1c             	add    esp,0x1c
c001716e:	c3                   	ret    
c001716f:	90                   	nop

c0017170 <milliTenthSleep(unsigned int)>:
c0017170:	83 ec 14             	sub    esp,0x14
c0017173:	31 d2                	xor    edx,edx
c0017175:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017179:	03 05 50 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb50
c001717f:	13 15 54 bb 02 c0    	adc    edx,DWORD PTR ds:0xc002bb54
c0017185:	52                   	push   edx
c0017186:	50                   	push   eax
c0017187:	e8 e0 fe ff ff       	call   c001706c <milliTenthSleepUntil(unsigned long long)>
c001718c:	83 c4 1c             	add    esp,0x1c
c001718f:	c3                   	ret    

c0017190 <taskReturned>:
c0017190:	83 ec 18             	sub    esp,0x18
c0017193:	68 80 4f 02 c0       	push   0xc0024f80
c0017198:	e8 41 8e ff ff       	call   c000ffde <KePanic(char const*)>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	83 ec 0c             	sub    esp,0xc
c00171a3:	6a 02                	push   0x2
c00171a5:	e8 42 fe ff ff       	call   c0016fec <blockTask(TaskState)>
c00171aa:	fa                   	cli    
c00171ab:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00171b0:	83 c0 01             	add    eax,0x1
c00171b3:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00171b8:	e8 6f fd ff ff       	call   c0016f2c <schedule()>
c00171bd:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00171c5:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00171cb:	83 c4 10             	add    esp,0x10
c00171ce:	85 d2                	test   edx,edx
c00171d0:	75 ce                	jne    c00171a0 <taskReturned+0x10>
c00171d2:	fb                   	sti    
c00171d3:	eb cb                	jmp    c00171a0 <taskReturned+0x10>
c00171d5:	8d 76 00             	lea    esi,[esi+0x0]

c00171d8 <Thr::processFromPID(int)>:
c00171d8:	57                   	push   edi
c00171d9:	56                   	push   esi
c00171da:	53                   	push   ebx
c00171db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00171df:	fa                   	cli    
c00171e0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00171e5:	83 ec 0c             	sub    esp,0xc
c00171e8:	83 c0 01             	add    eax,0x1
c00171eb:	68 4c ea 02 c0       	push   0xc002ea4c
c00171f0:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00171f5:	e8 3e aa 00 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00171fa:	83 c4 10             	add    esp,0x10
c00171fd:	89 c7                	mov    edi,eax
c00171ff:	eb 17                	jmp    c0017218 <Thr::processFromPID(int)+0x40>
c0017201:	8d 76 00             	lea    esi,[esi+0x0]
c0017204:	83 ec 0c             	sub    esp,0xc
c0017207:	68 4c ea 02 c0       	push   0xc002ea4c
c001720c:	e8 27 aa 00 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017211:	83 c4 10             	add    esp,0x10
c0017214:	39 f8                	cmp    eax,edi
c0017216:	74 50                	je     c0017268 <Thr::processFromPID(int)+0x90>
c0017218:	83 ec 0c             	sub    esp,0xc
c001721b:	68 4c ea 02 c0       	push   0xc002ea4c
c0017220:	e8 13 aa 00 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017225:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c001722c:	89 c3                	mov    ebx,eax
c001722e:	e8 0d aa 00 00       	call   c0021c40 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017233:	59                   	pop    ecx
c0017234:	58                   	pop    eax
c0017235:	53                   	push   ebx
c0017236:	68 4c ea 02 c0       	push   0xc002ea4c
c001723b:	e8 bc aa 00 00       	call   c0021cfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017240:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017243:	83 c4 10             	add    esp,0x10
c0017246:	39 30                	cmp    DWORD PTR [eax],esi
c0017248:	75 ba                	jne    c0017204 <Thr::processFromPID(int)+0x2c>
c001724a:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017252:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017258:	85 d2                	test   edx,edx
c001725a:	74 08                	je     c0017264 <Thr::processFromPID(int)+0x8c>
c001725c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001725f:	5b                   	pop    ebx
c0017260:	5e                   	pop    esi
c0017261:	5f                   	pop    edi
c0017262:	c3                   	ret    
c0017263:	90                   	nop
c0017264:	fb                   	sti    
c0017265:	eb f5                	jmp    c001725c <Thr::processFromPID(int)+0x84>
c0017267:	90                   	nop
c0017268:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017270:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017275:	85 c0                	test   eax,eax
c0017277:	75 07                	jne    c0017280 <Thr::processFromPID(int)+0xa8>
c0017279:	fb                   	sti    
c001727a:	31 c0                	xor    eax,eax
c001727c:	5b                   	pop    ebx
c001727d:	5e                   	pop    esi
c001727e:	5f                   	pop    edi
c001727f:	c3                   	ret    
c0017280:	5b                   	pop    ebx
c0017281:	31 c0                	xor    eax,eax
c0017283:	5e                   	pop    esi
c0017284:	5f                   	pop    edi
c0017285:	c3                   	ret    
c0017286:	66 90                	xchg   ax,ax

c0017288 <unblockTask(ThreadControlBlock*)>:
c0017288:	53                   	push   ebx
c0017289:	83 ec 08             	sub    esp,0x8
c001728c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017290:	fa                   	cli    
c0017291:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017297:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001729a:	83 c2 01             	add    edx,0x1
c001729d:	85 c0                	test   eax,eax
c001729f:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c00172a5:	74 6d                	je     c0017314 <unblockTask(ThreadControlBlock*)+0x8c>
c00172a7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00172aa:	83 f8 01             	cmp    eax,0x1
c00172ad:	74 39                	je     c00172e8 <unblockTask(ThreadControlBlock*)+0x60>
c00172af:	83 ec 0c             	sub    esp,0xc
c00172b2:	68 4c ea 02 c0       	push   0xc002ea4c
c00172b7:	e8 7c a9 00 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00172bc:	83 c4 10             	add    esp,0x10
c00172bf:	85 c0                	test   eax,eax
c00172c1:	75 1d                	jne    c00172e0 <unblockTask(ThreadControlBlock*)+0x58>
c00172c3:	eb 63                	jmp    c0017328 <unblockTask(ThreadControlBlock*)+0xa0>
c00172c5:	8d 76 00             	lea    esi,[esi+0x0]
c00172c8:	83 ec 08             	sub    esp,0x8
c00172cb:	50                   	push   eax
c00172cc:	68 4c ea 02 c0       	push   0xc002ea4c
c00172d1:	e8 6e ae 00 00       	call   c0022144 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00172d6:	83 c4 10             	add    esp,0x10
c00172d9:	85 c0                	test   eax,eax
c00172db:	74 4b                	je     c0017328 <unblockTask(ThreadControlBlock*)+0xa0>
c00172dd:	8d 76 00             	lea    esi,[esi+0x0]
c00172e0:	39 c3                	cmp    ebx,eax
c00172e2:	75 e4                	jne    c00172c8 <unblockTask(ThreadControlBlock*)+0x40>
c00172e4:	eb 12                	jmp    c00172f8 <unblockTask(ThreadControlBlock*)+0x70>
c00172e6:	66 90                	xchg   ax,ax
c00172e8:	83 ec 0c             	sub    esp,0xc
c00172eb:	68 15 4f 02 c0       	push   0xc0024f15
c00172f0:	e8 6f fc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00172f5:	83 c4 10             	add    esp,0x10
c00172f8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017300:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017305:	85 c0                	test   eax,eax
c0017307:	75 03                	jne    c001730c <unblockTask(ThreadControlBlock*)+0x84>
c0017309:	fb                   	sti    
c001730a:	66 90                	xchg   ax,ax
c001730c:	83 c4 08             	add    esp,0x8
c001730f:	5b                   	pop    ebx
c0017310:	c3                   	ret    
c0017311:	8d 76 00             	lea    esi,[esi+0x0]
c0017314:	83 ec 0c             	sub    esp,0xc
c0017317:	68 fe 4e 02 c0       	push   0xc0024efe
c001731c:	e8 43 fc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017321:	83 c4 10             	add    esp,0x10
c0017324:	eb d2                	jmp    c00172f8 <unblockTask(ThreadControlBlock*)+0x70>
c0017326:	66 90                	xchg   ax,ax
c0017328:	83 ec 08             	sub    esp,0x8
c001732b:	53                   	push   ebx
c001732c:	68 4c ea 02 c0       	push   0xc002ea4c
c0017331:	e8 c6 a9 00 00       	call   c0021cfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017336:	83 c4 10             	add    esp,0x10
c0017339:	eb bd                	jmp    c00172f8 <unblockTask(ThreadControlBlock*)+0x70>
c001733b:	90                   	nop

c001733c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001733c:	55                   	push   ebp
c001733d:	57                   	push   edi
c001733e:	56                   	push   esi
c001733f:	53                   	push   ebx
c0017340:	83 ec 1c             	sub    esp,0x1c
c0017343:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017347:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001734a:	8b a8 76 05 00 00    	mov    ebp,DWORD PTR [eax+0x576]
c0017350:	85 ed                	test   ebp,ebp
c0017352:	7e 28                	jle    c001737c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0017354:	31 f6                	xor    esi,esi
c0017356:	66 90                	xchg   ax,ax
c0017358:	83 ec 0c             	sub    esp,0xc
c001735b:	8b bc b0 7a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x57a]
c0017362:	83 c6 01             	add    esi,0x1
c0017365:	57                   	push   edi
c0017366:	e8 3c 89 ff ff       	call   c000fca7 <free>
c001736b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001736e:	83 c4 10             	add    esp,0x10
c0017371:	39 b0 76 05 00 00    	cmp    DWORD PTR [eax+0x576],esi
c0017377:	7f df                	jg     c0017358 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0017379:	8d 76 00             	lea    esi,[esi+0x0]
c001737c:	c7 80 76 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x576],0x0
c0017386:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001738b:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001738e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017391:	d3 c0                	rol    eax,cl
c0017393:	66 8b 8a 64 05 00 00 	mov    cx,WORD PTR [edx+0x564]
c001739a:	21 c8                	and    eax,ecx
c001739c:	66 89 82 64 05 00 00 	mov    WORD PTR [edx+0x564],ax
c00173a3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00173a6:	89 f7                	mov    edi,esi
c00173a8:	66 83 be 64 05 00 00 00 	cmp    WORD PTR [esi+0x564],0x0
c00173b0:	0f 85 7a 01 00 00    	jne    c0017530 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00173b6:	8b ae 7a 07 00 00    	mov    ebp,DWORD PTR [esi+0x77a]
c00173bc:	85 ed                	test   ebp,ebp
c00173be:	74 1c                	je     c00173dc <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00173c0:	83 ec 0c             	sub    esp,0xc
c00173c3:	55                   	push   ebp
c00173c4:	e8 73 73 ff ff       	call   c000e73c <EnvVarContainer::~EnvVarContainer()>
c00173c9:	59                   	pop    ecx
c00173ca:	5e                   	pop    esi
c00173cb:	6a 0c                	push   0xc
c00173cd:	55                   	push   ebp
c00173ce:	e8 4c 5f ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00173d3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00173d6:	83 c4 10             	add    esp,0x10
c00173d9:	89 f7                	mov    edi,esi
c00173db:	90                   	nop
c00173dc:	8b 86 6a 05 00 00    	mov    eax,DWORD PTR [esi+0x56a]
c00173e2:	85 c0                	test   eax,eax
c00173e4:	0f 84 ba 00 00 00    	je     c00174a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x168>
c00173ea:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00173ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00173f1:	31 c9                	xor    ecx,ecx
c00173f3:	eb 17                	jmp    c001740c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00173f5:	8d 76 00             	lea    esi,[esi+0x0]
c00173f8:	83 c1 01             	add    ecx,0x1
c00173fb:	83 f9 10             	cmp    ecx,0x10
c00173fe:	0f 84 a0 00 00 00    	je     c00174a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x168>
c0017404:	8b 86 6a 05 00 00    	mov    eax,DWORD PTR [esi+0x56a]
c001740a:	66 90                	xchg   ax,ax
c001740c:	0f b7 90 64 05 00 00 	movzx  edx,WORD PTR [eax+0x564]
c0017413:	d3 fa                	sar    edx,cl
c0017415:	80 e2 01             	and    dl,0x1
c0017418:	74 de                	je     c00173f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001741a:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001741d:	01 ca                	add    edx,ecx
c001741f:	8d 14 91             	lea    edx,[ecx+edx*4]
c0017422:	8d 14 91             	lea    edx,[ecx+edx*4]
c0017425:	01 d2                	add    edx,edx
c0017427:	01 ca                	add    edx,ecx
c0017429:	01 d0                	add    eax,edx
c001742b:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017431:	83 fd 07             	cmp    ebp,0x7
c0017434:	75 c2                	jne    c00173f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017436:	05 40 02 00 00       	add    eax,0x240
c001743b:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001743e:	83 fd ff             	cmp    ebp,0xffffffff
c0017441:	0f 8c f1 00 00 00    	jl     c0017538 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c0017447:	0f 84 af 01 00 00    	je     c00175fc <cleanupTerminatedTask(ThreadControlBlock*)+0x2c0>
c001744d:	85 ed                	test   ebp,ebp
c001744f:	0f 84 93 01 00 00    	je     c00175e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0017455:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0017457:	75 9f                	jne    c00173f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017459:	8b 86 6a 05 00 00    	mov    eax,DWORD PTR [esi+0x56a]
c001745f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017463:	01 d0                	add    eax,edx
c0017465:	8d 76 00             	lea    esi,[esi+0x0]
c0017468:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001746c:	83 ec 0c             	sub    esp,0xc
c001746f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017475:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017478:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c001747e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017485:	50                   	push   eax
c0017486:	e8 fd fd ff ff       	call   c0017288 <unblockTask(ThreadControlBlock*)>
c001748b:	83 c4 10             	add    esp,0x10
c001748e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017491:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017495:	89 f7                	mov    edi,esi
c0017497:	83 c1 01             	add    ecx,0x1
c001749a:	83 f9 10             	cmp    ecx,0x10
c001749d:	0f 85 61 ff ff ff    	jne    c0017404 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00174a3:	90                   	nop
c00174a4:	8b 86 66 05 00 00    	mov    eax,DWORD PTR [esi+0x566]
c00174aa:	85 c0                	test   eax,eax
c00174ac:	74 62                	je     c0017510 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d4>
c00174ae:	8b 96 6a 05 00 00    	mov    edx,DWORD PTR [esi+0x56a]
c00174b4:	3b 82 66 05 00 00    	cmp    eax,DWORD PTR [edx+0x566]
c00174ba:	74 54                	je     c0017510 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d4>
c00174bc:	83 ec 0c             	sub    esp,0xc
c00174bf:	68 4c ea 02 c0       	push   0xc002ea4c
c00174c4:	e8 6f a7 00 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00174c9:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c00174d0:	89 c7                	mov    edi,eax
c00174d2:	e8 45 a7 00 00       	call   c0021c1c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00174d7:	83 c4 10             	add    esp,0x10
c00174da:	84 c0                	test   al,al
c00174dc:	0f 84 ce 00 00 00    	je     c00175b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x274>
c00174e2:	66 90                	xchg   ax,ax
c00174e4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00174e7:	8b 90 66 05 00 00    	mov    edx,DWORD PTR [eax+0x566]
c00174ed:	85 d2                	test   edx,edx
c00174ef:	74 0f                	je     c0017500 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00174f1:	83 ec 0c             	sub    esp,0xc
c00174f4:	8b 02                	mov    eax,DWORD PTR [edx]
c00174f6:	52                   	push   edx
c00174f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00174fa:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00174fd:	83 c4 10             	add    esp,0x10
c0017500:	c7 80 66 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x566],0x0
c001750a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001750d:	8d 76 00             	lea    esi,[esi+0x0]
c0017510:	8b 9f 72 05 00 00    	mov    ebx,DWORD PTR [edi+0x572]
c0017516:	85 db                	test   ebx,ebx
c0017518:	74 16                	je     c0017530 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001751a:	83 ec 0c             	sub    esp,0xc
c001751d:	53                   	push   ebx
c001751e:	e8 21 c5 ff ff       	call   c0013a44 <VAS::~VAS()>
c0017523:	58                   	pop    eax
c0017524:	5a                   	pop    edx
c0017525:	6a 14                	push   0x14
c0017527:	53                   	push   ebx
c0017528:	e8 f2 5d ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001752d:	83 c4 10             	add    esp,0x10
c0017530:	83 c4 1c             	add    esp,0x1c
c0017533:	5b                   	pop    ebx
c0017534:	5e                   	pop    esi
c0017535:	5f                   	pop    edi
c0017536:	5d                   	pop    ebp
c0017537:	c3                   	ret    
c0017538:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001753c:	83 ec 0c             	sub    esp,0xc
c001753f:	68 b4 4f 02 c0       	push   0xc0024fb4
c0017544:	e8 95 8a ff ff       	call   c000ffde <KePanic(char const*)>
c0017549:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001754c:	83 c4 10             	add    esp,0x10
c001754f:	89 f7                	mov    edi,esi
c0017551:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017555:	e9 9e fe ff ff       	jmp    c00173f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001755a:	66 90                	xchg   ax,ax
c001755c:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0017562:	39 82 66 05 00 00    	cmp    DWORD PTR [edx+0x566],eax
c0017568:	75 1e                	jne    c0017588 <cleanupTerminatedTask(ThreadControlBlock*)+0x24c>
c001756a:	83 ec 0c             	sub    esp,0xc
c001756d:	68 1c 50 02 c0       	push   0xc002501c
c0017572:	e8 ed f9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017577:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001757e:	e8 69 fa ff ff       	call   c0016fec <blockTask(TaskState)>
c0017583:	83 c4 10             	add    esp,0x10
c0017586:	66 90                	xchg   ax,ax
c0017588:	83 ec 08             	sub    esp,0x8
c001758b:	56                   	push   esi
c001758c:	68 4c ea 02 c0       	push   0xc002ea4c
c0017591:	e8 66 a7 00 00       	call   c0021cfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017596:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c001759d:	e8 96 a6 00 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175a2:	83 c4 10             	add    esp,0x10
c00175a5:	39 f8                	cmp    eax,edi
c00175a7:	0f 84 37 ff ff ff    	je     c00174e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c00175ad:	8d 76 00             	lea    esi,[esi+0x0]
c00175b0:	83 ec 0c             	sub    esp,0xc
c00175b3:	68 4c ea 02 c0       	push   0xc002ea4c
c00175b8:	e8 7b a6 00 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175bd:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c00175c4:	89 c6                	mov    esi,eax
c00175c6:	e8 75 a6 00 00       	call   c0021c40 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00175cb:	83 c4 10             	add    esp,0x10
c00175ce:	39 f3                	cmp    ebx,esi
c00175d0:	74 b6                	je     c0017588 <cleanupTerminatedTask(ThreadControlBlock*)+0x24c>
c00175d2:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00175d5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00175d8:	39 82 6a 05 00 00    	cmp    DWORD PTR [edx+0x56a],eax
c00175de:	75 a8                	jne    c0017588 <cleanupTerminatedTask(ThreadControlBlock*)+0x24c>
c00175e0:	e9 77 ff ff ff       	jmp    c001755c <cleanupTerminatedTask(ThreadControlBlock*)+0x220>
c00175e5:	8d 76 00             	lea    esi,[esi+0x0]
c00175e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00175ec:	83 ec 0c             	sub    esp,0xc
c00175ef:	68 e8 4f 02 c0       	push   0xc0024fe8
c00175f4:	e9 4b ff ff ff       	jmp    c0017544 <cleanupTerminatedTask(ThreadControlBlock*)+0x208>
c00175f9:	8d 76 00             	lea    esi,[esi+0x0]
c00175fc:	8b 36                	mov    esi,DWORD PTR [esi]
c00175fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017602:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0017605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017608:	8b b8 6a 05 00 00    	mov    edi,DWORD PTR [eax+0x56a]
c001760e:	01 d7                	add    edi,edx
c0017610:	89 f8                	mov    eax,edi
c0017612:	e9 51 fe ff ff       	jmp    c0017468 <cleanupTerminatedTask(ThreadControlBlock*)+0x12c>
c0017617:	90                   	nop

c0017618 <cleanerTaskFunction(void*)>:
c0017618:	53                   	push   ebx
c0017619:	83 ec 08             	sub    esp,0x8
c001761c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017624:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017629:	85 c0                	test   eax,eax
c001762b:	75 03                	jne    c0017630 <cleanerTaskFunction(void*)+0x18>
c001762d:	fb                   	sti    
c001762e:	66 90                	xchg   ax,ax
c0017630:	fa                   	cli    
c0017631:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017636:	83 c0 01             	add    eax,0x1
c0017639:	80 3d 14 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea14,0x0
c0017640:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017645:	0f 85 c9 00 00 00    	jne    c0017714 <cleanerTaskFunction(void*)+0xfc>
c001764b:	83 ec 0c             	sub    esp,0xc
c001764e:	6a 02                	push   0x2
c0017650:	e8 6b f9 ff ff       	call   c0016fc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017655:	83 c4 10             	add    esp,0x10
c0017658:	c6 05 14 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea14,0x0
c001765f:	fa                   	cli    
c0017660:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0017666:	8b 1d 2c ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea2c
c001766c:	83 c1 01             	add    ecx,0x1
c001766f:	83 c3 01             	add    ebx,0x1
c0017672:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c0017678:	89 1d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ebx
c001767e:	fa                   	cli    
c001767f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017684:	83 c0 01             	add    eax,0x1
c0017687:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001768c:	eb 2a                	jmp    c00176b8 <cleanerTaskFunction(void*)+0xa0>
c001768e:	66 90                	xchg   ax,ax
c0017690:	83 ec 0c             	sub    esp,0xc
c0017693:	68 34 ea 02 c0       	push   0xc002ea34
c0017698:	e8 9b a5 00 00       	call   c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001769d:	c7 04 24 34 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea34
c00176a4:	89 c3                	mov    ebx,eax
c00176a6:	e8 95 a5 00 00       	call   c0021c40 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00176ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176ae:	e8 89 fc ff ff       	call   c001733c <cleanupTerminatedTask(ThreadControlBlock*)>
c00176b3:	83 c4 10             	add    esp,0x10
c00176b6:	66 90                	xchg   ax,ax
c00176b8:	83 ec 0c             	sub    esp,0xc
c00176bb:	68 34 ea 02 c0       	push   0xc002ea34
c00176c0:	e8 57 a5 00 00       	call   c0021c1c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00176c5:	83 c4 10             	add    esp,0x10
c00176c8:	84 c0                	test   al,al
c00176ca:	74 c4                	je     c0017690 <cleanerTaskFunction(void*)+0x78>
c00176cc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00176d4:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00176da:	85 d2                	test   edx,edx
c00176dc:	75 02                	jne    c00176e0 <cleanerTaskFunction(void*)+0xc8>
c00176de:	fb                   	sti    
c00176df:	90                   	nop
c00176e0:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00176e5:	83 e8 01             	sub    eax,0x1
c00176e8:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00176ed:	0f 85 29 ff ff ff    	jne    c001761c <cleanerTaskFunction(void*)+0x4>
c00176f3:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c00176f8:	85 c0                	test   eax,eax
c00176fa:	0f 84 1c ff ff ff    	je     c001761c <cleanerTaskFunction(void*)+0x4>
c0017700:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c001770a:	e8 1d f8 ff ff       	call   c0016f2c <schedule()>
c001770f:	e9 08 ff ff ff       	jmp    c001761c <cleanerTaskFunction(void*)+0x4>
c0017714:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001771c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017721:	85 c0                	test   eax,eax
c0017723:	0f 85 2f ff ff ff    	jne    c0017658 <cleanerTaskFunction(void*)+0x40>
c0017729:	fb                   	sti    
c001772a:	e9 29 ff ff ff       	jmp    c0017658 <cleanerTaskFunction(void*)+0x40>
c001772f:	90                   	nop

c0017730 <terminateTask(int)>:
c0017730:	83 ec 14             	sub    esp,0x14
c0017733:	fa                   	cli    
c0017734:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017739:	83 c0 01             	add    eax,0x1
c001773c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017741:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0017746:	83 c0 01             	add    eax,0x1
c0017749:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c001774e:	fa                   	cli    
c001774f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017754:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017758:	83 c0 01             	add    eax,0x1
c001775b:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017760:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017765:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017768:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001776d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017770:	50                   	push   eax
c0017771:	68 34 ea 02 c0       	push   0xc002ea34
c0017776:	e8 81 a5 00 00       	call   c0021cfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001777b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017780:	83 c4 10             	add    esp,0x10
c0017783:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001778a:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c001778f:	85 c0                	test   eax,eax
c0017791:	0f 84 81 00 00 00    	je     c0017818 <terminateTask(int)+0xe8>
c0017797:	83 ec 0c             	sub    esp,0xc
c001779a:	c6 05 14 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea14,0x1
c00177a1:	50                   	push   eax
c00177a2:	e8 e1 fa ff ff       	call   c0017288 <unblockTask(ThreadControlBlock*)>
c00177a7:	83 c4 10             	add    esp,0x10
c00177aa:	66 90                	xchg   ax,ax
c00177ac:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00177b4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00177b9:	85 c0                	test   eax,eax
c00177bb:	75 03                	jne    c00177c0 <terminateTask(int)+0x90>
c00177bd:	fb                   	sti    
c00177be:	66 90                	xchg   ax,ax
c00177c0:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00177c5:	83 e8 01             	sub    eax,0x1
c00177c8:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00177cd:	75 09                	jne    c00177d8 <terminateTask(int)+0xa8>
c00177cf:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c00177d6:	75 54                	jne    c001782c <terminateTask(int)+0xfc>
c00177d8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00177e0:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00177e6:	85 c9                	test   ecx,ecx
c00177e8:	75 06                	jne    c00177f0 <terminateTask(int)+0xc0>
c00177ea:	66 90                	xchg   ax,ax
c00177ec:	fb                   	sti    
c00177ed:	8d 76 00             	lea    esi,[esi+0x0]
c00177f0:	fa                   	cli    
c00177f1:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00177f6:	83 c0 01             	add    eax,0x1
c00177f9:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00177fe:	e8 29 f7 ff ff       	call   c0016f2c <schedule()>
c0017803:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001780b:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017811:	85 d2                	test   edx,edx
c0017813:	75 db                	jne    c00177f0 <terminateTask(int)+0xc0>
c0017815:	eb d5                	jmp    c00177ec <terminateTask(int)+0xbc>
c0017817:	90                   	nop
c0017818:	83 ec 0c             	sub    esp,0xc
c001781b:	68 2c 4f 02 c0       	push   0xc0024f2c
c0017820:	e8 3f f7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017825:	83 c4 10             	add    esp,0x10
c0017828:	eb 82                	jmp    c00177ac <terminateTask(int)+0x7c>
c001782a:	66 90                	xchg   ax,ax
c001782c:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0017836:	e8 f1 f6 ff ff       	call   c0016f2c <schedule()>
c001783b:	eb 9b                	jmp    c00177d8 <terminateTask(int)+0xa8>
c001783d:	8d 76 00             	lea    esi,[esi+0x0]

c0017840 <Thr::terminateFromIRQ(int)>:
c0017840:	83 ec 18             	sub    esp,0x18
c0017843:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017847:	50                   	push   eax
c0017848:	e8 e3 fe ff ff       	call   c0017730 <terminateTask(int)>
c001784d:	8d 76 00             	lea    esi,[esi+0x0]

c0017850 <__static_initialization_and_destruction_0(int, int)>:
c0017850:	83 ec 0c             	sub    esp,0xc
c0017853:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017858:	0f 85 8e 00 00 00    	jne    c00178ec <__static_initialization_and_destruction_0(int, int)+0x9c>
c001785e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017866:	0f 85 80 00 00 00    	jne    c00178ec <__static_initialization_and_destruction_0(int, int)+0x9c>
c001786c:	83 ec 0c             	sub    esp,0xc
c001786f:	68 4c ea 02 c0       	push   0xc002ea4c
c0017874:	e8 23 a9 00 00       	call   c002219c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017879:	83 c4 10             	add    esp,0x10
c001787c:	83 ec 04             	sub    esp,0x4
c001787f:	68 38 60 02 c0       	push   0xc0026038
c0017884:	68 4c ea 02 c0       	push   0xc002ea4c
c0017889:	68 4c 21 02 c0       	push   0xc002214c
c001788e:	e8 3c 5a ff ff       	call   c000d2cf <__cxa_atexit>
c0017893:	83 c4 10             	add    esp,0x10
c0017896:	83 ec 0c             	sub    esp,0xc
c0017899:	68 40 ea 02 c0       	push   0xc002ea40
c001789e:	e8 f9 a8 00 00       	call   c002219c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00178a3:	83 c4 10             	add    esp,0x10
c00178a6:	83 ec 04             	sub    esp,0x4
c00178a9:	68 38 60 02 c0       	push   0xc0026038
c00178ae:	68 40 ea 02 c0       	push   0xc002ea40
c00178b3:	68 4c 21 02 c0       	push   0xc002214c
c00178b8:	e8 12 5a ff ff       	call   c000d2cf <__cxa_atexit>
c00178bd:	83 c4 10             	add    esp,0x10
c00178c0:	83 ec 0c             	sub    esp,0xc
c00178c3:	68 34 ea 02 c0       	push   0xc002ea34
c00178c8:	e8 cf a8 00 00       	call   c002219c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00178cd:	83 c4 10             	add    esp,0x10
c00178d0:	83 ec 04             	sub    esp,0x4
c00178d3:	68 38 60 02 c0       	push   0xc0026038
c00178d8:	68 34 ea 02 c0       	push   0xc002ea34
c00178dd:	68 4c 21 02 c0       	push   0xc002214c
c00178e2:	e8 e8 59 ff ff       	call   c000d2cf <__cxa_atexit>
c00178e7:	83 c4 10             	add    esp,0x10
c00178ea:	66 90                	xchg   ax,ax
c00178ec:	90                   	nop
c00178ed:	83 c4 0c             	add    esp,0xc
c00178f0:	c3                   	ret    
c00178f1:	8d 76 00             	lea    esi,[esi+0x0]

c00178f4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00178f4:	83 ec 0c             	sub    esp,0xc
c00178f7:	83 ec 08             	sub    esp,0x8
c00178fa:	68 ff ff 00 00       	push   0xffff
c00178ff:	6a 01                	push   0x1
c0017901:	e8 4a ff ff ff       	call   c0017850 <__static_initialization_and_destruction_0(int, int)>
c0017906:	83 c4 10             	add    esp,0x10
c0017909:	83 c4 0c             	add    esp,0xc
c001790c:	c3                   	ret    

c001790d <Vm::inbv(unsigned short)>:
c001790d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017911:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017916:	75 06                	jne    c001791e <Vm::inbv(unsigned short)+0x11>
c0017918:	a0 90 ea 02 c0       	mov    al,ds:0xc002ea90
c001791d:	c3                   	ret    
c001791e:	ec                   	in     al,dx
c001791f:	c3                   	ret    

c0017920 <Vm::outbv(unsigned short, unsigned char)>:
c0017920:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017928:	66 81 fa fe fe       	cmp    dx,0xfefe
c001792d:	75 25                	jne    c0017954 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001792f:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c0017935:	8d 51 01             	lea    edx,[ecx+0x1]
c0017938:	88 81 a0 ea 02 c0    	mov    BYTE PTR [ecx-0x3ffd1560],al
c001793e:	89 15 90 ea 02 c0    	mov    DWORD PTR ds:0xc002ea90,edx
c0017944:	83 fa 20             	cmp    edx,0x20
c0017947:	75 0c                	jne    c0017955 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0017949:	c7 05 90 ea 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x1f
c0017953:	c3                   	ret    
c0017954:	ee                   	out    dx,al
c0017955:	c3                   	ret    

c0017956 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017956:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001795b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017960:	c1 e0 04             	shl    eax,0x4
c0017963:	01 d0                	add    eax,edx
c0017965:	c3                   	ret    

c0017966 <Vm::getSegment(unsigned int)>:
c0017966:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001796a:	c1 e8 10             	shr    eax,0x10
c001796d:	c3                   	ret    

c001796e <Vm::getOffset(unsigned int)>:
c001796e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017972:	c3                   	ret    

c0017973 <Vm::mainloop2()>:
c0017973:	83 ec 18             	sub    esp,0x18
c0017976:	fa                   	cli    
c0017977:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001797d:	6a 02                	push   0x2
c001797f:	c6 05 89 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea89,0x1
c0017986:	e8 35 f6 ff ff       	call   c0016fc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001798b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017990:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0017994:	52                   	push   edx
c0017995:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017999:	52                   	push   edx
c001799a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001799e:	52                   	push   edx
c001799f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c00179a3:	50                   	push   eax
c00179a4:	e8 66 88 fe ff       	call   c000020f <goToVM86>
c00179a9:	83 c4 2c             	add    esp,0x2c
c00179ac:	c3                   	ret    

c00179ad <Vm::mainVm8086Loop(void*)>:
c00179ad:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00179b4:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00179bb:	75 01                	jne    c00179be <Vm::mainVm8086Loop(void*)+0x11>
c00179bd:	fb                   	sti    
c00179be:	eb b3                	jmp    c0017973 <Vm::mainloop2()>

c00179c0 <Vm::mainloop3(unsigned long)>:
c00179c0:	83 ec 18             	sub    esp,0x18
c00179c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179c7:	fa                   	cli    
c00179c8:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00179ce:	6a 02                	push   0x2
c00179d0:	c6 05 88 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea88,0x1
c00179d7:	a3 84 ea 02 c0       	mov    ds:0xc002ea84,eax
c00179dc:	e8 df f5 ff ff       	call   c0016fc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00179e1:	83 c4 1c             	add    esp,0x1c
c00179e4:	eb 8d                	jmp    c0017973 <Vm::mainloop2()>

c00179e6 <Vm::initialise8086()>:
c00179e6:	83 ec 0c             	sub    esp,0xc
c00179e9:	68 80 00 00 00       	push   0x80
c00179ee:	6a 00                	push   0x0
c00179f0:	68 ad 79 01 c0       	push   0xc00179ad
c00179f5:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00179fb:	e8 94 f2 ff ff       	call   c0016c94 <Process::createThread(void (*)(void*), void*, int)>
c0017a00:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017a07:	a3 8c ea 02 c0       	mov    ds:0xc002ea8c,eax
c0017a0c:	68 10 01 00 00       	push   0x110
c0017a11:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0017a16:	6a 00                	push   0x0
c0017a18:	6a 00                	push   0x0
c0017a1a:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c0017a20:	e8 71 c3 ff ff       	call   c0013d96 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a25:	83 c4 2c             	add    esp,0x2c
c0017a28:	c3                   	ret    

c0017a29 <Vm::resetConventionalMemory8086()>:
c0017a29:	c3                   	ret    

c0017a2a <Vm::finish8086()>:
c0017a2a:	53                   	push   ebx
c0017a2b:	83 ec 08             	sub    esp,0x8
c0017a2e:	fa                   	cli    
c0017a2f:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017a35:	80 3d 88 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea88,0x0
c0017a3c:	75 18                	jne    c0017a56 <Vm::finish8086()+0x2c>
c0017a3e:	e8 e9 f4 ff ff       	call   c0016f2c <schedule()>
c0017a43:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017a4a:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017a51:	75 db                	jne    c0017a2e <Vm::finish8086()+0x4>
c0017a53:	fb                   	sti    
c0017a54:	eb d8                	jmp    c0017a2e <Vm::finish8086()+0x4>
c0017a56:	83 ec 0c             	sub    esp,0xc
c0017a59:	8b 1d 84 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea84
c0017a5f:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017a65:	c6 05 88 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea88,0x0
c0017a6c:	e8 17 f8 ff ff       	call   c0017288 <unblockTask(ThreadControlBlock*)>
c0017a71:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017a78:	83 c4 10             	add    esp,0x10
c0017a7b:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017a82:	75 01                	jne    c0017a85 <Vm::finish8086()+0x5b>
c0017a84:	fb                   	sti    
c0017a85:	89 d8                	mov    eax,ebx
c0017a87:	83 c4 08             	add    esp,0x8
c0017a8a:	5b                   	pop    ebx
c0017a8b:	c3                   	ret    

c0017a8c <Vm::getOutput8086(unsigned char*)>:
c0017a8c:	57                   	push   edi
c0017a8d:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c0017a93:	56                   	push   esi
c0017a94:	be a0 ea 02 c0       	mov    esi,0xc002eaa0
c0017a99:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017a9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017a9f:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c0017aa4:	5e                   	pop    esi
c0017aa5:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017aaf:	5f                   	pop    edi
c0017ab0:	c3                   	ret    

c0017ab1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017ab1:	55                   	push   ebp
c0017ab2:	57                   	push   edi
c0017ab3:	56                   	push   esi
c0017ab4:	53                   	push   ebx
c0017ab5:	83 ec 2c             	sub    esp,0x2c
c0017ab8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017abc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017ac0:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017ac4:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0017ac8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017acc:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017ad3:	75 5d                	jne    c0017b32 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017ad5:	83 ec 0c             	sub    esp,0xc
c0017ad8:	68 14 01 00 00       	push   0x114
c0017add:	e8 b5 81 ff ff       	call   c000fc97 <malloc>
c0017ae2:	83 c4 0c             	add    esp,0xc
c0017ae5:	89 c7                	mov    edi,eax
c0017ae7:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017aed:	68 44 50 02 c0       	push   0xc0025044
c0017af2:	50                   	push   eax
c0017af3:	e8 3a 06 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017af8:	58                   	pop    eax
c0017af9:	5a                   	pop    edx
c0017afa:	6a 12                	push   0x12
c0017afc:	57                   	push   edi
c0017afd:	e8 4e 06 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0017b02:	59                   	pop    ecx
c0017b03:	8b 07                	mov    eax,DWORD PTR [edi]
c0017b05:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017b09:	51                   	push   ecx
c0017b0a:	6a 00                	push   0x0
c0017b0c:	6a 00                	push   0x0
c0017b0e:	68 00 00 11 00       	push   0x110000
c0017b13:	57                   	push   edi
c0017b14:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017b17:	83 c4 14             	add    esp,0x14
c0017b1a:	57                   	push   edi
c0017b1b:	e8 8e 06 ff ff       	call   c00081ae <File::close()>
c0017b20:	8b 07                	mov    eax,DWORD PTR [edi]
c0017b22:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017b28:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0017b2f:	83 c4 10             	add    esp,0x10
c0017b32:	fa                   	cli    
c0017b33:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017b39:	80 3d 89 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea89,0x0
c0017b40:	75 18                	jne    c0017b5a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0017b42:	e8 e5 f3 ff ff       	call   c0016f2c <schedule()>
c0017b47:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017b4e:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017b55:	75 db                	jne    c0017b32 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017b57:	fb                   	sti    
c0017b58:	eb d8                	jmp    c0017b32 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017b5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b5e:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017b63:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017b6d:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017b71:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017b75:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017b79:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017b7d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017b81:	0f b7 f6             	movzx  esi,si
c0017b84:	0f b7 db             	movzx  ebx,bx
c0017b87:	50                   	push   eax
c0017b88:	6a 20                	push   0x20
c0017b8a:	6a 00                	push   0x0
c0017b8c:	68 a0 ea 02 c0       	push   0xc002eaa0
c0017b91:	e8 5a 89 fe ff       	call   c00004f0 <memset>
c0017b96:	5a                   	pop    edx
c0017b97:	59                   	pop    ecx
c0017b98:	56                   	push   esi
c0017b99:	53                   	push   ebx
c0017b9a:	e8 b7 fd ff ff       	call   c0017956 <Vm::realToLinear(unsigned short, unsigned short)>
c0017b9f:	83 c4 10             	add    esp,0x10
c0017ba2:	89 c7                	mov    edi,eax
c0017ba4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017ba8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017bac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017bae:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c0017bb5:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017bbc:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017bc3:	75 01                	jne    c0017bc6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0017bc5:	fb                   	sti    
c0017bc6:	83 ec 0c             	sub    esp,0xc
c0017bc9:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017bcf:	e8 b4 f6 ff ff       	call   c0017288 <unblockTask(ThreadControlBlock*)>
c0017bd4:	83 c4 3c             	add    esp,0x3c
c0017bd7:	b0 01                	mov    al,0x1
c0017bd9:	5b                   	pop    ebx
c0017bda:	5e                   	pop    esi
c0017bdb:	5f                   	pop    edi
c0017bdc:	5d                   	pop    ebp
c0017bdd:	c3                   	ret    

c0017bde <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017bde:	55                   	push   ebp
c0017bdf:	57                   	push   edi
c0017be0:	56                   	push   esi
c0017be1:	53                   	push   ebx
c0017be2:	83 ec 2c             	sub    esp,0x2c
c0017be5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017be9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017bed:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017bf1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017bf5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bf9:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017c00:	75 5d                	jne    c0017c5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017c02:	83 ec 0c             	sub    esp,0xc
c0017c05:	68 14 01 00 00       	push   0x114
c0017c0a:	e8 88 80 ff ff       	call   c000fc97 <malloc>
c0017c0f:	83 c4 0c             	add    esp,0xc
c0017c12:	89 c6                	mov    esi,eax
c0017c14:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017c1a:	68 44 50 02 c0       	push   0xc0025044
c0017c1f:	50                   	push   eax
c0017c20:	e8 0d 05 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017c25:	58                   	pop    eax
c0017c26:	5a                   	pop    edx
c0017c27:	6a 12                	push   0x12
c0017c29:	56                   	push   esi
c0017c2a:	e8 21 05 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0017c2f:	59                   	pop    ecx
c0017c30:	8b 06                	mov    eax,DWORD PTR [esi]
c0017c32:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017c36:	52                   	push   edx
c0017c37:	6a 00                	push   0x0
c0017c39:	6a 00                	push   0x0
c0017c3b:	68 00 00 11 00       	push   0x110000
c0017c40:	56                   	push   esi
c0017c41:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017c44:	83 c4 14             	add    esp,0x14
c0017c47:	56                   	push   esi
c0017c48:	e8 61 05 ff ff       	call   c00081ae <File::close()>
c0017c4d:	8b 06                	mov    eax,DWORD PTR [esi]
c0017c4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0017c52:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c55:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0017c5c:	83 c4 10             	add    esp,0x10
c0017c5f:	50                   	push   eax
c0017c60:	50                   	push   eax
c0017c61:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017c65:	68 5f 50 02 c0       	push   0xc002505f
c0017c6a:	e8 f5 f2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017c6f:	83 c4 10             	add    esp,0x10
c0017c72:	fa                   	cli    
c0017c73:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017c79:	0f b6 35 89 ea 02 c0 	movzx  esi,BYTE PTR ds:0xc002ea89
c0017c80:	89 f0                	mov    eax,esi
c0017c82:	84 c0                	test   al,al
c0017c84:	75 18                	jne    c0017c9e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c0017c86:	e8 a1 f2 ff ff       	call   c0016f2c <schedule()>
c0017c8b:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017c92:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017c99:	75 d7                	jne    c0017c72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0017c9b:	fb                   	sti    
c0017c9c:	eb d4                	jmp    c0017c72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0017c9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ca2:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017ca7:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017cb1:	66 89 48 5f          	mov    WORD PTR [eax+0x5f],cx
c0017cb5:	66 89 58 5d          	mov    WORD PTR [eax+0x5d],bx
c0017cb9:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0017cbd:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0017cc1:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017cc5:	50                   	push   eax
c0017cc6:	6a 20                	push   0x20
c0017cc8:	6a 00                	push   0x0
c0017cca:	68 a0 ea 02 c0       	push   0xc002eaa0
c0017ccf:	e8 1c 88 fe ff       	call   c00004f0 <memset>
c0017cd4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017cdb:	e8 b7 7f ff ff       	call   c000fc97 <malloc>
c0017ce0:	83 c4 0c             	add    esp,0xc
c0017ce3:	89 c3                	mov    ebx,eax
c0017ce5:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017ceb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017cef:	50                   	push   eax
c0017cf0:	e8 3d 04 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017cf5:	83 c4 10             	add    esp,0x10
c0017cf8:	85 db                	test   ebx,ebx
c0017cfa:	75 0a                	jne    c0017d06 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x128>
c0017cfc:	83 ec 0c             	sub    esp,0xc
c0017cff:	68 81 50 02 c0       	push   0xc0025081
c0017d04:	eb 2b                	jmp    c0017d31 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x153>
c0017d06:	50                   	push   eax
c0017d07:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017d0b:	50                   	push   eax
c0017d0c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017d10:	50                   	push   eax
c0017d11:	53                   	push   ebx
c0017d12:	e8 3b 07 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0017d17:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017d1b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017d1f:	83 c4 10             	add    esp,0x10
c0017d22:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017d27:	74 28                	je     c0017d51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x173>
c0017d29:	83 ec 0c             	sub    esp,0xc
c0017d2c:	68 95 50 02 c0       	push   0xc0025095
c0017d31:	e8 a8 82 ff ff       	call   c000ffde <KePanic(char const*)>
c0017d36:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017d3d:	83 c4 10             	add    esp,0x10
c0017d40:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017d47:	75 01                	jne    c0017d4a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0017d49:	fb                   	sti    
c0017d4a:	31 f6                	xor    esi,esi
c0017d4c:	e9 91 00 00 00       	jmp    c0017de2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0017d51:	51                   	push   ecx
c0017d52:	51                   	push   ecx
c0017d53:	6a 01                	push   0x1
c0017d55:	53                   	push   ebx
c0017d56:	e8 f5 03 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0017d5b:	83 c4 10             	add    esp,0x10
c0017d5e:	85 c0                	test   eax,eax
c0017d60:	74 27                	je     c0017d89 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ab>
c0017d62:	83 ec 0c             	sub    esp,0xc
c0017d65:	68 ae 50 02 c0       	push   0xc00250ae
c0017d6a:	e8 6f 82 ff ff       	call   c000ffde <KePanic(char const*)>
c0017d6f:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017d76:	83 c4 10             	add    esp,0x10
c0017d79:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017d80:	75 c8                	jne    c0017d4a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0017d82:	fb                   	sti    
c0017d83:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0017d87:	eb 59                	jmp    c0017de2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0017d89:	0f b7 ff             	movzx  edi,di
c0017d8c:	50                   	push   eax
c0017d8d:	50                   	push   eax
c0017d8e:	0f b7 c5             	movzx  eax,bp
c0017d91:	57                   	push   edi
c0017d92:	50                   	push   eax
c0017d93:	e8 be fb ff ff       	call   c0017956 <Vm::realToLinear(unsigned short, unsigned short)>
c0017d98:	5a                   	pop    edx
c0017d99:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017d9b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0017d9f:	51                   	push   ecx
c0017da0:	50                   	push   eax
c0017da1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017da5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017da9:	53                   	push   ebx
c0017daa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017dad:	83 c4 14             	add    esp,0x14
c0017db0:	53                   	push   ebx
c0017db1:	e8 f8 03 ff ff       	call   c00081ae <File::close()>
c0017db6:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c0017dbd:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017dc4:	83 c4 10             	add    esp,0x10
c0017dc7:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017dce:	75 01                	jne    c0017dd1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f3>
c0017dd0:	fb                   	sti    
c0017dd1:	83 ec 0c             	sub    esp,0xc
c0017dd4:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017dda:	e8 a9 f4 ff ff       	call   c0017288 <unblockTask(ThreadControlBlock*)>
c0017ddf:	83 c4 10             	add    esp,0x10
c0017de2:	83 c4 2c             	add    esp,0x2c
c0017de5:	89 f0                	mov    eax,esi
c0017de7:	5b                   	pop    ebx
c0017de8:	5e                   	pop    esi
c0017de9:	5f                   	pop    edi
c0017dea:	5d                   	pop    ebp
c0017deb:	c3                   	ret    

c0017dec <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017dec:	57                   	push   edi
c0017ded:	56                   	push   esi
c0017dee:	53                   	push   ebx
c0017def:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017df3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017df7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017dfb:	83 e8 06             	sub    eax,0x6
c0017dfe:	0f b7 c0             	movzx  eax,ax
c0017e01:	50                   	push   eax
c0017e02:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017e07:	50                   	push   eax
c0017e08:	e8 49 fb ff ff       	call   c0017956 <Vm::realToLinear(unsigned short, unsigned short)>
c0017e0d:	5a                   	pop    edx
c0017e0e:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017e11:	59                   	pop    ecx
c0017e12:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017e15:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017e18:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017e1e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017e21:	8d 56 02             	lea    edx,[esi+0x2]
c0017e24:	66 89 10             	mov    WORD PTR [eax],dx
c0017e27:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017e2b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017e2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017e32:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017e36:	0f b6 f1             	movzx  esi,cl
c0017e39:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017e3d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017e43:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c0017e47:	0f b6 d5             	movzx  edx,ch
c0017e4a:	74 0a                	je     c0017e56 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0017e4c:	c1 e2 08             	shl    edx,0x8
c0017e4f:	09 f2                	or     edx,esi
c0017e51:	80 ce 02             	or     dh,0x2
c0017e54:	eb 08                	jmp    c0017e5e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0017e56:	c1 e2 08             	shl    edx,0x8
c0017e59:	09 f2                	or     edx,esi
c0017e5b:	80 e6 fd             	and    dh,0xfd
c0017e5e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017e62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e67:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017e6b:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017e73:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017e76:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017e7e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017e81:	5b                   	pop    ebx
c0017e82:	5e                   	pop    esi
c0017e83:	5f                   	pop    edi
c0017e84:	c3                   	ret    

c0017e85 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017e85:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e8a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e8f:	c1 e0 04             	shl    eax,0x4
c0017e92:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017e95:	c3                   	ret    

c0017e96 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017e96:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e9b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017ea0:	c1 e0 04             	shl    eax,0x4
c0017ea3:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017ea7:	c3                   	ret    

c0017ea8 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017ea8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017ead:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017eb2:	c1 e0 04             	shl    eax,0x4
c0017eb5:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017eb8:	c3                   	ret    

c0017eb9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017eb9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017ebe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017ec3:	c1 e0 04             	shl    eax,0x4
c0017ec6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017eca:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017ecd:	c3                   	ret    

c0017ece <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017ece:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017ed3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017ed8:	c1 e0 04             	shl    eax,0x4
c0017edb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017edf:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017ee3:	c3                   	ret    

c0017ee4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017ee4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017ee9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017eee:	c1 e0 04             	shl    eax,0x4
c0017ef1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ef5:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017ef8:	c3                   	ret    

c0017ef9 <Vm::faultHandler(regs*)>:
c0017ef9:	55                   	push   ebp
c0017efa:	57                   	push   edi
c0017efb:	56                   	push   esi
c0017efc:	53                   	push   ebx
c0017efd:	83 ec 2c             	sub    esp,0x2c
c0017f00:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017f04:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017f07:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017f0b:	0f b7 f8             	movzx  edi,ax
c0017f0e:	52                   	push   edx
c0017f0f:	0f b7 c0             	movzx  eax,ax
c0017f12:	50                   	push   eax
c0017f13:	e8 3e fa ff ff       	call   c0017956 <Vm::realToLinear(unsigned short, unsigned short)>
c0017f18:	5a                   	pop    edx
c0017f19:	59                   	pop    ecx
c0017f1a:	89 c1                	mov    ecx,eax
c0017f1c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017f1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f23:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017f28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f2c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017f2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f33:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017f38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017f3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017f40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f44:	e8 0d fa ff ff       	call   c0017956 <Vm::realToLinear(unsigned short, unsigned short)>
c0017f49:	5e                   	pop    esi
c0017f4a:	be 06 00 00 00       	mov    esi,0x6
c0017f4f:	5d                   	pop    ebp
c0017f50:	31 ed                	xor    ebp,ebp
c0017f52:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017f57:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017f5a:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017f60:	0f 84 74 02 00 00    	je     c00181da <Vm::faultHandler(regs*)+0x2e1>
c0017f66:	0f 87 94 00 00 00    	ja     c0018000 <Vm::faultHandler(regs*)+0x107>
c0017f6c:	83 fa 66             	cmp    edx,0x66
c0017f6f:	0f 84 e2 01 00 00    	je     c0018157 <Vm::faultHandler(regs*)+0x25e>
c0017f75:	77 47                	ja     c0017fbe <Vm::faultHandler(regs*)+0xc5>
c0017f77:	83 fa 36             	cmp    edx,0x36
c0017f7a:	0f 84 ca 01 00 00    	je     c001814a <Vm::faultHandler(regs*)+0x251>
c0017f80:	77 1a                	ja     c0017f9c <Vm::faultHandler(regs*)+0xa3>
c0017f82:	83 fa 26             	cmp    edx,0x26
c0017f85:	0f 84 98 01 00 00    	je     c0018123 <Vm::faultHandler(regs*)+0x22a>
c0017f8b:	83 fa 2e             	cmp    edx,0x2e
c0017f8e:	0f 85 21 06 00 00    	jne    c00185b5 <Vm::faultHandler(regs*)+0x6bc>
c0017f94:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f97:	31 f6                	xor    esi,esi
c0017f99:	41                   	inc    ecx
c0017f9a:	eb bb                	jmp    c0017f57 <Vm::faultHandler(regs*)+0x5e>
c0017f9c:	83 fa 64             	cmp    edx,0x64
c0017f9f:	0f 84 8b 01 00 00    	je     c0018130 <Vm::faultHandler(regs*)+0x237>
c0017fa5:	0f 87 92 01 00 00    	ja     c001813d <Vm::faultHandler(regs*)+0x244>
c0017fab:	83 fa 3e             	cmp    edx,0x3e
c0017fae:	0f 85 01 06 00 00    	jne    c00185b5 <Vm::faultHandler(regs*)+0x6bc>
c0017fb4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017fb7:	be 01 00 00 00       	mov    esi,0x1
c0017fbc:	eb db                	jmp    c0017f99 <Vm::faultHandler(regs*)+0xa0>
c0017fbe:	83 fa 6d             	cmp    edx,0x6d
c0017fc1:	0f 84 34 03 00 00    	je     c00182fb <Vm::faultHandler(regs*)+0x402>
c0017fc7:	77 17                	ja     c0017fe0 <Vm::faultHandler(regs*)+0xe7>
c0017fc9:	83 fa 67             	cmp    edx,0x67
c0017fcc:	0f 84 92 01 00 00    	je     c0018164 <Vm::faultHandler(regs*)+0x26b>
c0017fd2:	83 fa 6c             	cmp    edx,0x6c
c0017fd5:	0f 84 b1 02 00 00    	je     c001828c <Vm::faultHandler(regs*)+0x393>
c0017fdb:	e9 d5 05 00 00       	jmp    c00185b5 <Vm::faultHandler(regs*)+0x6bc>
c0017fe0:	83 fa 6f             	cmp    edx,0x6f
c0017fe3:	0f 84 3d 04 00 00    	je     c0018426 <Vm::faultHandler(regs*)+0x52d>
c0017fe9:	0f 82 9f 03 00 00    	jb     c001838e <Vm::faultHandler(regs*)+0x495>
c0017fef:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017ff5:	0f 84 76 01 00 00    	je     c0018171 <Vm::faultHandler(regs*)+0x278>
c0017ffb:	e9 b5 05 00 00       	jmp    c00185b5 <Vm::faultHandler(regs*)+0x6bc>
c0018000:	81 fa ec 00 00 00    	cmp    edx,0xec
c0018006:	0f 84 51 05 00 00    	je     c001855d <Vm::faultHandler(regs*)+0x664>
c001800c:	0f 87 a9 00 00 00    	ja     c00180bb <Vm::faultHandler(regs*)+0x1c2>
c0018012:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0018018:	0f 84 d0 04 00 00    	je     c00184ee <Vm::faultHandler(regs*)+0x5f5>
c001801e:	77 78                	ja     c0018098 <Vm::faultHandler(regs*)+0x19f>
c0018020:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0018026:	0f 84 0e 02 00 00    	je     c001823a <Vm::faultHandler(regs*)+0x341>
c001802c:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0018032:	0f 85 7d 05 00 00    	jne    c00185b5 <Vm::faultHandler(regs*)+0x6bc>
c0018038:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001803c:	89 d1                	mov    ecx,edx
c001803e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0018041:	c1 e1 08             	shl    ecx,0x8
c0018044:	09 ca                	or     edx,ecx
c0018046:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018049:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001804d:	89 d1                	mov    ecx,edx
c001804f:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0018053:	c1 e1 08             	shl    ecx,0x8
c0018056:	09 ca                	or     edx,ecx
c0018058:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001805b:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001805f:	89 d1                	mov    ecx,edx
c0018061:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0018065:	c1 e1 08             	shl    ecx,0x8
c0018068:	09 ca                	or     edx,ecx
c001806a:	81 ca 00 02 02 00    	or     edx,0x20200
c0018070:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018073:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0018077:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001807d:	d1 e8                	shr    eax,1
c001807f:	83 e0 01             	and    eax,0x1
c0018082:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018085:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018088:	83 c0 06             	add    eax,0x6
c001808b:	25 ff ff 00 00       	and    eax,0xffff
c0018090:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018093:	e9 19 05 00 00       	jmp    c00185b1 <Vm::faultHandler(regs*)+0x6b8>
c0018098:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001809e:	0f 84 8f 04 00 00    	je     c0018533 <Vm::faultHandler(regs*)+0x63a>
c00180a4:	0f 82 60 04 00 00    	jb     c001850a <Vm::faultHandler(regs*)+0x611>
c00180aa:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00180b0:	0f 84 94 04 00 00    	je     c001854a <Vm::faultHandler(regs*)+0x651>
c00180b6:	e9 fa 04 00 00       	jmp    c00185b5 <Vm::faultHandler(regs*)+0x6bc>
c00180bb:	81 fa ef 00 00 00    	cmp    edx,0xef
c00180c1:	0f 84 d7 04 00 00    	je     c001859e <Vm::faultHandler(regs*)+0x6a5>
c00180c7:	77 2e                	ja     c00180f7 <Vm::faultHandler(regs*)+0x1fe>
c00180c9:	81 fa ed 00 00 00    	cmp    edx,0xed
c00180cf:	0f 84 a4 04 00 00    	je     c0018579 <Vm::faultHandler(regs*)+0x680>
c00180d5:	81 fa ee 00 00 00    	cmp    edx,0xee
c00180db:	0f 85 d4 04 00 00    	jne    c00185b5 <Vm::faultHandler(regs*)+0x6bc>
c00180e1:	50                   	push   eax
c00180e2:	50                   	push   eax
c00180e3:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00180e7:	50                   	push   eax
c00180e8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00180ec:	50                   	push   eax
c00180ed:	e8 2e f8 ff ff       	call   c0017920 <Vm::outbv(unsigned short, unsigned char)>
c00180f2:	e9 9f 04 00 00       	jmp    c0018596 <Vm::faultHandler(regs*)+0x69d>
c00180f7:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00180fd:	0f 84 6d 01 00 00    	je     c0018270 <Vm::faultHandler(regs*)+0x377>
c0018103:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0018109:	0f 84 6f 01 00 00    	je     c001827e <Vm::faultHandler(regs*)+0x385>
c001810f:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0018115:	0f 85 9a 04 00 00    	jne    c00185b5 <Vm::faultHandler(regs*)+0x6bc>
c001811b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001811e:	e9 76 fe ff ff       	jmp    c0017f99 <Vm::faultHandler(regs*)+0xa0>
c0018123:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018126:	be 02 00 00 00       	mov    esi,0x2
c001812b:	e9 69 fe ff ff       	jmp    c0017f99 <Vm::faultHandler(regs*)+0xa0>
c0018130:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018133:	be 03 00 00 00       	mov    esi,0x3
c0018138:	e9 5c fe ff ff       	jmp    c0017f99 <Vm::faultHandler(regs*)+0xa0>
c001813d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018140:	be 04 00 00 00       	mov    esi,0x4
c0018145:	e9 4f fe ff ff       	jmp    c0017f99 <Vm::faultHandler(regs*)+0xa0>
c001814a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001814d:	be 05 00 00 00       	mov    esi,0x5
c0018152:	e9 42 fe ff ff       	jmp    c0017f99 <Vm::faultHandler(regs*)+0xa0>
c0018157:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001815a:	bd 01 00 00 00       	mov    ebp,0x1
c001815f:	e9 35 fe ff ff       	jmp    c0017f99 <Vm::faultHandler(regs*)+0xa0>
c0018164:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018167:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001816c:	e9 28 fe ff ff       	jmp    c0017f99 <Vm::faultHandler(regs*)+0xa0>
c0018171:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018174:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018178:	83 e5 01             	and    ebp,0x1
c001817b:	74 30                	je     c00181ad <Vm::faultHandler(regs*)+0x2b4>
c001817d:	83 e9 04             	sub    ecx,0x4
c0018180:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018186:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001818c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001818f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018192:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018198:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001819c:	0f 84 0c 04 00 00    	je     c00185ae <Vm::faultHandler(regs*)+0x6b5>
c00181a2:	80 ce 02             	or     dh,0x2
c00181a5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00181a8:	e9 01 04 00 00       	jmp    c00185ae <Vm::faultHandler(regs*)+0x6b5>
c00181ad:	83 e9 02             	sub    ecx,0x2
c00181b0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00181b6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00181b9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00181bd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00181c3:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00181c7:	74 05                	je     c00181ce <Vm::faultHandler(regs*)+0x2d5>
c00181c9:	80 ce 02             	or     dh,0x2
c00181cc:	eb 03                	jmp    c00181d1 <Vm::faultHandler(regs*)+0x2d8>
c00181ce:	80 e6 fd             	and    dh,0xfd
c00181d1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00181d5:	e9 d4 03 00 00       	jmp    c00185ae <Vm::faultHandler(regs*)+0x6b5>
c00181da:	83 e5 01             	and    ebp,0x1
c00181dd:	74 2a                	je     c0018209 <Vm::faultHandler(regs*)+0x310>
c00181df:	8b 10                	mov    edx,DWORD PTR [eax]
c00181e1:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00181e7:	81 ca 00 02 02 00    	or     edx,0x20200
c00181ed:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00181f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00181f2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00181f8:	c1 e8 09             	shr    eax,0x9
c00181fb:	83 e0 01             	and    eax,0x1
c00181fe:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018201:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018204:	83 c0 04             	add    eax,0x4
c0018207:	eb 24                	jmp    c001822d <Vm::faultHandler(regs*)+0x334>
c0018209:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001820c:	81 ca 00 02 02 00    	or     edx,0x20200
c0018212:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018215:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0018218:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001821e:	c1 e8 09             	shr    eax,0x9
c0018221:	83 e0 01             	and    eax,0x1
c0018224:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018227:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001822a:	83 c0 02             	add    eax,0x2
c001822d:	25 ff ff 00 00       	and    eax,0xffff
c0018232:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018235:	e9 74 03 00 00       	jmp    c00185ae <Vm::faultHandler(regs*)+0x6b5>
c001823a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001823e:	3d ee 00 00 00       	cmp    eax,0xee
c0018243:	75 10                	jne    c0018255 <Vm::faultHandler(regs*)+0x35c>
c0018245:	83 ec 0c             	sub    esp,0xc
c0018248:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001824b:	e8 70 f7 ff ff       	call   c00179c0 <Vm::mainloop3(unsigned long)>
c0018250:	e9 44 03 00 00       	jmp    c0018599 <Vm::faultHandler(regs*)+0x6a0>
c0018255:	83 ec 0c             	sub    esp,0xc
c0018258:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001825c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018260:	51                   	push   ecx
c0018261:	50                   	push   eax
c0018262:	53                   	push   ebx
c0018263:	e8 84 fb ff ff       	call   c0017dec <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018268:	83 c4 20             	add    esp,0x20
c001826b:	e9 41 03 00 00       	jmp    c00185b1 <Vm::faultHandler(regs*)+0x6b8>
c0018270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018275:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018279:	e9 30 03 00 00       	jmp    c00185ae <Vm::faultHandler(regs*)+0x6b5>
c001827e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018283:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018287:	e9 22 03 00 00       	jmp    c00185ae <Vm::faultHandler(regs*)+0x6b5>
c001828c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001828f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0018294:	74 2b                	je     c00182c1 <Vm::faultHandler(regs*)+0x3c8>
c0018296:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001829d:	76 22                	jbe    c00182c1 <Vm::faultHandler(regs*)+0x3c8>
c001829f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00182a3:	50                   	push   eax
c00182a4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00182a8:	50                   	push   eax
c00182a9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00182ad:	50                   	push   eax
c00182ae:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00182b2:	50                   	push   eax
c00182b3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00182b7:	50                   	push   eax
c00182b8:	6a 6c                	push   0x6c
c00182ba:	6a 6c                	push   0x6c
c00182bc:	e9 bd 01 00 00       	jmp    c001847e <Vm::faultHandler(regs*)+0x585>
c00182c1:	83 ec 0c             	sub    esp,0xc
c00182c4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00182c8:	0f b7 f6             	movzx  esi,si
c00182cb:	50                   	push   eax
c00182cc:	e8 3c f6 ff ff       	call   c001790d <Vm::inbv(unsigned short)>
c00182d1:	83 c4 0c             	add    esp,0xc
c00182d4:	0f b6 c0             	movzx  eax,al
c00182d7:	50                   	push   eax
c00182d8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00182dc:	50                   	push   eax
c00182dd:	56                   	push   esi
c00182de:	e8 d6 fb ff ff       	call   c0017eb9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00182e3:	83 c4 10             	add    esp,0x10
c00182e6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00182e9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00182ed:	74 03                	je     c00182f2 <Vm::faultHandler(regs*)+0x3f9>
c00182ef:	48                   	dec    eax
c00182f0:	eb 01                	jmp    c00182f3 <Vm::faultHandler(regs*)+0x3fa>
c00182f2:	40                   	inc    eax
c00182f3:	0f b7 c0             	movzx  eax,ax
c00182f6:	e9 8b 00 00 00       	jmp    c0018386 <Vm::faultHandler(regs*)+0x48d>
c00182fb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00182fe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018301:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0018306:	74 29                	je     c0018331 <Vm::faultHandler(regs*)+0x438>
c0018308:	3d ff ff 00 00       	cmp    eax,0xffff
c001830d:	76 22                	jbe    c0018331 <Vm::faultHandler(regs*)+0x438>
c001830f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018313:	50                   	push   eax
c0018314:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018318:	50                   	push   eax
c0018319:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001831d:	50                   	push   eax
c001831e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018322:	50                   	push   eax
c0018323:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018327:	50                   	push   eax
c0018328:	6a 6d                	push   0x6d
c001832a:	6a 6d                	push   0x6d
c001832c:	e9 4d 01 00 00       	jmp    c001847e <Vm::faultHandler(regs*)+0x585>
c0018331:	0f b7 c8             	movzx  ecx,ax
c0018334:	0f b7 f6             	movzx  esi,si
c0018337:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001833a:	83 e5 01             	and    ebp,0x1
c001833d:	74 20                	je     c001835f <Vm::faultHandler(regs*)+0x466>
c001833f:	ed                   	in     eax,dx
c0018340:	55                   	push   ebp
c0018341:	50                   	push   eax
c0018342:	51                   	push   ecx
c0018343:	56                   	push   esi
c0018344:	e8 9b fb ff ff       	call   c0017ee4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018349:	83 c4 10             	add    esp,0x10
c001834c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001834f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018353:	74 05                	je     c001835a <Vm::faultHandler(regs*)+0x461>
c0018355:	83 e8 04             	sub    eax,0x4
c0018358:	eb 27                	jmp    c0018381 <Vm::faultHandler(regs*)+0x488>
c001835a:	83 c0 04             	add    eax,0x4
c001835d:	eb 22                	jmp    c0018381 <Vm::faultHandler(regs*)+0x488>
c001835f:	66 ed                	in     ax,dx
c0018361:	0f b7 c0             	movzx  eax,ax
c0018364:	57                   	push   edi
c0018365:	50                   	push   eax
c0018366:	51                   	push   ecx
c0018367:	56                   	push   esi
c0018368:	e8 61 fb ff ff       	call   c0017ece <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001836d:	83 c4 10             	add    esp,0x10
c0018370:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018373:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018377:	74 05                	je     c001837e <Vm::faultHandler(regs*)+0x485>
c0018379:	83 e8 02             	sub    eax,0x2
c001837c:	eb 03                	jmp    c0018381 <Vm::faultHandler(regs*)+0x488>
c001837e:	83 c0 02             	add    eax,0x2
c0018381:	25 ff ff 00 00       	and    eax,0xffff
c0018386:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018389:	e9 20 02 00 00       	jmp    c00185ae <Vm::faultHandler(regs*)+0x6b5>
c001838e:	8d 46 ff             	lea    eax,[esi-0x1]
c0018391:	0f b6 f0             	movzx  esi,al
c0018394:	83 fe 05             	cmp    esi,0x5
c0018397:	77 23                	ja     c00183bc <Vm::faultHandler(regs*)+0x4c3>
c0018399:	ff 24 b5 24 51 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdaedc]
c00183a0:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00183a5:	eb 15                	jmp    c00183bc <Vm::faultHandler(regs*)+0x4c3>
c00183a7:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00183ab:	eb 0f                	jmp    c00183bc <Vm::faultHandler(regs*)+0x4c3>
c00183ad:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00183b1:	eb 09                	jmp    c00183bc <Vm::faultHandler(regs*)+0x4c3>
c00183b3:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00183b7:	eb 03                	jmp    c00183bc <Vm::faultHandler(regs*)+0x4c3>
c00183b9:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00183bc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00183bf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00183c4:	74 29                	je     c00183ef <Vm::faultHandler(regs*)+0x4f6>
c00183c6:	3d ff ff 00 00       	cmp    eax,0xffff
c00183cb:	76 22                	jbe    c00183ef <Vm::faultHandler(regs*)+0x4f6>
c00183cd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00183d1:	50                   	push   eax
c00183d2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00183d6:	50                   	push   eax
c00183d7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00183db:	50                   	push   eax
c00183dc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00183e0:	50                   	push   eax
c00183e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00183e5:	50                   	push   eax
c00183e6:	6a 6e                	push   0x6e
c00183e8:	6a 6e                	push   0x6e
c00183ea:	e9 8f 00 00 00       	jmp    c001847e <Vm::faultHandler(regs*)+0x585>
c00183ef:	0f b7 c0             	movzx  eax,ax
c00183f2:	52                   	push   edx
c00183f3:	52                   	push   edx
c00183f4:	50                   	push   eax
c00183f5:	57                   	push   edi
c00183f6:	e8 8a fa ff ff       	call   c0017e85 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00183fb:	59                   	pop    ecx
c00183fc:	0f b6 c0             	movzx  eax,al
c00183ff:	5e                   	pop    esi
c0018400:	50                   	push   eax
c0018401:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018405:	50                   	push   eax
c0018406:	e8 15 f5 ff ff       	call   c0017920 <Vm::outbv(unsigned short, unsigned char)>
c001840b:	83 c4 10             	add    esp,0x10
c001840e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018411:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018415:	74 03                	je     c001841a <Vm::faultHandler(regs*)+0x521>
c0018417:	48                   	dec    eax
c0018418:	eb 01                	jmp    c001841b <Vm::faultHandler(regs*)+0x522>
c001841a:	40                   	inc    eax
c001841b:	0f b7 c0             	movzx  eax,ax
c001841e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018421:	e9 88 01 00 00       	jmp    c00185ae <Vm::faultHandler(regs*)+0x6b5>
c0018426:	8d 46 ff             	lea    eax,[esi-0x1]
c0018429:	0f b6 f0             	movzx  esi,al
c001842c:	83 fe 05             	cmp    esi,0x5
c001842f:	77 1e                	ja     c001844f <Vm::faultHandler(regs*)+0x556>
c0018431:	ff 24 b5 3c 51 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdaec4]
c0018438:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001843c:	eb 11                	jmp    c001844f <Vm::faultHandler(regs*)+0x556>
c001843e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0018441:	eb 0c                	jmp    c001844f <Vm::faultHandler(regs*)+0x556>
c0018443:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0018446:	eb 07                	jmp    c001844f <Vm::faultHandler(regs*)+0x556>
c0018448:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001844b:	eb 02                	jmp    c001844f <Vm::faultHandler(regs*)+0x556>
c001844d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001844f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018452:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0018457:	74 37                	je     c0018490 <Vm::faultHandler(regs*)+0x597>
c0018459:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001845f:	76 2f                	jbe    c0018490 <Vm::faultHandler(regs*)+0x597>
c0018461:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018465:	50                   	push   eax
c0018466:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001846a:	50                   	push   eax
c001846b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001846f:	50                   	push   eax
c0018470:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018474:	50                   	push   eax
c0018475:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018479:	50                   	push   eax
c001847a:	6a 6f                	push   0x6f
c001847c:	6a 6f                	push   0x6f
c001847e:	68 c7 50 02 c0       	push   0xc00250c7
c0018483:	e8 dc ea fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018488:	83 c4 20             	add    esp,0x20
c001848b:	e9 83 01 00 00       	jmp    c0018613 <Vm::faultHandler(regs*)+0x71a>
c0018490:	0f b7 d7             	movzx  edx,di
c0018493:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018496:	0f b7 c6             	movzx  eax,si
c0018499:	81 e1 00 04 00 00    	and    ecx,0x400
c001849f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00184a2:	83 e5 01             	and    ebp,0x1
c00184a5:	74 1d                	je     c00184c4 <Vm::faultHandler(regs*)+0x5cb>
c00184a7:	55                   	push   ebp
c00184a8:	55                   	push   ebp
c00184a9:	50                   	push   eax
c00184aa:	52                   	push   edx
c00184ab:	e8 f8 f9 ff ff       	call   c0017ea8 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00184b0:	83 c4 10             	add    esp,0x10
c00184b3:	89 fa                	mov    edx,edi
c00184b5:	ef                   	out    dx,eax
c00184b6:	85 c9                	test   ecx,ecx
c00184b8:	74 05                	je     c00184bf <Vm::faultHandler(regs*)+0x5c6>
c00184ba:	83 ee 04             	sub    esi,0x4
c00184bd:	eb 21                	jmp    c00184e0 <Vm::faultHandler(regs*)+0x5e7>
c00184bf:	83 c6 04             	add    esi,0x4
c00184c2:	eb 1c                	jmp    c00184e0 <Vm::faultHandler(regs*)+0x5e7>
c00184c4:	55                   	push   ebp
c00184c5:	55                   	push   ebp
c00184c6:	50                   	push   eax
c00184c7:	52                   	push   edx
c00184c8:	e8 c9 f9 ff ff       	call   c0017e96 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00184cd:	83 c4 10             	add    esp,0x10
c00184d0:	89 fa                	mov    edx,edi
c00184d2:	66 ef                	out    dx,ax
c00184d4:	85 c9                	test   ecx,ecx
c00184d6:	74 05                	je     c00184dd <Vm::faultHandler(regs*)+0x5e4>
c00184d8:	83 ee 02             	sub    esi,0x2
c00184db:	eb 03                	jmp    c00184e0 <Vm::faultHandler(regs*)+0x5e7>
c00184dd:	83 c6 02             	add    esi,0x2
c00184e0:	81 e6 ff ff 00 00    	and    esi,0xffff
c00184e6:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00184e9:	e9 c0 00 00 00       	jmp    c00185ae <Vm::faultHandler(regs*)+0x6b5>
c00184ee:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00184f5:	83 ec 0c             	sub    esp,0xc
c00184f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00184fc:	50                   	push   eax
c00184fd:	e8 0b f4 ff ff       	call   c001790d <Vm::inbv(unsigned short)>
c0018502:	0f b6 c0             	movzx  eax,al
c0018505:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018508:	eb 3a                	jmp    c0018544 <Vm::faultHandler(regs*)+0x64b>
c001850a:	83 e5 01             	and    ebp,0x1
c001850d:	74 07                	je     c0018516 <Vm::faultHandler(regs*)+0x61d>
c001850f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018513:	ed                   	in     eax,dx
c0018514:	eb 14                	jmp    c001852a <Vm::faultHandler(regs*)+0x631>
c0018516:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018519:	66 31 f6             	xor    si,si
c001851c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001851f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018523:	66 ed                	in     ax,dx
c0018525:	0f b7 c0             	movzx  eax,ax
c0018528:	09 f0                	or     eax,esi
c001852a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001852d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018531:	eb 7e                	jmp    c00185b1 <Vm::faultHandler(regs*)+0x6b8>
c0018533:	52                   	push   edx
c0018534:	52                   	push   edx
c0018535:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018539:	50                   	push   eax
c001853a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001853e:	50                   	push   eax
c001853f:	e8 dc f3 ff ff       	call   c0017920 <Vm::outbv(unsigned short, unsigned char)>
c0018544:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018548:	eb 4f                	jmp    c0018599 <Vm::faultHandler(regs*)+0x6a0>
c001854a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001854d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018551:	83 e5 01             	and    ebp,0x1
c0018554:	74 03                	je     c0018559 <Vm::faultHandler(regs*)+0x660>
c0018556:	ef                   	out    dx,eax
c0018557:	eb d4                	jmp    c001852d <Vm::faultHandler(regs*)+0x634>
c0018559:	66 ef                	out    dx,ax
c001855b:	eb d0                	jmp    c001852d <Vm::faultHandler(regs*)+0x634>
c001855d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018564:	83 ec 0c             	sub    esp,0xc
c0018567:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001856b:	50                   	push   eax
c001856c:	e8 9c f3 ff ff       	call   c001790d <Vm::inbv(unsigned short)>
c0018571:	0f b6 c0             	movzx  eax,al
c0018574:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018577:	eb 1d                	jmp    c0018596 <Vm::faultHandler(regs*)+0x69d>
c0018579:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001857c:	83 e5 01             	and    ebp,0x1
c001857f:	74 03                	je     c0018584 <Vm::faultHandler(regs*)+0x68b>
c0018581:	ed                   	in     eax,dx
c0018582:	eb 0d                	jmp    c0018591 <Vm::faultHandler(regs*)+0x698>
c0018584:	66 ed                	in     ax,dx
c0018586:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018589:	0f b7 c0             	movzx  eax,ax
c001858c:	66 31 d2             	xor    dx,dx
c001858f:	09 d0                	or     eax,edx
c0018591:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018594:	eb 18                	jmp    c00185ae <Vm::faultHandler(regs*)+0x6b5>
c0018596:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018599:	83 c4 10             	add    esp,0x10
c001859c:	eb 13                	jmp    c00185b1 <Vm::faultHandler(regs*)+0x6b8>
c001859e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00185a1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00185a4:	83 e5 01             	and    ebp,0x1
c00185a7:	74 03                	je     c00185ac <Vm::faultHandler(regs*)+0x6b3>
c00185a9:	ef                   	out    dx,eax
c00185aa:	eb 02                	jmp    c00185ae <Vm::faultHandler(regs*)+0x6b5>
c00185ac:	66 ef                	out    dx,ax
c00185ae:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00185b1:	b0 01                	mov    al,0x1
c00185b3:	eb 60                	jmp    c0018615 <Vm::faultHandler(regs*)+0x71c>
c00185b5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00185b9:	50                   	push   eax
c00185ba:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00185be:	50                   	push   eax
c00185bf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00185c3:	50                   	push   eax
c00185c4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00185c8:	50                   	push   eax
c00185c9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00185cd:	50                   	push   eax
c00185ce:	52                   	push   edx
c00185cf:	52                   	push   edx
c00185d0:	68 f4 50 02 c0       	push   0xc00250f4
c00185d5:	e8 8a e9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00185da:	83 c4 20             	add    esp,0x20
c00185dd:	83 ec 0c             	sub    esp,0xc
c00185e0:	6a 60                	push   0x60
c00185e2:	e8 26 f3 ff ff       	call   c001790d <Vm::inbv(unsigned short)>
c00185e7:	83 c4 10             	add    esp,0x10
c00185ea:	0f b6 d0             	movzx  edx,al
c00185ed:	83 fa 1c             	cmp    edx,0x1c
c00185f0:	74 05                	je     c00185f7 <Vm::faultHandler(regs*)+0x6fe>
c00185f2:	83 fa 5a             	cmp    edx,0x5a
c00185f5:	75 e6                	jne    c00185dd <Vm::faultHandler(regs*)+0x6e4>
c00185f7:	0f b6 c0             	movzx  eax,al
c00185fa:	83 f8 1c             	cmp    eax,0x1c
c00185fd:	74 05                	je     c0018604 <Vm::faultHandler(regs*)+0x70b>
c00185ff:	83 f8 5a             	cmp    eax,0x5a
c0018602:	75 0f                	jne    c0018613 <Vm::faultHandler(regs*)+0x71a>
c0018604:	83 ec 0c             	sub    esp,0xc
c0018607:	6a 60                	push   0x60
c0018609:	e8 ff f2 ff ff       	call   c001790d <Vm::inbv(unsigned short)>
c001860e:	83 c4 10             	add    esp,0x10
c0018611:	eb e4                	jmp    c00185f7 <Vm::faultHandler(regs*)+0x6fe>
c0018613:	31 c0                	xor    eax,eax
c0018615:	83 c4 2c             	add    esp,0x2c
c0018618:	5b                   	pop    ebx
c0018619:	5e                   	pop    esi
c001861a:	5f                   	pop    edi
c001861b:	5d                   	pop    ebp
c001861c:	c3                   	ret    
c001861d:	90                   	nop

c001861e <noCopro(unsigned long)>:
c001861e:	c3                   	ret    
c001861f:	90                   	nop

c0018620 <CPU::close(int, int, void*)>:
c0018620:	31 c0                	xor    eax,eax
c0018622:	c3                   	ret    

c0018623 <x86ReadCMOS(unsigned char)>:
c0018623:	83 ec 14             	sub    esp,0x14
c0018626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001862a:	88 04 24             	mov    BYTE PTR [esp],al
c001862d:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c0018632:	0f b6 c0             	movzx  eax,al
c0018635:	85 c0                	test   eax,eax
c0018637:	74 04                	je     c001863d <x86ReadCMOS(unsigned char)+0x1a>
c0018639:	b2 00                	mov    dl,0x0
c001863b:	eb 02                	jmp    c001863f <x86ReadCMOS(unsigned char)+0x1c>
c001863d:	b2 80                	mov    dl,0x80
c001863f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018642:	09 d0                	or     eax,edx
c0018644:	0f b6 c0             	movzx  eax,al
c0018647:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c001864e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018652:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018656:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001865b:	ee                   	out    dx,al
c001865c:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018663:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018668:	89 c2                	mov    edx,eax
c001866a:	ec                   	in     al,dx
c001866b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001866f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018673:	83 c4 14             	add    esp,0x14
c0018676:	c3                   	ret    

c0018677 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018677:	83 ec 18             	sub    esp,0x18
c001867a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001867e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018682:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0018686:	88 04 24             	mov    BYTE PTR [esp],al
c0018689:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c001868e:	0f b6 c0             	movzx  eax,al
c0018691:	85 c0                	test   eax,eax
c0018693:	74 04                	je     c0018699 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0018695:	b2 00                	mov    dl,0x0
c0018697:	eb 02                	jmp    c001869b <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018699:	b2 80                	mov    dl,0x80
c001869b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001869f:	09 d0                	or     eax,edx
c00186a1:	0f b6 c0             	movzx  eax,al
c00186a4:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c00186ab:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00186af:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00186b3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00186b8:	ee                   	out    dx,al
c00186b9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00186bd:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c00186c4:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00186c8:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00186cc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00186d1:	ee                   	out    dx,al
c00186d2:	90                   	nop
c00186d3:	83 c4 18             	add    esp,0x18
c00186d6:	c3                   	ret    

c00186d7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00186d7:	60                   	pusha  
c00186d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186e0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186e4:	9c                   	pushf  
c00186e5:	fa                   	cli    
c00186e6:	0f 09                	wbinvd 
c00186e8:	0f 30                	wrmsr  
c00186ea:	9d                   	popf   
c00186eb:	89 c2                	mov    edx,eax
c00186ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186f1:	89 10                	mov    DWORD PTR [eax],edx
c00186f3:	61                   	popa   
c00186f4:	90                   	nop
c00186f5:	c3                   	ret    

c00186f6 <AMD_K6_read_msr(unsigned int, REGS*)>:
c00186f6:	60                   	pusha  
c00186f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186fb:	89 c1                	mov    ecx,eax
c00186fd:	9c                   	pushf  
c00186fe:	fa                   	cli    
c00186ff:	0f 09                	wbinvd 
c0018701:	31 c0                	xor    eax,eax
c0018703:	31 d2                	xor    edx,edx
c0018705:	0f 32                	rdmsr  
c0018707:	9d                   	popf   
c0018708:	89 c2                	mov    edx,eax
c001870a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001870e:	89 10                	mov    DWORD PTR [eax],edx
c0018710:	61                   	popa   
c0018711:	90                   	nop
c0018712:	c3                   	ret    

c0018713 <AMD_K6_writeback(int, int, int)>:
c0018713:	83 ec 20             	sub    esp,0x20
c0018716:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001871b:	c1 e8 14             	shr    eax,0x14
c001871e:	c1 e8 02             	shr    eax,0x2
c0018721:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018725:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c001872a:	0f 85 9e 00 00 00    	jne    c00187ce <AMD_K6_writeback(int, int, int)+0xbb>
c0018730:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018734:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018738:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c001873d:	75 19                	jne    c0018758 <AMD_K6_writeback(int, int, int)+0x45>
c001873f:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018744:	7f 0a                	jg     c0018750 <AMD_K6_writeback(int, int, int)+0x3d>
c0018746:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c001874e:	eb 08                	jmp    c0018758 <AMD_K6_writeback(int, int, int)+0x45>
c0018750:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018758:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c001875d:	7c 6e                	jl     c00187cd <AMD_K6_writeback(int, int, int)+0xba>
c001875f:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018764:	7e 09                	jle    c001876f <AMD_K6_writeback(int, int, int)+0x5c>
c0018766:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c001876b:	74 36                	je     c00187a3 <AMD_K6_writeback(int, int, int)+0x90>
c001876d:	eb 5e                	jmp    c00187cd <AMD_K6_writeback(int, int, int)+0xba>
c001876f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018773:	50                   	push   eax
c0018774:	68 82 00 00 c0       	push   0xc0000082
c0018779:	e8 78 ff ff ff       	call   c00186f6 <AMD_K6_read_msr(unsigned int, REGS*)>
c001877e:	83 c4 08             	add    esp,0x8
c0018781:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018785:	01 c0                	add    eax,eax
c0018787:	83 e0 7f             	and    eax,0x7f
c001878a:	89 c2                	mov    edx,eax
c001878c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018790:	50                   	push   eax
c0018791:	6a 00                	push   0x0
c0018793:	52                   	push   edx
c0018794:	68 82 00 00 c0       	push   0xc0000082
c0018799:	e8 39 ff ff ff       	call   c00186d7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001879e:	83 c4 10             	add    esp,0x10
c00187a1:	eb 2b                	jmp    c00187ce <AMD_K6_writeback(int, int, int)+0xbb>
c00187a3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187a7:	50                   	push   eax
c00187a8:	68 82 00 00 c0       	push   0xc0000082
c00187ad:	e8 44 ff ff ff       	call   c00186f6 <AMD_K6_read_msr(unsigned int, REGS*)>
c00187b2:	83 c4 08             	add    esp,0x8
c00187b5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187b9:	50                   	push   eax
c00187ba:	6a 00                	push   0x0
c00187bc:	6a 00                	push   0x0
c00187be:	68 82 00 00 c0       	push   0xc0000082
c00187c3:	e8 0f ff ff ff       	call   c00186d7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00187c8:	83 c4 10             	add    esp,0x10
c00187cb:	eb 01                	jmp    c00187ce <AMD_K6_writeback(int, int, int)+0xbb>
c00187cd:	90                   	nop
c00187ce:	90                   	nop
c00187cf:	83 c4 20             	add    esp,0x20
c00187d2:	c3                   	ret    

c00187d3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187d3:	56                   	push   esi
c00187d4:	53                   	push   ebx
c00187d5:	a1 80 6a 02 c0       	mov    eax,ds:0xc0026a80
c00187da:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00187de:	75 32                	jne    c0018812 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00187e0:	8b 15 e0 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae0
c00187e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ea:	89 10                	mov    DWORD PTR [eax],edx
c00187ec:	8b 15 dc ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eadc
c00187f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187f6:	89 10                	mov    DWORD PTR [eax],edx
c00187f8:	8b 15 d8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead8
c00187fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018802:	89 10                	mov    DWORD PTR [eax],edx
c0018804:	8b 15 d4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead4
c001880a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001880e:	89 10                	mov    DWORD PTR [eax],edx
c0018810:	eb 5c                	jmp    c001886e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018812:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018816:	ba 00 00 00 00       	mov    edx,0x0
c001881b:	89 d1                	mov    ecx,edx
c001881d:	0f a2                	cpuid  
c001881f:	89 c6                	mov    esi,eax
c0018821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018825:	89 30                	mov    DWORD PTR [eax],esi
c0018827:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001882b:	89 18                	mov    DWORD PTR [eax],ebx
c001882d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018831:	89 08                	mov    DWORD PTR [eax],ecx
c0018833:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018837:	89 10                	mov    DWORD PTR [eax],edx
c0018839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001883d:	a3 80 6a 02 c0       	mov    ds:0xc0026a80,eax
c0018842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018846:	8b 00                	mov    eax,DWORD PTR [eax]
c0018848:	a3 e0 ea 02 c0       	mov    ds:0xc002eae0,eax
c001884d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018851:	8b 00                	mov    eax,DWORD PTR [eax]
c0018853:	a3 dc ea 02 c0       	mov    ds:0xc002eadc,eax
c0018858:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001885c:	8b 00                	mov    eax,DWORD PTR [eax]
c001885e:	a3 d8 ea 02 c0       	mov    ds:0xc002ead8,eax
c0018863:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018867:	8b 00                	mov    eax,DWORD PTR [eax]
c0018869:	a3 d4 ea 02 c0       	mov    ds:0xc002ead4,eax
c001886e:	5b                   	pop    ebx
c001886f:	5e                   	pop    esi
c0018870:	c3                   	ret    

c0018871 <cpuidCheckEDX(unsigned int)>:
c0018871:	83 ec 10             	sub    esp,0x10
c0018874:	89 e0                	mov    eax,esp
c0018876:	50                   	push   eax
c0018877:	8d 44 24 08          	lea    eax,[esp+0x8]
c001887b:	50                   	push   eax
c001887c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018880:	50                   	push   eax
c0018881:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018885:	50                   	push   eax
c0018886:	6a 01                	push   0x1
c0018888:	e8 46 ff ff ff       	call   c00187d3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001888d:	83 c4 14             	add    esp,0x14
c0018890:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018893:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018897:	0f 95 c0             	setne  al
c001889a:	83 c4 10             	add    esp,0x10
c001889d:	c3                   	ret    

c001889e <cpuidCheckECX(unsigned int)>:
c001889e:	83 ec 10             	sub    esp,0x10
c00188a1:	89 e0                	mov    eax,esp
c00188a3:	50                   	push   eax
c00188a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00188a8:	50                   	push   eax
c00188a9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00188ad:	50                   	push   eax
c00188ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c00188b2:	50                   	push   eax
c00188b3:	6a 01                	push   0x1
c00188b5:	e8 19 ff ff ff       	call   c00187d3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188ba:	83 c4 14             	add    esp,0x14
c00188bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188c1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00188c5:	0f 95 c0             	setne  al
c00188c8:	83 c4 10             	add    esp,0x10
c00188cb:	c3                   	ret    

c00188cc <cpuidCheckExtendedEBX(unsigned int)>:
c00188cc:	83 ec 10             	sub    esp,0x10
c00188cf:	89 e0                	mov    eax,esp
c00188d1:	50                   	push   eax
c00188d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00188d6:	50                   	push   eax
c00188d7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00188db:	50                   	push   eax
c00188dc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00188e0:	50                   	push   eax
c00188e1:	6a 07                	push   0x7
c00188e3:	e8 eb fe ff ff       	call   c00187d3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188e8:	83 c4 14             	add    esp,0x14
c00188eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188ef:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00188f3:	0f 95 c0             	setne  al
c00188f6:	83 c4 10             	add    esp,0x10
c00188f9:	c3                   	ret    

c00188fa <cpuidCheckExtendedECX(unsigned int)>:
c00188fa:	83 ec 10             	sub    esp,0x10
c00188fd:	89 e0                	mov    eax,esp
c00188ff:	50                   	push   eax
c0018900:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018904:	50                   	push   eax
c0018905:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018909:	50                   	push   eax
c001890a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001890e:	50                   	push   eax
c001890f:	6a 07                	push   0x7
c0018911:	e8 bd fe ff ff       	call   c00187d3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018916:	83 c4 14             	add    esp,0x14
c0018919:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001891d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018921:	0f 95 c0             	setne  al
c0018924:	83 c4 10             	add    esp,0x10
c0018927:	c3                   	ret    

c0018928 <HalDetectFeatures()>:
c0018928:	57                   	push   edi
c0018929:	56                   	push   esi
c001892a:	53                   	push   ebx
c001892b:	81 ec 90 00 00 00    	sub    esp,0x90
c0018931:	83 ec 04             	sub    esp,0x4
c0018934:	6a 08                	push   0x8
c0018936:	6a 00                	push   0x0
c0018938:	68 0c eb 02 c0       	push   0xc002eb0c
c001893d:	e8 ae 7b fe ff       	call   c00004f0 <memset>
c0018942:	83 c4 10             	add    esp,0x10
c0018945:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001894a:	83 c8 04             	or     eax,0x4
c001894d:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018952:	e8 a2 78 fe ff       	call   c00001f9 <detectCPUID>
c0018957:	85 c0                	test   eax,eax
c0018959:	0f 95 c0             	setne  al
c001895c:	83 e0 01             	and    eax,0x1
c001895f:	83 e0 01             	and    eax,0x1
c0018962:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018965:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001896a:	83 e0 fd             	and    eax,0xfffffffd
c001896d:	88 c2                	mov    dl,al
c001896f:	88 c8                	mov    al,cl
c0018971:	09 d0                	or     eax,edx
c0018973:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018978:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001897d:	83 e0 02             	and    eax,0x2
c0018980:	0f b6 c0             	movzx  eax,al
c0018983:	85 c0                	test   eax,eax
c0018985:	0f 84 7f 02 00 00    	je     c0018c0a <HalDetectFeatures()+0x2e2>
c001898b:	83 ec 0c             	sub    esp,0xc
c001898e:	6a 20                	push   0x20
c0018990:	e8 dc fe ff ff       	call   c0018871 <cpuidCheckEDX(unsigned int)>
c0018995:	83 c4 10             	add    esp,0x10
c0018998:	83 e0 01             	and    eax,0x1
c001899b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00189a2:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00189a7:	83 e0 f7             	and    eax,0xfffffff7
c00189aa:	88 c2                	mov    dl,al
c00189ac:	88 c8                	mov    al,cl
c00189ae:	09 d0                	or     eax,edx
c00189b0:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00189b5:	83 ec 0c             	sub    esp,0xc
c00189b8:	68 00 00 00 04       	push   0x4000000
c00189bd:	e8 af fe ff ff       	call   c0018871 <cpuidCheckEDX(unsigned int)>
c00189c2:	83 c4 10             	add    esp,0x10
c00189c5:	89 c1                	mov    ecx,eax
c00189c7:	83 e1 01             	and    ecx,0x1
c00189ca:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00189cf:	83 e0 fe             	and    eax,0xfffffffe
c00189d2:	88 c2                	mov    dl,al
c00189d4:	88 c8                	mov    al,cl
c00189d6:	09 d0                	or     eax,edx
c00189d8:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00189dd:	83 ec 0c             	sub    esp,0xc
c00189e0:	68 80 00 00 00       	push   0x80
c00189e5:	e8 87 fe ff ff       	call   c0018871 <cpuidCheckEDX(unsigned int)>
c00189ea:	83 c4 10             	add    esp,0x10
c00189ed:	89 c1                	mov    ecx,eax
c00189ef:	c1 e1 07             	shl    ecx,0x7
c00189f2:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00189f7:	83 e0 7f             	and    eax,0x7f
c00189fa:	88 c2                	mov    dl,al
c00189fc:	88 c8                	mov    al,cl
c00189fe:	09 d0                	or     eax,edx
c0018a00:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018a05:	83 ec 0c             	sub    esp,0xc
c0018a08:	68 00 00 80 00       	push   0x800000
c0018a0d:	e8 5f fe ff ff       	call   c0018871 <cpuidCheckEDX(unsigned int)>
c0018a12:	83 c4 10             	add    esp,0x10
c0018a15:	83 e0 01             	and    eax,0x1
c0018a18:	89 c1                	mov    ecx,eax
c0018a1a:	c1 e1 05             	shl    ecx,0x5
c0018a1d:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a22:	83 e0 df             	and    eax,0xffffffdf
c0018a25:	88 c2                	mov    dl,al
c0018a27:	88 c8                	mov    al,cl
c0018a29:	09 d0                	or     eax,edx
c0018a2b:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018a30:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018a35:	83 e0 01             	and    eax,0x1
c0018a38:	75 0c                	jne    c0018a46 <HalDetectFeatures()+0x11e>
c0018a3a:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018a3f:	25 00 04 00 00       	and    eax,0x400
c0018a44:	74 0f                	je     c0018a55 <HalDetectFeatures()+0x12d>
c0018a46:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a4b:	83 e0 fe             	and    eax,0xfffffffe
c0018a4e:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018a53:	eb 28                	jmp    c0018a7d <HalDetectFeatures()+0x155>
c0018a55:	83 ec 0c             	sub    esp,0xc
c0018a58:	68 00 02 00 00       	push   0x200
c0018a5d:	e8 0f fe ff ff       	call   c0018871 <cpuidCheckEDX(unsigned int)>
c0018a62:	83 c4 10             	add    esp,0x10
c0018a65:	89 c1                	mov    ecx,eax
c0018a67:	83 e1 01             	and    ecx,0x1
c0018a6a:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a6f:	83 e0 fe             	and    eax,0xfffffffe
c0018a72:	88 c2                	mov    dl,al
c0018a74:	88 c8                	mov    al,cl
c0018a76:	09 d0                	or     eax,edx
c0018a78:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018a7d:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a82:	83 e0 01             	and    eax,0x1
c0018a85:	0f b6 c0             	movzx  eax,al
c0018a88:	85 c0                	test   eax,eax
c0018a8a:	74 1c                	je     c0018aa8 <HalDetectFeatures()+0x180>
c0018a8c:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a91:	83 e0 08             	and    eax,0x8
c0018a94:	0f b6 c0             	movzx  eax,al
c0018a97:	85 c0                	test   eax,eax
c0018a99:	75 0d                	jne    c0018aa8 <HalDetectFeatures()+0x180>
c0018a9b:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018aa0:	83 e0 fe             	and    eax,0xfffffffe
c0018aa3:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018aa8:	83 ec 0c             	sub    esp,0xc
c0018aab:	68 54 51 02 c0       	push   0xc0025154
c0018ab0:	e8 af e4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018ab5:	83 c4 10             	add    esp,0x10
c0018ab8:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018abd:	83 e0 fe             	and    eax,0xfffffffe
c0018ac0:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018ac5:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0018acd:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0018ad5:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0018add:	85 c0                	test   eax,eax
c0018adf:	0f 84 ab 00 00 00    	je     c0018b90 <HalDetectFeatures()+0x268>
c0018ae5:	83 ec 0c             	sub    esp,0xc
c0018ae8:	6a 01                	push   0x1
c0018aea:	e8 af fd ff ff       	call   c001889e <cpuidCheckECX(unsigned int)>
c0018aef:	83 c4 10             	add    esp,0x10
c0018af2:	83 e0 01             	and    eax,0x1
c0018af5:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018af8:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018afd:	83 e0 fd             	and    eax,0xfffffffd
c0018b00:	88 c2                	mov    dl,al
c0018b02:	88 c8                	mov    al,cl
c0018b04:	09 d0                	or     eax,edx
c0018b06:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018b0b:	83 ec 0c             	sub    esp,0xc
c0018b0e:	68 00 02 00 00       	push   0x200
c0018b13:	e8 86 fd ff ff       	call   c001889e <cpuidCheckECX(unsigned int)>
c0018b18:	83 c4 10             	add    esp,0x10
c0018b1b:	83 e0 01             	and    eax,0x1
c0018b1e:	89 c1                	mov    ecx,eax
c0018b20:	c1 e1 04             	shl    ecx,0x4
c0018b23:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018b28:	83 e0 ef             	and    eax,0xffffffef
c0018b2b:	88 c2                	mov    dl,al
c0018b2d:	88 c8                	mov    al,cl
c0018b2f:	09 d0                	or     eax,edx
c0018b31:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018b36:	83 ec 0c             	sub    esp,0xc
c0018b39:	68 00 00 08 00       	push   0x80000
c0018b3e:	e8 5b fd ff ff       	call   c001889e <cpuidCheckECX(unsigned int)>
c0018b43:	83 c4 10             	add    esp,0x10
c0018b46:	83 e0 01             	and    eax,0x1
c0018b49:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018b50:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018b55:	83 e0 fb             	and    eax,0xfffffffb
c0018b58:	88 c2                	mov    dl,al
c0018b5a:	88 c8                	mov    al,cl
c0018b5c:	09 d0                	or     eax,edx
c0018b5e:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018b63:	83 ec 0c             	sub    esp,0xc
c0018b66:	68 00 00 10 00       	push   0x100000
c0018b6b:	e8 2e fd ff ff       	call   c001889e <cpuidCheckECX(unsigned int)>
c0018b70:	83 c4 10             	add    esp,0x10
c0018b73:	83 e0 01             	and    eax,0x1
c0018b76:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018b7d:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018b82:	83 e0 f7             	and    eax,0xfffffff7
c0018b85:	88 c2                	mov    dl,al
c0018b87:	88 c8                	mov    al,cl
c0018b89:	09 d0                	or     eax,edx
c0018b8b:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018b90:	83 ec 0c             	sub    esp,0xc
c0018b93:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018b97:	50                   	push   eax
c0018b98:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018b9c:	50                   	push   eax
c0018b9d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018ba1:	50                   	push   eax
c0018ba2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018ba6:	50                   	push   eax
c0018ba7:	68 00 00 00 80       	push   0x80000000
c0018bac:	e8 22 fc ff ff       	call   c00187d3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bb1:	83 c4 20             	add    esp,0x20
c0018bb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018bb8:	3d 00 00 00 80       	cmp    eax,0x80000000
c0018bbd:	76 4b                	jbe    c0018c0a <HalDetectFeatures()+0x2e2>
c0018bbf:	83 ec 0c             	sub    esp,0xc
c0018bc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018bc6:	50                   	push   eax
c0018bc7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018bcb:	50                   	push   eax
c0018bcc:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018bd0:	50                   	push   eax
c0018bd1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018bd5:	50                   	push   eax
c0018bd6:	68 01 00 00 80       	push   0x80000001
c0018bdb:	e8 f3 fb ff ff       	call   c00187d3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018be0:	83 c4 20             	add    esp,0x20
c0018be3:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018be8:	83 e0 bf             	and    eax,0xffffffbf
c0018beb:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018bf0:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018bf5:	83 e0 fd             	and    eax,0xfffffffd
c0018bf8:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018bfd:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018c02:	83 e0 fe             	and    eax,0xfffffffe
c0018c05:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018c0a:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018c0f:	25 00 04 00 00       	and    eax,0x400
c0018c14:	74 0d                	je     c0018c23 <HalDetectFeatures()+0x2fb>
c0018c16:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018c1b:	83 e0 fb             	and    eax,0xfffffffb
c0018c1e:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018c23:	c6 05 08 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb08,0x1
c0018c2a:	83 ec 04             	sub    esp,0x4
c0018c2d:	6a 0d                	push   0xd
c0018c2f:	6a 00                	push   0x0
c0018c31:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018c36:	e8 b5 78 fe ff       	call   c00004f0 <memset>
c0018c3b:	83 c4 10             	add    esp,0x10
c0018c3e:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018c43:	83 e0 02             	and    eax,0x2
c0018c46:	0f b6 c0             	movzx  eax,al
c0018c49:	85 c0                	test   eax,eax
c0018c4b:	0f 84 16 08 00 00    	je     c0019467 <HalDetectFeatures()+0xb3f>
c0018c51:	83 ec 0c             	sub    esp,0xc
c0018c54:	6a 10                	push   0x10
c0018c56:	e8 16 fc ff ff       	call   c0018871 <cpuidCheckEDX(unsigned int)>
c0018c5b:	83 c4 10             	add    esp,0x10
c0018c5e:	83 e0 01             	and    eax,0x1
c0018c61:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018c68:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018c6d:	83 e0 f7             	and    eax,0xfffffff7
c0018c70:	88 c2                	mov    dl,al
c0018c72:	88 c8                	mov    al,cl
c0018c74:	09 d0                	or     eax,edx
c0018c76:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018c7b:	83 ec 0c             	sub    esp,0xc
c0018c7e:	6a 40                	push   0x40
c0018c80:	e8 ec fb ff ff       	call   c0018871 <cpuidCheckEDX(unsigned int)>
c0018c85:	83 c4 10             	add    esp,0x10
c0018c88:	83 e0 01             	and    eax,0x1
c0018c8b:	89 c1                	mov    ecx,eax
c0018c8d:	c1 e1 04             	shl    ecx,0x4
c0018c90:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018c95:	83 e0 ef             	and    eax,0xffffffef
c0018c98:	88 c2                	mov    dl,al
c0018c9a:	88 c8                	mov    al,cl
c0018c9c:	09 d0                	or     eax,edx
c0018c9e:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018ca3:	83 ec 0c             	sub    esp,0xc
c0018ca6:	6a 08                	push   0x8
c0018ca8:	e8 c4 fb ff ff       	call   c0018871 <cpuidCheckEDX(unsigned int)>
c0018cad:	83 c4 10             	add    esp,0x10
c0018cb0:	83 e0 01             	and    eax,0x1
c0018cb3:	89 c1                	mov    ecx,eax
c0018cb5:	c1 e1 05             	shl    ecx,0x5
c0018cb8:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018cbd:	83 e0 df             	and    eax,0xffffffdf
c0018cc0:	88 c2                	mov    dl,al
c0018cc2:	88 c8                	mov    al,cl
c0018cc4:	09 d0                	or     eax,edx
c0018cc6:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018ccb:	83 ec 0c             	sub    esp,0xc
c0018cce:	68 00 20 00 00       	push   0x2000
c0018cd3:	e8 99 fb ff ff       	call   c0018871 <cpuidCheckEDX(unsigned int)>
c0018cd8:	83 c4 10             	add    esp,0x10
c0018cdb:	83 e0 01             	and    eax,0x1
c0018cde:	89 c1                	mov    ecx,eax
c0018ce0:	c1 e1 06             	shl    ecx,0x6
c0018ce3:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018ce8:	83 e0 bf             	and    eax,0xffffffbf
c0018ceb:	88 c2                	mov    dl,al
c0018ced:	88 c8                	mov    al,cl
c0018cef:	09 d0                	or     eax,edx
c0018cf1:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018cf6:	83 ec 0c             	sub    esp,0xc
c0018cf9:	68 00 00 01 00       	push   0x10000
c0018cfe:	e8 6e fb ff ff       	call   c0018871 <cpuidCheckEDX(unsigned int)>
c0018d03:	83 c4 10             	add    esp,0x10
c0018d06:	89 c1                	mov    ecx,eax
c0018d08:	c1 e1 07             	shl    ecx,0x7
c0018d0b:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018d10:	83 e0 7f             	and    eax,0x7f
c0018d13:	88 c2                	mov    dl,al
c0018d15:	88 c8                	mov    al,cl
c0018d17:	09 d0                	or     eax,edx
c0018d19:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018d1e:	83 ec 0c             	sub    esp,0xc
c0018d21:	6a 01                	push   0x1
c0018d23:	e8 49 fb ff ff       	call   c0018871 <cpuidCheckEDX(unsigned int)>
c0018d28:	83 c4 10             	add    esp,0x10
c0018d2b:	83 e0 01             	and    eax,0x1
c0018d2e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018d35:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018d3a:	83 e0 f7             	and    eax,0xfffffff7
c0018d3d:	88 c2                	mov    dl,al
c0018d3f:	88 c8                	mov    al,cl
c0018d41:	09 d0                	or     eax,edx
c0018d43:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018d48:	83 ec 0c             	sub    esp,0xc
c0018d4b:	68 00 08 00 00       	push   0x800
c0018d50:	e8 1c fb ff ff       	call   c0018871 <cpuidCheckEDX(unsigned int)>
c0018d55:	83 c4 10             	add    esp,0x10
c0018d58:	89 c1                	mov    ecx,eax
c0018d5a:	83 e1 01             	and    ecx,0x1
c0018d5d:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018d62:	83 e0 fe             	and    eax,0xfffffffe
c0018d65:	88 c2                	mov    dl,al
c0018d67:	88 c8                	mov    al,cl
c0018d69:	09 d0                	or     eax,edx
c0018d6b:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018d70:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018d75:	83 e0 40             	and    eax,0x40
c0018d78:	0f b6 c0             	movzx  eax,al
c0018d7b:	85 c0                	test   eax,eax
c0018d7d:	74 0a                	je     c0018d89 <HalDetectFeatures()+0x461>
c0018d7f:	c7 05 e8 ea 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002eae8,0x100
c0018d89:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018d8e:	83 e0 80             	and    eax,0xffffff80
c0018d91:	0f b6 c0             	movzx  eax,al
c0018d94:	85 c0                	test   eax,eax
c0018d96:	74 0a                	je     c0018da2 <HalDetectFeatures()+0x47a>
c0018d98:	c7 05 e4 ea 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002eae4,0x80
c0018da2:	83 ec 0c             	sub    esp,0xc
c0018da5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018da9:	50                   	push   eax
c0018daa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018dae:	50                   	push   eax
c0018daf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018db3:	50                   	push   eax
c0018db4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018db8:	50                   	push   eax
c0018db9:	6a 00                	push   0x0
c0018dbb:	e8 13 fa ff ff       	call   c00187d3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dc0:	83 c4 20             	add    esp,0x20
c0018dc3:	c7 44 24 48 f0 ea 02 c0 	mov    DWORD PTR [esp+0x48],0xc002eaf0
c0018dcb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018dcf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018dd3:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0018ddb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018ddf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018de3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0018de7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018deb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018def:	89 c6                	mov    esi,eax
c0018df1:	89 d7                	mov    edi,edx
c0018df3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018df5:	89 c8                	mov    eax,ecx
c0018df7:	89 fa                	mov    edx,edi
c0018df9:	89 f3                	mov    ebx,esi
c0018dfb:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0018dff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018e03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018e07:	b8 f4 ea 02 c0       	mov    eax,0xc002eaf4
c0018e0c:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0018e10:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e14:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0018e18:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0018e20:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0018e24:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0018e28:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0018e2c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0018e30:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0018e34:	89 c6                	mov    esi,eax
c0018e36:	89 d7                	mov    edi,edx
c0018e38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e3a:	89 c8                	mov    eax,ecx
c0018e3c:	89 fa                	mov    edx,edi
c0018e3e:	89 f3                	mov    ebx,esi
c0018e40:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0018e44:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0018e48:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018e4c:	b8 f8 ea 02 c0       	mov    eax,0xc002eaf8
c0018e51:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0018e58:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e5c:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0018e60:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0018e68:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e6f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0018e73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0018e77:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0018e7e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0018e82:	89 c6                	mov    esi,eax
c0018e84:	89 d7                	mov    edi,edx
c0018e86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e88:	89 c8                	mov    eax,ecx
c0018e8a:	89 fa                	mov    edx,edi
c0018e8c:	89 f3                	mov    ebx,esi
c0018e8e:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0018e92:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0018e96:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0018e9a:	83 ec 08             	sub    esp,0x8
c0018e9d:	68 66 51 02 c0       	push   0xc0025166
c0018ea2:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ea7:	e8 a4 78 fe ff       	call   c0000750 <strcmp>
c0018eac:	83 c4 10             	add    esp,0x10
c0018eaf:	85 c0                	test   eax,eax
c0018eb1:	74 19                	je     c0018ecc <HalDetectFeatures()+0x5a4>
c0018eb3:	83 ec 08             	sub    esp,0x8
c0018eb6:	68 73 51 02 c0       	push   0xc0025173
c0018ebb:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ec0:	e8 8b 78 fe ff       	call   c0000750 <strcmp>
c0018ec5:	83 c4 10             	add    esp,0x10
c0018ec8:	85 c0                	test   eax,eax
c0018eca:	75 04                	jne    c0018ed0 <HalDetectFeatures()+0x5a8>
c0018ecc:	b0 01                	mov    al,0x1
c0018ece:	eb 02                	jmp    c0018ed2 <HalDetectFeatures()+0x5aa>
c0018ed0:	b0 00                	mov    al,0x0
c0018ed2:	0f b6 c0             	movzx  eax,al
c0018ed5:	85 c0                	test   eax,eax
c0018ed7:	74 0f                	je     c0018ee8 <HalDetectFeatures()+0x5c0>
c0018ed9:	c7 05 04 eb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x2
c0018ee3:	e9 0d 03 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c0018ee8:	83 ec 08             	sub    esp,0x8
c0018eeb:	68 80 51 02 c0       	push   0xc0025180
c0018ef0:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ef5:	e8 56 78 fe ff       	call   c0000750 <strcmp>
c0018efa:	83 c4 10             	add    esp,0x10
c0018efd:	85 c0                	test   eax,eax
c0018eff:	74 19                	je     c0018f1a <HalDetectFeatures()+0x5f2>
c0018f01:	83 ec 08             	sub    esp,0x8
c0018f04:	68 8d 51 02 c0       	push   0xc002518d
c0018f09:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f0e:	e8 3d 78 fe ff       	call   c0000750 <strcmp>
c0018f13:	83 c4 10             	add    esp,0x10
c0018f16:	85 c0                	test   eax,eax
c0018f18:	75 04                	jne    c0018f1e <HalDetectFeatures()+0x5f6>
c0018f1a:	b0 01                	mov    al,0x1
c0018f1c:	eb 02                	jmp    c0018f20 <HalDetectFeatures()+0x5f8>
c0018f1e:	b0 00                	mov    al,0x0
c0018f20:	0f b6 c0             	movzx  eax,al
c0018f23:	85 c0                	test   eax,eax
c0018f25:	74 0f                	je     c0018f36 <HalDetectFeatures()+0x60e>
c0018f27:	c7 05 04 eb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x4
c0018f31:	e9 bf 02 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c0018f36:	83 ec 08             	sub    esp,0x8
c0018f39:	68 9a 51 02 c0       	push   0xc002519a
c0018f3e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f43:	e8 08 78 fe ff       	call   c0000750 <strcmp>
c0018f48:	83 c4 10             	add    esp,0x10
c0018f4b:	85 c0                	test   eax,eax
c0018f4d:	74 19                	je     c0018f68 <HalDetectFeatures()+0x640>
c0018f4f:	83 ec 08             	sub    esp,0x8
c0018f52:	68 a7 51 02 c0       	push   0xc00251a7
c0018f57:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f5c:	e8 ef 77 fe ff       	call   c0000750 <strcmp>
c0018f61:	83 c4 10             	add    esp,0x10
c0018f64:	85 c0                	test   eax,eax
c0018f66:	75 04                	jne    c0018f6c <HalDetectFeatures()+0x644>
c0018f68:	b0 01                	mov    al,0x1
c0018f6a:	eb 02                	jmp    c0018f6e <HalDetectFeatures()+0x646>
c0018f6c:	b0 00                	mov    al,0x0
c0018f6e:	0f b6 c0             	movzx  eax,al
c0018f71:	85 c0                	test   eax,eax
c0018f73:	74 0f                	je     c0018f84 <HalDetectFeatures()+0x65c>
c0018f75:	c7 05 04 eb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x5
c0018f7f:	e9 71 02 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c0018f84:	83 ec 08             	sub    esp,0x8
c0018f87:	68 b4 51 02 c0       	push   0xc00251b4
c0018f8c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f91:	e8 ba 77 fe ff       	call   c0000750 <strcmp>
c0018f96:	83 c4 10             	add    esp,0x10
c0018f99:	85 c0                	test   eax,eax
c0018f9b:	0f 94 c0             	sete   al
c0018f9e:	0f b6 c0             	movzx  eax,al
c0018fa1:	85 c0                	test   eax,eax
c0018fa3:	74 0f                	je     c0018fb4 <HalDetectFeatures()+0x68c>
c0018fa5:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c0018faf:	e9 41 02 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c0018fb4:	83 ec 08             	sub    esp,0x8
c0018fb7:	68 c1 51 02 c0       	push   0xc00251c1
c0018fbc:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018fc1:	e8 8a 77 fe ff       	call   c0000750 <strcmp>
c0018fc6:	83 c4 10             	add    esp,0x10
c0018fc9:	85 c0                	test   eax,eax
c0018fcb:	0f 94 c0             	sete   al
c0018fce:	0f b6 c0             	movzx  eax,al
c0018fd1:	85 c0                	test   eax,eax
c0018fd3:	74 0f                	je     c0018fe4 <HalDetectFeatures()+0x6bc>
c0018fd5:	c7 05 04 eb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x3
c0018fdf:	e9 11 02 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c0018fe4:	83 ec 08             	sub    esp,0x8
c0018fe7:	68 80 51 02 c0       	push   0xc0025180
c0018fec:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ff1:	e8 5a 77 fe ff       	call   c0000750 <strcmp>
c0018ff6:	83 c4 10             	add    esp,0x10
c0018ff9:	85 c0                	test   eax,eax
c0018ffb:	0f 94 c0             	sete   al
c0018ffe:	0f b6 c0             	movzx  eax,al
c0019001:	85 c0                	test   eax,eax
c0019003:	74 0f                	je     c0019014 <HalDetectFeatures()+0x6ec>
c0019005:	c7 05 04 eb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x6
c001900f:	e9 e1 01 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c0019014:	83 ec 08             	sub    esp,0x8
c0019017:	68 ce 51 02 c0       	push   0xc00251ce
c001901c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019021:	e8 2a 77 fe ff       	call   c0000750 <strcmp>
c0019026:	83 c4 10             	add    esp,0x10
c0019029:	85 c0                	test   eax,eax
c001902b:	0f 94 c0             	sete   al
c001902e:	0f b6 c0             	movzx  eax,al
c0019031:	85 c0                	test   eax,eax
c0019033:	74 0f                	je     c0019044 <HalDetectFeatures()+0x71c>
c0019035:	c7 05 04 eb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x7
c001903f:	e9 b1 01 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c0019044:	83 ec 08             	sub    esp,0x8
c0019047:	68 db 51 02 c0       	push   0xc00251db
c001904c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019051:	e8 fa 76 fe ff       	call   c0000750 <strcmp>
c0019056:	83 c4 10             	add    esp,0x10
c0019059:	85 c0                	test   eax,eax
c001905b:	0f 94 c0             	sete   al
c001905e:	0f b6 c0             	movzx  eax,al
c0019061:	85 c0                	test   eax,eax
c0019063:	74 0f                	je     c0019074 <HalDetectFeatures()+0x74c>
c0019065:	c7 05 04 eb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x8
c001906f:	e9 81 01 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c0019074:	83 ec 08             	sub    esp,0x8
c0019077:	68 e8 51 02 c0       	push   0xc00251e8
c001907c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019081:	e8 ca 76 fe ff       	call   c0000750 <strcmp>
c0019086:	83 c4 10             	add    esp,0x10
c0019089:	85 c0                	test   eax,eax
c001908b:	0f 94 c0             	sete   al
c001908e:	0f b6 c0             	movzx  eax,al
c0019091:	85 c0                	test   eax,eax
c0019093:	74 0f                	je     c00190a4 <HalDetectFeatures()+0x77c>
c0019095:	c7 05 04 eb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x9
c001909f:	e9 51 01 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c00190a4:	83 ec 08             	sub    esp,0x8
c00190a7:	68 f5 51 02 c0       	push   0xc00251f5
c00190ac:	68 f0 ea 02 c0       	push   0xc002eaf0
c00190b1:	e8 9a 76 fe ff       	call   c0000750 <strcmp>
c00190b6:	83 c4 10             	add    esp,0x10
c00190b9:	85 c0                	test   eax,eax
c00190bb:	0f 94 c0             	sete   al
c00190be:	0f b6 c0             	movzx  eax,al
c00190c1:	85 c0                	test   eax,eax
c00190c3:	74 0f                	je     c00190d4 <HalDetectFeatures()+0x7ac>
c00190c5:	c7 05 04 eb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xa
c00190cf:	e9 21 01 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c00190d4:	83 ec 08             	sub    esp,0x8
c00190d7:	68 02 52 02 c0       	push   0xc0025202
c00190dc:	68 f0 ea 02 c0       	push   0xc002eaf0
c00190e1:	e8 6a 76 fe ff       	call   c0000750 <strcmp>
c00190e6:	83 c4 10             	add    esp,0x10
c00190e9:	85 c0                	test   eax,eax
c00190eb:	0f 94 c0             	sete   al
c00190ee:	0f b6 c0             	movzx  eax,al
c00190f1:	85 c0                	test   eax,eax
c00190f3:	74 0f                	je     c0019104 <HalDetectFeatures()+0x7dc>
c00190f5:	c7 05 04 eb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xb
c00190ff:	e9 f1 00 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c0019104:	83 ec 08             	sub    esp,0x8
c0019107:	68 0f 52 02 c0       	push   0xc002520f
c001910c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019111:	e8 3a 76 fe ff       	call   c0000750 <strcmp>
c0019116:	83 c4 10             	add    esp,0x10
c0019119:	85 c0                	test   eax,eax
c001911b:	0f 94 c0             	sete   al
c001911e:	0f b6 c0             	movzx  eax,al
c0019121:	85 c0                	test   eax,eax
c0019123:	74 0f                	je     c0019134 <HalDetectFeatures()+0x80c>
c0019125:	c7 05 04 eb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xc
c001912f:	e9 c1 00 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c0019134:	83 ec 08             	sub    esp,0x8
c0019137:	68 1c 52 02 c0       	push   0xc002521c
c001913c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019141:	e8 0a 76 fe ff       	call   c0000750 <strcmp>
c0019146:	83 c4 10             	add    esp,0x10
c0019149:	85 c0                	test   eax,eax
c001914b:	0f 94 c0             	sete   al
c001914e:	0f b6 c0             	movzx  eax,al
c0019151:	85 c0                	test   eax,eax
c0019153:	74 0f                	je     c0019164 <HalDetectFeatures()+0x83c>
c0019155:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c001915f:	e9 91 00 00 00       	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c0019164:	83 ec 08             	sub    esp,0x8
c0019167:	68 29 52 02 c0       	push   0xc0025229
c001916c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019171:	e8 da 75 fe ff       	call   c0000750 <strcmp>
c0019176:	83 c4 10             	add    esp,0x10
c0019179:	85 c0                	test   eax,eax
c001917b:	0f 94 c0             	sete   al
c001917e:	0f b6 c0             	movzx  eax,al
c0019181:	85 c0                	test   eax,eax
c0019183:	74 0c                	je     c0019191 <HalDetectFeatures()+0x869>
c0019185:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c001918f:	eb 64                	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c0019191:	83 ec 08             	sub    esp,0x8
c0019194:	68 36 52 02 c0       	push   0xc0025236
c0019199:	68 f0 ea 02 c0       	push   0xc002eaf0
c001919e:	e8 ad 75 fe ff       	call   c0000750 <strcmp>
c00191a3:	83 c4 10             	add    esp,0x10
c00191a6:	85 c0                	test   eax,eax
c00191a8:	0f 94 c0             	sete   al
c00191ab:	0f b6 c0             	movzx  eax,al
c00191ae:	85 c0                	test   eax,eax
c00191b0:	74 0c                	je     c00191be <HalDetectFeatures()+0x896>
c00191b2:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c00191bc:	eb 37                	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c00191be:	83 ec 08             	sub    esp,0x8
c00191c1:	68 43 52 02 c0       	push   0xc0025243
c00191c6:	68 f0 ea 02 c0       	push   0xc002eaf0
c00191cb:	e8 80 75 fe ff       	call   c0000750 <strcmp>
c00191d0:	83 c4 10             	add    esp,0x10
c00191d3:	85 c0                	test   eax,eax
c00191d5:	0f 94 c0             	sete   al
c00191d8:	0f b6 c0             	movzx  eax,al
c00191db:	85 c0                	test   eax,eax
c00191dd:	74 0c                	je     c00191eb <HalDetectFeatures()+0x8c3>
c00191df:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c00191e9:	eb 0a                	jmp    c00191f5 <HalDetectFeatures()+0x8cd>
c00191eb:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c00191f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191f9:	83 f8 06             	cmp    eax,0x6
c00191fc:	0f 86 cc 00 00 00    	jbe    c00192ce <HalDetectFeatures()+0x9a6>
c0019202:	83 ec 0c             	sub    esp,0xc
c0019205:	68 80 00 00 00       	push   0x80
c001920a:	e8 bd f6 ff ff       	call   c00188cc <cpuidCheckExtendedEBX(unsigned int)>
c001920f:	83 c4 10             	add    esp,0x10
c0019212:	89 c1                	mov    ecx,eax
c0019214:	83 e1 01             	and    ecx,0x1
c0019217:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001921c:	83 e0 fe             	and    eax,0xfffffffe
c001921f:	88 c2                	mov    dl,al
c0019221:	88 c8                	mov    al,cl
c0019223:	09 d0                	or     eax,edx
c0019225:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001922a:	83 ec 0c             	sub    esp,0xc
c001922d:	68 00 00 10 00       	push   0x100000
c0019232:	e8 95 f6 ff ff       	call   c00188cc <cpuidCheckExtendedEBX(unsigned int)>
c0019237:	83 c4 10             	add    esp,0x10
c001923a:	83 e0 01             	and    eax,0x1
c001923d:	89 c1                	mov    ecx,eax
c001923f:	c1 e1 06             	shl    ecx,0x6
c0019242:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019247:	83 e0 bf             	and    eax,0xffffffbf
c001924a:	88 c2                	mov    dl,al
c001924c:	88 c8                	mov    al,cl
c001924e:	09 d0                	or     eax,edx
c0019250:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019255:	83 ec 0c             	sub    esp,0xc
c0019258:	68 00 00 04 00       	push   0x40000
c001925d:	e8 6a f6 ff ff       	call   c00188cc <cpuidCheckExtendedEBX(unsigned int)>
c0019262:	83 c4 10             	add    esp,0x10
c0019265:	83 e0 01             	and    eax,0x1
c0019268:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001926b:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019270:	83 e0 fd             	and    eax,0xfffffffd
c0019273:	88 c2                	mov    dl,al
c0019275:	88 c8                	mov    al,cl
c0019277:	09 d0                	or     eax,edx
c0019279:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001927e:	83 ec 0c             	sub    esp,0xc
c0019281:	6a 04                	push   0x4
c0019283:	e8 72 f6 ff ff       	call   c00188fa <cpuidCheckExtendedECX(unsigned int)>
c0019288:	83 c4 10             	add    esp,0x10
c001928b:	83 e0 01             	and    eax,0x1
c001928e:	89 c1                	mov    ecx,eax
c0019290:	c1 e1 05             	shl    ecx,0x5
c0019293:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019298:	83 e0 df             	and    eax,0xffffffdf
c001929b:	88 c2                	mov    dl,al
c001929d:	88 c8                	mov    al,cl
c001929f:	09 d0                	or     eax,edx
c00192a1:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00192a6:	83 ec 0c             	sub    esp,0xc
c00192a9:	6a 20                	push   0x20
c00192ab:	e8 4a f6 ff ff       	call   c00188fa <cpuidCheckExtendedECX(unsigned int)>
c00192b0:	83 c4 10             	add    esp,0x10
c00192b3:	83 e0 01             	and    eax,0x1
c00192b6:	89 c1                	mov    ecx,eax
c00192b8:	c1 e1 04             	shl    ecx,0x4
c00192bb:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00192c0:	83 e0 ef             	and    eax,0xffffffef
c00192c3:	88 c2                	mov    dl,al
c00192c5:	88 c8                	mov    al,cl
c00192c7:	09 d0                	or     eax,edx
c00192c9:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00192ce:	83 ec 0c             	sub    esp,0xc
c00192d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00192d5:	50                   	push   eax
c00192d6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00192da:	50                   	push   eax
c00192db:	8d 44 24 24          	lea    eax,[esp+0x24]
c00192df:	50                   	push   eax
c00192e0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00192e4:	50                   	push   eax
c00192e5:	6a 01                	push   0x1
c00192e7:	e8 e7 f4 ff ff       	call   c00187d3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192ec:	83 c4 20             	add    esp,0x20
c00192ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00192f3:	83 e0 0f             	and    eax,0xf
c00192f6:	a2 00 eb 02 c0       	mov    ds:0xc002eb00,al
c00192fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00192ff:	c1 e8 04             	shr    eax,0x4
c0019302:	83 e0 0f             	and    eax,0xf
c0019305:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c001930a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001930e:	c1 e8 08             	shr    eax,0x8
c0019311:	83 e0 0f             	and    eax,0xf
c0019314:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c0019319:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001931d:	c1 e8 0c             	shr    eax,0xc
c0019320:	83 e0 03             	and    eax,0x3
c0019323:	a2 ff ea 02 c0       	mov    ds:0xc002eaff,al
c0019328:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c001932d:	0f b6 c0             	movzx  eax,al
c0019330:	83 f8 06             	cmp    eax,0x6
c0019333:	74 0d                	je     c0019342 <HalDetectFeatures()+0xa1a>
c0019335:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c001933a:	0f b6 c0             	movzx  eax,al
c001933d:	83 f8 0f             	cmp    eax,0xf
c0019340:	75 18                	jne    c001935a <HalDetectFeatures()+0xa32>
c0019342:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019346:	c1 e8 10             	shr    eax,0x10
c0019349:	c1 e0 04             	shl    eax,0x4
c001934c:	88 c2                	mov    dl,al
c001934e:	a0 fe ea 02 c0       	mov    al,ds:0xc002eafe
c0019353:	09 d0                	or     eax,edx
c0019355:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c001935a:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c001935f:	0f b6 c0             	movzx  eax,al
c0019362:	83 f8 0f             	cmp    eax,0xf
c0019365:	75 15                	jne    c001937c <HalDetectFeatures()+0xa54>
c0019367:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001936b:	c1 e8 14             	shr    eax,0x14
c001936e:	88 c2                	mov    dl,al
c0019370:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0019375:	01 d0                	add    eax,edx
c0019377:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c001937c:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019384:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c001938c:	85 c0                	test   eax,eax
c001938e:	74 2d                	je     c00193bd <HalDetectFeatures()+0xa95>
c0019390:	83 ec 0c             	sub    esp,0xc
c0019393:	68 00 00 00 40       	push   0x40000000
c0019398:	e8 01 f5 ff ff       	call   c001889e <cpuidCheckECX(unsigned int)>
c001939d:	83 c4 10             	add    esp,0x10
c00193a0:	83 e0 01             	and    eax,0x1
c00193a3:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00193aa:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00193af:	83 e0 fb             	and    eax,0xfffffffb
c00193b2:	88 c2                	mov    dl,al
c00193b4:	88 c8                	mov    al,cl
c00193b6:	09 d0                	or     eax,edx
c00193b8:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c00193bd:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00193c2:	83 c8 04             	or     eax,0x4
c00193c5:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00193ca:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00193cf:	83 c8 08             	or     eax,0x8
c00193d2:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00193d7:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00193dc:	83 c8 10             	or     eax,0x10
c00193df:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00193e4:	83 ec 0c             	sub    esp,0xc
c00193e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00193eb:	50                   	push   eax
c00193ec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00193f0:	50                   	push   eax
c00193f1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00193f5:	50                   	push   eax
c00193f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00193fa:	50                   	push   eax
c00193fb:	68 00 00 00 80       	push   0x80000000
c0019400:	e8 ce f3 ff ff       	call   c00187d3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019405:	83 c4 20             	add    esp,0x20
c0019408:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001940c:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019411:	0f 86 96 01 00 00    	jbe    c00195ad <HalDetectFeatures()+0xc85>
c0019417:	83 ec 0c             	sub    esp,0xc
c001941a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001941e:	50                   	push   eax
c001941f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019423:	50                   	push   eax
c0019424:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019428:	50                   	push   eax
c0019429:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001942d:	50                   	push   eax
c001942e:	68 01 00 00 80       	push   0x80000001
c0019433:	e8 9b f3 ff ff       	call   c00187d3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019438:	83 c4 20             	add    esp,0x20
c001943b:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019440:	83 e0 7f             	and    eax,0x7f
c0019443:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019448:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001944d:	83 e0 fb             	and    eax,0xfffffffb
c0019450:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019455:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001945a:	83 e0 fd             	and    eax,0xfffffffd
c001945d:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019462:	e9 46 01 00 00       	jmp    c00195ad <HalDetectFeatures()+0xc85>
c0019467:	83 ec 08             	sub    esp,0x8
c001946a:	68 b4 51 02 c0       	push   0xc00251b4
c001946f:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019474:	e8 c7 71 fe ff       	call   c0000640 <strcpy>
c0019479:	83 c4 10             	add    esp,0x10
c001947c:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c0019486:	e8 38 6d fe ff       	call   c00001c3 <is486>
c001948b:	85 c0                	test   eax,eax
c001948d:	0f 95 c0             	setne  al
c0019490:	0f b6 c0             	movzx  eax,al
c0019493:	85 c0                	test   eax,eax
c0019495:	0f 84 8d 00 00 00    	je     c0019528 <HalDetectFeatures()+0xc00>
c001949b:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00194a0:	83 c8 04             	or     eax,0x4
c00194a3:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00194a8:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00194ad:	83 c8 08             	or     eax,0x8
c00194b0:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00194b5:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00194ba:	83 c8 10             	or     eax,0x10
c00194bd:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00194c2:	0f 20 c0             	mov    eax,cr0
c00194c5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00194c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00194cd:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c00194d4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00194db:	83 e0 04             	and    eax,0x4
c00194de:	74 1e                	je     c00194fe <HalDetectFeatures()+0xbd6>
c00194e0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00194e7:	83 e0 10             	and    eax,0x10
c00194ea:	75 12                	jne    c00194fe <HalDetectFeatures()+0xbd6>
c00194ec:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00194f1:	83 e0 f7             	and    eax,0xfffffff7
c00194f4:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00194f9:	e9 af 00 00 00       	jmp    c00195ad <HalDetectFeatures()+0xc85>
c00194fe:	e8 9b 6c fe ff       	call   c000019e <hasLegacyFPU>
c0019503:	83 e0 01             	and    eax,0x1
c0019506:	83 e0 01             	and    eax,0x1
c0019509:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019510:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019515:	83 e0 f7             	and    eax,0xfffffff7
c0019518:	88 c2                	mov    dl,al
c001951a:	88 c8                	mov    al,cl
c001951c:	09 d0                	or     eax,edx
c001951e:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019523:	e9 85 00 00 00       	jmp    c00195ad <HalDetectFeatures()+0xc85>
c0019528:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001952d:	83 e0 fb             	and    eax,0xfffffffb
c0019530:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019535:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001953a:	83 e0 f7             	and    eax,0xfffffff7
c001953d:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019542:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019547:	83 e0 ef             	and    eax,0xffffffef
c001954a:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001954f:	0f 20 c0             	mov    eax,cr0
c0019552:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019556:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001955a:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019561:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019568:	83 e0 04             	and    eax,0x4
c001956b:	74 1b                	je     c0019588 <HalDetectFeatures()+0xc60>
c001956d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019574:	83 e0 10             	and    eax,0x10
c0019577:	75 0f                	jne    c0019588 <HalDetectFeatures()+0xc60>
c0019579:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001957e:	83 e0 f7             	and    eax,0xfffffff7
c0019581:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019586:	eb 25                	jmp    c00195ad <HalDetectFeatures()+0xc85>
c0019588:	e8 11 6c fe ff       	call   c000019e <hasLegacyFPU>
c001958d:	83 e0 01             	and    eax,0x1
c0019590:	83 e0 01             	and    eax,0x1
c0019593:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001959a:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001959f:	83 e0 f7             	and    eax,0xfffffff7
c00195a2:	88 c2                	mov    dl,al
c00195a4:	88 c8                	mov    al,cl
c00195a6:	09 d0                	or     eax,edx
c00195a8:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00195ad:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00195b2:	83 e0 08             	and    eax,0x8
c00195b5:	0f b6 c0             	movzx  eax,al
c00195b8:	85 c0                	test   eax,eax
c00195ba:	75 25                	jne    c00195e1 <HalDetectFeatures()+0xcb9>
c00195bc:	e8 dd 6b fe ff       	call   c000019e <hasLegacyFPU>
c00195c1:	83 e0 01             	and    eax,0x1
c00195c4:	83 e0 01             	and    eax,0x1
c00195c7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00195ce:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00195d3:	83 e0 f7             	and    eax,0xfffffff7
c00195d6:	88 c2                	mov    dl,al
c00195d8:	88 c8                	mov    al,cl
c00195da:	09 d0                	or     eax,edx
c00195dc:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00195e1:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00195e6:	83 e0 08             	and    eax,0x8
c00195e9:	0f b6 c0             	movzx  eax,al
c00195ec:	85 c0                	test   eax,eax
c00195ee:	74 0d                	je     c00195fd <HalDetectFeatures()+0xcd5>
c00195f0:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00195f5:	83 c8 10             	or     eax,0x10
c00195f8:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00195fd:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019602:	83 e0 10             	and    eax,0x10
c0019605:	0f b6 c0             	movzx  eax,al
c0019608:	85 c0                	test   eax,eax
c001960a:	75 23                	jne    c001962f <HalDetectFeatures()+0xd07>
c001960c:	e8 35 7f 00 00       	call   c0021546 <x87Detect>
c0019611:	83 e0 01             	and    eax,0x1
c0019614:	83 e0 01             	and    eax,0x1
c0019617:	89 c1                	mov    ecx,eax
c0019619:	c1 e1 04             	shl    ecx,0x4
c001961c:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019621:	83 e0 ef             	and    eax,0xffffffef
c0019624:	88 c2                	mov    dl,al
c0019626:	88 c8                	mov    al,cl
c0019628:	09 d0                	or     eax,edx
c001962a:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001962f:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019634:	83 e0 01             	and    eax,0x1
c0019637:	0f b6 c0             	movzx  eax,al
c001963a:	85 c0                	test   eax,eax
c001963c:	75 2d                	jne    c001966b <HalDetectFeatures()+0xd43>
c001963e:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019643:	83 e0 02             	and    eax,0x2
c0019646:	0f b6 c0             	movzx  eax,al
c0019649:	85 c0                	test   eax,eax
c001964b:	75 1e                	jne    c001966b <HalDetectFeatures()+0xd43>
c001964d:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019652:	83 e0 04             	and    eax,0x4
c0019655:	0f b6 c0             	movzx  eax,al
c0019658:	85 c0                	test   eax,eax
c001965a:	75 0f                	jne    c001966b <HalDetectFeatures()+0xd43>
c001965c:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019661:	83 e0 08             	and    eax,0x8
c0019664:	0f b6 c0             	movzx  eax,al
c0019667:	85 c0                	test   eax,eax
c0019669:	74 0d                	je     c0019678 <HalDetectFeatures()+0xd50>
c001966b:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019670:	83 c8 80             	or     eax,0xffffff80
c0019673:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019678:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001967d:	83 e0 10             	and    eax,0x10
c0019680:	0f b6 c0             	movzx  eax,al
c0019683:	85 c0                	test   eax,eax
c0019685:	74 2f                	je     c00196b6 <HalDetectFeatures()+0xd8e>
c0019687:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001968c:	83 e0 80             	and    eax,0xffffff80
c001968f:	0f b6 c0             	movzx  eax,al
c0019692:	85 c0                	test   eax,eax
c0019694:	75 20                	jne    c00196b6 <HalDetectFeatures()+0xd8e>
c0019696:	e8 65 7e 00 00       	call   c0021500 <sseDetect>
c001969b:	83 e0 01             	and    eax,0x1
c001969e:	89 c1                	mov    ecx,eax
c00196a0:	c1 e1 07             	shl    ecx,0x7
c00196a3:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00196a8:	83 e0 7f             	and    eax,0x7f
c00196ab:	88 c2                	mov    dl,al
c00196ad:	88 c8                	mov    al,cl
c00196af:	09 d0                	or     eax,edx
c00196b1:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00196b6:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00196bb:	83 e0 80             	and    eax,0xffffff80
c00196be:	0f b6 c0             	movzx  eax,al
c00196c1:	85 c0                	test   eax,eax
c00196c3:	74 1c                	je     c00196e1 <HalDetectFeatures()+0xdb9>
c00196c5:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00196ca:	83 e0 20             	and    eax,0x20
c00196cd:	0f b6 c0             	movzx  eax,al
c00196d0:	85 c0                	test   eax,eax
c00196d2:	75 0d                	jne    c00196e1 <HalDetectFeatures()+0xdb9>
c00196d4:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00196d9:	83 e0 df             	and    eax,0xffffffdf
c00196dc:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00196e1:	c6 05 08 eb 02 c0 00 	mov    BYTE PTR ds:0xc002eb08,0x0
c00196e8:	90                   	nop
c00196e9:	81 c4 90 00 00 00    	add    esp,0x90
c00196ef:	5b                   	pop    ebx
c00196f0:	5e                   	pop    esi
c00196f1:	5f                   	pop    edi
c00196f2:	c3                   	ret    

c00196f3 <HalEnableNMI()>:
c00196f3:	c6 05 ec ea 02 c0 01 	mov    BYTE PTR ds:0xc002eaec,0x1
c00196fa:	6a 10                	push   0x10
c00196fc:	e8 22 ef ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c0019701:	83 c4 04             	add    esp,0x4
c0019704:	90                   	nop
c0019705:	c3                   	ret    

c0019706 <HalDisableNMI()>:
c0019706:	c6 05 ec ea 02 c0 00 	mov    BYTE PTR ds:0xc002eaec,0x0
c001970d:	6a 10                	push   0x10
c001970f:	e8 0f ef ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c0019714:	83 c4 04             	add    esp,0x4
c0019717:	90                   	nop
c0019718:	c3                   	ret    

c0019719 <HalGetNMIState()>:
c0019719:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c001971e:	c3                   	ret    

c001971f <x86rdmsr(unsigned int)>:
c001971f:	83 ec 1c             	sub    esp,0x1c
c0019722:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019727:	83 e0 08             	and    eax,0x8
c001972a:	0f b6 c0             	movzx  eax,al
c001972d:	85 c0                	test   eax,eax
c001972f:	75 10                	jne    c0019741 <x86rdmsr(unsigned int)+0x22>
c0019731:	83 ec 0c             	sub    esp,0xc
c0019734:	68 4f 52 02 c0       	push   0xc002524f
c0019739:	e8 a0 68 ff ff       	call   c000ffde <KePanic(char const*)>
c001973e:	83 c4 10             	add    esp,0x10
c0019741:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019745:	89 c1                	mov    ecx,eax
c0019747:	0f 32                	rdmsr  
c0019749:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001974d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019751:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019755:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019759:	83 c4 1c             	add    esp,0x1c
c001975c:	c3                   	ret    

c001975d <x86wrmsr(unsigned int, unsigned long long)>:
c001975d:	83 ec 1c             	sub    esp,0x1c
c0019760:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019764:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019768:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001976c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019770:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019775:	83 e0 08             	and    eax,0x8
c0019778:	0f b6 c0             	movzx  eax,al
c001977b:	85 c0                	test   eax,eax
c001977d:	75 10                	jne    c001978f <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001977f:	83 ec 0c             	sub    esp,0xc
c0019782:	68 55 52 02 c0       	push   0xc0025255
c0019787:	e8 52 68 ff ff       	call   c000ffde <KePanic(char const*)>
c001978c:	83 c4 10             	add    esp,0x10
c001978f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019793:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019797:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001979b:	0f 30                	wrmsr  
c001979d:	90                   	nop
c001979e:	83 c4 1c             	add    esp,0x1c
c00197a1:	c3                   	ret    

c00197a2 <HalHandleGeneralProtectionFault(void*, void*)>:
c00197a2:	83 ec 0c             	sub    esp,0xc
c00197a5:	83 ec 0c             	sub    esp,0xc
c00197a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197ac:	e8 48 e7 ff ff       	call   c0017ef9 <Vm::faultHandler(regs*)>
c00197b1:	83 c4 10             	add    esp,0x10
c00197b4:	83 c4 0c             	add    esp,0xc
c00197b7:	c3                   	ret    

c00197b8 <HalFindRSDP()>:
c00197b8:	83 ec 1c             	sub    esp,0x1c
c00197bb:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00197c0:	3d ff 07 00 00       	cmp    eax,0x7ff
c00197c5:	7e 0c                	jle    c00197d3 <HalFindRSDP()+0x1b>
c00197c7:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c00197cc:	25 00 04 00 00       	and    eax,0x400
c00197d1:	74 0d                	je     c00197e0 <HalFindRSDP()+0x28>
c00197d3:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00197d8:	83 e0 fb             	and    eax,0xfffffffb
c00197db:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00197e0:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00197e5:	83 e0 04             	and    eax,0x4
c00197e8:	0f b6 c0             	movzx  eax,al
c00197eb:	85 c0                	test   eax,eax
c00197ed:	75 07                	jne    c00197f6 <HalFindRSDP()+0x3e>
c00197ef:	b8 00 00 00 00       	mov    eax,0x0
c00197f4:	eb 53                	jmp    c0019849 <HalFindRSDP()+0x91>
c00197f6:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00197fe:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019806:	77 2f                	ja     c0019837 <HalFindRSDP()+0x7f>
c0019808:	83 ec 04             	sub    esp,0x4
c001980b:	6a 08                	push   0x8
c001980d:	68 5b 52 02 c0       	push   0xc002525b
c0019812:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019816:	e8 65 6b fe ff       	call   c0000380 <memcmp>
c001981b:	83 c4 10             	add    esp,0x10
c001981e:	85 c0                	test   eax,eax
c0019820:	0f 94 c0             	sete   al
c0019823:	0f b6 c0             	movzx  eax,al
c0019826:	85 c0                	test   eax,eax
c0019828:	74 06                	je     c0019830 <HalFindRSDP()+0x78>
c001982a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001982e:	eb 19                	jmp    c0019849 <HalFindRSDP()+0x91>
c0019830:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019835:	eb c7                	jmp    c00197fe <HalFindRSDP()+0x46>
c0019837:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001983c:	83 e0 fb             	and    eax,0xfffffffb
c001983f:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019844:	b8 00 00 00 00       	mov    eax,0x0
c0019849:	83 c4 1c             	add    esp,0x1c
c001984c:	c3                   	ret    

c001984d <HalHandlePageFault(void*, void*)>:
c001984d:	83 ec 1c             	sub    esp,0x1c
c0019850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019854:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019857:	83 ec 08             	sub    esp,0x8
c001985a:	50                   	push   eax
c001985b:	68 a0 54 02 c0       	push   0xc00254a0
c0019860:	e8 ff d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019865:	83 c4 10             	add    esp,0x10
c0019868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001986c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001986f:	83 ec 08             	sub    esp,0x8
c0019872:	50                   	push   eax
c0019873:	68 64 52 02 c0       	push   0xc0025264
c0019878:	e8 e7 d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001987d:	83 c4 10             	add    esp,0x10
c0019880:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019885:	8b 00                	mov    eax,DWORD PTR [eax]
c0019887:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001988a:	8b 80 72 05 00 00    	mov    eax,DWORD PTR [eax+0x572]
c0019890:	0f 20 d2             	mov    edx,cr2
c0019893:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019897:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001989b:	83 ec 08             	sub    esp,0x8
c001989e:	52                   	push   edx
c001989f:	50                   	push   eax
c00198a0:	e8 f1 a9 ff ff       	call   c0014296 <VAS::tryLoadBackOffDisk(unsigned long)>
c00198a5:	83 c4 10             	add    esp,0x10
c00198a8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00198ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198b0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00198b3:	83 ec 08             	sub    esp,0x8
c00198b6:	50                   	push   eax
c00198b7:	68 79 52 02 c0       	push   0xc0025279
c00198bc:	e8 a3 d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198c1:	83 c4 10             	add    esp,0x10
c00198c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00198cb:	83 ec 08             	sub    esp,0x8
c00198ce:	50                   	push   eax
c00198cf:	68 93 52 02 c0       	push   0xc0025293
c00198d4:	e8 8b d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198d9:	83 c4 10             	add    esp,0x10
c00198dc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00198e1:	83 ec 08             	sub    esp,0x8
c00198e4:	50                   	push   eax
c00198e5:	68 a8 52 02 c0       	push   0xc00252a8
c00198ea:	e8 75 d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198ef:	83 c4 10             	add    esp,0x10
c00198f2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00198f6:	83 c4 1c             	add    esp,0x1c
c00198f9:	c3                   	ret    

c00198fa <HalHandleOpcodeFault(void*, void*)>:
c00198fa:	83 ec 1c             	sub    esp,0x1c
c00198fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019905:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c001990a:	0f b6 c0             	movzx  eax,al
c001990d:	85 c0                	test   eax,eax
c001990f:	74 25                	je     c0019936 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0019911:	83 ec 0c             	sub    esp,0xc
c0019914:	68 d4 54 02 c0       	push   0xc00254d4
c0019919:	e8 46 d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001991e:	83 c4 10             	add    esp,0x10
c0019921:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019925:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019928:	8d 50 19             	lea    edx,[eax+0x19]
c001992b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001992f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019932:	b0 01                	mov    al,0x1
c0019934:	eb 02                	jmp    c0019938 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019936:	b0 00                	mov    al,0x0
c0019938:	83 c4 1c             	add    esp,0x1c
c001993b:	c3                   	ret    

c001993c <HalDisplayDebugInfo(void*)>:
c001993c:	83 ec 2c             	sub    esp,0x2c
c001993f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019943:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019947:	0f 20 c0             	mov    eax,cr0
c001994a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001994e:	0f 20 d0             	mov    eax,cr2
c0019951:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019955:	0f 20 d8             	mov    eax,cr3
c0019958:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001995c:	0f 20 e0             	mov    eax,cr4
c001995f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019963:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019967:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001996a:	83 ec 08             	sub    esp,0x8
c001996d:	50                   	push   eax
c001996e:	68 c3 52 02 c0       	push   0xc00252c3
c0019973:	e8 ec d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019978:	83 c4 10             	add    esp,0x10
c001997b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001997f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019982:	83 ec 08             	sub    esp,0x8
c0019985:	50                   	push   eax
c0019986:	68 b4 52 02 c0       	push   0xc00252b4
c001998b:	e8 d4 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019990:	83 c4 10             	add    esp,0x10
c0019993:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019997:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001999a:	83 ec 08             	sub    esp,0x8
c001999d:	50                   	push   eax
c001999e:	68 bf 52 02 c0       	push   0xc00252bf
c00199a3:	e8 bc d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00199a8:	83 c4 10             	add    esp,0x10
c00199ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00199b2:	83 ec 08             	sub    esp,0x8
c00199b5:	50                   	push   eax
c00199b6:	68 ce 52 02 c0       	push   0xc00252ce
c00199bb:	e8 a4 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00199c0:	83 c4 10             	add    esp,0x10
c00199c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199c7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00199ca:	83 ec 08             	sub    esp,0x8
c00199cd:	50                   	push   eax
c00199ce:	68 d9 52 02 c0       	push   0xc00252d9
c00199d3:	e8 8c d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00199d8:	83 c4 10             	add    esp,0x10
c00199db:	83 ec 08             	sub    esp,0x8
c00199de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199e2:	68 e4 52 02 c0       	push   0xc00252e4
c00199e7:	e8 78 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00199ec:	83 c4 10             	add    esp,0x10
c00199ef:	83 ec 08             	sub    esp,0x8
c00199f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199f6:	68 ef 52 02 c0       	push   0xc00252ef
c00199fb:	e8 64 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019a00:	83 c4 10             	add    esp,0x10
c0019a03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a07:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019a0a:	c1 e0 05             	shl    eax,0x5
c0019a0d:	8d 90 e0 67 02 c0    	lea    edx,[eax-0x3ffd9820]
c0019a13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a17:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019a1a:	83 ec 04             	sub    esp,0x4
c0019a1d:	52                   	push   edx
c0019a1e:	50                   	push   eax
c0019a1f:	68 fa 52 02 c0       	push   0xc00252fa
c0019a24:	e8 3b d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019a29:	83 c4 10             	add    esp,0x10
c0019a2c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a31:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019a37:	83 ec 0c             	sub    esp,0xc
c0019a3a:	50                   	push   eax
c0019a3b:	e8 05 8b ff ff       	call   c0012545 <setActiveTerminal(VgaText*)>
c0019a40:	83 c4 10             	add    esp,0x10
c0019a43:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a48:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019a4e:	83 ec 08             	sub    esp,0x8
c0019a51:	68 09 53 02 c0       	push   0xc0025309
c0019a56:	50                   	push   eax
c0019a57:	e8 36 8e ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019a5c:	83 c4 10             	add    esp,0x10
c0019a5f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a64:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019a6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019a6e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0019a71:	83 ec 08             	sub    esp,0x8
c0019a74:	52                   	push   edx
c0019a75:	50                   	push   eax
c0019a76:	e8 d1 8d ff ff       	call   c001284c <VgaText::putx(unsigned int)>
c0019a7b:	83 c4 10             	add    esp,0x10
c0019a7e:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a83:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019a89:	83 ec 08             	sub    esp,0x8
c0019a8c:	68 17 53 02 c0       	push   0xc0025317
c0019a91:	50                   	push   eax
c0019a92:	e8 fb 8d ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019a97:	83 c4 10             	add    esp,0x10
c0019a9a:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a9f:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019aa5:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0019aaa:	8b 12                	mov    edx,DWORD PTR [edx]
c0019aac:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019aaf:	83 c2 0c             	add    edx,0xc
c0019ab2:	83 ec 08             	sub    esp,0x8
c0019ab5:	52                   	push   edx
c0019ab6:	50                   	push   eax
c0019ab7:	e8 d6 8d ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019abc:	83 c4 10             	add    esp,0x10
c0019abf:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019ac4:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019aca:	83 ec 08             	sub    esp,0x8
c0019acd:	68 20 53 02 c0       	push   0xc0025320
c0019ad2:	50                   	push   eax
c0019ad3:	e8 ba 8d ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019ad8:	83 c4 10             	add    esp,0x10
c0019adb:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019ae0:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019ae6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019aea:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0019aed:	83 ec 08             	sub    esp,0x8
c0019af0:	52                   	push   edx
c0019af1:	50                   	push   eax
c0019af2:	e8 55 8d ff ff       	call   c001284c <VgaText::putx(unsigned int)>
c0019af7:	83 c4 10             	add    esp,0x10
c0019afa:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019aff:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b05:	83 ec 08             	sub    esp,0x8
c0019b08:	68 28 53 02 c0       	push   0xc0025328
c0019b0d:	50                   	push   eax
c0019b0e:	e8 7f 8d ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019b13:	83 c4 10             	add    esp,0x10
c0019b16:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b1b:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b21:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b25:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019b28:	83 ec 08             	sub    esp,0x8
c0019b2b:	52                   	push   edx
c0019b2c:	50                   	push   eax
c0019b2d:	e8 1a 8d ff ff       	call   c001284c <VgaText::putx(unsigned int)>
c0019b32:	83 c4 10             	add    esp,0x10
c0019b35:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b3a:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b40:	83 ec 08             	sub    esp,0x8
c0019b43:	68 30 53 02 c0       	push   0xc0025330
c0019b48:	50                   	push   eax
c0019b49:	e8 44 8d ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019b4e:	83 c4 10             	add    esp,0x10
c0019b51:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b56:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b60:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019b63:	83 ec 08             	sub    esp,0x8
c0019b66:	52                   	push   edx
c0019b67:	50                   	push   eax
c0019b68:	e8 df 8c ff ff       	call   c001284c <VgaText::putx(unsigned int)>
c0019b6d:	83 c4 10             	add    esp,0x10
c0019b70:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b75:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b7b:	83 ec 08             	sub    esp,0x8
c0019b7e:	68 38 53 02 c0       	push   0xc0025338
c0019b83:	50                   	push   eax
c0019b84:	e8 09 8d ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019b89:	83 c4 10             	add    esp,0x10
c0019b8c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b91:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b9b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019b9e:	83 ec 08             	sub    esp,0x8
c0019ba1:	52                   	push   edx
c0019ba2:	50                   	push   eax
c0019ba3:	e8 a4 8c ff ff       	call   c001284c <VgaText::putx(unsigned int)>
c0019ba8:	83 c4 10             	add    esp,0x10
c0019bab:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019bb0:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019bb6:	83 ec 08             	sub    esp,0x8
c0019bb9:	68 40 53 02 c0       	push   0xc0025340
c0019bbe:	50                   	push   eax
c0019bbf:	e8 ce 8c ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019bc4:	83 c4 10             	add    esp,0x10
c0019bc7:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019bcc:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019bd2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bd6:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0019bd9:	83 ec 08             	sub    esp,0x8
c0019bdc:	52                   	push   edx
c0019bdd:	50                   	push   eax
c0019bde:	e8 69 8c ff ff       	call   c001284c <VgaText::putx(unsigned int)>
c0019be3:	83 c4 10             	add    esp,0x10
c0019be6:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019beb:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019bf1:	83 ec 08             	sub    esp,0x8
c0019bf4:	68 48 53 02 c0       	push   0xc0025348
c0019bf9:	50                   	push   eax
c0019bfa:	e8 93 8c ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019bff:	83 c4 10             	add    esp,0x10
c0019c02:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c07:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019c0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c11:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019c14:	83 ec 08             	sub    esp,0x8
c0019c17:	52                   	push   edx
c0019c18:	50                   	push   eax
c0019c19:	e8 2e 8c ff ff       	call   c001284c <VgaText::putx(unsigned int)>
c0019c1e:	83 c4 10             	add    esp,0x10
c0019c21:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c26:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019c2c:	83 ec 08             	sub    esp,0x8
c0019c2f:	68 50 53 02 c0       	push   0xc0025350
c0019c34:	50                   	push   eax
c0019c35:	e8 58 8c ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019c3a:	83 c4 10             	add    esp,0x10
c0019c3d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c42:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019c48:	83 ec 08             	sub    esp,0x8
c0019c4b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019c4f:	50                   	push   eax
c0019c50:	e8 f7 8b ff ff       	call   c001284c <VgaText::putx(unsigned int)>
c0019c55:	83 c4 10             	add    esp,0x10
c0019c58:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c5d:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019c63:	83 ec 08             	sub    esp,0x8
c0019c66:	68 59 53 02 c0       	push   0xc0025359
c0019c6b:	50                   	push   eax
c0019c6c:	e8 21 8c ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019c71:	83 c4 10             	add    esp,0x10
c0019c74:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c79:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019c7f:	83 ec 08             	sub    esp,0x8
c0019c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c86:	50                   	push   eax
c0019c87:	e8 c0 8b ff ff       	call   c001284c <VgaText::putx(unsigned int)>
c0019c8c:	83 c4 10             	add    esp,0x10
c0019c8f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c94:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019c9a:	83 ec 08             	sub    esp,0x8
c0019c9d:	68 61 53 02 c0       	push   0xc0025361
c0019ca2:	50                   	push   eax
c0019ca3:	e8 ea 8b ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019ca8:	83 c4 10             	add    esp,0x10
c0019cab:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019cb0:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019cb6:	83 ec 08             	sub    esp,0x8
c0019cb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cbd:	50                   	push   eax
c0019cbe:	e8 89 8b ff ff       	call   c001284c <VgaText::putx(unsigned int)>
c0019cc3:	83 c4 10             	add    esp,0x10
c0019cc6:	fa                   	cli    
c0019cc7:	f4                   	hlt    
c0019cc8:	eb fe                	jmp    c0019cc8 <HalDisplayDebugInfo(void*)+0x38c>

c0019cca <HalReceivedNMI()>:
c0019cca:	83 ec 1c             	sub    esp,0x1c
c0019ccd:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0019cd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cd8:	89 c2                	mov    edx,eax
c0019cda:	ec                   	in     al,dx
c0019cdb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0019cdf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0019ce3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019ce7:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0019cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cf2:	89 c2                	mov    edx,eax
c0019cf4:	ec                   	in     al,dx
c0019cf5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019cf9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019cfd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019d01:	83 ec 0c             	sub    esp,0xc
c0019d04:	68 69 53 02 c0       	push   0xc0025369
c0019d09:	e8 56 d2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019d0e:	83 c4 10             	add    esp,0x10
c0019d11:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019d16:	83 e0 10             	and    eax,0x10
c0019d19:	74 10                	je     c0019d2b <HalReceivedNMI()+0x61>
c0019d1b:	83 ec 0c             	sub    esp,0xc
c0019d1e:	68 7a 53 02 c0       	push   0xc002537a
c0019d23:	e8 b6 62 ff ff       	call   c000ffde <KePanic(char const*)>
c0019d28:	83 c4 10             	add    esp,0x10
c0019d2b:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019d30:	83 e0 40             	and    eax,0x40
c0019d33:	74 10                	je     c0019d45 <HalReceivedNMI()+0x7b>
c0019d35:	83 ec 0c             	sub    esp,0xc
c0019d38:	68 87 53 02 c0       	push   0xc0025387
c0019d3d:	e8 9c 62 ff ff       	call   c000ffde <KePanic(char const*)>
c0019d42:	83 c4 10             	add    esp,0x10
c0019d45:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0019d49:	0f be c0             	movsx  eax,al
c0019d4c:	85 c0                	test   eax,eax
c0019d4e:	79 10                	jns    c0019d60 <HalReceivedNMI()+0x96>
c0019d50:	83 ec 0c             	sub    esp,0xc
c0019d53:	68 91 53 02 c0       	push   0xc0025391
c0019d58:	e8 81 62 ff ff       	call   c000ffde <KePanic(char const*)>
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	90                   	nop
c0019d61:	83 c4 1c             	add    esp,0x1c
c0019d64:	c3                   	ret    

c0019d65 <HalSystemIdle()>:
c0019d65:	56                   	push   esi
c0019d66:	53                   	push   ebx
c0019d67:	83 ec 14             	sub    esp,0x14
c0019d6a:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019d6f:	83 e0 10             	and    eax,0x10
c0019d72:	0f b6 c0             	movzx  eax,al
c0019d75:	85 c0                	test   eax,eax
c0019d77:	74 43                	je     c0019dbc <HalSystemIdle()+0x57>
c0019d79:	83 ec 0c             	sub    esp,0xc
c0019d7c:	68 e1 00 00 00       	push   0xe1
c0019d81:	e8 99 f9 ff ff       	call   c001971f <x86rdmsr(unsigned int)>
c0019d86:	83 c4 10             	add    esp,0x10
c0019d89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019d8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019d91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d95:	83 e0 02             	and    eax,0x2
c0019d98:	89 c3                	mov    ebx,eax
c0019d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d9e:	83 e0 00             	and    eax,0x0
c0019da1:	89 c6                	mov    esi,eax
c0019da3:	83 ec 04             	sub    esp,0x4
c0019da6:	56                   	push   esi
c0019da7:	53                   	push   ebx
c0019da8:	68 e1 00 00 00       	push   0xe1
c0019dad:	e8 ab f9 ff ff       	call   c001975d <x86wrmsr(unsigned int, unsigned long long)>
c0019db2:	83 c4 10             	add    esp,0x10
c0019db5:	e8 da 63 fe ff       	call   c0000194 <doTPAUSE>
c0019dba:	eb 01                	jmp    c0019dbd <HalSystemIdle()+0x58>
c0019dbc:	f4                   	hlt    
c0019dbd:	90                   	nop
c0019dbe:	83 c4 14             	add    esp,0x14
c0019dc1:	5b                   	pop    ebx
c0019dc2:	5e                   	pop    esi
c0019dc3:	c3                   	ret    

c0019dc4 <i386SaveCoprocessor(void*)>:
c0019dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dc8:	83 c0 3f             	add    eax,0x3f
c0019dcb:	83 e0 c0             	and    eax,0xffffffc0
c0019dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019dd2:	ff 25 d0 ea 02 c0    	jmp    DWORD PTR ds:0xc002ead0

c0019dd8 <i386LoadCoprocessor(void*)>:
c0019dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ddc:	83 c0 3f             	add    eax,0x3f
c0019ddf:	83 e0 c0             	and    eax,0xffffffc0
c0019de2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019de6:	ff 25 cc ea 02 c0    	jmp    DWORD PTR ds:0xc002eacc

c0019dec <x87EmulHandler(regs*, void*)>:
c0019dec:	53                   	push   ebx
c0019ded:	83 ec 08             	sub    esp,0x8
c0019df0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019df5:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0019df9:	74 10                	je     c0019e0b <x87EmulHandler(regs*, void*)+0x1f>
c0019dfb:	83 ec 0c             	sub    esp,0xc
c0019dfe:	68 9e 53 02 c0       	push   0xc002539e
c0019e03:	e8 d6 61 ff ff       	call   c000ffde <KePanic(char const*)>
c0019e08:	83 c4 10             	add    esp,0x10
c0019e0b:	0f 20 c0             	mov    eax,cr0
c0019e0e:	a8 08                	test   al,0x8
c0019e10:	74 59                	je     c0019e6b <x87EmulHandler(regs*, void*)+0x7f>
c0019e12:	0f 06                	clts   
c0019e14:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0019e19:	85 c0                	test   eax,eax
c0019e1b:	74 0e                	je     c0019e2b <x87EmulHandler(regs*, void*)+0x3f>
c0019e1d:	83 ec 0c             	sub    esp,0xc
c0019e20:	ff 70 59             	push   DWORD PTR [eax+0x59]
c0019e23:	e8 9c ff ff ff       	call   c0019dc4 <i386SaveCoprocessor(void*)>
c0019e28:	83 c4 10             	add    esp,0x10
c0019e2b:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019e31:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c0019e35:	75 12                	jne    c0019e49 <x87EmulHandler(regs*, void*)+0x5d>
c0019e37:	83 ec 0c             	sub    esp,0xc
c0019e3a:	68 40 02 00 00       	push   0x240
c0019e3f:	e8 53 5e ff ff       	call   c000fc97 <malloc>
c0019e44:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c0019e47:	eb 10                	jmp    c0019e59 <x87EmulHandler(regs*, void*)+0x6d>
c0019e49:	83 ec 0c             	sub    esp,0xc
c0019e4c:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0019e51:	ff 70 59             	push   DWORD PTR [eax+0x59]
c0019e54:	e8 7f ff ff ff       	call   c0019dd8 <i386LoadCoprocessor(void*)>
c0019e59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e5e:	83 c4 10             	add    esp,0x10
c0019e61:	a3 c8 ea 02 c0       	mov    ds:0xc002eac8,eax
c0019e66:	83 c4 08             	add    esp,0x8
c0019e69:	5b                   	pop    ebx
c0019e6a:	c3                   	ret    
c0019e6b:	83 ec 0c             	sub    esp,0xc
c0019e6e:	68 b2 53 02 c0       	push   0xc00253b2
c0019e73:	e8 ec d0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019e78:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0019e80:	83 c4 18             	add    esp,0x18
c0019e83:	5b                   	pop    ebx
c0019e84:	e9 b7 d9 ff ff       	jmp    c0017840 <Thr::terminateFromIRQ(int)>

c0019e89 <HalInitialiseCoprocessor()>:
c0019e89:	83 ec 10             	sub    esp,0x10
c0019e8c:	c7 05 c8 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eac8,0x0
c0019e96:	6a 00                	push   0x0
c0019e98:	68 ec 9d 01 c0       	push   0xc0019dec
c0019e9d:	6a 07                	push   0x7
c0019e9f:	e8 9d 06 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ea4:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019ea9:	83 c4 10             	add    esp,0x10
c0019eac:	a8 80                	test   al,0x80
c0019eae:	74 1c                	je     c0019ecc <HalInitialiseCoprocessor()+0x43>
c0019eb0:	c7 05 d0 ea 02 c0 18 15 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc0021518
c0019eba:	c7 05 cc ea 02 c0 20 15 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc0021520
c0019ec4:	83 c4 0c             	add    esp,0xc
c0019ec7:	e9 5c 76 00 00       	jmp    c0021528 <sseInit>
c0019ecc:	a8 10                	test   al,0x10
c0019ece:	74 1c                	je     c0019eec <HalInitialiseCoprocessor()+0x63>
c0019ed0:	c7 05 d0 ea 02 c0 67 15 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc0021567
c0019eda:	c7 05 cc ea 02 c0 6e 15 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc002156e
c0019ee4:	83 c4 0c             	add    esp,0xc
c0019ee7:	e9 89 76 00 00       	jmp    c0021575 <x87Init>
c0019eec:	c7 05 d0 ea 02 c0 1e 86 01 c0 	mov    DWORD PTR ds:0xc002ead0,0xc001861e
c0019ef6:	c7 05 cc ea 02 c0 1e 86 01 c0 	mov    DWORD PTR ds:0xc002eacc,0xc001861e
c0019f00:	0f 20 c0             	mov    eax,cr0
c0019f03:	83 c8 04             	or     eax,0x4
c0019f06:	0f 22 c0             	mov    cr0,eax
c0019f09:	83 c4 0c             	add    esp,0xc
c0019f0c:	c3                   	ret    

c0019f0d <HalPanic(char const*)>:
c0019f0d:	53                   	push   ebx
c0019f0e:	83 ec 10             	sub    esp,0x10
c0019f11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f15:	fa                   	cli    
c0019f16:	53                   	push   ebx
c0019f17:	68 c8 53 02 c0       	push   0xc00253c8
c0019f1c:	e8 43 d0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019f21:	a1 c4 ea 02 c0       	mov    eax,ds:0xc002eac4
c0019f26:	83 c4 10             	add    esp,0x10
c0019f29:	85 c0                	test   eax,eax
c0019f2b:	74 09                	je     c0019f36 <HalPanic(char const*)+0x29>
c0019f2d:	83 ec 0c             	sub    esp,0xc
c0019f30:	53                   	push   ebx
c0019f31:	ff d0                	call   eax
c0019f33:	83 c4 10             	add    esp,0x10
c0019f36:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0019f3b:	85 c0                	test   eax,eax
c0019f3d:	0f 84 dc 00 00 00    	je     c001a01f <HalPanic(char const*)+0x112>
c0019f43:	52                   	push   edx
c0019f44:	6a 01                	push   0x1
c0019f46:	6a 0f                	push   0xf
c0019f48:	50                   	push   eax
c0019f49:	e8 36 84 ff ff       	call   c0012384 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019f4e:	59                   	pop    ecx
c0019f4f:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019f55:	e8 36 86 ff ff       	call   c0012590 <VgaText::clearScreen()>
c0019f5a:	58                   	pop    eax
c0019f5b:	5a                   	pop    edx
c0019f5c:	68 08 44 02 c0       	push   0xc0024408
c0019f61:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019f67:	e8 50 84 ff ff       	call   c00123bc <VgaText::setTitle(char*)>
c0019f6c:	83 c4 0c             	add    esp,0xc
c0019f6f:	6a 01                	push   0x1
c0019f71:	6a 0f                	push   0xf
c0019f73:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019f79:	e8 06 84 ff ff       	call   c0012384 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019f7e:	59                   	pop    ecx
c0019f7f:	58                   	pop    eax
c0019f80:	68 e1 53 02 c0       	push   0xc00253e1
c0019f85:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019f8b:	e8 02 89 ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019f90:	83 c4 0c             	add    esp,0xc
c0019f93:	6a 0f                	push   0xf
c0019f95:	6a 01                	push   0x1
c0019f97:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019f9d:	e8 e2 83 ff ff       	call   c0012384 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019fa2:	58                   	pop    eax
c0019fa3:	5a                   	pop    edx
c0019fa4:	68 ea 53 02 c0       	push   0xc00253ea
c0019fa9:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019faf:	e8 de 88 ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019fb4:	83 c4 0c             	add    esp,0xc
c0019fb7:	6a 01                	push   0x1
c0019fb9:	6a 0f                	push   0xf
c0019fbb:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019fc1:	e8 be 83 ff ff       	call   c0012384 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019fc6:	59                   	pop    ecx
c0019fc7:	58                   	pop    eax
c0019fc8:	68 2e 54 02 c0       	push   0xc002542e
c0019fcd:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019fd3:	e8 ba 88 ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019fd8:	58                   	pop    eax
c0019fd9:	5a                   	pop    edx
c0019fda:	68 f7 53 02 c0       	push   0xc00253f7
c0019fdf:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019fe5:	e8 a8 88 ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019fea:	59                   	pop    ecx
c0019feb:	58                   	pop    eax
c0019fec:	68 31 54 02 c0       	push   0xc0025431
c0019ff1:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019ff7:	e8 96 88 ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0019ffc:	58                   	pop    eax
c0019ffd:	5a                   	pop    edx
c0019ffe:	53                   	push   ebx
c0019fff:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a005:	e8 88 88 ff ff       	call   c0012892 <VgaText::puts(char const*)>
c001a00a:	59                   	pop    ecx
c001a00b:	5b                   	pop    ebx
c001a00c:	68 2e 54 02 c0       	push   0xc002542e
c001a011:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a017:	e8 76 88 ff ff       	call   c0012892 <VgaText::puts(char const*)>
c001a01c:	83 c4 10             	add    esp,0x10
c001a01f:	eb fe                	jmp    c001a01f <HalPanic(char const*)+0x112>

c001a021 <HalQueryPerformanceCounter()>:
c001a021:	31 c0                	xor    eax,eax
c001a023:	31 d2                	xor    edx,edx
c001a025:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c001a02c:	75 02                	jne    c001a030 <HalQueryPerformanceCounter()+0xf>
c001a02e:	0f 31                	rdtsc  
c001a030:	c3                   	ret    

c001a031 <HalInitialise()>:
c001a031:	53                   	push   ebx
c001a032:	83 ec 08             	sub    esp,0x8
c001a035:	c6 05 c0 ea 02 c0 00 	mov    BYTE PTR ds:0xc002eac0,0x0
c001a03c:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001a041:	83 e0 fe             	and    eax,0xfffffffe
c001a044:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001a049:	e8 d2 07 00 00       	call   c001a820 <picOpen()>
c001a04e:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c001a055:	74 0a                	je     c001a061 <HalInitialise()+0x30>
c001a057:	e8 14 07 00 00       	call   c001a770 <picDisable()>
c001a05c:	e8 c5 6a 00 00       	call   c0020b26 <apicOpen()>
c001a061:	bb 0f 00 00 00       	mov    ebx,0xf
c001a066:	50                   	push   eax
c001a067:	6a 00                	push   0x0
c001a069:	68 58 ec 00 c0       	push   0xc000ec58
c001a06e:	6a 00                	push   0x0
c001a070:	e8 cc 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a075:	83 c4 0c             	add    esp,0xc
c001a078:	6a 00                	push   0x0
c001a07a:	68 58 ec 00 c0       	push   0xc000ec58
c001a07f:	6a 01                	push   0x1
c001a081:	e8 bb 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a086:	83 c4 0c             	add    esp,0xc
c001a089:	6a 00                	push   0x0
c001a08b:	68 48 ec 00 c0       	push   0xc000ec48
c001a090:	6a 02                	push   0x2
c001a092:	e8 aa 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a097:	83 c4 0c             	add    esp,0xc
c001a09a:	6a 00                	push   0x0
c001a09c:	68 58 ec 00 c0       	push   0xc000ec58
c001a0a1:	6a 03                	push   0x3
c001a0a3:	e8 99 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0a8:	83 c4 0c             	add    esp,0xc
c001a0ab:	6a 00                	push   0x0
c001a0ad:	68 58 ec 00 c0       	push   0xc000ec58
c001a0b2:	6a 04                	push   0x4
c001a0b4:	e8 88 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0b9:	83 c4 0c             	add    esp,0xc
c001a0bc:	6a 00                	push   0x0
c001a0be:	68 58 ec 00 c0       	push   0xc000ec58
c001a0c3:	6a 05                	push   0x5
c001a0c5:	e8 77 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0ca:	83 c4 0c             	add    esp,0xc
c001a0cd:	6a 00                	push   0x0
c001a0cf:	68 8c ec 00 c0       	push   0xc000ec8c
c001a0d4:	6a 06                	push   0x6
c001a0d6:	e8 66 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0db:	83 c4 0c             	add    esp,0xc
c001a0de:	6a 00                	push   0x0
c001a0e0:	68 e0 ec 00 c0       	push   0xc000ece0
c001a0e5:	6a 08                	push   0x8
c001a0e7:	e8 55 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0ec:	83 c4 0c             	add    esp,0xc
c001a0ef:	6a 00                	push   0x0
c001a0f1:	68 58 ec 00 c0       	push   0xc000ec58
c001a0f6:	6a 09                	push   0x9
c001a0f8:	e8 44 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0fd:	83 c4 0c             	add    esp,0xc
c001a100:	6a 00                	push   0x0
c001a102:	68 58 ec 00 c0       	push   0xc000ec58
c001a107:	6a 0a                	push   0xa
c001a109:	e8 33 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a10e:	83 c4 0c             	add    esp,0xc
c001a111:	6a 00                	push   0x0
c001a113:	68 58 ec 00 c0       	push   0xc000ec58
c001a118:	6a 0b                	push   0xb
c001a11a:	e8 22 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a11f:	83 c4 0c             	add    esp,0xc
c001a122:	6a 00                	push   0x0
c001a124:	68 90 eb 00 c0       	push   0xc000eb90
c001a129:	6a 0d                	push   0xd
c001a12b:	e8 11 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a130:	83 c4 0c             	add    esp,0xc
c001a133:	6a 00                	push   0x0
c001a135:	68 e4 eb 00 c0       	push   0xc000ebe4
c001a13a:	6a 0e                	push   0xe
c001a13c:	e8 00 04 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a141:	83 c4 10             	add    esp,0x10
c001a144:	50                   	push   eax
c001a145:	6a 00                	push   0x0
c001a147:	68 58 ec 00 c0       	push   0xc000ec58
c001a14c:	53                   	push   ebx
c001a14d:	43                   	inc    ebx
c001a14e:	e8 ee 03 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a153:	83 c4 10             	add    esp,0x10
c001a156:	83 fb 1e             	cmp    ebx,0x1e
c001a159:	75 e9                	jne    c001a144 <HalInitialise()+0x113>
c001a15b:	50                   	push   eax
c001a15c:	6a 00                	push   0x0
c001a15e:	68 1e 22 01 c0       	push   0xc001221e
c001a163:	6a 60                	push   0x60
c001a165:	e8 d7 03 00 00       	call   c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a16a:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001a16f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001a179:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a180:	e8 12 5b ff ff       	call   c000fc97 <malloc>
c001a185:	89 04 24             	mov    DWORD PTR [esp],eax
c001a188:	89 c3                	mov    ebx,eax
c001a18a:	e8 ff 0d 00 00       	call   c001af8e <RTC::RTC()>
c001a18f:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a199:	5a                   	pop    edx
c001a19a:	59                   	pop    ecx
c001a19b:	53                   	push   ebx
c001a19c:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c001a1a2:	e8 55 f8 fe ff       	call   c00099fc <Device::addChild(Device*)>
c001a1a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1a9:	6a 00                	push   0x0
c001a1ab:	6a 00                	push   0x0
c001a1ad:	6a 00                	push   0x0
c001a1af:	53                   	push   ebx
c001a1b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1b3:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001a1b8:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001a1be:	83 c4 28             	add    esp,0x28
c001a1c1:	5b                   	pop    ebx
c001a1c2:	c3                   	ret    

c001a1c3 <HalMakeBeep(int)>:
c001a1c3:	53                   	push   ebx
c001a1c4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a1c8:	85 db                	test   ebx,ebx
c001a1ca:	75 07                	jne    c001a1d3 <HalMakeBeep(int)+0x10>
c001a1cc:	e4 61                	in     al,0x61
c001a1ce:	83 e0 fc             	and    eax,0xfffffffc
c001a1d1:	eb 26                	jmp    c001a1f9 <HalMakeBeep(int)+0x36>
c001a1d3:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a1d8:	99                   	cdq    
c001a1d9:	f7 fb                	idiv   ebx
c001a1db:	89 c1                	mov    ecx,eax
c001a1dd:	b0 b6                	mov    al,0xb6
c001a1df:	e6 43                	out    0x43,al
c001a1e1:	88 c8                	mov    al,cl
c001a1e3:	e6 42                	out    0x42,al
c001a1e5:	89 c8                	mov    eax,ecx
c001a1e7:	c1 e8 08             	shr    eax,0x8
c001a1ea:	e6 42                	out    0x42,al
c001a1ec:	e4 61                	in     al,0x61
c001a1ee:	89 c2                	mov    edx,eax
c001a1f0:	83 ca 03             	or     edx,0x3
c001a1f3:	38 d0                	cmp    al,dl
c001a1f5:	74 04                	je     c001a1fb <HalMakeBeep(int)+0x38>
c001a1f7:	88 d0                	mov    al,dl
c001a1f9:	e6 61                	out    0x61,al
c001a1fb:	5b                   	pop    ebx
c001a1fc:	c3                   	ret    

c001a1fd <HalGetRand()>:
c001a1fd:	31 c0                	xor    eax,eax
c001a1ff:	c3                   	ret    

c001a200 <HalEndOfInterrupt(int)>:
c001a200:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c001a207:	74 1d                	je     c001a226 <HalEndOfInterrupt(int)+0x26>
c001a209:	83 ec 18             	sub    esp,0x18
c001a20c:	6a 1b                	push   0x1b
c001a20e:	e8 0c f5 ff ff       	call   c001971f <x86rdmsr(unsigned int)>
c001a213:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a218:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a222:	83 c4 1c             	add    esp,0x1c
c001a225:	c3                   	ret    
c001a226:	e9 79 07 00 00       	jmp    c001a9a4 <picEOI(int)>

c001a22b <HalRestart()>:
c001a22b:	c3                   	ret    

c001a22c <HalShutdown()>:
c001a22c:	c3                   	ret    

c001a22d <HalSleep()>:
c001a22d:	c3                   	ret    

c001a22e <CPU::CPU()>:
c001a22e:	83 ec 0c             	sub    esp,0xc
c001a231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a235:	83 ec 08             	sub    esp,0x8
c001a238:	68 a3 51 02 c0       	push   0xc00251a3
c001a23d:	50                   	push   eax
c001a23e:	e8 1b f9 fe ff       	call   c0009b5e <Device::Device(char const*)>
c001a243:	83 c4 10             	add    esp,0x10
c001a246:	ba 00 55 02 c0       	mov    edx,0xc0025500
c001a24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a24f:	89 10                	mov    DWORD PTR [eax],edx
c001a251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a255:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a263:	05 64 01 00 00       	add    eax,0x164
c001a268:	83 ec 0c             	sub    esp,0xc
c001a26b:	50                   	push   eax
c001a26c:	e8 c3 4a ff ff       	call   c000ed34 <GDT::GDT()>
c001a271:	83 c4 10             	add    esp,0x10
c001a274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a278:	05 68 09 00 00       	add    eax,0x968
c001a27d:	83 ec 0c             	sub    esp,0xc
c001a280:	50                   	push   eax
c001a281:	e8 02 4d ff ff       	call   c000ef88 <IDT::IDT()>
c001a286:	83 c4 10             	add    esp,0x10
c001a289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a28d:	05 68 11 00 00       	add    eax,0x1168
c001a292:	83 ec 0c             	sub    esp,0xc
c001a295:	50                   	push   eax
c001a296:	e8 d1 8a ff ff       	call   c0012d6c <TSS::TSS()>
c001a29b:	83 c4 10             	add    esp,0x10
c001a29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2a2:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a2ac:	90                   	nop
c001a2ad:	83 c4 0c             	add    esp,0xc
c001a2b0:	c3                   	ret    
c001a2b1:	90                   	nop

c001a2b2 <CPU::setupSMEP()>:
c001a2b2:	0f 20 e0             	mov    eax,cr4
c001a2b5:	0d 00 00 10 00       	or     eax,0x100000
c001a2ba:	0f 22 e0             	mov    cr4,eax
c001a2bd:	c3                   	ret    

c001a2be <CPU::setupUMIP()>:
c001a2be:	0f 20 e0             	mov    eax,cr4
c001a2c1:	80 cc 08             	or     ah,0x8
c001a2c4:	0f 22 e0             	mov    cr4,eax
c001a2c7:	c3                   	ret    

c001a2c8 <CPU::setupTSC()>:
c001a2c8:	0f 20 e0             	mov    eax,cr4
c001a2cb:	83 c8 04             	or     eax,0x4
c001a2ce:	0f 22 e0             	mov    cr4,eax
c001a2d1:	c3                   	ret    

c001a2d2 <CPU::setupLargePages()>:
c001a2d2:	0f 20 e0             	mov    eax,cr4
c001a2d5:	83 c8 10             	or     eax,0x10
c001a2d8:	0f 22 e0             	mov    cr4,eax
c001a2db:	c3                   	ret    

c001a2dc <CPU::setupPAT()>:
c001a2dc:	f6 05 0c eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0c,0x8
c001a2e3:	74 28                	je     c001a30d <CPU::setupPAT()+0x31>
c001a2e5:	53                   	push   ebx
c001a2e6:	83 ec 14             	sub    esp,0x14
c001a2e9:	68 77 02 00 00       	push   0x277
c001a2ee:	e8 2c f4 ff ff       	call   c001971f <x86rdmsr(unsigned int)>
c001a2f3:	83 c4 0c             	add    esp,0xc
c001a2f6:	83 e2 f8             	and    edx,0xfffffff8
c001a2f9:	83 ca 01             	or     edx,0x1
c001a2fc:	52                   	push   edx
c001a2fd:	50                   	push   eax
c001a2fe:	68 77 02 00 00       	push   0x277
c001a303:	e8 55 f4 ff ff       	call   c001975d <x86wrmsr(unsigned int, unsigned long long)>
c001a308:	83 c4 18             	add    esp,0x18
c001a30b:	5b                   	pop    ebx
c001a30c:	c3                   	ret    
c001a30d:	c3                   	ret    

c001a30e <CPU::setupMTRR()>:
c001a30e:	c3                   	ret    
c001a30f:	90                   	nop

c001a310 <CPU::setupGlobalPages()>:
c001a310:	0f 20 e0             	mov    eax,cr4
c001a313:	0c 80                	or     al,0x80
c001a315:	0f 22 e0             	mov    cr4,eax
c001a318:	c3                   	ret    
c001a319:	90                   	nop

c001a31a <CPU::allowUsermodeDataAccess()>:
c001a31a:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c001a321:	74 03                	je     c001a326 <CPU::allowUsermodeDataAccess()+0xc>
c001a323:	0f 01 cb             	stac   
c001a326:	c3                   	ret    
c001a327:	90                   	nop

c001a328 <CPU::prohibitUsermodeDataAccess()>:
c001a328:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c001a32f:	74 03                	je     c001a334 <CPU::prohibitUsermodeDataAccess()+0xc>
c001a331:	0f 01 ca             	clac   
c001a334:	c3                   	ret    
c001a335:	90                   	nop

c001a336 <CPU::setupSMAP()>:
c001a336:	0f 20 e0             	mov    eax,cr4
c001a339:	0d 00 00 20 00       	or     eax,0x200000
c001a33e:	0f 22 e0             	mov    cr4,eax
c001a341:	eb e5                	jmp    c001a328 <CPU::prohibitUsermodeDataAccess()>
c001a343:	90                   	nop

c001a344 <CPU::setupFeatures()>:
c001a344:	53                   	push   ebx
c001a345:	83 ec 08             	sub    esp,0x8
c001a348:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a34c:	f6 05 0f eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0f,0x20
c001a353:	74 18                	je     c001a36d <CPU::setupFeatures()+0x29>
c001a355:	83 ec 0c             	sub    esp,0xc
c001a358:	68 3c 54 02 c0       	push   0xc002543c
c001a35d:	e8 02 cc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a362:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a365:	e8 54 ff ff ff       	call   c001a2be <CPU::setupUMIP()>
c001a36a:	83 c4 10             	add    esp,0x10
c001a36d:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c001a374:	74 18                	je     c001a38e <CPU::setupFeatures()+0x4a>
c001a376:	83 ec 0c             	sub    esp,0xc
c001a379:	68 46 54 02 c0       	push   0xc0025446
c001a37e:	e8 e1 cb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a383:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a386:	e8 3d ff ff ff       	call   c001a2c8 <CPU::setupTSC()>
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	f6 05 0e eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0e,0x20
c001a395:	74 18                	je     c001a3af <CPU::setupFeatures()+0x6b>
c001a397:	83 ec 0c             	sub    esp,0xc
c001a39a:	68 4f 54 02 c0       	push   0xc002544f
c001a39f:	e8 c0 cb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a3a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3a7:	e8 26 ff ff ff       	call   c001a2d2 <CPU::setupLargePages()>
c001a3ac:	83 c4 10             	add    esp,0x10
c001a3af:	f6 05 0e eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0e,0x40
c001a3b6:	74 18                	je     c001a3d0 <CPU::setupFeatures()+0x8c>
c001a3b8:	83 ec 0c             	sub    esp,0xc
c001a3bb:	68 58 54 02 c0       	push   0xc0025458
c001a3c0:	e8 9f cb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a3c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3c8:	e8 43 ff ff ff       	call   c001a310 <CPU::setupGlobalPages()>
c001a3cd:	83 c4 10             	add    esp,0x10
c001a3d0:	f6 05 0e eb 02 c0 80 	test   BYTE PTR ds:0xc002eb0e,0x80
c001a3d7:	74 18                	je     c001a3f1 <CPU::setupFeatures()+0xad>
c001a3d9:	83 ec 0c             	sub    esp,0xc
c001a3dc:	68 6a 54 02 c0       	push   0xc002546a
c001a3e1:	e8 7e cb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a3e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3e9:	e8 ee fe ff ff       	call   c001a2dc <CPU::setupPAT()>
c001a3ee:	83 c4 10             	add    esp,0x10
c001a3f1:	f6 05 10 eb 02 c0 04 	test   BYTE PTR ds:0xc002eb10,0x4
c001a3f8:	74 11                	je     c001a40b <CPU::setupFeatures()+0xc7>
c001a3fa:	c7 44 24 10 73 54 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025473
c001a402:	83 c4 08             	add    esp,0x8
c001a405:	5b                   	pop    ebx
c001a406:	e9 59 cb fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c001a40b:	83 c4 08             	add    esp,0x8
c001a40e:	5b                   	pop    ebx
c001a40f:	c3                   	ret    

c001a410 <CPU::open(int, int, void*)>:
c001a410:	55                   	push   ebp
c001a411:	57                   	push   edi
c001a412:	56                   	push   esi
c001a413:	53                   	push   ebx
c001a414:	83 ec 18             	sub    esp,0x18
c001a417:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a41b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a41f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a423:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001a429:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001a42f:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001a435:	50                   	push   eax
c001a436:	e8 5b 49 ff ff       	call   c000ed96 <GDT::setup()>
c001a43b:	83 c4 0c             	add    esp,0xc
c001a43e:	6a 00                	push   0x0
c001a440:	68 ef be ad de       	push   0xdeadbeef
c001a445:	55                   	push   ebp
c001a446:	e8 65 89 ff ff       	call   c0012db0 <TSS::setup(unsigned long, unsigned long)>
c001a44b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a44e:	e8 3d 89 ff ff       	call   c0012d90 <TSS::flush()>
c001a453:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001a459:	89 04 24             	mov    DWORD PTR [esp],eax
c001a45c:	e8 9d 4b ff ff       	call   c000effe <IDT::setup()>
c001a461:	b8 00 04 00 00       	mov    eax,0x400
c001a466:	0f 23 f8             	mov    dr7,eax
c001a469:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001a473:	e8 5a 5d ff ff       	call   c00101d2 <Phys::allocatePage()>
c001a478:	83 c4 10             	add    esp,0x10
c001a47b:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001a481:	85 f6                	test   esi,esi
c001a483:	89 38                	mov    DWORD PTR [eax],edi
c001a485:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a48b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a48e:	74 10                	je     c001a4a0 <CPU::open(int, int, void*)+0x90>
c001a490:	50                   	push   eax
c001a491:	50                   	push   eax
c001a492:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a498:	56                   	push   esi
c001a499:	e8 cc 92 ff ff       	call   c001376a <VAS::setCPUSpecific(unsigned long)>
c001a49e:	eb 0d                	jmp    c001a4ad <CPU::open(int, int, void*)+0x9d>
c001a4a0:	83 ec 0c             	sub    esp,0xc
c001a4a3:	68 7d 54 02 c0       	push   0xc002547d
c001a4a8:	e8 31 5b ff ff       	call   c000ffde <KePanic(char const*)>
c001a4ad:	83 c4 10             	add    esp,0x10
c001a4b0:	83 ec 0c             	sub    esp,0xc
c001a4b3:	68 8b 54 02 c0       	push   0xc002548b
c001a4b8:	e8 a2 2d ff ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001a4bd:	e8 6f fb ff ff       	call   c001a031 <HalInitialise()>
c001a4c2:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c001a4c7:	83 e0 10             	and    eax,0x10
c001a4ca:	83 f8 01             	cmp    eax,0x1
c001a4cd:	19 c0                	sbb    eax,eax
c001a4cf:	83 e0 46             	and    eax,0x46
c001a4d2:	83 c0 1e             	add    eax,0x1e
c001a4d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4d8:	e8 b8 0b ff ff       	call   c000b095 <setupTimer(int)>
c001a4dd:	83 c4 10             	add    esp,0x10
c001a4e0:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001a4e6:	f6 05 24 e1 02 c0 20 	test   BYTE PTR ds:0xc002e124,0x20
c001a4ed:	74 0c                	je     c001a4fb <CPU::open(int, int, void*)+0xeb>
c001a4ef:	83 ec 0c             	sub    esp,0xc
c001a4f2:	53                   	push   ebx
c001a4f3:	e8 4c fe ff ff       	call   c001a344 <CPU::setupFeatures()>
c001a4f8:	83 c4 10             	add    esp,0x10
c001a4fb:	83 c4 0c             	add    esp,0xc
c001a4fe:	31 c0                	xor    eax,eax
c001a500:	5b                   	pop    ebx
c001a501:	5e                   	pop    esi
c001a502:	5f                   	pop    edi
c001a503:	5d                   	pop    ebp
c001a504:	c3                   	ret    

c001a505 <convertLegacyIRQNumber(int)>:
c001a505:	83 ec 0c             	sub    esp,0xc
c001a508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a50c:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a513:	74 0c                	je     c001a521 <convertLegacyIRQNumber(int)+0x1c>
c001a515:	83 f8 0f             	cmp    eax,0xf
c001a518:	7f 0b                	jg     c001a525 <convertLegacyIRQNumber(int)+0x20>
c001a51a:	0f b6 80 68 60 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9f98]
c001a521:	83 c4 0c             	add    esp,0xc
c001a524:	c3                   	ret    
c001a525:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a529:	83 ec 0c             	sub    esp,0xc
c001a52c:	68 24 55 02 c0       	push   0xc0025524
c001a531:	e8 a8 5a ff ff       	call   c000ffde <KePanic(char const*)>
c001a536:	83 c4 10             	add    esp,0x10
c001a539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a53d:	83 c4 0c             	add    esp,0xc
c001a540:	c3                   	ret    

c001a541 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001a541:	56                   	push   esi
c001a542:	31 c0                	xor    eax,eax
c001a544:	53                   	push   ebx
c001a545:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a549:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a54d:	89 ca                	mov    edx,ecx
c001a54f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a553:	c1 e2 04             	shl    edx,0x4
c001a556:	83 bc 82 e0 d0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd2f20],0x0
c001a55e:	74 17                	je     c001a577 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001a560:	83 c0 01             	add    eax,0x1
c001a563:	83 f8 04             	cmp    eax,0x4
c001a566:	75 ee                	jne    c001a556 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001a568:	c7 44 24 0c 85 55 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025585
c001a570:	5b                   	pop    ebx
c001a571:	5e                   	pop    esi
c001a572:	e9 67 5a ff ff       	jmp    c000ffde <KePanic(char const*)>
c001a577:	8d 04 88             	lea    eax,[eax+ecx*4]
c001a57a:	89 1c 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],ebx
c001a581:	89 34 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],esi
c001a588:	5b                   	pop    ebx
c001a589:	5e                   	pop    esi
c001a58a:	c3                   	ret    

c001a58b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001a58b:	57                   	push   edi
c001a58c:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a593:	56                   	push   esi
c001a594:	53                   	push   ebx
c001a595:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a599:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a59d:	74 54                	je     c001a5f3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001a59f:	89 c7                	mov    edi,eax
c001a5a1:	84 c0                	test   al,al
c001a5a3:	74 1d                	je     c001a5c2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001a5a5:	83 fe 0f             	cmp    esi,0xf
c001a5a8:	0f 8f d5 00 00 00    	jg     c001a683 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001a5ae:	0f b6 b6 68 60 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9f98]
c001a5b5:	0f b7 bc 36 20 be 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd41e0]
c001a5bd:	d1 ef                	shr    edi,1
c001a5bf:	83 e7 01             	and    edi,0x1
c001a5c2:	83 ec 08             	sub    esp,0x8
c001a5c5:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a5ca:	31 db                	xor    ebx,ebx
c001a5cc:	50                   	push   eax
c001a5cd:	68 92 55 02 c0       	push   0xc0025592
c001a5d2:	e8 8d c9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a5d7:	83 c4 10             	add    esp,0x10
c001a5da:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a5df:	85 c0                	test   eax,eax
c001a5e1:	7f 55                	jg     c001a638 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001a5e3:	83 ec 0c             	sub    esp,0xc
c001a5e6:	68 a9 55 02 c0       	push   0xc00255a9
c001a5eb:	e8 ee 59 ff ff       	call   c000ffde <KePanic(char const*)>
c001a5f0:	83 c4 10             	add    esp,0x10
c001a5f3:	8d 7e 20             	lea    edi,[esi+0x20]
c001a5f6:	89 f8                	mov    eax,edi
c001a5f8:	31 d2                	xor    edx,edx
c001a5fa:	c1 e0 04             	shl    eax,0x4
c001a5fd:	8b 8c 90 e0 d0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd2f20]
c001a604:	85 c9                	test   ecx,ecx
c001a606:	0f 84 8e 00 00 00    	je     c001a69a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001a60c:	83 c2 01             	add    edx,0x1
c001a60f:	83 fa 04             	cmp    edx,0x4
c001a612:	75 e9                	jne    c001a5fd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001a614:	83 ec 0c             	sub    esp,0xc
c001a617:	68 60 55 02 c0       	push   0xc0025560
c001a61c:	e8 bd 59 ff ff       	call   c000ffde <KePanic(char const*)>
c001a621:	83 c4 10             	add    esp,0x10
c001a624:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a629:	5b                   	pop    ebx
c001a62a:	5e                   	pop    esi
c001a62b:	5f                   	pop    edi
c001a62c:	c3                   	ret    
c001a62d:	83 c3 01             	add    ebx,0x1
c001a630:	39 1d 60 f4 02 c0    	cmp    DWORD PTR ds:0xc002f460,ebx
c001a636:	7e ab                	jle    c001a5e3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001a638:	83 ec 08             	sub    esp,0x8
c001a63b:	8b 04 9d 80 f4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0b80]
c001a642:	56                   	push   esi
c001a643:	50                   	push   eax
c001a644:	e8 69 66 00 00       	call   c0020cb2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001a649:	83 c4 10             	add    esp,0x10
c001a64c:	84 c0                	test   al,al
c001a64e:	74 dd                	je     c001a62d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001a650:	83 ec 04             	sub    esp,0x4
c001a653:	89 f8                	mov    eax,edi
c001a655:	8b 1c 9d 80 f4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0b80]
c001a65c:	0f b6 f8             	movzx  edi,al
c001a65f:	57                   	push   edi
c001a660:	8d 7e 20             	lea    edi,[esi+0x20]
c001a663:	6a 00                	push   0x0
c001a665:	89 f8                	mov    eax,edi
c001a667:	0f b6 c0             	movzx  eax,al
c001a66a:	50                   	push   eax
c001a66b:	89 f0                	mov    eax,esi
c001a66d:	6a 00                	push   0x0
c001a66f:	0f b6 c0             	movzx  eax,al
c001a672:	6a 00                	push   0x0
c001a674:	50                   	push   eax
c001a675:	53                   	push   ebx
c001a676:	e8 a3 67 00 00       	call   c0020e1e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001a67b:	83 c4 20             	add    esp,0x20
c001a67e:	e9 73 ff ff ff       	jmp    c001a5f6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001a683:	83 ec 0c             	sub    esp,0xc
c001a686:	31 ff                	xor    edi,edi
c001a688:	68 24 55 02 c0       	push   0xc0025524
c001a68d:	e8 4c 59 ff ff       	call   c000ffde <KePanic(char const*)>
c001a692:	83 c4 10             	add    esp,0x10
c001a695:	e9 28 ff ff ff       	jmp    c001a5c2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001a69a:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a69d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6a1:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001a6a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a6ac:	5b                   	pop    ebx
c001a6ad:	89 14 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],edx
c001a6b4:	89 f0                	mov    eax,esi
c001a6b6:	5e                   	pop    esi
c001a6b7:	5f                   	pop    edi
c001a6b8:	c3                   	ret    

c001a6b9 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001a6b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a6c1:	c1 e0 04             	shl    eax,0x4
c001a6c4:	8d 50 10             	lea    edx,[eax+0x10]
c001a6c7:	39 88 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],ecx
c001a6cd:	74 08                	je     c001a6d7 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001a6cf:	83 c0 04             	add    eax,0x4
c001a6d2:	39 d0                	cmp    eax,edx
c001a6d4:	75 f1                	jne    c001a6c7 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001a6d6:	c3                   	ret    
c001a6d7:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a6e1:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a6eb:	eb e2                	jmp    c001a6cf <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001a6ed <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001a6ed:	53                   	push   ebx
c001a6ee:	83 ec 08             	sub    esp,0x8
c001a6f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6f5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a6fa:	74 09                	je     c001a705 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001a6fc:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a703:	75 37                	jne    c001a73c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001a705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a709:	83 c0 20             	add    eax,0x20
c001a70c:	c1 e0 04             	shl    eax,0x4
c001a70f:	8d 50 10             	lea    edx,[eax+0x10]
c001a712:	39 98 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],ebx
c001a718:	74 0c                	je     c001a726 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001a71a:	83 c0 04             	add    eax,0x4
c001a71d:	39 d0                	cmp    eax,edx
c001a71f:	75 f1                	jne    c001a712 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001a721:	83 c4 08             	add    esp,0x8
c001a724:	5b                   	pop    ebx
c001a725:	c3                   	ret    
c001a726:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a730:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a73a:	eb de                	jmp    c001a71a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001a73c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001a741:	7f 11                	jg     c001a754 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001a743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a747:	0f b6 80 68 60 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9f98]
c001a74e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a752:	eb b1                	jmp    c001a705 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001a754:	83 ec 0c             	sub    esp,0xc
c001a757:	68 b6 55 02 c0       	push   0xc00255b6
c001a75c:	e8 7d 58 ff ff       	call   c000ffde <KePanic(char const*)>
c001a761:	83 c4 10             	add    esp,0x10
c001a764:	eb 9f                	jmp    c001a705 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001a766:	66 90                	xchg   ax,ax

c001a768 <picIoWait()>:
c001a768:	eb 00                	jmp    c001a76a <picIoWait()+0x2>
c001a76a:	eb 00                	jmp    c001a76c <picIoWait()+0x4>
c001a76c:	90                   	nop
c001a76d:	c3                   	ret    
c001a76e:	66 90                	xchg   ax,ax

c001a770 <picDisable()>:
c001a770:	83 ec 10             	sub    esp,0x10
c001a773:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001a77a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001a77f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a783:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a788:	ee                   	out    dx,al
c001a789:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001a790:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001a795:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a799:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001a79e:	ee                   	out    dx,al
c001a79f:	90                   	nop
c001a7a0:	83 c4 10             	add    esp,0x10
c001a7a3:	c3                   	ret    

c001a7a4 <picGetIRQReg(int)>:
c001a7a4:	83 ec 10             	sub    esp,0x10
c001a7a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7ab:	0f b6 c0             	movzx  eax,al
c001a7ae:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a7b5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001a7b9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a7bd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a7c2:	ee                   	out    dx,al
c001a7c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7c7:	0f b6 c0             	movzx  eax,al
c001a7ca:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a7d1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001a7d5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a7d9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a7de:	ee                   	out    dx,al
c001a7df:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001a7e6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001a7eb:	89 c2                	mov    edx,eax
c001a7ed:	ec                   	in     al,dx
c001a7ee:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a7f2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a7f6:	0f b6 c0             	movzx  eax,al
c001a7f9:	c1 e0 08             	shl    eax,0x8
c001a7fc:	89 c1                	mov    ecx,eax
c001a7fe:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001a805:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001a80a:	89 c2                	mov    edx,eax
c001a80c:	ec                   	in     al,dx
c001a80d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a811:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a815:	0f b6 c0             	movzx  eax,al
c001a818:	09 c8                	or     eax,ecx
c001a81a:	83 c4 10             	add    esp,0x10
c001a81d:	c3                   	ret    
c001a81e:	66 90                	xchg   ax,ax

c001a820 <picOpen()>:
c001a820:	83 ec 50             	sub    esp,0x50
c001a823:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001a82a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001a82f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a833:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a837:	ee                   	out    dx,al
c001a838:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001a83f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a844:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a848:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a84c:	ee                   	out    dx,al
c001a84d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001a855:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001a85d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001a864:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a868:	89 c2                	mov    edx,eax
c001a86a:	ec                   	in     al,dx
c001a86b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a86f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a873:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001a877:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001a87e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a882:	89 c2                	mov    edx,eax
c001a884:	ec                   	in     al,dx
c001a885:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a889:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a88d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001a891:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001a898:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001a89d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a8a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a8a5:	ee                   	out    dx,al
c001a8a6:	e8 bd fe ff ff       	call   c001a768 <picIoWait()>
c001a8ab:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001a8b2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001a8b7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001a8bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a8bf:	ee                   	out    dx,al
c001a8c0:	e8 a3 fe ff ff       	call   c001a768 <picIoWait()>
c001a8c5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a8c9:	0f b6 c0             	movzx  eax,al
c001a8cc:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001a8d3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001a8d7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001a8db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a8df:	ee                   	out    dx,al
c001a8e0:	e8 83 fe ff ff       	call   c001a768 <picIoWait()>
c001a8e5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a8e9:	0f b6 c0             	movzx  eax,al
c001a8ec:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001a8f3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a8f7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a8fb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a8ff:	ee                   	out    dx,al
c001a900:	e8 63 fe ff ff       	call   c001a768 <picIoWait()>
c001a905:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001a90c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001a911:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001a915:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a919:	ee                   	out    dx,al
c001a91a:	e8 49 fe ff ff       	call   c001a768 <picIoWait()>
c001a91f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001a926:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001a92b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a92f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a933:	ee                   	out    dx,al
c001a934:	e8 2f fe ff ff       	call   c001a768 <picIoWait()>
c001a939:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001a940:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001a945:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001a949:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a94d:	ee                   	out    dx,al
c001a94e:	e8 15 fe ff ff       	call   c001a768 <picIoWait()>
c001a953:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001a95a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001a95f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001a963:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a967:	ee                   	out    dx,al
c001a968:	e8 fb fd ff ff       	call   c001a768 <picIoWait()>
c001a96d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001a972:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001a979:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001a97d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001a981:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a985:	ee                   	out    dx,al
c001a986:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001a98b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001a992:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a996:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001a99a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001a99e:	ee                   	out    dx,al
c001a99f:	90                   	nop
c001a9a0:	83 c4 50             	add    esp,0x50
c001a9a3:	c3                   	ret    

c001a9a4 <picEOI(int)>:
c001a9a4:	83 ec 10             	sub    esp,0x10
c001a9a7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a9ac:	75 1e                	jne    c001a9cc <picEOI(int)+0x28>
c001a9ae:	6a 0b                	push   0xb
c001a9b0:	e8 ef fd ff ff       	call   c001a7a4 <picGetIRQReg(int)>
c001a9b5:	83 c4 04             	add    esp,0x4
c001a9b8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001a9bd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001a9c2:	25 80 00 00 00       	and    eax,0x80
c001a9c7:	74 73                	je     c001aa3c <picEOI(int)+0x98>
c001a9c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9cc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001a9d1:	75 31                	jne    c001aa04 <picEOI(int)+0x60>
c001a9d3:	6a 0b                	push   0xb
c001a9d5:	e8 ca fd ff ff       	call   c001a7a4 <picGetIRQReg(int)>
c001a9da:	83 c4 04             	add    esp,0x4
c001a9dd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001a9e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9e6:	98                   	cwde   
c001a9e7:	85 c0                	test   eax,eax
c001a9e9:	78 19                	js     c001aa04 <picEOI(int)+0x60>
c001a9eb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001a9f2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001a9f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a9fb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001aa00:	ee                   	out    dx,al
c001aa01:	eb 3d                	jmp    c001aa40 <picEOI(int)+0x9c>
c001aa03:	90                   	nop
c001aa04:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001aa09:	7e 19                	jle    c001aa24 <picEOI(int)+0x80>
c001aa0b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001aa12:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001aa17:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001aa1b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001aa20:	ee                   	out    dx,al
c001aa21:	8d 76 00             	lea    esi,[esi+0x0]
c001aa24:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001aa2b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001aa30:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001aa34:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001aa39:	ee                   	out    dx,al
c001aa3a:	eb 04                	jmp    c001aa40 <picEOI(int)+0x9c>
c001aa3c:	90                   	nop
c001aa3d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa40:	83 c4 10             	add    esp,0x10
c001aa43:	c3                   	ret    

c001aa44 <RTC::open(int, int, void*)>:
c001aa44:	31 c0                	xor    eax,eax
c001aa46:	c3                   	ret    
c001aa47:	90                   	nop

c001aa48 <RTC::close(int, int, void*)>:
c001aa48:	31 c0                	xor    eax,eax
c001aa4a:	c3                   	ret    
c001aa4b:	90                   	nop

c001aa4c <RTC::timeInSecondsUTC()>:
c001aa4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa50:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001aa56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa5c:	c3                   	ret    
c001aa5d:	90                   	nop

c001aa5e <RTC::timeInDatetimeUTC()>:
c001aa5e:	53                   	push   ebx
c001aa5f:	83 ec 14             	sub    esp,0x14
c001aa62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001aa66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa6a:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa6c:	50                   	push   eax
c001aa6d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001aa70:	83 c4 0c             	add    esp,0xc
c001aa73:	52                   	push   edx
c001aa74:	50                   	push   eax
c001aa75:	53                   	push   ebx
c001aa76:	e8 77 eb fe ff       	call   c00095f2 <KeSecondsToDatetime(unsigned long long)>
c001aa7b:	89 d8                	mov    eax,ebx
c001aa7d:	83 c4 14             	add    esp,0x14
c001aa80:	5b                   	pop    ebx
c001aa81:	c2 04 00             	ret    0x4

c001aa84 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001aa84:	56                   	push   esi
c001aa85:	53                   	push   ebx
c001aa86:	83 ec 14             	sub    esp,0x14
c001aa89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa8f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001aa92:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aa96:	52                   	push   edx
c001aa97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa9f:	50                   	push   eax
c001aaa0:	e8 4d eb fe ff       	call   c00095f2 <KeSecondsToDatetime(unsigned long long)>
c001aaa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aaa9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aaad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aab1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001aab5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aab9:	89 f0                	mov    eax,esi
c001aabb:	83 c4 20             	add    esp,0x20
c001aabe:	5b                   	pop    ebx
c001aabf:	5e                   	pop    esi
c001aac0:	ff e0                	jmp    eax

c001aac2 <RTC::~RTC()>:
c001aac2:	83 ec 0c             	sub    esp,0xc
c001aac5:	ba e0 55 02 c0       	mov    edx,0xc00255e0
c001aaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aace:	89 10                	mov    DWORD PTR [eax],edx
c001aad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aad4:	83 ec 0c             	sub    esp,0xc
c001aad7:	50                   	push   eax
c001aad8:	e8 b7 e5 fe ff       	call   c0009094 <Clock::~Clock()>
c001aadd:	83 c4 10             	add    esp,0x10
c001aae0:	90                   	nop
c001aae1:	83 c4 0c             	add    esp,0xc
c001aae4:	c3                   	ret    
c001aae5:	90                   	nop

c001aae6 <RTC::~RTC()>:
c001aae6:	83 ec 0c             	sub    esp,0xc
c001aae9:	83 ec 0c             	sub    esp,0xc
c001aaec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aaf0:	e8 cd ff ff ff       	call   c001aac2 <RTC::~RTC()>
c001aaf5:	83 c4 10             	add    esp,0x10
c001aaf8:	83 ec 08             	sub    esp,0x8
c001aafb:	68 60 01 00 00       	push   0x160
c001ab00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab04:	e8 16 28 ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001ab09:	83 c4 10             	add    esp,0x10
c001ab0c:	83 c4 0c             	add    esp,0xc
c001ab0f:	c3                   	ret    

c001ab10 <RTC::get_update_in_progress_flag()>:
c001ab10:	83 ec 18             	sub    esp,0x18
c001ab13:	6a 0a                	push   0xa
c001ab15:	e8 09 db ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001ab1a:	83 c4 1c             	add    esp,0x1c
c001ab1d:	0f b6 c0             	movzx  eax,al
c001ab20:	c1 e8 07             	shr    eax,0x7
c001ab23:	c3                   	ret    

c001ab24 <RTC::completeRTCRefresh()>:
c001ab24:	55                   	push   ebp
c001ab25:	57                   	push   edi
c001ab26:	56                   	push   esi
c001ab27:	53                   	push   ebx
c001ab28:	83 ec 3c             	sub    esp,0x3c
c001ab2b:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001ab31:	83 ec 0c             	sub    esp,0xc
c001ab34:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ab38:	e8 d3 ff ff ff       	call   c001ab10 <RTC::get_update_in_progress_flag()>
c001ab3d:	83 c4 10             	add    esp,0x10
c001ab40:	84 c0                	test   al,al
c001ab42:	74 0e                	je     c001ab52 <RTC::completeRTCRefresh()+0x2e>
c001ab44:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001ab4a:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001ab50:	73 df                	jae    c001ab31 <RTC::completeRTCRefresh()+0xd>
c001ab52:	83 ec 0c             	sub    esp,0xc
c001ab55:	6a 00                	push   0x0
c001ab57:	e8 c7 da ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001ab5c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ab63:	89 c5                	mov    ebp,eax
c001ab65:	e8 b9 da ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001ab6a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ab71:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001ab75:	e8 a9 da ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001ab7a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ab81:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001ab85:	e8 99 da ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001ab8a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001ab91:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001ab95:	e8 89 da ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001ab9a:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001aba1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001aba5:	e8 79 da ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001abaa:	0f b6 c0             	movzx  eax,al
c001abad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001abb1:	83 c4 10             	add    esp,0x10
c001abb4:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001abba:	83 ec 0c             	sub    esp,0xc
c001abbd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001abc1:	e8 4a ff ff ff       	call   c001ab10 <RTC::get_update_in_progress_flag()>
c001abc6:	83 c4 10             	add    esp,0x10
c001abc9:	84 c0                	test   al,al
c001abcb:	74 0e                	je     c001abdb <RTC::completeRTCRefresh()+0xb7>
c001abcd:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001abd3:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001abd9:	73 df                	jae    c001abba <RTC::completeRTCRefresh()+0x96>
c001abdb:	83 ec 0c             	sub    esp,0xc
c001abde:	6a 00                	push   0x0
c001abe0:	e8 3e da ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001abe5:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001abec:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001abf0:	e8 2e da ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001abf5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001abfc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ac00:	e8 1e da ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001ac05:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ac0c:	88 c3                	mov    bl,al
c001ac0e:	e8 10 da ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001ac13:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001ac1a:	89 c6                	mov    esi,eax
c001ac1c:	e8 02 da ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001ac21:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001ac28:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001ac2c:	e8 f2 d9 ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001ac31:	89 e9                	mov    ecx,ebp
c001ac33:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ac37:	0f b6 f8             	movzx  edi,al
c001ac3a:	83 c4 10             	add    esp,0x10
c001ac3d:	0f b6 eb             	movzx  ebp,bl
c001ac40:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001ac44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac49:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001ac4e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ac52:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001ac56:	0f 94 c0             	sete   al
c001ac59:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ac5d:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001ac61:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001ac66:	0f 94 c2             	sete   dl
c001ac69:	21 d0                	and    eax,edx
c001ac6b:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001ac6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001ac73:	0f 94 c2             	sete   dl
c001ac76:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ac7a:	21 c2                	and    edx,eax
c001ac7c:	89 f0                	mov    eax,esi
c001ac7e:	0f b6 c0             	movzx  eax,al
c001ac81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac85:	89 f0                	mov    eax,esi
c001ac87:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001ac8b:	0f 94 c0             	sete   al
c001ac8e:	21 d0                	and    eax,edx
c001ac90:	31 d2                	xor    edx,edx
c001ac92:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001ac96:	0f 94 c2             	sete   dl
c001ac99:	85 c2                	test   edx,eax
c001ac9b:	75 27                	jne    c001acc4 <RTC::completeRTCRefresh()+0x1a0>
c001ac9d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001aca1:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001aca5:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001aca9:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001acad:	89 f0                	mov    eax,esi
c001acaf:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001acb3:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001acb7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001acbb:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001acbf:	e9 f0 fe ff ff       	jmp    c001abb4 <RTC::completeRTCRefresh()+0x90>
c001acc4:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001acc8:	75 d3                	jne    c001ac9d <RTC::completeRTCRefresh()+0x179>
c001acca:	83 ec 0c             	sub    esp,0xc
c001accd:	6a 0b                	push   0xb
c001accf:	e8 4f d9 ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001acd4:	83 c4 10             	add    esp,0x10
c001acd7:	a8 04                	test   al,0x4
c001acd9:	75 7a                	jne    c001ad55 <RTC::completeRTCRefresh()+0x231>
c001acdb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001acdf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ace3:	83 e1 0f             	and    ecx,0xf
c001ace6:	c1 ea 04             	shr    edx,0x4
c001ace9:	83 e6 0f             	and    esi,0xf
c001acec:	6b d2 0a             	imul   edx,edx,0xa
c001acef:	c1 ef 04             	shr    edi,0x4
c001acf2:	01 d1                	add    ecx,edx
c001acf4:	6b ff 0a             	imul   edi,edi,0xa
c001acf7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001acfb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001acff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad03:	c1 ea 04             	shr    edx,0x4
c001ad06:	83 e1 0f             	and    ecx,0xf
c001ad09:	6b d2 0a             	imul   edx,edx,0xa
c001ad0c:	01 d1                	add    ecx,edx
c001ad0e:	89 ea                	mov    edx,ebp
c001ad10:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001ad14:	c1 ea 04             	shr    edx,0x4
c001ad17:	89 d9                	mov    ecx,ebx
c001ad19:	83 e2 07             	and    edx,0x7
c001ad1c:	83 e1 0f             	and    ecx,0xf
c001ad1f:	6b d2 0a             	imul   edx,edx,0xa
c001ad22:	83 e3 80             	and    ebx,0xffffff80
c001ad25:	01 d1                	add    ecx,edx
c001ad27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad2b:	09 cb                	or     ebx,ecx
c001ad2d:	c1 ea 04             	shr    edx,0x4
c001ad30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad34:	6b d2 0a             	imul   edx,edx,0xa
c001ad37:	83 e1 0f             	and    ecx,0xf
c001ad3a:	01 d6                	add    esi,edx
c001ad3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad40:	c1 ea 04             	shr    edx,0x4
c001ad43:	6b d2 0a             	imul   edx,edx,0xa
c001ad46:	01 d1                	add    ecx,edx
c001ad48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad4c:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001ad50:	83 e2 0f             	and    edx,0xf
c001ad53:	01 d7                	add    edi,edx
c001ad55:	a8 02                	test   al,0x2
c001ad57:	75 15                	jne    c001ad6e <RTC::completeRTCRefresh()+0x24a>
c001ad59:	f6 c3 80             	test   bl,0x80
c001ad5c:	74 10                	je     c001ad6e <RTC::completeRTCRefresh()+0x24a>
c001ad5e:	83 e3 7f             	and    ebx,0x7f
c001ad61:	b9 18 00 00 00       	mov    ecx,0x18
c001ad66:	8d 43 0c             	lea    eax,[ebx+0xc]
c001ad69:	99                   	cdq    
c001ad6a:	f7 f9                	idiv   ecx
c001ad6c:	88 d3                	mov    bl,dl
c001ad6e:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001ad74:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001ad7a:	77 06                	ja     c001ad82 <RTC::completeRTCRefresh()+0x25e>
c001ad7c:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001ad82:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ad87:	31 c9                	xor    ecx,ecx
c001ad89:	c1 e0 10             	shl    eax,0x10
c001ad8c:	89 cf                	mov    edi,ecx
c001ad8e:	c1 e5 10             	shl    ebp,0x10
c001ad91:	31 d2                	xor    edx,edx
c001ad93:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001ad99:	09 c7                	or     edi,eax
c001ad9b:	89 f0                	mov    eax,esi
c001ad9d:	89 f9                	mov    ecx,edi
c001ad9f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ada3:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001ada7:	88 c2                	mov    dl,al
c001ada9:	88 d9                	mov    cl,bl
c001adab:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001adaf:	0f b7 c2             	movzx  eax,dx
c001adb2:	09 e8                	or     eax,ebp
c001adb4:	89 c2                	mov    edx,eax
c001adb6:	50                   	push   eax
c001adb7:	50                   	push   eax
c001adb8:	51                   	push   ecx
c001adb9:	52                   	push   edx
c001adba:	e8 25 e4 fe ff       	call   c00091e4 <KeDatetimeToSeconds(datetime_t)>
c001adbf:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001adc3:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001adc9:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001adcf:	83 c4 4c             	add    esp,0x4c
c001add2:	5b                   	pop    ebx
c001add3:	5e                   	pop    esi
c001add4:	5f                   	pop    edi
c001add5:	5d                   	pop    ebp
c001add6:	c3                   	ret    
c001add7:	90                   	nop

c001add8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001add8:	55                   	push   ebp
c001add9:	57                   	push   edi
c001adda:	56                   	push   esi
c001addb:	53                   	push   ebx
c001addc:	83 ec 34             	sub    esp,0x34
c001addf:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ade3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ade7:	6a 00                	push   0x0
c001ade9:	89 fb                	mov    ebx,edi
c001adeb:	6a 00                	push   0x0
c001aded:	e8 85 d8 ff ff       	call   c0018677 <x86WriteCMOS(unsigned char, unsigned char)>
c001adf2:	5d                   	pop    ebp
c001adf3:	58                   	pop    eax
c001adf4:	6a 00                	push   0x0
c001adf6:	6a 02                	push   0x2
c001adf8:	e8 7a d8 ff ff       	call   c0018677 <x86WriteCMOS(unsigned char, unsigned char)>
c001adfd:	31 d2                	xor    edx,edx
c001adff:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001ae06:	89 f9                	mov    ecx,edi
c001ae08:	89 f8                	mov    eax,edi
c001ae0a:	c1 e9 10             	shr    ecx,0x10
c001ae0d:	0f b6 c4             	movzx  eax,ah
c001ae10:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001ae14:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001ae18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae1c:	b9 64 00 00 00       	mov    ecx,0x64
c001ae21:	89 f0                	mov    eax,esi
c001ae23:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001ae27:	89 f0                	mov    eax,esi
c001ae29:	0f b6 c4             	movzx  eax,ah
c001ae2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae30:	89 f0                	mov    eax,esi
c001ae32:	c1 e8 10             	shr    eax,0x10
c001ae35:	f7 f1                	div    ecx
c001ae37:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ae3b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ae3f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ae43:	e8 db d7 ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001ae48:	83 c4 10             	add    esp,0x10
c001ae4b:	89 c5                	mov    ebp,eax
c001ae4d:	a8 04                	test   al,0x4
c001ae4f:	75 6e                	jne    c001aebf <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001ae51:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ae55:	31 d2                	xor    edx,edx
c001ae57:	0f b6 c1             	movzx  eax,cl
c001ae5a:	b9 0a 00 00 00       	mov    ecx,0xa
c001ae5f:	f7 f1                	div    ecx
c001ae61:	c1 e0 04             	shl    eax,0x4
c001ae64:	09 d0                	or     eax,edx
c001ae66:	31 d2                	xor    edx,edx
c001ae68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae6c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001ae71:	f7 f1                	div    ecx
c001ae73:	c1 e0 04             	shl    eax,0x4
c001ae76:	09 d0                	or     eax,edx
c001ae78:	31 d2                	xor    edx,edx
c001ae7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae7e:	0f b6 c3             	movzx  eax,bl
c001ae81:	f7 f1                	div    ecx
c001ae83:	c1 e0 04             	shl    eax,0x4
c001ae86:	09 d0                	or     eax,edx
c001ae88:	31 d2                	xor    edx,edx
c001ae8a:	89 c3                	mov    ebx,eax
c001ae8c:	89 f0                	mov    eax,esi
c001ae8e:	0f b6 c0             	movzx  eax,al
c001ae91:	f7 f1                	div    ecx
c001ae93:	c1 e0 04             	shl    eax,0x4
c001ae96:	09 d0                	or     eax,edx
c001ae98:	31 d2                	xor    edx,edx
c001ae9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ae9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aea3:	f7 f1                	div    ecx
c001aea5:	c1 e0 04             	shl    eax,0x4
c001aea8:	09 d0                	or     eax,edx
c001aeaa:	31 d2                	xor    edx,edx
c001aeac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aeb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aeb4:	f7 f1                	div    ecx
c001aeb6:	c1 e0 04             	shl    eax,0x4
c001aeb9:	09 d0                	or     eax,edx
c001aebb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aebf:	83 e5 02             	and    ebp,0x2
c001aec2:	75 1e                	jne    c001aee2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001aec4:	0f b6 c3             	movzx  eax,bl
c001aec7:	83 f8 0b             	cmp    eax,0xb
c001aeca:	76 10                	jbe    c001aedc <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001aecc:	8d 53 f4             	lea    edx,[ebx-0xc]
c001aecf:	88 d3                	mov    bl,dl
c001aed1:	84 d2                	test   dl,dl
c001aed3:	75 02                	jne    c001aed7 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001aed5:	b3 0c                	mov    bl,0xc
c001aed7:	83 cb 80             	or     ebx,0xffffff80
c001aeda:	eb 06                	jmp    c001aee2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001aedc:	85 c0                	test   eax,eax
c001aede:	75 02                	jne    c001aee2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001aee0:	b3 0c                	mov    bl,0xc
c001aee2:	0f b6 db             	movzx  ebx,bl
c001aee5:	50                   	push   eax
c001aee6:	50                   	push   eax
c001aee7:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001aeec:	52                   	push   edx
c001aeed:	6a 00                	push   0x0
c001aeef:	e8 83 d7 ff ff       	call   c0018677 <x86WriteCMOS(unsigned char, unsigned char)>
c001aef4:	5a                   	pop    edx
c001aef5:	59                   	pop    ecx
c001aef6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001aefb:	50                   	push   eax
c001aefc:	6a 02                	push   0x2
c001aefe:	e8 74 d7 ff ff       	call   c0018677 <x86WriteCMOS(unsigned char, unsigned char)>
c001af03:	5e                   	pop    esi
c001af04:	5f                   	pop    edi
c001af05:	53                   	push   ebx
c001af06:	6a 04                	push   0x4
c001af08:	e8 6a d7 ff ff       	call   c0018677 <x86WriteCMOS(unsigned char, unsigned char)>
c001af0d:	5d                   	pop    ebp
c001af0e:	58                   	pop    eax
c001af0f:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001af14:	52                   	push   edx
c001af15:	6a 07                	push   0x7
c001af17:	e8 5b d7 ff ff       	call   c0018677 <x86WriteCMOS(unsigned char, unsigned char)>
c001af1c:	58                   	pop    eax
c001af1d:	5a                   	pop    edx
c001af1e:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001af23:	50                   	push   eax
c001af24:	6a 08                	push   0x8
c001af26:	e8 4c d7 ff ff       	call   c0018677 <x86WriteCMOS(unsigned char, unsigned char)>
c001af2b:	59                   	pop    ecx
c001af2c:	5b                   	pop    ebx
c001af2d:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001af32:	55                   	push   ebp
c001af33:	6a 09                	push   0x9
c001af35:	e8 3d d7 ff ff       	call   c0018677 <x86WriteCMOS(unsigned char, unsigned char)>
c001af3a:	5e                   	pop    esi
c001af3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af3f:	e8 e0 fb ff ff       	call   c001ab24 <RTC::completeRTCRefresh()>
c001af44:	83 c4 3c             	add    esp,0x3c
c001af47:	b0 01                	mov    al,0x1
c001af49:	5b                   	pop    ebx
c001af4a:	5e                   	pop    esi
c001af4b:	5f                   	pop    edi
c001af4c:	5d                   	pop    ebp
c001af4d:	c3                   	ret    

c001af4e <rtcIRQHandler(regs*, void*)>:
c001af4e:	53                   	push   ebx
c001af4f:	83 ec 14             	sub    esp,0x14
c001af52:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af56:	6a 0c                	push   0xc
c001af58:	e8 c6 d6 ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001af5d:	83 c4 10             	add    esp,0x10
c001af60:	a8 80                	test   al,0x80
c001af62:	74 24                	je     c001af88 <rtcIRQHandler(regs*, void*)+0x3a>
c001af64:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001af6b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001af72:	66 ff 05 14 eb 02 c0 	inc    WORD PTR ds:0xc002eb14
c001af79:	75 0d                	jne    c001af88 <rtcIRQHandler(regs*, void*)+0x3a>
c001af7b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001af7f:	83 c4 08             	add    esp,0x8
c001af82:	5b                   	pop    ebx
c001af83:	e9 9c fb ff ff       	jmp    c001ab24 <RTC::completeRTCRefresh()>
c001af88:	83 c4 08             	add    esp,0x8
c001af8b:	5b                   	pop    ebx
c001af8c:	c3                   	ret    
c001af8d:	90                   	nop

c001af8e <RTC::RTC()>:
c001af8e:	83 ec 1c             	sub    esp,0x1c
c001af91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af95:	83 ec 08             	sub    esp,0x8
c001af98:	68 c3 55 02 c0       	push   0xc00255c3
c001af9d:	50                   	push   eax
c001af9e:	e8 bb e0 fe ff       	call   c000905e <Clock::Clock(char const*)>
c001afa3:	83 c4 10             	add    esp,0x10
c001afa6:	ba e0 55 02 c0       	mov    edx,0xc00255e0
c001afab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afaf:	89 10                	mov    DWORD PTR [eax],edx
c001afb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afb5:	83 ec 0c             	sub    esp,0xc
c001afb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afbc:	6a 01                	push   0x1
c001afbe:	68 4e af 01 c0       	push   0xc001af4e
c001afc3:	6a 08                	push   0x8
c001afc5:	50                   	push   eax
c001afc6:	e8 dd e9 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001afcb:	83 c4 20             	add    esp,0x20
c001afce:	89 c2                	mov    edx,eax
c001afd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afd4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001afda:	fa                   	cli    
c001afdb:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001afe0:	83 c0 01             	add    eax,0x1
c001afe3:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001afe8:	83 ec 0c             	sub    esp,0xc
c001afeb:	6a 0b                	push   0xb
c001afed:	e8 31 d6 ff ff       	call   c0018623 <x86ReadCMOS(unsigned char)>
c001aff2:	83 c4 10             	add    esp,0x10
c001aff5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001aff9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001affd:	83 c8 10             	or     eax,0x10
c001b000:	0f b6 c0             	movzx  eax,al
c001b003:	83 ec 08             	sub    esp,0x8
c001b006:	50                   	push   eax
c001b007:	6a 0b                	push   0xb
c001b009:	e8 69 d6 ff ff       	call   c0018677 <x86WriteCMOS(unsigned char, unsigned char)>
c001b00e:	83 c4 10             	add    esp,0x10
c001b011:	83 ec 0c             	sub    esp,0xc
c001b014:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b018:	e8 07 fb ff ff       	call   c001ab24 <RTC::completeRTCRefresh()>
c001b01d:	83 c4 10             	add    esp,0x10
c001b020:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001b028:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001b02d:	85 c0                	test   eax,eax
c001b02f:	75 01                	jne    c001b032 <RTC::RTC()+0xa4>
c001b031:	fb                   	sti    
c001b032:	90                   	nop
c001b033:	83 c4 1c             	add    esp,0x1c
c001b036:	c3                   	ret    
c001b037:	90                   	nop

c001b038 <HalConsoleScroll(int, int)>:
c001b038:	83 ec 10             	sub    esp,0x10
c001b03b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b043:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b04b:	90                   	nop
c001b04c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b051:	0f 8f e1 00 00 00    	jg     c001b138 <HalConsoleScroll(int, int)+0x100>
c001b057:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b05f:	90                   	nop
c001b060:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b068:	0f 8f be 00 00 00    	jg     c001b12c <HalConsoleScroll(int, int)+0xf4>
c001b06e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b072:	89 d0                	mov    eax,edx
c001b074:	c1 e0 02             	shl    eax,0x2
c001b077:	01 d0                	add    eax,edx
c001b079:	c1 e0 05             	shl    eax,0x5
c001b07c:	89 c2                	mov    edx,eax
c001b07e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b082:	01 d0                	add    eax,edx
c001b084:	89 c2                	mov    edx,eax
c001b086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b08a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b08d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b091:	89 d0                	mov    eax,edx
c001b093:	c1 e0 02             	shl    eax,0x2
c001b096:	01 d0                	add    eax,edx
c001b098:	c1 e0 05             	shl    eax,0x5
c001b09b:	89 c2                	mov    edx,eax
c001b09d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0a1:	01 d0                	add    eax,edx
c001b0a3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b0a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0ad:	01 c2                	add    edx,eax
c001b0af:	8a 01                	mov    al,BYTE PTR [ecx]
c001b0b1:	88 02                	mov    BYTE PTR [edx],al
c001b0b3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b0b8:	75 66                	jne    c001b120 <HalConsoleScroll(int, int)+0xe8>
c001b0ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0be:	83 e0 01             	and    eax,0x1
c001b0c1:	74 39                	je     c001b0fc <HalConsoleScroll(int, int)+0xc4>
c001b0c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0c7:	83 e0 0f             	and    eax,0xf
c001b0ca:	88 c2                	mov    dl,al
c001b0cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0d0:	c1 e0 04             	shl    eax,0x4
c001b0d3:	09 d0                	or     eax,edx
c001b0d5:	88 c1                	mov    cl,al
c001b0d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b0db:	89 d0                	mov    eax,edx
c001b0dd:	c1 e0 02             	shl    eax,0x2
c001b0e0:	01 d0                	add    eax,edx
c001b0e2:	c1 e0 05             	shl    eax,0x5
c001b0e5:	89 c2                	mov    edx,eax
c001b0e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0eb:	01 d0                	add    eax,edx
c001b0ed:	89 c2                	mov    edx,eax
c001b0ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0f3:	01 d0                	add    eax,edx
c001b0f5:	88 ca                	mov    dl,cl
c001b0f7:	88 10                	mov    BYTE PTR [eax],dl
c001b0f9:	eb 25                	jmp    c001b120 <HalConsoleScroll(int, int)+0xe8>
c001b0fb:	90                   	nop
c001b0fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b100:	89 d0                	mov    eax,edx
c001b102:	c1 e0 02             	shl    eax,0x2
c001b105:	01 d0                	add    eax,edx
c001b107:	c1 e0 05             	shl    eax,0x5
c001b10a:	89 c2                	mov    edx,eax
c001b10c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b110:	01 d0                	add    eax,edx
c001b112:	89 c2                	mov    edx,eax
c001b114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b118:	01 d0                	add    eax,edx
c001b11a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b11d:	8d 76 00             	lea    esi,[esi+0x0]
c001b120:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b125:	e9 36 ff ff ff       	jmp    c001b060 <HalConsoleScroll(int, int)+0x28>
c001b12a:	66 90                	xchg   ax,ax
c001b12c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b131:	e9 16 ff ff ff       	jmp    c001b04c <HalConsoleScroll(int, int)+0x14>
c001b136:	66 90                	xchg   ax,ax
c001b138:	90                   	nop
c001b139:	83 c4 10             	add    esp,0x10
c001b13c:	c3                   	ret    
c001b13d:	8d 76 00             	lea    esi,[esi+0x0]

c001b140 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b140:	83 ec 14             	sub    esp,0x14
c001b143:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b147:	88 04 24             	mov    BYTE PTR [esp],al
c001b14a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b14d:	0f b6 c0             	movzx  eax,al
c001b150:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b154:	89 d1                	mov    ecx,edx
c001b156:	83 e1 0f             	and    ecx,0xf
c001b159:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b15d:	c1 e2 04             	shl    edx,0x4
c001b160:	0f b6 d2             	movzx  edx,dl
c001b163:	09 ca                	or     edx,ecx
c001b165:	c1 e2 08             	shl    edx,0x8
c001b168:	09 d0                	or     eax,edx
c001b16a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b16f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b177:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b17b:	89 d0                	mov    eax,edx
c001b17d:	c1 e0 02             	shl    eax,0x2
c001b180:	01 d0                	add    eax,edx
c001b182:	c1 e0 04             	shl    eax,0x4
c001b185:	89 c2                	mov    edx,eax
c001b187:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b18b:	01 d0                	add    eax,edx
c001b18d:	01 c0                	add    eax,eax
c001b18f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b193:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b197:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001b19c:	66 89 02             	mov    WORD PTR [edx],ax
c001b19f:	90                   	nop
c001b1a0:	83 c4 14             	add    esp,0x14
c001b1a3:	c3                   	ret    

c001b1a4 <HalConsoleCursorUpdate(int, int)>:
c001b1a4:	83 ec 20             	sub    esp,0x20
c001b1a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b1ab:	89 c2                	mov    edx,eax
c001b1ad:	c1 e2 02             	shl    edx,0x2
c001b1b0:	01 d0                	add    eax,edx
c001b1b2:	c1 e0 04             	shl    eax,0x4
c001b1b5:	89 c2                	mov    edx,eax
c001b1b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b1bb:	01 d0                	add    eax,edx
c001b1bd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b1c2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b1c9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b1ce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b1d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1d6:	ee                   	out    dx,al
c001b1d7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b1dc:	0f b6 c0             	movzx  eax,al
c001b1df:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b1e6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b1ea:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b1ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b1f2:	ee                   	out    dx,al
c001b1f3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b1fa:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b1ff:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b203:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b207:	ee                   	out    dx,al
c001b208:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b20d:	c1 e8 08             	shr    eax,0x8
c001b210:	0f b6 c0             	movzx  eax,al
c001b213:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b21a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b21e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b222:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b226:	ee                   	out    dx,al
c001b227:	90                   	nop
c001b228:	83 c4 20             	add    esp,0x20
c001b22b:	c3                   	ret    

c001b22c <FAT::getName()>:
c001b22c:	b8 14 56 02 c0       	mov    eax,0xc0025614
c001b231:	c3                   	ret    
c001b232:	66 90                	xchg   ax,ax

c001b234 <FAT::tell(void*, unsigned long long*)>:
c001b234:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b239:	75 09                	jne    c001b244 <FAT::tell(void*, unsigned long long*)+0x10>
c001b23b:	b8 04 00 00 00       	mov    eax,0x4
c001b240:	c3                   	ret    
c001b241:	8d 76 00             	lea    esi,[esi+0x0]
c001b244:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b249:	75 09                	jne    c001b254 <FAT::tell(void*, unsigned long long*)+0x20>
c001b24b:	b8 04 00 00 00       	mov    eax,0x4
c001b250:	c3                   	ret    
c001b251:	8d 76 00             	lea    esi,[esi+0x0]
c001b254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b258:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b25b:	ba 00 00 00 00       	mov    edx,0x0
c001b260:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b264:	89 01                	mov    DWORD PTR [ecx],eax
c001b266:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b269:	b8 00 00 00 00       	mov    eax,0x0
c001b26e:	c3                   	ret    
c001b26f:	90                   	nop

c001b270 <FAT::stat(void*, unsigned long long*)>:
c001b270:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b275:	75 09                	jne    c001b280 <FAT::stat(void*, unsigned long long*)+0x10>
c001b277:	b8 04 00 00 00       	mov    eax,0x4
c001b27c:	c3                   	ret    
c001b27d:	8d 76 00             	lea    esi,[esi+0x0]
c001b280:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b285:	75 09                	jne    c001b290 <FAT::stat(void*, unsigned long long*)+0x20>
c001b287:	b8 04 00 00 00       	mov    eax,0x4
c001b28c:	c3                   	ret    
c001b28d:	8d 76 00             	lea    esi,[esi+0x0]
c001b290:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b294:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b297:	ba 00 00 00 00       	mov    edx,0x0
c001b29c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b2a0:	89 01                	mov    DWORD PTR [ecx],eax
c001b2a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b2a5:	b8 00 00 00 00       	mov    eax,0x0
c001b2aa:	c3                   	ret    
c001b2ab:	90                   	nop

c001b2ac <FAT::~FAT()>:
c001b2ac:	83 ec 0c             	sub    esp,0xc
c001b2af:	ba 60 56 02 c0       	mov    edx,0xc0025660
c001b2b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b8:	89 10                	mov    DWORD PTR [eax],edx
c001b2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2be:	83 ec 0c             	sub    esp,0xc
c001b2c1:	50                   	push   eax
c001b2c2:	e8 cd ca fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001b2c7:	83 c4 10             	add    esp,0x10
c001b2ca:	90                   	nop
c001b2cb:	83 c4 0c             	add    esp,0xc
c001b2ce:	c3                   	ret    
c001b2cf:	90                   	nop

c001b2d0 <FAT::~FAT()>:
c001b2d0:	83 ec 0c             	sub    esp,0xc
c001b2d3:	83 ec 0c             	sub    esp,0xc
c001b2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2da:	e8 cd ff ff ff       	call   c001b2ac <FAT::~FAT()>
c001b2df:	83 c4 10             	add    esp,0x10
c001b2e2:	83 ec 08             	sub    esp,0x8
c001b2e5:	6a 08                	push   0x8
c001b2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2eb:	e8 2f 20 ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001b2f0:	83 c4 10             	add    esp,0x10
c001b2f3:	83 c4 0c             	add    esp,0xc
c001b2f6:	c3                   	ret    
c001b2f7:	90                   	nop

c001b2f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b2f8:	83 ec 1c             	sub    esp,0x1c
c001b2fb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b302:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b307:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b30b:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b312:	83 f8 ff             	cmp    eax,0xffffffff
c001b315:	75 35                	jne    c001b34c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b317:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b31b:	88 c2                	mov    dl,al
c001b31d:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b322:	01 d0                	add    eax,edx
c001b324:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b328:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b32e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b332:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b339:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b33e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b342:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b349:	eb 19                	jmp    c001b364 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b34b:	90                   	nop
c001b34c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b350:	88 c2                	mov    dl,al
c001b352:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b356:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b35d:	01 d0                	add    eax,edx
c001b35f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b363:	90                   	nop
c001b364:	83 ec 04             	sub    esp,0x4
c001b367:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b36b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b36f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b373:	50                   	push   eax
c001b374:	e8 3f 9e fe ff       	call   c00051b8 <f_getlabel>
c001b379:	83 c4 10             	add    esp,0x10
c001b37c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b380:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b385:	75 09                	jne    c001b390 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b387:	b8 00 00 00 00       	mov    eax,0x0
c001b38c:	eb 0a                	jmp    c001b398 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b38e:	66 90                	xchg   ax,ax
c001b390:	b8 01 00 00 00       	mov    eax,0x1
c001b395:	8d 76 00             	lea    esi,[esi+0x0]
c001b398:	83 c4 1c             	add    esp,0x1c
c001b39b:	c3                   	ret    

c001b39c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b39c:	57                   	push   edi
c001b39d:	83 ec 58             	sub    esp,0x58
c001b3a0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b3a8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b3ac:	b8 00 00 00 00       	mov    eax,0x0
c001b3b1:	b9 0f 00 00 00       	mov    ecx,0xf
c001b3b6:	fc                   	cld    
c001b3b7:	89 d7                	mov    edi,edx
c001b3b9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3bb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b3bf:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b3c6:	83 f8 ff             	cmp    eax,0xffffffff
c001b3c9:	75 35                	jne    c001b400 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b3cb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b3cf:	88 c2                	mov    dl,al
c001b3d1:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b3d6:	01 d0                	add    eax,edx
c001b3d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b3dc:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b3e2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b3e6:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b3ed:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b3f2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b3f6:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b3fd:	eb 19                	jmp    c001b418 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b3ff:	90                   	nop
c001b400:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b404:	88 c2                	mov    dl,al
c001b406:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b40a:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b411:	01 d0                	add    eax,edx
c001b413:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b417:	90                   	nop
c001b418:	83 ec 08             	sub    esp,0x8
c001b41b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b41f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b423:	50                   	push   eax
c001b424:	e8 17 54 fe ff       	call   c0000840 <strcat>
c001b429:	83 c4 10             	add    esp,0x10
c001b42c:	83 ec 0c             	sub    esp,0xc
c001b42f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b433:	50                   	push   eax
c001b434:	e8 d0 9e fe ff       	call   c0005309 <f_setlabel>
c001b439:	83 c4 10             	add    esp,0x10
c001b43c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b440:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b445:	75 09                	jne    c001b450 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b447:	b8 00 00 00 00       	mov    eax,0x0
c001b44c:	eb 0a                	jmp    c001b458 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b44e:	66 90                	xchg   ax,ax
c001b450:	b8 01 00 00 00       	mov    eax,0x1
c001b455:	8d 76 00             	lea    esi,[esi+0x0]
c001b458:	83 c4 58             	add    esp,0x58
c001b45b:	5f                   	pop    edi
c001b45c:	c3                   	ret    
c001b45d:	90                   	nop
c001b45e:	66 90                	xchg   ax,ax

c001b460 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b460:	83 ec 2c             	sub    esp,0x2c
c001b463:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b46b:	83 ec 08             	sub    esp,0x8
c001b46e:	68 38 56 02 c0       	push   0xc0025638
c001b473:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b477:	e8 d4 52 fe ff       	call   c0000750 <strcmp>
c001b47c:	83 c4 10             	add    esp,0x10
c001b47f:	85 c0                	test   eax,eax
c001b481:	0f 94 c0             	sete   al
c001b484:	0f b6 c0             	movzx  eax,al
c001b487:	85 c0                	test   eax,eax
c001b489:	74 0d                	je     c001b498 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b48b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b493:	e9 c0 00 00 00       	jmp    c001b558 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b498:	83 ec 08             	sub    esp,0x8
c001b49b:	68 2a 56 02 c0       	push   0xc002562a
c001b4a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b4a4:	e8 a7 52 fe ff       	call   c0000750 <strcmp>
c001b4a9:	83 c4 10             	add    esp,0x10
c001b4ac:	85 c0                	test   eax,eax
c001b4ae:	0f 94 c0             	sete   al
c001b4b1:	0f b6 c0             	movzx  eax,al
c001b4b4:	85 c0                	test   eax,eax
c001b4b6:	74 10                	je     c001b4c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001b4b8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b4c0:	e9 93 00 00 00       	jmp    c001b558 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b4c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4c8:	83 ec 08             	sub    esp,0x8
c001b4cb:	68 30 56 02 c0       	push   0xc0025630
c001b4d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b4d4:	e8 77 52 fe ff       	call   c0000750 <strcmp>
c001b4d9:	83 c4 10             	add    esp,0x10
c001b4dc:	85 c0                	test   eax,eax
c001b4de:	0f 94 c0             	sete   al
c001b4e1:	0f b6 c0             	movzx  eax,al
c001b4e4:	85 c0                	test   eax,eax
c001b4e6:	74 0c                	je     c001b4f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001b4e8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b4f0:	eb 66                	jmp    c001b558 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b4f2:	66 90                	xchg   ax,ax
c001b4f4:	83 ec 08             	sub    esp,0x8
c001b4f7:	68 7c 26 02 c0       	push   0xc002267c
c001b4fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b500:	e8 4b 52 fe ff       	call   c0000750 <strcmp>
c001b505:	83 c4 10             	add    esp,0x10
c001b508:	85 c0                	test   eax,eax
c001b50a:	0f 94 c0             	sete   al
c001b50d:	0f b6 c0             	movzx  eax,al
c001b510:	85 c0                	test   eax,eax
c001b512:	74 0c                	je     c001b520 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001b514:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b51c:	eb 3a                	jmp    c001b558 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b51e:	66 90                	xchg   ax,ax
c001b520:	83 ec 08             	sub    esp,0x8
c001b523:	68 36 56 02 c0       	push   0xc0025636
c001b528:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b52c:	e8 1f 52 fe ff       	call   c0000750 <strcmp>
c001b531:	83 c4 10             	add    esp,0x10
c001b534:	85 c0                	test   eax,eax
c001b536:	0f 94 c0             	sete   al
c001b539:	0f b6 c0             	movzx  eax,al
c001b53c:	85 c0                	test   eax,eax
c001b53e:	74 0c                	je     c001b54c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001b540:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b548:	eb 0e                	jmp    c001b558 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b54a:	66 90                	xchg   ax,ax
c001b54c:	b8 08 00 00 00       	mov    eax,0x8
c001b551:	e9 ea 00 00 00       	jmp    c001b640 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b556:	66 90                	xchg   ax,ax
c001b558:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b55f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b568:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b56f:	83 f8 ff             	cmp    eax,0xffffffff
c001b572:	75 34                	jne    c001b5a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001b574:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b578:	88 c2                	mov    dl,al
c001b57a:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b57f:	01 d0                	add    eax,edx
c001b581:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b585:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b58b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b58f:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b596:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b59b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b59f:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b5a6:	eb 18                	jmp    c001b5c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001b5a8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b5ac:	88 c2                	mov    dl,al
c001b5ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b5b2:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b5b9:	01 d0                	add    eax,edx
c001b5bb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b5bf:	90                   	nop
c001b5c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b5c4:	88 04 24             	mov    BYTE PTR [esp],al
c001b5c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b5cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5cf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b5d7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b5dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b5e4:	83 ec 0c             	sub    esp,0xc
c001b5e7:	68 00 20 00 00       	push   0x2000
c001b5ec:	e8 a6 46 ff ff       	call   c000fc97 <malloc>
c001b5f1:	83 c4 10             	add    esp,0x10
c001b5f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5f8:	68 00 20 00 00       	push   0x2000
c001b5fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b601:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b605:	50                   	push   eax
c001b606:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b60a:	50                   	push   eax
c001b60b:	e8 f6 9f fe ff       	call   c0005606 <f_mkfs>
c001b610:	83 c4 10             	add    esp,0x10
c001b613:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b617:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b61c:	75 0a                	jne    c001b628 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b61e:	b8 00 00 00 00       	mov    eax,0x0
c001b623:	eb 1b                	jmp    c001b640 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b625:	8d 76 00             	lea    esi,[esi+0x0]
c001b628:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b62d:	75 09                	jne    c001b638 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001b62f:	b8 09 00 00 00       	mov    eax,0x9
c001b634:	eb 0a                	jmp    c001b640 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b636:	66 90                	xchg   ax,ax
c001b638:	b8 01 00 00 00       	mov    eax,0x1
c001b63d:	8d 76 00             	lea    esi,[esi+0x0]
c001b640:	83 c4 2c             	add    esp,0x2c
c001b643:	c3                   	ret    

c001b644 <FAT::tryMount(LogicalDisk*, int)>:
c001b644:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001b64a:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b64f:	83 f8 14             	cmp    eax,0x14
c001b652:	75 18                	jne    c001b66c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b654:	83 ec 0c             	sub    esp,0xc
c001b657:	68 3c 56 02 c0       	push   0xc002563c
c001b65c:	e8 7d 49 ff ff       	call   c000ffde <KePanic(char const*)>
c001b661:	83 c4 10             	add    esp,0x10
c001b664:	b0 00                	mov    al,0x0
c001b666:	e9 ed 01 00 00       	jmp    c001b858 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b66b:	90                   	nop
c001b66c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b673:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b679:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b67f:	3d 00 02 00 00       	cmp    eax,0x200
c001b684:	74 0a                	je     c001b690 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b686:	b0 00                	mov    al,0x0
c001b688:	e9 cb 01 00 00       	jmp    c001b858 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b68d:	8d 76 00             	lea    esi,[esi+0x0]
c001b690:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001b698:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b69f:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b6a6:	83 f8 ff             	cmp    eax,0xffffffff
c001b6a9:	74 09                	je     c001b6b4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b6ab:	b0 01                	mov    al,0x1
c001b6ad:	e9 a6 01 00 00       	jmp    c001b858 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b6b2:	66 90                	xchg   ax,ax
c001b6b4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001b6be:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001b6c6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001b6cd:	88 c2                	mov    dl,al
c001b6cf:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b6d4:	01 d0                	add    eax,edx
c001b6d6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001b6dd:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b6e3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b6ea:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b6f1:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b6f6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001b6fd:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b704:	83 ec 0c             	sub    esp,0xc
c001b707:	68 34 02 00 00       	push   0x234
c001b70c:	e8 86 45 ff ff       	call   c000fc97 <malloc>
c001b711:	83 c4 10             	add    esp,0x10
c001b714:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001b71b:	83 ec 04             	sub    esp,0x4
c001b71e:	6a 00                	push   0x0
c001b720:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b727:	50                   	push   eax
c001b728:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b72f:	e8 ad 86 fe ff       	call   c0003de1 <f_mount>
c001b734:	83 c4 10             	add    esp,0x10
c001b737:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b73e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001b746:	74 1c                	je     c001b764 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b748:	83 ec 0c             	sub    esp,0xc
c001b74b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b752:	e8 60 45 ff ff       	call   c000fcb7 <rfree>
c001b757:	83 c4 10             	add    esp,0x10
c001b75a:	b0 00                	mov    al,0x0
c001b75c:	e9 f7 00 00 00       	jmp    c001b858 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b761:	8d 76 00             	lea    esi,[esi+0x0]
c001b764:	83 ec 04             	sub    esp,0x4
c001b767:	68 00 01 00 00       	push   0x100
c001b76c:	6a 00                	push   0x0
c001b76e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b775:	50                   	push   eax
c001b776:	e8 75 4d fe ff       	call   c00004f0 <memset>
c001b77b:	83 c4 10             	add    esp,0x10
c001b77e:	83 ec 08             	sub    esp,0x8
c001b781:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b788:	50                   	push   eax
c001b789:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b790:	50                   	push   eax
c001b791:	e8 aa 50 fe ff       	call   c0000840 <strcat>
c001b796:	83 c4 10             	add    esp,0x10
c001b799:	83 ec 08             	sub    esp,0x8
c001b79c:	68 4a 56 02 c0       	push   0xc002564a
c001b7a1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b7a8:	50                   	push   eax
c001b7a9:	e8 92 50 fe ff       	call   c0000840 <strcat>
c001b7ae:	83 c4 10             	add    esp,0x10
c001b7b1:	83 ec 04             	sub    esp,0x4
c001b7b4:	6a 01                	push   0x1
c001b7b6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001b7bd:	50                   	push   eax
c001b7be:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7c2:	50                   	push   eax
c001b7c3:	e8 7b 86 fe ff       	call   c0003e43 <f_open>
c001b7c8:	83 c4 10             	add    esp,0x10
c001b7cb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b7d2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001b7d9:	85 c0                	test   eax,eax
c001b7db:	74 0b                	je     c001b7e8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b7dd:	78 31                	js     c001b810 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b7df:	83 e8 04             	sub    eax,0x4
c001b7e2:	83 f8 01             	cmp    eax,0x1
c001b7e5:	77 29                	ja     c001b810 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b7e7:	90                   	nop
c001b7e8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001b7f0:	83 ec 0c             	sub    esp,0xc
c001b7f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7f7:	50                   	push   eax
c001b7f8:	e8 15 8e fe ff       	call   c0004612 <f_close>
c001b7fd:	83 c4 10             	add    esp,0x10
c001b800:	90                   	nop
c001b801:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001b809:	85 c0                	test   eax,eax
c001b80b:	74 43                	je     c001b850 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001b80d:	eb 31                	jmp    c001b840 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b80f:	90                   	nop
c001b810:	83 ec 0c             	sub    esp,0xc
c001b813:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b81a:	e8 98 44 ff ff       	call   c000fcb7 <rfree>
c001b81f:	83 c4 10             	add    esp,0x10
c001b822:	83 ec 04             	sub    esp,0x4
c001b825:	6a 00                	push   0x0
c001b827:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b82e:	50                   	push   eax
c001b82f:	6a 00                	push   0x0
c001b831:	e8 ab 85 fe ff       	call   c0003de1 <f_mount>
c001b836:	83 c4 10             	add    esp,0x10
c001b839:	b0 00                	mov    al,0x0
c001b83b:	eb 1b                	jmp    c001b858 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b83d:	8d 76 00             	lea    esi,[esi+0x0]
c001b840:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b845:	83 c0 01             	add    eax,0x1
c001b848:	a3 20 eb 02 c0       	mov    ds:0xc002eb20,eax
c001b84d:	8d 76 00             	lea    esi,[esi+0x0]
c001b850:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001b857:	90                   	nop
c001b858:	81 c4 4c 03 00 00    	add    esp,0x34c
c001b85e:	c3                   	ret    
c001b85f:	90                   	nop

c001b860 <FAT::allocateSwapfile(char const*, int)>:
c001b860:	55                   	push   ebp
c001b861:	57                   	push   edi
c001b862:	56                   	push   esi
c001b863:	53                   	push   ebx
c001b864:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b86a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b875:	83 ec 0c             	sub    esp,0xc
c001b878:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b87f:	e8 13 44 ff ff       	call   c000fc97 <malloc>
c001b884:	83 c4 10             	add    esp,0x10
c001b887:	89 c7                	mov    edi,eax
c001b889:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001b88e:	83 ec 04             	sub    esp,0x4
c001b891:	50                   	push   eax
c001b892:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b899:	57                   	push   edi
c001b89a:	e8 93 c8 fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001b89f:	83 c4 10             	add    esp,0x10
c001b8a2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b8a9:	83 ec 04             	sub    esp,0x4
c001b8ac:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b8b0:	50                   	push   eax
c001b8b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b8b5:	50                   	push   eax
c001b8b6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b8bd:	e8 90 cb fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001b8c2:	83 c4 10             	add    esp,0x10
c001b8c5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b8cc:	c1 e0 14             	shl    eax,0x14
c001b8cf:	89 c7                	mov    edi,eax
c001b8d1:	89 c5                	mov    ebp,eax
c001b8d3:	c1 fd 1f             	sar    ebp,0x1f
c001b8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8de:	89 f9                	mov    ecx,edi
c001b8e0:	31 c1                	xor    ecx,eax
c001b8e2:	89 cb                	mov    ebx,ecx
c001b8e4:	89 e9                	mov    ecx,ebp
c001b8e6:	31 d1                	xor    ecx,edx
c001b8e8:	89 ce                	mov    esi,ecx
c001b8ea:	89 f0                	mov    eax,esi
c001b8ec:	09 d8                	or     eax,ebx
c001b8ee:	0f 84 9c 00 00 00    	je     c001b990 <FAT::allocateSwapfile(char const*, int)+0x130>
c001b8f4:	83 ec 0c             	sub    esp,0xc
c001b8f7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b8fe:	e8 1b ca fe ff       	call   c000831e <File::unlink()>
c001b903:	83 c4 10             	add    esp,0x10
c001b906:	83 ec 08             	sub    esp,0x8
c001b909:	6a 12                	push   0x12
c001b90b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b912:	e8 39 c8 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001b917:	83 c4 10             	add    esp,0x10
c001b91a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b921:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b927:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b92e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b935:	c1 e0 14             	shl    eax,0x14
c001b938:	83 ec 04             	sub    esp,0x4
c001b93b:	6a 01                	push   0x1
c001b93d:	50                   	push   eax
c001b93e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b945:	e8 4f 9b fe ff       	call   c0005499 <f_expand>
c001b94a:	83 c4 10             	add    esp,0x10
c001b94d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b954:	8b 00                	mov    eax,DWORD PTR [eax]
c001b956:	83 c0 10             	add    eax,0x10
c001b959:	8b 00                	mov    eax,DWORD PTR [eax]
c001b95b:	83 ec 0c             	sub    esp,0xc
c001b95e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b962:	52                   	push   edx
c001b963:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b967:	52                   	push   edx
c001b968:	6a 00                	push   0x0
c001b96a:	68 00 04 00 00       	push   0x400
c001b96f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b976:	ff d0                	call   eax
c001b978:	83 c4 20             	add    esp,0x20
c001b97b:	83 ec 0c             	sub    esp,0xc
c001b97e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b985:	e8 24 c8 fe ff       	call   c00081ae <File::close()>
c001b98a:	83 c4 10             	add    esp,0x10
c001b98d:	8d 76 00             	lea    esi,[esi+0x0]
c001b990:	83 ec 08             	sub    esp,0x8
c001b993:	6a 01                	push   0x1
c001b995:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b99c:	e8 af c7 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001b9a1:	83 c4 10             	add    esp,0x10
c001b9a4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b9ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9ad:	83 c0 0c             	add    eax,0xc
c001b9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9b2:	83 ec 0c             	sub    esp,0xc
c001b9b5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b9b9:	52                   	push   edx
c001b9ba:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b9be:	52                   	push   edx
c001b9bf:	6a 00                	push   0x0
c001b9c1:	6a 04                	push   0x4
c001b9c3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b9ca:	ff d0                	call   eax
c001b9cc:	83 c4 20             	add    esp,0x20
c001b9cf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b9d6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b9dc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b9e3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b9ea:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b9ed:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b9f4:	83 ec 0c             	sub    esp,0xc
c001b9f7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b9fe:	e8 ab c7 fe ff       	call   c00081ae <File::close()>
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ba0d:	ba 00 00 00 00       	mov    edx,0x0
c001ba12:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ba18:	5b                   	pop    ebx
c001ba19:	5e                   	pop    esi
c001ba1a:	5f                   	pop    edi
c001ba1b:	5d                   	pop    ebp
c001ba1c:	c3                   	ret    
c001ba1d:	90                   	nop
c001ba1e:	66 90                	xchg   ax,ax

c001ba20 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ba20:	57                   	push   edi
c001ba21:	56                   	push   esi
c001ba22:	53                   	push   ebx
c001ba23:	81 ec 50 02 00 00    	sub    esp,0x250
c001ba29:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ba31:	74 0d                	je     c001ba40 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ba33:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ba3b:	75 0f                	jne    c001ba4c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ba3d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba40:	b8 04 00 00 00       	mov    eax,0x4
c001ba45:	e9 3a 01 00 00       	jmp    c001bb84 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001ba4a:	66 90                	xchg   ax,ax
c001ba4c:	83 ec 08             	sub    esp,0x8
c001ba4f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ba56:	50                   	push   eax
c001ba57:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ba5e:	e8 7c 8e fe ff       	call   c00048df <f_readdir>
c001ba63:	83 c4 10             	add    esp,0x10
c001ba66:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ba6d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001ba74:	83 ec 0c             	sub    esp,0xc
c001ba77:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ba7e:	83 c0 16             	add    eax,0x16
c001ba81:	50                   	push   eax
c001ba82:	e8 e9 4a fe ff       	call   c0000570 <strlen>
c001ba87:	83 c4 10             	add    esp,0x10
c001ba8a:	ba 00 00 00 00       	mov    edx,0x0
c001ba8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba93:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ba97:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ba9e:	0f b6 c0             	movzx  eax,al
c001baa1:	83 e0 10             	and    eax,0x10
c001baa4:	74 0a                	je     c001bab0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001baa6:	b8 02 00 00 00       	mov    eax,0x2
c001baab:	eb 0b                	jmp    c001bab8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001baad:	8d 76 00             	lea    esi,[esi+0x0]
c001bab0:	b8 01 00 00 00       	mov    eax,0x1
c001bab5:	8d 76 00             	lea    esi,[esi+0x0]
c001bab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001babc:	83 ec 08             	sub    esp,0x8
c001babf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bac6:	83 c0 16             	add    eax,0x16
c001bac9:	50                   	push   eax
c001baca:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bace:	83 c0 10             	add    eax,0x10
c001bad1:	50                   	push   eax
c001bad2:	e8 69 4b fe ff       	call   c0000640 <strcpy>
c001bad7:	83 c4 10             	add    esp,0x10
c001bada:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001bae1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bae8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001baec:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001baf3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001bafa:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bb01:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bb08:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001bb0f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001bb16:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bb1d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bb24:	89 c6                	mov    esi,eax
c001bb26:	89 d7                	mov    edi,edx
c001bb28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bb2a:	89 c8                	mov    eax,ecx
c001bb2c:	89 fa                	mov    edx,edi
c001bb2e:	89 f3                	mov    ebx,esi
c001bb30:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bb37:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bb3e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bb45:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bb4c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bb52:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bb59:	0f be c0             	movsx  eax,al
c001bb5c:	85 c0                	test   eax,eax
c001bb5e:	75 08                	jne    c001bb68 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001bb60:	b8 07 00 00 00       	mov    eax,0x7
c001bb65:	eb 1d                	jmp    c001bb84 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bb67:	90                   	nop
c001bb68:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bb6f:	85 c0                	test   eax,eax
c001bb71:	75 09                	jne    c001bb7c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001bb73:	b8 00 00 00 00       	mov    eax,0x0
c001bb78:	eb 0a                	jmp    c001bb84 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bb7a:	66 90                	xchg   ax,ax
c001bb7c:	b8 01 00 00 00       	mov    eax,0x1
c001bb81:	8d 76 00             	lea    esi,[esi+0x0]
c001bb84:	81 c4 50 02 00 00    	add    esp,0x250
c001bb8a:	5b                   	pop    ebx
c001bb8b:	5e                   	pop    esi
c001bb8c:	5f                   	pop    edi
c001bb8d:	c3                   	ret    
c001bb8e:	66 90                	xchg   ax,ax

c001bb90 <FAT::read(void*, unsigned long, void*, int*)>:
c001bb90:	83 ec 1c             	sub    esp,0x1c
c001bb93:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bb98:	74 0a                	je     c001bba4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bb9a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bb9f:	75 0b                	jne    c001bbac <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bba1:	8d 76 00             	lea    esi,[esi+0x0]
c001bba4:	b8 04 00 00 00       	mov    eax,0x4
c001bba9:	eb 41                	jmp    c001bbec <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bbab:	90                   	nop
c001bbac:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bbb0:	50                   	push   eax
c001bbb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bbb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bbbd:	e8 44 85 fe ff       	call   c0004106 <f_read>
c001bbc2:	83 c4 10             	add    esp,0x10
c001bbc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbcd:	89 c2                	mov    edx,eax
c001bbcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bbd3:	89 10                	mov    DWORD PTR [eax],edx
c001bbd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbd9:	85 c0                	test   eax,eax
c001bbdb:	75 07                	jne    c001bbe4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bbdd:	b8 00 00 00 00       	mov    eax,0x0
c001bbe2:	eb 08                	jmp    c001bbec <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bbe4:	b8 01 00 00 00       	mov    eax,0x1
c001bbe9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbec:	83 c4 1c             	add    esp,0x1c
c001bbef:	c3                   	ret    

c001bbf0 <FAT::write(void*, unsigned long, void*, int*)>:
c001bbf0:	83 ec 1c             	sub    esp,0x1c
c001bbf3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bbf8:	74 0a                	je     c001bc04 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bbfa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bbff:	75 0b                	jne    c001bc0c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bc01:	8d 76 00             	lea    esi,[esi+0x0]
c001bc04:	b8 04 00 00 00       	mov    eax,0x4
c001bc09:	eb 41                	jmp    c001bc4c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bc0b:	90                   	nop
c001bc0c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bc10:	50                   	push   eax
c001bc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bc19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bc1d:	e8 e3 86 fe ff       	call   c0004305 <f_write>
c001bc22:	83 c4 10             	add    esp,0x10
c001bc25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc2d:	89 c2                	mov    edx,eax
c001bc2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc33:	89 10                	mov    DWORD PTR [eax],edx
c001bc35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc39:	85 c0                	test   eax,eax
c001bc3b:	75 07                	jne    c001bc44 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bc3d:	b8 00 00 00 00       	mov    eax,0x0
c001bc42:	eb 08                	jmp    c001bc4c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bc44:	b8 01 00 00 00       	mov    eax,0x1
c001bc49:	8d 76 00             	lea    esi,[esi+0x0]
c001bc4c:	83 c4 1c             	add    esp,0x1c
c001bc4f:	c3                   	ret    

c001bc50 <FAT::close(void*)>:
c001bc50:	83 ec 1c             	sub    esp,0x1c
c001bc53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bc58:	75 0a                	jne    c001bc64 <FAT::close(void*)+0x14>
c001bc5a:	b8 04 00 00 00       	mov    eax,0x4
c001bc5f:	eb 3f                	jmp    c001bca0 <FAT::close(void*)+0x50>
c001bc61:	8d 76 00             	lea    esi,[esi+0x0]
c001bc64:	83 ec 0c             	sub    esp,0xc
c001bc67:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bc6b:	e8 a2 89 fe ff       	call   c0004612 <f_close>
c001bc70:	83 c4 10             	add    esp,0x10
c001bc73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc77:	83 ec 0c             	sub    esp,0xc
c001bc7a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bc7e:	e8 24 40 ff ff       	call   c000fca7 <free>
c001bc83:	83 c4 10             	add    esp,0x10
c001bc86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc8a:	85 c0                	test   eax,eax
c001bc8c:	75 0a                	jne    c001bc98 <FAT::close(void*)+0x48>
c001bc8e:	b8 00 00 00 00       	mov    eax,0x0
c001bc93:	eb 0b                	jmp    c001bca0 <FAT::close(void*)+0x50>
c001bc95:	8d 76 00             	lea    esi,[esi+0x0]
c001bc98:	b8 01 00 00 00       	mov    eax,0x1
c001bc9d:	8d 76 00             	lea    esi,[esi+0x0]
c001bca0:	83 c4 1c             	add    esp,0x1c
c001bca3:	c3                   	ret    

c001bca4 <FAT::closeDir(void*)>:
c001bca4:	83 ec 1c             	sub    esp,0x1c
c001bca7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bcac:	75 0a                	jne    c001bcb8 <FAT::closeDir(void*)+0x14>
c001bcae:	b8 04 00 00 00       	mov    eax,0x4
c001bcb3:	eb 3f                	jmp    c001bcf4 <FAT::closeDir(void*)+0x50>
c001bcb5:	8d 76 00             	lea    esi,[esi+0x0]
c001bcb8:	83 ec 0c             	sub    esp,0xc
c001bcbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bcbf:	e8 f9 8b fe ff       	call   c00048bd <f_closedir>
c001bcc4:	83 c4 10             	add    esp,0x10
c001bcc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bccb:	83 ec 0c             	sub    esp,0xc
c001bcce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bcd2:	e8 d0 3f ff ff       	call   c000fca7 <free>
c001bcd7:	83 c4 10             	add    esp,0x10
c001bcda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcde:	85 c0                	test   eax,eax
c001bce0:	75 0a                	jne    c001bcec <FAT::closeDir(void*)+0x48>
c001bce2:	b8 00 00 00 00       	mov    eax,0x0
c001bce7:	eb 0b                	jmp    c001bcf4 <FAT::closeDir(void*)+0x50>
c001bce9:	8d 76 00             	lea    esi,[esi+0x0]
c001bcec:	b8 01 00 00 00       	mov    eax,0x1
c001bcf1:	8d 76 00             	lea    esi,[esi+0x0]
c001bcf4:	83 c4 1c             	add    esp,0x1c
c001bcf7:	c3                   	ret    

c001bcf8 <FAT::truncate(void*, unsigned long long)>:
c001bcf8:	83 ec 2c             	sub    esp,0x2c
c001bcfb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bcff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bd03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd0b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bd10:	75 0a                	jne    c001bd1c <FAT::truncate(void*, unsigned long long)+0x24>
c001bd12:	b8 04 00 00 00       	mov    eax,0x4
c001bd17:	eb 47                	jmp    c001bd60 <FAT::truncate(void*, unsigned long long)+0x68>
c001bd19:	8d 76 00             	lea    esi,[esi+0x0]
c001bd1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bd20:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001bd2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd33:	83 ec 08             	sub    esp,0x8
c001bd36:	50                   	push   eax
c001bd37:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bd3b:	e8 01 89 fe ff       	call   c0004641 <f_lseek>
c001bd40:	83 c4 10             	add    esp,0x10
c001bd43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bd47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd4b:	85 c0                	test   eax,eax
c001bd4d:	75 09                	jne    c001bd58 <FAT::truncate(void*, unsigned long long)+0x60>
c001bd4f:	b8 00 00 00 00       	mov    eax,0x0
c001bd54:	eb 0a                	jmp    c001bd60 <FAT::truncate(void*, unsigned long long)+0x68>
c001bd56:	66 90                	xchg   ax,ax
c001bd58:	b8 01 00 00 00       	mov    eax,0x1
c001bd5d:	8d 76 00             	lea    esi,[esi+0x0]
c001bd60:	83 c4 2c             	add    esp,0x2c
c001bd63:	c3                   	ret    

c001bd64 <FAT::seek(void*, unsigned long long)>:
c001bd64:	83 ec 2c             	sub    esp,0x2c
c001bd67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bd6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd77:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bd7c:	75 0a                	jne    c001bd88 <FAT::seek(void*, unsigned long long)+0x24>
c001bd7e:	b8 04 00 00 00       	mov    eax,0x4
c001bd83:	eb 33                	jmp    c001bdb8 <FAT::seek(void*, unsigned long long)+0x54>
c001bd85:	8d 76 00             	lea    esi,[esi+0x0]
c001bd88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd8c:	83 ec 08             	sub    esp,0x8
c001bd8f:	50                   	push   eax
c001bd90:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bd94:	e8 a8 88 fe ff       	call   c0004641 <f_lseek>
c001bd99:	83 c4 10             	add    esp,0x10
c001bd9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bda0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bda4:	85 c0                	test   eax,eax
c001bda6:	75 08                	jne    c001bdb0 <FAT::seek(void*, unsigned long long)+0x4c>
c001bda8:	b8 00 00 00 00       	mov    eax,0x0
c001bdad:	eb 09                	jmp    c001bdb8 <FAT::seek(void*, unsigned long long)+0x54>
c001bdaf:	90                   	nop
c001bdb0:	b8 01 00 00 00       	mov    eax,0x1
c001bdb5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdb8:	83 c4 2c             	add    esp,0x2c
c001bdbb:	c3                   	ret    

c001bdbc <fatWrapperReadDisk>:
c001bdbc:	53                   	push   ebx
c001bdbd:	83 ec 18             	sub    esp,0x18
c001bdc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdc4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bdc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bdcd:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001bdd4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bdd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bddc:	ba 00 00 00 00       	mov    edx,0x0
c001bde1:	83 ec 0c             	sub    esp,0xc
c001bde4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bde8:	53                   	push   ebx
c001bde9:	52                   	push   edx
c001bdea:	50                   	push   eax
c001bdeb:	51                   	push   ecx
c001bdec:	e8 5f ec fe ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c001bdf1:	83 c4 20             	add    esp,0x20
c001bdf4:	83 c4 18             	add    esp,0x18
c001bdf7:	5b                   	pop    ebx
c001bdf8:	c3                   	ret    
c001bdf9:	8d 76 00             	lea    esi,[esi+0x0]

c001bdfc <fatWrapperWriteDisk>:
c001bdfc:	53                   	push   ebx
c001bdfd:	83 ec 18             	sub    esp,0x18
c001be00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be04:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001be08:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be0d:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001be14:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001be18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001be1c:	ba 00 00 00 00       	mov    edx,0x0
c001be21:	83 ec 0c             	sub    esp,0xc
c001be24:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be28:	53                   	push   ebx
c001be29:	52                   	push   edx
c001be2a:	50                   	push   eax
c001be2b:	51                   	push   ecx
c001be2c:	e8 8b ec fe ff       	call   c000aabc <LogicalDisk::write(unsigned long long, int, void*)>
c001be31:	83 c4 20             	add    esp,0x20
c001be34:	83 c4 18             	add    esp,0x18
c001be37:	5b                   	pop    ebx
c001be38:	c3                   	ret    
c001be39:	8d 76 00             	lea    esi,[esi+0x0]

c001be3c <fatWrapperIoctl>:
c001be3c:	53                   	push   ebx
c001be3d:	83 ec 28             	sub    esp,0x28
c001be40:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001be44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001be48:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001be4c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001be50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be55:	83 f8 02             	cmp    eax,0x2
c001be58:	75 32                	jne    c001be8c <fatWrapperIoctl+0x50>
c001be5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be62:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be67:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001be6e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001be74:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001be7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be7e:	66 89 02             	mov    WORD PTR [edx],ax
c001be81:	b8 00 00 00 00       	mov    eax,0x0
c001be86:	e9 c5 00 00 00       	jmp    c001bf50 <fatWrapperIoctl+0x114>
c001be8b:	90                   	nop
c001be8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be91:	83 f8 01             	cmp    eax,0x1
c001be94:	75 6a                	jne    c001bf00 <fatWrapperIoctl+0xc4>
c001be96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001be9e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bea3:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001beaa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001beb0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001beb6:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001bebc:	89 c8                	mov    eax,ecx
c001bebe:	89 da                	mov    edx,ebx
c001bec0:	0f a4 c2 0a          	shld   edx,eax,0xa
c001bec4:	c1 e0 0a             	shl    eax,0xa
c001bec7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001becc:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001bed3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001bed9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001bedf:	89 cb                	mov    ebx,ecx
c001bee1:	c1 fb 1f             	sar    ebx,0x1f
c001bee4:	53                   	push   ebx
c001bee5:	51                   	push   ecx
c001bee6:	52                   	push   edx
c001bee7:	50                   	push   eax
c001bee8:	e8 97 59 00 00       	call   c0021884 <__udivdi3>
c001beed:	83 c4 10             	add    esp,0x10
c001bef0:	89 c2                	mov    edx,eax
c001bef2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bef6:	89 10                	mov    DWORD PTR [eax],edx
c001bef8:	b8 00 00 00 00       	mov    eax,0x0
c001befd:	eb 51                	jmp    c001bf50 <fatWrapperIoctl+0x114>
c001beff:	90                   	nop
c001bf00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf05:	85 c0                	test   eax,eax
c001bf07:	75 07                	jne    c001bf10 <fatWrapperIoctl+0xd4>
c001bf09:	b8 00 00 00 00       	mov    eax,0x0
c001bf0e:	eb 40                	jmp    c001bf50 <fatWrapperIoctl+0x114>
c001bf10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf15:	83 f8 03             	cmp    eax,0x3
c001bf18:	75 1a                	jne    c001bf34 <fatWrapperIoctl+0xf8>
c001bf1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bf26:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001bf2c:	b8 00 00 00 00       	mov    eax,0x0
c001bf31:	eb 1d                	jmp    c001bf50 <fatWrapperIoctl+0x114>
c001bf33:	90                   	nop
c001bf34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf39:	83 f8 04             	cmp    eax,0x4
c001bf3c:	75 0a                	jne    c001bf48 <fatWrapperIoctl+0x10c>
c001bf3e:	b8 00 00 00 00       	mov    eax,0x0
c001bf43:	eb 0b                	jmp    c001bf50 <fatWrapperIoctl+0x114>
c001bf45:	8d 76 00             	lea    esi,[esi+0x0]
c001bf48:	b8 04 00 00 00       	mov    eax,0x4
c001bf4d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf50:	83 c4 28             	add    esp,0x28
c001bf53:	5b                   	pop    ebx
c001bf54:	c3                   	ret    
c001bf55:	90                   	nop
c001bf56:	66 90                	xchg   ax,ax

c001bf58 <FAT::FAT()>:
c001bf58:	83 ec 1c             	sub    esp,0x1c
c001bf5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf5f:	83 ec 0c             	sub    esp,0xc
c001bf62:	50                   	push   eax
c001bf63:	e8 08 be fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001bf68:	83 c4 10             	add    esp,0x10
c001bf6b:	ba 60 56 02 c0       	mov    edx,0xc0025660
c001bf70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf74:	89 10                	mov    DWORD PTR [eax],edx
c001bf76:	c7 05 20 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb20,0x0
c001bf80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bf88:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001bf8d:	7f 19                	jg     c001bfa8 <FAT::FAT()+0x50>
c001bf8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf93:	c7 04 85 40 eb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd14c0],0xffffffff
c001bf9e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001bfa3:	eb e3                	jmp    c001bf88 <FAT::FAT()+0x30>
c001bfa5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfa8:	90                   	nop
c001bfa9:	83 c4 1c             	add    esp,0x1c
c001bfac:	c3                   	ret    
c001bfad:	90                   	nop
c001bfae:	66 90                	xchg   ax,ax

c001bfb0 <FAT::fixFilepath(char*)>:
c001bfb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfb4:	8a 00                	mov    al,BYTE PTR [eax]
c001bfb6:	0f be c0             	movsx  eax,al
c001bfb9:	83 f8 40             	cmp    eax,0x40
c001bfbc:	7e 2e                	jle    c001bfec <FAT::fixFilepath(char*)+0x3c>
c001bfbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfc2:	8a 00                	mov    al,BYTE PTR [eax]
c001bfc4:	83 e8 41             	sub    eax,0x41
c001bfc7:	88 c2                	mov    dl,al
c001bfc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfcd:	88 10                	mov    BYTE PTR [eax],dl
c001bfcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfd3:	8a 00                	mov    al,BYTE PTR [eax]
c001bfd5:	0f be c0             	movsx  eax,al
c001bfd8:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001bfdf:	83 c0 30             	add    eax,0x30
c001bfe2:	88 c2                	mov    dl,al
c001bfe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfe8:	88 10                	mov    BYTE PTR [eax],dl
c001bfea:	66 90                	xchg   ax,ax
c001bfec:	90                   	nop
c001bfed:	c3                   	ret    
c001bfee:	66 90                	xchg   ax,ax

c001bff0 <FAT::open(char const*, void**, FileOpenMode)>:
c001bff0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bff6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bffe:	74 0c                	je     c001c00c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c000:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c008:	75 0e                	jne    c001c018 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c00a:	66 90                	xchg   ax,ax
c001c00c:	b8 04 00 00 00       	mov    eax,0x4
c001c011:	e9 46 01 00 00       	jmp    c001c15c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c016:	66 90                	xchg   ax,ax
c001c018:	83 ec 08             	sub    esp,0x8
c001c01b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c022:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c026:	50                   	push   eax
c001c027:	e8 14 46 fe ff       	call   c0000640 <strcpy>
c001c02c:	83 c4 10             	add    esp,0x10
c001c02f:	83 ec 08             	sub    esp,0x8
c001c032:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c036:	50                   	push   eax
c001c037:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c03e:	e8 6d ff ff ff       	call   c001bfb0 <FAT::fixFilepath(char*)>
c001c043:	83 c4 10             	add    esp,0x10
c001c046:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c04e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c055:	83 e0 01             	and    eax,0x1
c001c058:	74 12                	je     c001c06c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c05a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c061:	83 c8 01             	or     eax,0x1
c001c064:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c06b:	90                   	nop
c001c06c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c073:	83 e0 04             	and    eax,0x4
c001c076:	74 24                	je     c001c09c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c078:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c07f:	83 c8 30             	or     eax,0x30
c001c082:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c089:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c090:	83 c8 02             	or     eax,0x2
c001c093:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c09a:	66 90                	xchg   ax,ax
c001c09c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c0a3:	83 e0 02             	and    eax,0x2
c001c0a6:	74 14                	je     c001c0bc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c0a8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c0af:	83 c8 02             	or     eax,0x2
c001c0b2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c0b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c0c3:	83 e0 08             	and    eax,0x8
c001c0c6:	74 14                	je     c001c0dc <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c0c8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c0cf:	83 c8 04             	or     eax,0x4
c001c0d2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c0e3:	83 e0 10             	and    eax,0x10
c001c0e6:	74 14                	je     c001c0fc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c0e8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c0ef:	83 c8 08             	or     eax,0x8
c001c0f2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0fc:	83 ec 0c             	sub    esp,0xc
c001c0ff:	68 28 02 00 00       	push   0x228
c001c104:	e8 8e 3b ff ff       	call   c000fc97 <malloc>
c001c109:	83 c4 10             	add    esp,0x10
c001c10c:	89 c2                	mov    edx,eax
c001c10e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c115:	89 10                	mov    DWORD PTR [eax],edx
c001c117:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c11f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c126:	8b 00                	mov    eax,DWORD PTR [eax]
c001c128:	83 ec 04             	sub    esp,0x4
c001c12b:	52                   	push   edx
c001c12c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c130:	52                   	push   edx
c001c131:	50                   	push   eax
c001c132:	e8 0c 7d fe ff       	call   c0003e43 <f_open>
c001c137:	83 c4 10             	add    esp,0x10
c001c13a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c141:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c149:	74 09                	je     c001c154 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c14b:	b8 01 00 00 00       	mov    eax,0x1
c001c150:	eb 0a                	jmp    c001c15c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c152:	66 90                	xchg   ax,ax
c001c154:	b8 00 00 00 00       	mov    eax,0x0
c001c159:	8d 76 00             	lea    esi,[esi+0x0]
c001c15c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c162:	c3                   	ret    
c001c163:	90                   	nop

c001c164 <FAT::openDir(char const*, void**)>:
c001c164:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c16a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c172:	74 0c                	je     c001c180 <FAT::openDir(char const*, void**)+0x1c>
c001c174:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c17c:	75 0e                	jne    c001c18c <FAT::openDir(char const*, void**)+0x28>
c001c17e:	66 90                	xchg   ax,ax
c001c180:	b8 04 00 00 00       	mov    eax,0x4
c001c185:	e9 82 00 00 00       	jmp    c001c20c <FAT::openDir(char const*, void**)+0xa8>
c001c18a:	66 90                	xchg   ax,ax
c001c18c:	83 ec 08             	sub    esp,0x8
c001c18f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c196:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c19a:	50                   	push   eax
c001c19b:	e8 a0 44 fe ff       	call   c0000640 <strcpy>
c001c1a0:	83 c4 10             	add    esp,0x10
c001c1a3:	83 ec 08             	sub    esp,0x8
c001c1a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1aa:	50                   	push   eax
c001c1ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c1b2:	e8 f9 fd ff ff       	call   c001bfb0 <FAT::fixFilepath(char*)>
c001c1b7:	83 c4 10             	add    esp,0x10
c001c1ba:	83 ec 0c             	sub    esp,0xc
c001c1bd:	6a 30                	push   0x30
c001c1bf:	e8 d3 3a ff ff       	call   c000fc97 <malloc>
c001c1c4:	83 c4 10             	add    esp,0x10
c001c1c7:	89 c2                	mov    edx,eax
c001c1c9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c1d0:	89 10                	mov    DWORD PTR [eax],edx
c001c1d2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c1d9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1db:	83 ec 08             	sub    esp,0x8
c001c1de:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c1e2:	52                   	push   edx
c001c1e3:	50                   	push   eax
c001c1e4:	e8 09 86 fe ff       	call   c00047f2 <f_opendir>
c001c1e9:	83 c4 10             	add    esp,0x10
c001c1ec:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c1f3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c1fb:	74 07                	je     c001c204 <FAT::openDir(char const*, void**)+0xa0>
c001c1fd:	b8 01 00 00 00       	mov    eax,0x1
c001c202:	eb 08                	jmp    c001c20c <FAT::openDir(char const*, void**)+0xa8>
c001c204:	b8 00 00 00 00       	mov    eax,0x0
c001c209:	8d 76 00             	lea    esi,[esi+0x0]
c001c20c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c212:	c3                   	ret    
c001c213:	90                   	nop

c001c214 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c214:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c21a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c222:	75 0c                	jne    c001c230 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c224:	b8 04 00 00 00       	mov    eax,0x4
c001c229:	e9 d6 00 00 00       	jmp    c001c304 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c22e:	66 90                	xchg   ax,ax
c001c230:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c238:	75 0a                	jne    c001c244 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c23a:	b8 04 00 00 00       	mov    eax,0x4
c001c23f:	e9 c0 00 00 00       	jmp    c001c304 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c244:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c24c:	75 0a                	jne    c001c258 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c24e:	b8 04 00 00 00       	mov    eax,0x4
c001c253:	e9 ac 00 00 00       	jmp    c001c304 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c258:	83 ec 08             	sub    esp,0x8
c001c25b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c262:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c269:	50                   	push   eax
c001c26a:	e8 d1 43 fe ff       	call   c0000640 <strcpy>
c001c26f:	83 c4 10             	add    esp,0x10
c001c272:	83 ec 08             	sub    esp,0x8
c001c275:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c27c:	50                   	push   eax
c001c27d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c284:	e8 27 fd ff ff       	call   c001bfb0 <FAT::fixFilepath(char*)>
c001c289:	83 c4 10             	add    esp,0x10
c001c28c:	83 ec 08             	sub    esp,0x8
c001c28f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c293:	50                   	push   eax
c001c294:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c29b:	50                   	push   eax
c001c29c:	e8 d0 86 fe ff       	call   c0004971 <f_stat>
c001c2a1:	83 c4 10             	add    esp,0x10
c001c2a4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c2ab:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c2b2:	85 c0                	test   eax,eax
c001c2b4:	74 0a                	je     c001c2c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c2b6:	83 f8 04             	cmp    eax,0x4
c001c2b9:	74 39                	je     c001c2f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c2bb:	eb 3f                	jmp    c001c2fc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001c2bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c2c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c2c4:	0f b6 c0             	movzx  eax,al
c001c2c7:	83 e0 10             	and    eax,0x10
c001c2ca:	0f 95 c2             	setne  dl
c001c2cd:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c2d4:	88 10                	mov    BYTE PTR [eax],dl
c001c2d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2da:	ba 00 00 00 00       	mov    edx,0x0
c001c2df:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c2e6:	89 01                	mov    DWORD PTR [ecx],eax
c001c2e8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c2eb:	b8 00 00 00 00       	mov    eax,0x0
c001c2f0:	eb 12                	jmp    c001c304 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c2f2:	66 90                	xchg   ax,ax
c001c2f4:	b8 02 00 00 00       	mov    eax,0x2
c001c2f9:	eb 09                	jmp    c001c304 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c2fb:	90                   	nop
c001c2fc:	b8 01 00 00 00       	mov    eax,0x1
c001c301:	8d 76 00             	lea    esi,[esi+0x0]
c001c304:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c30a:	c3                   	ret    
c001c30b:	90                   	nop

c001c30c <FAT::unlink(char const*)>:
c001c30c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c312:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c31a:	75 08                	jne    c001c324 <FAT::unlink(char const*)+0x18>
c001c31c:	b8 04 00 00 00       	mov    eax,0x4
c001c321:	eb 61                	jmp    c001c384 <FAT::unlink(char const*)+0x78>
c001c323:	90                   	nop
c001c324:	83 ec 08             	sub    esp,0x8
c001c327:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c32e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c332:	50                   	push   eax
c001c333:	e8 08 43 fe ff       	call   c0000640 <strcpy>
c001c338:	83 c4 10             	add    esp,0x10
c001c33b:	83 ec 08             	sub    esp,0x8
c001c33e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c342:	50                   	push   eax
c001c343:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c34a:	e8 61 fc ff ff       	call   c001bfb0 <FAT::fixFilepath(char*)>
c001c34f:	83 c4 10             	add    esp,0x10
c001c352:	83 ec 0c             	sub    esp,0xc
c001c355:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c359:	50                   	push   eax
c001c35a:	e8 84 88 fe ff       	call   c0004be3 <f_unlink>
c001c35f:	83 c4 10             	add    esp,0x10
c001c362:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c369:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c370:	85 c0                	test   eax,eax
c001c372:	75 08                	jne    c001c37c <FAT::unlink(char const*)+0x70>
c001c374:	b8 00 00 00 00       	mov    eax,0x0
c001c379:	eb 09                	jmp    c001c384 <FAT::unlink(char const*)+0x78>
c001c37b:	90                   	nop
c001c37c:	b8 01 00 00 00       	mov    eax,0x1
c001c381:	8d 76 00             	lea    esi,[esi+0x0]
c001c384:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c38a:	c3                   	ret    
c001c38b:	90                   	nop

c001c38c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c38c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c392:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c399:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c3a0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c3a4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c3a8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c3b0:	75 0a                	jne    c001c3bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c3b2:	b8 04 00 00 00       	mov    eax,0x4
c001c3b7:	e9 7c 01 00 00       	jmp    c001c538 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001c3bc:	83 ec 08             	sub    esp,0x8
c001c3bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c3c6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c3ca:	50                   	push   eax
c001c3cb:	e8 70 42 fe ff       	call   c0000640 <strcpy>
c001c3d0:	83 c4 10             	add    esp,0x10
c001c3d3:	83 ec 08             	sub    esp,0x8
c001c3d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c3da:	50                   	push   eax
c001c3db:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c3e2:	e8 c9 fb ff ff       	call   c001bfb0 <FAT::fixFilepath(char*)>
c001c3e7:	83 c4 10             	add    esp,0x10
c001c3ea:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c3f2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c3fa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3ff:	83 e0 01             	and    eax,0x1
c001c402:	74 14                	je     c001c418 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001c404:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c40b:	83 c8 01             	or     eax,0x1
c001c40e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c415:	8d 76 00             	lea    esi,[esi+0x0]
c001c418:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c41d:	83 e0 02             	and    eax,0x2
c001c420:	74 12                	je     c001c434 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c422:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c429:	83 c8 20             	or     eax,0x20
c001c42c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c433:	90                   	nop
c001c434:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c439:	83 e0 04             	and    eax,0x4
c001c43c:	74 12                	je     c001c450 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001c43e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c445:	83 c8 04             	or     eax,0x4
c001c448:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c44f:	90                   	nop
c001c450:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c455:	83 e0 08             	and    eax,0x8
c001c458:	74 12                	je     c001c46c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001c45a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c461:	83 c8 02             	or     eax,0x2
c001c464:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c46b:	90                   	nop
c001c46c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c471:	83 e0 01             	and    eax,0x1
c001c474:	74 12                	je     c001c488 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001c476:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c47d:	83 c8 01             	or     eax,0x1
c001c480:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c487:	90                   	nop
c001c488:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c48d:	83 e0 02             	and    eax,0x2
c001c490:	74 12                	je     c001c4a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001c492:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c499:	83 c8 20             	or     eax,0x20
c001c49c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c4a3:	90                   	nop
c001c4a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4a9:	83 e0 04             	and    eax,0x4
c001c4ac:	74 12                	je     c001c4c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001c4ae:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c4b5:	83 c8 04             	or     eax,0x4
c001c4b8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c4bf:	90                   	nop
c001c4c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4c5:	83 e0 08             	and    eax,0x8
c001c4c8:	74 12                	je     c001c4dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001c4ca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c4d1:	83 c8 02             	or     eax,0x2
c001c4d4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c4db:	90                   	nop
c001c4dc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001c4e3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c4ea:	09 d0                	or     eax,edx
c001c4ec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c4f3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c4fb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c503:	83 ec 04             	sub    esp,0x4
c001c506:	52                   	push   edx
c001c507:	50                   	push   eax
c001c508:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c50c:	50                   	push   eax
c001c50d:	e8 46 8b fe ff       	call   c0005058 <f_chmod>
c001c512:	83 c4 10             	add    esp,0x10
c001c515:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c51c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c523:	85 c0                	test   eax,eax
c001c525:	75 09                	jne    c001c530 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001c527:	b8 00 00 00 00       	mov    eax,0x0
c001c52c:	eb 0a                	jmp    c001c538 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001c52e:	66 90                	xchg   ax,ax
c001c530:	b8 01 00 00 00       	mov    eax,0x1
c001c535:	8d 76 00             	lea    esi,[esi+0x0]
c001c538:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c53e:	c3                   	ret    
c001c53f:	90                   	nop

c001c540 <FAT::rename(char const*, char const*)>:
c001c540:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c546:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c54e:	74 0c                	je     c001c55c <FAT::rename(char const*, char const*)+0x1c>
c001c550:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c558:	75 0e                	jne    c001c568 <FAT::rename(char const*, char const*)+0x28>
c001c55a:	66 90                	xchg   ax,ax
c001c55c:	b8 04 00 00 00       	mov    eax,0x4
c001c561:	e9 9e 00 00 00       	jmp    c001c604 <FAT::rename(char const*, char const*)+0xc4>
c001c566:	66 90                	xchg   ax,ax
c001c568:	83 ec 08             	sub    esp,0x8
c001c56b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c572:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c579:	50                   	push   eax
c001c57a:	e8 c1 40 fe ff       	call   c0000640 <strcpy>
c001c57f:	83 c4 10             	add    esp,0x10
c001c582:	83 ec 08             	sub    esp,0x8
c001c585:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c58c:	50                   	push   eax
c001c58d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c594:	e8 17 fa ff ff       	call   c001bfb0 <FAT::fixFilepath(char*)>
c001c599:	83 c4 10             	add    esp,0x10
c001c59c:	83 ec 08             	sub    esp,0x8
c001c59f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c5a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c5aa:	50                   	push   eax
c001c5ab:	e8 90 40 fe ff       	call   c0000640 <strcpy>
c001c5b0:	83 c4 10             	add    esp,0x10
c001c5b3:	83 ec 08             	sub    esp,0x8
c001c5b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5ba:	50                   	push   eax
c001c5bb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c5c2:	e8 e9 f9 ff ff       	call   c001bfb0 <FAT::fixFilepath(char*)>
c001c5c7:	83 c4 10             	add    esp,0x10
c001c5ca:	83 ec 08             	sub    esp,0x8
c001c5cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5d1:	50                   	push   eax
c001c5d2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c5d9:	50                   	push   eax
c001c5da:	e8 c1 88 fe ff       	call   c0004ea0 <f_rename>
c001c5df:	83 c4 10             	add    esp,0x10
c001c5e2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c5e9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c5f0:	85 c0                	test   eax,eax
c001c5f2:	75 08                	jne    c001c5fc <FAT::rename(char const*, char const*)+0xbc>
c001c5f4:	b8 00 00 00 00       	mov    eax,0x0
c001c5f9:	eb 09                	jmp    c001c604 <FAT::rename(char const*, char const*)+0xc4>
c001c5fb:	90                   	nop
c001c5fc:	b8 01 00 00 00       	mov    eax,0x1
c001c601:	8d 76 00             	lea    esi,[esi+0x0]
c001c604:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c60a:	c3                   	ret    
c001c60b:	90                   	nop

c001c60c <FAT::mkdir(char const*)>:
c001c60c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c612:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c61a:	75 08                	jne    c001c624 <FAT::mkdir(char const*)+0x18>
c001c61c:	b8 04 00 00 00       	mov    eax,0x4
c001c621:	eb 61                	jmp    c001c684 <FAT::mkdir(char const*)+0x78>
c001c623:	90                   	nop
c001c624:	83 ec 08             	sub    esp,0x8
c001c627:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c62e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c632:	50                   	push   eax
c001c633:	e8 08 40 fe ff       	call   c0000640 <strcpy>
c001c638:	83 c4 10             	add    esp,0x10
c001c63b:	83 ec 08             	sub    esp,0x8
c001c63e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c642:	50                   	push   eax
c001c643:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c64a:	e8 61 f9 ff ff       	call   c001bfb0 <FAT::fixFilepath(char*)>
c001c64f:	83 c4 10             	add    esp,0x10
c001c652:	83 ec 0c             	sub    esp,0xc
c001c655:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c659:	50                   	push   eax
c001c65a:	e8 a6 86 fe ff       	call   c0004d05 <f_mkdir>
c001c65f:	83 c4 10             	add    esp,0x10
c001c662:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c669:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c670:	85 c0                	test   eax,eax
c001c672:	75 08                	jne    c001c67c <FAT::mkdir(char const*)+0x70>
c001c674:	b8 00 00 00 00       	mov    eax,0x0
c001c679:	eb 09                	jmp    c001c684 <FAT::mkdir(char const*)+0x78>
c001c67b:	90                   	nop
c001c67c:	b8 01 00 00 00       	mov    eax,0x1
c001c681:	8d 76 00             	lea    esi,[esi+0x0]
c001c684:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c68a:	c3                   	ret    
c001c68b:	90                   	nop

c001c68c <FAT::exists(char const*)>:
c001c68c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c692:	83 ec 08             	sub    esp,0x8
c001c695:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c69c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c6a0:	50                   	push   eax
c001c6a1:	e8 9a 3f fe ff       	call   c0000640 <strcpy>
c001c6a6:	83 c4 10             	add    esp,0x10
c001c6a9:	83 ec 08             	sub    esp,0x8
c001c6ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c6b0:	50                   	push   eax
c001c6b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c6b8:	e8 f3 f8 ff ff       	call   c001bfb0 <FAT::fixFilepath(char*)>
c001c6bd:	83 c4 10             	add    esp,0x10
c001c6c0:	83 ec 08             	sub    esp,0x8
c001c6c3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001c6ca:	50                   	push   eax
c001c6cb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c6cf:	50                   	push   eax
c001c6d0:	e8 9c 82 fe ff       	call   c0004971 <f_stat>
c001c6d5:	83 c4 10             	add    esp,0x10
c001c6d8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c6df:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c6e6:	85 c0                	test   eax,eax
c001c6e8:	75 06                	jne    c001c6f0 <FAT::exists(char const*)+0x64>
c001c6ea:	b0 01                	mov    al,0x1
c001c6ec:	eb 06                	jmp    c001c6f4 <FAT::exists(char const*)+0x68>
c001c6ee:	66 90                	xchg   ax,ax
c001c6f0:	b0 00                	mov    al,0x0
c001c6f2:	66 90                	xchg   ax,ax
c001c6f4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c6fa:	c3                   	ret    
c001c6fb:	90                   	nop

c001c6fc <isoReadDiscSectorHelper>:
c001c6fc:	83 ec 2c             	sub    esp,0x2c
c001c6ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c703:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c707:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c70c:	83 e8 41             	sub    eax,0x41
c001c70f:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c716:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c71a:	ba 00 00 00 00       	mov    edx,0x0
c001c71f:	83 ec 0c             	sub    esp,0xc
c001c722:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c726:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c72a:	52                   	push   edx
c001c72b:	50                   	push   eax
c001c72c:	51                   	push   ecx
c001c72d:	e8 1e e3 fe ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c001c732:	83 c4 20             	add    esp,0x20
c001c735:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c739:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c73e:	74 0c                	je     c001c74c <isoReadDiscSectorHelper+0x50>
c001c740:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c744:	c1 e0 0b             	shl    eax,0xb
c001c747:	eb 0b                	jmp    c001c754 <isoReadDiscSectorHelper+0x58>
c001c749:	8d 76 00             	lea    esi,[esi+0x0]
c001c74c:	b8 00 00 00 00       	mov    eax,0x0
c001c751:	8d 76 00             	lea    esi,[esi+0x0]
c001c754:	83 c4 2c             	add    esp,0x2c
c001c757:	c3                   	ret    

c001c758 <iso_kprintf>:
c001c758:	83 ec 0c             	sub    esp,0xc
c001c75b:	83 ec 08             	sub    esp,0x8
c001c75e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c762:	68 05 53 02 c0       	push   0xc0025305
c001c767:	e8 f8 a7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c76c:	83 c4 10             	add    esp,0x10
c001c76f:	90                   	nop
c001c770:	83 c4 0c             	add    esp,0xc
c001c773:	c3                   	ret    

c001c774 <iso_kprintfd>:
c001c774:	83 ec 0c             	sub    esp,0xc
c001c777:	83 ec 08             	sub    esp,0x8
c001c77a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c77e:	68 63 43 02 c0       	push   0xc0024363
c001c783:	e8 dc a7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c788:	83 c4 10             	add    esp,0x10
c001c78b:	90                   	nop
c001c78c:	83 c4 0c             	add    esp,0xc
c001c78f:	c3                   	ret    

c001c790 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c790:	b8 08 00 00 00       	mov    eax,0x8
c001c795:	c3                   	ret    

c001c796 <ISO9660::truncate(void*, unsigned long long)>:
c001c796:	b8 01 00 00 00       	mov    eax,0x1
c001c79b:	c3                   	ret    

c001c79c <ISO9660::getName()>:
c001c79c:	b8 c4 56 02 c0       	mov    eax,0xc00256c4
c001c7a1:	c3                   	ret    

c001c7a2 <ISO9660::closeDir(void*)>:
c001c7a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7a8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001c7ab:	90                   	nop

c001c7ac <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c7ac:	b8 01 00 00 00       	mov    eax,0x1
c001c7b1:	c3                   	ret    

c001c7b2 <ISO9660::unlink(char const*)>:
c001c7b2:	b8 01 00 00 00       	mov    eax,0x1
c001c7b7:	c3                   	ret    

c001c7b8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c7b8:	b8 03 00 00 00       	mov    eax,0x3
c001c7bd:	c3                   	ret    

c001c7be <ISO9660::rename(char const*, char const*)>:
c001c7be:	b8 01 00 00 00       	mov    eax,0x1
c001c7c3:	c3                   	ret    

c001c7c4 <ISO9660::mkdir(char const*)>:
c001c7c4:	b8 01 00 00 00       	mov    eax,0x1
c001c7c9:	c3                   	ret    

c001c7ca <ISO9660::~ISO9660()>:
c001c7ca:	83 ec 0c             	sub    esp,0xc
c001c7cd:	ba 04 58 02 c0       	mov    edx,0xc0025804
c001c7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d6:	89 10                	mov    DWORD PTR [eax],edx
c001c7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7dc:	83 ec 0c             	sub    esp,0xc
c001c7df:	50                   	push   eax
c001c7e0:	e8 af b5 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001c7e5:	83 c4 10             	add    esp,0x10
c001c7e8:	90                   	nop
c001c7e9:	83 c4 0c             	add    esp,0xc
c001c7ec:	c3                   	ret    
c001c7ed:	90                   	nop

c001c7ee <ISO9660::~ISO9660()>:
c001c7ee:	83 ec 0c             	sub    esp,0xc
c001c7f1:	83 ec 0c             	sub    esp,0xc
c001c7f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7f8:	e8 cd ff ff ff       	call   c001c7ca <ISO9660::~ISO9660()>
c001c7fd:	83 c4 10             	add    esp,0x10
c001c800:	83 ec 08             	sub    esp,0x8
c001c803:	6a 08                	push   0x8
c001c805:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c809:	e8 11 0b ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001c80e:	83 c4 10             	add    esp,0x10
c001c811:	83 c4 0c             	add    esp,0xc
c001c814:	c3                   	ret    
c001c815:	90                   	nop

c001c816 <ISO9660::exists(char const*)>:
c001c816:	83 ec 18             	sub    esp,0x18
c001c819:	68 df 56 02 c0       	push   0xc00256df
c001c81e:	e8 bb 37 ff ff       	call   c000ffde <KePanic(char const*)>
c001c823:	31 c0                	xor    eax,eax
c001c825:	83 c4 1c             	add    esp,0x1c
c001c828:	c3                   	ret    
c001c829:	90                   	nop

c001c82a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c82a:	56                   	push   esi
c001c82b:	53                   	push   ebx
c001c82c:	53                   	push   ebx
c001c82d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c831:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c835:	85 db                	test   ebx,ebx
c001c837:	0f 84 ca 00 00 00    	je     c001c907 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c83d:	85 f6                	test   esi,esi
c001c83f:	0f 84 c2 00 00 00    	je     c001c907 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c845:	b8 03 00 00 00       	mov    eax,0x3
c001c84a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001c84f:	0f 85 b7 00 00 00    	jne    c001c90c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c855:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001c857:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c85e:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001c864:	74 1b                	je     c001c881 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001c866:	85 c0                	test   eax,eax
c001c868:	74 10                	je     c001c87a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001c86a:	83 ec 0c             	sub    esp,0xc
c001c86d:	68 fd 56 02 c0       	push   0xc00256fd
c001c872:	e8 67 37 ff ff       	call   c000ffde <KePanic(char const*)>
c001c877:	83 c4 10             	add    esp,0x10
c001c87a:	8a 03                	mov    al,BYTE PTR [ebx]
c001c87c:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c881:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c884:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c88b:	85 c0                	test   eax,eax
c001c88d:	74 09                	je     c001c898 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001c88f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c896:	74 48                	je     c001c8e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001c898:	83 ec 0c             	sub    esp,0xc
c001c89b:	68 0d 57 02 c0       	push   0xc002570d
c001c8a0:	e8 bf a6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c8a5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c8a8:	83 c4 10             	add    esp,0x10
c001c8ab:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c8b2:	85 c0                	test   eax,eax
c001c8b4:	74 17                	je     c001c8cd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001c8b6:	83 ec 0c             	sub    esp,0xc
c001c8b9:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c8c0:	68 2d 57 02 c0       	push   0xc002572d
c001c8c5:	e8 9a a6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c8ca:	83 c4 10             	add    esp,0x10
c001c8cd:	83 ec 0c             	sub    esp,0xc
c001c8d0:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c8d7:	50                   	push   eax
c001c8d8:	e8 51 a3 fe ff       	call   c0006c2e <init_percd>
c001c8dd:	83 c4 10             	add    esp,0x10
c001c8e0:	83 c3 03             	add    ebx,0x3
c001c8e3:	51                   	push   ecx
c001c8e4:	51                   	push   ecx
c001c8e5:	6a 00                	push   0x0
c001c8e7:	53                   	push   ebx
c001c8e8:	e8 08 9e fe ff       	call   c00066f5 <iso_open>
c001c8ed:	83 c4 10             	add    esp,0x10
c001c8f0:	89 c2                	mov    edx,eax
c001c8f2:	b8 01 00 00 00       	mov    eax,0x1
c001c8f7:	83 fa ff             	cmp    edx,0xffffffff
c001c8fa:	74 10                	je     c001c90c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c8fc:	83 c2 32             	add    edx,0x32
c001c8ff:	31 c0                	xor    eax,eax
c001c901:	01 d2                	add    edx,edx
c001c903:	89 16                	mov    DWORD PTR [esi],edx
c001c905:	eb 05                	jmp    c001c90c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c907:	b8 04 00 00 00       	mov    eax,0x4
c001c90c:	5a                   	pop    edx
c001c90d:	5b                   	pop    ebx
c001c90e:	5e                   	pop    esi
c001c90f:	c3                   	ret    

c001c910 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c910:	53                   	push   ebx
c001c911:	83 ec 08             	sub    esp,0x8
c001c914:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c91c:	85 c0                	test   eax,eax
c001c91e:	74 2d                	je     c001c94d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c920:	85 db                	test   ebx,ebx
c001c922:	74 29                	je     c001c94d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c924:	b9 02 00 00 00       	mov    ecx,0x2
c001c929:	52                   	push   edx
c001c92a:	99                   	cdq    
c001c92b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c92f:	f7 f9                	idiv   ecx
c001c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c935:	83 e8 32             	sub    eax,0x32
c001c938:	50                   	push   eax
c001c939:	e8 5f 9e fe ff       	call   c000679d <iso_read>
c001c93e:	83 c4 10             	add    esp,0x10
c001c941:	89 03                	mov    DWORD PTR [ebx],eax
c001c943:	09 d0                	or     eax,edx
c001c945:	0f 94 c0             	sete   al
c001c948:	0f b6 c0             	movzx  eax,al
c001c94b:	eb 05                	jmp    c001c952 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001c94d:	b8 04 00 00 00       	mov    eax,0x4
c001c952:	83 c4 08             	add    esp,0x8
c001c955:	5b                   	pop    ebx
c001c956:	c3                   	ret    
c001c957:	90                   	nop

c001c958 <ISO9660::seek(void*, unsigned long long)>:
c001c958:	57                   	push   edi
c001c959:	56                   	push   esi
c001c95a:	b8 04 00 00 00       	mov    eax,0x4
c001c95f:	51                   	push   ecx
c001c960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c964:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c968:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c96c:	85 d2                	test   edx,edx
c001c96e:	74 26                	je     c001c996 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001c970:	6a 00                	push   0x0
c001c972:	b9 02 00 00 00       	mov    ecx,0x2
c001c977:	57                   	push   edi
c001c978:	89 d0                	mov    eax,edx
c001c97a:	56                   	push   esi
c001c97b:	99                   	cdq    
c001c97c:	f7 f9                	idiv   ecx
c001c97e:	83 e8 32             	sub    eax,0x32
c001c981:	50                   	push   eax
c001c982:	e8 2c 9f fe ff       	call   c00068b3 <iso_seek>
c001c987:	83 c4 10             	add    esp,0x10
c001c98a:	31 f0                	xor    eax,esi
c001c98c:	31 fa                	xor    edx,edi
c001c98e:	09 d0                	or     eax,edx
c001c990:	0f 95 c0             	setne  al
c001c993:	0f b6 c0             	movzx  eax,al
c001c996:	5a                   	pop    edx
c001c997:	5e                   	pop    esi
c001c998:	5f                   	pop    edi
c001c999:	c3                   	ret    

c001c99a <ISO9660::tell(void*, unsigned long long*)>:
c001c99a:	53                   	push   ebx
c001c99b:	83 ec 08             	sub    esp,0x8
c001c99e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c9a2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c9a6:	85 c0                	test   eax,eax
c001c9a8:	74 24                	je     c001c9ce <ISO9660::tell(void*, unsigned long long*)+0x34>
c001c9aa:	85 db                	test   ebx,ebx
c001c9ac:	74 20                	je     c001c9ce <ISO9660::tell(void*, unsigned long long*)+0x34>
c001c9ae:	83 ec 0c             	sub    esp,0xc
c001c9b1:	b9 02 00 00 00       	mov    ecx,0x2
c001c9b6:	99                   	cdq    
c001c9b7:	f7 f9                	idiv   ecx
c001c9b9:	83 e8 32             	sub    eax,0x32
c001c9bc:	50                   	push   eax
c001c9bd:	e8 75 9f fe ff       	call   c0006937 <iso_tell>
c001c9c2:	83 c4 10             	add    esp,0x10
c001c9c5:	89 03                	mov    DWORD PTR [ebx],eax
c001c9c7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001c9ca:	31 c0                	xor    eax,eax
c001c9cc:	eb 05                	jmp    c001c9d3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001c9ce:	b8 04 00 00 00       	mov    eax,0x4
c001c9d3:	83 c4 08             	add    esp,0x8
c001c9d6:	5b                   	pop    ebx
c001c9d7:	c3                   	ret    

c001c9d8 <ISO9660::stat(void*, unsigned long long*)>:
c001c9d8:	53                   	push   ebx
c001c9d9:	83 ec 14             	sub    esp,0x14
c001c9dc:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c9e0:	68 51 57 02 c0       	push   0xc0025751
c001c9e5:	e8 7a a5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c9ea:	83 c4 10             	add    esp,0x10
c001c9ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c9f2:	74 2c                	je     c001ca20 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001c9f4:	85 db                	test   ebx,ebx
c001c9f6:	74 28                	je     c001ca20 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001c9f8:	83 ec 0c             	sub    esp,0xc
c001c9fb:	b9 02 00 00 00       	mov    ecx,0x2
c001ca00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca04:	99                   	cdq    
c001ca05:	f7 f9                	idiv   ecx
c001ca07:	83 e8 32             	sub    eax,0x32
c001ca0a:	50                   	push   eax
c001ca0b:	e8 58 9f fe ff       	call   c0006968 <iso_total>
c001ca10:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca17:	89 03                	mov    DWORD PTR [ebx],eax
c001ca19:	83 c4 10             	add    esp,0x10
c001ca1c:	31 c0                	xor    eax,eax
c001ca1e:	eb 05                	jmp    c001ca25 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001ca20:	b8 04 00 00 00       	mov    eax,0x4
c001ca25:	83 c4 08             	add    esp,0x8
c001ca28:	5b                   	pop    ebx
c001ca29:	c3                   	ret    

c001ca2a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ca2a:	55                   	push   ebp
c001ca2b:	57                   	push   edi
c001ca2c:	56                   	push   esi
c001ca2d:	53                   	push   ebx
c001ca2e:	83 ec 18             	sub    esp,0x18
c001ca31:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ca35:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ca39:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ca3d:	68 59 57 02 c0       	push   0xc0025759
c001ca42:	e8 1d a5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ca47:	83 c4 10             	add    esp,0x10
c001ca4a:	85 ff                	test   edi,edi
c001ca4c:	0f 94 c0             	sete   al
c001ca4f:	85 f6                	test   esi,esi
c001ca51:	0f 94 c2             	sete   dl
c001ca54:	09 d0                	or     eax,edx
c001ca56:	a8 01                	test   al,0x1
c001ca58:	0f 85 dd 00 00 00    	jne    c001cb3b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ca5e:	85 db                	test   ebx,ebx
c001ca60:	0f 84 d5 00 00 00    	je     c001cb3b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ca66:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ca69:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001ca6f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001ca76:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001ca7d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ca7f:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001ca85:	74 1b                	je     c001caa2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001ca87:	85 c0                	test   eax,eax
c001ca89:	74 10                	je     c001ca9b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001ca8b:	83 ec 0c             	sub    esp,0xc
c001ca8e:	68 fd 56 02 c0       	push   0xc00256fd
c001ca93:	e8 46 35 ff ff       	call   c000ffde <KePanic(char const*)>
c001ca98:	83 c4 10             	add    esp,0x10
c001ca9b:	8a 03                	mov    al,BYTE PTR [ebx]
c001ca9d:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001caa2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001caa5:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001caac:	85 c0                	test   eax,eax
c001caae:	74 09                	je     c001cab9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001cab0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001cab7:	74 51                	je     c001cb0a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001cab9:	83 ec 0c             	sub    esp,0xc
c001cabc:	68 61 57 02 c0       	push   0xc0025761
c001cac1:	e8 9e a4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cac6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cac9:	83 c4 10             	add    esp,0x10
c001cacc:	83 3c 85 dc b9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4624],0x0
c001cad4:	74 21                	je     c001caf7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001cad6:	83 ec 0c             	sub    esp,0xc
c001cad9:	68 81 57 02 c0       	push   0xc0025781
c001cade:	e8 81 a4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cae3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cae6:	83 c4 10             	add    esp,0x10
c001cae9:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001caf0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001caf7:	83 ec 0c             	sub    esp,0xc
c001cafa:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001cb01:	50                   	push   eax
c001cb02:	e8 27 a1 fe ff       	call   c0006c2e <init_percd>
c001cb07:	83 c4 10             	add    esp,0x10
c001cb0a:	83 c3 03             	add    ebx,0x3
c001cb0d:	52                   	push   edx
c001cb0e:	52                   	push   edx
c001cb0f:	6a 00                	push   0x0
c001cb11:	53                   	push   ebx
c001cb12:	e8 de 9b fe ff       	call   c00066f5 <iso_open>
c001cb17:	83 c4 10             	add    esp,0x10
c001cb1a:	89 c5                	mov    ebp,eax
c001cb1c:	83 f8 ff             	cmp    eax,0xffffffff
c001cb1f:	75 21                	jne    c001cb42 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001cb21:	50                   	push   eax
c001cb22:	50                   	push   eax
c001cb23:	6a 01                	push   0x1
c001cb25:	53                   	push   ebx
c001cb26:	e8 ca 9b fe ff       	call   c00066f5 <iso_open>
c001cb2b:	83 c4 10             	add    esp,0x10
c001cb2e:	ba 02 00 00 00       	mov    edx,0x2
c001cb33:	40                   	inc    eax
c001cb34:	74 2b                	je     c001cb61 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001cb36:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001cb39:	eb 24                	jmp    c001cb5f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001cb3b:	ba 04 00 00 00       	mov    edx,0x4
c001cb40:	eb 1f                	jmp    c001cb61 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001cb42:	83 ec 0c             	sub    esp,0xc
c001cb45:	50                   	push   eax
c001cb46:	e8 1d 9e fe ff       	call   c0006968 <iso_total>
c001cb4b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001cb52:	89 07                	mov    DWORD PTR [edi],eax
c001cb54:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cb57:	e8 23 9c fe ff       	call   c000677f <iso_close>
c001cb5c:	83 c4 10             	add    esp,0x10
c001cb5f:	31 d2                	xor    edx,edx
c001cb61:	83 c4 0c             	add    esp,0xc
c001cb64:	89 d0                	mov    eax,edx
c001cb66:	5b                   	pop    ebx
c001cb67:	5e                   	pop    esi
c001cb68:	5f                   	pop    edi
c001cb69:	5d                   	pop    ebp
c001cb6a:	c3                   	ret    
c001cb6b:	90                   	nop

c001cb6c <ISO9660::close(void*)>:
c001cb6c:	83 ec 0c             	sub    esp,0xc
c001cb6f:	b8 04 00 00 00       	mov    eax,0x4
c001cb74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb78:	85 d2                	test   edx,edx
c001cb7a:	74 1b                	je     c001cb97 <ISO9660::close(void*)+0x2b>
c001cb7c:	83 ec 0c             	sub    esp,0xc
c001cb7f:	b9 02 00 00 00       	mov    ecx,0x2
c001cb84:	89 d0                	mov    eax,edx
c001cb86:	99                   	cdq    
c001cb87:	f7 f9                	idiv   ecx
c001cb89:	83 e8 32             	sub    eax,0x32
c001cb8c:	50                   	push   eax
c001cb8d:	e8 ed 9b fe ff       	call   c000677f <iso_close>
c001cb92:	83 c4 10             	add    esp,0x10
c001cb95:	31 c0                	xor    eax,eax
c001cb97:	83 c4 0c             	add    esp,0xc
c001cb9a:	c3                   	ret    
c001cb9b:	90                   	nop

c001cb9c <ISO9660::openDir(char const*, void**)>:
c001cb9c:	56                   	push   esi
c001cb9d:	53                   	push   ebx
c001cb9e:	50                   	push   eax
c001cb9f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cba3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cba7:	85 db                	test   ebx,ebx
c001cba9:	0f 84 bd 00 00 00    	je     c001cc6c <ISO9660::openDir(char const*, void**)+0xd0>
c001cbaf:	85 f6                	test   esi,esi
c001cbb1:	0f 84 b5 00 00 00    	je     c001cc6c <ISO9660::openDir(char const*, void**)+0xd0>
c001cbb7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001cbb9:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001cbc0:	38 15 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,dl
c001cbc6:	74 1b                	je     c001cbe3 <ISO9660::openDir(char const*, void**)+0x47>
c001cbc8:	85 c0                	test   eax,eax
c001cbca:	74 10                	je     c001cbdc <ISO9660::openDir(char const*, void**)+0x40>
c001cbcc:	83 ec 0c             	sub    esp,0xc
c001cbcf:	68 fd 56 02 c0       	push   0xc00256fd
c001cbd4:	e8 05 34 ff ff       	call   c000ffde <KePanic(char const*)>
c001cbd9:	83 c4 10             	add    esp,0x10
c001cbdc:	8a 03                	mov    al,BYTE PTR [ebx]
c001cbde:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001cbe3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cbe6:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cbed:	85 c0                	test   eax,eax
c001cbef:	74 10                	je     c001cc01 <ISO9660::openDir(char const*, void**)+0x65>
c001cbf1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001cbf8:	74 1a                	je     c001cc14 <ISO9660::openDir(char const*, void**)+0x78>
c001cbfa:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cc01:	83 ec 0c             	sub    esp,0xc
c001cc04:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001cc0b:	50                   	push   eax
c001cc0c:	e8 1d a0 fe ff       	call   c0006c2e <init_percd>
c001cc11:	83 c4 10             	add    esp,0x10
c001cc14:	83 c3 03             	add    ebx,0x3
c001cc17:	50                   	push   eax
c001cc18:	50                   	push   eax
c001cc19:	6a 01                	push   0x1
c001cc1b:	53                   	push   ebx
c001cc1c:	e8 d4 9a fe ff       	call   c00066f5 <iso_open>
c001cc21:	83 c4 10             	add    esp,0x10
c001cc24:	89 c3                	mov    ebx,eax
c001cc26:	83 f8 ff             	cmp    eax,0xffffffff
c001cc29:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001cc2e:	75 1c                	jne    c001cc4c <ISO9660::openDir(char const*, void**)+0xb0>
c001cc30:	53                   	push   ebx
c001cc31:	53                   	push   ebx
c001cc32:	68 a5 57 02 c0       	push   0xc00257a5
c001cc37:	ff b0 66 05 00 00    	push   DWORD PTR [eax+0x566]
c001cc3d:	e8 50 5c ff ff       	call   c0012892 <VgaText::puts(char const*)>
c001cc42:	83 c4 10             	add    esp,0x10
c001cc45:	b8 01 00 00 00       	mov    eax,0x1
c001cc4a:	eb 25                	jmp    c001cc71 <ISO9660::openDir(char const*, void**)+0xd5>
c001cc4c:	01 db                	add    ebx,ebx
c001cc4e:	51                   	push   ecx
c001cc4f:	83 c3 65             	add    ebx,0x65
c001cc52:	51                   	push   ecx
c001cc53:	68 b8 57 02 c0       	push   0xc00257b8
c001cc58:	ff b0 66 05 00 00    	push   DWORD PTR [eax+0x566]
c001cc5e:	e8 2f 5c ff ff       	call   c0012892 <VgaText::puts(char const*)>
c001cc63:	89 1e                	mov    DWORD PTR [esi],ebx
c001cc65:	83 c4 10             	add    esp,0x10
c001cc68:	31 c0                	xor    eax,eax
c001cc6a:	eb 05                	jmp    c001cc71 <ISO9660::openDir(char const*, void**)+0xd5>
c001cc6c:	b8 04 00 00 00       	mov    eax,0x4
c001cc71:	5a                   	pop    edx
c001cc72:	5b                   	pop    ebx
c001cc73:	5e                   	pop    esi
c001cc74:	c3                   	ret    
c001cc75:	90                   	nop

c001cc76 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001cc76:	55                   	push   ebp
c001cc77:	57                   	push   edi
c001cc78:	56                   	push   esi
c001cc79:	53                   	push   ebx
c001cc7a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cc80:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001cc87:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001cc8e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001cc96:	0f 84 e7 00 00 00    	je     c001cd83 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001cc9c:	85 db                	test   ebx,ebx
c001cc9e:	0f 84 df 00 00 00    	je     c001cd83 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001cca4:	83 ec 0c             	sub    esp,0xc
c001cca7:	68 cb 57 02 c0       	push   0xc00257cb
c001ccac:	e8 b3 a2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ccb1:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001ccb8:	b9 02 00 00 00       	mov    ecx,0x2
c001ccbd:	99                   	cdq    
c001ccbe:	f7 f9                	idiv   ecx
c001ccc0:	83 e8 32             	sub    eax,0x32
c001ccc3:	89 04 24             	mov    DWORD PTR [esp],eax
c001ccc6:	e8 ef 9c fe ff       	call   c00069ba <iso_readdir>
c001cccb:	83 c4 10             	add    esp,0x10
c001ccce:	89 c6                	mov    esi,eax
c001ccd0:	85 c0                	test   eax,eax
c001ccd2:	75 37                	jne    c001cd0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001ccd4:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001ccd9:	56                   	push   esi
c001ccda:	56                   	push   esi
c001ccdb:	68 d6 57 02 c0       	push   0xc00257d6
c001cce0:	ff b0 66 05 00 00    	push   DWORD PTR [eax+0x566]
c001cce6:	e8 a7 5b ff ff       	call   c0012892 <VgaText::puts(char const*)>
c001cceb:	83 c4 0c             	add    esp,0xc
c001ccee:	68 10 01 00 00       	push   0x110
c001ccf3:	6a 00                	push   0x0
c001ccf5:	57                   	push   edi
c001ccf6:	e8 f5 37 fe ff       	call   c00004f0 <memset>
c001ccfb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cd01:	83 c4 10             	add    esp,0x10
c001cd04:	b8 01 00 00 00       	mov    eax,0x1
c001cd09:	eb 7d                	jmp    c001cd88 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001cd0b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001cd11:	8d 68 08             	lea    ebp,[eax+0x8]
c001cd14:	83 ec 0c             	sub    esp,0xc
c001cd17:	55                   	push   ebp
c001cd18:	e8 53 38 fe ff       	call   c0000570 <strlen>
c001cd1d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cd25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd29:	83 c4 10             	add    esp,0x10
c001cd2c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001cd30:	75 0a                	jne    c001cd3c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001cd32:	b8 02 00 00 00       	mov    eax,0x2
c001cd37:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001cd3a:	74 05                	je     c001cd41 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001cd3c:	b8 01 00 00 00       	mov    eax,0x1
c001cd41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd45:	50                   	push   eax
c001cd46:	50                   	push   eax
c001cd47:	55                   	push   ebp
c001cd48:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd4c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001cd50:	50                   	push   eax
c001cd51:	e8 ea 38 fe ff       	call   c0000640 <strcpy>
c001cd56:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001cd5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd5f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001cd65:	5a                   	pop    edx
c001cd66:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001cd6b:	59                   	pop    ecx
c001cd6c:	68 e9 57 02 c0       	push   0xc00257e9
c001cd71:	ff b0 66 05 00 00    	push   DWORD PTR [eax+0x566]
c001cd77:	e8 16 5b ff ff       	call   c0012892 <VgaText::puts(char const*)>
c001cd7c:	83 c4 10             	add    esp,0x10
c001cd7f:	31 c0                	xor    eax,eax
c001cd81:	eb 05                	jmp    c001cd88 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001cd83:	b8 04 00 00 00       	mov    eax,0x4
c001cd88:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cd8e:	5b                   	pop    ebx
c001cd8f:	5e                   	pop    esi
c001cd90:	5f                   	pop    edi
c001cd91:	5d                   	pop    ebp
c001cd92:	c3                   	ret    

c001cd93 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001cd93:	57                   	push   edi
c001cd94:	56                   	push   esi
c001cd95:	53                   	push   ebx
c001cd96:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd9a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cd9e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cda2:	39 35 24 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec24,esi
c001cda8:	0f be cb             	movsx  ecx,bl
c001cdab:	75 0b                	jne    c001cdb8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001cdad:	0f be 05 84 6a 02 c0 	movsx  eax,BYTE PTR ds:0xc0026a84
c001cdb4:	39 c8                	cmp    eax,ecx
c001cdb6:	74 47                	je     c001cdff <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001cdb8:	83 ec 0c             	sub    esp,0xc
c001cdbb:	31 d2                	xor    edx,edx
c001cdbd:	68 40 ec 02 c0       	push   0xc002ec40
c001cdc2:	6a 01                	push   0x1
c001cdc4:	52                   	push   edx
c001cdc5:	56                   	push   esi
c001cdc6:	ff 34 8d dc b9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4624]
c001cdcd:	e8 7e dc fe ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c001cdd2:	83 c4 20             	add    esp,0x20
c001cdd5:	85 c0                	test   eax,eax
c001cdd7:	75 0e                	jne    c001cde7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001cdd9:	89 35 24 ec 02 c0    	mov    DWORD PTR ds:0xc002ec24,esi
c001cddf:	88 1d 84 6a 02 c0    	mov    BYTE PTR ds:0xc0026a84,bl
c001cde5:	eb 18                	jmp    c001cdff <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001cde7:	50                   	push   eax
c001cde8:	68 00 08 00 00       	push   0x800
c001cded:	6a 00                	push   0x0
c001cdef:	57                   	push   edi
c001cdf0:	e8 fb 36 fe ff       	call   c00004f0 <memset>
c001cdf5:	83 c4 10             	add    esp,0x10
c001cdf8:	b8 01 00 00 00       	mov    eax,0x1
c001cdfd:	eb 0e                	jmp    c001ce0d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001cdff:	be 40 ec 02 c0       	mov    esi,0xc002ec40
c001ce04:	b9 00 08 00 00       	mov    ecx,0x800
c001ce09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ce0b:	31 c0                	xor    eax,eax
c001ce0d:	5b                   	pop    ebx
c001ce0e:	5e                   	pop    esi
c001ce0f:	5f                   	pop    edi
c001ce10:	c3                   	ret    
c001ce11:	90                   	nop

c001ce12 <ISO9660::tryMount(LogicalDisk*, int)>:
c001ce12:	53                   	push   ebx
c001ce13:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ce19:	c7 05 24 ec 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002ec24,0xdeadbeef
c001ce23:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ce2a:	8d 58 41             	lea    ebx,[eax+0x41]
c001ce2d:	0f be db             	movsx  ebx,bl
c001ce30:	53                   	push   ebx
c001ce31:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ce35:	50                   	push   eax
c001ce36:	6a 10                	push   0x10
c001ce38:	e8 56 ff ff ff       	call   c001cd93 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce3d:	83 c4 10             	add    esp,0x10
c001ce40:	31 d2                	xor    edx,edx
c001ce42:	85 c0                	test   eax,eax
c001ce44:	75 33                	jne    c001ce79 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ce46:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ce4b:	75 2c                	jne    c001ce79 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ce4d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ce52:	75 25                	jne    c001ce79 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ce54:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ce59:	75 1e                	jne    c001ce79 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ce5b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ce60:	75 17                	jne    c001ce79 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ce62:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ce67:	75 10                	jne    c001ce79 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ce69:	83 ec 0c             	sub    esp,0xc
c001ce6c:	53                   	push   ebx
c001ce6d:	e8 bc 9d fe ff       	call   c0006c2e <init_percd>
c001ce72:	83 c4 10             	add    esp,0x10
c001ce75:	40                   	inc    eax
c001ce76:	0f 95 c2             	setne  dl
c001ce79:	88 d0                	mov    al,dl
c001ce7b:	81 c4 08 08 00 00    	add    esp,0x808
c001ce81:	5b                   	pop    ebx
c001ce82:	c3                   	ret    
c001ce83:	90                   	nop

c001ce84 <ISO9660::ISO9660()>:
c001ce84:	83 ec 0c             	sub    esp,0xc
c001ce87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce8b:	83 ec 0c             	sub    esp,0xc
c001ce8e:	50                   	push   eax
c001ce8f:	e8 dc ae fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001ce94:	83 c4 10             	add    esp,0x10
c001ce97:	ba 04 58 02 c0       	mov    edx,0xc0025804
c001ce9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cea0:	89 10                	mov    DWORD PTR [eax],edx
c001cea2:	e8 99 9e fe ff       	call   c0006d40 <fs_iso9660_init>
c001cea7:	90                   	nop
c001cea8:	83 c4 0c             	add    esp,0xc
c001ceab:	c3                   	ret    

c001ceac <SoundCard::beginPlayback()>:
c001ceac:	c7 44 24 04 68 58 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025868
c001ceb4:	e9 25 31 ff ff       	jmp    c000ffde <KePanic(char const*)>
c001ceb9:	90                   	nop

c001ceba <SoundCard::stopPlayback()>:
c001ceba:	c7 44 24 04 68 58 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025868
c001cec2:	e9 17 31 ff ff       	jmp    c000ffde <KePanic(char const*)>
c001cec7:	90                   	nop

c001cec8 <SoundCard::SoundCard(char const*)>:
c001cec8:	83 ec 1c             	sub    esp,0x1c
c001cecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cecf:	83 ec 08             	sub    esp,0x8
c001ced2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ced6:	50                   	push   eax
c001ced7:	e8 82 cc fe ff       	call   c0009b5e <Device::Device(char const*)>
c001cedc:	83 c4 10             	add    esp,0x10
c001cedf:	ba b4 58 02 c0       	mov    edx,0xc00258b4
c001cee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cee8:	89 10                	mov    DWORD PTR [eax],edx
c001ceea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceee:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cef9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cf03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf07:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cf11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf15:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cf1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf23:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cf2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cf35:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cf3a:	7f 1a                	jg     c001cf56 <SoundCard::SoundCard(char const*)+0x8e>
c001cf3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cf44:	83 c2 54             	add    edx,0x54
c001cf47:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cf4f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001cf54:	eb df                	jmp    c001cf35 <SoundCard::SoundCard(char const*)+0x6d>
c001cf56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf5a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cf61:	90                   	nop
c001cf62:	83 c4 1c             	add    esp,0x1c
c001cf65:	c3                   	ret    

c001cf66 <SoundCard::~SoundCard()>:
c001cf66:	83 ec 0c             	sub    esp,0xc
c001cf69:	ba b4 58 02 c0       	mov    edx,0xc00258b4
c001cf6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf72:	89 10                	mov    DWORD PTR [eax],edx
c001cf74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf78:	83 ec 0c             	sub    esp,0xc
c001cf7b:	50                   	push   eax
c001cf7c:	e8 7d c9 fe ff       	call   c00098fe <Device::~Device()>
c001cf81:	83 c4 10             	add    esp,0x10
c001cf84:	90                   	nop
c001cf85:	83 c4 0c             	add    esp,0xc
c001cf88:	c3                   	ret    
c001cf89:	90                   	nop

c001cf8a <SoundCard::~SoundCard()>:
c001cf8a:	83 ec 0c             	sub    esp,0xc
c001cf8d:	83 ec 0c             	sub    esp,0xc
c001cf90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf94:	e8 cd ff ff ff       	call   c001cf66 <SoundCard::~SoundCard()>
c001cf99:	83 c4 10             	add    esp,0x10
c001cf9c:	83 ec 08             	sub    esp,0x8
c001cf9f:	68 e8 01 00 00       	push   0x1e8
c001cfa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfa8:	e8 72 03 ff ff       	call   c000d31f <operator delete(void*, unsigned long)>
c001cfad:	83 c4 10             	add    esp,0x10
c001cfb0:	83 c4 0c             	add    esp,0xc
c001cfb3:	c3                   	ret    

c001cfb4 <SoundCard::configureRates(int, int, int)>:
c001cfb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cfb8:	31 c0                	xor    eax,eax
c001cfba:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cfc1:	75 20                	jne    c001cfe3 <SoundCard::configureRates(int, int, int)+0x2f>
c001cfc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cfc7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cfcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfd1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfdb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cfe1:	b0 01                	mov    al,0x1
c001cfe3:	c3                   	ret    

c001cfe4 <SoundCard::getSamples16(int, short*)>:
c001cfe4:	55                   	push   ebp
c001cfe5:	57                   	push   edi
c001cfe6:	31 ff                	xor    edi,edi
c001cfe8:	56                   	push   esi
c001cfe9:	53                   	push   ebx
c001cfea:	31 db                	xor    ebx,ebx
c001cfec:	83 ec 10             	sub    esp,0x10
c001cfef:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001cff3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cff7:	8d 04 36             	lea    eax,[esi+esi*1]
c001cffa:	50                   	push   eax
c001cffb:	6a 00                	push   0x0
c001cffd:	55                   	push   ebp
c001cffe:	e8 ed 34 fe ff       	call   c00004f0 <memset>
c001d003:	83 c4 10             	add    esp,0x10
c001d006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d00a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d011:	85 c0                	test   eax,eax
c001d013:	74 1b                	je     c001d030 <SoundCard::getSamples16(int, short*)+0x4c>
c001d015:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d019:	75 15                	jne    c001d030 <SoundCard::getSamples16(int, short*)+0x4c>
c001d01b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d01f:	55                   	push   ebp
c001d020:	56                   	push   esi
c001d021:	50                   	push   eax
c001d022:	e8 8d 03 00 00       	call   c001d3b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d027:	83 c4 10             	add    esp,0x10
c001d02a:	39 c7                	cmp    edi,eax
c001d02c:	7d 02                	jge    c001d030 <SoundCard::getSamples16(int, short*)+0x4c>
c001d02e:	89 c7                	mov    edi,eax
c001d030:	43                   	inc    ebx
c001d031:	83 fb 20             	cmp    ebx,0x20
c001d034:	75 d0                	jne    c001d006 <SoundCard::getSamples16(int, short*)+0x22>
c001d036:	83 c4 0c             	add    esp,0xc
c001d039:	89 f8                	mov    eax,edi
c001d03b:	5b                   	pop    ebx
c001d03c:	5e                   	pop    esi
c001d03d:	5f                   	pop    edi
c001d03e:	5d                   	pop    ebp
c001d03f:	c3                   	ret    

c001d040 <SoundCard::getSamples32(int, int*)>:
c001d040:	55                   	push   ebp
c001d041:	57                   	push   edi
c001d042:	31 ff                	xor    edi,edi
c001d044:	56                   	push   esi
c001d045:	31 f6                	xor    esi,esi
c001d047:	53                   	push   ebx
c001d048:	83 ec 10             	sub    esp,0x10
c001d04b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d04f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d053:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d057:	c1 e0 02             	shl    eax,0x2
c001d05a:	50                   	push   eax
c001d05b:	6a 00                	push   0x0
c001d05d:	55                   	push   ebp
c001d05e:	e8 8d 34 fe ff       	call   c00004f0 <memset>
c001d063:	83 c4 10             	add    esp,0x10
c001d066:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d06d:	85 c0                	test   eax,eax
c001d06f:	74 1b                	je     c001d08c <SoundCard::getSamples32(int, int*)+0x4c>
c001d071:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d075:	75 15                	jne    c001d08c <SoundCard::getSamples32(int, int*)+0x4c>
c001d077:	53                   	push   ebx
c001d078:	55                   	push   ebp
c001d079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d07d:	50                   	push   eax
c001d07e:	e8 fd 03 00 00       	call   c001d480 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d083:	83 c4 10             	add    esp,0x10
c001d086:	39 c6                	cmp    esi,eax
c001d088:	7d 02                	jge    c001d08c <SoundCard::getSamples32(int, int*)+0x4c>
c001d08a:	89 c6                	mov    esi,eax
c001d08c:	47                   	inc    edi
c001d08d:	83 ff 20             	cmp    edi,0x20
c001d090:	75 d4                	jne    c001d066 <SoundCard::getSamples32(int, int*)+0x26>
c001d092:	85 f6                	test   esi,esi
c001d094:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d09b:	75 0f                	jne    c001d0ac <SoundCard::getSamples32(int, int*)+0x6c>
c001d09d:	85 c0                	test   eax,eax
c001d09f:	74 1b                	je     c001d0bc <SoundCard::getSamples32(int, int*)+0x7c>
c001d0a1:	83 ec 0c             	sub    esp,0xc
c001d0a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0a6:	53                   	push   ebx
c001d0a7:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d0aa:	eb 0d                	jmp    c001d0b9 <SoundCard::getSamples32(int, int*)+0x79>
c001d0ac:	85 c0                	test   eax,eax
c001d0ae:	75 0c                	jne    c001d0bc <SoundCard::getSamples32(int, int*)+0x7c>
c001d0b0:	83 ec 0c             	sub    esp,0xc
c001d0b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0b5:	53                   	push   ebx
c001d0b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d0b9:	83 c4 10             	add    esp,0x10
c001d0bc:	83 c4 0c             	add    esp,0xc
c001d0bf:	89 f0                	mov    eax,esi
c001d0c1:	5b                   	pop    ebx
c001d0c2:	5e                   	pop    esi
c001d0c3:	5f                   	pop    edi
c001d0c4:	5d                   	pop    ebp
c001d0c5:	c3                   	ret    

c001d0c6 <SoundCard::addChannel(SoundPort*)>:
c001d0c6:	83 ec 0c             	sub    esp,0xc
c001d0c9:	31 c0                	xor    eax,eax
c001d0cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d0cf:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d0d7:	74 1b                	je     c001d0f4 <SoundCard::addChannel(SoundPort*)+0x2e>
c001d0d9:	40                   	inc    eax
c001d0da:	83 f8 20             	cmp    eax,0x20
c001d0dd:	75 f0                	jne    c001d0cf <SoundCard::addChannel(SoundPort*)+0x9>
c001d0df:	83 ec 0c             	sub    esp,0xc
c001d0e2:	68 8d 58 02 c0       	push   0xc002588d
c001d0e7:	e8 f2 2e ff ff       	call   c000ffde <KePanic(char const*)>
c001d0ec:	83 c4 10             	add    esp,0x10
c001d0ef:	83 c8 ff             	or     eax,0xffffffff
c001d0f2:	eb 0b                	jmp    c001d0ff <SoundCard::addChannel(SoundPort*)+0x39>
c001d0f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d0f8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d0ff:	83 c4 0c             	add    esp,0xc
c001d102:	c3                   	ret    
c001d103:	90                   	nop

c001d104 <SoundCard::removeChannel(int)>:
c001d104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d108:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d10c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d117:	c3                   	ret    

c001d118 <SoundPort::SoundPort(int, int, int, int)>:
c001d118:	83 ec 0c             	sub    esp,0xc
c001d11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d11f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d12a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d132:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d136:	89 10                	mov    DWORD PTR [eax],edx
c001d138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d13c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d140:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d147:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d14b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d14e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d153:	75 13                	jne    c001d168 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d159:	8b 00                	mov    eax,DWORD PTR [eax]
c001d15b:	05 a0 0f 00 00       	add    eax,0xfa0
c001d160:	01 c0                	add    eax,eax
c001d162:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d166:	66 90                	xchg   ax,ax
c001d168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d16c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d170:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d177:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d17e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d182:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d185:	c1 e0 02             	shl    eax,0x2
c001d188:	83 ec 0c             	sub    esp,0xc
c001d18b:	50                   	push   eax
c001d18c:	e8 06 2b ff ff       	call   c000fc97 <malloc>
c001d191:	83 c4 10             	add    esp,0x10
c001d194:	89 c2                	mov    edx,eax
c001d196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d19a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d19d:	90                   	nop
c001d19e:	83 c4 0c             	add    esp,0xc
c001d1a1:	c3                   	ret    
c001d1a2:	66 90                	xchg   ax,ax

c001d1a4 <SoundPort::~SoundPort()>:
c001d1a4:	83 ec 0c             	sub    esp,0xc
c001d1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d1ae:	85 c0                	test   eax,eax
c001d1b0:	74 1e                	je     c001d1d0 <SoundPort::~SoundPort()+0x2c>
c001d1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d1b9:	83 ec 0c             	sub    esp,0xc
c001d1bc:	50                   	push   eax
c001d1bd:	e8 e5 2a ff ff       	call   c000fca7 <free>
c001d1c2:	83 c4 10             	add    esp,0x10
c001d1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1c9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d1d0:	90                   	nop
c001d1d1:	83 c4 0c             	add    esp,0xc
c001d1d4:	c3                   	ret    
c001d1d5:	90                   	nop
c001d1d6:	66 90                	xchg   ax,ax

c001d1d8 <SoundPort::unpause()>:
c001d1d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1dc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d1e0:	c3                   	ret    
c001d1e1:	90                   	nop
c001d1e2:	66 90                	xchg   ax,ax

c001d1e4 <SoundPort::pause()>:
c001d1e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1e8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d1ec:	c3                   	ret    
c001d1ed:	90                   	nop
c001d1ee:	66 90                	xchg   ax,ax

c001d1f0 <SoundPort::getBufferUsed()>:
c001d1f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d1f7:	c3                   	ret    

c001d1f8 <SoundPort::getBufferSize()>:
c001d1f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1fc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d1ff:	c3                   	ret    

c001d200 <SoundPort::buffer8(signed char*, int)>:
c001d200:	55                   	push   ebp
c001d201:	57                   	push   edi
c001d202:	56                   	push   esi
c001d203:	53                   	push   ebx
c001d204:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d208:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d20c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d20f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d212:	74 70                	je     c001d284 <SoundPort::buffer8(signed char*, int)+0x84>
c001d214:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d218:	85 c9                	test   ecx,ecx
c001d21a:	7e 68                	jle    c001d284 <SoundPort::buffer8(signed char*, int)+0x84>
c001d21c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d220:	8d 48 01             	lea    ecx,[eax+0x1]
c001d223:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d226:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d229:	89 f1                	mov    ecx,esi
c001d22b:	c1 e1 18             	shl    ecx,0x18
c001d22e:	29 f1                	sub    ecx,esi
c001d230:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d233:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d236:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d239:	74 51                	je     c001d28c <SoundPort::buffer8(signed char*, int)+0x8c>
c001d23b:	31 ff                	xor    edi,edi
c001d23d:	eb 25                	jmp    c001d264 <SoundPort::buffer8(signed char*, int)+0x64>
c001d23f:	90                   	nop
c001d240:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d245:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d248:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d24b:	89 f3                	mov    ebx,esi
c001d24d:	c1 e3 18             	shl    ebx,0x18
c001d250:	29 f3                	sub    ebx,esi
c001d252:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d255:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d258:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d25b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d25e:	74 1c                	je     c001d27c <SoundPort::buffer8(signed char*, int)+0x7c>
c001d260:	89 c7                	mov    edi,eax
c001d262:	66 90                	xchg   ax,ax
c001d264:	8d 47 01             	lea    eax,[edi+0x1]
c001d267:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d26b:	75 d3                	jne    c001d240 <SoundPort::buffer8(signed char*, int)+0x40>
c001d26d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d271:	8d 76 00             	lea    esi,[esi+0x0]
c001d274:	5b                   	pop    ebx
c001d275:	5e                   	pop    esi
c001d276:	5f                   	pop    edi
c001d277:	5d                   	pop    ebp
c001d278:	c3                   	ret    
c001d279:	8d 76 00             	lea    esi,[esi+0x0]
c001d27c:	5b                   	pop    ebx
c001d27d:	8d 47 02             	lea    eax,[edi+0x2]
c001d280:	5e                   	pop    esi
c001d281:	5f                   	pop    edi
c001d282:	5d                   	pop    ebp
c001d283:	c3                   	ret    
c001d284:	5b                   	pop    ebx
c001d285:	31 c0                	xor    eax,eax
c001d287:	5e                   	pop    esi
c001d288:	5f                   	pop    edi
c001d289:	5d                   	pop    ebp
c001d28a:	c3                   	ret    
c001d28b:	90                   	nop
c001d28c:	b8 01 00 00 00       	mov    eax,0x1
c001d291:	eb e1                	jmp    c001d274 <SoundPort::buffer8(signed char*, int)+0x74>
c001d293:	90                   	nop

c001d294 <SoundPort::buffer16(short*, int)>:
c001d294:	55                   	push   ebp
c001d295:	57                   	push   edi
c001d296:	56                   	push   esi
c001d297:	53                   	push   ebx
c001d298:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d29c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d2a0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d2a3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d2a6:	74 70                	je     c001d318 <SoundPort::buffer16(short*, int)+0x84>
c001d2a8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d2ac:	85 c9                	test   ecx,ecx
c001d2ae:	7e 68                	jle    c001d318 <SoundPort::buffer16(short*, int)+0x84>
c001d2b0:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001d2b4:	8d 48 01             	lea    ecx,[eax+0x1]
c001d2b7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d2ba:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d2bd:	89 f1                	mov    ecx,esi
c001d2bf:	c1 e1 10             	shl    ecx,0x10
c001d2c2:	29 f1                	sub    ecx,esi
c001d2c4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d2c7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d2ca:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d2cd:	74 51                	je     c001d320 <SoundPort::buffer16(short*, int)+0x8c>
c001d2cf:	31 ff                	xor    edi,edi
c001d2d1:	eb 25                	jmp    c001d2f8 <SoundPort::buffer16(short*, int)+0x64>
c001d2d3:	90                   	nop
c001d2d4:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001d2d9:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d2dc:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d2df:	89 f3                	mov    ebx,esi
c001d2e1:	c1 e3 10             	shl    ebx,0x10
c001d2e4:	29 f3                	sub    ebx,esi
c001d2e6:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d2e9:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d2ec:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d2ef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d2f2:	74 1c                	je     c001d310 <SoundPort::buffer16(short*, int)+0x7c>
c001d2f4:	89 c7                	mov    edi,eax
c001d2f6:	66 90                	xchg   ax,ax
c001d2f8:	8d 47 01             	lea    eax,[edi+0x1]
c001d2fb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d2ff:	75 d3                	jne    c001d2d4 <SoundPort::buffer16(short*, int)+0x40>
c001d301:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d305:	8d 76 00             	lea    esi,[esi+0x0]
c001d308:	5b                   	pop    ebx
c001d309:	5e                   	pop    esi
c001d30a:	5f                   	pop    edi
c001d30b:	5d                   	pop    ebp
c001d30c:	c3                   	ret    
c001d30d:	8d 76 00             	lea    esi,[esi+0x0]
c001d310:	5b                   	pop    ebx
c001d311:	8d 47 02             	lea    eax,[edi+0x2]
c001d314:	5e                   	pop    esi
c001d315:	5f                   	pop    edi
c001d316:	5d                   	pop    ebp
c001d317:	c3                   	ret    
c001d318:	5b                   	pop    ebx
c001d319:	31 c0                	xor    eax,eax
c001d31b:	5e                   	pop    esi
c001d31c:	5f                   	pop    edi
c001d31d:	5d                   	pop    ebp
c001d31e:	c3                   	ret    
c001d31f:	90                   	nop
c001d320:	b8 01 00 00 00       	mov    eax,0x1
c001d325:	eb e1                	jmp    c001d308 <SoundPort::buffer16(short*, int)+0x74>
c001d327:	90                   	nop

c001d328 <SoundPort::buffer32(int*, int)>:
c001d328:	55                   	push   ebp
c001d329:	57                   	push   edi
c001d32a:	56                   	push   esi
c001d32b:	53                   	push   ebx
c001d32c:	83 ec 04             	sub    esp,0x4
c001d32f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d333:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d337:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d33a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d33e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d341:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d344:	74 5a                	je     c001d3a0 <SoundPort::buffer32(int*, int)+0x78>
c001d346:	85 c0                	test   eax,eax
c001d348:	7e 56                	jle    c001d3a0 <SoundPort::buffer32(int*, int)+0x78>
c001d34a:	8d 71 01             	lea    esi,[ecx+0x1]
c001d34d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d350:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d353:	8b 37                	mov    esi,DWORD PTR [edi]
c001d355:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d358:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d35b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d35e:	74 4c                	je     c001d3ac <SoundPort::buffer32(int*, int)+0x84>
c001d360:	31 f6                	xor    esi,esi
c001d362:	eb 1c                	jmp    c001d380 <SoundPort::buffer32(int*, int)+0x58>
c001d364:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d367:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d36a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d36d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d370:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d374:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d377:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d37a:	74 18                	je     c001d394 <SoundPort::buffer32(int*, int)+0x6c>
c001d37c:	89 de                	mov    esi,ebx
c001d37e:	66 90                	xchg   ax,ax
c001d380:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d383:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001d386:	75 dc                	jne    c001d364 <SoundPort::buffer32(int*, int)+0x3c>
c001d388:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d38b:	90                   	nop
c001d38c:	83 c4 04             	add    esp,0x4
c001d38f:	5b                   	pop    ebx
c001d390:	5e                   	pop    esi
c001d391:	5f                   	pop    edi
c001d392:	5d                   	pop    ebp
c001d393:	c3                   	ret    
c001d394:	83 c4 04             	add    esp,0x4
c001d397:	8d 46 02             	lea    eax,[esi+0x2]
c001d39a:	5b                   	pop    ebx
c001d39b:	5e                   	pop    esi
c001d39c:	5f                   	pop    edi
c001d39d:	5d                   	pop    ebp
c001d39e:	c3                   	ret    
c001d39f:	90                   	nop
c001d3a0:	83 c4 04             	add    esp,0x4
c001d3a3:	31 c0                	xor    eax,eax
c001d3a5:	5b                   	pop    ebx
c001d3a6:	5e                   	pop    esi
c001d3a7:	5f                   	pop    edi
c001d3a8:	5d                   	pop    ebp
c001d3a9:	c3                   	ret    
c001d3aa:	66 90                	xchg   ax,ax
c001d3ac:	b8 01 00 00 00       	mov    eax,0x1
c001d3b1:	eb d9                	jmp    c001d38c <SoundPort::buffer32(int*, int)+0x64>
c001d3b3:	90                   	nop

c001d3b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d3b4:	57                   	push   edi
c001d3b5:	56                   	push   esi
c001d3b6:	53                   	push   ebx
c001d3b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d3bb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d3bf:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d3c5:	39 03                	cmp    DWORD PTR [ebx],eax
c001d3c7:	74 13                	je     c001d3dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d3c9:	83 ec 0c             	sub    esp,0xc
c001d3cc:	68 e0 58 02 c0       	push   0xc00258e0
c001d3d1:	e8 08 2c ff ff       	call   c000ffde <KePanic(char const*)>
c001d3d6:	83 c4 10             	add    esp,0x10
c001d3d9:	8d 76 00             	lea    esi,[esi+0x0]
c001d3dc:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d3e2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d3e5:	74 11                	je     c001d3f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d3e7:	83 ec 0c             	sub    esp,0xc
c001d3ea:	68 1f 59 02 c0       	push   0xc002591f
c001d3ef:	e8 ea 2b ff ff       	call   c000ffde <KePanic(char const*)>
c001d3f4:	83 c4 10             	add    esp,0x10
c001d3f7:	90                   	nop
c001d3f8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d3fe:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d401:	74 11                	je     c001d414 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d403:	83 ec 0c             	sub    esp,0xc
c001d406:	68 1f 59 02 c0       	push   0xc002591f
c001d40b:	e8 ce 2b ff ff       	call   c000ffde <KePanic(char const*)>
c001d410:	83 c4 10             	add    esp,0x10
c001d413:	90                   	nop
c001d414:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001d417:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001d41b:	7e 07                	jle    c001d424 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d41d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d421:	8d 76 00             	lea    esi,[esi+0x0]
c001d424:	85 f6                	test   esi,esi
c001d426:	7e 2c                	jle    c001d454 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001d428:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d42c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d42f:	31 c9                	xor    ecx,ecx
c001d431:	01 d7                	add    edi,edx
c001d433:	90                   	nop
c001d434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d437:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d43a:	85 c0                	test   eax,eax
c001d43c:	79 06                	jns    c001d444 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d43e:	05 ff 7f 00 00       	add    eax,0x7fff
c001d443:	90                   	nop
c001d444:	c1 f8 0f             	sar    eax,0xf
c001d447:	83 c1 04             	add    ecx,0x4
c001d44a:	66 01 02             	add    WORD PTR [edx],ax
c001d44d:	83 c2 02             	add    edx,0x2
c001d450:	39 d7                	cmp    edi,edx
c001d452:	75 e0                	jne    c001d434 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d454:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d457:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d45a:	83 ec 04             	sub    esp,0x4
c001d45d:	29 f0                	sub    eax,esi
c001d45f:	c1 e0 02             	shl    eax,0x2
c001d462:	50                   	push   eax
c001d463:	8d 04 b2             	lea    eax,[edx+esi*4]
c001d466:	50                   	push   eax
c001d467:	52                   	push   edx
c001d468:	e8 63 2f fe ff       	call   c00003d0 <memmove>
c001d46d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d470:	83 c4 10             	add    esp,0x10
c001d473:	29 f0                	sub    eax,esi
c001d475:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d478:	89 f0                	mov    eax,esi
c001d47a:	5b                   	pop    ebx
c001d47b:	5e                   	pop    esi
c001d47c:	5f                   	pop    edi
c001d47d:	c3                   	ret    
c001d47e:	66 90                	xchg   ax,ax

c001d480 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d480:	57                   	push   edi
c001d481:	56                   	push   esi
c001d482:	53                   	push   ebx
c001d483:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d487:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d48b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d48f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d495:	39 06                	cmp    DWORD PTR [esi],eax
c001d497:	74 13                	je     c001d4ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d499:	83 ec 0c             	sub    esp,0xc
c001d49c:	68 00 59 02 c0       	push   0xc0025900
c001d4a1:	e8 38 2b ff ff       	call   c000ffde <KePanic(char const*)>
c001d4a6:	83 c4 10             	add    esp,0x10
c001d4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001d4ac:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d4b2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d4b5:	74 11                	je     c001d4c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d4b7:	83 ec 0c             	sub    esp,0xc
c001d4ba:	68 3b 59 02 c0       	push   0xc002593b
c001d4bf:	e8 1a 2b ff ff       	call   c000ffde <KePanic(char const*)>
c001d4c4:	83 c4 10             	add    esp,0x10
c001d4c7:	90                   	nop
c001d4c8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d4ce:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d4d1:	74 11                	je     c001d4e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d4d3:	83 ec 0c             	sub    esp,0xc
c001d4d6:	68 3b 59 02 c0       	push   0xc002593b
c001d4db:	e8 fe 2a ff ff       	call   c000ffde <KePanic(char const*)>
c001d4e0:	83 c4 10             	add    esp,0x10
c001d4e3:	90                   	nop
c001d4e4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d4e7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d4eb:	7e 07                	jle    c001d4f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d4ed:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d4f1:	8d 76 00             	lea    esi,[esi+0x0]
c001d4f4:	85 ff                	test   edi,edi
c001d4f6:	7e 1c                	jle    c001d514 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d4f8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d4ff:	31 c0                	xor    eax,eax
c001d501:	8d 76 00             	lea    esi,[esi+0x0]
c001d504:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d507:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d50a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d50d:	83 c0 04             	add    eax,0x4
c001d510:	39 c1                	cmp    ecx,eax
c001d512:	75 f0                	jne    c001d504 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d514:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d517:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d51a:	83 ec 04             	sub    esp,0x4
c001d51d:	29 f8                	sub    eax,edi
c001d51f:	c1 e0 02             	shl    eax,0x2
c001d522:	50                   	push   eax
c001d523:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d526:	50                   	push   eax
c001d527:	52                   	push   edx
c001d528:	e8 a3 2e fe ff       	call   c00003d0 <memmove>
c001d52d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d530:	83 c4 10             	add    esp,0x10
c001d533:	29 f8                	sub    eax,edi
c001d535:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001d538:	89 f8                	mov    eax,edi
c001d53a:	5b                   	pop    ebx
c001d53b:	5e                   	pop    esi
c001d53c:	5f                   	pop    edi
c001d53d:	c3                   	ret    

c001d53e <PCI::open(int, int, void*)>:
c001d53e:	83 ec 18             	sub    esp,0x18
c001d541:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d545:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d549:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d54f:	8b 10                	mov    edx,DWORD PTR [eax]
c001d551:	50                   	push   eax
c001d552:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d555:	31 c0                	xor    eax,eax
c001d557:	83 c4 1c             	add    esp,0x1c
c001d55a:	c3                   	ret    
c001d55b:	90                   	nop

c001d55c <PCI::close(int, int, void*)>:
c001d55c:	31 c0                	xor    eax,eax
c001d55e:	c3                   	ret    
c001d55f:	90                   	nop

c001d560 <PCI::PCI()>:
c001d560:	83 ec 0c             	sub    esp,0xc
c001d563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d567:	83 ec 08             	sub    esp,0x8
c001d56a:	68 57 59 02 c0       	push   0xc0025957
c001d56f:	50                   	push   eax
c001d570:	e8 97 b3 fe ff       	call   c000890c <Bus::Bus(char const*)>
c001d575:	83 c4 10             	add    esp,0x10
c001d578:	ba 64 5a 02 c0       	mov    edx,0xc0025a64
c001d57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d581:	89 10                	mov    DWORD PTR [eax],edx
c001d583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d587:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d595:	a3 40 f4 02 c0       	mov    ds:0xc002f440,eax
c001d59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d59e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5a4:	0f b6 d0             	movzx  edx,al
c001d5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ab:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d5b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5bc:	0f b6 d0             	movzx  edx,al
c001d5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5d2:	8d 50 01             	lea    edx,[eax+0x1]
c001d5d5:	88 d1                	mov    cl,dl
c001d5d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d5db:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001d5e1:	0f b6 d0             	movzx  edx,al
c001d5e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d5ec:	83 c9 c0             	or     ecx,0xffffffc0
c001d5ef:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d5f3:	90                   	nop
c001d5f4:	83 c4 0c             	add    esp,0xc
c001d5f7:	c3                   	ret    

c001d5f8 <PCI::readBAR8(unsigned int, int)>:
c001d5f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d600:	f6 c2 01             	test   dl,0x1
c001d603:	74 07                	je     c001d60c <PCI::readBAR8(unsigned int, int)+0x14>
c001d605:	83 e2 fc             	and    edx,0xfffffffc
c001d608:	01 c2                	add    edx,eax
c001d60a:	ec                   	in     al,dx
c001d60b:	c3                   	ret    
c001d60c:	83 e2 f0             	and    edx,0xfffffff0
c001d60f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d612:	c3                   	ret    
c001d613:	90                   	nop

c001d614 <PCI::readBAR16(unsigned int, int)>:
c001d614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d618:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d61c:	f6 c2 01             	test   dl,0x1
c001d61f:	74 08                	je     c001d629 <PCI::readBAR16(unsigned int, int)+0x15>
c001d621:	83 e2 fc             	and    edx,0xfffffffc
c001d624:	01 c2                	add    edx,eax
c001d626:	66 ed                	in     ax,dx
c001d628:	c3                   	ret    
c001d629:	83 e2 f0             	and    edx,0xfffffff0
c001d62c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d630:	c3                   	ret    
c001d631:	90                   	nop

c001d632 <PCI::readBAR32(unsigned int, int)>:
c001d632:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d636:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d63a:	f6 c2 01             	test   dl,0x1
c001d63d:	74 07                	je     c001d646 <PCI::readBAR32(unsigned int, int)+0x14>
c001d63f:	83 e2 fc             	and    edx,0xfffffffc
c001d642:	01 c2                	add    edx,eax
c001d644:	ed                   	in     eax,dx
c001d645:	c3                   	ret    
c001d646:	83 e2 f0             	and    edx,0xfffffff0
c001d649:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d64c:	c3                   	ret    
c001d64d:	90                   	nop

c001d64e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d64e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d656:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d65a:	f6 c2 01             	test   dl,0x1
c001d65d:	74 07                	je     c001d666 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d65f:	83 e2 fc             	and    edx,0xfffffffc
c001d662:	01 ca                	add    edx,ecx
c001d664:	ee                   	out    dx,al
c001d665:	c3                   	ret    
c001d666:	83 e2 f0             	and    edx,0xfffffff0
c001d669:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d66c:	c3                   	ret    
c001d66d:	90                   	nop

c001d66e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d66e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d672:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d676:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d67a:	f6 c2 01             	test   dl,0x1
c001d67d:	74 08                	je     c001d687 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d67f:	83 e2 fc             	and    edx,0xfffffffc
c001d682:	01 ca                	add    edx,ecx
c001d684:	66 ef                	out    dx,ax
c001d686:	c3                   	ret    
c001d687:	83 e2 f0             	and    edx,0xfffffff0
c001d68a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d68e:	c3                   	ret    
c001d68f:	90                   	nop

c001d690 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d690:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d694:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d698:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d69c:	f6 c2 01             	test   dl,0x1
c001d69f:	74 07                	je     c001d6a8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d6a1:	83 e2 fc             	and    edx,0xfffffffc
c001d6a4:	01 ca                	add    edx,ecx
c001d6a6:	ef                   	out    dx,eax
c001d6a7:	c3                   	ret    
c001d6a8:	83 e2 f0             	and    edx,0xfffffff0
c001d6ab:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d6ae:	c3                   	ret    
c001d6af:	90                   	nop

c001d6b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d6b0:	55                   	push   ebp
c001d6b1:	57                   	push   edi
c001d6b2:	56                   	push   esi
c001d6b3:	53                   	push   ebx
c001d6b4:	83 ec 0c             	sub    esp,0xc
c001d6b7:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001d6bc:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d6c0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d6c4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d6c8:	83 fe 07             	cmp    esi,0x7
c001d6cb:	76 10                	jbe    c001d6dd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d6cd:	83 ec 0c             	sub    esp,0xc
c001d6d0:	68 5f 59 02 c0       	push   0xc002595f
c001d6d5:	e8 04 29 ff ff       	call   c000ffde <KePanic(char const*)>
c001d6da:	83 c4 10             	add    esp,0x10
c001d6dd:	0f b6 db             	movzx  ebx,bl
c001d6e0:	83 fb 0f             	cmp    ebx,0xf
c001d6e3:	76 10                	jbe    c001d6f5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001d6e5:	83 ec 0c             	sub    esp,0xc
c001d6e8:	68 8f 59 02 c0       	push   0xc002598f
c001d6ed:	e8 ec 28 ff ff       	call   c000ffde <KePanic(char const*)>
c001d6f2:	83 c4 10             	add    esp,0x10
c001d6f5:	8d 04 36             	lea    eax,[esi+esi*1]
c001d6f8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d6fd:	83 c8 f0             	or     eax,0xfffffff0
c001d700:	ee                   	out    dx,al
c001d701:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d706:	89 e8                	mov    eax,ebp
c001d708:	ee                   	out    dx,al
c001d709:	83 c4 0c             	add    esp,0xc
c001d70c:	89 d8                	mov    eax,ebx
c001d70e:	89 f9                	mov    ecx,edi
c001d710:	c1 e0 08             	shl    eax,0x8
c001d713:	0f b6 d9             	movzx  ebx,cl
c001d716:	83 e3 fc             	and    ebx,0xfffffffc
c001d719:	09 d8                	or     eax,ebx
c001d71b:	5b                   	pop    ebx
c001d71c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001d721:	5e                   	pop    esi
c001d722:	5f                   	pop    edi
c001d723:	5d                   	pop    ebp
c001d724:	c3                   	ret    
c001d725:	90                   	nop

c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d726:	57                   	push   edi
c001d727:	56                   	push   esi
c001d728:	53                   	push   ebx
c001d729:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d72d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d731:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d737:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d73b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d73f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d743:	83 ff 01             	cmp    edi,0x1
c001d746:	75 3f                	jne    c001d787 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001d748:	89 de                	mov    esi,ebx
c001d74a:	0f b6 c0             	movzx  eax,al
c001d74d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d753:	c1 e0 10             	shl    eax,0x10
c001d756:	0f b6 c9             	movzx  ecx,cl
c001d759:	09 f0                	or     eax,esi
c001d75b:	c1 e1 08             	shl    ecx,0x8
c001d75e:	0f b6 d2             	movzx  edx,dl
c001d761:	09 c8                	or     eax,ecx
c001d763:	c1 e2 0b             	shl    edx,0xb
c001d766:	09 d0                	or     eax,edx
c001d768:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d76d:	0d 00 00 00 80       	or     eax,0x80000000
c001d772:	ef                   	out    dx,eax
c001d773:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d778:	ed                   	in     eax,dx
c001d779:	83 e3 02             	and    ebx,0x2
c001d77c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d783:	d3 e8                	shr    eax,cl
c001d785:	eb 44                	jmp    c001d7cb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d787:	83 ff 02             	cmp    edi,0x2
c001d78a:	75 2d                	jne    c001d7b9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001d78c:	83 ec 0c             	sub    esp,0xc
c001d78f:	0f b6 c9             	movzx  ecx,cl
c001d792:	0f b6 d2             	movzx  edx,dl
c001d795:	0f b6 fb             	movzx  edi,bl
c001d798:	0f b6 c0             	movzx  eax,al
c001d79b:	57                   	push   edi
c001d79c:	51                   	push   ecx
c001d79d:	52                   	push   edx
c001d79e:	50                   	push   eax
c001d79f:	56                   	push   esi
c001d7a0:	e8 0b ff ff ff       	call   c001d6b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7a5:	89 c2                	mov    edx,eax
c001d7a7:	ed                   	in     eax,dx
c001d7a8:	83 e3 02             	and    ebx,0x2
c001d7ab:	83 c4 20             	add    esp,0x20
c001d7ae:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d7b5:	d3 e8                	shr    eax,cl
c001d7b7:	eb 12                	jmp    c001d7cb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d7b9:	83 ec 0c             	sub    esp,0xc
c001d7bc:	68 bf 59 02 c0       	push   0xc00259bf
c001d7c1:	e8 18 28 ff ff       	call   c000ffde <KePanic(char const*)>
c001d7c6:	83 c4 10             	add    esp,0x10
c001d7c9:	31 c0                	xor    eax,eax
c001d7cb:	5b                   	pop    ebx
c001d7cc:	5e                   	pop    esi
c001d7cd:	5f                   	pop    edi
c001d7ce:	c3                   	ret    
c001d7cf:	90                   	nop

c001d7d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d7d0:	83 ec 18             	sub    esp,0x18
c001d7d3:	6a 00                	push   0x0
c001d7d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7da:	50                   	push   eax
c001d7db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7e0:	50                   	push   eax
c001d7e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7e6:	50                   	push   eax
c001d7e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7eb:	e8 36 ff ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7f0:	83 c4 2c             	add    esp,0x2c
c001d7f3:	c3                   	ret    

c001d7f4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d7f4:	83 ec 18             	sub    esp,0x18
c001d7f7:	6a 0e                	push   0xe
c001d7f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7fe:	50                   	push   eax
c001d7ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d804:	50                   	push   eax
c001d805:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d80a:	50                   	push   eax
c001d80b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d80f:	e8 12 ff ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d814:	83 c4 2c             	add    esp,0x2c
c001d817:	0f b6 c0             	movzx  eax,al
c001d81a:	c3                   	ret    
c001d81b:	90                   	nop

c001d81c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d81c:	55                   	push   ebp
c001d81d:	57                   	push   edi
c001d81e:	56                   	push   esi
c001d81f:	53                   	push   ebx
c001d820:	83 ec 18             	sub    esp,0x18
c001d823:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d828:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d82d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d832:	6a 0a                	push   0xa
c001d834:	56                   	push   esi
c001d835:	55                   	push   ebp
c001d836:	57                   	push   edi
c001d837:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d83b:	e8 e6 fe ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d840:	83 c4 14             	add    esp,0x14
c001d843:	89 c3                	mov    ebx,eax
c001d845:	6a 0a                	push   0xa
c001d847:	0f b6 db             	movzx  ebx,bl
c001d84a:	56                   	push   esi
c001d84b:	55                   	push   ebp
c001d84c:	57                   	push   edi
c001d84d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d851:	e8 d0 fe ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d856:	83 c4 2c             	add    esp,0x2c
c001d859:	25 00 ff 00 00       	and    eax,0xff00
c001d85e:	09 d8                	or     eax,ebx
c001d860:	5b                   	pop    ebx
c001d861:	5e                   	pop    esi
c001d862:	5f                   	pop    edi
c001d863:	5d                   	pop    ebp
c001d864:	c3                   	ret    
c001d865:	90                   	nop

c001d866 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d866:	83 ec 18             	sub    esp,0x18
c001d869:	6a 08                	push   0x8
c001d86b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d870:	50                   	push   eax
c001d871:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d876:	50                   	push   eax
c001d877:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d87c:	50                   	push   eax
c001d87d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d881:	e8 a0 fe ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d886:	83 c4 2c             	add    esp,0x2c
c001d889:	0f b6 c4             	movzx  eax,ah
c001d88c:	c3                   	ret    
c001d88d:	90                   	nop

c001d88e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d88e:	83 ec 18             	sub    esp,0x18
c001d891:	6a 08                	push   0x8
c001d893:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d898:	50                   	push   eax
c001d899:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d89e:	50                   	push   eax
c001d89f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8a4:	50                   	push   eax
c001d8a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8a9:	e8 78 fe ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8ae:	83 c4 2c             	add    esp,0x2c
c001d8b1:	c3                   	ret    

c001d8b2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d8b2:	83 ec 18             	sub    esp,0x18
c001d8b5:	6a 3c                	push   0x3c
c001d8b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8bc:	50                   	push   eax
c001d8bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8c2:	50                   	push   eax
c001d8c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8c8:	50                   	push   eax
c001d8c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8cd:	e8 54 fe ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8d2:	83 c4 2c             	add    esp,0x2c
c001d8d5:	c3                   	ret    

c001d8d6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d8d6:	83 ec 18             	sub    esp,0x18
c001d8d9:	6a 18                	push   0x18
c001d8db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8e0:	50                   	push   eax
c001d8e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8e6:	50                   	push   eax
c001d8e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8ec:	50                   	push   eax
c001d8ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8f1:	e8 30 fe ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8f6:	83 c4 2c             	add    esp,0x2c
c001d8f9:	0f b6 c4             	movzx  eax,ah
c001d8fc:	c3                   	ret    
c001d8fd:	90                   	nop

c001d8fe <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d8fe:	55                   	push   ebp
c001d8ff:	57                   	push   edi
c001d900:	56                   	push   esi
c001d901:	53                   	push   ebx
c001d902:	83 ec 28             	sub    esp,0x28
c001d905:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d909:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d90e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d913:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d918:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d91f:	8d 43 12             	lea    eax,[ebx+0x12]
c001d922:	83 c3 10             	add    ebx,0x10
c001d925:	0f b6 c0             	movzx  eax,al
c001d928:	0f b6 db             	movzx  ebx,bl
c001d92b:	50                   	push   eax
c001d92c:	51                   	push   ecx
c001d92d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d931:	57                   	push   edi
c001d932:	55                   	push   ebp
c001d933:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d937:	e8 ea fd ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d93c:	83 c4 14             	add    esp,0x14
c001d93f:	89 c6                	mov    esi,eax
c001d941:	53                   	push   ebx
c001d942:	c1 e6 10             	shl    esi,0x10
c001d945:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d949:	51                   	push   ecx
c001d94a:	57                   	push   edi
c001d94b:	55                   	push   ebp
c001d94c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d950:	e8 d1 fd ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d955:	83 c4 3c             	add    esp,0x3c
c001d958:	0f b7 c0             	movzx  eax,ax
c001d95b:	5b                   	pop    ebx
c001d95c:	09 f0                	or     eax,esi
c001d95e:	5e                   	pop    esi
c001d95f:	5f                   	pop    edi
c001d960:	5d                   	pop    ebp
c001d961:	c3                   	ret    

c001d962 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d962:	55                   	push   ebp
c001d963:	57                   	push   edi
c001d964:	56                   	push   esi
c001d965:	53                   	push   ebx
c001d966:	83 ec 0c             	sub    esp,0xc
c001d969:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d96d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d971:	89 f5                	mov    ebp,esi
c001d973:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d979:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d97d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d981:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d985:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d989:	83 f9 01             	cmp    ecx,0x1
c001d98c:	75 5d                	jne    c001d9eb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d98e:	0f b6 c8             	movzx  ecx,al
c001d991:	0f b6 d2             	movzx  edx,dl
c001d994:	c1 e1 10             	shl    ecx,0x10
c001d997:	c1 e2 0b             	shl    edx,0xb
c001d99a:	89 f0                	mov    eax,esi
c001d99c:	25 fc 00 00 00       	and    eax,0xfc
c001d9a1:	09 c1                	or     ecx,eax
c001d9a3:	89 e8                	mov    eax,ebp
c001d9a5:	0f b6 c0             	movzx  eax,al
c001d9a8:	c1 e0 08             	shl    eax,0x8
c001d9ab:	09 c1                	or     ecx,eax
c001d9ad:	09 d1                	or     ecx,edx
c001d9af:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d9b4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d9ba:	89 c8                	mov    eax,ecx
c001d9bc:	ef                   	out    dx,eax
c001d9bd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d9c2:	ed                   	in     eax,dx
c001d9c3:	0f b7 db             	movzx  ebx,bx
c001d9c6:	83 e6 02             	and    esi,0x2
c001d9c9:	74 0a                	je     c001d9d5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d9cb:	0f b7 d0             	movzx  edx,ax
c001d9ce:	c1 e3 10             	shl    ebx,0x10
c001d9d1:	09 d3                	or     ebx,edx
c001d9d3:	eb 05                	jmp    c001d9da <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d9d5:	66 31 c0             	xor    ax,ax
c001d9d8:	09 c3                	or     ebx,eax
c001d9da:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d9df:	89 c8                	mov    eax,ecx
c001d9e1:	ef                   	out    dx,eax
c001d9e2:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d9e7:	89 d8                	mov    eax,ebx
c001d9e9:	eb 41                	jmp    c001da2c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d9eb:	83 f9 02             	cmp    ecx,0x2
c001d9ee:	75 45                	jne    c001da35 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d9f0:	83 ec 0c             	sub    esp,0xc
c001d9f3:	0f b6 d2             	movzx  edx,dl
c001d9f6:	89 f1                	mov    ecx,esi
c001d9f8:	0f b6 c0             	movzx  eax,al
c001d9fb:	0f b6 f1             	movzx  esi,cl
c001d9fe:	89 e9                	mov    ecx,ebp
c001da00:	56                   	push   esi
c001da01:	0f b6 c9             	movzx  ecx,cl
c001da04:	51                   	push   ecx
c001da05:	52                   	push   edx
c001da06:	50                   	push   eax
c001da07:	57                   	push   edi
c001da08:	e8 a3 fc ff ff       	call   c001d6b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da0d:	89 c2                	mov    edx,eax
c001da0f:	ed                   	in     eax,dx
c001da10:	83 c4 20             	add    esp,0x20
c001da13:	0f b7 db             	movzx  ebx,bx
c001da16:	f6 c2 02             	test   dl,0x2
c001da19:	74 0c                	je     c001da27 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001da1b:	0f b7 c8             	movzx  ecx,ax
c001da1e:	89 d8                	mov    eax,ebx
c001da20:	c1 e0 10             	shl    eax,0x10
c001da23:	09 c8                	or     eax,ecx
c001da25:	eb 05                	jmp    c001da2c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001da27:	66 31 c0             	xor    ax,ax
c001da2a:	09 d8                	or     eax,ebx
c001da2c:	ef                   	out    dx,eax
c001da2d:	83 c4 0c             	add    esp,0xc
c001da30:	5b                   	pop    ebx
c001da31:	5e                   	pop    esi
c001da32:	5f                   	pop    edi
c001da33:	5d                   	pop    ebp
c001da34:	c3                   	ret    
c001da35:	c7 44 24 20 bf 59 02 c0 	mov    DWORD PTR [esp+0x20],0xc00259bf
c001da3d:	83 c4 0c             	add    esp,0xc
c001da40:	5b                   	pop    ebx
c001da41:	5e                   	pop    esi
c001da42:	5f                   	pop    edi
c001da43:	5d                   	pop    ebp
c001da44:	e9 95 25 ff ff       	jmp    c000ffde <KePanic(char const*)>
c001da49:	90                   	nop

c001da4a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001da4a:	55                   	push   ebp
c001da4b:	57                   	push   edi
c001da4c:	56                   	push   esi
c001da4d:	53                   	push   ebx
c001da4e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001da54:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001da5b:	80 3d 4c f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f44c,0x0
c001da62:	0f 85 bd 00 00 00    	jne    c001db25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001da68:	83 ec 0c             	sub    esp,0xc
c001da6b:	68 14 01 00 00       	push   0x114
c001da70:	e8 22 22 ff ff       	call   c000fc97 <malloc>
c001da75:	83 c4 0c             	add    esp,0xc
c001da78:	89 c3                	mov    ebx,eax
c001da7a:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001da80:	68 c5 59 02 c0       	push   0xc00259c5
c001da85:	50                   	push   eax
c001da86:	e8 a7 a6 fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001da8b:	83 c4 10             	add    esp,0x10
c001da8e:	85 db                	test   ebx,ebx
c001da90:	0f 84 67 02 00 00    	je     c001dcfd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001da96:	56                   	push   esi
c001da97:	56                   	push   esi
c001da98:	6a 01                	push   0x1
c001da9a:	53                   	push   ebx
c001da9b:	e8 b0 a6 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001daa0:	83 c4 10             	add    esp,0x10
c001daa3:	85 c0                	test   eax,eax
c001daa5:	0f 85 52 02 00 00    	jne    c001dcfd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001daab:	52                   	push   edx
c001daac:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001dab0:	50                   	push   eax
c001dab1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001dab5:	50                   	push   eax
c001dab6:	53                   	push   ebx
c001dab7:	e8 96 a9 fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001dabc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dac0:	40                   	inc    eax
c001dac1:	89 04 24             	mov    DWORD PTR [esp],eax
c001dac4:	e8 ce 21 ff ff       	call   c000fc97 <malloc>
c001dac9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001dacd:	a3 48 f4 02 c0       	mov    ds:0xc002f448,eax
c001dad2:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001dad6:	59                   	pop    ecx
c001dad7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001dad9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001dadd:	51                   	push   ecx
c001dade:	50                   	push   eax
c001dadf:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001dae3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001dae7:	53                   	push   ebx
c001dae8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001daeb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001daef:	83 c4 20             	add    esp,0x20
c001daf2:	89 c8                	mov    eax,ecx
c001daf4:	99                   	cdq    
c001daf5:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001daf9:	0f 85 fe 01 00 00    	jne    c001dcfd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001daff:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001db03:	0f 85 f4 01 00 00    	jne    c001dcfd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001db09:	83 ec 0c             	sub    esp,0xc
c001db0c:	53                   	push   ebx
c001db0d:	e8 9c a6 fe ff       	call   c00081ae <File::close()>
c001db12:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001db16:	c6 05 4c f4 02 c0 01 	mov    BYTE PTR ds:0xc002f44c,0x1
c001db1d:	a3 44 f4 02 c0       	mov    ds:0xc002f444,eax
c001db22:	83 c4 10             	add    esp,0x10
c001db25:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c001db2a:	8b 1d 48 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f448
c001db30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001db34:	31 f6                	xor    esi,esi
c001db36:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001db3e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001db45:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001db4a:	31 c9                	xor    ecx,ecx
c001db4c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001db54:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001db59:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001db61:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001db65:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001db6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001db71:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001db75:	0f 8e 82 01 00 00    	jle    c001dcfd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001db7b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001db7e:	d4 40                	aam    0x40
c001db80:	d5 39                	aad    0x39
c001db82:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001db86:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001db8a:	d4 40                	aam    0x40
c001db8c:	d5 39                	aad    0x39
c001db8e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001db92:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001db96:	d4 40                	aam    0x40
c001db98:	d5 39                	aad    0x39
c001db9a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001db9e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001dba2:	d4 40                	aam    0x40
c001dba4:	d5 39                	aad    0x39
c001dba6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001dbaa:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001dbae:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001dbb2:	3c 56                	cmp    al,0x56
c001dbb4:	74 43                	je     c001dbf9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001dbb6:	d4 40                	aam    0x40
c001dbb8:	d5 39                	aad    0x39
c001dbba:	8d 48 d0             	lea    ecx,[eax-0x30]
c001dbbd:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001dbc1:	0f b6 c9             	movzx  ecx,cl
c001dbc4:	c1 e1 04             	shl    ecx,0x4
c001dbc7:	d4 40                	aam    0x40
c001dbc9:	d5 39                	aad    0x39
c001dbcb:	83 e8 30             	sub    eax,0x30
c001dbce:	0f b6 c0             	movzx  eax,al
c001dbd1:	09 c1                	or     ecx,eax
c001dbd3:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001dbd7:	c1 e1 04             	shl    ecx,0x4
c001dbda:	d4 40                	aam    0x40
c001dbdc:	d5 39                	aad    0x39
c001dbde:	83 e8 30             	sub    eax,0x30
c001dbe1:	0f b6 c0             	movzx  eax,al
c001dbe4:	09 c1                	or     ecx,eax
c001dbe6:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001dbea:	c1 e1 04             	shl    ecx,0x4
c001dbed:	d4 40                	aam    0x40
c001dbef:	d5 39                	aad    0x39
c001dbf1:	83 e8 30             	sub    eax,0x30
c001dbf4:	0f b6 c0             	movzx  eax,al
c001dbf7:	09 c1                	or     ecx,eax
c001dbf9:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001dbfd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001dc01:	3c 58                	cmp    al,0x58
c001dc03:	74 47                	je     c001dc4c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001dc05:	d4 40                	aam    0x40
c001dc07:	d5 39                	aad    0x39
c001dc09:	8d 50 d0             	lea    edx,[eax-0x30]
c001dc0c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001dc10:	0f b6 d2             	movzx  edx,dl
c001dc13:	c1 e2 04             	shl    edx,0x4
c001dc16:	d4 40                	aam    0x40
c001dc18:	d5 39                	aad    0x39
c001dc1a:	83 e8 30             	sub    eax,0x30
c001dc1d:	0f b6 c0             	movzx  eax,al
c001dc20:	09 c2                	or     edx,eax
c001dc22:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001dc26:	c1 e2 04             	shl    edx,0x4
c001dc29:	d4 40                	aam    0x40
c001dc2b:	d5 39                	aad    0x39
c001dc2d:	83 e8 30             	sub    eax,0x30
c001dc30:	0f b6 c0             	movzx  eax,al
c001dc33:	09 c2                	or     edx,eax
c001dc35:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001dc39:	c1 e2 04             	shl    edx,0x4
c001dc3c:	d4 40                	aam    0x40
c001dc3e:	d5 39                	aad    0x39
c001dc40:	83 e8 30             	sub    eax,0x30
c001dc43:	0f b6 c0             	movzx  eax,al
c001dc46:	09 c2                	or     edx,eax
c001dc48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dc4c:	83 c6 10             	add    esi,0x10
c001dc4f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001dc53:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001dc57:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001dc5b:	83 fa 0a             	cmp    edx,0xa
c001dc5e:	74 0b                	je     c001dc6b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001dc60:	47                   	inc    edi
c001dc61:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001dc65:	75 19                	jne    c001dc80 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001dc67:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001dc6b:	31 c0                	xor    eax,eax
c001dc6d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001dc72:	0f 94 c0             	sete   al
c001dc75:	01 c6                	add    esi,eax
c001dc77:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001dc7c:	75 0b                	jne    c001dc89 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001dc7e:	eb 14                	jmp    c001dc94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001dc80:	46                   	inc    esi
c001dc81:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001dc84:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001dc87:	eb ca                	jmp    c001dc53 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001dc89:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001dc8e:	0f 85 dd fe ff ff    	jne    c001db71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001dc94:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001dc99:	74 10                	je     c001dcab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001dc9b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001dca0:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001dca5:	0f 85 c6 fe ff ff    	jne    c001db71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001dcab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcaf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dcb3:	83 e8 30             	sub    eax,0x30
c001dcb6:	83 ef 30             	sub    edi,0x30
c001dcb9:	c1 e0 04             	shl    eax,0x4
c001dcbc:	09 f8                	or     eax,edi
c001dcbe:	0f b6 c0             	movzx  eax,al
c001dcc1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001dcc5:	0f 85 a6 fe ff ff    	jne    c001db71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001dccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dccf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001dcd3:	83 e8 30             	sub    eax,0x30
c001dcd6:	83 ef 30             	sub    edi,0x30
c001dcd9:	c1 e0 04             	shl    eax,0x4
c001dcdc:	09 f8                	or     eax,edi
c001dcde:	0f b6 c0             	movzx  eax,al
c001dce1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001dce5:	0f 85 86 fe ff ff    	jne    c001db71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001dceb:	50                   	push   eax
c001dcec:	50                   	push   eax
c001dced:	8d 44 24 48          	lea    eax,[esp+0x48]
c001dcf1:	50                   	push   eax
c001dcf2:	55                   	push   ebp
c001dcf3:	e8 48 29 fe ff       	call   c0000640 <strcpy>
c001dcf8:	83 c4 10             	add    esp,0x10
c001dcfb:	eb 06                	jmp    c001dd03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001dcfd:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001dd01:	31 ed                	xor    ebp,ebp
c001dd03:	81 c4 4c 01 00 00    	add    esp,0x14c
c001dd09:	89 e8                	mov    eax,ebp
c001dd0b:	5b                   	pop    ebx
c001dd0c:	5e                   	pop    esi
c001dd0d:	5f                   	pop    edi
c001dd0e:	5d                   	pop    ebp
c001dd0f:	c3                   	ret    

c001dd10 <PCI::checkBus(unsigned char)>:
c001dd10:	56                   	push   esi
c001dd11:	53                   	push   ebx
c001dd12:	31 db                	xor    ebx,ebx
c001dd14:	51                   	push   ecx
c001dd15:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001dd1a:	52                   	push   edx
c001dd1b:	53                   	push   ebx
c001dd1c:	43                   	inc    ebx
c001dd1d:	56                   	push   esi
c001dd1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd22:	e8 6f 03 00 00       	call   c001e096 <PCI::checkDevice(unsigned char, unsigned char)>
c001dd27:	83 c4 10             	add    esp,0x10
c001dd2a:	83 fb 20             	cmp    ebx,0x20
c001dd2d:	75 eb                	jne    c001dd1a <PCI::checkBus(unsigned char)+0xa>
c001dd2f:	58                   	pop    eax
c001dd30:	5b                   	pop    ebx
c001dd31:	5e                   	pop    esi
c001dd32:	c3                   	ret    
c001dd33:	90                   	nop

c001dd34 <PCI::foundDevice(PCIDeviceInfo)>:
c001dd34:	55                   	push   ebp
c001dd35:	57                   	push   edi
c001dd36:	56                   	push   esi
c001dd37:	53                   	push   ebx
c001dd38:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001dd3e:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001dd46:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001dd4d:	3d ff ff 00 00       	cmp    eax,0xffff
c001dd52:	0f 84 b7 01 00 00    	je     c001df0f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001dd58:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001dd60:	66 81 fb 06 04       	cmp    bx,0x406
c001dd65:	75 32                	jne    c001dd99 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001dd67:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001dd6f:	50                   	push   eax
c001dd70:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001dd78:	50                   	push   eax
c001dd79:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001dd81:	50                   	push   eax
c001dd82:	55                   	push   ebp
c001dd83:	e8 4e fb ff ff       	call   c001d8d6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dd88:	59                   	pop    ecx
c001dd89:	0f b6 c0             	movzx  eax,al
c001dd8c:	5b                   	pop    ebx
c001dd8d:	50                   	push   eax
c001dd8e:	55                   	push   ebp
c001dd8f:	e8 7c ff ff ff       	call   c001dd10 <PCI::checkBus(unsigned char)>
c001dd94:	e9 16 01 00 00       	jmp    c001deaf <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001dd99:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001dda0:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001dda6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001ddaa:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001ddb1:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001ddb9:	85 c0                	test   eax,eax
c001ddbb:	74 36                	je     c001ddf3 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001ddbd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ddc0:	85 d2                	test   edx,edx
c001ddc2:	74 2b                	je     c001ddef <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001ddc4:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001ddca:	31 f9                	xor    ecx,edi
c001ddcc:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001ddd2:	75 1b                	jne    c001ddef <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001ddd4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ddd8:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001ddde:	75 0f                	jne    c001ddef <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001dde0:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001dde7:	39 f2                	cmp    edx,esi
c001dde9:	0f 84 20 01 00 00    	je     c001df0f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001ddef:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddf1:	eb c6                	jmp    c001ddb9 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001ddf3:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ddf7:	be f8 59 02 c0       	mov    esi,0xc00259f8
c001ddfc:	b9 07 00 00 00       	mov    ecx,0x7
c001de01:	fc                   	cld    
c001de02:	31 d2                	xor    edx,edx
c001de04:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001de06:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001de0d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001de11:	b9 12 00 00 00       	mov    ecx,0x12
c001de16:	83 ec 0c             	sub    esp,0xc
c001de19:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001de1b:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001de23:	b9 0a 00 00 00       	mov    ecx,0xa
c001de28:	f7 f1                	div    ecx
c001de2a:	83 c0 30             	add    eax,0x30
c001de2d:	83 c2 30             	add    edx,0x30
c001de30:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001de34:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001de38:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001de40:	31 d2                	xor    edx,edx
c001de42:	f7 f1                	div    ecx
c001de44:	83 c0 30             	add    eax,0x30
c001de47:	83 c2 30             	add    edx,0x30
c001de4a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001de4e:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001de52:	8d 44 24 28          	lea    eax,[esp+0x28]
c001de56:	50                   	push   eax
c001de57:	e8 03 f4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001de5c:	83 c4 10             	add    esp,0x10
c001de5f:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001de65:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001de6c:	75 46                	jne    c001deb4 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001de6e:	83 ec 0c             	sub    esp,0xc
c001de71:	68 64 01 00 00       	push   0x164
c001de76:	e8 1c 1e ff ff       	call   c000fc97 <malloc>
c001de7b:	89 c3                	mov    ebx,eax
c001de7d:	89 04 24             	mov    DWORD PTR [esp],eax
c001de80:	e8 3b 11 00 00       	call   c001efc0 <SATABus::SATABus()>
c001de85:	58                   	pop    eax
c001de86:	5a                   	pop    edx
c001de87:	53                   	push   ebx
c001de88:	55                   	push   ebp
c001de89:	e8 6e bb fe ff       	call   c00099fc <Device::addChild(Device*)>
c001de8e:	83 ec 1c             	sub    esp,0x1c
c001de91:	b9 09 00 00 00       	mov    ecx,0x9
c001de96:	89 e7                	mov    edi,esp
c001de98:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001de9a:	53                   	push   ebx
c001de9b:	e8 a2 ba fe ff       	call   c0009942 <Device::preOpenPCI(PCIDeviceInfo)>
c001dea0:	83 c4 30             	add    esp,0x30
c001dea3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dea5:	6a 00                	push   0x0
c001dea7:	6a 00                	push   0x0
c001dea9:	6a 00                	push   0x0
c001deab:	53                   	push   ebx
c001deac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001deaf:	83 c4 10             	add    esp,0x10
c001deb2:	eb 5b                	jmp    c001df0f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001deb4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001deba:	75 19                	jne    c001ded5 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001debc:	83 ec 0c             	sub    esp,0xc
c001debf:	68 70 02 00 00       	push   0x270
c001dec4:	e8 ce 1d ff ff       	call   c000fc97 <malloc>
c001dec9:	89 c3                	mov    ebx,eax
c001decb:	89 04 24             	mov    DWORD PTR [esp],eax
c001dece:	e8 93 02 00 00       	call   c001e166 <IDE::IDE()>
c001ded3:	eb b0                	jmp    c001de85 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001ded5:	83 ec 0c             	sub    esp,0xc
c001ded8:	68 58 01 00 00       	push   0x158
c001dedd:	e8 b5 1d ff ff       	call   c000fc97 <malloc>
c001dee2:	89 c3                	mov    ebx,eax
c001dee4:	58                   	pop    eax
c001dee5:	5a                   	pop    edx
c001dee6:	68 de 59 02 c0       	push   0xc00259de
c001deeb:	53                   	push   ebx
c001deec:	e8 bf bd fe ff       	call   c0009cb0 <DriverlessDevice::DriverlessDevice(char const*)>
c001def1:	59                   	pop    ecx
c001def2:	5f                   	pop    edi
c001def3:	53                   	push   ebx
c001def4:	55                   	push   ebp
c001def5:	e8 02 bb fe ff       	call   c00099fc <Device::addChild(Device*)>
c001defa:	83 ec 1c             	sub    esp,0x1c
c001defd:	b9 09 00 00 00       	mov    ecx,0x9
c001df02:	89 e7                	mov    edi,esp
c001df04:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001df06:	53                   	push   ebx
c001df07:	e8 36 ba fe ff       	call   c0009942 <Device::preOpenPCI(PCIDeviceInfo)>
c001df0c:	83 c4 30             	add    esp,0x30
c001df0f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001df15:	5b                   	pop    ebx
c001df16:	5e                   	pop    esi
c001df17:	5f                   	pop    edi
c001df18:	5d                   	pop    ebp
c001df19:	c3                   	ret    

c001df1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001df1a:	55                   	push   ebp
c001df1b:	57                   	push   edi
c001df1c:	56                   	push   esi
c001df1d:	53                   	push   ebx
c001df1e:	83 ec 68             	sub    esp,0x68
c001df21:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001df25:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001df2c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df30:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001df37:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001df3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001df40:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001df47:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001df4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001df50:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001df55:	6a 0c                	push   0xc
c001df57:	57                   	push   edi
c001df58:	53                   	push   ebx
c001df59:	56                   	push   esi
c001df5a:	55                   	push   ebp
c001df5b:	e8 c6 f7 ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df60:	83 c4 20             	add    esp,0x20
c001df63:	57                   	push   edi
c001df64:	53                   	push   ebx
c001df65:	56                   	push   esi
c001df66:	55                   	push   ebp
c001df67:	e8 b0 f8 ff ff       	call   c001d81c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001df6c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001df71:	57                   	push   edi
c001df72:	53                   	push   ebx
c001df73:	56                   	push   esi
c001df74:	55                   	push   ebp
c001df75:	e8 38 f9 ff ff       	call   c001d8b2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001df7a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001df7e:	83 c4 14             	add    esp,0x14
c001df81:	6a 3c                	push   0x3c
c001df83:	57                   	push   edi
c001df84:	53                   	push   ebx
c001df85:	56                   	push   esi
c001df86:	55                   	push   ebp
c001df87:	e8 9a f7 ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df8c:	0f b6 c4             	movzx  eax,ah
c001df8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001df93:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001df97:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001df9b:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001dfa0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001dfa6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001dfac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dfb0:	83 c4 20             	add    esp,0x20
c001dfb3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001dfb8:	74 30                	je     c001dfea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001dfba:	31 c0                	xor    eax,eax
c001dfbc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001dfc0:	7e 28                	jle    c001dfea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001dfc2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001dfca:	39 cb                	cmp    ebx,ecx
c001dfcc:	75 19                	jne    c001dfe7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001dfce:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001dfd6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001dfda:	75 0b                	jne    c001dfe7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001dfdc:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001dfe3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001dfe7:	40                   	inc    eax
c001dfe8:	eb d2                	jmp    c001dfbc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001dfea:	31 d2                	xor    edx,edx
c001dfec:	83 ec 0c             	sub    esp,0xc
c001dfef:	57                   	push   edi
c001dff0:	53                   	push   ebx
c001dff1:	56                   	push   esi
c001dff2:	52                   	push   edx
c001dff3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001dff7:	55                   	push   ebp
c001dff8:	e8 01 f9 ff ff       	call   c001d8fe <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dffd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e001:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e005:	42                   	inc    edx
c001e006:	83 c4 20             	add    esp,0x20
c001e009:	83 fa 06             	cmp    edx,0x6
c001e00c:	75 de                	jne    c001dfec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e00e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e012:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e016:	c1 e2 08             	shl    edx,0x8
c001e019:	83 ec 0c             	sub    esp,0xc
c001e01c:	0f b6 c4             	movzx  eax,ah
c001e01f:	09 d0                	or     eax,edx
c001e021:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e026:	6a 02                	push   0x2
c001e028:	57                   	push   edi
c001e029:	53                   	push   ebx
c001e02a:	56                   	push   esi
c001e02b:	55                   	push   ebp
c001e02c:	e8 f5 f6 ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e031:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e036:	83 c4 20             	add    esp,0x20
c001e039:	57                   	push   edi
c001e03a:	53                   	push   ebx
c001e03b:	56                   	push   esi
c001e03c:	55                   	push   ebp
c001e03d:	e8 24 f8 ff ff       	call   c001d866 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e042:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e046:	57                   	push   edi
c001e047:	53                   	push   ebx
c001e048:	56                   	push   esi
c001e049:	55                   	push   ebp
c001e04a:	e8 81 f7 ff ff       	call   c001d7d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e04f:	b9 09 00 00 00       	mov    ecx,0x9
c001e054:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e059:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e05d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e061:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e065:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e069:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e06d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e071:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e075:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e079:	83 ec 0c             	sub    esp,0xc
c001e07c:	fc                   	cld    
c001e07d:	89 e7                	mov    edi,esp
c001e07f:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e083:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e085:	55                   	push   ebp
c001e086:	e8 a9 fc ff ff       	call   c001dd34 <PCI::foundDevice(PCIDeviceInfo)>
c001e08b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e091:	5b                   	pop    ebx
c001e092:	5e                   	pop    esi
c001e093:	5f                   	pop    edi
c001e094:	5d                   	pop    ebp
c001e095:	c3                   	ret    

c001e096 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e096:	55                   	push   ebp
c001e097:	57                   	push   edi
c001e098:	56                   	push   esi
c001e099:	53                   	push   ebx
c001e09a:	83 ec 0c             	sub    esp,0xc
c001e09d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e0a1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e0a6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e0ab:	6a 00                	push   0x0
c001e0ad:	56                   	push   esi
c001e0ae:	57                   	push   edi
c001e0af:	55                   	push   ebp
c001e0b0:	e8 1b f7 ff ff       	call   c001d7d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e0b5:	6a 00                	push   0x0
c001e0b7:	56                   	push   esi
c001e0b8:	57                   	push   edi
c001e0b9:	55                   	push   ebp
c001e0ba:	e8 5b fe ff ff       	call   c001df1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e0bf:	83 c4 20             	add    esp,0x20
c001e0c2:	6a 00                	push   0x0
c001e0c4:	56                   	push   esi
c001e0c5:	57                   	push   edi
c001e0c6:	55                   	push   ebp
c001e0c7:	e8 28 f7 ff ff       	call   c001d7f4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e0cc:	83 c4 10             	add    esp,0x10
c001e0cf:	a8 80                	test   al,0x80
c001e0d1:	74 2d                	je     c001e100 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e0d3:	bb 01 00 00 00       	mov    ebx,0x1
c001e0d8:	53                   	push   ebx
c001e0d9:	56                   	push   esi
c001e0da:	57                   	push   edi
c001e0db:	55                   	push   ebp
c001e0dc:	e8 ef f6 ff ff       	call   c001d7d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e0e1:	83 c4 10             	add    esp,0x10
c001e0e4:	0f b7 c0             	movzx  eax,ax
c001e0e7:	3d ff ff 00 00       	cmp    eax,0xffff
c001e0ec:	74 0c                	je     c001e0fa <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e0ee:	53                   	push   ebx
c001e0ef:	56                   	push   esi
c001e0f0:	57                   	push   edi
c001e0f1:	55                   	push   ebp
c001e0f2:	e8 23 fe ff ff       	call   c001df1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e0f7:	83 c4 10             	add    esp,0x10
c001e0fa:	43                   	inc    ebx
c001e0fb:	83 fb 08             	cmp    ebx,0x8
c001e0fe:	75 d8                	jne    c001e0d8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e100:	83 c4 0c             	add    esp,0xc
c001e103:	5b                   	pop    ebx
c001e104:	5e                   	pop    esi
c001e105:	5f                   	pop    edi
c001e106:	5d                   	pop    ebp
c001e107:	c3                   	ret    

c001e108 <PCI::detect()>:
c001e108:	56                   	push   esi
c001e109:	53                   	push   ebx
c001e10a:	53                   	push   ebx
c001e10b:	31 db                	xor    ebx,ebx
c001e10d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e111:	6a 00                	push   0x0
c001e113:	6a 00                	push   0x0
c001e115:	6a 00                	push   0x0
c001e117:	56                   	push   esi
c001e118:	e8 d7 f6 ff ff       	call   c001d7f4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e11d:	83 c4 10             	add    esp,0x10
c001e120:	a8 80                	test   al,0x80
c001e122:	75 21                	jne    c001e145 <PCI::detect()+0x3d>
c001e124:	51                   	push   ecx
c001e125:	51                   	push   ecx
c001e126:	6a 00                	push   0x0
c001e128:	56                   	push   esi
c001e129:	e8 e2 fb ff ff       	call   c001dd10 <PCI::checkBus(unsigned char)>
c001e12e:	83 c4 10             	add    esp,0x10
c001e131:	eb 2a                	jmp    c001e15d <PCI::detect()+0x55>
c001e133:	52                   	push   edx
c001e134:	52                   	push   edx
c001e135:	53                   	push   ebx
c001e136:	43                   	inc    ebx
c001e137:	56                   	push   esi
c001e138:	e8 d3 fb ff ff       	call   c001dd10 <PCI::checkBus(unsigned char)>
c001e13d:	83 c4 10             	add    esp,0x10
c001e140:	83 fb 08             	cmp    ebx,0x8
c001e143:	74 18                	je     c001e15d <PCI::detect()+0x55>
c001e145:	53                   	push   ebx
c001e146:	6a 00                	push   0x0
c001e148:	6a 00                	push   0x0
c001e14a:	56                   	push   esi
c001e14b:	e8 80 f6 ff ff       	call   c001d7d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e150:	83 c4 10             	add    esp,0x10
c001e153:	0f b7 c0             	movzx  eax,ax
c001e156:	3d ff ff 00 00       	cmp    eax,0xffff
c001e15b:	74 d6                	je     c001e133 <PCI::detect()+0x2b>
c001e15d:	58                   	pop    eax
c001e15e:	5b                   	pop    ebx
c001e15f:	5e                   	pop    esi
c001e160:	c3                   	ret    
c001e161:	90                   	nop

c001e162 <IDE::close(int, int, void*)>:
c001e162:	83 c8 ff             	or     eax,0xffffffff
c001e165:	c3                   	ret    

c001e166 <IDE::IDE()>:
c001e166:	83 ec 0c             	sub    esp,0xc
c001e169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16d:	83 ec 08             	sub    esp,0x8
c001e170:	68 88 5a 02 c0       	push   0xc0025a88
c001e175:	50                   	push   eax
c001e176:	e8 d9 bb fe ff       	call   c0009d54 <HardDiskController::HardDiskController(char const*)>
c001e17b:	83 c4 10             	add    esp,0x10
c001e17e:	ba b4 5b 02 c0       	mov    edx,0xc0025bb4
c001e183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e187:	89 10                	mov    DWORD PTR [eax],edx
c001e189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e18d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e194:	90                   	nop
c001e195:	83 c4 0c             	add    esp,0xc
c001e198:	c3                   	ret    
c001e199:	90                   	nop

c001e19a <IDE::prepareInterrupt(unsigned char)>:
c001e19a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e19f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e1a3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e1ab:	c3                   	ret    

c001e1ac <selectDrive(unsigned char, unsigned char)>:
c001e1ac:	c3                   	ret    
c001e1ad:	90                   	nop

c001e1ae <IDE::getBase(unsigned char)>:
c001e1ae:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e1b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1b7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e1bf:	c3                   	ret    

c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e1c0:	55                   	push   ebp
c001e1c1:	57                   	push   edi
c001e1c2:	56                   	push   esi
c001e1c3:	53                   	push   ebx
c001e1c4:	83 ec 1c             	sub    esp,0x1c
c001e1c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e1cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e1cf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e1d2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e1d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e1da:	80 f9 03             	cmp    cl,0x3
c001e1dd:	77 4f                	ja     c001e22e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e1df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1e3:	0f b6 fa             	movzx  edi,dl
c001e1e6:	0f b6 db             	movzx  ebx,bl
c001e1e9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e1ec:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e1f1:	80 ca 80             	or     dl,0x80
c001e1f4:	52                   	push   edx
c001e1f5:	6a 0c                	push   0xc
c001e1f7:	57                   	push   edi
c001e1f8:	56                   	push   esi
c001e1f9:	e8 c2 ff ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1fe:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e207:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e20b:	ee                   	out    dx,al
c001e20c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e211:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001e215:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e219:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e21d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e225:	83 c4 2c             	add    esp,0x2c
c001e228:	5b                   	pop    ebx
c001e229:	5e                   	pop    esi
c001e22a:	5f                   	pop    edi
c001e22b:	5d                   	pop    ebp
c001e22c:	eb 92                	jmp    c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e22e:	0f b6 cb             	movzx  ecx,bl
c001e231:	83 f9 07             	cmp    ecx,0x7
c001e234:	77 12                	ja     c001e248 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e236:	0f b6 d2             	movzx  edx,dl
c001e239:	0f b6 db             	movzx  ebx,bl
c001e23c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001e244:	01 da                	add    edx,ebx
c001e246:	eb 2f                	jmp    c001e277 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e248:	83 f9 0d             	cmp    ecx,0xd
c001e24b:	77 13                	ja     c001e260 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e24d:	0f b6 d2             	movzx  edx,dl
c001e250:	0f b6 db             	movzx  ebx,bl
c001e253:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001e25a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e25e:	eb 17                	jmp    c001e277 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e260:	83 f9 15             	cmp    ecx,0x15
c001e263:	77 13                	ja     c001e278 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001e265:	0f b6 d2             	movzx  edx,dl
c001e268:	0f b6 db             	movzx  ebx,bl
c001e26b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001e273:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e277:	ee                   	out    dx,al
c001e278:	83 c4 1c             	add    esp,0x1c
c001e27b:	5b                   	pop    ebx
c001e27c:	5e                   	pop    esi
c001e27d:	5f                   	pop    edi
c001e27e:	5d                   	pop    ebp
c001e27f:	c3                   	ret    

c001e280 <IDE::read(unsigned char, unsigned char)>:
c001e280:	55                   	push   ebp
c001e281:	57                   	push   edi
c001e282:	56                   	push   esi
c001e283:	53                   	push   ebx
c001e284:	83 ec 1c             	sub    esp,0x1c
c001e287:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e28b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e28f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e292:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e296:	3c 03                	cmp    al,0x3
c001e298:	77 40                	ja     c001e2da <IDE::read(unsigned char, unsigned char)+0x5a>
c001e29a:	0f b6 f9             	movzx  edi,cl
c001e29d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e2a0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e2a5:	0c 80                	or     al,0x80
c001e2a7:	50                   	push   eax
c001e2a8:	6a 0c                	push   0xc
c001e2aa:	57                   	push   edi
c001e2ab:	56                   	push   esi
c001e2ac:	e8 0f ff ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2b1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001e2b6:	0f b6 d3             	movzx  edx,bl
c001e2b9:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e2bd:	ec                   	in     al,dx
c001e2be:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e2c2:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e2c7:	52                   	push   edx
c001e2c8:	6a 0c                	push   0xc
c001e2ca:	57                   	push   edi
c001e2cb:	56                   	push   esi
c001e2cc:	e8 ef fe ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2d1:	83 c4 20             	add    esp,0x20
c001e2d4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e2d8:	eb 4c                	jmp    c001e326 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e2da:	0f b6 d3             	movzx  edx,bl
c001e2dd:	83 fa 07             	cmp    edx,0x7
c001e2e0:	77 12                	ja     c001e2f4 <IDE::read(unsigned char, unsigned char)+0x74>
c001e2e2:	0f b6 c9             	movzx  ecx,cl
c001e2e5:	0f b6 d3             	movzx  edx,bl
c001e2e8:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001e2f0:	01 c2                	add    edx,eax
c001e2f2:	eb 31                	jmp    c001e325 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e2f4:	83 fa 0d             	cmp    edx,0xd
c001e2f7:	77 13                	ja     c001e30c <IDE::read(unsigned char, unsigned char)+0x8c>
c001e2f9:	0f b6 c9             	movzx  ecx,cl
c001e2fc:	0f b6 d3             	movzx  edx,bl
c001e2ff:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001e306:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e30a:	eb 19                	jmp    c001e325 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e30c:	31 c0                	xor    eax,eax
c001e30e:	83 fa 15             	cmp    edx,0x15
c001e311:	77 13                	ja     c001e326 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e313:	0f b6 c9             	movzx  ecx,cl
c001e316:	0f b6 d3             	movzx  edx,bl
c001e319:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001e321:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e325:	ec                   	in     al,dx
c001e326:	83 c4 1c             	add    esp,0x1c
c001e329:	5b                   	pop    ebx
c001e32a:	5e                   	pop    esi
c001e32b:	5f                   	pop    edi
c001e32c:	5d                   	pop    ebp
c001e32d:	c3                   	ret    

c001e32e <IDE::waitInterrupt(unsigned char)>:
c001e32e:	55                   	push   ebp
c001e32f:	57                   	push   edi
c001e330:	56                   	push   esi
c001e331:	53                   	push   ebx
c001e332:	31 db                	xor    ebx,ebx
c001e334:	83 ec 0c             	sub    esp,0xc
c001e337:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e33b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e340:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e348:	89 e8                	mov    eax,ebp
c001e34a:	84 c0                	test   al,al
c001e34c:	75 31                	jne    c001e37f <IDE::waitInterrupt(unsigned char)+0x51>
c001e34e:	52                   	push   edx
c001e34f:	6a 0c                	push   0xc
c001e351:	56                   	push   esi
c001e352:	57                   	push   edi
c001e353:	e8 28 ff ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001e358:	83 c4 10             	add    esp,0x10
c001e35b:	a8 01                	test   al,0x1
c001e35d:	75 28                	jne    c001e387 <IDE::waitInterrupt(unsigned char)+0x59>
c001e35f:	f6 c3 04             	test   bl,0x4
c001e362:	75 13                	jne    c001e377 <IDE::waitInterrupt(unsigned char)+0x49>
c001e364:	83 fb 32             	cmp    ebx,0x32
c001e367:	7e 0e                	jle    c001e377 <IDE::waitInterrupt(unsigned char)+0x49>
c001e369:	50                   	push   eax
c001e36a:	50                   	push   eax
c001e36b:	6a 00                	push   0x0
c001e36d:	6a 64                	push   0x64
c001e36f:	e8 ac 8d ff ff       	call   c0017120 <milliTenthSleep(unsigned long long)>
c001e374:	83 c4 10             	add    esp,0x10
c001e377:	83 fb 3c             	cmp    ebx,0x3c
c001e37a:	74 0b                	je     c001e387 <IDE::waitInterrupt(unsigned char)+0x59>
c001e37c:	43                   	inc    ebx
c001e37d:	eb c1                	jmp    c001e340 <IDE::waitInterrupt(unsigned char)+0x12>
c001e37f:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e387:	83 c4 0c             	add    esp,0xc
c001e38a:	89 e8                	mov    eax,ebp
c001e38c:	5b                   	pop    ebx
c001e38d:	5e                   	pop    esi
c001e38e:	5f                   	pop    edi
c001e38f:	5d                   	pop    ebp
c001e390:	c3                   	ret    

c001e391 <ideChannel0IRQHandler(regs*, void*)>:
c001e391:	83 ec 10             	sub    esp,0x10
c001e394:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e398:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e39f:	6a 07                	push   0x7
c001e3a1:	6a 00                	push   0x0
c001e3a3:	50                   	push   eax
c001e3a4:	e8 d7 fe ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001e3a9:	83 c4 1c             	add    esp,0x1c
c001e3ac:	c3                   	ret    

c001e3ad <ideChannel1IRQHandler(regs*, void*)>:
c001e3ad:	83 ec 10             	sub    esp,0x10
c001e3b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e3b4:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e3bb:	6a 07                	push   0x7
c001e3bd:	6a 01                	push   0x1
c001e3bf:	50                   	push   eax
c001e3c0:	e8 bb fe ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001e3c5:	83 c4 1c             	add    esp,0x1c
c001e3c8:	c3                   	ret    
c001e3c9:	90                   	nop

c001e3ca <IDE::enableIRQs(unsigned char, bool)>:
c001e3ca:	57                   	push   edi
c001e3cb:	b8 02 00 00 00       	mov    eax,0x2
c001e3d0:	56                   	push   esi
c001e3d1:	53                   	push   ebx
c001e3d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e3d6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e3da:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e3df:	74 02                	je     c001e3e3 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001e3e1:	31 c0                	xor    eax,eax
c001e3e3:	0f b6 db             	movzx  ebx,bl
c001e3e6:	bf 04 00 00 00       	mov    edi,0x4
c001e3eb:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001e3f2:	50                   	push   eax
c001e3f3:	6a 0c                	push   0xc
c001e3f5:	53                   	push   ebx
c001e3f6:	56                   	push   esi
c001e3f7:	e8 c4 fd ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3fc:	83 c4 10             	add    esp,0x10
c001e3ff:	50                   	push   eax
c001e400:	6a 0c                	push   0xc
c001e402:	53                   	push   ebx
c001e403:	56                   	push   esi
c001e404:	e8 77 fe ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001e409:	83 c4 10             	add    esp,0x10
c001e40c:	4f                   	dec    edi
c001e40d:	75 f0                	jne    c001e3ff <IDE::enableIRQs(unsigned char, bool)+0x35>
c001e40f:	5b                   	pop    ebx
c001e410:	5e                   	pop    esi
c001e411:	5f                   	pop    edi
c001e412:	c3                   	ret    
c001e413:	90                   	nop

c001e414 <IDE::open(int, int, void*)>:
c001e414:	57                   	push   edi
c001e415:	56                   	push   esi
c001e416:	53                   	push   ebx
c001e417:	83 ec 10             	sub    esp,0x10
c001e41a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e41e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e427:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e430:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e437:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e43e:	0f 85 84 02 00 00    	jne    c001e6c8 <IDE::open(int, int, void*)+0x2b4>
c001e444:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e44a:	a8 70                	test   al,0x70
c001e44c:	75 44                	jne    c001e492 <IDE::open(int, int, void*)+0x7e>
c001e44e:	ba 20 84 00 00       	mov    edx,0x8420
c001e453:	0f a3 c2             	bt     edx,eax
c001e456:	73 3a                	jae    c001e492 <IDE::open(int, int, void*)+0x7e>
c001e458:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e45e:	83 ec 0c             	sub    esp,0xc
c001e461:	83 e0 fc             	and    eax,0xfffffffc
c001e464:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e46b:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e471:	83 e0 fc             	and    eax,0xfffffffc
c001e474:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e47b:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e481:	83 e0 fc             	and    eax,0xfffffffc
c001e484:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e48b:	68 35 31 02 c0       	push   0xc0023135
c001e490:	eb 60                	jmp    c001e4f2 <IDE::open(int, int, void*)+0xde>
c001e492:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e49c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e4a6:	be 64 00 00 00       	mov    esi,0x64
c001e4ab:	57                   	push   edi
c001e4ac:	57                   	push   edi
c001e4ad:	68 a0 5a 02 c0       	push   0xc0025aa0
c001e4b2:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001e4b6:	57                   	push   edi
c001e4b7:	e8 84 21 fe ff       	call   c0000640 <strcpy>
c001e4bc:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001e4c3:	31 d2                	xor    edx,edx
c001e4c5:	89 c8                	mov    eax,ecx
c001e4c7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e4ca:	f7 f6                	div    esi
c001e4cc:	be 0a 00 00 00       	mov    esi,0xa
c001e4d1:	83 c0 30             	add    eax,0x30
c001e4d4:	31 d2                	xor    edx,edx
c001e4d6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e4da:	89 c8                	mov    eax,ecx
c001e4dc:	f7 f6                	div    esi
c001e4de:	89 d1                	mov    ecx,edx
c001e4e0:	31 d2                	xor    edx,edx
c001e4e2:	83 c1 30             	add    ecx,0x30
c001e4e5:	f7 f6                	div    esi
c001e4e7:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001e4eb:	83 c2 30             	add    edx,0x30
c001e4ee:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001e4f2:	e8 68 ed fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e4f7:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e4fc:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e503:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e50a:	c1 e1 10             	shl    ecx,0x10
c001e50d:	c1 e0 0b             	shl    eax,0xb
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	09 c1                	or     ecx,eax
c001e515:	89 fa                	mov    edx,edi
c001e517:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e51e:	c1 e0 08             	shl    eax,0x8
c001e521:	09 c1                	or     ecx,eax
c001e523:	89 c8                	mov    eax,ecx
c001e525:	0d 08 00 00 80       	or     eax,0x80000008
c001e52a:	ef                   	out    dx,eax
c001e52b:	be fc 0c 00 00       	mov    esi,0xcfc
c001e530:	89 f2                	mov    edx,esi
c001e532:	ed                   	in     eax,dx
c001e533:	c1 e8 10             	shr    eax,0x10
c001e536:	3d ff ff 00 00       	cmp    eax,0xffff
c001e53b:	0f 84 e5 00 00 00    	je     c001e626 <IDE::open(int, int, void*)+0x212>
c001e541:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e547:	89 fa                	mov    edx,edi
c001e549:	89 c8                	mov    eax,ecx
c001e54b:	ef                   	out    dx,eax
c001e54c:	b0 fe                	mov    al,0xfe
c001e54e:	89 f2                	mov    edx,esi
c001e550:	ee                   	out    dx,al
c001e551:	89 c8                	mov    eax,ecx
c001e553:	89 fa                	mov    edx,edi
c001e555:	ef                   	out    dx,eax
c001e556:	89 f2                	mov    edx,esi
c001e558:	ed                   	in     eax,dx
c001e559:	3c fe                	cmp    al,0xfe
c001e55b:	0f 85 85 00 00 00    	jne    c001e5e6 <IDE::open(int, int, void*)+0x1d2>
c001e561:	83 ec 0c             	sub    esp,0xc
c001e564:	68 6b 31 02 c0       	push   0xc002316b
c001e569:	e8 f1 ec fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e56e:	c7 04 24 a6 5a 02 c0 	mov    DWORD PTR [esp],0xc0025aa6
c001e575:	e8 ea 89 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e57a:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e584:	c7 04 24 48 34 02 c0 	mov    DWORD PTR [esp],0xc0023448
c001e58b:	e8 cf ec fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e590:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e597:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e59e:	c1 e1 10             	shl    ecx,0x10
c001e5a1:	c1 e0 08             	shl    eax,0x8
c001e5a4:	89 fa                	mov    edx,edi
c001e5a6:	09 c1                	or     ecx,eax
c001e5a8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e5af:	c1 e0 0b             	shl    eax,0xb
c001e5b2:	09 c1                	or     ecx,eax
c001e5b4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e5ba:	89 c8                	mov    eax,ecx
c001e5bc:	ef                   	out    dx,eax
c001e5bd:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e5c3:	89 f2                	mov    edx,esi
c001e5c5:	ee                   	out    dx,al
c001e5c6:	89 c8                	mov    eax,ecx
c001e5c8:	89 fa                	mov    edx,edi
c001e5ca:	ef                   	out    dx,eax
c001e5cb:	89 f2                	mov    edx,esi
c001e5cd:	ed                   	in     eax,dx
c001e5ce:	0f b6 c0             	movzx  eax,al
c001e5d1:	83 c4 10             	add    esp,0x10
c001e5d4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e5da:	74 5a                	je     c001e636 <IDE::open(int, int, void*)+0x222>
c001e5dc:	83 ec 0c             	sub    esp,0xc
c001e5df:	68 bb 5a 02 c0       	push   0xc0025abb
c001e5e4:	eb 48                	jmp    c001e62e <IDE::open(int, int, void*)+0x21a>
c001e5e6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e5ef:	75 2b                	jne    c001e61c <IDE::open(int, int, void*)+0x208>
c001e5f1:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001e5f8:	3d 80 00 00 00       	cmp    eax,0x80
c001e5fd:	74 07                	je     c001e606 <IDE::open(int, int, void*)+0x1f2>
c001e5ff:	3d 8a 00 00 00       	cmp    eax,0x8a
c001e604:	75 16                	jne    c001e61c <IDE::open(int, int, void*)+0x208>
c001e606:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e60d:	83 ec 0c             	sub    esp,0xc
c001e610:	68 5e 2c 02 c0       	push   0xc0022c5e
c001e615:	e8 45 ec fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e61a:	eb 17                	jmp    c001e633 <IDE::open(int, int, void*)+0x21f>
c001e61c:	83 ec 0c             	sub    esp,0xc
c001e61f:	68 c3 5a 02 c0       	push   0xc0025ac3
c001e624:	eb 08                	jmp    c001e62e <IDE::open(int, int, void*)+0x21a>
c001e626:	83 ec 0c             	sub    esp,0xc
c001e629:	68 f4 5a 02 c0       	push   0xc0025af4
c001e62e:	e8 ab 19 ff ff       	call   c000ffde <KePanic(char const*)>
c001e633:	83 c4 10             	add    esp,0x10
c001e636:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001e63d:	0f 84 bf 00 00 00    	je     c001e702 <IDE::open(int, int, void*)+0x2ee>
c001e643:	83 ec 0c             	sub    esp,0xc
c001e646:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e64c:	83 e0 fc             	and    eax,0xfffffffc
c001e64f:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e656:	83 c0 08             	add    eax,0x8
c001e659:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e660:	68 1e 5b 02 c0       	push   0xc0025b1e
c001e665:	e8 fa 88 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e66a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e671:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e678:	50                   	push   eax
c001e679:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e680:	50                   	push   eax
c001e681:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e688:	50                   	push   eax
c001e689:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e68f:	e8 92 f0 ff ff       	call   c001d726 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e694:	83 c4 18             	add    esp,0x18
c001e697:	83 c8 07             	or     eax,0x7
c001e69a:	0f b7 c0             	movzx  eax,ax
c001e69d:	50                   	push   eax
c001e69e:	6a 04                	push   0x4
c001e6a0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e6a7:	50                   	push   eax
c001e6a8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e6af:	50                   	push   eax
c001e6b0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e6b7:	50                   	push   eax
c001e6b8:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e6be:	e8 9f f2 ff ff       	call   c001d962 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001e6c3:	83 c4 20             	add    esp,0x20
c001e6c6:	eb 3a                	jmp    c001e702 <IDE::open(int, int, void*)+0x2ee>
c001e6c8:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e6ce:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e6d5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e6dc:	05 06 02 00 00       	add    eax,0x206
c001e6e1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e6e8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e6ef:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e6f6:	05 06 02 00 00       	add    eax,0x206
c001e6fb:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e702:	83 ec 0c             	sub    esp,0xc
c001e705:	68 c3 39 02 c0       	push   0xc00239c3
c001e70a:	e8 50 eb fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e70f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e715:	83 c4 10             	add    esp,0x10
c001e718:	89 c2                	mov    edx,eax
c001e71a:	83 e2 0f             	and    edx,0xf
c001e71d:	83 fa 08             	cmp    edx,0x8
c001e720:	75 0a                	jne    c001e72c <IDE::open(int, int, void*)+0x318>
c001e722:	83 e8 02             	sub    eax,0x2
c001e725:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e72c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e732:	89 c2                	mov    edx,eax
c001e734:	83 e2 0f             	and    edx,0xf
c001e737:	83 fa 08             	cmp    edx,0x8
c001e73a:	75 0a                	jne    c001e746 <IDE::open(int, int, void*)+0x332>
c001e73c:	83 e8 02             	sub    eax,0x2
c001e73f:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e746:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e74d:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e754:	89 d0                	mov    eax,edx
c001e756:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e759:	8d 7a 01             	lea    edi,[edx+0x1]
c001e75c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e760:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e764:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e768:	83 e1 3f             	and    ecx,0x3f
c001e76b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e76f:	89 f9                	mov    ecx,edi
c001e771:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e778:	0f b6 c9             	movzx  ecx,cl
c001e77b:	8d 78 02             	lea    edi,[eax+0x2]
c001e77e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e781:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e785:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e789:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e78d:	83 e2 3f             	and    edx,0x3f
c001e790:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e794:	89 f9                	mov    ecx,edi
c001e796:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e79c:	0f b6 d1             	movzx  edx,cl
c001e79f:	8d 78 03             	lea    edi,[eax+0x3]
c001e7a2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e7a5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e7a9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e7ad:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e7b1:	83 e1 3f             	and    ecx,0x3f
c001e7b4:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e7b8:	89 fa                	mov    edx,edi
c001e7ba:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e7c0:	0f b6 ca             	movzx  ecx,dl
c001e7c3:	8d 78 04             	lea    edi,[eax+0x4]
c001e7c6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e7c9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e7cd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e7d1:	89 fa                	mov    edx,edi
c001e7d3:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e7d9:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e7dd:	83 e2 3f             	and    edx,0x3f
c001e7e0:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e7e4:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e7eb:	66 85 f6             	test   si,si
c001e7ee:	74 24                	je     c001e814 <IDE::open(int, int, void*)+0x400>
c001e7f0:	89 f9                	mov    ecx,edi
c001e7f2:	83 c0 05             	add    eax,0x5
c001e7f5:	0f b6 d1             	movzx  edx,cl
c001e7f8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e7fb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e7ff:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e803:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e809:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001e80d:	83 e0 3f             	and    eax,0x3f
c001e810:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001e814:	83 ec 0c             	sub    esp,0xc
c001e817:	68 36 5b 02 c0       	push   0xc0025b36
c001e81c:	e8 3e ea fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e821:	58                   	pop    eax
c001e822:	5a                   	pop    edx
c001e823:	6a 00                	push   0x0
c001e825:	53                   	push   ebx
c001e826:	e8 6f f9 ff ff       	call   c001e19a <IDE::prepareInterrupt(unsigned char)>
c001e82b:	59                   	pop    ecx
c001e82c:	5e                   	pop    esi
c001e82d:	6a 01                	push   0x1
c001e82f:	53                   	push   ebx
c001e830:	e8 65 f9 ff ff       	call   c001e19a <IDE::prepareInterrupt(unsigned char)>
c001e835:	c7 04 24 85 53 02 c0 	mov    DWORD PTR [esp],0xc0025385
c001e83c:	e8 1e ea fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e841:	83 c4 0c             	add    esp,0xc
c001e844:	6a 00                	push   0x0
c001e846:	6a 00                	push   0x0
c001e848:	53                   	push   ebx
c001e849:	e8 7c fb ff ff       	call   c001e3ca <IDE::enableIRQs(unsigned char, bool)>
c001e84e:	83 c4 0c             	add    esp,0xc
c001e851:	6a 00                	push   0x0
c001e853:	6a 01                	push   0x1
c001e855:	53                   	push   ebx
c001e856:	e8 6f fb ff ff       	call   c001e3ca <IDE::enableIRQs(unsigned char, bool)>
c001e85b:	c7 04 24 38 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b38
c001e862:	e8 f8 e9 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e867:	83 c4 10             	add    esp,0x10
c001e86a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e871:	74 3c                	je     c001e8af <IDE::open(int, int, void*)+0x49b>
c001e873:	83 ec 0c             	sub    esp,0xc
c001e876:	53                   	push   ebx
c001e877:	6a 01                	push   0x1
c001e879:	68 91 e3 01 c0       	push   0xc001e391
c001e87e:	6a 0e                	push   0xe
c001e880:	53                   	push   ebx
c001e881:	e8 22 b1 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e886:	83 c4 14             	add    esp,0x14
c001e889:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e88f:	53                   	push   ebx
c001e890:	6a 01                	push   0x1
c001e892:	68 ad e3 01 c0       	push   0xc001e3ad
c001e897:	6a 0f                	push   0xf
c001e899:	53                   	push   ebx
c001e89a:	e8 09 b1 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e89f:	83 c4 14             	add    esp,0x14
c001e8a2:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e8a8:	68 4e 36 02 c0       	push   0xc002364e
c001e8ad:	eb 40                	jmp    c001e8ef <IDE::open(int, int, void*)+0x4db>
c001e8af:	83 ec 0c             	sub    esp,0xc
c001e8b2:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e8bc:	53                   	push   ebx
c001e8bd:	6a 00                	push   0x0
c001e8bf:	68 91 e3 01 c0       	push   0xc001e391
c001e8c4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e8ca:	53                   	push   ebx
c001e8cb:	e8 d8 b0 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e8d0:	83 c4 14             	add    esp,0x14
c001e8d3:	53                   	push   ebx
c001e8d4:	6a 00                	push   0x0
c001e8d6:	68 ad e3 01 c0       	push   0xc001e3ad
c001e8db:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e8e1:	53                   	push   ebx
c001e8e2:	e8 c1 b0 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e8e7:	83 c4 14             	add    esp,0x14
c001e8ea:	68 de 43 02 c0       	push   0xc00243de
c001e8ef:	e8 6b e9 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e8f4:	83 c4 10             	add    esp,0x10
c001e8f7:	83 ec 0c             	sub    esp,0xc
c001e8fa:	68 3a 5b 02 c0       	push   0xc0025b3a
c001e8ff:	e8 5b e9 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e904:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e906:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e909:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e90c:	c7 04 24 e5 4a 02 c0 	mov    DWORD PTR [esp],0xc0024ae5
c001e913:	e8 47 e9 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e918:	83 c4 0c             	add    esp,0xc
c001e91b:	6a 07                	push   0x7
c001e91d:	6a 00                	push   0x0
c001e91f:	53                   	push   ebx
c001e920:	e8 5b f9 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001e925:	83 c4 0c             	add    esp,0xc
c001e928:	6a 07                	push   0x7
c001e92a:	6a 01                	push   0x1
c001e92c:	53                   	push   ebx
c001e92d:	e8 4e f9 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001e932:	c7 04 24 0c 41 02 c0 	mov    DWORD PTR [esp],0xc002410c
c001e939:	e8 21 e9 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e93e:	83 c4 0c             	add    esp,0xc
c001e941:	6a 01                	push   0x1
c001e943:	6a 00                	push   0x0
c001e945:	53                   	push   ebx
c001e946:	e8 7f fa ff ff       	call   c001e3ca <IDE::enableIRQs(unsigned char, bool)>
c001e94b:	83 c4 0c             	add    esp,0xc
c001e94e:	6a 01                	push   0x1
c001e950:	6a 01                	push   0x1
c001e952:	53                   	push   ebx
c001e953:	e8 72 fa ff ff       	call   c001e3ca <IDE::enableIRQs(unsigned char, bool)>
c001e958:	c7 04 24 3d 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b3d
c001e95f:	e8 fb e8 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001e964:	83 c4 20             	add    esp,0x20
c001e967:	31 c0                	xor    eax,eax
c001e969:	5b                   	pop    ebx
c001e96a:	5e                   	pop    esi
c001e96b:	5f                   	pop    edi
c001e96c:	c3                   	ret    
c001e96d:	90                   	nop

c001e96e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e96e:	55                   	push   ebp
c001e96f:	57                   	push   edi
c001e970:	56                   	push   esi
c001e971:	53                   	push   ebx
c001e972:	83 ec 1c             	sub    esp,0x1c
c001e975:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e979:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e97d:	8d 42 f8             	lea    eax,[edx-0x8]
c001e980:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e984:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e988:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e98c:	3c 03                	cmp    al,0x3
c001e98e:	77 5a                	ja     c001e9ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001e990:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e994:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e998:	0f b6 db             	movzx  ebx,bl
c001e99b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e99e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e9a3:	0c 80                	or     al,0x80
c001e9a5:	50                   	push   eax
c001e9a6:	6a 0c                	push   0xc
c001e9a8:	53                   	push   ebx
c001e9a9:	56                   	push   esi
c001e9aa:	e8 11 f8 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9af:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001e9b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e9b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e9bc:	0f b6 d2             	movzx  edx,dl
c001e9bf:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e9c3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e9c5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e9ca:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e9ce:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e9d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e9d6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e9de:	83 c4 2c             	add    esp,0x2c
c001e9e1:	5b                   	pop    ebx
c001e9e2:	5e                   	pop    esi
c001e9e3:	5f                   	pop    edi
c001e9e4:	5d                   	pop    ebp
c001e9e5:	e9 d6 f7 ff ff       	jmp    c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9ea:	0f b6 c2             	movzx  eax,dl
c001e9ed:	83 f8 07             	cmp    eax,0x7
c001e9f0:	77 12                	ja     c001ea04 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001e9f2:	0f b6 c2             	movzx  eax,dl
c001e9f5:	0f b6 db             	movzx  ebx,bl
c001e9f8:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001ea00:	01 c2                	add    edx,eax
c001ea02:	eb 2f                	jmp    c001ea33 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ea04:	83 f8 0d             	cmp    eax,0xd
c001ea07:	77 13                	ja     c001ea1c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001ea09:	0f b6 db             	movzx  ebx,bl
c001ea0c:	0f b6 d2             	movzx  edx,dl
c001ea0f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001ea16:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ea1a:	eb 17                	jmp    c001ea33 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ea1c:	83 f8 15             	cmp    eax,0x15
c001ea1f:	77 14                	ja     c001ea35 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001ea21:	0f b6 db             	movzx  ebx,bl
c001ea24:	0f b6 d2             	movzx  edx,dl
c001ea27:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001ea2f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ea33:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ea35:	83 c4 1c             	add    esp,0x1c
c001ea38:	5b                   	pop    ebx
c001ea39:	5e                   	pop    esi
c001ea3a:	5f                   	pop    edi
c001ea3b:	5d                   	pop    ebp
c001ea3c:	c3                   	ret    
c001ea3d:	90                   	nop

c001ea3e <IDE::detect()>:
c001ea3e:	55                   	push   ebp
c001ea3f:	57                   	push   edi
c001ea40:	56                   	push   esi
c001ea41:	53                   	push   ebx
c001ea42:	81 ec 28 02 00 00    	sub    esp,0x228
c001ea48:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001ea4f:	68 3f 5b 02 c0       	push   0xc0025b3f
c001ea54:	e8 06 e8 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ea59:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001ea5f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ea63:	83 c4 10             	add    esp,0x10
c001ea66:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001ea6b:	0f 85 2f 04 00 00    	jne    c001eea0 <IDE::detect()+0x462>
c001ea71:	83 ec 0c             	sub    esp,0xc
c001ea74:	31 f6                	xor    esi,esi
c001ea76:	68 42 5b 02 c0       	push   0xc0025b42
c001ea7b:	31 ff                	xor    edi,edi
c001ea7d:	e8 dd e7 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ea82:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ea89:	83 c4 10             	add    esp,0x10
c001ea8c:	83 ec 0c             	sub    esp,0xc
c001ea8f:	68 45 5b 02 c0       	push   0xc0025b45
c001ea94:	e8 c6 e7 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eaa3:	83 ec 0c             	sub    esp,0xc
c001eaa6:	31 ed                	xor    ebp,ebp
c001eaa8:	68 48 5b 02 c0       	push   0xc0025b48
c001eaad:	e8 ad e7 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001eab2:	89 f8                	mov    eax,edi
c001eab4:	c1 e0 06             	shl    eax,0x6
c001eab7:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001eabf:	c7 04 24 4b 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b4b
c001eac6:	e8 94 e7 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001eacb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001eacf:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ead3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead7:	c1 e0 04             	shl    eax,0x4
c001eada:	83 c8 a0             	or     eax,0xffffffa0
c001eadd:	0f b6 c0             	movzx  eax,al
c001eae0:	50                   	push   eax
c001eae1:	6a 06                	push   0x6
c001eae3:	56                   	push   esi
c001eae4:	53                   	push   ebx
c001eae5:	e8 d6 f6 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eaea:	83 c4 1c             	add    esp,0x1c
c001eaed:	6a 0c                	push   0xc
c001eaef:	56                   	push   esi
c001eaf0:	53                   	push   ebx
c001eaf1:	e8 8a f7 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001eaf6:	83 c4 0c             	add    esp,0xc
c001eaf9:	6a 0c                	push   0xc
c001eafb:	56                   	push   esi
c001eafc:	53                   	push   ebx
c001eafd:	e8 7e f7 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001eb02:	83 c4 0c             	add    esp,0xc
c001eb05:	6a 0c                	push   0xc
c001eb07:	56                   	push   esi
c001eb08:	53                   	push   ebx
c001eb09:	e8 72 f7 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001eb0e:	83 c4 0c             	add    esp,0xc
c001eb11:	6a 0c                	push   0xc
c001eb13:	56                   	push   esi
c001eb14:	53                   	push   ebx
c001eb15:	e8 66 f7 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001eb1a:	c7 04 24 4e 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b4e
c001eb21:	e8 39 e7 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001eb26:	68 ec 00 00 00       	push   0xec
c001eb2b:	6a 07                	push   0x7
c001eb2d:	56                   	push   esi
c001eb2e:	53                   	push   ebx
c001eb2f:	e8 8c f6 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb34:	83 c4 1c             	add    esp,0x1c
c001eb37:	6a 0c                	push   0xc
c001eb39:	56                   	push   esi
c001eb3a:	53                   	push   ebx
c001eb3b:	e8 40 f7 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001eb40:	83 c4 0c             	add    esp,0xc
c001eb43:	6a 0c                	push   0xc
c001eb45:	56                   	push   esi
c001eb46:	53                   	push   ebx
c001eb47:	e8 34 f7 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001eb4c:	83 c4 0c             	add    esp,0xc
c001eb4f:	6a 0c                	push   0xc
c001eb51:	56                   	push   esi
c001eb52:	53                   	push   ebx
c001eb53:	e8 28 f7 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001eb58:	83 c4 0c             	add    esp,0xc
c001eb5b:	6a 0c                	push   0xc
c001eb5d:	56                   	push   esi
c001eb5e:	53                   	push   ebx
c001eb5f:	e8 1c f7 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001eb64:	c7 04 24 51 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b51
c001eb6b:	e8 ef e6 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001eb70:	83 c4 0c             	add    esp,0xc
c001eb73:	6a 0c                	push   0xc
c001eb75:	56                   	push   esi
c001eb76:	53                   	push   ebx
c001eb77:	e8 04 f7 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001eb7c:	83 c4 10             	add    esp,0x10
c001eb7f:	84 c0                	test   al,al
c001eb81:	75 1f                	jne    c001eba2 <IDE::detect()+0x164>
c001eb83:	83 ec 0c             	sub    esp,0xc
c001eb86:	68 54 5b 02 c0       	push   0xc0025b54
c001eb8b:	e8 cf e6 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001eb90:	e9 e9 02 00 00       	jmp    c001ee7e <IDE::detect()+0x440>
c001eb95:	a8 80                	test   al,0x80
c001eb97:	74 21                	je     c001ebba <IDE::detect()+0x17c>
c001eb99:	45                   	inc    ebp
c001eb9a:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001eba0:	7f 1e                	jg     c001ebc0 <IDE::detect()+0x182>
c001eba2:	50                   	push   eax
c001eba3:	6a 0c                	push   0xc
c001eba5:	56                   	push   esi
c001eba6:	53                   	push   ebx
c001eba7:	e8 d4 f6 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001ebac:	83 c4 10             	add    esp,0x10
c001ebaf:	a8 01                	test   al,0x1
c001ebb1:	74 e2                	je     c001eb95 <IDE::detect()+0x157>
c001ebb3:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001ebb8:	eb 23                	jmp    c001ebdd <IDE::detect()+0x19f>
c001ebba:	a8 08                	test   al,0x8
c001ebbc:	74 db                	je     c001eb99 <IDE::detect()+0x15b>
c001ebbe:	eb 18                	jmp    c001ebd8 <IDE::detect()+0x19a>
c001ebc0:	50                   	push   eax
c001ebc1:	50                   	push   eax
c001ebc2:	6a 00                	push   0x0
c001ebc4:	6a 32                	push   0x32
c001ebc6:	e8 55 85 ff ff       	call   c0017120 <milliTenthSleep(unsigned long long)>
c001ebcb:	83 c4 10             	add    esp,0x10
c001ebce:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001ebd4:	75 cc                	jne    c001eba2 <IDE::detect()+0x164>
c001ebd6:	eb db                	jmp    c001ebb3 <IDE::detect()+0x175>
c001ebd8:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001ebdd:	83 ec 0c             	sub    esp,0xc
c001ebe0:	68 57 5b 02 c0       	push   0xc0025b57
c001ebe5:	e8 75 e6 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ebea:	83 c4 10             	add    esp,0x10
c001ebed:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001ebf2:	74 5f                	je     c001ec53 <IDE::detect()+0x215>
c001ebf4:	51                   	push   ecx
c001ebf5:	6a 04                	push   0x4
c001ebf7:	56                   	push   esi
c001ebf8:	53                   	push   ebx
c001ebf9:	e8 82 f6 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001ebfe:	83 c4 0c             	add    esp,0xc
c001ec01:	89 c5                	mov    ebp,eax
c001ec03:	6a 05                	push   0x5
c001ec05:	56                   	push   esi
c001ec06:	53                   	push   ebx
c001ec07:	e8 74 f6 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001ec0c:	83 c4 10             	add    esp,0x10
c001ec0f:	89 e9                	mov    ecx,ebp
c001ec11:	0f b6 c0             	movzx  eax,al
c001ec14:	0f b6 e9             	movzx  ebp,cl
c001ec17:	83 fd 14             	cmp    ebp,0x14
c001ec1a:	75 07                	jne    c001ec23 <IDE::detect()+0x1e5>
c001ec1c:	3d eb 00 00 00       	cmp    eax,0xeb
c001ec21:	eb 0e                	jmp    c001ec31 <IDE::detect()+0x1f3>
c001ec23:	3d 96 00 00 00       	cmp    eax,0x96
c001ec28:	0f 85 53 02 00 00    	jne    c001ee81 <IDE::detect()+0x443>
c001ec2e:	83 fd 69             	cmp    ebp,0x69
c001ec31:	0f 85 4a 02 00 00    	jne    c001ee81 <IDE::detect()+0x443>
c001ec37:	68 a1 00 00 00       	push   0xa1
c001ec3c:	6a 07                	push   0x7
c001ec3e:	56                   	push   esi
c001ec3f:	53                   	push   ebx
c001ec40:	e8 7b f5 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec45:	58                   	pop    eax
c001ec46:	5a                   	pop    edx
c001ec47:	6a 00                	push   0x0
c001ec49:	6a 0a                	push   0xa
c001ec4b:	e8 d0 84 ff ff       	call   c0017120 <milliTenthSleep(unsigned long long)>
c001ec50:	83 c4 10             	add    esp,0x10
c001ec53:	83 ec 0c             	sub    esp,0xc
c001ec56:	89 fd                	mov    ebp,edi
c001ec58:	68 5a 5b 02 c0       	push   0xc0025b5a
c001ec5d:	c1 e5 06             	shl    ebp,0x6
c001ec60:	e8 fa e5 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ec65:	01 dd                	add    ebp,ebx
c001ec67:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ec6b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001ec72:	52                   	push   edx
c001ec73:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ec77:	6a 00                	push   0x0
c001ec79:	56                   	push   esi
c001ec7a:	53                   	push   ebx
c001ec7b:	e8 ee fc ff ff       	call   c001e96e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ec80:	83 c4 14             	add    esp,0x14
c001ec83:	68 5e 5b 02 c0       	push   0xc0025b5e
c001ec88:	e8 d2 e5 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ec8d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001ec92:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001ec99:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001eca0:	89 f0                	mov    eax,esi
c001eca2:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001eca8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ecac:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001ecb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecb6:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001ecbd:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001ecc5:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001eccc:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001ecd4:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001ecda:	c7 04 24 62 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b62
c001ece1:	e8 79 e5 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ece6:	83 c4 10             	add    esp,0x10
c001ece9:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001ecf0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ecf4:	74 09                	je     c001ecff <IDE::detect()+0x2c1>
c001ecf6:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001ecfd:	eb 07                	jmp    c001ed06 <IDE::detect()+0x2c8>
c001ecff:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001ed06:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ed0a:	89 f8                	mov    eax,edi
c001ed0c:	83 ec 0c             	sub    esp,0xc
c001ed0f:	c1 e0 06             	shl    eax,0x6
c001ed12:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001ed15:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001ed1b:	68 66 5b 02 c0       	push   0xc0025b66
c001ed20:	e8 3a e5 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ed25:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ed29:	89 e8                	mov    eax,ebp
c001ed2b:	83 c4 10             	add    esp,0x10
c001ed2e:	8d 6a 28             	lea    ebp,[edx+0x28]
c001ed31:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001ed34:	83 c0 02             	add    eax,0x2
c001ed37:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001ed3d:	83 c2 02             	add    edx,0x2
c001ed40:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001ed43:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001ed49:	39 d5                	cmp    ebp,edx
c001ed4b:	75 e4                	jne    c001ed31 <IDE::detect()+0x2f3>
c001ed4d:	89 f8                	mov    eax,edi
c001ed4f:	c1 e0 06             	shl    eax,0x6
c001ed52:	01 d8                	add    eax,ebx
c001ed54:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001ed5b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ed62:	c1 ea 09             	shr    edx,0x9
c001ed65:	83 e2 01             	and    edx,0x1
c001ed68:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001ed6f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ed75:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001ed79:	74 0c                	je     c001ed87 <IDE::detect()+0x349>
c001ed7b:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001ed84:	0f 95 c2             	setne  dl
c001ed87:	83 ec 0c             	sub    esp,0xc
c001ed8a:	89 fd                	mov    ebp,edi
c001ed8c:	c1 e5 06             	shl    ebp,0x6
c001ed8f:	01 dd                	add    ebp,ebx
c001ed91:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001ed97:	68 6a 5b 02 c0       	push   0xc0025b6a
c001ed9c:	e8 be e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001eda1:	83 c4 10             	add    esp,0x10
c001eda4:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001eda9:	75 66                	jne    c001ee11 <IDE::detect()+0x3d3>
c001edab:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001edb2:	0f 84 b8 00 00 00    	je     c001ee70 <IDE::detect()+0x432>
c001edb8:	83 ec 0c             	sub    esp,0xc
c001edbb:	68 6e 5b 02 c0       	push   0xc0025b6e
c001edc0:	e8 9a e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001edc5:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001edcc:	e8 c6 0e ff ff       	call   c000fc97 <malloc>
c001edd1:	89 04 24             	mov    DWORD PTR [esp],eax
c001edd4:	89 c5                	mov    ebp,eax
c001edd6:	e8 43 05 00 00       	call   c001f31e <ATA::ATA()>
c001eddb:	c7 04 24 72 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b72
c001ede2:	e8 78 e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ede7:	59                   	pop    ecx
c001ede8:	58                   	pop    eax
c001ede9:	55                   	push   ebp
c001edea:	53                   	push   ebx
c001edeb:	e8 0c ac fe ff       	call   c00099fc <Device::addChild(Device*)>
c001edf0:	c7 04 24 77 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b77
c001edf7:	e8 63 e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001edfc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001edff:	53                   	push   ebx
c001ee00:	57                   	push   edi
c001ee01:	6a 00                	push   0x0
c001ee03:	55                   	push   ebp
c001ee04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee07:	83 c4 14             	add    esp,0x14
c001ee0a:	68 7c 5b 02 c0       	push   0xc0025b7c
c001ee0f:	eb 57                	jmp    c001ee68 <IDE::detect()+0x42a>
c001ee11:	83 ec 0c             	sub    esp,0xc
c001ee14:	68 81 5b 02 c0       	push   0xc0025b81
c001ee19:	e8 41 e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ee1e:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ee25:	e8 6d 0e ff ff       	call   c000fc97 <malloc>
c001ee2a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee2d:	89 c5                	mov    ebp,eax
c001ee2f:	e8 98 0c 00 00       	call   c001facc <ATAPI::ATAPI()>
c001ee34:	c7 04 24 87 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b87
c001ee3b:	e8 1f e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ee40:	58                   	pop    eax
c001ee41:	5a                   	pop    edx
c001ee42:	55                   	push   ebp
c001ee43:	53                   	push   ebx
c001ee44:	e8 b3 ab fe ff       	call   c00099fc <Device::addChild(Device*)>
c001ee49:	c7 04 24 8e 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b8e
c001ee50:	e8 0a e4 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ee55:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ee58:	53                   	push   ebx
c001ee59:	57                   	push   edi
c001ee5a:	6a 00                	push   0x0
c001ee5c:	55                   	push   ebp
c001ee5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee60:	83 c4 14             	add    esp,0x14
c001ee63:	68 95 5b 02 c0       	push   0xc0025b95
c001ee68:	e8 f2 e3 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ee6d:	83 c4 10             	add    esp,0x10
c001ee70:	83 ec 0c             	sub    esp,0xc
c001ee73:	47                   	inc    edi
c001ee74:	68 9c 5b 02 c0       	push   0xc0025b9c
c001ee79:	e8 e1 e3 fe ff       	call   c000d25f <KeSetBootMessage(char const*)>
c001ee7e:	83 c4 10             	add    esp,0x10
c001ee81:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001ee85:	74 0c                	je     c001ee93 <IDE::detect()+0x455>
c001ee87:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001ee8e:	e9 10 fc ff ff       	jmp    c001eaa3 <IDE::detect()+0x65>
c001ee93:	4e                   	dec    esi
c001ee94:	74 0a                	je     c001eea0 <IDE::detect()+0x462>
c001ee96:	be 01 00 00 00       	mov    esi,0x1
c001ee9b:	e9 ec fb ff ff       	jmp    c001ea8c <IDE::detect()+0x4e>
c001eea0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001eea6:	5b                   	pop    ebx
c001eea7:	5e                   	pop    esi
c001eea8:	5f                   	pop    edi
c001eea9:	5d                   	pop    ebp
c001eeaa:	c3                   	ret    
c001eeab:	90                   	nop

c001eeac <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001eeac:	55                   	push   ebp
c001eead:	57                   	push   edi
c001eeae:	56                   	push   esi
c001eeaf:	53                   	push   ebx
c001eeb0:	83 ec 1c             	sub    esp,0x1c
c001eeb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001eeb7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001eebb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eebf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001eec3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eec7:	88 c3                	mov    bl,al
c001eec9:	25 ff 00 00 00       	and    eax,0xff
c001eece:	0f 84 88 00 00 00    	je     c001ef5c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001eed4:	83 ec 0c             	sub    esp,0xc
c001eed7:	89 c7                	mov    edi,eax
c001eed9:	68 a0 5b 02 c0       	push   0xc0025ba0
c001eede:	e8 81 80 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001eee3:	83 c4 10             	add    esp,0x10
c001eee6:	83 ff 01             	cmp    edi,0x1
c001eee9:	74 6b                	je     c001ef56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001eeeb:	83 ff 02             	cmp    edi,0x2
c001eeee:	75 58                	jne    c001ef48 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001eef0:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001eef5:	01 ff                	add    edi,edi
c001eef7:	50                   	push   eax
c001eef8:	09 fe                	or     esi,edi
c001eefa:	6a 01                	push   0x1
c001eefc:	89 f0                	mov    eax,esi
c001eefe:	0f b6 f0             	movzx  esi,al
c001ef01:	c1 e6 06             	shl    esi,0x6
c001ef04:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001ef0c:	50                   	push   eax
c001ef0d:	55                   	push   ebp
c001ef0e:	e8 6d f3 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001ef13:	83 c4 10             	add    esp,0x10
c001ef16:	a8 01                	test   al,0x1
c001ef18:	74 02                	je     c001ef1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001ef1a:	b3 07                	mov    bl,0x7
c001ef1c:	a8 02                	test   al,0x2
c001ef1e:	74 02                	je     c001ef22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001ef20:	b3 03                	mov    bl,0x3
c001ef22:	a8 04                	test   al,0x4
c001ef24:	74 02                	je     c001ef28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001ef26:	b3 14                	mov    bl,0x14
c001ef28:	a8 08                	test   al,0x8
c001ef2a:	74 02                	je     c001ef2e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001ef2c:	b3 03                	mov    bl,0x3
c001ef2e:	a8 10                	test   al,0x10
c001ef30:	74 02                	je     c001ef34 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001ef32:	b3 15                	mov    bl,0x15
c001ef34:	a8 20                	test   al,0x20
c001ef36:	74 02                	je     c001ef3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001ef38:	b3 03                	mov    bl,0x3
c001ef3a:	a8 40                	test   al,0x40
c001ef3c:	74 02                	je     c001ef40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ef3e:	b3 16                	mov    bl,0x16
c001ef40:	a8 80                	test   al,0x80
c001ef42:	74 18                	je     c001ef5c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ef44:	b3 0d                	mov    bl,0xd
c001ef46:	eb 14                	jmp    c001ef5c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ef48:	83 ff 03             	cmp    edi,0x3
c001ef4b:	74 0d                	je     c001ef5a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001ef4d:	83 ff 04             	cmp    edi,0x4
c001ef50:	75 0a                	jne    c001ef5c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ef52:	b3 08                	mov    bl,0x8
c001ef54:	eb 06                	jmp    c001ef5c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ef56:	b3 13                	mov    bl,0x13
c001ef58:	eb 02                	jmp    c001ef5c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ef5a:	b3 17                	mov    bl,0x17
c001ef5c:	83 c4 1c             	add    esp,0x1c
c001ef5f:	88 d8                	mov    al,bl
c001ef61:	5b                   	pop    ebx
c001ef62:	5e                   	pop    esi
c001ef63:	5f                   	pop    edi
c001ef64:	5d                   	pop    ebp
c001ef65:	c3                   	ret    

c001ef66 <IDE::polling(unsigned char, unsigned int)>:
c001ef66:	57                   	push   edi
c001ef67:	56                   	push   esi
c001ef68:	53                   	push   ebx
c001ef69:	bb 04 00 00 00       	mov    ebx,0x4
c001ef6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ef72:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ef77:	52                   	push   edx
c001ef78:	6a 0c                	push   0xc
c001ef7a:	56                   	push   esi
c001ef7b:	57                   	push   edi
c001ef7c:	e8 ff f2 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001ef81:	83 c4 10             	add    esp,0x10
c001ef84:	4b                   	dec    ebx
c001ef85:	75 f0                	jne    c001ef77 <IDE::polling(unsigned char, unsigned int)+0x11>
c001ef87:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ef8c:	50                   	push   eax
c001ef8d:	6a 0c                	push   0xc
c001ef8f:	56                   	push   esi
c001ef90:	57                   	push   edi
c001ef91:	e8 ea f2 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001ef96:	83 c4 10             	add    esp,0x10
c001ef99:	a8 01                	test   al,0x1
c001ef9b:	75 17                	jne    c001efb4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ef9d:	a8 20                	test   al,0x20
c001ef9f:	75 0f                	jne    c001efb0 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001efa1:	4b                   	dec    ebx
c001efa2:	74 10                	je     c001efb4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001efa4:	a8 80                	test   al,0x80
c001efa6:	75 e4                	jne    c001ef8c <IDE::polling(unsigned char, unsigned int)+0x26>
c001efa8:	a8 08                	test   al,0x8
c001efaa:	74 e0                	je     c001ef8c <IDE::polling(unsigned char, unsigned int)+0x26>
c001efac:	31 c0                	xor    eax,eax
c001efae:	eb 06                	jmp    c001efb6 <IDE::polling(unsigned char, unsigned int)+0x50>
c001efb0:	b0 01                	mov    al,0x1
c001efb2:	eb 02                	jmp    c001efb6 <IDE::polling(unsigned char, unsigned int)+0x50>
c001efb4:	b0 02                	mov    al,0x2
c001efb6:	5b                   	pop    ebx
c001efb7:	5e                   	pop    esi
c001efb8:	5f                   	pop    edi
c001efb9:	c3                   	ret    

c001efba <SATABus::close(int, int, void*)>:
c001efba:	31 c0                	xor    eax,eax
c001efbc:	c3                   	ret    
c001efbd:	90                   	nop

c001efbe <SATABus::detect()>:
c001efbe:	c3                   	ret    
c001efbf:	90                   	nop

c001efc0 <SATABus::SATABus()>:
c001efc0:	83 ec 0c             	sub    esp,0xc
c001efc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc7:	83 ec 08             	sub    esp,0x8
c001efca:	68 d8 5b 02 c0       	push   0xc0025bd8
c001efcf:	50                   	push   eax
c001efd0:	e8 7f ad fe ff       	call   c0009d54 <HardDiskController::HardDiskController(char const*)>
c001efd5:	83 c4 10             	add    esp,0x10
c001efd8:	ba 04 5c 02 c0       	mov    edx,0xc0025c04
c001efdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe1:	89 10                	mov    DWORD PTR [eax],edx
c001efe3:	83 ec 0c             	sub    esp,0xc
c001efe6:	6a 50                	push   0x50
c001efe8:	e8 c3 12 ff ff       	call   c00102b0 <Phys::allocateContiguousPages(int)>
c001efed:	83 c4 10             	add    esp,0x10
c001eff0:	89 c2                	mov    edx,eax
c001eff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001effc:	83 ec 0c             	sub    esp,0xc
c001efff:	6a 50                	push   0x50
c001f001:	e8 c3 44 ff ff       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c001f006:	83 c4 10             	add    esp,0x10
c001f009:	89 c2                	mov    edx,eax
c001f00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f015:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001f01a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f01e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f024:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f028:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f02e:	83 ec 0c             	sub    esp,0xc
c001f031:	6a 03                	push   0x3
c001f033:	6a 50                	push   0x50
c001f035:	51                   	push   ecx
c001f036:	52                   	push   edx
c001f037:	50                   	push   eax
c001f038:	e8 59 4d ff ff       	call   c0013d96 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f03d:	83 c4 20             	add    esp,0x20
c001f040:	90                   	nop
c001f041:	83 c4 0c             	add    esp,0xc
c001f044:	c3                   	ret    
c001f045:	90                   	nop

c001f046 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f046:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f04a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f04d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f050:	09 c2                	or     edx,eax
c001f052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f056:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f05c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f05e:	31 c0                	xor    eax,eax
c001f060:	c1 e9 08             	shr    ecx,0x8
c001f063:	83 e1 0f             	and    ecx,0xf
c001f066:	39 c8                	cmp    eax,ecx
c001f068:	74 0a                	je     c001f074 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f06a:	f6 c2 01             	test   dl,0x1
c001f06d:	74 08                	je     c001f077 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f06f:	d1 ea                	shr    edx,1
c001f071:	40                   	inc    eax
c001f072:	eb f2                	jmp    c001f066 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f074:	83 c8 ff             	or     eax,0xffffffff
c001f077:	c3                   	ret    

c001f078 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f078:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f07c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f07f:	89 c2                	mov    edx,eax
c001f081:	c1 ea 08             	shr    edx,0x8
c001f084:	83 e2 0f             	and    edx,0xf
c001f087:	4a                   	dec    edx
c001f088:	75 32                	jne    c001f0bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f08a:	83 e0 0f             	and    eax,0xf
c001f08d:	83 f8 03             	cmp    eax,0x3
c001f090:	75 2a                	jne    c001f0bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f092:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f095:	b8 02 00 00 00       	mov    eax,0x2
c001f09a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f0a0:	74 1c                	je     c001f0be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f0a2:	b8 04 00 00 00       	mov    eax,0x4
c001f0a7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f0ad:	74 0f                	je     c001f0be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f0af:	31 c0                	xor    eax,eax
c001f0b1:	83 fa 03             	cmp    edx,0x3
c001f0b4:	0f 94 c0             	sete   al
c001f0b7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f0bb:	c3                   	ret    
c001f0bc:	31 c0                	xor    eax,eax
c001f0be:	c3                   	ret    
c001f0bf:	90                   	nop

c001f0c0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f0c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0c7:	0f ba e2 0f          	bt     edx,0xf
c001f0cb:	72 f7                	jb     c001f0c4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f0cd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0d0:	83 ca 10             	or     edx,0x10
c001f0d3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0d6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0d9:	83 ca 01             	or     edx,0x1
c001f0dc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0df:	c3                   	ret    

c001f0e0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f0e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0e4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0e7:	83 e2 fe             	and    edx,0xfffffffe
c001f0ea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0ed:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0f0:	83 e2 ef             	and    edx,0xffffffef
c001f0f3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0f6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0f9:	0f ba e2 0e          	bt     edx,0xe
c001f0fd:	72 f7                	jb     c001f0f6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f0ff:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f102:	0f ba e2 0f          	bt     edx,0xf
c001f106:	72 ee                	jb     c001f0f6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f108:	c3                   	ret    
c001f109:	90                   	nop

c001f10a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f10a:	55                   	push   ebp
c001f10b:	57                   	push   edi
c001f10c:	56                   	push   esi
c001f10d:	53                   	push   ebx
c001f10e:	83 ec 1c             	sub    esp,0x1c
c001f111:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f115:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f119:	53                   	push   ebx
c001f11a:	56                   	push   esi
c001f11b:	e8 c0 ff ff ff       	call   c001f0e0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f120:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f124:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f12a:	83 ec 0c             	sub    esp,0xc
c001f12d:	c1 e5 0a             	shl    ebp,0xa
c001f130:	01 e8                	add    eax,ebp
c001f132:	89 03                	mov    DWORD PTR [ebx],eax
c001f134:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f136:	68 00 04 00 00       	push   0x400
c001f13b:	6a 00                	push   0x0
c001f13d:	50                   	push   eax
c001f13e:	e8 ad 13 fe ff       	call   c00004f0 <memset>
c001f143:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f149:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001f14d:	01 e8                	add    eax,ebp
c001f14f:	83 c4 1c             	add    esp,0x1c
c001f152:	89 03                	mov    DWORD PTR [ebx],eax
c001f154:	c1 e2 08             	shl    edx,0x8
c001f157:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f15e:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001f164:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f16a:	01 f8                	add    eax,edi
c001f16c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f16f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f172:	68 00 01 00 00       	push   0x100
c001f177:	6a 00                	push   0x0
c001f179:	50                   	push   eax
c001f17a:	e8 71 13 fe ff       	call   c00004f0 <memset>
c001f17f:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001f185:	01 fa                	add    edx,edi
c001f187:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f18b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f18e:	c1 e7 0d             	shl    edi,0xd
c001f191:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f198:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f19e:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f1a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f1a8:	31 ff                	xor    edi,edi
c001f1aa:	83 c4 10             	add    esp,0x10
c001f1ad:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f1b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1b7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f1bd:	83 c5 20             	add    ebp,0x20
c001f1c0:	01 f8                	add    eax,edi
c001f1c2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f1c5:	52                   	push   edx
c001f1c6:	68 00 01 00 00       	push   0x100
c001f1cb:	6a 00                	push   0x0
c001f1cd:	50                   	push   eax
c001f1ce:	e8 1d 13 fe ff       	call   c00004f0 <memset>
c001f1d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f1d7:	83 c4 10             	add    esp,0x10
c001f1da:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f1e0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f1e7:	01 f8                	add    eax,edi
c001f1e9:	81 c7 00 01 00 00    	add    edi,0x100
c001f1ef:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f1f2:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f1f8:	75 b3                	jne    c001f1ad <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001f1fa:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f201:	50                   	push   eax
c001f202:	50                   	push   eax
c001f203:	53                   	push   ebx
c001f204:	56                   	push   esi
c001f205:	e8 b6 fe ff ff       	call   c001f0c0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f20a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f211:	83 c4 2c             	add    esp,0x2c
c001f214:	5b                   	pop    ebx
c001f215:	5e                   	pop    esi
c001f216:	5f                   	pop    edi
c001f217:	5d                   	pop    ebp
c001f218:	c3                   	ret    
c001f219:	90                   	nop

c001f21a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f21a:	55                   	push   ebp
c001f21b:	57                   	push   edi
c001f21c:	56                   	push   esi
c001f21d:	53                   	push   ebx
c001f21e:	31 db                	xor    ebx,ebx
c001f220:	83 ec 0c             	sub    esp,0xc
c001f223:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f227:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f22b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f22e:	f7 c7 01 00 00 00    	test   edi,0x1
c001f234:	74 7a                	je     c001f2b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f236:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f23a:	89 d8                	mov    eax,ebx
c001f23c:	c1 e0 07             	shl    eax,0x7
c001f23f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f246:	55                   	push   ebp
c001f247:	56                   	push   esi
c001f248:	e8 2b fe ff ff       	call   c001f078 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f24d:	5a                   	pop    edx
c001f24e:	83 f8 01             	cmp    eax,0x1
c001f251:	59                   	pop    ecx
c001f252:	75 21                	jne    c001f275 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f254:	50                   	push   eax
c001f255:	53                   	push   ebx
c001f256:	55                   	push   ebp
c001f257:	56                   	push   esi
c001f258:	e8 ad fe ff ff       	call   c001f10a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f25d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f264:	e8 2e 0a ff ff       	call   c000fc97 <malloc>
c001f269:	89 c5                	mov    ebp,eax
c001f26b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f26e:	e8 25 0f 00 00       	call   c0020198 <SATA::SATA()>
c001f273:	eb 24                	jmp    c001f299 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f275:	83 f8 04             	cmp    eax,0x4
c001f278:	75 36                	jne    c001f2b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f27a:	51                   	push   ecx
c001f27b:	53                   	push   ebx
c001f27c:	55                   	push   ebp
c001f27d:	56                   	push   esi
c001f27e:	e8 87 fe ff ff       	call   c001f10a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f283:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f28a:	e8 08 0a ff ff       	call   c000fc97 <malloc>
c001f28f:	89 c5                	mov    ebp,eax
c001f291:	89 04 24             	mov    DWORD PTR [esp],eax
c001f294:	e8 97 12 00 00       	call   c0020530 <SATAPI::SATAPI()>
c001f299:	58                   	pop    eax
c001f29a:	5a                   	pop    edx
c001f29b:	55                   	push   ebp
c001f29c:	56                   	push   esi
c001f29d:	e8 5a a7 fe ff       	call   c00099fc <Device::addChild(Device*)>
c001f2a2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f2a5:	56                   	push   esi
c001f2a6:	6a 00                	push   0x0
c001f2a8:	53                   	push   ebx
c001f2a9:	55                   	push   ebp
c001f2aa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f2ad:	83 c4 20             	add    esp,0x20
c001f2b0:	d1 ef                	shr    edi,1
c001f2b2:	43                   	inc    ebx
c001f2b3:	83 fb 20             	cmp    ebx,0x20
c001f2b6:	0f 85 72 ff ff ff    	jne    c001f22e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f2bc:	83 c4 0c             	add    esp,0xc
c001f2bf:	5b                   	pop    ebx
c001f2c0:	5e                   	pop    esi
c001f2c1:	5f                   	pop    edi
c001f2c2:	5d                   	pop    ebp
c001f2c3:	c3                   	ret    

c001f2c4 <SATABus::open(int, int, void*)>:
c001f2c4:	53                   	push   ebx
c001f2c5:	83 ec 08             	sub    esp,0x8
c001f2c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f2cc:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f2d2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f2d8:	e8 6f 79 ff ff       	call   c0016c4c <KeDisablePreemption()>
c001f2dd:	52                   	push   edx
c001f2de:	52                   	push   edx
c001f2df:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f2e5:	53                   	push   ebx
c001f2e6:	e8 2f ff ff ff       	call   c001f21a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f2eb:	e8 84 79 ff ff       	call   c0016c74 <KeRestorePreemption()>
c001f2f0:	31 c0                	xor    eax,eax
c001f2f2:	83 c4 18             	add    esp,0x18
c001f2f5:	5b                   	pop    ebx
c001f2f6:	c3                   	ret    
c001f2f7:	90                   	nop

c001f2f8 <ATA::close(int, int, void*)>:
c001f2f8:	83 ec 0c             	sub    esp,0xc
c001f2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f305:	85 c0                	test   eax,eax
c001f307:	74 0c                	je     c001f315 <ATA::close(int, int, void*)+0x1d>
c001f309:	83 ec 0c             	sub    esp,0xc
c001f30c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f30e:	50                   	push   eax
c001f30f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f312:	83 c4 10             	add    esp,0x10
c001f315:	31 c0                	xor    eax,eax
c001f317:	83 c4 0c             	add    esp,0xc
c001f31a:	c3                   	ret    
c001f31b:	90                   	nop

c001f31c <ATA::powerSaving(PowerSavingLevel)>:
c001f31c:	c3                   	ret    
c001f31d:	90                   	nop

c001f31e <ATA::ATA()>:
c001f31e:	83 ec 0c             	sub    esp,0xc
c001f321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f325:	83 ec 04             	sub    esp,0x4
c001f328:	68 00 02 00 00       	push   0x200
c001f32d:	68 85 5d 02 c0       	push   0xc0025d85
c001f332:	50                   	push   eax
c001f333:	e8 a6 aa fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f338:	83 c4 10             	add    esp,0x10
c001f33b:	ba ec 5c 02 c0       	mov    edx,0xc0025cec
c001f340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f344:	89 10                	mov    DWORD PTR [eax],edx
c001f346:	90                   	nop
c001f347:	83 c4 0c             	add    esp,0xc
c001f34a:	c3                   	ret    
c001f34b:	90                   	nop

c001f34c <ATA::flush(bool)>:
c001f34c:	53                   	push   ebx
c001f34d:	83 ec 08             	sub    esp,0x8
c001f350:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f354:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f359:	83 f8 01             	cmp    eax,0x1
c001f35c:	19 c0                	sbb    eax,eax
c001f35e:	83 e0 fd             	and    eax,0xfffffffd
c001f361:	05 ea 00 00 00       	add    eax,0xea
c001f366:	50                   	push   eax
c001f367:	6a 07                	push   0x7
c001f369:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f370:	50                   	push   eax
c001f371:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f377:	e8 44 ee ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f37c:	83 c4 0c             	add    esp,0xc
c001f37f:	6a 00                	push   0x0
c001f381:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f388:	50                   	push   eax
c001f389:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f38f:	e8 d2 fb ff ff       	call   c001ef66 <IDE::polling(unsigned char, unsigned int)>
c001f394:	83 c4 18             	add    esp,0x18
c001f397:	5b                   	pop    ebx
c001f398:	c3                   	ret    
c001f399:	90                   	nop

c001f39a <ATA::readyForCommand()>:
c001f39a:	56                   	push   esi
c001f39b:	53                   	push   ebx
c001f39c:	31 db                	xor    ebx,ebx
c001f39e:	50                   	push   eax
c001f39f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f3a3:	50                   	push   eax
c001f3a4:	6a 0c                	push   0xc
c001f3a6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f3ad:	50                   	push   eax
c001f3ae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f3b4:	e8 c7 ee ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001f3b9:	83 c4 10             	add    esp,0x10
c001f3bc:	a8 88                	test   al,0x88
c001f3be:	74 20                	je     c001f3e0 <ATA::readyForCommand()+0x46>
c001f3c0:	43                   	inc    ebx
c001f3c1:	83 fb 63             	cmp    ebx,0x63
c001f3c4:	7e dd                	jle    c001f3a3 <ATA::readyForCommand()+0x9>
c001f3c6:	51                   	push   ecx
c001f3c7:	51                   	push   ecx
c001f3c8:	6a 00                	push   0x0
c001f3ca:	6a 0a                	push   0xa
c001f3cc:	e8 4f 7d ff ff       	call   c0017120 <milliTenthSleep(unsigned long long)>
c001f3d1:	83 c4 10             	add    esp,0x10
c001f3d4:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f3da:	75 c7                	jne    c001f3a3 <ATA::readyForCommand()+0x9>
c001f3dc:	31 c0                	xor    eax,eax
c001f3de:	eb 02                	jmp    c001f3e2 <ATA::readyForCommand()+0x48>
c001f3e0:	b0 01                	mov    al,0x1
c001f3e2:	5a                   	pop    edx
c001f3e3:	5b                   	pop    ebx
c001f3e4:	5e                   	pop    esi
c001f3e5:	c3                   	ret    

c001f3e6 <ATA::access(unsigned long long, int, void*, bool)>:
c001f3e6:	55                   	push   ebp
c001f3e7:	57                   	push   edi
c001f3e8:	56                   	push   esi
c001f3e9:	53                   	push   ebx
c001f3ea:	83 ec 2c             	sub    esp,0x2c
c001f3ed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f3f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f3f5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f3f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f3fd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f401:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f405:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f409:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f40f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f413:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f419:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f41d:	c1 e0 06             	shl    eax,0x6
c001f420:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f428:	74 5d                	je     c001f487 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001f42a:	89 fa                	mov    edx,edi
c001f42c:	89 f0                	mov    eax,esi
c001f42e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f432:	c1 ea 1c             	shr    edx,0x1c
c001f435:	89 d1                	mov    ecx,edx
c001f437:	09 c1                	or     ecx,eax
c001f439:	74 25                	je     c001f460 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001f43b:	31 ed                	xor    ebp,ebp
c001f43d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f444:	89 fa                	mov    edx,edi
c001f446:	89 f0                	mov    eax,esi
c001f448:	0f ad d0             	shrd   eax,edx,cl
c001f44b:	d3 ea                	shr    edx,cl
c001f44d:	f6 c1 20             	test   cl,0x20
c001f450:	74 02                	je     c001f454 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001f452:	89 d0                	mov    eax,edx
c001f454:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f458:	45                   	inc    ebp
c001f459:	83 fd 06             	cmp    ebp,0x6
c001f45c:	75 df                	jne    c001f43d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001f45e:	eb 76                	jmp    c001f4d6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001f460:	89 f0                	mov    eax,esi
c001f462:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f467:	89 fa                	mov    edx,edi
c001f469:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f470:	0f ac d0 10          	shrd   eax,edx,0x10
c001f474:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f479:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f47d:	c1 ee 18             	shr    esi,0x18
c001f480:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f485:	eb 56                	jmp    c001f4dd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001f487:	6a 00                	push   0x0
c001f489:	6a 3f                	push   0x3f
c001f48b:	57                   	push   edi
c001f48c:	56                   	push   esi
c001f48d:	e8 f2 24 00 00       	call   c0021984 <__umoddi3>
c001f492:	83 c4 10             	add    esp,0x10
c001f495:	40                   	inc    eax
c001f496:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f49a:	6a 00                	push   0x0
c001f49c:	68 f0 03 00 00       	push   0x3f0
c001f4a1:	57                   	push   edi
c001f4a2:	56                   	push   esi
c001f4a3:	e8 dc 23 00 00       	call   c0021884 <__udivdi3>
c001f4a8:	83 c4 10             	add    esp,0x10
c001f4ab:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f4b0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f4b7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f4bc:	6a 00                	push   0x0
c001f4be:	6a 3f                	push   0x3f
c001f4c0:	57                   	push   edi
c001f4c1:	56                   	push   esi
c001f4c2:	e8 bd 23 00 00       	call   c0021884 <__udivdi3>
c001f4c7:	83 c4 10             	add    esp,0x10
c001f4ca:	83 e0 0f             	and    eax,0xf
c001f4cd:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f4d2:	89 c6                	mov    esi,eax
c001f4d4:	eb 07                	jmp    c001f4dd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001f4d6:	31 f6                	xor    esi,esi
c001f4d8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f4dd:	55                   	push   ebp
c001f4de:	6a 00                	push   0x0
c001f4e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4e7:	50                   	push   eax
c001f4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f4ec:	e8 d9 ee ff ff       	call   c001e3ca <IDE::enableIRQs(unsigned char, bool)>
c001f4f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f4f4:	e8 a1 fe ff ff       	call   c001f39a <ATA::readyForCommand()>
c001f4f9:	83 c4 10             	add    esp,0x10
c001f4fc:	84 c0                	test   al,al
c001f4fe:	75 0a                	jne    c001f50a <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001f500:	be 01 00 00 00       	mov    esi,0x1
c001f505:	e9 c2 02 00 00       	jmp    c001f7cc <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001f50a:	fa                   	cli    
c001f50b:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f511:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f517:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001f51c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f522:	75 0a                	jne    c001f52e <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001f524:	c1 e0 04             	shl    eax,0x4
c001f527:	09 c6                	or     esi,eax
c001f529:	83 ce a0             	or     esi,0xffffffa0
c001f52c:	eb 08                	jmp    c001f536 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001f52e:	c1 e0 04             	shl    eax,0x4
c001f531:	09 c6                	or     esi,eax
c001f533:	83 ce e0             	or     esi,0xffffffe0
c001f536:	89 f0                	mov    eax,esi
c001f538:	0f b6 d2             	movzx  edx,dl
c001f53b:	0f b6 f0             	movzx  esi,al
c001f53e:	56                   	push   esi
c001f53f:	6a 06                	push   0x6
c001f541:	52                   	push   edx
c001f542:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f548:	e8 73 ec ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f54d:	83 c4 10             	add    esp,0x10
c001f550:	6a 00                	push   0x0
c001f552:	6a 01                	push   0x1
c001f554:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f55b:	50                   	push   eax
c001f55c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f562:	e8 59 ec ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f567:	83 c4 10             	add    esp,0x10
c001f56a:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001f56f:	83 f8 02             	cmp    eax,0x2
c001f572:	75 6e                	jne    c001f5e2 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001f574:	6a 00                	push   0x0
c001f576:	6a 08                	push   0x8
c001f578:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f57f:	50                   	push   eax
c001f580:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f586:	e8 35 ec ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f58b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f590:	50                   	push   eax
c001f591:	6a 09                	push   0x9
c001f593:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f59a:	50                   	push   eax
c001f59b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5a1:	e8 1a ec ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5a6:	83 c4 20             	add    esp,0x20
c001f5a9:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f5ae:	50                   	push   eax
c001f5af:	6a 0a                	push   0xa
c001f5b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5b8:	50                   	push   eax
c001f5b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5bf:	e8 fc eb ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5c4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f5c9:	50                   	push   eax
c001f5ca:	6a 0b                	push   0xb
c001f5cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5d3:	50                   	push   eax
c001f5d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5da:	e8 e1 eb ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5df:	83 c4 20             	add    esp,0x20
c001f5e2:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f5e7:	50                   	push   eax
c001f5e8:	6a 02                	push   0x2
c001f5ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5f1:	50                   	push   eax
c001f5f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5f8:	e8 c3 eb ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5fd:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f602:	50                   	push   eax
c001f603:	6a 03                	push   0x3
c001f605:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f60c:	50                   	push   eax
c001f60d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f613:	e8 a8 eb ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f618:	83 c4 20             	add    esp,0x20
c001f61b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f620:	50                   	push   eax
c001f621:	6a 04                	push   0x4
c001f623:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f62a:	50                   	push   eax
c001f62b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f631:	e8 8a eb ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f636:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f63b:	50                   	push   eax
c001f63c:	6a 05                	push   0x5
c001f63e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f645:	50                   	push   eax
c001f646:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f64c:	e8 6f eb ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f651:	83 c4 20             	add    esp,0x20
c001f654:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f659:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001f65e:	74 13                	je     c001f673 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001f660:	83 f8 02             	cmp    eax,0x2
c001f663:	74 20                	je     c001f685 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001f665:	48                   	dec    eax
c001f666:	0f 85 94 fe ff ff    	jne    c001f500 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001f66c:	b8 30 00 00 00       	mov    eax,0x30
c001f671:	eb 1e                	jmp    c001f691 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001f673:	83 f8 02             	cmp    eax,0x2
c001f676:	74 14                	je     c001f68c <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001f678:	48                   	dec    eax
c001f679:	b8 20 00 00 00       	mov    eax,0x20
c001f67e:	74 11                	je     c001f691 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001f680:	e9 7b fe ff ff       	jmp    c001f500 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001f685:	b8 34 00 00 00       	mov    eax,0x34
c001f68a:	eb 05                	jmp    c001f691 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001f68c:	b8 24 00 00 00       	mov    eax,0x24
c001f691:	50                   	push   eax
c001f692:	6a 07                	push   0x7
c001f694:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f69b:	50                   	push   eax
c001f69c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6a2:	e8 19 eb ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6a7:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f6ae:	83 c4 10             	add    esp,0x10
c001f6b1:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f6b8:	75 01                	jne    c001f6bb <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001f6ba:	fb                   	sti    
c001f6bb:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001f6bf:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001f6c4:	85 f6                	test   esi,esi
c001f6c6:	0f 84 dd 00 00 00    	je     c001f7a9 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001f6cc:	57                   	push   edi
c001f6cd:	6a 01                	push   0x1
c001f6cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6d6:	50                   	push   eax
c001f6d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6dd:	e8 84 f8 ff ff       	call   c001ef66 <IDE::polling(unsigned char, unsigned int)>
c001f6e2:	83 c4 10             	add    esp,0x10
c001f6e5:	0f b6 c0             	movzx  eax,al
c001f6e8:	85 c0                	test   eax,eax
c001f6ea:	74 23                	je     c001f70f <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001f6ec:	50                   	push   eax
c001f6ed:	89 c6                	mov    esi,eax
c001f6ef:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f6f6:	50                   	push   eax
c001f6f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6fe:	50                   	push   eax
c001f6ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f705:	e8 a2 f7 ff ff       	call   c001eeac <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f70a:	e9 ba 00 00 00       	jmp    c001f7c9 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001f70f:	85 ed                	test   ebp,ebp
c001f711:	74 49                	je     c001f75c <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001f713:	fa                   	cli    
c001f714:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f71a:	31 c9                	xor    ecx,ecx
c001f71c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f720:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f724:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001f728:	51                   	push   ecx
c001f729:	51                   	push   ecx
c001f72a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f731:	50                   	push   eax
c001f732:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f738:	e8 71 ea ff ff       	call   c001e1ae <IDE::getBase(unsigned char)>
c001f73d:	89 c2                	mov    edx,eax
c001f73f:	89 f8                	mov    eax,edi
c001f741:	66 ef                	out    dx,ax
c001f743:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001f747:	83 c4 10             	add    esp,0x10
c001f74a:	41                   	inc    ecx
c001f74b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001f751:	75 c9                	jne    c001f71c <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001f753:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f75a:	eb 35                	jmp    c001f791 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001f75c:	fa                   	cli    
c001f75d:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f763:	52                   	push   edx
c001f764:	52                   	push   edx
c001f765:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f76c:	50                   	push   eax
c001f76d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f773:	e8 36 ea ff ff       	call   c001e1ae <IDE::getBase(unsigned char)>
c001f778:	b9 00 01 00 00       	mov    ecx,0x100
c001f77d:	89 c2                	mov    edx,eax
c001f77f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f783:	fc                   	cld    
c001f784:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f787:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f78e:	83 c4 10             	add    esp,0x10
c001f791:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f798:	75 01                	jne    c001f79b <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001f79a:	fb                   	sti    
c001f79b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f7a3:	4e                   	dec    esi
c001f7a4:	e9 1b ff ff ff       	jmp    c001f6c4 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001f7a9:	31 f6                	xor    esi,esi
c001f7ab:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f7b0:	74 1a                	je     c001f7cc <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001f7b2:	50                   	push   eax
c001f7b3:	50                   	push   eax
c001f7b4:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f7b9:	83 f8 02             	cmp    eax,0x2
c001f7bc:	0f 94 c0             	sete   al
c001f7bf:	0f b6 c0             	movzx  eax,al
c001f7c2:	50                   	push   eax
c001f7c3:	53                   	push   ebx
c001f7c4:	e8 83 fb ff ff       	call   c001f34c <ATA::flush(bool)>
c001f7c9:	83 c4 10             	add    esp,0x10
c001f7cc:	83 c4 2c             	add    esp,0x2c
c001f7cf:	89 f0                	mov    eax,esi
c001f7d1:	5b                   	pop    ebx
c001f7d2:	5e                   	pop    esi
c001f7d3:	5f                   	pop    edi
c001f7d4:	5d                   	pop    ebp
c001f7d5:	c3                   	ret    

c001f7d6 <ATA::read(unsigned long long, int, void*)>:
c001f7d6:	57                   	push   edi
c001f7d7:	b8 04 00 00 00       	mov    eax,0x4
c001f7dc:	56                   	push   esi
c001f7dd:	53                   	push   ebx
c001f7de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f7e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f7e6:	8d 7a ff             	lea    edi,[edx-0x1]
c001f7e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f7ed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f7f1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f7f7:	77 25                	ja     c001f81e <ATA::read(unsigned long long, int, void*)+0x48>
c001f7f9:	b8 06 00 00 00       	mov    eax,0x6
c001f7fe:	85 f6                	test   esi,esi
c001f800:	74 1c                	je     c001f81e <ATA::read(unsigned long long, int, void*)+0x48>
c001f802:	50                   	push   eax
c001f803:	50                   	push   eax
c001f804:	6a 00                	push   0x0
c001f806:	56                   	push   esi
c001f807:	52                   	push   edx
c001f808:	53                   	push   ebx
c001f809:	51                   	push   ecx
c001f80a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f80e:	e8 d3 fb ff ff       	call   c001f3e6 <ATA::access(unsigned long long, int, void*, bool)>
c001f813:	83 c4 20             	add    esp,0x20
c001f816:	85 c0                	test   eax,eax
c001f818:	0f 95 c0             	setne  al
c001f81b:	0f b6 c0             	movzx  eax,al
c001f81e:	5b                   	pop    ebx
c001f81f:	5e                   	pop    esi
c001f820:	5f                   	pop    edi
c001f821:	c3                   	ret    

c001f822 <ATA::write(unsigned long long, int, void*)>:
c001f822:	57                   	push   edi
c001f823:	b8 04 00 00 00       	mov    eax,0x4
c001f828:	56                   	push   esi
c001f829:	53                   	push   ebx
c001f82a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f82e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f832:	8d 7a ff             	lea    edi,[edx-0x1]
c001f835:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f839:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f83d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f843:	77 25                	ja     c001f86a <ATA::write(unsigned long long, int, void*)+0x48>
c001f845:	b8 06 00 00 00       	mov    eax,0x6
c001f84a:	85 f6                	test   esi,esi
c001f84c:	74 1c                	je     c001f86a <ATA::write(unsigned long long, int, void*)+0x48>
c001f84e:	50                   	push   eax
c001f84f:	50                   	push   eax
c001f850:	6a 01                	push   0x1
c001f852:	56                   	push   esi
c001f853:	52                   	push   edx
c001f854:	53                   	push   ebx
c001f855:	51                   	push   ecx
c001f856:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f85a:	e8 87 fb ff ff       	call   c001f3e6 <ATA::access(unsigned long long, int, void*, bool)>
c001f85f:	83 c4 20             	add    esp,0x20
c001f862:	85 c0                	test   eax,eax
c001f864:	0f 95 c0             	setne  al
c001f867:	0f b6 c0             	movzx  eax,al
c001f86a:	5b                   	pop    ebx
c001f86b:	5e                   	pop    esi
c001f86c:	5f                   	pop    edi
c001f86d:	c3                   	ret    

c001f86e <ATA::detectCHS()>:
c001f86e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f872:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f878:	c1 e0 06             	shl    eax,0x6
c001f87b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f881:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f88b:	c7 44 24 04 28 5c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025c28
c001f893:	e9 46 07 ff ff       	jmp    c000ffde <KePanic(char const*)>

c001f898 <ATA::open(int, int, void*)>:
c001f898:	53                   	push   ebx
c001f899:	83 ec 08             	sub    esp,0x8
c001f89c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f8a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f8a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f8a8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f8ae:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f8b4:	c1 e0 06             	shl    eax,0x6
c001f8b7:	01 d0                	add    eax,edx
c001f8b9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f8c0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f8c6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f8cd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f8d7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f8dd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f8e4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f8eb:	75 0c                	jne    c001f8f9 <ATA::open(int, int, void*)+0x61>
c001f8ed:	83 ec 0c             	sub    esp,0xc
c001f8f0:	53                   	push   ebx
c001f8f1:	e8 78 ff ff ff       	call   c001f86e <ATA::detectCHS()>
c001f8f6:	83 c4 10             	add    esp,0x10
c001f8f9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f8ff:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f905:	c1 e0 06             	shl    eax,0x6
c001f908:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f90f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f919:	d1 e8                	shr    eax,1
c001f91b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f921:	6a 04                	push   0x4
c001f923:	6a 0c                	push   0xc
c001f925:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f92c:	50                   	push   eax
c001f92d:	52                   	push   edx
c001f92e:	e8 8d e8 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f933:	90                   	nop
c001f934:	90                   	nop
c001f935:	6a 00                	push   0x0
c001f937:	6a 0c                	push   0xc
c001f939:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f940:	50                   	push   eax
c001f941:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f947:	e8 74 e8 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f94c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f952:	83 c4 20             	add    esp,0x20
c001f955:	c1 e0 06             	shl    eax,0x6
c001f958:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001f95e:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001f965:	0f 84 00 01 00 00    	je     c001fa6b <ATA::open(int, int, void*)+0x1d3>
c001f96b:	83 ec 0c             	sub    esp,0xc
c001f96e:	6a 08                	push   0x8
c001f970:	e8 3b 09 ff ff       	call   c00102b0 <Phys::allocateContiguousPages(int)>
c001f975:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f97b:	c7 04 24 3a 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c3a
c001f982:	e8 dd 75 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f987:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001f98e:	e8 36 3b ff ff       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c001f993:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f999:	6a 03                	push   0x3
c001f99b:	50                   	push   eax
c001f99c:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f9a2:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001f9a8:	e8 ff 41 ff ff       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c001f9ad:	83 c4 20             	add    esp,0x20
c001f9b0:	e8 1d 08 ff ff       	call   c00101d2 <Phys::allocatePage()>
c001f9b5:	83 ec 0c             	sub    esp,0xc
c001f9b8:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001f9be:	6a 01                	push   0x1
c001f9c0:	e8 04 3b ff ff       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c001f9c5:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001f9cb:	6a 03                	push   0x3
c001f9cd:	50                   	push   eax
c001f9ce:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001f9d4:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001f9da:	e8 cd 41 ff ff       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c001f9df:	83 c4 14             	add    esp,0x14
c001f9e2:	68 73 5c 02 c0       	push   0xc0025c73
c001f9e7:	e8 78 75 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f9ec:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001f9f3:	50                   	push   eax
c001f9f4:	6a 12                	push   0x12
c001f9f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9fd:	50                   	push   eax
c001f9fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa04:	e8 b7 e7 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa09:	83 c4 20             	add    esp,0x20
c001fa0c:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001fa12:	0f b6 c4             	movzx  eax,ah
c001fa15:	50                   	push   eax
c001fa16:	6a 13                	push   0x13
c001fa18:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa1f:	50                   	push   eax
c001fa20:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa26:	e8 95 e7 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa2b:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001fa32:	50                   	push   eax
c001fa33:	6a 14                	push   0x14
c001fa35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa3c:	50                   	push   eax
c001fa3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa43:	e8 78 e7 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa48:	83 c4 20             	add    esp,0x20
c001fa4b:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001fa52:	50                   	push   eax
c001fa53:	6a 15                	push   0x15
c001fa55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa5c:	50                   	push   eax
c001fa5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa63:	e8 58 e7 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa68:	83 c4 10             	add    esp,0x10
c001fa6b:	83 ec 0c             	sub    esp,0xc
c001fa6e:	53                   	push   ebx
c001fa6f:	e8 d2 a3 fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c001fa74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa77:	e8 6a b2 fe ff       	call   c000ace6 <createPartitionsForDisk(PhysicalDisk*)>
c001fa7c:	31 c0                	xor    eax,eax
c001fa7e:	83 c4 18             	add    esp,0x18
c001fa81:	5b                   	pop    ebx
c001fa82:	c3                   	ret    

c001fa83 <combineCharAndColour(char, unsigned char)>:
c001fa83:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fa88:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001fa8e:	c1 e0 08             	shl    eax,0x8
c001fa91:	09 d0                	or     eax,edx
c001fa93:	c3                   	ret    

c001fa94 <combineColours(unsigned char, unsigned char)>:
c001fa94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fa99:	c1 e0 04             	shl    eax,0x4
c001fa9c:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001faa0:	c3                   	ret    
c001faa1:	90                   	nop

c001faa2 <ATAPI::write(unsigned long long, int, void*)>:
c001faa2:	b8 03 00 00 00       	mov    eax,0x3
c001faa7:	c3                   	ret    

c001faa8 <ATAPI::close(int, int, void*)>:
c001faa8:	83 ec 0c             	sub    esp,0xc
c001faab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faaf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fab5:	85 c0                	test   eax,eax
c001fab7:	74 0c                	je     c001fac5 <ATAPI::close(int, int, void*)+0x1d>
c001fab9:	83 ec 0c             	sub    esp,0xc
c001fabc:	8b 10                	mov    edx,DWORD PTR [eax]
c001fabe:	50                   	push   eax
c001fabf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fac2:	83 c4 10             	add    esp,0x10
c001fac5:	31 c0                	xor    eax,eax
c001fac7:	83 c4 0c             	add    esp,0xc
c001faca:	c3                   	ret    
c001facb:	90                   	nop

c001facc <ATAPI::ATAPI()>:
c001facc:	83 ec 0c             	sub    esp,0xc
c001facf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad3:	83 ec 04             	sub    esp,0x4
c001fad6:	68 00 08 00 00       	push   0x800
c001fadb:	68 25 5e 02 c0       	push   0xc0025e25
c001fae0:	50                   	push   eax
c001fae1:	e8 f8 a2 fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fae6:	83 c4 10             	add    esp,0x10
c001fae9:	ba 34 5d 02 c0       	mov    edx,0xc0025d34
c001faee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf2:	89 10                	mov    DWORD PTR [eax],edx
c001faf4:	90                   	nop
c001faf5:	83 c4 0c             	add    esp,0xc
c001faf8:	c3                   	ret    
c001faf9:	90                   	nop

c001fafa <ATAPI::readyForCommand()>:
c001fafa:	56                   	push   esi
c001fafb:	53                   	push   ebx
c001fafc:	31 db                	xor    ebx,ebx
c001fafe:	50                   	push   eax
c001faff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb03:	50                   	push   eax
c001fb04:	6a 0c                	push   0xc
c001fb06:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fb0d:	50                   	push   eax
c001fb0e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fb14:	e8 67 e7 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001fb19:	83 c4 10             	add    esp,0x10
c001fb1c:	a8 88                	test   al,0x88
c001fb1e:	74 26                	je     c001fb46 <ATAPI::readyForCommand()+0x4c>
c001fb20:	43                   	inc    ebx
c001fb21:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fb27:	7e da                	jle    c001fb03 <ATAPI::readyForCommand()+0x9>
c001fb29:	51                   	push   ecx
c001fb2a:	51                   	push   ecx
c001fb2b:	6a 00                	push   0x0
c001fb2d:	68 5e 01 00 00       	push   0x15e
c001fb32:	e8 e9 75 ff ff       	call   c0017120 <milliTenthSleep(unsigned long long)>
c001fb37:	83 c4 10             	add    esp,0x10
c001fb3a:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fb40:	75 c1                	jne    c001fb03 <ATAPI::readyForCommand()+0x9>
c001fb42:	31 c0                	xor    eax,eax
c001fb44:	eb 02                	jmp    c001fb48 <ATAPI::readyForCommand()+0x4e>
c001fb46:	b0 01                	mov    al,0x1
c001fb48:	5a                   	pop    edx
c001fb49:	5b                   	pop    ebx
c001fb4a:	5e                   	pop    esi
c001fb4b:	c3                   	ret    

c001fb4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fb4c:	55                   	push   ebp
c001fb4d:	57                   	push   edi
c001fb4e:	56                   	push   esi
c001fb4f:	53                   	push   ebx
c001fb50:	83 ec 20             	sub    esp,0x20
c001fb53:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fb57:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fb5b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fb5f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fb63:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fb67:	6a 01                	push   0x1
c001fb69:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb70:	50                   	push   eax
c001fb71:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb77:	e8 4e e8 ff ff       	call   c001e3ca <IDE::enableIRQs(unsigned char, bool)>
c001fb7c:	5e                   	pop    esi
c001fb7d:	58                   	pop    eax
c001fb7e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb85:	50                   	push   eax
c001fb86:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb8c:	e8 09 e6 ff ff       	call   c001e19a <IDE::prepareInterrupt(unsigned char)>
c001fb91:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fb94:	e8 61 ff ff ff       	call   c001fafa <ATAPI::readyForCommand()>
c001fb99:	83 c4 10             	add    esp,0x10
c001fb9c:	84 c0                	test   al,al
c001fb9e:	75 0a                	jne    c001fbaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fba0:	bb 01 00 00 00       	mov    ebx,0x1
c001fba5:	e9 60 02 00 00       	jmp    c001fe0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001fbaa:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001fbb0:	c1 e0 04             	shl    eax,0x4
c001fbb3:	0f b6 c0             	movzx  eax,al
c001fbb6:	50                   	push   eax
c001fbb7:	6a 06                	push   0x6
c001fbb9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbc0:	50                   	push   eax
c001fbc1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbc7:	e8 f4 e5 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbcc:	6a 00                	push   0x0
c001fbce:	6a 01                	push   0x1
c001fbd0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbd7:	50                   	push   eax
c001fbd8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbde:	e8 dd e5 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbe3:	83 c4 20             	add    esp,0x20
c001fbe6:	0f b6 c3             	movzx  eax,bl
c001fbe9:	0f b6 df             	movzx  ebx,bh
c001fbec:	50                   	push   eax
c001fbed:	6a 04                	push   0x4
c001fbef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbf6:	50                   	push   eax
c001fbf7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbfd:	e8 be e5 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc02:	53                   	push   ebx
c001fc03:	6a 05                	push   0x5
c001fc05:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc0c:	50                   	push   eax
c001fc0d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc13:	e8 a8 e5 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc18:	83 c4 20             	add    esp,0x20
c001fc1b:	68 a0 00 00 00       	push   0xa0
c001fc20:	6a 07                	push   0x7
c001fc22:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc29:	50                   	push   eax
c001fc2a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc30:	e8 8b e5 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc35:	83 c4 0c             	add    esp,0xc
c001fc38:	6a 01                	push   0x1
c001fc3a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc41:	50                   	push   eax
c001fc42:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc48:	e8 19 f3 ff ff       	call   c001ef66 <IDE::polling(unsigned char, unsigned int)>
c001fc4d:	83 c4 10             	add    esp,0x10
c001fc50:	0f b6 d8             	movzx  ebx,al
c001fc53:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001fc59:	85 db                	test   ebx,ebx
c001fc5b:	74 20                	je     c001fc7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fc5d:	53                   	push   ebx
c001fc5e:	0f b6 c0             	movzx  eax,al
c001fc61:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001fc68:	52                   	push   edx
c001fc69:	50                   	push   eax
c001fc6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc70:	e8 37 f2 ff ff       	call   c001eeac <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fc75:	83 c4 10             	add    esp,0x10
c001fc78:	e9 8d 01 00 00       	jmp    c001fe0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001fc7d:	0f b6 c0             	movzx  eax,al
c001fc80:	53                   	push   ebx
c001fc81:	53                   	push   ebx
c001fc82:	50                   	push   eax
c001fc83:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc89:	e8 20 e5 ff ff       	call   c001e1ae <IDE::getBase(unsigned char)>
c001fc8e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fc92:	b9 06 00 00 00       	mov    ecx,0x6
c001fc97:	89 c2                	mov    edx,eax
c001fc99:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fc9c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fca0:	83 c4 10             	add    esp,0x10
c001fca3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001fca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fcac:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fcb2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fcb9:	85 db                	test   ebx,ebx
c001fcbb:	0f 84 ec 00 00 00    	je     c001fdad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001fcc1:	51                   	push   ecx
c001fcc2:	51                   	push   ecx
c001fcc3:	52                   	push   edx
c001fcc4:	50                   	push   eax
c001fcc5:	e8 64 e6 ff ff       	call   c001e32e <IDE::waitInterrupt(unsigned char)>
c001fcca:	83 c4 10             	add    esp,0x10
c001fccd:	84 c0                	test   al,al
c001fccf:	0f 84 cb fe ff ff    	je     c001fba0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fcd5:	56                   	push   esi
c001fcd6:	56                   	push   esi
c001fcd7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcde:	50                   	push   eax
c001fcdf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fce5:	e8 b0 e4 ff ff       	call   c001e19a <IDE::prepareInterrupt(unsigned char)>
c001fcea:	83 c4 0c             	add    esp,0xc
c001fced:	6a 04                	push   0x4
c001fcef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcf6:	50                   	push   eax
c001fcf7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcfd:	e8 7e e5 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001fd02:	83 c4 0c             	add    esp,0xc
c001fd05:	89 c6                	mov    esi,eax
c001fd07:	6a 05                	push   0x5
c001fd09:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd10:	50                   	push   eax
c001fd11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd17:	e8 64 e5 ff ff       	call   c001e280 <IDE::read(unsigned char, unsigned char)>
c001fd1c:	89 f1                	mov    ecx,esi
c001fd1e:	0f b6 c0             	movzx  eax,al
c001fd21:	0f b6 f1             	movzx  esi,cl
c001fd24:	c1 e0 08             	shl    eax,0x8
c001fd27:	09 c6                	or     esi,eax
c001fd29:	d1 fe                	sar    esi,1
c001fd2b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fd2f:	83 c4 10             	add    esp,0x10
c001fd32:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd37:	74 41                	je     c001fd7a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001fd39:	31 c9                	xor    ecx,ecx
c001fd3b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd41:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fd48:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fd4c:	75 0a                	jne    c001fd58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001fd4e:	01 c9                	add    ecx,ecx
c001fd50:	01 cd                	add    ebp,ecx
c001fd52:	4b                   	dec    ebx
c001fd53:	e9 54 ff ff ff       	jmp    c001fcac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001fd58:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fd5d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fd61:	51                   	push   ecx
c001fd62:	51                   	push   ecx
c001fd63:	52                   	push   edx
c001fd64:	50                   	push   eax
c001fd65:	e8 44 e4 ff ff       	call   c001e1ae <IDE::getBase(unsigned char)>
c001fd6a:	89 c2                	mov    edx,eax
c001fd6c:	89 f0                	mov    eax,esi
c001fd6e:	66 ef                	out    dx,ax
c001fd70:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fd74:	83 c4 10             	add    esp,0x10
c001fd77:	41                   	inc    ecx
c001fd78:	eb c1                	jmp    c001fd3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001fd7a:	31 f6                	xor    esi,esi
c001fd7c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd82:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fd89:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fd8d:	75 06                	jne    c001fd95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001fd8f:	01 f6                	add    esi,esi
c001fd91:	01 f5                	add    ebp,esi
c001fd93:	eb bd                	jmp    c001fd52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001fd95:	51                   	push   ecx
c001fd96:	51                   	push   ecx
c001fd97:	52                   	push   edx
c001fd98:	50                   	push   eax
c001fd99:	e8 10 e4 ff ff       	call   c001e1ae <IDE::getBase(unsigned char)>
c001fd9e:	89 c2                	mov    edx,eax
c001fda0:	66 ed                	in     ax,dx
c001fda2:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fda7:	83 c4 10             	add    esp,0x10
c001fdaa:	46                   	inc    esi
c001fdab:	eb cf                	jmp    c001fd7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001fdad:	51                   	push   ecx
c001fdae:	51                   	push   ecx
c001fdaf:	52                   	push   edx
c001fdb0:	50                   	push   eax
c001fdb1:	e8 78 e5 ff ff       	call   c001e32e <IDE::waitInterrupt(unsigned char)>
c001fdb6:	83 c4 10             	add    esp,0x10
c001fdb9:	84 c0                	test   al,al
c001fdbb:	0f 84 df fd ff ff    	je     c001fba0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fdc1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fdc6:	52                   	push   edx
c001fdc7:	52                   	push   edx
c001fdc8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdcf:	50                   	push   eax
c001fdd0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdd6:	e8 bf e3 ff ff       	call   c001e19a <IDE::prepareInterrupt(unsigned char)>
c001fddb:	83 c4 10             	add    esp,0x10
c001fdde:	50                   	push   eax
c001fddf:	50                   	push   eax
c001fde0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fde7:	50                   	push   eax
c001fde8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdee:	e8 bb e3 ff ff       	call   c001e1ae <IDE::getBase(unsigned char)>
c001fdf3:	8d 50 07             	lea    edx,[eax+0x7]
c001fdf6:	ec                   	in     al,dx
c001fdf7:	83 c4 10             	add    esp,0x10
c001fdfa:	a8 88                	test   al,0x88
c001fdfc:	74 0a                	je     c001fe08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001fdfe:	4b                   	dec    ebx
c001fdff:	75 dd                	jne    c001fdde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001fe01:	bb 02 00 00 00       	mov    ebx,0x2
c001fe06:	eb 02                	jmp    c001fe0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001fe08:	31 db                	xor    ebx,ebx
c001fe0a:	83 c4 1c             	add    esp,0x1c
c001fe0d:	89 d8                	mov    eax,ebx
c001fe0f:	5b                   	pop    ebx
c001fe10:	5e                   	pop    esi
c001fe11:	5f                   	pop    edi
c001fe12:	5d                   	pop    ebp
c001fe13:	c3                   	ret    

c001fe14 <ATAPI::diskRemoved()>:
c001fe14:	53                   	push   ebx
c001fe15:	83 ec 14             	sub    esp,0x14
c001fe18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fe1c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fe23:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001fe29:	e8 a8 ab fe ff       	call   c000a9d6 <LogicalDisk::unmount()>
c001fe2e:	58                   	pop    eax
c001fe2f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fe35:	e8 7a b5 fe ff       	call   c000b3b4 <VCache::writeWriteBuffer()>
c001fe3a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001fe40:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fe44:	83 c4 18             	add    esp,0x18
c001fe47:	5b                   	pop    ebx
c001fe48:	e9 57 b5 fe ff       	jmp    c000b3a4 <VCache::invalidateReadBuffer()>
c001fe4d:	90                   	nop

c001fe4e <ATAPI::eject()>:
c001fe4e:	57                   	push   edi
c001fe4f:	b9 03 00 00 00       	mov    ecx,0x3
c001fe54:	53                   	push   ebx
c001fe55:	83 ec 14             	sub    esp,0x14
c001fe58:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fe5c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fe60:	fc                   	cld    
c001fe61:	31 c0                	xor    eax,eax
c001fe63:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fe65:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fe6a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fe6f:	50                   	push   eax
c001fe70:	50                   	push   eax
c001fe71:	6a 00                	push   0x0
c001fe73:	6a 00                	push   0x0
c001fe75:	6a 00                	push   0x0
c001fe77:	6a 02                	push   0x2
c001fe79:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fe7d:	50                   	push   eax
c001fe7e:	53                   	push   ebx
c001fe7f:	e8 c8 fc ff ff       	call   c001fb4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fe84:	83 c4 14             	add    esp,0x14
c001fe87:	53                   	push   ebx
c001fe88:	e8 87 ff ff ff       	call   c001fe14 <ATAPI::diskRemoved()>
c001fe8d:	83 c4 24             	add    esp,0x24
c001fe90:	31 c0                	xor    eax,eax
c001fe92:	5b                   	pop    ebx
c001fe93:	5f                   	pop    edi
c001fe94:	c3                   	ret    
c001fe95:	90                   	nop

c001fe96 <ATAPI::diskInserted()>:
c001fe96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe9a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001fea1:	c3                   	ret    

c001fea2 <ATAPI::detectMedia()>:
c001fea2:	56                   	push   esi
c001fea3:	53                   	push   ebx
c001fea4:	83 ec 28             	sub    esp,0x28
c001fea7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001feab:	6a 0c                	push   0xc
c001fead:	6a 00                	push   0x0
c001feaf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001feb3:	56                   	push   esi
c001feb4:	e8 37 06 fe ff       	call   c00004f0 <memset>
c001feb9:	58                   	pop    eax
c001feba:	5a                   	pop    edx
c001febb:	6a 00                	push   0x0
c001febd:	6a 00                	push   0x0
c001febf:	6a 00                	push   0x0
c001fec1:	6a 00                	push   0x0
c001fec3:	56                   	push   esi
c001fec4:	53                   	push   ebx
c001fec5:	e8 82 fc ff ff       	call   c001fb4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001feca:	83 c4 1c             	add    esp,0x1c
c001fecd:	6a 0c                	push   0xc
c001fecf:	6a 00                	push   0x0
c001fed1:	56                   	push   esi
c001fed2:	e8 19 06 fe ff       	call   c00004f0 <memset>
c001fed7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001fedc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001fee1:	59                   	pop    ecx
c001fee2:	58                   	pop    eax
c001fee3:	6a 01                	push   0x1
c001fee5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fee9:	50                   	push   eax
c001feea:	6a 00                	push   0x0
c001feec:	6a 12                	push   0x12
c001feee:	56                   	push   esi
c001feef:	53                   	push   ebx
c001fef0:	e8 57 fc ff ff       	call   c001fb4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fef5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001fef9:	83 c4 20             	add    esp,0x20
c001fefc:	83 e0 7f             	and    eax,0x7f
c001feff:	83 f8 70             	cmp    eax,0x70
c001ff02:	74 15                	je     c001ff19 <ATAPI::detectMedia()+0x77>
c001ff04:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff0b:	75 0c                	jne    c001ff19 <ATAPI::detectMedia()+0x77>
c001ff0d:	83 ec 0c             	sub    esp,0xc
c001ff10:	53                   	push   ebx
c001ff11:	e8 80 ff ff ff       	call   c001fe96 <ATAPI::diskInserted()>
c001ff16:	83 c4 10             	add    esp,0x10
c001ff19:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ff1d:	83 e0 0f             	and    eax,0xf
c001ff20:	83 f8 02             	cmp    eax,0x2
c001ff23:	75 1b                	jne    c001ff40 <ATAPI::detectMedia()+0x9e>
c001ff25:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ff2a:	75 2d                	jne    c001ff59 <ATAPI::detectMedia()+0xb7>
c001ff2c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff33:	74 24                	je     c001ff59 <ATAPI::detectMedia()+0xb7>
c001ff35:	83 ec 0c             	sub    esp,0xc
c001ff38:	53                   	push   ebx
c001ff39:	e8 d6 fe ff ff       	call   c001fe14 <ATAPI::diskRemoved()>
c001ff3e:	eb 16                	jmp    c001ff56 <ATAPI::detectMedia()+0xb4>
c001ff40:	85 c0                	test   eax,eax
c001ff42:	75 15                	jne    c001ff59 <ATAPI::detectMedia()+0xb7>
c001ff44:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff4b:	75 0c                	jne    c001ff59 <ATAPI::detectMedia()+0xb7>
c001ff4d:	83 ec 0c             	sub    esp,0xc
c001ff50:	53                   	push   ebx
c001ff51:	e8 40 ff ff ff       	call   c001fe96 <ATAPI::diskInserted()>
c001ff56:	83 c4 10             	add    esp,0x10
c001ff59:	83 c4 24             	add    esp,0x24
c001ff5c:	5b                   	pop    ebx
c001ff5d:	5e                   	pop    esi
c001ff5e:	c3                   	ret    
c001ff5f:	90                   	nop

c001ff60 <ATAPI::open(int, int, void*)>:
c001ff60:	56                   	push   esi
c001ff61:	53                   	push   ebx
c001ff62:	50                   	push   eax
c001ff63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ff6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ff6f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ff75:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ff7b:	c1 e0 06             	shl    eax,0x6
c001ff7e:	01 d0                	add    eax,edx
c001ff80:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ff87:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ff8d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ff94:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ff9e:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ffa4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ffab:	6a 04                	push   0x4
c001ffad:	6a 0c                	push   0xc
c001ffaf:	51                   	push   ecx
c001ffb0:	52                   	push   edx
c001ffb1:	e8 0a e2 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffb6:	90                   	nop
c001ffb7:	90                   	nop
c001ffb8:	6a 00                	push   0x0
c001ffba:	6a 0c                	push   0xc
c001ffbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffc3:	50                   	push   eax
c001ffc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffca:	e8 f1 e1 ff ff       	call   c001e1c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffcf:	83 c4 14             	add    esp,0x14
c001ffd2:	68 78 01 00 00       	push   0x178
c001ffd7:	e8 bb fc fe ff       	call   c000fc97 <malloc>
c001ffdc:	83 c4 0c             	add    esp,0xc
c001ffdf:	89 c6                	mov    esi,eax
c001ffe1:	6a 00                	push   0x0
c001ffe3:	68 ff ff ff 7f       	push   0x7fffffff
c001ffe8:	6a 00                	push   0x0
c001ffea:	6a 00                	push   0x0
c001ffec:	53                   	push   ebx
c001ffed:	68 d7 5e 02 c0       	push   0xc0025ed7
c001fff2:	50                   	push   eax
c001fff3:	e8 1c a8 fe ff       	call   c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001fff8:	83 c4 14             	add    esp,0x14
c001fffb:	56                   	push   esi
c001fffc:	e8 d3 a8 fe ff       	call   c000a8d4 <LogicalDisk::assignDriveLetter()>
c0020001:	5a                   	pop    edx
c0020002:	0f be c0             	movsx  eax,al
c0020005:	59                   	pop    ecx
c0020006:	50                   	push   eax
c0020007:	68 1c 5d 02 c0       	push   0xc0025d1c
c002000c:	e8 53 6f fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020011:	58                   	pop    eax
c0020012:	5a                   	pop    edx
c0020013:	56                   	push   esi
c0020014:	53                   	push   ebx
c0020015:	e8 e2 99 fe ff       	call   c00099fc <Device::addChild(Device*)>
c002001a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020020:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020023:	e8 1e 9e fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c0020028:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002002f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020032:	e8 6b fe ff ff       	call   c001fea2 <ATAPI::detectMedia()>
c0020037:	83 c4 14             	add    esp,0x14
c002003a:	31 c0                	xor    eax,eax
c002003c:	5b                   	pop    ebx
c002003d:	5e                   	pop    esi
c002003e:	c3                   	ret    
c002003f:	90                   	nop

c0020040 <ATAPI::read(unsigned long long, int, void*)>:
c0020040:	55                   	push   ebp
c0020041:	57                   	push   edi
c0020042:	56                   	push   esi
c0020043:	53                   	push   ebx
c0020044:	83 ec 1c             	sub    esp,0x1c
c0020047:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002004b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002004f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020053:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002005a:	74 3c                	je     c0020098 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002005c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020060:	b9 03 00 00 00       	mov    ecx,0x3
c0020065:	fc                   	cld    
c0020066:	31 c0                	xor    eax,eax
c0020068:	0f ce                	bswap  esi
c002006a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002006c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020071:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020075:	89 e8                	mov    eax,ebp
c0020077:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002007b:	50                   	push   eax
c002007c:	50                   	push   eax
c002007d:	55                   	push   ebp
c002007e:	c1 e5 0b             	shl    ebp,0xb
c0020081:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020085:	6a 00                	push   0x0
c0020087:	55                   	push   ebp
c0020088:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002008c:	50                   	push   eax
c002008d:	53                   	push   ebx
c002008e:	e8 b9 fa ff ff       	call   c001fb4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020093:	83 c4 20             	add    esp,0x20
c0020096:	eb 1a                	jmp    c00200b2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c0020098:	83 ec 0c             	sub    esp,0xc
c002009b:	53                   	push   ebx
c002009c:	e8 01 fe ff ff       	call   c001fea2 <ATAPI::detectMedia()>
c00200a1:	83 c4 10             	add    esp,0x10
c00200a4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00200ab:	75 af                	jne    c002005c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00200ad:	b8 02 00 00 00       	mov    eax,0x2
c00200b2:	83 c4 1c             	add    esp,0x1c
c00200b5:	5b                   	pop    ebx
c00200b6:	5e                   	pop    esi
c00200b7:	5f                   	pop    edi
c00200b8:	5d                   	pop    ebp
c00200b9:	c3                   	ret    

c00200ba <SATA::close(int, int, void*)>:
c00200ba:	83 ec 0c             	sub    esp,0xc
c00200bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00200c7:	85 c0                	test   eax,eax
c00200c9:	74 0c                	je     c00200d7 <SATA::close(int, int, void*)+0x1d>
c00200cb:	83 ec 0c             	sub    esp,0xc
c00200ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00200d0:	50                   	push   eax
c00200d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00200d4:	83 c4 10             	add    esp,0x10
c00200d7:	31 c0                	xor    eax,eax
c00200d9:	83 c4 0c             	add    esp,0xc
c00200dc:	c3                   	ret    
c00200dd:	90                   	nop

c00200de <SATA::powerSaving(PowerSavingLevel)>:
c00200de:	c3                   	ret    
c00200df:	90                   	nop

c00200e0 <SATA::open(int, int, void*)>:
c00200e0:	56                   	push   esi
c00200e1:	53                   	push   ebx
c00200e2:	83 ec 10             	sub    esp,0x10
c00200e5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00200e9:	68 64 5d 02 c0       	push   0xc0025d64
c00200ee:	e8 71 6e fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00200f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00200f7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020101:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020107:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020111:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020115:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002011f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020125:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002012c:	e8 a1 00 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0020131:	89 c6                	mov    esi,eax
c0020133:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020139:	81 c6 00 10 00 00    	add    esi,0x1000
c002013f:	e8 8e 00 ff ff       	call   c00101d2 <Phys::allocatePage()>
c0020144:	83 c4 10             	add    esp,0x10
c0020147:	39 c6                	cmp    esi,eax
c0020149:	74 10                	je     c002015b <SATA::open(int, int, void*)+0x7b>
c002014b:	83 ec 0c             	sub    esp,0xc
c002014e:	68 70 5d 02 c0       	push   0xc0025d70
c0020153:	e8 86 fe fe ff       	call   c000ffde <KePanic(char const*)>
c0020158:	83 c4 10             	add    esp,0x10
c002015b:	83 ec 0c             	sub    esp,0xc
c002015e:	6a 02                	push   0x2
c0020160:	e8 64 33 ff ff       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c0020165:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002016b:	6a 03                	push   0x3
c002016d:	50                   	push   eax
c002016e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020174:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c002017a:	e8 2d 3a ff ff       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c002017f:	83 c4 14             	add    esp,0x14
c0020182:	53                   	push   ebx
c0020183:	e8 be 9c fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c0020188:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002018b:	e8 56 ab fe ff       	call   c000ace6 <createPartitionsForDisk(PhysicalDisk*)>
c0020190:	83 c4 14             	add    esp,0x14
c0020193:	31 c0                	xor    eax,eax
c0020195:	5b                   	pop    ebx
c0020196:	5e                   	pop    esi
c0020197:	c3                   	ret    

c0020198 <SATA::SATA()>:
c0020198:	83 ec 0c             	sub    esp,0xc
c002019b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019f:	83 ec 04             	sub    esp,0x4
c00201a2:	68 00 02 00 00       	push   0x200
c00201a7:	68 84 5d 02 c0       	push   0xc0025d84
c00201ac:	50                   	push   eax
c00201ad:	e8 2c 9c fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c00201b2:	83 c4 10             	add    esp,0x10
c00201b5:	ba f4 5d 02 c0       	mov    edx,0xc0025df4
c00201ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201be:	89 10                	mov    DWORD PTR [eax],edx
c00201c0:	90                   	nop
c00201c1:	83 c4 0c             	add    esp,0xc
c00201c4:	c3                   	ret    
c00201c5:	90                   	nop

c00201c6 <SATA::access(unsigned long long, int, void*, bool)>:
c00201c6:	55                   	push   ebp
c00201c7:	57                   	push   edi
c00201c8:	56                   	push   esi
c00201c9:	53                   	push   ebx
c00201ca:	83 ec 2c             	sub    esp,0x2c
c00201cd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00201d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00201d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00201d9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00201dd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00201e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00201e5:	fa                   	cli    
c00201e6:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00201ec:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00201f1:	7e 10                	jle    c0020203 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c00201f3:	83 ec 0c             	sub    esp,0xc
c00201f6:	68 94 5d 02 c0       	push   0xc0025d94
c00201fb:	e8 de fd fe ff       	call   c000ffde <KePanic(char const*)>
c0020200:	83 c4 10             	add    esp,0x10
c0020203:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020209:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002020f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020215:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020219:	89 d0                	mov    eax,edx
c002021b:	c1 e0 07             	shl    eax,0x7
c002021e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020222:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002022c:	51                   	push   ecx
c002022d:	8d 42 02             	lea    eax,[edx+0x2]
c0020230:	51                   	push   ecx
c0020231:	c1 e0 07             	shl    eax,0x7
c0020234:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020238:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002023c:	50                   	push   eax
c002023d:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020243:	e8 fe ed ff ff       	call   c001f046 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020248:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002024c:	83 c4 10             	add    esp,0x10
c002024f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020254:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020258:	0f 84 a4 01 00 00    	je     c0020402 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c002025e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020262:	c1 e0 09             	shl    eax,0x9
c0020265:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002026a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002026e:	74 0e                	je     c002027e <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0020270:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020276:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002027a:	89 c1                	mov    ecx,eax
c002027c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002027e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020288:	8d 42 02             	lea    eax,[edx+0x2]
c002028b:	c1 e0 07             	shl    eax,0x7
c002028e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020292:	8b 00                	mov    eax,DWORD PTR [eax]
c0020294:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002029a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00202a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00202a4:	c1 e1 05             	shl    ecx,0x5
c00202a7:	01 c8                	add    eax,ecx
c00202a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00202ad:	83 e1 01             	and    ecx,0x1
c00202b0:	89 ce                	mov    esi,ecx
c00202b2:	8a 08                	mov    cl,BYTE PTR [eax]
c00202b4:	c1 e6 06             	shl    esi,0x6
c00202b7:	83 e1 bf             	and    ecx,0xffffffbf
c00202ba:	09 f1                	or     ecx,esi
c00202bc:	88 08                	mov    BYTE PTR [eax],cl
c00202be:	8b 08                	mov    ecx,DWORD PTR [eax]
c00202c0:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00202c6:	81 c9 05 00 01 00    	or     ecx,0x10005
c00202cc:	89 08                	mov    DWORD PTR [eax],ecx
c00202ce:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00202d4:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00202da:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00202e0:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00202e3:	50                   	push   eax
c00202e4:	68 90 00 00 00       	push   0x90
c00202e9:	6a 00                	push   0x0
c00202eb:	56                   	push   esi
c00202ec:	e8 ff 01 fe ff       	call   c00004f0 <memset>
c00202f1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00202f7:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00202fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020301:	83 c4 10             	add    esp,0x10
c0020304:	48                   	dec    eax
c0020305:	25 ff ff 3f 00       	and    eax,0x3fffff
c002030a:	89 c1                	mov    ecx,eax
c002030c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020312:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020317:	09 c8                	or     eax,ecx
c0020319:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002031f:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020325:	83 c8 80             	or     eax,0xffffff80
c0020328:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002032e:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020331:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020335:	25 00 7f 00 00       	and    eax,0x7f00
c002033a:	0d 27 80 ff ff       	or     eax,0xffff8027
c002033f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020344:	66 89 06             	mov    WORD PTR [esi],ax
c0020347:	b0 35                	mov    al,0x35
c0020349:	75 02                	jne    c002034d <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002034b:	b0 25                	mov    al,0x25
c002034d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020350:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0020354:	89 e8                	mov    eax,ebp
c0020356:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002035a:	c1 e8 10             	shr    eax,0x10
c002035d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020360:	89 e8                	mov    eax,ebp
c0020362:	c1 e8 18             	shr    eax,0x18
c0020365:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020368:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002036c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002036f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020373:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020376:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002037a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002037e:	89 d6                	mov    esi,edx
c0020380:	31 c0                	xor    eax,eax
c0020382:	c1 e6 07             	shl    esi,0x7
c0020385:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0020389:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002038f:	80 e1 88             	and    cl,0x88
c0020392:	74 0a                	je     c002039e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020394:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020399:	74 0a                	je     c00203a5 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002039b:	40                   	inc    eax
c002039c:	eb eb                	jmp    c0020389 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002039e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00203a3:	75 0a                	jne    c00203af <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c00203a5:	83 ec 0c             	sub    esp,0xc
c00203a8:	68 cd 5d 02 c0       	push   0xc0025dcd
c00203ad:	eb 36                	jmp    c00203e5 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c00203af:	b8 01 00 00 00       	mov    eax,0x1
c00203b4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00203b8:	c1 e2 07             	shl    edx,0x7
c00203bb:	d3 e0                	shl    eax,cl
c00203bd:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00203c1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00203c7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00203cd:	85 c8                	test   eax,ecx
c00203cf:	74 25                	je     c00203f6 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c00203d1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00203d7:	0f ba e1 1e          	bt     ecx,0x1e
c00203db:	73 ea                	jae    c00203c7 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c00203dd:	83 ec 0c             	sub    esp,0xc
c00203e0:	68 db 5d 02 c0       	push   0xc0025ddb
c00203e5:	e8 7a 6b fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00203ea:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00203f1:	83 c4 10             	add    esp,0x10
c00203f4:	eb 13                	jmp    c0020409 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c00203f6:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00203fc:	0f ba e0 1e          	bt     eax,0x1e
c0020400:	73 18                	jae    c002041a <SATA::access(unsigned long long, int, void*, bool)+0x254>
c0020402:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020409:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0020410:	75 01                	jne    c0020413 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c0020412:	fb                   	sti    
c0020413:	b8 01 00 00 00       	mov    eax,0x1
c0020418:	eb 2c                	jmp    c0020446 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002041a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002041f:	75 10                	jne    c0020431 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c0020421:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020427:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002042b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002042f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020431:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020438:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c002043d:	85 c0                	test   eax,eax
c002043f:	75 03                	jne    c0020444 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020441:	fb                   	sti    
c0020442:	eb 02                	jmp    c0020446 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020444:	31 c0                	xor    eax,eax
c0020446:	83 c4 2c             	add    esp,0x2c
c0020449:	5b                   	pop    ebx
c002044a:	5e                   	pop    esi
c002044b:	5f                   	pop    edi
c002044c:	5d                   	pop    ebp
c002044d:	c3                   	ret    

c002044e <SATA::read(unsigned long long, int, void*)>:
c002044e:	57                   	push   edi
c002044f:	b8 04 00 00 00       	mov    eax,0x4
c0020454:	56                   	push   esi
c0020455:	53                   	push   ebx
c0020456:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002045a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002045e:	8d 7a ff             	lea    edi,[edx-0x1]
c0020461:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020465:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020469:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002046f:	77 25                	ja     c0020496 <SATA::read(unsigned long long, int, void*)+0x48>
c0020471:	b8 06 00 00 00       	mov    eax,0x6
c0020476:	85 f6                	test   esi,esi
c0020478:	74 1c                	je     c0020496 <SATA::read(unsigned long long, int, void*)+0x48>
c002047a:	50                   	push   eax
c002047b:	50                   	push   eax
c002047c:	6a 00                	push   0x0
c002047e:	56                   	push   esi
c002047f:	52                   	push   edx
c0020480:	53                   	push   ebx
c0020481:	51                   	push   ecx
c0020482:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020486:	e8 3b fd ff ff       	call   c00201c6 <SATA::access(unsigned long long, int, void*, bool)>
c002048b:	83 c4 20             	add    esp,0x20
c002048e:	85 c0                	test   eax,eax
c0020490:	0f 95 c0             	setne  al
c0020493:	0f b6 c0             	movzx  eax,al
c0020496:	5b                   	pop    ebx
c0020497:	5e                   	pop    esi
c0020498:	5f                   	pop    edi
c0020499:	c3                   	ret    

c002049a <SATA::write(unsigned long long, int, void*)>:
c002049a:	55                   	push   ebp
c002049b:	b8 04 00 00 00       	mov    eax,0x4
c00204a0:	57                   	push   edi
c00204a1:	56                   	push   esi
c00204a2:	53                   	push   ebx
c00204a3:	83 ec 0c             	sub    esp,0xc
c00204a6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00204aa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00204ae:	8d 73 ff             	lea    esi,[ebx-0x1]
c00204b1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00204b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00204b9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00204bf:	77 3d                	ja     c00204fe <SATA::write(unsigned long long, int, void*)+0x64>
c00204c1:	b8 06 00 00 00       	mov    eax,0x6
c00204c6:	85 ed                	test   ebp,ebp
c00204c8:	74 34                	je     c00204fe <SATA::write(unsigned long long, int, void*)+0x64>
c00204ca:	c1 e3 09             	shl    ebx,0x9
c00204cd:	01 eb                	add    ebx,ebp
c00204cf:	89 d6                	mov    esi,edx
c00204d1:	89 cf                	mov    edi,ecx
c00204d3:	83 c6 01             	add    esi,0x1
c00204d6:	83 d7 00             	adc    edi,0x0
c00204d9:	50                   	push   eax
c00204da:	50                   	push   eax
c00204db:	6a 01                	push   0x1
c00204dd:	55                   	push   ebp
c00204de:	81 c5 00 02 00 00    	add    ebp,0x200
c00204e4:	6a 01                	push   0x1
c00204e6:	51                   	push   ecx
c00204e7:	52                   	push   edx
c00204e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00204ec:	e8 d5 fc ff ff       	call   c00201c6 <SATA::access(unsigned long long, int, void*, bool)>
c00204f1:	83 c4 20             	add    esp,0x20
c00204f4:	89 f2                	mov    edx,esi
c00204f6:	89 f9                	mov    ecx,edi
c00204f8:	39 dd                	cmp    ebp,ebx
c00204fa:	75 d3                	jne    c00204cf <SATA::write(unsigned long long, int, void*)+0x35>
c00204fc:	31 c0                	xor    eax,eax
c00204fe:	83 c4 0c             	add    esp,0xc
c0020501:	5b                   	pop    ebx
c0020502:	5e                   	pop    esi
c0020503:	5f                   	pop    edi
c0020504:	5d                   	pop    ebp
c0020505:	c3                   	ret    

c0020506 <SATAPI::write(unsigned long long, int, void*)>:
c0020506:	b8 03 00 00 00       	mov    eax,0x3
c002050b:	c3                   	ret    

c002050c <SATAPI::close(int, int, void*)>:
c002050c:	83 ec 0c             	sub    esp,0xc
c002050f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020513:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020519:	85 c0                	test   eax,eax
c002051b:	74 0c                	je     c0020529 <SATAPI::close(int, int, void*)+0x1d>
c002051d:	83 ec 0c             	sub    esp,0xc
c0020520:	8b 10                	mov    edx,DWORD PTR [eax]
c0020522:	50                   	push   eax
c0020523:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020526:	83 c4 10             	add    esp,0x10
c0020529:	31 c0                	xor    eax,eax
c002052b:	83 c4 0c             	add    esp,0xc
c002052e:	c3                   	ret    
c002052f:	90                   	nop

c0020530 <SATAPI::SATAPI()>:
c0020530:	83 ec 0c             	sub    esp,0xc
c0020533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020537:	83 ec 04             	sub    esp,0x4
c002053a:	68 00 08 00 00       	push   0x800
c002053f:	68 24 5e 02 c0       	push   0xc0025e24
c0020544:	50                   	push   eax
c0020545:	e8 94 98 fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c002054a:	83 c4 10             	add    esp,0x10
c002054d:	ba 18 5f 02 c0       	mov    edx,0xc0025f18
c0020552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020556:	89 10                	mov    DWORD PTR [eax],edx
c0020558:	90                   	nop
c0020559:	83 c4 0c             	add    esp,0xc
c002055c:	c3                   	ret    
c002055d:	90                   	nop

c002055e <SATAPI::diskRemoved()>:
c002055e:	c3                   	ret    
c002055f:	90                   	nop

c0020560 <SATAPI::diskInserted()>:
c0020560:	83 ec 18             	sub    esp,0x18
c0020563:	68 30 5e 02 c0       	push   0xc0025e30
c0020568:	e8 f7 69 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c002056d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020571:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020578:	83 c4 1c             	add    esp,0x1c
c002057b:	c3                   	ret    

c002057c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002057c:	55                   	push   ebp
c002057d:	57                   	push   edi
c002057e:	56                   	push   esi
c002057f:	53                   	push   ebx
c0020580:	83 ec 34             	sub    esp,0x34
c0020583:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020587:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002058b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002058f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020593:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0020597:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002059d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00205a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00205a7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00205ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00205b1:	83 c0 02             	add    eax,0x2
c00205b4:	c1 e0 07             	shl    eax,0x7
c00205b7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00205bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205c3:	c1 e0 07             	shl    eax,0x7
c00205c6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00205ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00205ce:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00205d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00205dc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00205e2:	e8 5f ea ff ff       	call   c001f046 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00205e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00205eb:	83 c4 10             	add    esp,0x10
c00205ee:	b8 01 00 00 00       	mov    eax,0x1
c00205f3:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00205f8:	0f 84 57 02 00 00    	je     c0020855 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c00205fe:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020608:	8b 00                	mov    eax,DWORD PTR [eax]
c002060a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020610:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020616:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002061a:	c1 e1 05             	shl    ecx,0x5
c002061d:	01 c8                	add    eax,ecx
c002061f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020621:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020627:	81 c9 25 00 01 00    	or     ecx,0x10025
c002062d:	89 08                	mov    DWORD PTR [eax],ecx
c002062f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020635:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002063b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020641:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020644:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020647:	50                   	push   eax
c0020648:	68 90 00 00 00       	push   0x90
c002064d:	6a 00                	push   0x0
c002064f:	53                   	push   ebx
c0020650:	e8 9b fe fd ff       	call   c00004f0 <memset>
c0020655:	b9 0c 00 00 00       	mov    ecx,0xc
c002065a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002065e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020660:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020666:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002066a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020670:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020674:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020678:	48                   	dec    eax
c0020679:	25 ff ff 3f 00       	and    eax,0x3fffff
c002067e:	89 c1                	mov    ecx,eax
c0020680:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020686:	25 00 00 c0 ff       	and    eax,0xffc00000
c002068b:	09 c8                	or     eax,ecx
c002068d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020693:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020699:	83 c8 80             	or     eax,0xffffff80
c002069c:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c00206a2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00206a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00206a9:	25 00 7f 00 00       	and    eax,0x7f00
c00206ae:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00206b2:	0d 27 80 ff ff       	or     eax,0xffff8027
c00206b7:	66 89 03             	mov    WORD PTR [ebx],ax
c00206ba:	89 d0                	mov    eax,edx
c00206bc:	c1 ea 18             	shr    edx,0x18
c00206bf:	c1 e8 10             	shr    eax,0x10
c00206c2:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00206c5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00206c8:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00206cc:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00206cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206d3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00206d6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206da:	83 c4 10             	add    esp,0x10
c00206dd:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00206e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00206e5:	31 c0                	xor    eax,eax
c00206e7:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00206ed:	80 e1 88             	and    cl,0x88
c00206f0:	74 0a                	je     c00206fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c00206f2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00206f7:	74 0a                	je     c0020703 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c00206f9:	40                   	inc    eax
c00206fa:	eb eb                	jmp    c00206e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00206fc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020701:	75 43                	jne    c0020746 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0020703:	83 ec 0c             	sub    esp,0xc
c0020706:	68 48 5e 02 c0       	push   0xc0025e48
c002070b:	e8 54 68 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020710:	58                   	pop    eax
c0020711:	5a                   	pop    edx
c0020712:	68 5d 5e 02 c0       	push   0xc0025e5d
c0020717:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c002071d:	e8 70 21 ff ff       	call   c0012892 <VgaText::puts(char const*)>
c0020722:	59                   	pop    ecx
c0020723:	5b                   	pop    ebx
c0020724:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020728:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002072e:	e8 ad e9 ff ff       	call   c001f0e0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020733:	5e                   	pop    esi
c0020734:	5f                   	pop    edi
c0020735:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020739:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002073f:	e8 7c e9 ff ff       	call   c001f0c0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020744:	eb 48                	jmp    c002078e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c0020746:	be 01 00 00 00       	mov    esi,0x1
c002074b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002074f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020753:	d3 e6                	shl    esi,cl
c0020755:	c1 e7 07             	shl    edi,0x7
c0020758:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002075e:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c0020763:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020767:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002076d:	85 c6                	test   esi,eax
c002076f:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020775:	0f 84 a7 00 00 00    	je     c0020822 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c002077b:	0f ba e0 1e          	bt     eax,0x1e
c002077f:	73 1a                	jae    c002079b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c0020781:	83 ec 0c             	sub    esp,0xc
c0020784:	68 6f 5e 02 c0       	push   0xc0025e6f
c0020789:	e8 d6 67 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c002078e:	83 c4 10             	add    esp,0x10
c0020791:	b8 01 00 00 00       	mov    eax,0x1
c0020796:	e9 ba 00 00 00       	jmp    c0020855 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c002079b:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c00207a1:	83 f8 0d             	cmp    eax,0xd
c00207a4:	77 0b                	ja     c00207b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c00207a6:	50                   	push   eax
c00207a7:	50                   	push   eax
c00207a8:	6a 00                	push   0x0
c00207aa:	68 c8 00 00 00       	push   0xc8
c00207af:	eb 2a                	jmp    c00207db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c00207b1:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c00207b7:	83 f8 0d             	cmp    eax,0xd
c00207ba:	77 0b                	ja     c00207c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c00207bc:	51                   	push   ecx
c00207bd:	51                   	push   ecx
c00207be:	6a 00                	push   0x0
c00207c0:	68 58 02 00 00       	push   0x258
c00207c5:	eb 14                	jmp    c00207db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c00207c7:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c00207cd:	83 f8 06             	cmp    eax,0x6
c00207d0:	77 11                	ja     c00207e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c00207d2:	52                   	push   edx
c00207d3:	52                   	push   edx
c00207d4:	6a 00                	push   0x0
c00207d6:	68 dc 05 00 00       	push   0x5dc
c00207db:	e8 40 69 ff ff       	call   c0017120 <milliTenthSleep(unsigned long long)>
c00207e0:	83 c4 10             	add    esp,0x10
c00207e3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00207e7:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c00207ea:	75 06                	jne    c00207f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c00207ec:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c00207f0:	74 16                	je     c0020808 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c00207f2:	83 fb 06             	cmp    ebx,0x6
c00207f5:	77 11                	ja     c0020808 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c00207f7:	50                   	push   eax
c00207f8:	50                   	push   eax
c00207f9:	6a 00                	push   0x0
c00207fb:	68 c4 09 00 00       	push   0x9c4
c0020800:	e8 1b 69 ff ff       	call   c0017120 <milliTenthSleep(unsigned long long)>
c0020805:	83 c4 10             	add    esp,0x10
c0020808:	43                   	inc    ebx
c0020809:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002080f:	0f 85 52 ff ff ff    	jne    c0020767 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c0020815:	83 ec 0c             	sub    esp,0xc
c0020818:	68 82 5e 02 c0       	push   0xc0025e82
c002081d:	e9 67 ff ff ff       	jmp    c0020789 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0020822:	0f ba e0 1e          	bt     eax,0x1e
c0020826:	73 0d                	jae    c0020835 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c0020828:	83 ec 0c             	sub    esp,0xc
c002082b:	68 96 5e 02 c0       	push   0xc0025e96
c0020830:	e9 54 ff ff ff       	jmp    c0020789 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0020835:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002083a:	74 17                	je     c0020853 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c002083c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020841:	74 10                	je     c0020853 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0020843:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020849:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002084d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020851:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020853:	31 c0                	xor    eax,eax
c0020855:	83 c4 2c             	add    esp,0x2c
c0020858:	5b                   	pop    ebx
c0020859:	5e                   	pop    esi
c002085a:	5f                   	pop    edi
c002085b:	5d                   	pop    ebp
c002085c:	c3                   	ret    
c002085d:	90                   	nop

c002085e <SATAPI::eject()>:
c002085e:	57                   	push   edi
c002085f:	b9 03 00 00 00       	mov    ecx,0x3
c0020864:	83 ec 18             	sub    esp,0x18
c0020867:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002086b:	fc                   	cld    
c002086c:	31 c0                	xor    eax,eax
c002086e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020870:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020875:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002087a:	50                   	push   eax
c002087b:	6a 00                	push   0x0
c002087d:	6a 00                	push   0x0
c002087f:	6a 00                	push   0x0
c0020881:	6a 00                	push   0x0
c0020883:	6a 02                	push   0x2
c0020885:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020889:	50                   	push   eax
c002088a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002088e:	e8 e9 fc ff ff       	call   c002057c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020893:	31 c0                	xor    eax,eax
c0020895:	83 c4 38             	add    esp,0x38
c0020898:	5f                   	pop    edi
c0020899:	c3                   	ret    

c002089a <SATAPI::detectMedia()>:
c002089a:	53                   	push   ebx
c002089b:	83 ec 14             	sub    esp,0x14
c002089e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00208a2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00208a8:	e8 07 ab fe ff       	call   c000b3b4 <VCache::writeWriteBuffer()>
c00208ad:	59                   	pop    ecx
c00208ae:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00208b4:	e8 eb aa fe ff       	call   c000b3a4 <VCache::invalidateReadBuffer()>
c00208b9:	c7 04 24 ab 5e 02 c0 	mov    DWORD PTR [esp],0xc0025eab
c00208c0:	e8 9f 66 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00208c5:	83 c4 10             	add    esp,0x10
c00208c8:	31 c0                	xor    eax,eax
c00208ca:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c00208d1:	85 d2                	test   edx,edx
c00208d3:	74 0f                	je     c00208e4 <SATAPI::detectMedia()+0x4a>
c00208d5:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c00208db:	75 07                	jne    c00208e4 <SATAPI::detectMedia()+0x4a>
c00208dd:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c00208e4:	40                   	inc    eax
c00208e5:	83 f8 1a             	cmp    eax,0x1a
c00208e8:	75 e0                	jne    c00208ca <SATAPI::detectMedia()+0x30>
c00208ea:	83 c4 08             	add    esp,0x8
c00208ed:	5b                   	pop    ebx
c00208ee:	c3                   	ret    
c00208ef:	90                   	nop

c00208f0 <SATAPI::open(int, int, void*)>:
c00208f0:	56                   	push   esi
c00208f1:	53                   	push   ebx
c00208f2:	51                   	push   ecx
c00208f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00208f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208fb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020905:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002090b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020915:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020919:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020923:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020929:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020930:	e8 9d f8 fe ff       	call   c00101d2 <Phys::allocatePage()>
c0020935:	89 c6                	mov    esi,eax
c0020937:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002093d:	81 c6 00 10 00 00    	add    esi,0x1000
c0020943:	e8 8a f8 fe ff       	call   c00101d2 <Phys::allocatePage()>
c0020948:	39 c6                	cmp    esi,eax
c002094a:	74 10                	je     c002095c <SATAPI::open(int, int, void*)+0x6c>
c002094c:	83 ec 0c             	sub    esp,0xc
c002094f:	68 c0 5e 02 c0       	push   0xc0025ec0
c0020954:	e8 85 f6 fe ff       	call   c000ffde <KePanic(char const*)>
c0020959:	83 c4 10             	add    esp,0x10
c002095c:	83 ec 0c             	sub    esp,0xc
c002095f:	6a 02                	push   0x2
c0020961:	e8 63 2b ff ff       	call   c00134c9 <Virt::allocateKernelVirtualPages(int)>
c0020966:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002096c:	6a 03                	push   0x3
c002096e:	50                   	push   eax
c002096f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020975:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c002097b:	e8 2c 32 ff ff       	call   c0013bac <VAS::mapPage(unsigned long, unsigned long, int)>
c0020980:	83 c4 14             	add    esp,0x14
c0020983:	68 78 01 00 00       	push   0x178
c0020988:	e8 0a f3 fe ff       	call   c000fc97 <malloc>
c002098d:	83 c4 0c             	add    esp,0xc
c0020990:	89 c6                	mov    esi,eax
c0020992:	6a 00                	push   0x0
c0020994:	68 ff ff ff 7f       	push   0x7fffffff
c0020999:	6a 00                	push   0x0
c002099b:	6a 00                	push   0x0
c002099d:	53                   	push   ebx
c002099e:	68 d6 5e 02 c0       	push   0xc0025ed6
c00209a3:	50                   	push   eax
c00209a4:	e8 6b 9e fe ff       	call   c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00209a9:	83 c4 14             	add    esp,0x14
c00209ac:	56                   	push   esi
c00209ad:	e8 22 9f fe ff       	call   c000a8d4 <LogicalDisk::assignDriveLetter()>
c00209b2:	5a                   	pop    edx
c00209b3:	0f be c0             	movsx  eax,al
c00209b6:	59                   	pop    ecx
c00209b7:	50                   	push   eax
c00209b8:	68 1c 5d 02 c0       	push   0xc0025d1c
c00209bd:	e8 a2 65 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00209c2:	58                   	pop    eax
c00209c3:	5a                   	pop    edx
c00209c4:	56                   	push   esi
c00209c5:	53                   	push   ebx
c00209c6:	e8 31 90 fe ff       	call   c00099fc <Device::addChild(Device*)>
c00209cb:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00209d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00209d4:	e8 6d 94 fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c00209d9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00209e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00209e3:	e8 b2 fe ff ff       	call   c002089a <SATAPI::detectMedia()>
c00209e8:	83 c4 14             	add    esp,0x14
c00209eb:	31 c0                	xor    eax,eax
c00209ed:	5b                   	pop    ebx
c00209ee:	5e                   	pop    esi
c00209ef:	c3                   	ret    

c00209f0 <SATAPI::read(unsigned long long, int, void*)>:
c00209f0:	57                   	push   edi
c00209f1:	56                   	push   esi
c00209f2:	53                   	push   ebx
c00209f3:	83 ec 30             	sub    esp,0x30
c00209f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00209fa:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00209fe:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0020a02:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020a06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a0e:	83 fe 04             	cmp    esi,0x4
c0020a11:	7e 10                	jle    c0020a23 <SATAPI::read(unsigned long long, int, void*)+0x33>
c0020a13:	83 ec 0c             	sub    esp,0xc
c0020a16:	68 e4 5e 02 c0       	push   0xc0025ee4
c0020a1b:	e8 be f5 fe ff       	call   c000ffde <KePanic(char const*)>
c0020a20:	83 c4 10             	add    esp,0x10
c0020a23:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020a29:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020a2f:	51                   	push   ecx
c0020a30:	50                   	push   eax
c0020a31:	83 c0 02             	add    eax,0x2
c0020a34:	c1 e0 07             	shl    eax,0x7
c0020a37:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0020a3d:	50                   	push   eax
c0020a3e:	52                   	push   edx
c0020a3f:	e8 c6 e6 ff ff       	call   c001f10a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0020a44:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0020a48:	b9 03 00 00 00       	mov    ecx,0x3
c0020a4d:	fc                   	cld    
c0020a4e:	31 c0                	xor    eax,eax
c0020a50:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020a52:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0020a57:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0020a5c:	83 c4 0c             	add    esp,0xc
c0020a5f:	6a 00                	push   0x0
c0020a61:	6a 00                	push   0x0
c0020a63:	6a 00                	push   0x0
c0020a65:	6a 00                	push   0x0
c0020a67:	6a 02                	push   0x2
c0020a69:	8d 44 24 30          	lea    eax,[esp+0x30]
c0020a6d:	50                   	push   eax
c0020a6e:	53                   	push   ebx
c0020a6f:	e8 08 fb ff ff       	call   c002057c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020a74:	83 c4 20             	add    esp,0x20
c0020a77:	85 c0                	test   eax,eax
c0020a79:	75 44                	jne    c0020abf <SATAPI::read(unsigned long long, int, void*)+0xcf>
c0020a7b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020a7f:	b9 03 00 00 00       	mov    ecx,0x3
c0020a84:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020a86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a8a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0020a8f:	0f c8                	bswap  eax
c0020a91:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0020a95:	89 f0                	mov    eax,esi
c0020a97:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020a9b:	50                   	push   eax
c0020a9c:	56                   	push   esi
c0020a9d:	c1 e6 0b             	shl    esi,0xb
c0020aa0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0020aa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020aa8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020aac:	56                   	push   esi
c0020aad:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020ab1:	50                   	push   eax
c0020ab2:	53                   	push   ebx
c0020ab3:	e8 c4 fa ff ff       	call   c002057c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020ab8:	83 c4 20             	add    esp,0x20
c0020abb:	85 c0                	test   eax,eax
c0020abd:	74 14                	je     c0020ad3 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c0020abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020ac3:	83 ec 0c             	sub    esp,0xc
c0020ac6:	53                   	push   ebx
c0020ac7:	e8 ce fd ff ff       	call   c002089a <SATAPI::detectMedia()>
c0020acc:	83 c4 10             	add    esp,0x10
c0020acf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ad3:	83 c4 30             	add    esp,0x30
c0020ad6:	5b                   	pop    ebx
c0020ad7:	5e                   	pop    esi
c0020ad8:	5f                   	pop    edi
c0020ad9:	c3                   	ret    

c0020ada <IOAPIC::close(int, int, void*)>:
c0020ada:	b8 00 00 00 00       	mov    eax,0x0
c0020adf:	c3                   	ret    

c0020ae0 <apicGetBase()>:
c0020ae0:	55                   	push   ebp
c0020ae1:	89 e5                	mov    ebp,esp
c0020ae3:	83 ec 08             	sub    esp,0x8
c0020ae6:	83 ec 0c             	sub    esp,0xc
c0020ae9:	68 48 5f 02 c0       	push   0xc0025f48
c0020aee:	e8 eb f4 fe ff       	call   c000ffde <KePanic(char const*)>
c0020af3:	83 c4 10             	add    esp,0x10
c0020af6:	b8 00 00 00 00       	mov    eax,0x0
c0020afb:	c9                   	leave  
c0020afc:	c3                   	ret    
c0020afd:	90                   	nop

c0020afe <IOAPIC::IOAPIC()>:
c0020afe:	83 ec 0c             	sub    esp,0xc
c0020b01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b05:	83 ec 08             	sub    esp,0x8
c0020b08:	68 57 5f 02 c0       	push   0xc0025f57
c0020b0d:	50                   	push   eax
c0020b0e:	e8 4b 90 fe ff       	call   c0009b5e <Device::Device(char const*)>
c0020b13:	83 c4 10             	add    esp,0x10
c0020b16:	ba 78 5f 02 c0       	mov    edx,0xc0025f78
c0020b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b1f:	89 10                	mov    DWORD PTR [eax],edx
c0020b21:	90                   	nop
c0020b22:	83 c4 0c             	add    esp,0xc
c0020b25:	c3                   	ret    

c0020b26 <apicOpen()>:
c0020b26:	55                   	push   ebp
c0020b27:	89 e5                	mov    ebp,esp
c0020b29:	53                   	push   ebx
c0020b2a:	83 ec 34             	sub    esp,0x34
c0020b2d:	83 ec 0c             	sub    esp,0xc
c0020b30:	68 5f 5f 02 c0       	push   0xc0025f5f
c0020b35:	e8 2a 64 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020b3a:	83 c4 10             	add    esp,0x10
c0020b3d:	a0 a0 f4 02 c0       	mov    al,ds:0xc002f4a0
c0020b42:	83 f0 01             	xor    eax,0x1
c0020b45:	0f b6 c0             	movzx  eax,al
c0020b48:	85 c0                	test   eax,eax
c0020b4a:	0f 84 a3 00 00 00    	je     c0020bf3 <apicOpen()+0xcd>
c0020b50:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0020b54:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c0020b59:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020b5d:	0f b6 c0             	movzx  eax,al
c0020b60:	39 c2                	cmp    edx,eax
c0020b62:	0f 83 84 00 00 00    	jae    c0020bec <apicOpen()+0xc6>
c0020b68:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0020b6f:	83 ec 0c             	sub    esp,0xc
c0020b72:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020b75:	e8 1d f1 fe ff       	call   c000fc97 <malloc>
c0020b7a:	83 c4 10             	add    esp,0x10
c0020b7d:	89 c3                	mov    ebx,eax
c0020b7f:	83 ec 0c             	sub    esp,0xc
c0020b82:	53                   	push   ebx
c0020b83:	e8 76 ff ff ff       	call   c0020afe <IOAPIC::IOAPIC()>
c0020b88:	83 c4 10             	add    esp,0x10
c0020b8b:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0020b8e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0020b92:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020b95:	89 14 85 80 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b80],edx
c0020b9c:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c0020ba1:	83 c0 01             	add    eax,0x1
c0020ba4:	a3 60 f4 02 c0       	mov    ds:0xc002f460,eax
c0020ba9:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0020bae:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0020bb4:	83 ec 08             	sub    esp,0x8
c0020bb7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020bba:	50                   	push   eax
c0020bbb:	e8 3c 8e fe ff       	call   c00099fc <Device::addChild(Device*)>
c0020bc0:	83 c4 10             	add    esp,0x10
c0020bc3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020bc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bc8:	83 c0 08             	add    eax,0x8
c0020bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bcd:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020bd1:	6a 00                	push   0x0
c0020bd3:	6a 00                	push   0x0
c0020bd5:	52                   	push   edx
c0020bd6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020bd9:	ff d0                	call   eax
c0020bdb:	83 c4 10             	add    esp,0x10
c0020bde:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0020be1:	83 c0 01             	add    eax,0x1
c0020be4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0020be7:	e9 68 ff ff ff       	jmp    c0020b54 <apicOpen()+0x2e>
c0020bec:	c6 05 a0 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4a0,0x1
c0020bf3:	e8 e8 fe ff ff       	call   c0020ae0 <apicGetBase()>
c0020bf8:	05 f0 00 00 00       	add    eax,0xf0
c0020bfd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020c00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020c03:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c05:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0020c08:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0020c0f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0020c16:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020c19:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020c1c:	89 10                	mov    DWORD PTR [eax],edx
c0020c1e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0020c25:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0020c2a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0020c2d:	7d 7c                	jge    c0020cab <apicOpen()+0x185>
c0020c2f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020c32:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020c39:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0020c3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020c3f:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020c46:	c1 e8 08             	shr    eax,0x8
c0020c49:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0020c4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020c50:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020c57:	c1 e8 18             	shr    eax,0x18
c0020c5a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0020c5d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0020c61:	3d ff 00 00 00       	cmp    eax,0xff
c0020c66:	75 3a                	jne    c0020ca2 <apicOpen()+0x17c>
c0020c68:	e8 73 fe ff ff       	call   c0020ae0 <apicGetBase()>
c0020c6d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0020c71:	83 fa 01             	cmp    edx,0x1
c0020c74:	75 07                	jne    c0020c7d <apicOpen()+0x157>
c0020c76:	ba 60 03 00 00       	mov    edx,0x360
c0020c7b:	eb 05                	jmp    c0020c82 <apicOpen()+0x15c>
c0020c7d:	ba 50 03 00 00       	mov    edx,0x350
c0020c82:	01 d0                	add    eax,edx
c0020c84:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020c87:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020c8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c8c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0020c8f:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020c96:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0020c9a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020c9d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0020ca0:	89 10                	mov    DWORD PTR [eax],edx
c0020ca2:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0020ca6:	e9 7a ff ff ff       	jmp    c0020c25 <apicOpen()+0xff>
c0020cab:	90                   	nop
c0020cac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020caf:	c9                   	leave  
c0020cb0:	c3                   	ret    
c0020cb1:	90                   	nop

c0020cb2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020cb2:	55                   	push   ebp
c0020cb3:	89 e5                	mov    ebp,esp
c0020cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020cb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020cbe:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020cc1:	72 1d                	jb     c0020ce0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020cc6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ccf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020cd5:	01 d0                	add    eax,edx
c0020cd7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020cda:	73 04                	jae    c0020ce0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020cdc:	b0 01                	mov    al,0x1
c0020cde:	eb 02                	jmp    c0020ce2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020ce0:	b0 00                	mov    al,0x0
c0020ce2:	5d                   	pop    ebp
c0020ce3:	c3                   	ret    

c0020ce4 <IOAPIC::read(int)>:
c0020ce4:	55                   	push   ebp
c0020ce5:	89 e5                	mov    ebp,esp
c0020ce7:	83 ec 10             	sub    esp,0x10
c0020cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ced:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020cf3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020cf6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020cf9:	0f b6 d0             	movzx  edx,al
c0020cfc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020cff:	89 10                	mov    DWORD PTR [eax],edx
c0020d01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020d04:	83 c0 10             	add    eax,0x10
c0020d07:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d09:	c9                   	leave  
c0020d0a:	c3                   	ret    
c0020d0b:	90                   	nop

c0020d0c <IOAPIC::open(int, int, void*)>:
c0020d0c:	55                   	push   ebp
c0020d0d:	89 e5                	mov    ebp,esp
c0020d0f:	57                   	push   edi
c0020d10:	56                   	push   esi
c0020d11:	53                   	push   ebx
c0020d12:	83 ec 04             	sub    esp,0x4
c0020d15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d18:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020d1b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d24:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020d2a:	8b 14 85 80 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4180]
c0020d31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d34:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020d3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d3d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020d43:	8b 14 85 00 bf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4100]
c0020d4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d4d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020d53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d56:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d5f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020d65:	0f b6 f0             	movzx  esi,al
c0020d68:	89 d0                	mov    eax,edx
c0020d6a:	ba 00 00 00 00       	mov    edx,0x0
c0020d6f:	89 c7                	mov    edi,eax
c0020d71:	83 e7 ff             	and    edi,0xffffffff
c0020d74:	89 f9                	mov    ecx,edi
c0020d76:	0f b6 da             	movzx  ebx,dl
c0020d79:	89 c8                	mov    eax,ecx
c0020d7b:	89 da                	mov    edx,ebx
c0020d7d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020d80:	8d 5e 08             	lea    ebx,[esi+0x8]
c0020d83:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020d87:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020d8b:	83 e0 00             	and    eax,0x0
c0020d8e:	09 d0                	or     eax,edx
c0020d90:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020d94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d97:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020d9d:	8d 50 01             	lea    edx,[eax+0x1]
c0020da0:	88 d1                	mov    cl,dl
c0020da2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0020da5:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0020dab:	0f b6 d0             	movzx  edx,al
c0020dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020db1:	83 c2 08             	add    edx,0x8
c0020db4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020db8:	0f b6 c9             	movzx  ecx,cl
c0020dbb:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020dc1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020dc5:	6a 01                	push   0x1
c0020dc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020dca:	e8 15 ff ff ff       	call   c0020ce4 <IOAPIC::read(int)>
c0020dcf:	83 c4 08             	add    esp,0x8
c0020dd2:	c1 f8 10             	sar    eax,0x10
c0020dd5:	0f b6 c0             	movzx  eax,al
c0020dd8:	8d 50 01             	lea    edx,[eax+0x1]
c0020ddb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020dde:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020de4:	b8 00 00 00 00       	mov    eax,0x0
c0020de9:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020dec:	5b                   	pop    ebx
c0020ded:	5e                   	pop    esi
c0020dee:	5f                   	pop    edi
c0020def:	5d                   	pop    ebp
c0020df0:	c3                   	ret    
c0020df1:	90                   	nop

c0020df2 <IOAPIC::write(int, int)>:
c0020df2:	55                   	push   ebp
c0020df3:	89 e5                	mov    ebp,esp
c0020df5:	83 ec 10             	sub    esp,0x10
c0020df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020dfb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e01:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020e04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020e07:	0f b6 d0             	movzx  edx,al
c0020e0a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020e0d:	89 10                	mov    DWORD PTR [eax],edx
c0020e0f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020e12:	8d 50 10             	lea    edx,[eax+0x10]
c0020e15:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020e18:	89 02                	mov    DWORD PTR [edx],eax
c0020e1a:	90                   	nop
c0020e1b:	c9                   	leave  
c0020e1c:	c3                   	ret    
c0020e1d:	90                   	nop

c0020e1e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020e1e:	55                   	push   ebp
c0020e1f:	89 e5                	mov    ebp,esp
c0020e21:	53                   	push   ebx
c0020e22:	83 ec 2c             	sub    esp,0x2c
c0020e25:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020e28:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020e2b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020e2e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020e31:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020e34:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020e37:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020e3a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020e3d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020e40:	88 d8                	mov    al,bl
c0020e42:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020e45:	88 c8                	mov    al,cl
c0020e47:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020e4a:	88 d0                	mov    al,dl
c0020e4c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020e4f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020e53:	83 c0 08             	add    eax,0x8
c0020e56:	01 c0                	add    eax,eax
c0020e58:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020e5b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020e5f:	83 c0 08             	add    eax,0x8
c0020e62:	01 c0                	add    eax,eax
c0020e64:	83 c0 01             	add    eax,0x1
c0020e67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020e6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020e6d:	50                   	push   eax
c0020e6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020e71:	e8 6e fe ff ff       	call   c0020ce4 <IOAPIC::read(int)>
c0020e76:	83 c4 08             	add    esp,0x8
c0020e79:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020e7c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020e83:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020e86:	c1 e0 18             	shl    eax,0x18
c0020e89:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020e8c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020e8f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020e92:	52                   	push   edx
c0020e93:	50                   	push   eax
c0020e94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020e97:	e8 56 ff ff ff       	call   c0020df2 <IOAPIC::write(int, int)>
c0020e9c:	83 c4 0c             	add    esp,0xc
c0020e9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020ea2:	50                   	push   eax
c0020ea3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020ea6:	e8 39 fe ff ff       	call   c0020ce4 <IOAPIC::read(int)>
c0020eab:	83 c4 08             	add    esp,0x8
c0020eae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020eb1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020eb8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020ebf:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020ec6:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0020eca:	85 c0                	test   eax,eax
c0020ecc:	74 09                	je     c0020ed7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0020ece:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020ed5:	eb 07                	jmp    c0020ede <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0020ed7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020ede:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0020ee2:	85 c0                	test   eax,eax
c0020ee4:	74 09                	je     c0020eef <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0020ee6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020eed:	eb 07                	jmp    c0020ef6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0020eef:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020ef6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020efd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020f01:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020f04:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020f07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020f0a:	52                   	push   edx
c0020f0b:	50                   	push   eax
c0020f0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020f0f:	e8 de fe ff ff       	call   c0020df2 <IOAPIC::write(int, int)>
c0020f14:	83 c4 0c             	add    esp,0xc
c0020f17:	90                   	nop
c0020f18:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020f1b:	c9                   	leave  
c0020f1c:	c3                   	ret    
c0020f1d:	66 90                	xchg   ax,ax
c0020f1f:	90                   	nop

c0020f20 <APICTimer::close(int, int, void*)>:
c0020f20:	b8 00 00 00 00       	mov    eax,0x0
c0020f25:	c3                   	ret    
c0020f26:	66 90                	xchg   ax,ax

c0020f28 <apicTimerHandler(regs*, void*)>:
c0020f28:	83 ec 0c             	sub    esp,0xc
c0020f2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f2f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020f31:	b8 10 27 00 00       	mov    eax,0x2710
c0020f36:	ba 00 00 00 00       	mov    edx,0x0
c0020f3b:	f7 f1                	div    ecx
c0020f3d:	83 ec 0c             	sub    esp,0xc
c0020f40:	50                   	push   eax
c0020f41:	e8 8a a1 fe ff       	call   c000b0d0 <timerHandler(unsigned int)>
c0020f46:	83 c4 10             	add    esp,0x10
c0020f49:	90                   	nop
c0020f4a:	83 c4 0c             	add    esp,0xc
c0020f4d:	c3                   	ret    
c0020f4e:	66 90                	xchg   ax,ax

c0020f50 <APICTimer::open(int, int, void*)>:
c0020f50:	83 ec 0c             	sub    esp,0xc
c0020f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f57:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f59:	83 c0 24             	add    eax,0x24
c0020f5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f5e:	83 ec 08             	sub    esp,0x8
c0020f61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f69:	ff d0                	call   eax
c0020f6b:	83 c4 10             	add    esp,0x10
c0020f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020f76:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020f84:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020f8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020f8e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020f94:	83 ec 0c             	sub    esp,0xc
c0020f97:	51                   	push   ecx
c0020f98:	6a 01                	push   0x1
c0020f9a:	68 28 0f 02 c0       	push   0xc0020f28
c0020f9f:	52                   	push   edx
c0020fa0:	50                   	push   eax
c0020fa1:	e8 02 8a fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020fa6:	83 c4 20             	add    esp,0x20
c0020fa9:	89 c2                	mov    edx,eax
c0020fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020faf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020fb5:	b8 00 00 00 00       	mov    eax,0x0
c0020fba:	83 c4 0c             	add    esp,0xc
c0020fbd:	c3                   	ret    
c0020fbe:	66 90                	xchg   ax,ax

c0020fc0 <APICTimer::write(int)>:
c0020fc0:	83 ec 0c             	sub    esp,0xc
c0020fc3:	83 ec 0c             	sub    esp,0xc
c0020fc6:	68 9c 5f 02 c0       	push   0xc0025f9c
c0020fcb:	e8 0e f0 fe ff       	call   c000ffde <KePanic(char const*)>
c0020fd0:	83 c4 10             	add    esp,0x10
c0020fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020fdb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020fe1:	90                   	nop
c0020fe2:	83 c4 0c             	add    esp,0xc
c0020fe5:	c3                   	ret    
c0020fe6:	66 90                	xchg   ax,ax

c0020fe8 <APICTimer::APICTimer()>:
c0020fe8:	83 ec 0c             	sub    esp,0xc
c0020feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fef:	83 ec 08             	sub    esp,0x8
c0020ff2:	68 ac 5f 02 c0       	push   0xc0025fac
c0020ff7:	50                   	push   eax
c0020ff8:	e8 07 a0 fe ff       	call   c000b004 <Timer::Timer(char const*)>
c0020ffd:	83 c4 10             	add    esp,0x10
c0021000:	ba c0 5f 02 c0       	mov    edx,0xc0025fc0
c0021005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021009:	89 10                	mov    DWORD PTR [eax],edx
c002100b:	90                   	nop
c002100c:	83 c4 0c             	add    esp,0xc
c002100f:	c3                   	ret    

c0021010 <PIT::write(int)>:
c0021010:	83 ec 10             	sub    esp,0x10
c0021013:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021017:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002101b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021021:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021025:	a3 a4 f4 02 c0       	mov    ds:0xc002f4a4,eax
c002102a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002102f:	89 c2                	mov    edx,eax
c0021031:	c1 fa 1f             	sar    edx,0x1f
c0021034:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002103c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0021043:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021048:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002104c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021051:	ee                   	out    dx,al
c0021052:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021056:	0f b6 c0             	movzx  eax,al
c0021059:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021060:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021064:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021068:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002106d:	ee                   	out    dx,al
c002106e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021072:	c1 f8 08             	sar    eax,0x8
c0021075:	0f b6 c0             	movzx  eax,al
c0021078:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002107f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021083:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021087:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002108c:	ee                   	out    dx,al
c002108d:	90                   	nop
c002108e:	83 c4 10             	add    esp,0x10
c0021091:	c3                   	ret    
c0021092:	66 90                	xchg   ax,ax

c0021094 <pitHandler(regs*, void*)>:
c0021094:	83 ec 0c             	sub    esp,0xc
c0021097:	8b 0d a4 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f4a4
c002109d:	b8 10 27 00 00       	mov    eax,0x2710
c00210a2:	89 c2                	mov    edx,eax
c00210a4:	c1 fa 1f             	sar    edx,0x1f
c00210a7:	f7 f9                	idiv   ecx
c00210a9:	83 ec 0c             	sub    esp,0xc
c00210ac:	50                   	push   eax
c00210ad:	e8 1e a0 fe ff       	call   c000b0d0 <timerHandler(unsigned int)>
c00210b2:	83 c4 10             	add    esp,0x10
c00210b5:	90                   	nop
c00210b6:	83 c4 0c             	add    esp,0xc
c00210b9:	c3                   	ret    
c00210ba:	66 90                	xchg   ax,ax

c00210bc <PIT::open(int, int, void*)>:
c00210bc:	83 ec 0c             	sub    esp,0xc
c00210bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00210c5:	83 c0 24             	add    eax,0x24
c00210c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00210ca:	83 ec 08             	sub    esp,0x8
c00210cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210d5:	ff d0                	call   eax
c00210d7:	83 c4 10             	add    esp,0x10
c00210da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210de:	83 ec 0c             	sub    esp,0xc
c00210e1:	6a 00                	push   0x0
c00210e3:	6a 01                	push   0x1
c00210e5:	68 94 10 02 c0       	push   0xc0021094
c00210ea:	6a 00                	push   0x0
c00210ec:	50                   	push   eax
c00210ed:	e8 b6 88 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00210f2:	83 c4 20             	add    esp,0x20
c00210f5:	89 c2                	mov    edx,eax
c00210f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210fb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021101:	b8 00 00 00 00       	mov    eax,0x0
c0021106:	83 c4 0c             	add    esp,0xc
c0021109:	c3                   	ret    
c002110a:	66 90                	xchg   ax,ax

c002110c <PIT::close(int, int, void*)>:
c002110c:	83 ec 0c             	sub    esp,0xc
c002110f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021113:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002111d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021121:	6a 01                	push   0x1
c0021123:	68 94 10 02 c0       	push   0xc0021094
c0021128:	6a 00                	push   0x0
c002112a:	50                   	push   eax
c002112b:	e8 ae 88 fe ff       	call   c00099de <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021130:	83 c4 10             	add    esp,0x10
c0021133:	b8 00 00 00 00       	mov    eax,0x0
c0021138:	83 c4 0c             	add    esp,0xc
c002113b:	c3                   	ret    

c002113c <PIT::PIT()>:
c002113c:	83 ec 0c             	sub    esp,0xc
c002113f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021143:	83 ec 08             	sub    esp,0x8
c0021146:	68 e8 5f 02 c0       	push   0xc0025fe8
c002114b:	50                   	push   eax
c002114c:	e8 b3 9e fe ff       	call   c000b004 <Timer::Timer(char const*)>
c0021151:	83 c4 10             	add    esp,0x10
c0021154:	ba 10 60 02 c0       	mov    edx,0xc0026010
c0021159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002115d:	89 10                	mov    DWORD PTR [eax],edx
c002115f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021163:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021169:	0f b6 d0             	movzx  edx,al
c002116c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021170:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002117b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021181:	0f b6 d0             	movzx  edx,al
c0021184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021188:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002118d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021191:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021197:	8d 50 01             	lea    edx,[eax+0x1]
c002119a:	88 d1                	mov    cl,dl
c002119c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00211a0:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00211a6:	0f b6 d0             	movzx  edx,al
c00211a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00211b1:	83 e1 3f             	and    ecx,0x3f
c00211b4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00211b8:	90                   	nop
c00211b9:	83 c4 0c             	add    esp,0xc
c00211bc:	c3                   	ret    
c00211bd:	66 90                	xchg   ax,ax
c00211bf:	90                   	nop

c00211c0 <avxDetect>:
c00211c0:	b8 01 00 00 00       	mov    eax,0x1
c00211c5:	0f a2                	cpuid  
c00211c7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00211cd:	74 15                	je     c00211e4 <avxDetect.noAVX>
c00211cf:	b8 01 00 00 00       	mov    eax,0x1
c00211d4:	0f a2                	cpuid  
c00211d6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00211dc:	74 06                	je     c00211e4 <avxDetect.noAVX>
c00211de:	b8 01 00 00 00       	mov    eax,0x1
c00211e3:	c3                   	ret    

c00211e4 <avxDetect.noAVX>:
c00211e4:	b8 00 00 00 00       	mov    eax,0x0
c00211e9:	c3                   	ret    

c00211ea <avxSave>:
c00211ea:	53                   	push   ebx
c00211eb:	52                   	push   edx
c00211ec:	31 c0                	xor    eax,eax
c00211ee:	48                   	dec    eax
c00211ef:	89 c2                	mov    edx,eax
c00211f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00211f5:	0f ae 23             	xsave  [ebx]
c00211f8:	5a                   	pop    edx
c00211f9:	5b                   	pop    ebx
c00211fa:	c3                   	ret    

c00211fb <avxLoad>:
c00211fb:	53                   	push   ebx
c00211fc:	52                   	push   edx
c00211fd:	31 c0                	xor    eax,eax
c00211ff:	48                   	dec    eax
c0021200:	89 c2                	mov    edx,eax
c0021202:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021206:	0f ae 2b             	xrstor [ebx]
c0021209:	5a                   	pop    edx
c002120a:	5b                   	pop    ebx
c002120b:	c3                   	ret    

c002120c <avxInit>:
c002120c:	e8 17 03 00 00       	call   c0021528 <sseInit>
c0021211:	50                   	push   eax
c0021212:	51                   	push   ecx
c0021213:	0f 20 e0             	mov    eax,cr4
c0021216:	0d 00 00 04 00       	or     eax,0x40000
c002121b:	0f 22 e0             	mov    cr4,eax
c002121e:	31 c9                	xor    ecx,ecx
c0021220:	0f 01 d0             	xgetbv 
c0021223:	0d 07 00 00 00       	or     eax,0x7
c0021228:	0f 01 d1             	xsetbv 
c002122b:	59                   	pop    ecx
c002122c:	58                   	pop    eax
c002122d:	c3                   	ret    

c002122e <avxClose>:
c002122e:	c3                   	ret    
c002122f:	90                   	nop

c0021230 <isr0>:
c0021230:	fa                   	cli    
c0021231:	68 00 00 00 00       	push   0x0
c0021236:	68 00 00 00 00       	push   0x0
c002123b:	e9 56 01 00 00       	jmp    c0021396 <int_common_stub>

c0021240 <isr1>:
c0021240:	fa                   	cli    
c0021241:	6a 00                	push   0x0
c0021243:	6a 01                	push   0x1
c0021245:	e9 4c 01 00 00       	jmp    c0021396 <int_common_stub>

c002124a <isr2>:
c002124a:	fa                   	cli    
c002124b:	6a 00                	push   0x0
c002124d:	6a 02                	push   0x2
c002124f:	e9 42 01 00 00       	jmp    c0021396 <int_common_stub>

c0021254 <isr3>:
c0021254:	fa                   	cli    
c0021255:	6a 00                	push   0x0
c0021257:	6a 03                	push   0x3
c0021259:	e9 38 01 00 00       	jmp    c0021396 <int_common_stub>

c002125e <isr4>:
c002125e:	fa                   	cli    
c002125f:	6a 00                	push   0x0
c0021261:	6a 04                	push   0x4
c0021263:	e9 2e 01 00 00       	jmp    c0021396 <int_common_stub>

c0021268 <isr5>:
c0021268:	fa                   	cli    
c0021269:	6a 00                	push   0x0
c002126b:	6a 05                	push   0x5
c002126d:	e9 24 01 00 00       	jmp    c0021396 <int_common_stub>

c0021272 <isr6>:
c0021272:	fa                   	cli    
c0021273:	6a 00                	push   0x0
c0021275:	6a 06                	push   0x6
c0021277:	e9 1a 01 00 00       	jmp    c0021396 <int_common_stub>

c002127c <isr7>:
c002127c:	fa                   	cli    
c002127d:	6a 00                	push   0x0
c002127f:	6a 07                	push   0x7
c0021281:	e9 10 01 00 00       	jmp    c0021396 <int_common_stub>

c0021286 <isr8>:
c0021286:	fa                   	cli    
c0021287:	6a 08                	push   0x8
c0021289:	e9 08 01 00 00       	jmp    c0021396 <int_common_stub>

c002128e <isr9>:
c002128e:	fa                   	cli    
c002128f:	6a 00                	push   0x0
c0021291:	6a 09                	push   0x9
c0021293:	e9 fe 00 00 00       	jmp    c0021396 <int_common_stub>

c0021298 <isr10>:
c0021298:	fa                   	cli    
c0021299:	6a 0a                	push   0xa
c002129b:	e9 f6 00 00 00       	jmp    c0021396 <int_common_stub>

c00212a0 <isr11>:
c00212a0:	fa                   	cli    
c00212a1:	6a 0b                	push   0xb
c00212a3:	e9 ee 00 00 00       	jmp    c0021396 <int_common_stub>

c00212a8 <isr12>:
c00212a8:	fa                   	cli    
c00212a9:	6a 0c                	push   0xc
c00212ab:	e9 e6 00 00 00       	jmp    c0021396 <int_common_stub>

c00212b0 <isr13>:
c00212b0:	fa                   	cli    
c00212b1:	6a 0d                	push   0xd
c00212b3:	53                   	push   ebx
c00212b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00212b8:	81 fb 55 14 02 c0    	cmp    ebx,0xc0021455
c00212be:	5b                   	pop    ebx
c00212bf:	0f 84 92 01 00 00    	je     c0021457 <finishSignal2>
c00212c5:	e9 cc 00 00 00       	jmp    c0021396 <int_common_stub>

c00212ca <isr14>:
c00212ca:	fa                   	cli    
c00212cb:	6a 0e                	push   0xe
c00212cd:	e9 c4 00 00 00       	jmp    c0021396 <int_common_stub>

c00212d2 <isr15>:
c00212d2:	fa                   	cli    
c00212d3:	6a 00                	push   0x0
c00212d5:	6a 0f                	push   0xf
c00212d7:	e9 ba 00 00 00       	jmp    c0021396 <int_common_stub>

c00212dc <isr16>:
c00212dc:	fa                   	cli    
c00212dd:	6a 00                	push   0x0
c00212df:	6a 10                	push   0x10
c00212e1:	e9 b0 00 00 00       	jmp    c0021396 <int_common_stub>

c00212e6 <isr17>:
c00212e6:	fa                   	cli    
c00212e7:	6a 00                	push   0x0
c00212e9:	6a 11                	push   0x11
c00212eb:	e9 a6 00 00 00       	jmp    c0021396 <int_common_stub>

c00212f0 <isr18>:
c00212f0:	fa                   	cli    
c00212f1:	6a 00                	push   0x0
c00212f3:	6a 12                	push   0x12
c00212f5:	e9 9c 00 00 00       	jmp    c0021396 <int_common_stub>

c00212fa <irq3>:
c00212fa:	fa                   	cli    
c00212fb:	6a 00                	push   0x0
c00212fd:	6a 23                	push   0x23
c00212ff:	e9 92 00 00 00       	jmp    c0021396 <int_common_stub>

c0021304 <irq4>:
c0021304:	fa                   	cli    
c0021305:	6a 00                	push   0x0
c0021307:	6a 24                	push   0x24
c0021309:	e9 88 00 00 00       	jmp    c0021396 <int_common_stub>

c002130e <irq5>:
c002130e:	fa                   	cli    
c002130f:	6a 00                	push   0x0
c0021311:	6a 25                	push   0x25
c0021313:	e9 7e 00 00 00       	jmp    c0021396 <int_common_stub>

c0021318 <irq6>:
c0021318:	fa                   	cli    
c0021319:	6a 00                	push   0x0
c002131b:	6a 26                	push   0x26
c002131d:	e9 74 00 00 00       	jmp    c0021396 <int_common_stub>

c0021322 <irq7>:
c0021322:	fa                   	cli    
c0021323:	6a 00                	push   0x0
c0021325:	6a 27                	push   0x27
c0021327:	e9 6a 00 00 00       	jmp    c0021396 <int_common_stub>

c002132c <irq8>:
c002132c:	fa                   	cli    
c002132d:	6a 00                	push   0x0
c002132f:	6a 28                	push   0x28
c0021331:	e9 60 00 00 00       	jmp    c0021396 <int_common_stub>

c0021336 <irq9>:
c0021336:	fa                   	cli    
c0021337:	6a 00                	push   0x0
c0021339:	6a 29                	push   0x29
c002133b:	e9 56 00 00 00       	jmp    c0021396 <int_common_stub>

c0021340 <irq10>:
c0021340:	fa                   	cli    
c0021341:	6a 00                	push   0x0
c0021343:	6a 2a                	push   0x2a
c0021345:	e9 4c 00 00 00       	jmp    c0021396 <int_common_stub>

c002134a <irq11>:
c002134a:	fa                   	cli    
c002134b:	6a 00                	push   0x0
c002134d:	6a 2b                	push   0x2b
c002134f:	e9 42 00 00 00       	jmp    c0021396 <int_common_stub>

c0021354 <irq12>:
c0021354:	fa                   	cli    
c0021355:	6a 00                	push   0x0
c0021357:	6a 2c                	push   0x2c
c0021359:	e9 38 00 00 00       	jmp    c0021396 <int_common_stub>

c002135e <irq13>:
c002135e:	fa                   	cli    
c002135f:	6a 00                	push   0x0
c0021361:	6a 2d                	push   0x2d
c0021363:	e9 2e 00 00 00       	jmp    c0021396 <int_common_stub>

c0021368 <irq14>:
c0021368:	fa                   	cli    
c0021369:	6a 00                	push   0x0
c002136b:	6a 2e                	push   0x2e
c002136d:	e9 24 00 00 00       	jmp    c0021396 <int_common_stub>

c0021372 <irq15>:
c0021372:	fa                   	cli    
c0021373:	6a 00                	push   0x0
c0021375:	6a 2f                	push   0x2f
c0021377:	e9 1a 00 00 00       	jmp    c0021396 <int_common_stub>

c002137c <irq1>:
c002137c:	fa                   	cli    
c002137d:	6a 00                	push   0x0
c002137f:	6a 21                	push   0x21
c0021381:	eb 13                	jmp    c0021396 <int_common_stub>

c0021383 <irq2>:
c0021383:	fa                   	cli    
c0021384:	6a 00                	push   0x0
c0021386:	6a 22                	push   0x22
c0021388:	eb 0c                	jmp    c0021396 <int_common_stub>

c002138a <isr96>:
c002138a:	6a 00                	push   0x0
c002138c:	6a 60                	push   0x60
c002138e:	fb                   	sti    
c002138f:	eb 05                	jmp    c0021396 <int_common_stub>

c0021391 <irq0>:
c0021391:	fa                   	cli    
c0021392:	6a 00                	push   0x0
c0021394:	6a 20                	push   0x20

c0021396 <int_common_stub>:
c0021396:	60                   	pusha  
c0021397:	1e                   	push   ds
c0021398:	06                   	push   es
c0021399:	0f a0                	push   fs
c002139b:	0f a8                	push   gs
c002139d:	66 b8 10 00          	mov    ax,0x10
c00213a1:	66 8e d8             	mov    ds,ax
c00213a4:	66 8e c0             	mov    es,ax
c00213a7:	66 8e e0             	mov    fs,ax
c00213aa:	66 8e e8             	mov    gs,ax
c00213ad:	54                   	push   esp
c00213ae:	fc                   	cld    
c00213af:	e8 5c d6 fe ff       	call   c000ea10 <int_handler>
c00213b4:	81 c4 04 00 00 00    	add    esp,0x4
c00213ba:	0f a9                	pop    gs
c00213bc:	0f a1                	pop    fs
c00213be:	07                   	pop    es
c00213bf:	1f                   	pop    ds
c00213c0:	e8 a0 ff fe ff       	call   c0011365 <KiCheckSignalZ>
c00213c5:	85 c0                	test   eax,eax
c00213c7:	75 08                	jne    c00213d1 <doSignals>
c00213c9:	61                   	popa   
c00213ca:	81 c4 08 00 00 00    	add    esp,0x8
c00213d0:	cf                   	iret   

c00213d1 <doSignals>:
c00213d1:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c00213d6:	61                   	popa   
c00213d7:	53                   	push   ebx
c00213d8:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c00213de:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00213e1:	5b                   	pop    ebx
c00213e2:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c00213e7:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c00213ea:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c00213ed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00213f0:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c00213f3:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c00213f6:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c00213f9:	81 c4 08 00 00 00    	add    esp,0x8
c00213ff:	5e                   	pop    esi
c0021400:	5b                   	pop    ebx
c0021401:	59                   	pop    ecx
c0021402:	5a                   	pop    edx
c0021403:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021406:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021409:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002140c:	52                   	push   edx
c002140d:	51                   	push   ecx
c002140e:	53                   	push   ebx
c002140f:	56                   	push   esi
c0021410:	81 ec 08 00 00 00    	sub    esp,0x8
c0021416:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021419:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002141c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002141f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021422:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021425:	60                   	pusha  
c0021426:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002142c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002142f:	89 e3                	mov    ebx,esp
c0021431:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021434:	52                   	push   edx
c0021435:	68 55 14 02 c0       	push   0xc0021455
c002143a:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002143d:	89 dc                	mov    esp,ebx
c002143f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021442:	68 23 00 00 00       	push   0x23
c0021447:	51                   	push   ecx
c0021448:	68 02 02 00 00       	push   0x202
c002144d:	68 1b 00 00 00       	push   0x1b
c0021452:	ff 36                	push   DWORD PTR [esi]
c0021454:	cf                   	iret   

c0021455 <finishSignal>:
c0021455:	cd 0f                	int    0xf

c0021457 <finishSignal2>:
c0021457:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002145d:	e8 94 ff fe ff       	call   c00113f6 <KiFinishSignalZ>
c0021462:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021468:	68 23 00 00 00       	push   0x23
c002146d:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021470:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021473:	68 1b 00 00 00       	push   0x1b
c0021478:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002147b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002147e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021481:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021484:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021487:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002148a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002148d:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021490:	cf                   	iret   
c0021491:	90                   	nop
c0021492:	90                   	nop
c0021493:	90                   	nop

c0021494 <irq16>:
c0021494:	fa                   	cli    
c0021495:	6a 00                	push   0x0
c0021497:	6a 30                	push   0x30
c0021499:	e9 f8 fe ff ff       	jmp    c0021396 <int_common_stub>

c002149e <irq17>:
c002149e:	fa                   	cli    
c002149f:	6a 00                	push   0x0
c00214a1:	6a 31                	push   0x31
c00214a3:	e9 ee fe ff ff       	jmp    c0021396 <int_common_stub>

c00214a8 <irq18>:
c00214a8:	fa                   	cli    
c00214a9:	6a 00                	push   0x0
c00214ab:	6a 32                	push   0x32
c00214ad:	e9 e4 fe ff ff       	jmp    c0021396 <int_common_stub>

c00214b2 <irq19>:
c00214b2:	fa                   	cli    
c00214b3:	6a 00                	push   0x0
c00214b5:	6a 33                	push   0x33
c00214b7:	e9 da fe ff ff       	jmp    c0021396 <int_common_stub>

c00214bc <irq20>:
c00214bc:	fa                   	cli    
c00214bd:	6a 00                	push   0x0
c00214bf:	6a 34                	push   0x34
c00214c1:	e9 d0 fe ff ff       	jmp    c0021396 <int_common_stub>

c00214c6 <irq21>:
c00214c6:	fa                   	cli    
c00214c7:	6a 00                	push   0x0
c00214c9:	6a 35                	push   0x35
c00214cb:	e9 c6 fe ff ff       	jmp    c0021396 <int_common_stub>

c00214d0 <irq22>:
c00214d0:	fa                   	cli    
c00214d1:	6a 00                	push   0x0
c00214d3:	6a 36                	push   0x36
c00214d5:	e9 bc fe ff ff       	jmp    c0021396 <int_common_stub>

c00214da <irq23>:
c00214da:	fa                   	cli    
c00214db:	6a 00                	push   0x0
c00214dd:	6a 37                	push   0x37
c00214df:	e9 b2 fe ff ff       	jmp    c0021396 <int_common_stub>
c00214e4:	66 90                	xchg   ax,ax
c00214e6:	66 90                	xchg   ax,ax
c00214e8:	66 90                	xchg   ax,ax
c00214ea:	66 90                	xchg   ax,ax
c00214ec:	66 90                	xchg   ax,ax
c00214ee:	66 90                	xchg   ax,ax

c00214f0 <i386GetRDRAND>:
c00214f0:	b9 64 00 00 00       	mov    ecx,0x64

c00214f5 <retry>:
c00214f5:	0f c7 f0             	rdrand eax
c00214f8:	72 05                	jb     c00214ff <retry.done>
c00214fa:	e2 f9                	loop   c00214f5 <retry>

c00214fc <retry.fail>:
c00214fc:	31 c0                	xor    eax,eax
c00214fe:	c3                   	ret    

c00214ff <retry.done>:
c00214ff:	c3                   	ret    

c0021500 <sseDetect>:
c0021500:	b8 01 00 00 00       	mov    eax,0x1
c0021505:	0f a2                	cpuid  
c0021507:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002150d:	74 06                	je     c0021515 <sseDetect.noSSE>
c002150f:	b8 01 00 00 00       	mov    eax,0x1
c0021514:	c3                   	ret    

c0021515 <sseDetect.noSSE>:
c0021515:	31 c0                	xor    eax,eax
c0021517:	c3                   	ret    

c0021518 <sseSave>:
c0021518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002151c:	0f ae 00             	fxsave [eax]
c002151f:	c3                   	ret    

c0021520 <sseLoad>:
c0021520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021524:	0f ae 08             	fxrstor [eax]
c0021527:	c3                   	ret    

c0021528 <sseInit>:
c0021528:	e8 48 00 00 00       	call   c0021575 <x87Init>
c002152d:	0f 20 e0             	mov    eax,cr4
c0021530:	66 0d 00 06          	or     ax,0x600
c0021534:	0f 22 e0             	mov    cr4,eax
c0021537:	c3                   	ret    

c0021538 <sseClose>:
c0021538:	c3                   	ret    
c0021539:	66 90                	xchg   ax,ax
c002153b:	66 90                	xchg   ax,ax
c002153d:	66 90                	xchg   ax,ax
c002153f:	90                   	nop

c0021540 <value_37F>:
c0021540:	7f 03                	jg     c0021545 <value_37A+0x1>

c0021542 <value_37E>:
c0021542:	7e 03                	jle    c0021547 <x87Detect+0x1>

c0021544 <value_37A>:
c0021544:	7a 03                	jp     c0021549 <x87Detect+0x3>

c0021546 <x87Detect>:
c0021546:	53                   	push   ebx
c0021547:	51                   	push   ecx
c0021548:	52                   	push   edx
c0021549:	b8 01 00 00 00       	mov    eax,0x1
c002154e:	0f a2                	cpuid  
c0021550:	f7 c2 01 00 00 00    	test   edx,0x1
c0021556:	74 06                	je     c002155e <x87Detect.nox87>
c0021558:	b8 01 00 00 00       	mov    eax,0x1
c002155d:	c3                   	ret    

c002155e <x87Detect.nox87>:
c002155e:	b8 00 00 00 00       	mov    eax,0x0
c0021563:	5a                   	pop    edx
c0021564:	59                   	pop    ecx
c0021565:	5b                   	pop    ebx
c0021566:	c3                   	ret    

c0021567 <x87Save>:
c0021567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002156b:	dd 30                	fnsave [eax]
c002156d:	c3                   	ret    

c002156e <x87Load>:
c002156e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021572:	dd 20                	frstor [eax]
c0021574:	c3                   	ret    

c0021575 <x87Init>:
c0021575:	0f 20 c0             	mov    eax,cr0
c0021578:	66 25 fb ff          	and    ax,0xfffb
c002157c:	66 0d 22 00          	or     ax,0x22
c0021580:	0f 22 c0             	mov    cr0,eax
c0021583:	db e3                	fninit 
c0021585:	0f 06                	clts   
c0021587:	d9 2d 44 15 02 c0    	fldcw  WORD PTR ds:0xc0021544
c002158d:	c3                   	ret    

c002158e <x87Close>:
c002158e:	c3                   	ret    
c002158f:	90                   	nop

c0021590 <__do_global_ctors_aux>:
c0021590:	a1 44 25 02 c0       	mov    eax,ds:0xc0022544
c0021595:	83 f8 ff             	cmp    eax,0xffffffff
c0021598:	74 1a                	je     c00215b4 <__do_global_ctors_aux+0x24>
c002159a:	55                   	push   ebp
c002159b:	89 e5                	mov    ebp,esp
c002159d:	53                   	push   ebx
c002159e:	52                   	push   edx
c002159f:	bb 44 25 02 c0       	mov    ebx,0xc0022544
c00215a4:	ff d0                	call   eax
c00215a6:	83 eb 04             	sub    ebx,0x4
c00215a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00215ab:	83 f8 ff             	cmp    eax,0xffffffff
c00215ae:	75 f4                	jne    c00215a4 <__do_global_ctors_aux+0x14>
c00215b0:	58                   	pop    eax
c00215b1:	5b                   	pop    ebx
c00215b2:	5d                   	pop    ebp
c00215b3:	c3                   	ret    
c00215b4:	c3                   	ret    
c00215b5:	66 90                	xchg   ax,ax
c00215b7:	90                   	nop

c00215b8 <__divdi3>:
c00215b8:	55                   	push   ebp
c00215b9:	57                   	push   edi
c00215ba:	56                   	push   esi
c00215bb:	53                   	push   ebx
c00215bc:	83 ec 1c             	sub    esp,0x1c
c00215bf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00215c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00215c7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00215ca:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00215ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00215d6:	85 db                	test   ebx,ebx
c00215d8:	0f 88 8e 00 00 00    	js     c002166c <__divdi3+0xb4>
c00215de:	89 dd                	mov    ebp,ebx
c00215e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00215e8:	89 d3                	mov    ebx,edx
c00215ea:	85 d2                	test   edx,edx
c00215ec:	79 0d                	jns    c00215fb <__divdi3+0x43>
c00215ee:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00215f2:	f7 d8                	neg    eax
c00215f4:	83 d2 00             	adc    edx,0x0
c00215f7:	f7 da                	neg    edx
c00215f9:	89 d3                	mov    ebx,edx
c00215fb:	89 c7                	mov    edi,eax
c00215fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021600:	85 db                	test   ebx,ebx
c0021602:	75 48                	jne    c002164c <__divdi3+0x94>
c0021604:	39 ef                	cmp    edi,ebp
c0021606:	76 24                	jbe    c002162c <__divdi3+0x74>
c0021608:	89 ea                	mov    edx,ebp
c002160a:	f7 f7                	div    edi
c002160c:	89 c1                	mov    ecx,eax
c002160e:	31 f6                	xor    esi,esi
c0021610:	89 c8                	mov    eax,ecx
c0021612:	89 f2                	mov    edx,esi
c0021614:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021618:	85 c9                	test   ecx,ecx
c002161a:	74 07                	je     c0021623 <__divdi3+0x6b>
c002161c:	f7 d8                	neg    eax
c002161e:	83 d2 00             	adc    edx,0x0
c0021621:	f7 da                	neg    edx
c0021623:	83 c4 1c             	add    esp,0x1c
c0021626:	5b                   	pop    ebx
c0021627:	5e                   	pop    esi
c0021628:	5f                   	pop    edi
c0021629:	5d                   	pop    ebp
c002162a:	c3                   	ret    
c002162b:	90                   	nop
c002162c:	85 ff                	test   edi,edi
c002162e:	75 0b                	jne    c002163b <__divdi3+0x83>
c0021630:	b8 01 00 00 00       	mov    eax,0x1
c0021635:	31 d2                	xor    edx,edx
c0021637:	f7 f3                	div    ebx
c0021639:	89 c7                	mov    edi,eax
c002163b:	31 d2                	xor    edx,edx
c002163d:	89 e8                	mov    eax,ebp
c002163f:	f7 f7                	div    edi
c0021641:	89 c6                	mov    esi,eax
c0021643:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021646:	f7 f7                	div    edi
c0021648:	89 c1                	mov    ecx,eax
c002164a:	eb c4                	jmp    c0021610 <__divdi3+0x58>
c002164c:	39 eb                	cmp    ebx,ebp
c002164e:	77 3c                	ja     c002168c <__divdi3+0xd4>
c0021650:	0f bd f3             	bsr    esi,ebx
c0021653:	83 f6 1f             	xor    esi,0x1f
c0021656:	75 40                	jne    c0021698 <__divdi3+0xe0>
c0021658:	39 eb                	cmp    ebx,ebp
c002165a:	72 09                	jb     c0021665 <__divdi3+0xad>
c002165c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002165f:	0f 87 97 00 00 00    	ja     c00216fc <__divdi3+0x144>
c0021665:	b9 01 00 00 00       	mov    ecx,0x1
c002166a:	eb a4                	jmp    c0021610 <__divdi3+0x58>
c002166c:	f7 d9                	neg    ecx
c002166e:	83 d3 00             	adc    ebx,0x0
c0021671:	f7 db                	neg    ebx
c0021673:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021676:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002167a:	89 dd                	mov    ebp,ebx
c002167c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021684:	e9 5f ff ff ff       	jmp    c00215e8 <__divdi3+0x30>
c0021689:	8d 76 00             	lea    esi,[esi+0x0]
c002168c:	31 f6                	xor    esi,esi
c002168e:	31 c9                	xor    ecx,ecx
c0021690:	e9 7b ff ff ff       	jmp    c0021610 <__divdi3+0x58>
c0021695:	8d 76 00             	lea    esi,[esi+0x0]
c0021698:	b8 20 00 00 00       	mov    eax,0x20
c002169d:	29 f0                	sub    eax,esi
c002169f:	89 f1                	mov    ecx,esi
c00216a1:	d3 e3                	shl    ebx,cl
c00216a3:	89 fa                	mov    edx,edi
c00216a5:	88 c1                	mov    cl,al
c00216a7:	d3 ea                	shr    edx,cl
c00216a9:	09 da                	or     edx,ebx
c00216ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00216af:	89 f1                	mov    ecx,esi
c00216b1:	d3 e7                	shl    edi,cl
c00216b3:	89 eb                	mov    ebx,ebp
c00216b5:	88 c1                	mov    cl,al
c00216b7:	d3 eb                	shr    ebx,cl
c00216b9:	89 f1                	mov    ecx,esi
c00216bb:	d3 e5                	shl    ebp,cl
c00216bd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00216c0:	88 c1                	mov    cl,al
c00216c2:	d3 ea                	shr    edx,cl
c00216c4:	09 d5                	or     ebp,edx
c00216c6:	89 e8                	mov    eax,ebp
c00216c8:	89 da                	mov    edx,ebx
c00216ca:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00216ce:	89 d3                	mov    ebx,edx
c00216d0:	89 c5                	mov    ebp,eax
c00216d2:	f7 e7                	mul    edi
c00216d4:	39 d3                	cmp    ebx,edx
c00216d6:	72 18                	jb     c00216f0 <__divdi3+0x138>
c00216d8:	74 0a                	je     c00216e4 <__divdi3+0x12c>
c00216da:	89 e9                	mov    ecx,ebp
c00216dc:	31 f6                	xor    esi,esi
c00216de:	e9 2d ff ff ff       	jmp    c0021610 <__divdi3+0x58>
c00216e3:	90                   	nop
c00216e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00216e7:	89 f1                	mov    ecx,esi
c00216e9:	d3 e7                	shl    edi,cl
c00216eb:	39 c7                	cmp    edi,eax
c00216ed:	73 eb                	jae    c00216da <__divdi3+0x122>
c00216ef:	90                   	nop
c00216f0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00216f3:	31 f6                	xor    esi,esi
c00216f5:	e9 16 ff ff ff       	jmp    c0021610 <__divdi3+0x58>
c00216fa:	66 90                	xchg   ax,ax
c00216fc:	31 c9                	xor    ecx,ecx
c00216fe:	e9 0d ff ff ff       	jmp    c0021610 <__divdi3+0x58>
c0021703:	90                   	nop

c0021704 <__moddi3>:
c0021704:	55                   	push   ebp
c0021705:	57                   	push   edi
c0021706:	56                   	push   esi
c0021707:	53                   	push   ebx
c0021708:	83 ec 2c             	sub    esp,0x2c
c002170b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002170f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021713:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021717:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002171b:	85 db                	test   ebx,ebx
c002171d:	0f 88 85 00 00 00    	js     c00217a8 <__moddi3+0xa4>
c0021723:	89 de                	mov    esi,ebx
c0021725:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002172d:	89 d7                	mov    edi,edx
c002172f:	85 d2                	test   edx,edx
c0021731:	79 09                	jns    c002173c <__moddi3+0x38>
c0021733:	f7 d8                	neg    eax
c0021735:	83 d2 00             	adc    edx,0x0
c0021738:	f7 da                	neg    edx
c002173a:	89 d7                	mov    edi,edx
c002173c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021740:	89 cd                	mov    ebp,ecx
c0021742:	85 ff                	test   edi,edi
c0021744:	75 52                	jne    c0021798 <__moddi3+0x94>
c0021746:	89 c3                	mov    ebx,eax
c0021748:	39 f0                	cmp    eax,esi
c002174a:	76 24                	jbe    c0021770 <__moddi3+0x6c>
c002174c:	89 c8                	mov    eax,ecx
c002174e:	89 f2                	mov    edx,esi
c0021750:	f7 f3                	div    ebx
c0021752:	89 d6                	mov    esi,edx
c0021754:	89 f0                	mov    eax,esi
c0021756:	31 d2                	xor    edx,edx
c0021758:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002175c:	85 c9                	test   ecx,ecx
c002175e:	74 07                	je     c0021767 <__moddi3+0x63>
c0021760:	f7 d8                	neg    eax
c0021762:	83 d2 00             	adc    edx,0x0
c0021765:	f7 da                	neg    edx
c0021767:	83 c4 2c             	add    esp,0x2c
c002176a:	5b                   	pop    ebx
c002176b:	5e                   	pop    esi
c002176c:	5f                   	pop    edi
c002176d:	5d                   	pop    ebp
c002176e:	c3                   	ret    
c002176f:	90                   	nop
c0021770:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021774:	85 db                	test   ebx,ebx
c0021776:	75 0d                	jne    c0021785 <__moddi3+0x81>
c0021778:	b8 01 00 00 00       	mov    eax,0x1
c002177d:	31 d2                	xor    edx,edx
c002177f:	f7 f7                	div    edi
c0021781:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021785:	89 f0                	mov    eax,esi
c0021787:	31 d2                	xor    edx,edx
c0021789:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002178d:	f7 f7                	div    edi
c002178f:	89 e8                	mov    eax,ebp
c0021791:	f7 f7                	div    edi
c0021793:	89 d6                	mov    esi,edx
c0021795:	eb bd                	jmp    c0021754 <__moddi3+0x50>
c0021797:	90                   	nop
c0021798:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002179c:	39 f7                	cmp    edi,esi
c002179e:	76 20                	jbe    c00217c0 <__moddi3+0xbc>
c00217a0:	89 c8                	mov    eax,ecx
c00217a2:	89 f2                	mov    edx,esi
c00217a4:	eb b2                	jmp    c0021758 <__moddi3+0x54>
c00217a6:	66 90                	xchg   ax,ax
c00217a8:	f7 d9                	neg    ecx
c00217aa:	83 d3 00             	adc    ebx,0x0
c00217ad:	f7 db                	neg    ebx
c00217af:	89 de                	mov    esi,ebx
c00217b1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00217b9:	e9 6f ff ff ff       	jmp    c002172d <__moddi3+0x29>
c00217be:	66 90                	xchg   ax,ax
c00217c0:	0f bd c7             	bsr    eax,edi
c00217c3:	83 f0 1f             	xor    eax,0x1f
c00217c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00217ca:	75 24                	jne    c00217f0 <__moddi3+0xec>
c00217cc:	39 f7                	cmp    edi,esi
c00217ce:	72 06                	jb     c00217d6 <__moddi3+0xd2>
c00217d0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00217d4:	77 0c                	ja     c00217e2 <__moddi3+0xde>
c00217d6:	89 e9                	mov    ecx,ebp
c00217d8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00217dc:	19 fe                	sbb    esi,edi
c00217de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00217e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217e6:	89 f2                	mov    edx,esi
c00217e8:	e9 6b ff ff ff       	jmp    c0021758 <__moddi3+0x54>
c00217ed:	8d 76 00             	lea    esi,[esi+0x0]
c00217f0:	b8 20 00 00 00       	mov    eax,0x20
c00217f5:	89 c2                	mov    edx,eax
c00217f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00217fb:	29 da                	sub    edx,ebx
c00217fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021801:	88 d9                	mov    cl,bl
c0021803:	d3 e7                	shl    edi,cl
c0021805:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021809:	88 d1                	mov    cl,dl
c002180b:	d3 e8                	shr    eax,cl
c002180d:	09 c7                	or     edi,eax
c002180f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021813:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021817:	89 d8                	mov    eax,ebx
c0021819:	88 d9                	mov    cl,bl
c002181b:	d3 e7                	shl    edi,cl
c002181d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021821:	89 f3                	mov    ebx,esi
c0021823:	88 d1                	mov    cl,dl
c0021825:	d3 eb                	shr    ebx,cl
c0021827:	89 c7                	mov    edi,eax
c0021829:	88 c1                	mov    cl,al
c002182b:	d3 e6                	shl    esi,cl
c002182d:	89 e8                	mov    eax,ebp
c002182f:	88 d1                	mov    cl,dl
c0021831:	d3 e8                	shr    eax,cl
c0021833:	09 f0                	or     eax,esi
c0021835:	89 f9                	mov    ecx,edi
c0021837:	d3 e5                	shl    ebp,cl
c0021839:	89 da                	mov    edx,ebx
c002183b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002183f:	89 d3                	mov    ebx,edx
c0021841:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021845:	89 c6                	mov    esi,eax
c0021847:	89 d1                	mov    ecx,edx
c0021849:	39 d3                	cmp    ebx,edx
c002184b:	72 27                	jb     c0021874 <__moddi3+0x170>
c002184d:	74 21                	je     c0021870 <__moddi3+0x16c>
c002184f:	29 f5                	sub    ebp,esi
c0021851:	19 cb                	sbb    ebx,ecx
c0021853:	89 de                	mov    esi,ebx
c0021855:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021859:	d3 e6                	shl    esi,cl
c002185b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002185f:	89 f9                	mov    ecx,edi
c0021861:	d3 ed                	shr    ebp,cl
c0021863:	09 ee                	or     esi,ebp
c0021865:	89 f0                	mov    eax,esi
c0021867:	d3 eb                	shr    ebx,cl
c0021869:	89 da                	mov    edx,ebx
c002186b:	e9 e8 fe ff ff       	jmp    c0021758 <__moddi3+0x54>
c0021870:	39 c5                	cmp    ebp,eax
c0021872:	73 db                	jae    c002184f <__moddi3+0x14b>
c0021874:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021878:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002187c:	89 d1                	mov    ecx,edx
c002187e:	89 c6                	mov    esi,eax
c0021880:	eb cd                	jmp    c002184f <__moddi3+0x14b>
c0021882:	66 90                	xchg   ax,ax

c0021884 <__udivdi3>:
c0021884:	55                   	push   ebp
c0021885:	57                   	push   edi
c0021886:	56                   	push   esi
c0021887:	53                   	push   ebx
c0021888:	83 ec 1c             	sub    esp,0x1c
c002188b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002188f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021893:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021897:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002189b:	85 d2                	test   edx,edx
c002189d:	75 41                	jne    c00218e0 <__udivdi3+0x5c>
c002189f:	39 f7                	cmp    edi,esi
c00218a1:	76 15                	jbe    c00218b8 <__udivdi3+0x34>
c00218a3:	89 e8                	mov    eax,ebp
c00218a5:	89 f2                	mov    edx,esi
c00218a7:	f7 f7                	div    edi
c00218a9:	31 db                	xor    ebx,ebx
c00218ab:	89 da                	mov    edx,ebx
c00218ad:	83 c4 1c             	add    esp,0x1c
c00218b0:	5b                   	pop    ebx
c00218b1:	5e                   	pop    esi
c00218b2:	5f                   	pop    edi
c00218b3:	5d                   	pop    ebp
c00218b4:	c3                   	ret    
c00218b5:	8d 76 00             	lea    esi,[esi+0x0]
c00218b8:	89 f9                	mov    ecx,edi
c00218ba:	85 ff                	test   edi,edi
c00218bc:	75 0b                	jne    c00218c9 <__udivdi3+0x45>
c00218be:	b8 01 00 00 00       	mov    eax,0x1
c00218c3:	31 d2                	xor    edx,edx
c00218c5:	f7 f7                	div    edi
c00218c7:	89 c1                	mov    ecx,eax
c00218c9:	31 d2                	xor    edx,edx
c00218cb:	89 f0                	mov    eax,esi
c00218cd:	f7 f1                	div    ecx
c00218cf:	89 c3                	mov    ebx,eax
c00218d1:	89 e8                	mov    eax,ebp
c00218d3:	f7 f1                	div    ecx
c00218d5:	89 da                	mov    edx,ebx
c00218d7:	83 c4 1c             	add    esp,0x1c
c00218da:	5b                   	pop    ebx
c00218db:	5e                   	pop    esi
c00218dc:	5f                   	pop    edi
c00218dd:	5d                   	pop    ebp
c00218de:	c3                   	ret    
c00218df:	90                   	nop
c00218e0:	39 f2                	cmp    edx,esi
c00218e2:	77 1c                	ja     c0021900 <__udivdi3+0x7c>
c00218e4:	0f bd da             	bsr    ebx,edx
c00218e7:	83 f3 1f             	xor    ebx,0x1f
c00218ea:	75 24                	jne    c0021910 <__udivdi3+0x8c>
c00218ec:	39 f2                	cmp    edx,esi
c00218ee:	72 08                	jb     c00218f8 <__udivdi3+0x74>
c00218f0:	39 ef                	cmp    edi,ebp
c00218f2:	0f 87 84 00 00 00    	ja     c002197c <__udivdi3+0xf8>
c00218f8:	b8 01 00 00 00       	mov    eax,0x1
c00218fd:	eb ac                	jmp    c00218ab <__udivdi3+0x27>
c00218ff:	90                   	nop
c0021900:	31 db                	xor    ebx,ebx
c0021902:	31 c0                	xor    eax,eax
c0021904:	89 da                	mov    edx,ebx
c0021906:	83 c4 1c             	add    esp,0x1c
c0021909:	5b                   	pop    ebx
c002190a:	5e                   	pop    esi
c002190b:	5f                   	pop    edi
c002190c:	5d                   	pop    ebp
c002190d:	c3                   	ret    
c002190e:	66 90                	xchg   ax,ax
c0021910:	b8 20 00 00 00       	mov    eax,0x20
c0021915:	29 d8                	sub    eax,ebx
c0021917:	88 d9                	mov    cl,bl
c0021919:	d3 e2                	shl    edx,cl
c002191b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002191f:	89 fa                	mov    edx,edi
c0021921:	88 c1                	mov    cl,al
c0021923:	d3 ea                	shr    edx,cl
c0021925:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021929:	09 d1                	or     ecx,edx
c002192b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002192f:	88 d9                	mov    cl,bl
c0021931:	d3 e7                	shl    edi,cl
c0021933:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021937:	89 f7                	mov    edi,esi
c0021939:	88 c1                	mov    cl,al
c002193b:	d3 ef                	shr    edi,cl
c002193d:	88 d9                	mov    cl,bl
c002193f:	d3 e6                	shl    esi,cl
c0021941:	89 ea                	mov    edx,ebp
c0021943:	88 c1                	mov    cl,al
c0021945:	d3 ea                	shr    edx,cl
c0021947:	09 d6                	or     esi,edx
c0021949:	89 f0                	mov    eax,esi
c002194b:	89 fa                	mov    edx,edi
c002194d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021951:	89 d7                	mov    edi,edx
c0021953:	89 c6                	mov    esi,eax
c0021955:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021959:	39 d7                	cmp    edi,edx
c002195b:	72 13                	jb     c0021970 <__udivdi3+0xec>
c002195d:	74 09                	je     c0021968 <__udivdi3+0xe4>
c002195f:	89 f0                	mov    eax,esi
c0021961:	31 db                	xor    ebx,ebx
c0021963:	e9 43 ff ff ff       	jmp    c00218ab <__udivdi3+0x27>
c0021968:	88 d9                	mov    cl,bl
c002196a:	d3 e5                	shl    ebp,cl
c002196c:	39 c5                	cmp    ebp,eax
c002196e:	73 ef                	jae    c002195f <__udivdi3+0xdb>
c0021970:	8d 46 ff             	lea    eax,[esi-0x1]
c0021973:	31 db                	xor    ebx,ebx
c0021975:	e9 31 ff ff ff       	jmp    c00218ab <__udivdi3+0x27>
c002197a:	66 90                	xchg   ax,ax
c002197c:	31 c0                	xor    eax,eax
c002197e:	e9 28 ff ff ff       	jmp    c00218ab <__udivdi3+0x27>
c0021983:	90                   	nop

c0021984 <__umoddi3>:
c0021984:	55                   	push   ebp
c0021985:	57                   	push   edi
c0021986:	56                   	push   esi
c0021987:	53                   	push   ebx
c0021988:	83 ec 1c             	sub    esp,0x1c
c002198b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002198f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021993:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021997:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002199b:	89 da                	mov    edx,ebx
c002199d:	85 c0                	test   eax,eax
c002199f:	75 37                	jne    c00219d8 <__umoddi3+0x54>
c00219a1:	39 df                	cmp    edi,ebx
c00219a3:	76 13                	jbe    c00219b8 <__umoddi3+0x34>
c00219a5:	89 f0                	mov    eax,esi
c00219a7:	f7 f7                	div    edi
c00219a9:	89 d0                	mov    eax,edx
c00219ab:	31 d2                	xor    edx,edx
c00219ad:	83 c4 1c             	add    esp,0x1c
c00219b0:	5b                   	pop    ebx
c00219b1:	5e                   	pop    esi
c00219b2:	5f                   	pop    edi
c00219b3:	5d                   	pop    ebp
c00219b4:	c3                   	ret    
c00219b5:	8d 76 00             	lea    esi,[esi+0x0]
c00219b8:	89 fd                	mov    ebp,edi
c00219ba:	85 ff                	test   edi,edi
c00219bc:	75 0b                	jne    c00219c9 <__umoddi3+0x45>
c00219be:	b8 01 00 00 00       	mov    eax,0x1
c00219c3:	31 d2                	xor    edx,edx
c00219c5:	f7 f7                	div    edi
c00219c7:	89 c5                	mov    ebp,eax
c00219c9:	89 d8                	mov    eax,ebx
c00219cb:	31 d2                	xor    edx,edx
c00219cd:	f7 f5                	div    ebp
c00219cf:	89 f0                	mov    eax,esi
c00219d1:	f7 f5                	div    ebp
c00219d3:	89 d0                	mov    eax,edx
c00219d5:	eb d4                	jmp    c00219ab <__umoddi3+0x27>
c00219d7:	90                   	nop
c00219d8:	89 f1                	mov    ecx,esi
c00219da:	39 d8                	cmp    eax,ebx
c00219dc:	76 0a                	jbe    c00219e8 <__umoddi3+0x64>
c00219de:	89 f0                	mov    eax,esi
c00219e0:	83 c4 1c             	add    esp,0x1c
c00219e3:	5b                   	pop    ebx
c00219e4:	5e                   	pop    esi
c00219e5:	5f                   	pop    edi
c00219e6:	5d                   	pop    ebp
c00219e7:	c3                   	ret    
c00219e8:	0f bd e8             	bsr    ebp,eax
c00219eb:	83 f5 1f             	xor    ebp,0x1f
c00219ee:	75 1c                	jne    c0021a0c <__umoddi3+0x88>
c00219f0:	39 d8                	cmp    eax,ebx
c00219f2:	72 04                	jb     c00219f8 <__umoddi3+0x74>
c00219f4:	39 f7                	cmp    edi,esi
c00219f6:	77 08                	ja     c0021a00 <__umoddi3+0x7c>
c00219f8:	89 da                	mov    edx,ebx
c00219fa:	29 fe                	sub    esi,edi
c00219fc:	19 c2                	sbb    edx,eax
c00219fe:	89 f1                	mov    ecx,esi
c0021a00:	89 c8                	mov    eax,ecx
c0021a02:	83 c4 1c             	add    esp,0x1c
c0021a05:	5b                   	pop    ebx
c0021a06:	5e                   	pop    esi
c0021a07:	5f                   	pop    edi
c0021a08:	5d                   	pop    ebp
c0021a09:	c3                   	ret    
c0021a0a:	66 90                	xchg   ax,ax
c0021a0c:	ba 20 00 00 00       	mov    edx,0x20
c0021a11:	29 ea                	sub    edx,ebp
c0021a13:	89 e9                	mov    ecx,ebp
c0021a15:	d3 e0                	shl    eax,cl
c0021a17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a1b:	89 f8                	mov    eax,edi
c0021a1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a21:	88 d1                	mov    cl,dl
c0021a23:	d3 e8                	shr    eax,cl
c0021a25:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021a29:	09 c1                	or     ecx,eax
c0021a2b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a2f:	89 e9                	mov    ecx,ebp
c0021a31:	d3 e7                	shl    edi,cl
c0021a33:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021a37:	89 d8                	mov    eax,ebx
c0021a39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a3d:	88 d1                	mov    cl,dl
c0021a3f:	d3 e8                	shr    eax,cl
c0021a41:	89 c7                	mov    edi,eax
c0021a43:	89 e9                	mov    ecx,ebp
c0021a45:	d3 e3                	shl    ebx,cl
c0021a47:	89 f0                	mov    eax,esi
c0021a49:	88 d1                	mov    cl,dl
c0021a4b:	d3 e8                	shr    eax,cl
c0021a4d:	09 d8                	or     eax,ebx
c0021a4f:	89 e9                	mov    ecx,ebp
c0021a51:	d3 e6                	shl    esi,cl
c0021a53:	89 f3                	mov    ebx,esi
c0021a55:	89 fa                	mov    edx,edi
c0021a57:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021a5b:	89 d1                	mov    ecx,edx
c0021a5d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021a61:	89 c6                	mov    esi,eax
c0021a63:	89 d7                	mov    edi,edx
c0021a65:	39 d1                	cmp    ecx,edx
c0021a67:	72 27                	jb     c0021a90 <__umoddi3+0x10c>
c0021a69:	74 21                	je     c0021a8c <__umoddi3+0x108>
c0021a6b:	89 ca                	mov    edx,ecx
c0021a6d:	29 f3                	sub    ebx,esi
c0021a6f:	19 fa                	sbb    edx,edi
c0021a71:	89 d0                	mov    eax,edx
c0021a73:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021a77:	d3 e0                	shl    eax,cl
c0021a79:	89 e9                	mov    ecx,ebp
c0021a7b:	d3 eb                	shr    ebx,cl
c0021a7d:	09 d8                	or     eax,ebx
c0021a7f:	d3 ea                	shr    edx,cl
c0021a81:	83 c4 1c             	add    esp,0x1c
c0021a84:	5b                   	pop    ebx
c0021a85:	5e                   	pop    esi
c0021a86:	5f                   	pop    edi
c0021a87:	5d                   	pop    ebp
c0021a88:	c3                   	ret    
c0021a89:	8d 76 00             	lea    esi,[esi+0x0]
c0021a8c:	39 c3                	cmp    ebx,eax
c0021a8e:	73 db                	jae    c0021a6b <__umoddi3+0xe7>
c0021a90:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021a94:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021a98:	89 d7                	mov    edi,edx
c0021a9a:	89 c6                	mov    esi,eax
c0021a9c:	eb cd                	jmp    c0021a6b <__umoddi3+0xe7>

Disassembly of section .init:

c0021a9e <_init>:
c0021a9e:	55                   	push   ebp
c0021a9f:	89 e5                	mov    ebp,esp
c0021aa1:	e8 4e e6 fd ff       	call   c00000f4 <frame_dummy>
c0021aa6:	e8 e5 fa ff ff       	call   c0021590 <__do_global_ctors_aux>
c0021aab:	5d                   	pop    ebp
c0021aac:	c3                   	ret    

Disassembly of section .fini:

c0021aad <_fini>:
c0021aad:	55                   	push   ebp
c0021aae:	89 e5                	mov    ebp,esp
c0021ab0:	e8 cf e5 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021ab5:	5d                   	pop    ebp
c0021ab6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021ab8 <DriverlessDevice::~DriverlessDevice()>:
c0021ab8:	ba fc 34 02 c0       	mov    edx,0xc00234fc
c0021abd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ac1:	89 10                	mov    DWORD PTR [eax],edx
c0021ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ac7:	50                   	push   eax
c0021ac8:	e8 31 7e fe ff       	call   c00098fe <Device::~Device()>
c0021acd:	83 c4 04             	add    esp,0x4
c0021ad0:	90                   	nop
c0021ad1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021ad2 <DriverlessDevice::~DriverlessDevice()>:
c0021ad2:	83 ec 0c             	sub    esp,0xc
c0021ad5:	83 ec 0c             	sub    esp,0xc
c0021ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021adc:	e8 d7 ff ff ff       	call   c0021ab8 <DriverlessDevice::~DriverlessDevice()>
c0021ae1:	83 c4 10             	add    esp,0x10
c0021ae4:	83 ec 08             	sub    esp,0x8
c0021ae7:	68 58 01 00 00       	push   0x158
c0021aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021af0:	e8 2a b8 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0021af5:	83 c4 10             	add    esp,0x10
c0021af8:	83 c4 0c             	add    esp,0xc
c0021afb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021afc <LinkedList<Device>::addElement(Device*)>:
c0021afc:	83 ec 0c             	sub    esp,0xc
c0021aff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021b04:	75 10                	jne    c0021b16 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021b06:	83 ec 0c             	sub    esp,0xc
c0021b09:	68 90 34 02 c0       	push   0xc0023490
c0021b0e:	e8 cb e4 fe ff       	call   c000ffde <KePanic(char const*)>
c0021b13:	83 c4 10             	add    esp,0x10
c0021b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b1c:	85 c0                	test   eax,eax
c0021b1e:	74 3a                	je     c0021b5a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b27:	85 c0                	test   eax,eax
c0021b29:	74 2f                	je     c0021b5a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b36:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b4e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021b58:	eb 68                	jmp    c0021bc2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b60:	85 c0                	test   eax,eax
c0021b62:	75 4e                	jne    c0021bb2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b6b:	85 c0                	test   eax,eax
c0021b6d:	75 43                	jne    c0021bb2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b77:	89 10                	mov    DWORD PTR [eax],edx
c0021b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b8b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b9c:	85 c0                	test   eax,eax
c0021b9e:	74 22                	je     c0021bc2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021ba0:	83 ec 0c             	sub    esp,0xc
c0021ba3:	68 b2 34 02 c0       	push   0xc00234b2
c0021ba8:	e8 31 e4 fe ff       	call   c000ffde <KePanic(char const*)>
c0021bad:	83 c4 10             	add    esp,0x10
c0021bb0:	eb 10                	jmp    c0021bc2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021bb2:	83 ec 0c             	sub    esp,0xc
c0021bb5:	68 bc 34 02 c0       	push   0xc00234bc
c0021bba:	e8 1f e4 fe ff       	call   c000ffde <KePanic(char const*)>
c0021bbf:	83 c4 10             	add    esp,0x10
c0021bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021bc9:	8d 50 01             	lea    edx,[eax+0x1]
c0021bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021bd3:	90                   	nop
c0021bd4:	83 c4 0c             	add    esp,0xc
c0021bd7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021bd8 <LinkedList<Device>::LinkedList()>:
c0021bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021be6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021bed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bf1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bfc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021c02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021c0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c11:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021c18:	90                   	nop
c0021c19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021c1c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021c1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c22:	85 c0                	test   eax,eax
c0021c24:	75 0e                	jne    c0021c34 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c2d:	85 c0                	test   eax,eax
c0021c2f:	75 03                	jne    c0021c34 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021c31:	b0 01                	mov    al,0x1
c0021c33:	c3                   	ret    
c0021c34:	b0 00                	mov    al,0x0
c0021c36:	90                   	nop
c0021c37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021c38 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c3e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021c40 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021c40:	83 ec 0c             	sub    esp,0xc
c0021c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c49:	85 c0                	test   eax,eax
c0021c4b:	75 17                	jne    c0021c64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021c4d:	83 ec 0c             	sub    esp,0xc
c0021c50:	68 2c 37 02 c0       	push   0xc002372c
c0021c55:	e8 84 e3 fe ff       	call   c000ffde <KePanic(char const*)>
c0021c5a:	83 c4 10             	add    esp,0x10
c0021c5d:	e9 96 00 00 00       	jmp    c0021cf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021c62:	66 90                	xchg   ax,ax
c0021c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021c6e:	85 c0                	test   eax,eax
c0021c70:	0f 95 c0             	setne  al
c0021c73:	0f b6 c0             	movzx  eax,al
c0021c76:	85 c0                	test   eax,eax
c0021c78:	74 12                	je     c0021c8c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0021c7a:	83 ec 0c             	sub    esp,0xc
c0021c7d:	68 77 37 02 c0       	push   0xc0023777
c0021c82:	e8 57 e3 fe ff       	call   c000ffde <KePanic(char const*)>
c0021c87:	83 c4 10             	add    esp,0x10
c0021c8a:	66 90                	xchg   ax,ax
c0021c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c92:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021c95:	85 c0                	test   eax,eax
c0021c97:	0f 94 c0             	sete   al
c0021c9a:	0f b6 c0             	movzx  eax,al
c0021c9d:	85 c0                	test   eax,eax
c0021c9f:	74 33                	je     c0021cd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021caf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021cbd:	83 f8 01             	cmp    eax,0x1
c0021cc0:	74 22                	je     c0021ce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021cc2:	83 ec 0c             	sub    esp,0xc
c0021cc5:	68 50 37 02 c0       	push   0xc0023750
c0021cca:	e8 0f e3 fe ff       	call   c000ffde <KePanic(char const*)>
c0021ccf:	83 c4 10             	add    esp,0x10
c0021cd2:	eb 10                	jmp    c0021ce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cda:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce1:	89 10                	mov    DWORD PTR [eax],edx
c0021ce3:	90                   	nop
c0021ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ceb:	8d 50 ff             	lea    edx,[eax-0x1]
c0021cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0021cf8:	83 c4 0c             	add    esp,0xc
c0021cfb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021cfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021cfc:	83 ec 0c             	sub    esp,0xc
c0021cff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021d04:	75 12                	jne    c0021d18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021d06:	83 ec 0c             	sub    esp,0xc
c0021d09:	68 90 34 02 c0       	push   0xc0023490
c0021d0e:	e8 cb e2 fe ff       	call   c000ffde <KePanic(char const*)>
c0021d13:	83 c4 10             	add    esp,0x10
c0021d16:	66 90                	xchg   ax,ax
c0021d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d1e:	85 c0                	test   eax,eax
c0021d20:	74 36                	je     c0021d58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d29:	85 c0                	test   eax,eax
c0021d2b:	74 2b                	je     c0021d58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d38:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d4d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021d54:	eb 6a                	jmp    c0021dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021d56:	66 90                	xchg   ax,ax
c0021d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d5e:	85 c0                	test   eax,eax
c0021d60:	75 4e                	jne    c0021db0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d69:	85 c0                	test   eax,eax
c0021d6b:	75 43                	jne    c0021db0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d75:	89 10                	mov    DWORD PTR [eax],edx
c0021d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d89:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d97:	85 c0                	test   eax,eax
c0021d99:	74 25                	je     c0021dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021d9b:	83 ec 0c             	sub    esp,0xc
c0021d9e:	68 b2 34 02 c0       	push   0xc00234b2
c0021da3:	e8 36 e2 fe ff       	call   c000ffde <KePanic(char const*)>
c0021da8:	83 c4 10             	add    esp,0x10
c0021dab:	eb 13                	jmp    c0021dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021dad:	8d 76 00             	lea    esi,[esi+0x0]
c0021db0:	83 ec 0c             	sub    esp,0xc
c0021db3:	68 bc 34 02 c0       	push   0xc00234bc
c0021db8:	e8 21 e2 fe ff       	call   c000ffde <KePanic(char const*)>
c0021dbd:	83 c4 10             	add    esp,0x10
c0021dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021dc7:	8d 50 01             	lea    edx,[eax+0x1]
c0021dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021dd1:	90                   	nop
c0021dd2:	83 c4 0c             	add    esp,0xc
c0021dd5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021dd8 <ACPI::~ACPI()>:
c0021dd8:	83 ec 0c             	sub    esp,0xc
c0021ddb:	ba 4c 3b 02 c0       	mov    edx,0xc0023b4c
c0021de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de4:	89 10                	mov    DWORD PTR [eax],edx
c0021de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dea:	83 ec 0c             	sub    esp,0xc
c0021ded:	50                   	push   eax
c0021dee:	e8 0b 7b fe ff       	call   c00098fe <Device::~Device()>
c0021df3:	83 c4 10             	add    esp,0x10
c0021df6:	90                   	nop
c0021df7:	83 c4 0c             	add    esp,0xc
c0021dfa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021dfc <ACPI::~ACPI()>:
c0021dfc:	83 ec 0c             	sub    esp,0xc
c0021dff:	83 ec 0c             	sub    esp,0xc
c0021e02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e06:	e8 cd ff ff ff       	call   c0021dd8 <ACPI::~ACPI()>
c0021e0b:	83 c4 10             	add    esp,0x10
c0021e0e:	83 ec 08             	sub    esp,0x8
c0021e11:	68 64 12 00 00       	push   0x1264
c0021e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e1a:	e8 00 b5 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0021e1f:	83 c4 10             	add    esp,0x10
c0021e22:	83 c4 0c             	add    esp,0xc
c0021e25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021e28 <LinkedList<Device>::~LinkedList()>:
c0021e28:	90                   	nop
c0021e29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021e2c <LinkedList<Device>::isEmpty()>:
c0021e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e30:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e32:	85 c0                	test   eax,eax
c0021e34:	75 0e                	jne    c0021e44 <LinkedList<Device>::isEmpty()+0x18>
c0021e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e3d:	85 c0                	test   eax,eax
c0021e3f:	75 03                	jne    c0021e44 <LinkedList<Device>::isEmpty()+0x18>
c0021e41:	b0 01                	mov    al,0x1
c0021e43:	c3                   	ret    
c0021e44:	b0 00                	mov    al,0x0
c0021e46:	90                   	nop
c0021e47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021e48 <LinkedList<Device>::getFirstElement()>:
c0021e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e4e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021e50 <LinkedList<Device>::removeFirst()>:
c0021e50:	83 ec 0c             	sub    esp,0xc
c0021e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e57:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e59:	85 c0                	test   eax,eax
c0021e5b:	75 17                	jne    c0021e74 <LinkedList<Device>::removeFirst()+0x24>
c0021e5d:	83 ec 0c             	sub    esp,0xc
c0021e60:	68 2c 37 02 c0       	push   0xc002372c
c0021e65:	e8 74 e1 fe ff       	call   c000ffde <KePanic(char const*)>
c0021e6a:	83 c4 10             	add    esp,0x10
c0021e6d:	e9 92 00 00 00       	jmp    c0021f04 <LinkedList<Device>::removeFirst()+0xb4>
c0021e72:	66 90                	xchg   ax,ax
c0021e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e7b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021e81:	85 c0                	test   eax,eax
c0021e83:	74 13                	je     c0021e98 <LinkedList<Device>::removeFirst()+0x48>
c0021e85:	83 ec 0c             	sub    esp,0xc
c0021e88:	68 77 37 02 c0       	push   0xc0023777
c0021e8d:	e8 4c e1 fe ff       	call   c000ffde <KePanic(char const*)>
c0021e92:	83 c4 10             	add    esp,0x10
c0021e95:	8d 76 00             	lea    esi,[esi+0x0]
c0021e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e9e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021ea4:	85 c0                	test   eax,eax
c0021ea6:	75 34                	jne    c0021edc <LinkedList<Device>::removeFirst()+0x8c>
c0021ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ec1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ec4:	83 f8 01             	cmp    eax,0x1
c0021ec7:	74 27                	je     c0021ef0 <LinkedList<Device>::removeFirst()+0xa0>
c0021ec9:	83 ec 0c             	sub    esp,0xc
c0021ecc:	68 50 37 02 c0       	push   0xc0023750
c0021ed1:	e8 08 e1 fe ff       	call   c000ffde <KePanic(char const*)>
c0021ed6:	83 c4 10             	add    esp,0x10
c0021ed9:	eb 15                	jmp    c0021ef0 <LinkedList<Device>::removeFirst()+0xa0>
c0021edb:	90                   	nop
c0021edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ee0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ee2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eec:	89 10                	mov    DWORD PTR [eax],edx
c0021eee:	66 90                	xchg   ax,ax
c0021ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ef7:	8d 50 ff             	lea    edx,[eax-0x1]
c0021efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021efe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021f01:	8d 76 00             	lea    esi,[esi+0x0]
c0021f04:	83 c4 0c             	add    esp,0xc
c0021f07:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021f08 <Computer::~Computer()>:
c0021f08:	83 ec 0c             	sub    esp,0xc
c0021f0b:	ba fc 3d 02 c0       	mov    edx,0xc0023dfc
c0021f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f14:	89 10                	mov    DWORD PTR [eax],edx
c0021f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f1a:	83 ec 0c             	sub    esp,0xc
c0021f1d:	50                   	push   eax
c0021f1e:	e8 db 79 fe ff       	call   c00098fe <Device::~Device()>
c0021f23:	83 c4 10             	add    esp,0x10
c0021f26:	90                   	nop
c0021f27:	83 c4 0c             	add    esp,0xc
c0021f2a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0021f2c <Computer::~Computer()>:
c0021f2c:	83 ec 0c             	sub    esp,0xc
c0021f2f:	83 ec 0c             	sub    esp,0xc
c0021f32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f36:	e8 cd ff ff ff       	call   c0021f08 <Computer::~Computer()>
c0021f3b:	83 c4 10             	add    esp,0x10
c0021f3e:	83 ec 08             	sub    esp,0x8
c0021f41:	68 6c 01 00 00       	push   0x16c
c0021f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f4a:	e8 d0 b3 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0021f4f:	83 c4 10             	add    esp,0x10
c0021f52:	83 c4 0c             	add    esp,0xc
c0021f55:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021f56 <idleCommon()>:
c0021f56:	83 ec 0c             	sub    esp,0xc
c0021f59:	fa                   	cli    
c0021f5a:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0021f60:	e8 c7 4f ff ff       	call   c0016f2c <schedule()>
c0021f65:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0021f6c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0021f73:	75 01                	jne    c0021f76 <idleCommon()+0x20>
c0021f75:	fb                   	sti    
c0021f76:	83 c4 0c             	add    esp,0xc
c0021f79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021f7a <LinkedList<UnixFile>::~LinkedList()>:
c0021f7a:	90                   	nop
c0021f7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0021f7c <LinkedList<UnixFile>::LinkedList()>:
c0021f7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021f91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f95:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fa0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021faa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021fb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fb5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021fbc:	90                   	nop
c0021fbd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0021fbe <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0021fbe:	83 ec 0c             	sub    esp,0xc
c0021fc1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021fc6:	75 10                	jne    c0021fd8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021fc8:	83 ec 0c             	sub    esp,0xc
c0021fcb:	68 90 34 02 c0       	push   0xc0023490
c0021fd0:	e8 09 e0 fe ff       	call   c000ffde <KePanic(char const*)>
c0021fd5:	83 c4 10             	add    esp,0x10
c0021fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fde:	85 c0                	test   eax,eax
c0021fe0:	74 34                	je     c0022016 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fe9:	85 c0                	test   eax,eax
c0021feb:	74 29                	je     c0022016 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ff4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ff8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022003:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002200d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022014:	eb 65                	jmp    c002207b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002201a:	8b 00                	mov    eax,DWORD PTR [eax]
c002201c:	85 c0                	test   eax,eax
c002201e:	75 4b                	jne    c002206b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022027:	85 c0                	test   eax,eax
c0022029:	75 40                	jne    c002206b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002202b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022033:	89 10                	mov    DWORD PTR [eax],edx
c0022035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022039:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002203d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022047:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002204e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022052:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022055:	85 c0                	test   eax,eax
c0022057:	74 22                	je     c002207b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022059:	83 ec 0c             	sub    esp,0xc
c002205c:	68 b2 34 02 c0       	push   0xc00234b2
c0022061:	e8 78 df fe ff       	call   c000ffde <KePanic(char const*)>
c0022066:	83 c4 10             	add    esp,0x10
c0022069:	eb 10                	jmp    c002207b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002206b:	83 ec 0c             	sub    esp,0xc
c002206e:	68 bc 34 02 c0       	push   0xc00234bc
c0022073:	e8 66 df fe ff       	call   c000ffde <KePanic(char const*)>
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002207f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022082:	8d 50 01             	lea    edx,[eax+0x1]
c0022085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022089:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002208c:	90                   	nop
c002208d:	83 c4 0c             	add    esp,0xc
c0022090:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022092 <LinkedList<UnixFile>::getFirstElement()>:
c0022092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022096:	8b 00                	mov    eax,DWORD PTR [eax]
c0022098:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002209a <LinkedList<UnixFile>::removeFirst()>:
c002209a:	83 ec 0c             	sub    esp,0xc
c002209d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00220a3:	85 c0                	test   eax,eax
c00220a5:	75 12                	jne    c00220b9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00220a7:	83 ec 0c             	sub    esp,0xc
c00220aa:	68 2c 37 02 c0       	push   0xc002372c
c00220af:	e8 2a df fe ff       	call   c000ffde <KePanic(char const*)>
c00220b4:	83 c4 10             	add    esp,0x10
c00220b7:	eb 7e                	jmp    c0022137 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00220b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220c3:	85 c0                	test   eax,eax
c00220c5:	74 10                	je     c00220d7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00220c7:	83 ec 0c             	sub    esp,0xc
c00220ca:	68 77 37 02 c0       	push   0xc0023777
c00220cf:	e8 0a df fe ff       	call   c000ffde <KePanic(char const*)>
c00220d4:	83 c4 10             	add    esp,0x10
c00220d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220db:	8b 00                	mov    eax,DWORD PTR [eax]
c00220dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220e0:	85 c0                	test   eax,eax
c00220e2:	75 33                	jne    c0022117 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00220e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00220ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00220f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220fd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022100:	83 f8 01             	cmp    eax,0x1
c0022103:	74 21                	je     c0022126 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022105:	83 ec 0c             	sub    esp,0xc
c0022108:	68 50 37 02 c0       	push   0xc0023750
c002210d:	e8 cc de fe ff       	call   c000ffde <KePanic(char const*)>
c0022112:	83 c4 10             	add    esp,0x10
c0022115:	eb 0f                	jmp    c0022126 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002211b:	8b 00                	mov    eax,DWORD PTR [eax]
c002211d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022124:	89 10                	mov    DWORD PTR [eax],edx
c0022126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002212a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002212d:	8d 50 ff             	lea    edx,[eax-0x1]
c0022130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022134:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022137:	83 c4 0c             	add    esp,0xc
c002213a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002213c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002213c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022140:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022143:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022144 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022144:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022148:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002214b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002214c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002214c:	90                   	nop
c002214d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022150 <ThreadControlBlock::ThreadControlBlock()>:
c0022150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022154:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002215b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002215f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002216a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022175:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002217c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022180:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0022187:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002218b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002218f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022193:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022197:	90                   	nop
c0022198:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002219c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002219c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00221a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00221b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00221bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00221c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00221d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00221dc:	90                   	nop
c00221dd:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00221de <CPU::~CPU()>:
c00221de:	83 ec 0c             	sub    esp,0xc
c00221e1:	ba 00 55 02 c0       	mov    edx,0xc0025500
c00221e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ea:	89 10                	mov    DWORD PTR [eax],edx
c00221ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f0:	83 ec 0c             	sub    esp,0xc
c00221f3:	50                   	push   eax
c00221f4:	e8 05 77 fe ff       	call   c00098fe <Device::~Device()>
c00221f9:	83 c4 10             	add    esp,0x10
c00221fc:	90                   	nop
c00221fd:	83 c4 0c             	add    esp,0xc
c0022200:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022202 <CPU::~CPU()>:
c0022202:	83 ec 0c             	sub    esp,0xc
c0022205:	83 ec 0c             	sub    esp,0xc
c0022208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002220c:	e8 cd ff ff ff       	call   c00221de <CPU::~CPU()>
c0022211:	83 c4 10             	add    esp,0x10
c0022214:	83 ec 08             	sub    esp,0x8
c0022217:	68 78 11 00 00       	push   0x1178
c002221c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022220:	e8 fa b0 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0022225:	83 c4 10             	add    esp,0x10
c0022228:	83 c4 0c             	add    esp,0xc
c002222b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002222c <PCI::~PCI()>:
c002222c:	83 ec 0c             	sub    esp,0xc
c002222f:	ba 64 5a 02 c0       	mov    edx,0xc0025a64
c0022234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022238:	89 10                	mov    DWORD PTR [eax],edx
c002223a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002223e:	83 ec 0c             	sub    esp,0xc
c0022241:	50                   	push   eax
c0022242:	e8 fd 66 fe ff       	call   c0008944 <Bus::~Bus()>
c0022247:	83 c4 10             	add    esp,0x10
c002224a:	90                   	nop
c002224b:	83 c4 0c             	add    esp,0xc
c002224e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0022250 <PCI::~PCI()>:
c0022250:	83 ec 0c             	sub    esp,0xc
c0022253:	83 ec 0c             	sub    esp,0xc
c0022256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002225a:	e8 cd ff ff ff       	call   c002222c <PCI::~PCI()>
c002225f:	83 c4 10             	add    esp,0x10
c0022262:	83 ec 08             	sub    esp,0x8
c0022265:	68 5c 01 00 00       	push   0x15c
c002226a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002226e:	e8 ac b0 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0022273:	83 c4 10             	add    esp,0x10
c0022276:	83 c4 0c             	add    esp,0xc
c0022279:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002227a <IDE::~IDE()>:
c002227a:	83 ec 0c             	sub    esp,0xc
c002227d:	ba b4 5b 02 c0       	mov    edx,0xc0025bb4
c0022282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022286:	89 10                	mov    DWORD PTR [eax],edx
c0022288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228c:	83 ec 0c             	sub    esp,0xc
c002228f:	50                   	push   eax
c0022290:	e8 f7 7a fe ff       	call   c0009d8c <HardDiskController::~HardDiskController()>
c0022295:	83 c4 10             	add    esp,0x10
c0022298:	90                   	nop
c0022299:	83 c4 0c             	add    esp,0xc
c002229c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002229e <IDE::~IDE()>:
c002229e:	83 ec 0c             	sub    esp,0xc
c00222a1:	83 ec 0c             	sub    esp,0xc
c00222a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222a8:	e8 cd ff ff ff       	call   c002227a <IDE::~IDE()>
c00222ad:	83 c4 10             	add    esp,0x10
c00222b0:	83 ec 08             	sub    esp,0x8
c00222b3:	68 70 02 00 00       	push   0x270
c00222b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222bc:	e8 5e b0 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00222c1:	83 c4 10             	add    esp,0x10
c00222c4:	83 c4 0c             	add    esp,0xc
c00222c7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00222c8 <SATABus::~SATABus()>:
c00222c8:	83 ec 0c             	sub    esp,0xc
c00222cb:	ba 04 5c 02 c0       	mov    edx,0xc0025c04
c00222d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d4:	89 10                	mov    DWORD PTR [eax],edx
c00222d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222da:	83 ec 0c             	sub    esp,0xc
c00222dd:	50                   	push   eax
c00222de:	e8 a9 7a fe ff       	call   c0009d8c <HardDiskController::~HardDiskController()>
c00222e3:	83 c4 10             	add    esp,0x10
c00222e6:	90                   	nop
c00222e7:	83 c4 0c             	add    esp,0xc
c00222ea:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00222ec <SATABus::~SATABus()>:
c00222ec:	83 ec 0c             	sub    esp,0xc
c00222ef:	83 ec 0c             	sub    esp,0xc
c00222f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222f6:	e8 cd ff ff ff       	call   c00222c8 <SATABus::~SATABus()>
c00222fb:	83 c4 10             	add    esp,0x10
c00222fe:	83 ec 08             	sub    esp,0x8
c0022301:	68 64 01 00 00       	push   0x164
c0022306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002230a:	e8 10 b0 fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c002230f:	83 c4 10             	add    esp,0x10
c0022312:	83 c4 0c             	add    esp,0xc
c0022315:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022316 <ATA::~ATA()>:
c0022316:	83 ec 0c             	sub    esp,0xc
c0022319:	ba ec 5c 02 c0       	mov    edx,0xc0025cec
c002231e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022322:	89 10                	mov    DWORD PTR [eax],edx
c0022324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022328:	83 ec 0c             	sub    esp,0xc
c002232b:	50                   	push   eax
c002232c:	e8 3d 7b fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c0022331:	83 c4 10             	add    esp,0x10
c0022334:	90                   	nop
c0022335:	83 c4 0c             	add    esp,0xc
c0022338:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002233a <ATA::~ATA()>:
c002233a:	83 ec 0c             	sub    esp,0xc
c002233d:	83 ec 0c             	sub    esp,0xc
c0022340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022344:	e8 cd ff ff ff       	call   c0022316 <ATA::~ATA()>
c0022349:	83 c4 10             	add    esp,0x10
c002234c:	83 ec 08             	sub    esp,0x8
c002234f:	68 8c 01 00 00       	push   0x18c
c0022354:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022358:	e8 c2 af fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c002235d:	83 c4 10             	add    esp,0x10
c0022360:	83 c4 0c             	add    esp,0xc
c0022363:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022364 <ATAPI::~ATAPI()>:
c0022364:	83 ec 0c             	sub    esp,0xc
c0022367:	ba 34 5d 02 c0       	mov    edx,0xc0025d34
c002236c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022370:	89 10                	mov    DWORD PTR [eax],edx
c0022372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022376:	83 ec 0c             	sub    esp,0xc
c0022379:	50                   	push   eax
c002237a:	e8 ef 7a fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c002237f:	83 c4 10             	add    esp,0x10
c0022382:	90                   	nop
c0022383:	83 c4 0c             	add    esp,0xc
c0022386:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022388 <ATAPI::~ATAPI()>:
c0022388:	83 ec 0c             	sub    esp,0xc
c002238b:	83 ec 0c             	sub    esp,0xc
c002238e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022392:	e8 cd ff ff ff       	call   c0022364 <ATAPI::~ATAPI()>
c0022397:	83 c4 10             	add    esp,0x10
c002239a:	83 ec 08             	sub    esp,0x8
c002239d:	68 84 01 00 00       	push   0x184
c00223a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223a6:	e8 74 af fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00223ab:	83 c4 10             	add    esp,0x10
c00223ae:	83 c4 0c             	add    esp,0xc
c00223b1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00223b2 <SATA::~SATA()>:
c00223b2:	83 ec 0c             	sub    esp,0xc
c00223b5:	ba f4 5d 02 c0       	mov    edx,0xc0025df4
c00223ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223be:	89 10                	mov    DWORD PTR [eax],edx
c00223c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c4:	83 ec 0c             	sub    esp,0xc
c00223c7:	50                   	push   eax
c00223c8:	e8 a1 7a fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c00223cd:	83 c4 10             	add    esp,0x10
c00223d0:	90                   	nop
c00223d1:	83 c4 0c             	add    esp,0xc
c00223d4:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00223d6 <SATA::~SATA()>:
c00223d6:	83 ec 0c             	sub    esp,0xc
c00223d9:	83 ec 0c             	sub    esp,0xc
c00223dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223e0:	e8 cd ff ff ff       	call   c00223b2 <SATA::~SATA()>
c00223e5:	83 c4 10             	add    esp,0x10
c00223e8:	83 ec 08             	sub    esp,0x8
c00223eb:	68 7c 01 00 00       	push   0x17c
c00223f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223f4:	e8 26 af fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00223f9:	83 c4 10             	add    esp,0x10
c00223fc:	83 c4 0c             	add    esp,0xc
c00223ff:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022400 <SATAPI::~SATAPI()>:
c0022400:	83 ec 0c             	sub    esp,0xc
c0022403:	ba 18 5f 02 c0       	mov    edx,0xc0025f18
c0022408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002240c:	89 10                	mov    DWORD PTR [eax],edx
c002240e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022412:	83 ec 0c             	sub    esp,0xc
c0022415:	50                   	push   eax
c0022416:	e8 53 7a fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c002241b:	83 c4 10             	add    esp,0x10
c002241e:	90                   	nop
c002241f:	83 c4 0c             	add    esp,0xc
c0022422:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022424 <SATAPI::~SATAPI()>:
c0022424:	83 ec 0c             	sub    esp,0xc
c0022427:	83 ec 0c             	sub    esp,0xc
c002242a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002242e:	e8 cd ff ff ff       	call   c0022400 <SATAPI::~SATAPI()>
c0022433:	83 c4 10             	add    esp,0x10
c0022436:	83 ec 08             	sub    esp,0x8
c0022439:	68 84 01 00 00       	push   0x184
c002243e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022442:	e8 d8 ae fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0022447:	83 c4 10             	add    esp,0x10
c002244a:	83 c4 0c             	add    esp,0xc
c002244d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002244e <IOAPIC::~IOAPIC()>:
c002244e:	83 ec 0c             	sub    esp,0xc
c0022451:	ba 78 5f 02 c0       	mov    edx,0xc0025f78
c0022456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002245a:	89 10                	mov    DWORD PTR [eax],edx
c002245c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022460:	83 ec 0c             	sub    esp,0xc
c0022463:	50                   	push   eax
c0022464:	e8 95 74 fe ff       	call   c00098fe <Device::~Device()>
c0022469:	83 c4 10             	add    esp,0x10
c002246c:	90                   	nop
c002246d:	83 c4 0c             	add    esp,0xc
c0022470:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022472 <IOAPIC::~IOAPIC()>:
c0022472:	83 ec 0c             	sub    esp,0xc
c0022475:	83 ec 0c             	sub    esp,0xc
c0022478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002247c:	e8 cd ff ff ff       	call   c002244e <IOAPIC::~IOAPIC()>
c0022481:	83 c4 10             	add    esp,0x10
c0022484:	83 ec 08             	sub    esp,0x8
c0022487:	68 68 01 00 00       	push   0x168
c002248c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022490:	e8 8a ae fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0022495:	83 c4 10             	add    esp,0x10
c0022498:	83 c4 0c             	add    esp,0xc
c002249b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002249c <APICTimer::~APICTimer()>:
c002249c:	83 ec 0c             	sub    esp,0xc
c002249f:	ba c0 5f 02 c0       	mov    edx,0xc0025fc0
c00224a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a8:	89 10                	mov    DWORD PTR [eax],edx
c00224aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ae:	83 ec 0c             	sub    esp,0xc
c00224b1:	50                   	push   eax
c00224b2:	e8 85 8b fe ff       	call   c000b03c <Timer::~Timer()>
c00224b7:	83 c4 10             	add    esp,0x10
c00224ba:	90                   	nop
c00224bb:	83 c4 0c             	add    esp,0xc
c00224be:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00224c0 <APICTimer::~APICTimer()>:
c00224c0:	83 ec 0c             	sub    esp,0xc
c00224c3:	83 ec 0c             	sub    esp,0xc
c00224c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224ca:	e8 cd ff ff ff       	call   c002249c <APICTimer::~APICTimer()>
c00224cf:	83 c4 10             	add    esp,0x10
c00224d2:	83 ec 08             	sub    esp,0x8
c00224d5:	68 60 01 00 00       	push   0x160
c00224da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224de:	e8 3c ae fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c00224e3:	83 c4 10             	add    esp,0x10
c00224e6:	83 c4 0c             	add    esp,0xc
c00224e9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00224ec <PIT::~PIT()>:
c00224ec:	83 ec 0c             	sub    esp,0xc
c00224ef:	ba 10 60 02 c0       	mov    edx,0xc0026010
c00224f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224f8:	89 10                	mov    DWORD PTR [eax],edx
c00224fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224fe:	83 ec 0c             	sub    esp,0xc
c0022501:	50                   	push   eax
c0022502:	e8 35 8b fe ff       	call   c000b03c <Timer::~Timer()>
c0022507:	83 c4 10             	add    esp,0x10
c002250a:	90                   	nop
c002250b:	83 c4 0c             	add    esp,0xc
c002250e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022510 <PIT::~PIT()>:
c0022510:	83 ec 0c             	sub    esp,0xc
c0022513:	83 ec 0c             	sub    esp,0xc
c0022516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002251a:	e8 cd ff ff ff       	call   c00224ec <PIT::~PIT()>
c002251f:	83 c4 10             	add    esp,0x10
c0022522:	83 ec 08             	sub    esp,0x8
c0022525:	68 5c 01 00 00       	push   0x15c
c002252a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002252e:	e8 ec ad fe ff       	call   c000d31f <operator delete(void*, unsigned long)>
c0022533:	83 c4 10             	add    esp,0x10
c0022536:	83 c4 0c             	add    esp,0xc
c0022539:	c3                   	ret    

Disassembly of section userkernel:

c0027000 <KiDefaultSignalHandlerAbort(int)>:
c0027000:	57                   	push   edi
c0027001:	b9 07 00 00 00       	mov    ecx,0x7
c0027006:	56                   	push   esi
c0027007:	be df 41 02 c0       	mov    esi,0xc00241df
c002700c:	83 ec 24             	sub    esp,0x24
c002700f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0027013:	fc                   	cld    
c0027014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002701a:	50                   	push   eax
c002701b:	6a 00                	push   0x0
c002701d:	6a 38                	push   0x38
c002701f:	6a 01                	push   0x1
c0027021:	e8 2c 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0027026:	83 c4 34             	add    esp,0x34
c0027029:	5e                   	pop    esi
c002702a:	5f                   	pop    edi
c002702b:	c3                   	ret    

c002702c <KiDefaultSignalHandlerTerminate(int)>:
c002702c:	57                   	push   edi
c002702d:	b9 08 00 00 00       	mov    ecx,0x8
c0027032:	56                   	push   esi
c0027033:	be fb 41 02 c0       	mov    esi,0xc00241fb
c0027038:	83 ec 24             	sub    esp,0x24
c002703b:	89 e7                	mov    edi,esp
c002703d:	fc                   	cld    
c002703e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027040:	54                   	push   esp
c0027041:	6a 00                	push   0x0
c0027043:	6a 37                	push   0x37
c0027045:	6a 01                	push   0x1
c0027047:	e8 06 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002704c:	83 c4 34             	add    esp,0x34
c002704f:	5e                   	pop    esi
c0027050:	5f                   	pop    edi
c0027051:	c3                   	ret    

c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0027052:	53                   	push   ebx
c0027053:	83 ec 10             	sub    esp,0x10
c0027056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002705a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027066:	cd 60                	int    0x60
c0027068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002706c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	5b                   	pop    ebx
c002707c:	c3                   	ret    

Disassembly of section align_previous:

c0028000 <DO_NOT_DELETE()>:
c0028000:	c3                   	ret    
