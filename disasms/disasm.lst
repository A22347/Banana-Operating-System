
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 2f f7 00 00       	call   c000f74f <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e8 5d 02 c0       	mov    eax,0xc0025de8
c0000025:	3d e8 5d 02 c0       	cmp    eax,0xc0025de8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e8 5d 02 c0       	push   0xc0025de8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e8 5d 02 c0       	mov    eax,0xc0025de8
c0000051:	2d e8 5d 02 c0       	sub    eax,0xc0025de8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e8 5d 02 c0       	push   0xc0025de8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 70 02 c0 00 	cmp    BYTE PTR ds:0xc00270c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 80 1a 02 c0       	mov    ebx,0xc0021a80
c0000097:	81 eb 7c 1a 02 c0    	sub    ebx,0xc0021a7c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 7c 1a 02 c0       	mov    esi,0xc0021a7c
c00000a6:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 70 02 c0       	mov    ds:0xc00270c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e8 5d 02 c0       	push   0xc0025de8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 70 02 c0 01 	mov    BYTE PTR ds:0xc00270c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 70 02 c0       	push   0xc00270c8
c0000108:	68 e8 5d 02 c0       	push   0xc0025de8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 cb 59 01 00       	call   c0015c78 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 f8 3c 01 00       	call   c0013fbd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 a9 59 01 00       	call   c0015c78 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ea 5e 01 00       	call   c00161d8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 a5 63 01 00       	call   c001669c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 d0 02 c0 	lgdtd  ds:0xc002d0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 f2 e8 00 00       	jmp    c000ec71 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 a0 1a 02 c0 02 	test   BYTE PTR [edx-0x3ffde560],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 a0 1a 02 c0 01 	test   BYTE PTR [edx-0x3ffde560],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 a0 1a 02 c0 08 	test   BYTE PTR [edx-0x3ffde560],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 a0 1a 02 c0 04 	test   BYTE PTR [ecx-0x3ffde560],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 a0 1a 02 c0 01 	test   BYTE PTR [edx-0x3ffde560],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 71 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd8efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 71 02 c0    	mov    ecx,DWORD PTR ds:0xc002713c
c0000df7:	c7 42 0c 34 71 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 71 02 c0 02 	test   BYTE PTR ds:0xc0027100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 74 02 c0    	dec    DWORD PTR ds:0xc0027450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 74 02 c0    	sub    DWORD PTR ds:0xc0027464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 3d e6 00 00       	call   c000f49d <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 4a e5 00 00       	call   c000f43f <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 29 e4 00 00       	call   c000f409 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 24 e4 00 00       	call   c000f43f <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 d0 e2 00 00       	call   c000f409 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 b6 e2 00 00       	call   c000f409 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 8c e2 00 00       	call   c000f409 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 71 02 c0    	mov    edi,DWORD PTR ds:0xc0027100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 71 02 c0       	mov    eax,0xc0027100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 71 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 71 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 71 02 c0 	lea    edx,[eax*8-0x3ffd8ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027140
c00012e5:	81 fb 34 71 02 c0    	cmp    ebx,0xc0027134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 71 02 c0       	cmp    eax,0xc0027134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 71 02 c0    	cmp    DWORD PTR ds:0xc0027130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 71 02 c0       	mov    ds:0xc002713c,eax
c0001321:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001326:	a3 30 71 02 c0       	mov    ds:0xc0027130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c0001334:	c7 40 0c 34 71 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 70 02 c0 	lea    ebp,[edx*4-0x3ffd8f08]
c0001385:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 71 02 c0 	lea    ecx,[edx*4-0x3ffd8f00]
c00013a0:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 74 02 c0 	or     DWORD PTR [edi*4-0x3ffd8bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 71 02 c0 	lea    eax,[eax*8-0x3ffd8ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,ecx
c000145a:	89 0d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,ecx
c0001460:	c7 41 08 34 71 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027134
c0001467:	c7 41 0c 34 71 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 71 02 c0 	lea    edx,[ecx*8-0x3ffd8ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 71 02 c0 	lea    edx,[eax*4-0x3ffd8ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 74 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edi
c000152d:	89 3d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edi
c0001533:	c7 47 08 34 71 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027134
c000153a:	c7 47 0c 34 71 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 71 02 c0    	mov    DWORD PTR ds:0xc0027130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 71 02 c0       	mov    edx,0xc0027100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 74 02 c0    	push   DWORD PTR ds:0xc002745c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 74 02 c0       	mov    eax,ds:0xc002745c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 71 02 c0 00 	cmp    DWORD PTR ds:0xc002712c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 71 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 71 02 c0       	mov    eax,0xc0027134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 74 02 c0       	cmp    eax,0xc002742c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 74 02 c0       	mov    eax,ds:0xc0027468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 a4 1b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde45c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 71 02 c0       	mov    ds:0xc0027100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 74 02 c0    	mov    DWORD PTR ds:0xc0027444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 74 02 c0    	mov    DWORD PTR ds:0xc0027448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 74 02 c0    	mov    DWORD PTR ds:0xc002744c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 c0 db 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2440]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 35 93 01 00       	jmp    c001b2c0 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 c0 db 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2440]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 5f 93 01 00       	jmp    c001b300 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 c0 db 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2440]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 80 93 01 00       	jmp    c001b340 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 00 1d 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffde300]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 00 1d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde300]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 84 49 02 c0       	mov    edx,0xc0024984
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 74 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 74 02 c0    	mov    ax,ds:0xc0027480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 74 02 c0    	mov    ds:0xc0027480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 c2 1b 02 c0       	mov    eax,0xc0021bc2
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 80 1c 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffde380]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 cb 1b 02 c0       	mov    eax,0xc0021bcb
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 00 1d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde300]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 50 1c 02 c0       	mov    eax,0xc0021c50
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 40 1c 02 c0       	mov    ebx,0xc0021c40
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 20 1c 02 c0       	mov    eax,0xc0021c20
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 30 1c 02 c0       	mov    eax,0xc0021c30
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba d2 1b 02 c0       	mov    edx,0xc0021bd2
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba de 1b 02 c0       	mov    edx,0xc0021bde
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba f2 1b 02 c0       	mov    edx,0xc0021bf2
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 08 97 00 00       	call   c000f51f <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 00 97 00 00       	call   c000f52f <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 20 20 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022020
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 20 20 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022020
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 20 1e 02 c0       	mov    eax,0xc0021e20
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 60 1d 02 c0       	mov    eax,0xc0021d60
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 20 1d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde2e0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 20 21 02 c0       	push   0xc0022120
c0006303:	e8 54 59 01 00       	call   c001bc5c <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 2e 21 02 c0       	push   0xc002212e
c000633b:	e8 1c 59 01 00       	call   c001bc5c <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 75 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 85 58 01 00       	call   c001bc00 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 70 02 c0       	mov    eax,0xc0027080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 70 02 c0       	mov    eax,0xc0027020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 7e 02 c0    	mov    ebp,DWORD PTR ds:0xc0027eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 3d 21 02 c0       	push   0xc002213d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 7e 02 c0       	mov    ecx,0xc0027e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 75 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd8ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd8ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8abc],esi
c0006746:	89 87 40 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ac0],eax
c000674c:	c7 87 48 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8a30],0x0
c0006768:	89 87 4c 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 75 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd8a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c00067e1:	8b 8d 4c 75 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd8ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 75 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd8ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 70 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 75 02 c0    	add    DWORD PTR [ebp-0x3ffd8ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 75 02 c0    	lea    ecx,[ebp-0x3ffd8ac0]
c00068d9:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 75 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd8ab4]
c0006917:	05 40 75 02 c0       	add    eax,0xc0027540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 75 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd8ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 75 02 c0    	lea    edi,[eax-0x3ffd8ac0]
c00069d6:	83 b8 40 75 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd8ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 40 21 02 c0       	push   0xc0022140
c00069fa:	e8 5d 52 01 00       	call   c001bc5c <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 71 52 01 00       	call   c001bc78 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 45 21 02 c0 	mov    DWORD PTR [esp],0xc0022145
c0006a14:	e8 43 52 01 00       	call   c001bc5c <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8ac0]
c0006a20:	e8 53 52 01 00       	call   c001bc78 <iso_kprintfd>
c0006a25:	c7 04 24 4b 21 02 c0 	mov    DWORD PTR [esp],0xc002214b
c0006a2c:	e8 2b 52 01 00       	call   c001bc5c <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8abc]
c0006a38:	e8 3b 52 01 00       	call   c001bc78 <iso_kprintfd>
c0006a3d:	c7 04 24 51 21 02 c0 	mov    DWORD PTR [esp],0xc0022151
c0006a44:	e8 13 52 01 00       	call   c001bc5c <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8a30]
c0006a50:	e8 23 52 01 00       	call   c001bc78 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 75 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd8ab8]
c0006ab6:	81 c2 40 75 02 c0    	add    edx,0xc0027540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 75 02 c0    	lea    ebp,[eax-0x3ffd8aa8]
c0006b12:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 75 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd8aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 3d 21 02 c0       	push   0xc002213d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 75 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd8aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8ab0],eax
c0006bee:	89 93 54 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8aac],edx
c0006bf4:	81 c3 40 75 02 c0    	add    ebx,0xc0027540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 75 02 c0       	add    eax,0xc0027550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 5a 21 02 c0       	push   0xc002215a
c0006c19:	e8 3e 50 01 00       	call   c001bc5c <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 70 02 c0       	mov    ds:0xc0027060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb4,0x0
c0006c4e:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 65 21 02 c0       	push   0xc0022165
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 7e 02 c0       	mov    ds:0xc0027eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 6c 21 02 c0       	push   0xc002216c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 70 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd8f80]
c0006cec:	bf 80 7e 02 c0       	mov    edi,0xc0027e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 7e 02 c0       	mov    eax,0xc0027e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 7e 02 c0       	mov    ds:0xc0027ea8,eax
c0006d0f:	b8 8a 7e 02 c0       	mov    eax,0xc0027e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 7e 02 c0       	mov    ds:0xc0027ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 73 21 02 c0       	push   0xc0022173
c0006d30:	e8 27 4f 01 00       	call   c001bc5c <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 7e 21 02 c0       	push   0xc002217e
c0006d4b:	e8 0c 4f 01 00       	call   c001bc5c <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 75 02 c0       	push   0xc0027540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0027540,0xffffffff
c0006d75:	e8 a5 87 00 00       	call   c000f51f <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 7e 02 c0       	mov    ds:0xc0027eb0,eax
c0006d86:	e8 94 87 00 00       	call   c000f51f <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 75 02 c0       	mov    ds:0xc0027520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 7f 87 00 00       	call   c000f51f <malloc>
c0006da0:	89 04 9d 80 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 66 87 00 00       	call   c000f51f <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8f80]
c0006de6:	e8 44 87 00 00       	call   c000f52f <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 36 87 00 00       	call   c000f52f <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 7e 02 c0       	mov    eax,ds:0xc0027eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 1c 87 00 00       	call   c000f52f <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 75 02 c0       	mov    eax,ds:0xc0027520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 07 87 00 00       	call   c000f52f <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027520,0x0
c0006e35:	c7 05 b0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 90 21 02 c0       	mov    esi,0xc0022190
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 8f 21 02 c0       	mov    al,ds:0xc002218f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 24 d1 02 c0 10 	test   BYTE PTR ds:0xc002d124,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 24 d1 02 c0 10 	test   BYTE PTR ds:0xc002d124,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 a0 21 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdde60]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 f0 22 02 c0       	push   0xc00222f0
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 04 23 02 c0       	push   0xc0022304
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 0e 23 02 c0       	push   0xc002230e
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 18 23 02 c0       	push   0xc0022318
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 5c 24 02 c0       	push   0xc002245c
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 22 23 02 c0       	push   0xc0022322
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 7c 24 02 c0       	push   0xc002247c
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 37 23 02 c0       	push   0xc0022337
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 51 23 02 c0       	push   0xc0022351
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 a0 53 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdac60]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 a4 24 02 c0       	push   0xc00224a4
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 5c 24 02 c0       	push   0xc002245c
c00071d4:	e8 8d 86 00 00       	call   c000f866 <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 ec 24 02 c0       	push   0xc00224ec
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 ec 24 02 c0       	push   0xc00224ec
c0007203:	e8 5e 86 00 00       	call   c000f866 <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 5c 23 02 c0       	push   0xc002235c
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 5c 23 02 c0       	push   0xc002235c
c000722f:	e8 32 86 00 00       	call   c000f866 <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 79 23 02 c0       	push   0xc0022379
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 79 23 02 c0       	push   0xc0022379
c000725b:	e8 06 86 00 00       	call   c000f866 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 0c 25 02 c0       	push   0xc002250c
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 0c 25 02 c0       	push   0xc002250c
c0007287:	e8 da 85 00 00       	call   c000f866 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 30 25 02 c0       	push   0xc0022530
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 30 25 02 c0       	push   0xc0022530
c00072b3:	e8 ae 85 00 00       	call   c000f866 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 95 23 02 c0       	push   0xc0022395
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 95 23 02 c0       	push   0xc0022395
c00072df:	e8 82 85 00 00       	call   c000f866 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 b1 23 02 c0       	push   0xc00223b1
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 b1 23 02 c0       	push   0xc00223b1
c000730b:	e8 56 85 00 00       	call   c000f866 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 50 25 02 c0       	push   0xc0022550
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 50 25 02 c0       	push   0xc0022550
c0007337:	e8 2a 85 00 00       	call   c000f866 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 74 25 02 c0       	push   0xc0022574
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 74 25 02 c0       	push   0xc0022574
c0007363:	e8 fe 84 00 00       	call   c000f866 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 83 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd7d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 83 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd7d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 83 02 c0    	mov    BYTE PTR [ebx-0x3ffd7d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 55 81 00 00       	call   c000f51f <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c00073d5:	68 93 25 02 c0       	push   0xc0022593
c00073da:	50                   	push   eax
c00073db:	e8 52 0d 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 b1 25 02 c0       	push   0xc00225b1
c00073ef:	e8 72 84 00 00       	call   c000f866 <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 4f 0d 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 cb 25 02 c0       	push   0xc00225cb
c0007410:	e8 51 84 00 00       	call   c000f866 <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 e5 25 02 c0       	push   0xc00225e5
c0007457:	e8 0a 84 00 00       	call   c000f866 <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 7e 02 c0 	lea    edx,[esi*8-0x3ffd8120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 ff 25 02 c0       	push   0xc00225ff
c0007487:	e8 da 83 00 00       	call   c000f866 <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 13 0d 00 00       	call   c00081ae <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 5c 67 00 00       	call   c000dc35 <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 67 8d 00 00       	call   c001025a <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 a3 02 c0    	mov    ebp,DWORD PTR ds:0xc002a300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 a3 02 c0    	mov    DWORD PTR ds:0xc002a300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 19 26 02 c0       	push   0xc0022619
c000752c:	e8 35 83 00 00       	call   c000f866 <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd811c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 7e 02 c0       	mov    ds:0xc0027ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 83 02 c0       	push   0xc0028300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 10 54 00 00       	call   c000ca21 <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 02 7f 00 00       	call   c000f51f <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0007628:	68 93 25 02 c0       	push   0xc0022593
c000762d:	50                   	push   eax
c000762e:	e8 ff 0a 00 00       	call   c0008132 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 22 26 02 c0       	push   0xc0022622
c0007642:	e8 1f 82 00 00       	call   c000f866 <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 c1 0d 00 00       	call   c0008414 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 ec 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 3f 26 02 c0       	push   0xc002263f
c0007673:	e8 ee 81 00 00       	call   c000f866 <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 2a 0b 00 00       	call   c00081ae <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 b2 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 5c 26 02 c0       	push   0xc002265c
c00076ad:	e8 b4 81 00 00       	call   c000f866 <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 a3 02 c0    	inc    DWORD PTR ds:0xc002a300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 90 0a 00 00       	call   c00081ae <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 7e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd8120]
c0007790:	8b 14 dd e4 7e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd811c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 73 7d 00 00       	call   c000f51f <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c00077b7:	68 93 25 02 c0       	push   0xc0022593
c00077bc:	50                   	push   eax
c00077bd:	e8 70 09 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 77 26 02 c0       	push   0xc0022677
c00077d1:	e8 90 80 00 00       	call   c000f866 <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 30 0c 00 00       	call   c0008414 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 5b 09 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 92 26 02 c0       	push   0xc0022692
c0007804:	e8 5d 80 00 00       	call   c000f866 <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 45 09 00 00       	call   c00081ae <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 27 09 00 00       	call   c00081ae <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 4c 7c 00 00       	call   c000f51f <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 4d 08 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 56 08 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 bd 0a 00 00       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 97 07 00 00       	call   c00081ae <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 7e 07 00 00       	call   c00081ae <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 c2 7a 00 00       	call   c000f51f <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 c5 06 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be ad 26 02 c0       	mov    esi,0xc00226ad
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 5a 06 00 00       	call   c00081ae <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 42 06 00 00       	call   c00081ae <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba 84 27 02 c0       	mov    edx,0xc0022784
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 ef ac 00 00       	call   c00129de <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 8c 4e 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba a0 27 02 c0       	mov    edx,0xc00227a0
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 a1 ac 00 00       	call   c00129de <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 3e 4e 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba 18 27 02 c0       	mov    edx,0xc0022718
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 a3 02 c0       	mov    ds:0xc002a304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba 18 27 02 c0       	mov    edx,0xc0022718
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 e8 4d 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 25 77 00 00       	call   c000f51f <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 5a 36 01 00       	call   c001b45c <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 11 77 00 00       	call   c000f51f <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 72 45 01 00       	call   c001c388 <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 43 42 02 c0       	push   0xc0024243
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 b6 26 02 c0       	push   0xc00226b6
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 d1 26 02 c0       	push   0xc00226d1
c000801f:	e8 42 78 00 00       	call   c000f866 <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 aa a7 00 00       	call   c00127f8 <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba 84 27 02 c0       	mov    edx,0xc0022784
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080a4:	83 c2 0d             	add    edx,0xd
c00080a7:	83 ec 04             	sub    esp,0x4
c00080aa:	50                   	push   eax
c00080ab:	52                   	push   edx
c00080ac:	68 f7 26 02 c0       	push   0xc00226f7
c00080b1:	e8 ae ee ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00080b6:	83 c4 10             	add    esp,0x10
c00080b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080c0:	83 e8 41             	sub    eax,0x41
c00080c3:	88 c2                	mov    dl,al
c00080c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080e1:	0f b6 c0             	movzx  eax,al
c00080e4:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c00080eb:	85 c0                	test   eax,eax
c00080ed:	74 3e                	je     c000812d <File::File(char const*, Process*, bool)+0xf9>
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f9:	0f b6 c0             	movzx  eax,al
c00080fc:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c0008103:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008109:	85 c0                	test   eax,eax
c000810b:	75 20                	jne    c000812d <File::File(char const*, Process*, bool)+0xf9>
c000810d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008111:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008117:	0f b6 c0             	movzx  eax,al
c000811a:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c0008121:	83 ec 0c             	sub    esp,0xc
c0008124:	50                   	push   eax
c0008125:	e8 18 21 00 00       	call   c000a242 <LogicalDisk::mount()>
c000812a:	83 c4 10             	add    esp,0x10
c000812d:	90                   	nop
c000812e:	83 c4 1c             	add    esp,0x1c
c0008131:	c3                   	ret    

c0008132 <File::File(char const*, Process*)>:
c0008132:	83 ec 0c             	sub    esp,0xc
c0008135:	6a 01                	push   0x1
c0008137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008143:	e8 ec fe ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	90                   	nop
c000814c:	83 c4 0c             	add    esp,0xc
c000814f:	c3                   	ret    

c0008150 <File::open(FileOpenMode)>:
c0008150:	53                   	push   ebx
c0008151:	b8 0b 00 00 00       	mov    eax,0xb
c0008156:	83 ec 08             	sub    esp,0x8
c0008159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000815d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008164:	83 fa 19             	cmp    edx,0x19
c0008167:	77 40                	ja     c00081a9 <File::open(FileOpenMode)+0x59>
c0008169:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c0008170:	85 d2                	test   edx,edx
c0008172:	74 35                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c0008174:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000817a:	85 d2                	test   edx,edx
c000817c:	74 2b                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c000817e:	b8 06 00 00 00       	mov    eax,0x6
c0008183:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008187:	75 20                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c0008189:	8b 02                	mov    eax,DWORD PTR [edx]
c000818b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008195:	51                   	push   ecx
c0008196:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008199:	51                   	push   ecx
c000819a:	52                   	push   edx
c000819b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	85 c0                	test   eax,eax
c00081a3:	75 04                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c00081a5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a9:	83 c4 08             	add    esp,0x8
c00081ac:	5b                   	pop    ebx
c00081ad:	c3                   	ret    

c00081ae <File::close()>:
c00081ae:	53                   	push   ebx
c00081af:	b8 0b 00 00 00       	mov    eax,0xb
c00081b4:	83 ec 08             	sub    esp,0x8
c00081b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081c2:	83 f9 19             	cmp    ecx,0x19
c00081c5:	77 41                	ja     c0008208 <File::close()+0x5a>
c00081c7:	8b 1c 8d e0 aa 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5520]
c00081ce:	85 db                	test   ebx,ebx
c00081d0:	74 36                	je     c0008208 <File::close()+0x5a>
c00081d2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d9:	74 2d                	je     c0008208 <File::close()+0x5a>
c00081db:	b8 05 00 00 00       	mov    eax,0x5
c00081e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081e4:	74 22                	je     c0008208 <File::close()+0x5a>
c00081e6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ea:	8b 04 8d e0 aa 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5520]
c00081f1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f7:	53                   	push   ebx
c00081f8:	53                   	push   ebx
c00081f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081fb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008201:	50                   	push   eax
c0008202:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	83 c4 08             	add    esp,0x8
c000820b:	5b                   	pop    ebx
c000820c:	c3                   	ret    
c000820d:	90                   	nop

c000820e <File::seek(unsigned long long)>:
c000820e:	56                   	push   esi
c000820f:	53                   	push   ebx
c0008210:	b8 0b 00 00 00       	mov    eax,0xb
c0008215:	51                   	push   ecx
c0008216:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000821a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000821e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008225:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008229:	83 fa 19             	cmp    edx,0x19
c000822c:	77 31                	ja     c000825f <File::seek(unsigned long long)+0x51>
c000822e:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c0008235:	85 d2                	test   edx,edx
c0008237:	74 26                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008239:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000823f:	85 d2                	test   edx,edx
c0008241:	74 1c                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008243:	b8 05 00 00 00       	mov    eax,0x5
c0008248:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000824c:	74 11                	je     c000825f <File::seek(unsigned long long)+0x51>
c000824e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008250:	53                   	push   ebx
c0008251:	51                   	push   ecx
c0008252:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008258:	52                   	push   edx
c0008259:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000825c:	83 c4 10             	add    esp,0x10
c000825f:	5a                   	pop    edx
c0008260:	5b                   	pop    ebx
c0008261:	5e                   	pop    esi
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::truncate(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	53                   	push   ebx
c0008266:	b8 0b 00 00 00       	mov    eax,0xb
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008299:	b8 05 00 00 00       	mov    eax,0x5
c000829e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a2:	74 11                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::tell(unsigned long long*)>:
c00082ba:	83 ec 0c             	sub    esp,0xc
c00082bd:	b8 0b 00 00 00       	mov    eax,0xb
c00082c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082cd:	83 fa 19             	cmp    edx,0x19
c00082d0:	77 34                	ja     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082d2:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c00082d9:	85 d2                	test   edx,edx
c00082db:	74 29                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 1f                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082e7:	b8 05 00 00 00       	mov    eax,0x5
c00082ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082f0:	74 14                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082f2:	50                   	push   eax
c00082f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082ff:	52                   	push   edx
c0008300:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008303:	83 c4 10             	add    esp,0x10
c0008306:	83 c4 0c             	add    esp,0xc
c0008309:	c3                   	ret    

c000830a <File::rewind()>:
c000830a:	83 ec 10             	sub    esp,0x10
c000830d:	6a 00                	push   0x0
c000830f:	6a 00                	push   0x0
c0008311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008315:	e8 f4 fe ff ff       	call   c000820e <File::seek(unsigned long long)>
c000831a:	83 c4 1c             	add    esp,0x1c
c000831d:	c3                   	ret    

c000831e <File::unlink()>:
c000831e:	83 ec 0c             	sub    esp,0xc
c0008321:	b8 0b 00 00 00       	mov    eax,0xb
c0008326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000832a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008331:	83 f9 19             	cmp    ecx,0x19
c0008334:	77 2f                	ja     c0008365 <File::unlink()+0x47>
c0008336:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c000833d:	85 c9                	test   ecx,ecx
c000833f:	74 24                	je     c0008365 <File::unlink()+0x47>
c0008341:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008347:	85 c9                	test   ecx,ecx
c0008349:	74 1a                	je     c0008365 <File::unlink()+0x47>
c000834b:	b8 06 00 00 00       	mov    eax,0x6
c0008350:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008354:	75 0f                	jne    c0008365 <File::unlink()+0x47>
c0008356:	83 c2 0d             	add    edx,0xd
c0008359:	50                   	push   eax
c000835a:	50                   	push   eax
c000835b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000835d:	52                   	push   edx
c000835e:	51                   	push   ecx
c000835f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008362:	83 c4 10             	add    esp,0x10
c0008365:	83 c4 0c             	add    esp,0xc
c0008368:	c3                   	ret    
c0008369:	90                   	nop

c000836a <File::rename(char const*)>:
c000836a:	83 ec 0c             	sub    esp,0xc
c000836d:	b8 0b 00 00 00       	mov    eax,0xb
c0008372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008376:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000837d:	83 f9 19             	cmp    ecx,0x19
c0008380:	77 32                	ja     c00083b4 <File::rename(char const*)+0x4a>
c0008382:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0008389:	85 c9                	test   ecx,ecx
c000838b:	74 27                	je     c00083b4 <File::rename(char const*)+0x4a>
c000838d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 1d                	je     c00083b4 <File::rename(char const*)+0x4a>
c0008397:	b8 06 00 00 00       	mov    eax,0x6
c000839c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a0:	75 12                	jne    c00083b4 <File::rename(char const*)+0x4a>
c00083a2:	83 c2 0d             	add    edx,0xd
c00083a5:	50                   	push   eax
c00083a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083ac:	52                   	push   edx
c00083ad:	51                   	push   ecx
c00083ae:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083b1:	83 c4 10             	add    esp,0x10
c00083b4:	83 c4 0c             	add    esp,0xc
c00083b7:	c3                   	ret    

c00083b8 <File::chfatattr(unsigned char, unsigned char)>:
c00083b8:	57                   	push   edi
c00083b9:	b8 0b 00 00 00       	mov    eax,0xb
c00083be:	56                   	push   esi
c00083bf:	53                   	push   ebx
c00083c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 37                	ja     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 2c                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 22                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083ed:	b8 06 00 00 00       	mov    eax,0x6
c00083f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f6:	75 17                	jne    c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083fa:	89 f0                	mov    eax,esi
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	0f b6 f0             	movzx  esi,al
c0008402:	0f b6 db             	movzx  ebx,bl
c0008405:	56                   	push   esi
c0008406:	53                   	push   ebx
c0008407:	52                   	push   edx
c0008408:	51                   	push   ecx
c0008409:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000840c:	83 c4 10             	add    esp,0x10
c000840f:	5b                   	pop    ebx
c0008410:	5e                   	pop    esi
c0008411:	5f                   	pop    edi
c0008412:	c3                   	ret    
c0008413:	90                   	nop

c0008414 <File::exists()>:
c0008414:	83 ec 0c             	sub    esp,0xc
c0008417:	31 c0                	xor    eax,eax
c0008419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008424:	83 f9 19             	cmp    ecx,0x19
c0008427:	77 24                	ja     c000844d <File::exists()+0x39>
c0008429:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0008430:	85 c9                	test   ecx,ecx
c0008432:	74 19                	je     c000844d <File::exists()+0x39>
c0008434:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843a:	85 c9                	test   ecx,ecx
c000843c:	74 0f                	je     c000844d <File::exists()+0x39>
c000843e:	83 c2 0d             	add    edx,0xd
c0008441:	50                   	push   eax
c0008442:	50                   	push   eax
c0008443:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008445:	52                   	push   edx
c0008446:	51                   	push   ecx
c0008447:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000844a:	83 c4 10             	add    esp,0x10
c000844d:	83 c4 0c             	add    esp,0xc
c0008450:	c3                   	ret    
c0008451:	90                   	nop

c0008452 <File::stat(unsigned long long*, bool*)>:
c0008452:	56                   	push   esi
c0008453:	53                   	push   ebx
c0008454:	50                   	push   eax
c0008455:	b8 0b 00 00 00       	mov    eax,0xb
c000845a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000845e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008462:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008469:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000846d:	83 f9 19             	cmp    ecx,0x19
c0008470:	77 3d                	ja     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008472:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0008479:	85 c9                	test   ecx,ecx
c000847b:	74 32                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c000847d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008483:	85 c9                	test   ecx,ecx
c0008485:	74 28                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008487:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008489:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000848d:	74 13                	je     c00084a2 <File::stat(unsigned long long*, bool*)+0x50>
c000848f:	83 ec 04             	sub    esp,0x4
c0008492:	56                   	push   esi
c0008493:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008499:	51                   	push   ecx
c000849a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000849d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084a0:	eb 0a                	jmp    c00084ac <File::stat(unsigned long long*, bool*)+0x5a>
c00084a2:	53                   	push   ebx
c00084a3:	83 c2 0d             	add    edx,0xd
c00084a6:	56                   	push   esi
c00084a7:	52                   	push   edx
c00084a8:	51                   	push   ecx
c00084a9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084ac:	83 c4 10             	add    esp,0x10
c00084af:	5a                   	pop    edx
c00084b0:	5b                   	pop    ebx
c00084b1:	5e                   	pop    esi
c00084b2:	c3                   	ret    

c00084b3 <Fs::setcwd(Process*, char*)>:
c00084b3:	55                   	push   ebp
c00084b4:	57                   	push   edi
c00084b5:	56                   	push   esi
c00084b6:	53                   	push   ebx
c00084b7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084bd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084c4:	6a 00                	push   0x0
c00084c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084cc:	57                   	push   edi
c00084cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d8:	56                   	push   esi
c00084d9:	e8 3c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084de:	89 34 24             	mov    DWORD PTR [esp],esi
c00084e1:	e8 8a 80 ff ff       	call   c0000570 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 02             	cmp    eax,0x2
c00084ec:	77 15                	ja     c0008503 <Fs::setcwd(Process*, char*)+0x50>
c00084ee:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084f3:	83 eb 41             	sub    ebx,0x41
c00084f6:	8b 04 9d e0 aa 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5520]
c00084fd:	85 c0                	test   eax,eax
c00084ff:	75 1c                	jne    c000851d <Fs::setcwd(Process*, char*)+0x6a>
c0008501:	eb 2f                	jmp    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	56                   	push   esi
c0008507:	e8 64 80 ff ff       	call   c0000570 <strlen>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	83 f8 03             	cmp    eax,0x3
c0008512:	75 57                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c0008514:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008519:	75 50                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c000851b:	eb d1                	jmp    c00084ee <Fs::setcwd(Process*, char*)+0x3b>
c000851d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008524:	75 0c                	jne    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008526:	83 ec 0c             	sub    esp,0xc
c0008529:	50                   	push   eax
c000852a:	e8 13 1d 00 00       	call   c000a242 <LogicalDisk::mount()>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	b8 03 00 00 00       	mov    eax,0x3
c0008537:	83 fb 19             	cmp    ebx,0x19
c000853a:	0f 87 c6 00 00 00    	ja     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008540:	8b 14 9d e0 aa 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd5520]
c0008547:	b8 05 00 00 00       	mov    eax,0x5
c000854c:	85 d2                	test   edx,edx
c000854e:	0f 84 b2 00 00 00    	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008554:	b8 06 00 00 00       	mov    eax,0x6
c0008559:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008560:	0f 85 92 00 00 00    	jne    c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c0008566:	e9 9b 00 00 00       	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c000856b:	83 ec 0c             	sub    esp,0xc
c000856e:	68 14 01 00 00       	push   0x114
c0008573:	e8 a7 6f 00 00       	call   c000f51f <malloc>
c0008578:	83 c4 0c             	add    esp,0xc
c000857b:	89 c3                	mov    ebx,eax
c000857d:	55                   	push   ebp
c000857e:	56                   	push   esi
c000857f:	50                   	push   eax
c0008580:	e8 ad fb ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008585:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000858a:	83 c4 0c             	add    esp,0xc
c000858d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008591:	50                   	push   eax
c0008592:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008596:	50                   	push   eax
c0008597:	53                   	push   ebx
c0008598:	e8 b5 fe ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000859d:	83 c4 10             	add    esp,0x10
c00085a0:	83 f8 02             	cmp    eax,0x2
c00085a3:	74 27                	je     c00085cc <Fs::setcwd(Process*, char*)+0x119>
c00085a5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085aa:	75 1c                	jne    c00085c8 <Fs::setcwd(Process*, char*)+0x115>
c00085ac:	b8 02 00 00 00       	mov    eax,0x2
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 51                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 02 00 00 00       	mov    eax,0x2
c00085c6:	eb 3e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 c0                	test   eax,eax
c00085ca:	74 1c                	je     c00085e8 <Fs::setcwd(Process*, char*)+0x135>
c00085cc:	b8 01 00 00 00       	mov    eax,0x1
c00085d1:	85 db                	test   ebx,ebx
c00085d3:	74 31                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085d5:	83 ec 0c             	sub    esp,0xc
c00085d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085da:	53                   	push   ebx
c00085db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085de:	83 c4 10             	add    esp,0x10
c00085e1:	b8 01 00 00 00       	mov    eax,0x1
c00085e6:	eb 1e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085e8:	85 db                	test   ebx,ebx
c00085ea:	74 0c                	je     c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085f1:	53                   	push   ebx
c00085f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	50                   	push   eax
c00085f9:	50                   	push   eax
c00085fa:	56                   	push   esi
c00085fb:	57                   	push   edi
c00085fc:	e8 3f 80 ff ff       	call   c0000640 <strcpy>
c0008601:	83 c4 10             	add    esp,0x10
c0008604:	31 c0                	xor    eax,eax
c0008606:	81 c4 1c 02 00 00    	add    esp,0x21c
c000860c:	5b                   	pop    ebx
c000860d:	5e                   	pop    esi
c000860e:	5f                   	pop    edi
c000860f:	5d                   	pop    ebp
c0008610:	c3                   	ret    
c0008611:	90                   	nop

c0008612 <Directory::Directory(char const*, Process*)>:
c0008612:	83 ec 0c             	sub    esp,0xc
c0008615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008619:	83 ec 08             	sub    esp,0x8
c000861c:	6a 00                	push   0x0
c000861e:	50                   	push   eax
c000861f:	e8 d4 a1 00 00       	call   c00127f8 <UnixFile::UnixFile(int)>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	ba a0 27 02 c0       	mov    edx,0xc00227a0
c000862c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008630:	89 10                	mov    DWORD PTR [eax],edx
c0008632:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0008637:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000863b:	0f 95 c0             	setne  al
c000863e:	0f b6 c0             	movzx  eax,al
c0008641:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008645:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000864b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000864f:	83 c2 0d             	add    edx,0xd
c0008652:	50                   	push   eax
c0008653:	51                   	push   ecx
c0008654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008658:	52                   	push   edx
c0008659:	e8 bc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000865e:	83 c4 10             	add    esp,0x10
c0008661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008665:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008668:	83 e8 41             	sub    eax,0x41
c000866b:	88 c2                	mov    dl,al
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008683:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008689:	0f b6 c0             	movzx  eax,al
c000868c:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c0008693:	85 c0                	test   eax,eax
c0008695:	74 3e                	je     c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c0008697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000869b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086a1:	0f b6 c0             	movzx  eax,al
c00086a4:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c00086ab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086b1:	85 c0                	test   eax,eax
c00086b3:	75 20                	jne    c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c00086b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086bf:	0f b6 c0             	movzx  eax,al
c00086c2:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c00086c9:	83 ec 0c             	sub    esp,0xc
c00086cc:	50                   	push   eax
c00086cd:	e8 70 1b 00 00       	call   c000a242 <LogicalDisk::mount()>
c00086d2:	83 c4 10             	add    esp,0x10
c00086d5:	90                   	nop
c00086d6:	83 c4 0c             	add    esp,0xc
c00086d9:	c3                   	ret    

c00086da <Directory::open()>:
c00086da:	53                   	push   ebx
c00086db:	b8 0b 00 00 00       	mov    eax,0xb
c00086e0:	83 ec 08             	sub    esp,0x8
c00086e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ee:	83 fa 19             	cmp    edx,0x19
c00086f1:	77 3d                	ja     c0008730 <Directory::open()+0x56>
c00086f3:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c00086fa:	85 d2                	test   edx,edx
c00086fc:	74 32                	je     c0008730 <Directory::open()+0x56>
c00086fe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008704:	85 d2                	test   edx,edx
c0008706:	74 28                	je     c0008730 <Directory::open()+0x56>
c0008708:	b8 06 00 00 00       	mov    eax,0x6
c000870d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008711:	75 1d                	jne    c0008730 <Directory::open()+0x56>
c0008713:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008719:	50                   	push   eax
c000871a:	8b 02                	mov    eax,DWORD PTR [edx]
c000871c:	51                   	push   ecx
c000871d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008720:	51                   	push   ecx
c0008721:	52                   	push   edx
c0008722:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008725:	83 c4 10             	add    esp,0x10
c0008728:	85 c0                	test   eax,eax
c000872a:	75 04                	jne    c0008730 <Directory::open()+0x56>
c000872c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008730:	83 c4 08             	add    esp,0x8
c0008733:	5b                   	pop    ebx
c0008734:	c3                   	ret    
c0008735:	90                   	nop

c0008736 <Directory::close()>:
c0008736:	53                   	push   ebx
c0008737:	b8 0b 00 00 00       	mov    eax,0xb
c000873c:	83 ec 08             	sub    esp,0x8
c000873f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008743:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000874a:	83 f9 19             	cmp    ecx,0x19
c000874d:	77 41                	ja     c0008790 <Directory::close()+0x5a>
c000874f:	8b 1c 8d e0 aa 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5520]
c0008756:	85 db                	test   ebx,ebx
c0008758:	74 36                	je     c0008790 <Directory::close()+0x5a>
c000875a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008761:	74 2d                	je     c0008790 <Directory::close()+0x5a>
c0008763:	b8 05 00 00 00       	mov    eax,0x5
c0008768:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000876c:	74 22                	je     c0008790 <Directory::close()+0x5a>
c000876e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008772:	8b 04 8d e0 aa 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5520]
c0008779:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000877f:	53                   	push   ebx
c0008780:	53                   	push   ebx
c0008781:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008783:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008789:	50                   	push   eax
c000878a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 08             	add    esp,0x8
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <Directory::unlink()>:
c0008796:	83 ec 0c             	sub    esp,0xc
c0008799:	b8 0b 00 00 00       	mov    eax,0xb
c000879e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a9:	83 f9 19             	cmp    ecx,0x19
c00087ac:	77 2f                	ja     c00087dd <Directory::unlink()+0x47>
c00087ae:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c00087b5:	85 c9                	test   ecx,ecx
c00087b7:	74 24                	je     c00087dd <Directory::unlink()+0x47>
c00087b9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087bf:	85 c9                	test   ecx,ecx
c00087c1:	74 1a                	je     c00087dd <Directory::unlink()+0x47>
c00087c3:	b8 06 00 00 00       	mov    eax,0x6
c00087c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087cc:	75 0f                	jne    c00087dd <Directory::unlink()+0x47>
c00087ce:	83 c2 0d             	add    edx,0xd
c00087d1:	50                   	push   eax
c00087d2:	50                   	push   eax
c00087d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087d5:	52                   	push   edx
c00087d6:	51                   	push   ecx
c00087d7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	83 c4 0c             	add    esp,0xc
c00087e0:	c3                   	ret    
c00087e1:	90                   	nop

c00087e2 <Directory::rename(char const*)>:
c00087e2:	83 ec 0c             	sub    esp,0xc
c00087e5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087f5:	83 f9 19             	cmp    ecx,0x19
c00087f8:	77 32                	ja     c000882c <Directory::rename(char const*)+0x4a>
c00087fa:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0008801:	85 c9                	test   ecx,ecx
c0008803:	74 27                	je     c000882c <Directory::rename(char const*)+0x4a>
c0008805:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 1d                	je     c000882c <Directory::rename(char const*)+0x4a>
c000880f:	b8 06 00 00 00       	mov    eax,0x6
c0008814:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008818:	75 12                	jne    c000882c <Directory::rename(char const*)+0x4a>
c000881a:	83 c2 0d             	add    edx,0xd
c000881d:	50                   	push   eax
c000881e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008820:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008824:	52                   	push   edx
c0008825:	51                   	push   ecx
c0008826:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008829:	83 c4 10             	add    esp,0x10
c000882c:	83 c4 0c             	add    esp,0xc
c000882f:	c3                   	ret    

c0008830 <Directory::exists()>:
c0008830:	83 ec 0c             	sub    esp,0xc
c0008833:	31 c0                	xor    eax,eax
c0008835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008839:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008840:	83 f9 19             	cmp    ecx,0x19
c0008843:	77 24                	ja     c0008869 <Directory::exists()+0x39>
c0008845:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c000884c:	85 c9                	test   ecx,ecx
c000884e:	74 19                	je     c0008869 <Directory::exists()+0x39>
c0008850:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008856:	85 c9                	test   ecx,ecx
c0008858:	74 0f                	je     c0008869 <Directory::exists()+0x39>
c000885a:	83 c2 0d             	add    edx,0xd
c000885d:	50                   	push   eax
c000885e:	50                   	push   eax
c000885f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008861:	52                   	push   edx
c0008862:	51                   	push   ecx
c0008863:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008866:	83 c4 10             	add    esp,0x10
c0008869:	83 c4 0c             	add    esp,0xc
c000886c:	c3                   	ret    
c000886d:	90                   	nop

c000886e <Directory::read(dirent*)>:
c000886e:	83 ec 1c             	sub    esp,0x1c
c0008871:	b8 0b 00 00 00       	mov    eax,0xb
c0008876:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000887a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008881:	83 f9 19             	cmp    ecx,0x19
c0008884:	77 30                	ja     c00088b6 <Directory::read(dirent*)+0x48>
c0008886:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c000888d:	85 c9                	test   ecx,ecx
c000888f:	74 25                	je     c00088b6 <Directory::read(dirent*)+0x48>
c0008891:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008898:	74 1c                	je     c00088b6 <Directory::read(dirent*)+0x48>
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	8b 02                	mov    eax,DWORD PTR [edx]
c000889f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088a3:	51                   	push   ecx
c00088a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a8:	6a 00                	push   0x0
c00088aa:	68 10 01 00 00       	push   0x110
c00088af:	52                   	push   edx
c00088b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088b3:	83 c4 20             	add    esp,0x20
c00088b6:	83 c4 1c             	add    esp,0x1c
c00088b9:	c3                   	ret    

c00088ba <Directory::create()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	b8 0b 00 00 00       	mov    eax,0xb
c00088c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088cd:	83 f9 19             	cmp    ecx,0x19
c00088d0:	77 2f                	ja     c0008901 <Directory::create()+0x47>
c00088d2:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c00088d9:	85 c9                	test   ecx,ecx
c00088db:	74 24                	je     c0008901 <Directory::create()+0x47>
c00088dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 1a                	je     c0008901 <Directory::create()+0x47>
c00088e7:	b8 06 00 00 00       	mov    eax,0x6
c00088ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088f0:	75 0f                	jne    c0008901 <Directory::create()+0x47>
c00088f2:	83 c2 0d             	add    edx,0xd
c00088f5:	50                   	push   eax
c00088f6:	50                   	push   eax
c00088f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f9:	52                   	push   edx
c00088fa:	51                   	push   ecx
c00088fb:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088fe:	83 c4 10             	add    esp,0x10
c0008901:	83 c4 0c             	add    esp,0xc
c0008904:	c3                   	ret    
c0008905:	90                   	nop

c0008906 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008906:	b8 0a 00 00 00       	mov    eax,0xa
c000890b:	c3                   	ret    

c000890c <Bus::Bus(char const*)>:
c000890c:	83 ec 0c             	sub    esp,0xc
c000890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891a:	50                   	push   eax
c000891b:	e8 f2 0a 00 00       	call   c0009412 <Device::Device(char const*)>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	ba bc 27 02 c0       	mov    edx,0xc00227bc
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000893c:	90                   	nop
c000893d:	83 c4 0c             	add    esp,0xc
c0008940:	c3                   	ret    
c0008941:	90                   	nop
c0008942:	66 90                	xchg   ax,ax

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	ba bc 27 02 c0       	mov    edx,0xc00227bc
c000894c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008950:	89 10                	mov    DWORD PTR [eax],edx
c0008952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	50                   	push   eax
c000895a:	e8 53 08 00 00       	call   c00091b2 <Device::~Device()>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	90                   	nop
c0008963:	83 c4 0c             	add    esp,0xc
c0008966:	c3                   	ret    
c0008967:	90                   	nop

c0008968 <Bus::~Bus()>:
c0008968:	83 ec 0c             	sub    esp,0xc
c000896b:	83 ec 0c             	sub    esp,0xc
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	e8 cd ff ff ff       	call   c0008944 <Bus::~Bus()>
c0008977:	83 c4 10             	add    esp,0x10
c000897a:	83 ec 08             	sub    esp,0x8
c000897d:	68 58 01 00 00       	push   0x158
c0008982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008986:	e8 1c 42 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c000898b:	83 c4 10             	add    esp,0x10
c000898e:	83 c4 0c             	add    esp,0xc
c0008991:	c3                   	ret    

c0008992 <KeBeepThread(void*)>:
c0008992:	83 ec 0c             	sub    esp,0xc
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c00089a0:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c00089a7:	75 01                	jne    c00089aa <KeBeepThread(void*)+0x18>
c00089a9:	fb                   	sti    
c00089aa:	83 ec 0c             	sub    esp,0xc
c00089ad:	6b c0 0a             	imul   eax,eax,0xa
c00089b0:	50                   	push   eax
c00089b1:	e8 b6 dc 00 00       	call   c001666c <milliTenthSleep(unsigned int)>
c00089b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089bd:	e8 05 0d 01 00       	call   c00196c7 <HalMakeBeep(int)>
c00089c2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089ca:	83 c4 1c             	add    esp,0x1c
c00089cd:	e9 72 db 00 00       	jmp    c0016544 <blockTask(TaskState)>

c00089d2 <KeBeep(int, int, bool)>:
c00089d2:	56                   	push   esi
c00089d3:	53                   	push   ebx
c00089d4:	83 ec 10             	sub    esp,0x10
c00089d7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e3:	e8 df 0c 01 00       	call   c00196c7 <HalMakeBeep(int)>
c00089e8:	83 c4 10             	add    esp,0x10
c00089eb:	89 f0                	mov    eax,esi
c00089ed:	84 c0                	test   al,al
c00089ef:	74 1e                	je     c0008a0f <KeBeep(int, int, bool)+0x3d>
c00089f1:	83 ec 0c             	sub    esp,0xc
c00089f4:	6b db 0a             	imul   ebx,ebx,0xa
c00089f7:	53                   	push   ebx
c00089f8:	e8 6f dc 00 00       	call   c001666c <milliTenthSleep(unsigned int)>
c00089fd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a05:	83 c4 14             	add    esp,0x14
c0008a08:	5b                   	pop    ebx
c0008a09:	5e                   	pop    esi
c0008a0a:	e9 b8 0c 01 00       	jmp    c00196c7 <HalMakeBeep(int)>
c0008a0f:	68 e6 00 00 00       	push   0xe6
c0008a14:	53                   	push   ebx
c0008a15:	68 92 89 00 c0       	push   0xc0008992
c0008a1a:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0008a20:	e8 07 d8 00 00       	call   c001622c <Process::createThread(void (*)(void*), void*, int)>
c0008a25:	83 c4 14             	add    esp,0x14
c0008a28:	5b                   	pop    ebx
c0008a29:	5e                   	pop    esi
c0008a2a:	c3                   	ret    
c0008a2b:	90                   	nop

c0008a2c <KeLoadTimezoneStrings()>:
c0008a2c:	55                   	push   ebp
c0008a2d:	57                   	push   edi
c0008a2e:	56                   	push   esi
c0008a2f:	53                   	push   ebx
c0008a30:	83 ec 28             	sub    esp,0x28
c0008a33:	c6 05 20 a3 02 c0 01 	mov    BYTE PTR ds:0xc002a320,0x1
c0008a3a:	68 14 01 00 00       	push   0x114
c0008a3f:	e8 db 6a 00 00       	call   c000f51f <malloc>
c0008a44:	83 c4 0c             	add    esp,0xc
c0008a47:	89 c3                	mov    ebx,eax
c0008a49:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0008a4f:	68 e0 27 02 c0       	push   0xc00227e0
c0008a54:	50                   	push   eax
c0008a55:	e8 d8 f6 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008a5a:	5e                   	pop    esi
c0008a5b:	5f                   	pop    edi
c0008a5c:	6a 01                	push   0x1
c0008a5e:	53                   	push   ebx
c0008a5f:	e8 ec f6 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0008a64:	83 c4 0c             	add    esp,0xc
c0008a67:	8d 44 24 05          	lea    eax,[esp+0x5]
c0008a6b:	50                   	push   eax
c0008a6c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a70:	50                   	push   eax
c0008a71:	53                   	push   ebx
c0008a72:	e8 db f9 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0008a77:	5d                   	pop    ebp
c0008a78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a7c:	e8 9e 6a 00 00       	call   c000f51f <malloc>
c0008a81:	83 c4 0c             	add    esp,0xc
c0008a84:	89 c5                	mov    ebp,eax
c0008a86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a8a:	6a 00                	push   0x0
c0008a8c:	50                   	push   eax
c0008a8d:	e8 5e 7a ff ff       	call   c00004f0 <memset>
c0008a92:	58                   	pop    eax
c0008a93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008a95:	8d 54 24 10          	lea    edx,[esp+0x10]
c0008a99:	52                   	push   edx
c0008a9a:	55                   	push   ebp
c0008a9b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008aa3:	53                   	push   ebx
c0008aa4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008aa7:	83 c4 14             	add    esp,0x14
c0008aaa:	53                   	push   ebx
c0008aab:	31 db                	xor    ebx,ebx
c0008aad:	e8 fc f6 ff ff       	call   c00081ae <File::close()>
c0008ab2:	83 c4 10             	add    esp,0x10
c0008ab5:	83 ec 0c             	sub    esp,0xc
c0008ab8:	6a 78                	push   0x78
c0008aba:	e8 60 6a 00 00       	call   c000f51f <malloc>
c0008abf:	5a                   	pop    edx
c0008ac0:	89 04 9d 40 a3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5cc0],eax
c0008ac7:	59                   	pop    ecx
c0008ac8:	43                   	inc    ebx
c0008ac9:	68 34 47 02 c0       	push   0xc0024734
c0008ace:	50                   	push   eax
c0008acf:	e8 6c 7b ff ff       	call   c0000640 <strcpy>
c0008ad4:	83 c4 10             	add    esp,0x10
c0008ad7:	81 fb c8 00 00 00    	cmp    ebx,0xc8
c0008add:	75 d6                	jne    c0008ab5 <KeLoadTimezoneStrings()+0x89>
c0008adf:	be 01 00 00 00       	mov    esi,0x1
c0008ae4:	31 ff                	xor    edi,edi
c0008ae6:	31 db                	xor    ebx,ebx
c0008ae8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0008aec:	0f be 40 ff          	movsx  eax,BYTE PTR [eax-0x1]
c0008af0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0008af5:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c0008af9:	83 f8 0d             	cmp    eax,0xd
c0008afc:	75 08                	jne    c0008b06 <KeLoadTimezoneStrings()+0xda>
c0008afe:	83 c6 01             	add    esi,0x1
c0008b01:	83 d7 00             	adc    edi,0x0
c0008b04:	eb e2                	jmp    c0008ae8 <KeLoadTimezoneStrings()+0xbc>
c0008b06:	83 f8 09             	cmp    eax,0x9
c0008b09:	75 2f                	jne    c0008b3a <KeLoadTimezoneStrings()+0x10e>
c0008b0b:	83 ec 0c             	sub    esp,0xc
c0008b0e:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008b15:	e8 56 7a ff ff       	call   c0000570 <strlen>
c0008b1a:	83 c4 10             	add    esp,0x10
c0008b1d:	83 f8 08             	cmp    eax,0x8
c0008b20:	77 dc                	ja     c0008afe <KeLoadTimezoneStrings()+0xd2>
c0008b22:	50                   	push   eax
c0008b23:	50                   	push   eax
c0008b24:	68 34 47 02 c0       	push   0xc0024734
c0008b29:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008b30:	e8 0b 7d ff ff       	call   c0000840 <strcat>
c0008b35:	83 c4 10             	add    esp,0x10
c0008b38:	eb d1                	jmp    c0008b0b <KeLoadTimezoneStrings()+0xdf>
c0008b3a:	83 f8 0a             	cmp    eax,0xa
c0008b3d:	75 4b                	jne    c0008b8a <KeLoadTimezoneStrings()+0x15e>
c0008b3f:	83 ec 0c             	sub    esp,0xc
c0008b42:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008b49:	e8 22 7a ff ff       	call   c0000570 <strlen>
c0008b4e:	83 c4 10             	add    esp,0x10
c0008b51:	83 f8 35             	cmp    eax,0x35
c0008b54:	77 18                	ja     c0008b6e <KeLoadTimezoneStrings()+0x142>
c0008b56:	51                   	push   ecx
c0008b57:	51                   	push   ecx
c0008b58:	68 34 47 02 c0       	push   0xc0024734
c0008b5d:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008b64:	e8 d7 7c ff ff       	call   c0000840 <strcat>
c0008b69:	83 c4 10             	add    esp,0x10
c0008b6c:	eb d1                	jmp    c0008b3f <KeLoadTimezoneStrings()+0x113>
c0008b6e:	43                   	inc    ebx
c0008b6f:	89 f8                	mov    eax,edi
c0008b71:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0008b75:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0008b79:	72 83                	jb     c0008afe <KeLoadTimezoneStrings()+0xd2>
c0008b7b:	83 ec 0c             	sub    esp,0xc
c0008b7e:	55                   	push   ebp
c0008b7f:	e8 ab 69 00 00       	call   c000f52f <free>
c0008b84:	89 1d 24 a3 02 c0    	mov    DWORD PTR ds:0xc002a324,ebx
c0008b8a:	83 ec 0c             	sub    esp,0xc
c0008b8d:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008b94:	e8 d7 79 ff ff       	call   c0000570 <strlen>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	83 f8 31             	cmp    eax,0x31
c0008b9f:	77 09                	ja     c0008baa <KeLoadTimezoneStrings()+0x17e>
c0008ba1:	52                   	push   edx
c0008ba2:	52                   	push   edx
c0008ba3:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0008ba7:	50                   	push   eax
c0008ba8:	eb 22                	jmp    c0008bcc <KeLoadTimezoneStrings()+0x1a0>
c0008baa:	83 ec 0c             	sub    esp,0xc
c0008bad:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008bb4:	e8 b7 79 ff ff       	call   c0000570 <strlen>
c0008bb9:	83 c4 10             	add    esp,0x10
c0008bbc:	83 f8 32             	cmp    eax,0x32
c0008bbf:	0f 85 39 ff ff ff    	jne    c0008afe <KeLoadTimezoneStrings()+0xd2>
c0008bc5:	50                   	push   eax
c0008bc6:	50                   	push   eax
c0008bc7:	68 ff 27 02 c0       	push   0xc00227ff
c0008bcc:	ff 34 9d 40 a3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5cc0]
c0008bd3:	e8 68 7c ff ff       	call   c0000840 <strcat>
c0008bd8:	83 c4 10             	add    esp,0x10
c0008bdb:	e9 1e ff ff ff       	jmp    c0008afe <KeLoadTimezoneStrings()+0xd2>

c0008be0 <KeGetTimezoneStringFromID(int)>:
c0008be0:	83 ec 0c             	sub    esp,0xc
c0008be3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008be7:	80 3d 20 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a320,0x0
c0008bee:	75 05                	jne    c0008bf5 <KeGetTimezoneStringFromID(int)+0x15>
c0008bf0:	e8 37 fe ff ff       	call   c0008a2c <KeLoadTimezoneStrings()>
c0008bf5:	31 c0                	xor    eax,eax
c0008bf7:	39 15 24 a3 02 c0    	cmp    DWORD PTR ds:0xc002a324,edx
c0008bfd:	7e 08                	jle    c0008c07 <KeGetTimezoneStringFromID(int)+0x27>
c0008bff:	8b 04 95 40 a3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5cc0]
c0008c06:	40                   	inc    eax
c0008c07:	83 c4 0c             	add    esp,0xc
c0008c0a:	c3                   	ret    

c0008c0b <KeUpdateTimezone(char const*)>:
c0008c0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c0f:	8a 10                	mov    dl,BYTE PTR [eax]
c0008c11:	c6 05 60 a6 02 c0 00 	mov    BYTE PTR ds:0xc002a660,0x0
c0008c18:	83 ea 2b             	sub    edx,0x2b
c0008c1b:	80 e2 fd             	and    dl,0xfd
c0008c1e:	75 5b                	jne    c0008c7b <KeUpdateTimezone(char const*)+0x70>
c0008c20:	80 78 02 2e          	cmp    BYTE PTR [eax+0x2],0x2e
c0008c24:	0f be 48 03          	movsx  ecx,BYTE PTR [eax+0x3]
c0008c28:	75 07                	jne    c0008c31 <KeUpdateTimezone(char const*)+0x26>
c0008c2a:	b2 01                	mov    dl,0x1
c0008c2c:	83 f9 35             	cmp    ecx,0x35
c0008c2f:	74 0e                	je     c0008c3f <KeUpdateTimezone(char const*)+0x34>
c0008c31:	31 d2                	xor    edx,edx
c0008c33:	83 f9 2e             	cmp    ecx,0x2e
c0008c36:	75 07                	jne    c0008c3f <KeUpdateTimezone(char const*)+0x34>
c0008c38:	80 78 04 35          	cmp    BYTE PTR [eax+0x4],0x35
c0008c3c:	0f 94 c2             	sete   dl
c0008c3f:	88 15 61 a6 02 c0    	mov    BYTE PTR ds:0xc002a661,dl
c0008c45:	0f be 50 01          	movsx  edx,BYTE PTR [eax+0x1]
c0008c49:	83 ea 30             	sub    edx,0x30
c0008c4c:	89 15 64 a6 02 c0    	mov    DWORD PTR ds:0xc002a664,edx
c0008c52:	80 78 03 2e          	cmp    BYTE PTR [eax+0x3],0x2e
c0008c56:	75 17                	jne    c0008c6f <KeUpdateTimezone(char const*)+0x64>
c0008c58:	6b d2 0a             	imul   edx,edx,0xa
c0008c5b:	89 15 64 a6 02 c0    	mov    DWORD PTR ds:0xc002a664,edx
c0008c61:	0f be 48 02          	movsx  ecx,BYTE PTR [eax+0x2]
c0008c65:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0008c69:	89 15 64 a6 02 c0    	mov    DWORD PTR ds:0xc002a664,edx
c0008c6f:	80 38 2d             	cmp    BYTE PTR [eax],0x2d
c0008c72:	75 18                	jne    c0008c8c <KeUpdateTimezone(char const*)+0x81>
c0008c74:	f7 1d 64 a6 02 c0    	neg    DWORD PTR ds:0xc002a664
c0008c7a:	c3                   	ret    
c0008c7b:	c6 05 61 a6 02 c0 00 	mov    BYTE PTR ds:0xc002a661,0x0
c0008c82:	c7 05 64 a6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a664,0x0
c0008c8c:	c3                   	ret    

c0008c8d <KeSetTimezone(char const*)>:
c0008c8d:	56                   	push   esi
c0008c8e:	53                   	push   ebx
c0008c8f:	83 ec 10             	sub    esp,0x10
c0008c92:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0008c96:	68 04 28 02 c0       	push   0xc0022804
c0008c9b:	e8 5c 3f 00 00       	call   c000cbfc <CmOpen(char const*)>
c0008ca0:	89 c3                	mov    ebx,eax
c0008ca2:	58                   	pop    eax
c0008ca3:	5a                   	pop    edx
c0008ca4:	68 29 28 02 c0       	push   0xc0022829
c0008ca9:	53                   	push   ebx
c0008caa:	e8 4d 4b 00 00       	call   c000d7fc <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008caf:	83 c4 0c             	add    esp,0xc
c0008cb2:	56                   	push   esi
c0008cb3:	50                   	push   eax
c0008cb4:	53                   	push   ebx
c0008cb5:	e8 14 44 00 00       	call   c000d0ce <CmSetString(Reghive_Tag*, int, char const*)>
c0008cba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008cbd:	e8 58 40 00 00       	call   c000cd1a <CmClose(Reghive_Tag*)>
c0008cc2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008cc6:	83 c4 14             	add    esp,0x14
c0008cc9:	5b                   	pop    ebx
c0008cca:	5e                   	pop    esi
c0008ccb:	e9 3b ff ff ff       	jmp    c0008c0b <KeUpdateTimezone(char const*)>

c0008cd0 <KeSetTimezone(int)>:
c0008cd0:	83 ec 18             	sub    esp,0x18
c0008cd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008cd7:	e8 04 ff ff ff       	call   c0008be0 <KeGetTimezoneStringFromID(int)>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	31 d2                	xor    edx,edx
c0008ce1:	85 c0                	test   eax,eax
c0008ce3:	74 0e                	je     c0008cf3 <KeSetTimezone(int)+0x23>
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	50                   	push   eax
c0008ce9:	e8 9f ff ff ff       	call   c0008c8d <KeSetTimezone(char const*)>
c0008cee:	83 c4 10             	add    esp,0x10
c0008cf1:	b2 01                	mov    dl,0x1
c0008cf3:	88 d0                	mov    al,dl
c0008cf5:	83 c4 0c             	add    esp,0xc
c0008cf8:	c3                   	ret    

c0008cf9 <KeLoadTimezone()>:
c0008cf9:	56                   	push   esi
c0008cfa:	53                   	push   ebx
c0008cfb:	81 ec 70 02 00 00    	sub    esp,0x270
c0008d01:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008d06:	68 04 28 02 c0       	push   0xc0022804
c0008d0b:	e8 ec 3e 00 00       	call   c000cbfc <CmOpen(char const*)>
c0008d10:	59                   	pop    ecx
c0008d11:	89 c3                	mov    ebx,eax
c0008d13:	5e                   	pop    esi
c0008d14:	68 29 28 02 c0       	push   0xc0022829
c0008d19:	50                   	push   eax
c0008d1a:	e8 dd 4a 00 00       	call   c000d7fc <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008d1f:	83 c4 10             	add    esp,0x10
c0008d22:	85 c0                	test   eax,eax
c0008d24:	8d 74 24 08          	lea    esi,[esp+0x8]
c0008d28:	7e 0c                	jle    c0008d36 <KeLoadTimezone()+0x3d>
c0008d2a:	52                   	push   edx
c0008d2b:	56                   	push   esi
c0008d2c:	50                   	push   eax
c0008d2d:	53                   	push   ebx
c0008d2e:	e8 39 40 00 00       	call   c000cd6c <CmGetString(Reghive_Tag*, int, char*)>
c0008d33:	83 c4 10             	add    esp,0x10
c0008d36:	83 ec 0c             	sub    esp,0xc
c0008d39:	53                   	push   ebx
c0008d3a:	e8 db 3f 00 00       	call   c000cd1a <CmClose(Reghive_Tag*)>
c0008d3f:	89 34 24             	mov    DWORD PTR [esp],esi
c0008d42:	e8 c4 fe ff ff       	call   c0008c0b <KeUpdateTimezone(char const*)>
c0008d47:	81 c4 74 02 00 00    	add    esp,0x274
c0008d4d:	5b                   	pop    ebx
c0008d4e:	5e                   	pop    esi
c0008d4f:	c3                   	ret    

c0008d50 <Clock::Clock(char const*)>:
c0008d50:	83 ec 0c             	sub    esp,0xc
c0008d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d57:	83 ec 08             	sub    esp,0x8
c0008d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5e:	50                   	push   eax
c0008d5f:	e8 ae 06 00 00       	call   c0009412 <Device::Device(char const*)>
c0008d64:	83 c4 10             	add    esp,0x10
c0008d67:	ba 58 28 02 c0       	mov    edx,0xc0022858
c0008d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d70:	89 10                	mov    DWORD PTR [eax],edx
c0008d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d76:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008d80:	90                   	nop
c0008d81:	83 c4 0c             	add    esp,0xc
c0008d84:	c3                   	ret    
c0008d85:	90                   	nop

c0008d86 <Clock::~Clock()>:
c0008d86:	83 ec 0c             	sub    esp,0xc
c0008d89:	ba 58 28 02 c0       	mov    edx,0xc0022858
c0008d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d92:	89 10                	mov    DWORD PTR [eax],edx
c0008d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d98:	83 ec 0c             	sub    esp,0xc
c0008d9b:	50                   	push   eax
c0008d9c:	e8 11 04 00 00       	call   c00091b2 <Device::~Device()>
c0008da1:	83 c4 10             	add    esp,0x10
c0008da4:	90                   	nop
c0008da5:	83 c4 0c             	add    esp,0xc
c0008da8:	c3                   	ret    
c0008da9:	90                   	nop

c0008daa <Clock::~Clock()>:
c0008daa:	83 ec 0c             	sub    esp,0xc
c0008dad:	83 ec 0c             	sub    esp,0xc
c0008db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008db4:	e8 cd ff ff ff       	call   c0008d86 <Clock::~Clock()>
c0008db9:	83 c4 10             	add    esp,0x10
c0008dbc:	83 ec 08             	sub    esp,0x8
c0008dbf:	68 58 01 00 00       	push   0x158
c0008dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008dc8:	e8 da 3d 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c0008dcd:	83 c4 10             	add    esp,0x10
c0008dd0:	83 c4 0c             	add    esp,0xc
c0008dd3:	c3                   	ret    

c0008dd4 <Clock::timeInSecondsLocal()>:
c0008dd4:	53                   	push   ebx
c0008dd5:	83 ec 14             	sub    esp,0x14
c0008dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ddc:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dde:	50                   	push   eax
c0008ddf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008de2:	0f b6 0d 60 a6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a660
c0008de9:	03 0d 64 a6 02 c0    	add    ecx,DWORD PTR ds:0xc002a664
c0008def:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008df5:	89 cb                	mov    ebx,ecx
c0008df7:	c1 fb 1f             	sar    ebx,0x1f
c0008dfa:	01 c8                	add    eax,ecx
c0008dfc:	11 da                	adc    edx,ebx
c0008dfe:	83 c4 10             	add    esp,0x10
c0008e01:	31 c9                	xor    ecx,ecx
c0008e03:	80 3d 61 a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a661,0x0
c0008e0a:	74 05                	je     c0008e11 <Clock::timeInSecondsLocal()+0x3d>
c0008e0c:	b9 08 07 00 00       	mov    ecx,0x708
c0008e11:	31 db                	xor    ebx,ebx
c0008e13:	01 c8                	add    eax,ecx
c0008e15:	11 da                	adc    edx,ebx
c0008e17:	83 c4 08             	add    esp,0x8
c0008e1a:	5b                   	pop    ebx
c0008e1b:	c3                   	ret    

c0008e1c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008e1c:	57                   	push   edi
c0008e1d:	56                   	push   esi
c0008e1e:	53                   	push   ebx
c0008e1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008e27:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008e29:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008e2d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008e30:	0f b6 05 60 a6 02 c0 	movzx  eax,BYTE PTR ds:0xc002a660
c0008e37:	03 05 64 a6 02 c0    	add    eax,DWORD PTR ds:0xc002a664
c0008e3d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008e43:	99                   	cdq    
c0008e44:	29 c6                	sub    esi,eax
c0008e46:	19 d7                	sbb    edi,edx
c0008e48:	89 f0                	mov    eax,esi
c0008e4a:	89 fa                	mov    edx,edi
c0008e4c:	31 f6                	xor    esi,esi
c0008e4e:	80 3d 61 a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a661,0x0
c0008e55:	74 05                	je     c0008e5c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008e57:	be 08 07 00 00       	mov    esi,0x708
c0008e5c:	31 ff                	xor    edi,edi
c0008e5e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e62:	29 f0                	sub    eax,esi
c0008e64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008e68:	19 fa                	sbb    edx,edi
c0008e6a:	89 d8                	mov    eax,ebx
c0008e6c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	ff e0                	jmp    eax

c0008e75 <KeDatetimeToSeconds(datetime_t)>:
c0008e75:	55                   	push   ebp
c0008e76:	57                   	push   edi
c0008e77:	56                   	push   esi
c0008e78:	53                   	push   ebx
c0008e79:	83 ec 0c             	sub    esp,0xc
c0008e7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008e80:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008e84:	89 d6                	mov    esi,edx
c0008e86:	0f b6 c7             	movzx  eax,bh
c0008e89:	c1 ee 10             	shr    esi,0x10
c0008e8c:	6b e8 3c             	imul   ebp,eax,0x3c
c0008e8f:	81 ee 6c 07 00 00    	sub    esi,0x76c
c0008e95:	0f b6 ce             	movzx  ecx,dh
c0008e98:	89 df                	mov    edi,ebx
c0008e9a:	49                   	dec    ecx
c0008e9b:	c1 ef 10             	shr    edi,0x10
c0008e9e:	0f b6 db             	movzx  ebx,bl
c0008ea1:	89 f8                	mov    eax,edi
c0008ea3:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c0008ea9:	0f b6 f8             	movzx  edi,al
c0008eac:	0f b6 d2             	movzx  edx,dl
c0008eaf:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0008eb3:	01 d8                	add    eax,ebx
c0008eb5:	0f b7 de             	movzx  ebx,si
c0008eb8:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ebb:	c1 f8 1f             	sar    eax,0x1f
c0008ebe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ec2:	0f b6 c1             	movzx  eax,cl
c0008ec5:	8b 0c 85 a0 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd760]
c0008ecc:	83 f8 01             	cmp    eax,0x1
c0008ecf:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0008ed3:	76 27                	jbe    c0008efc <KeDatetimeToSeconds(datetime_t)+0x87>
c0008ed5:	83 e6 03             	and    esi,0x3
c0008ed8:	75 22                	jne    c0008efc <KeDatetimeToSeconds(datetime_t)+0x87>
c0008eda:	31 d2                	xor    edx,edx
c0008edc:	be 64 00 00 00       	mov    esi,0x64
c0008ee1:	89 d8                	mov    eax,ebx
c0008ee3:	f7 f6                	div    esi
c0008ee5:	85 d2                	test   edx,edx
c0008ee7:	75 12                	jne    c0008efb <KeDatetimeToSeconds(datetime_t)+0x86>
c0008ee9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008eef:	be 90 01 00 00       	mov    esi,0x190
c0008ef4:	99                   	cdq    
c0008ef5:	f7 fe                	idiv   esi
c0008ef7:	85 d2                	test   edx,edx
c0008ef9:	75 01                	jne    c0008efc <KeDatetimeToSeconds(datetime_t)+0x87>
c0008efb:	41                   	inc    ecx
c0008efc:	83 fb 46             	cmp    ebx,0x46
c0008eff:	76 48                	jbe    c0008f49 <KeDatetimeToSeconds(datetime_t)+0xd4>
c0008f01:	be 46 00 00 00       	mov    esi,0x46
c0008f06:	bf 64 00 00 00       	mov    edi,0x64
c0008f0b:	bd 90 01 00 00       	mov    ebp,0x190
c0008f10:	b8 6d 01 00 00       	mov    eax,0x16d
c0008f15:	f7 c6 03 00 00 00    	test   esi,0x3
c0008f1b:	75 23                	jne    c0008f40 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008f1d:	89 f0                	mov    eax,esi
c0008f1f:	99                   	cdq    
c0008f20:	f7 ff                	idiv   edi
c0008f22:	b8 6e 01 00 00       	mov    eax,0x16e
c0008f27:	85 d2                	test   edx,edx
c0008f29:	75 15                	jne    c0008f40 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008f2b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008f31:	99                   	cdq    
c0008f32:	f7 fd                	idiv   ebp
c0008f34:	83 fa 01             	cmp    edx,0x1
c0008f37:	19 c0                	sbb    eax,eax
c0008f39:	f7 d0                	not    eax
c0008f3b:	05 6e 01 00 00       	add    eax,0x16e
c0008f40:	01 c1                	add    ecx,eax
c0008f42:	46                   	inc    esi
c0008f43:	39 de                	cmp    esi,ebx
c0008f45:	7c c9                	jl     c0008f10 <KeDatetimeToSeconds(datetime_t)+0x9b>
c0008f47:	eb 34                	jmp    c0008f7d <KeDatetimeToSeconds(datetime_t)+0x108>
c0008f49:	74 32                	je     c0008f7d <KeDatetimeToSeconds(datetime_t)+0x108>
c0008f4b:	b8 45 00 00 00       	mov    eax,0x45
c0008f50:	89 c2                	mov    edx,eax
c0008f52:	83 e2 03             	and    edx,0x3
c0008f55:	39 d8                	cmp    eax,ebx
c0008f57:	7e 0f                	jle    c0008f68 <KeDatetimeToSeconds(datetime_t)+0xf3>
c0008f59:	83 fa 01             	cmp    edx,0x1
c0008f5c:	19 d2                	sbb    edx,edx
c0008f5e:	48                   	dec    eax
c0008f5f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008f66:	eb e8                	jmp    c0008f50 <KeDatetimeToSeconds(datetime_t)+0xdb>
c0008f68:	b8 6d 01 00 00       	mov    eax,0x16d
c0008f6d:	85 d2                	test   edx,edx
c0008f6f:	75 0a                	jne    c0008f7b <KeDatetimeToSeconds(datetime_t)+0x106>
c0008f71:	83 fb 01             	cmp    ebx,0x1
c0008f74:	19 c0                	sbb    eax,eax
c0008f76:	05 6e 01 00 00       	add    eax,0x16e
c0008f7b:	29 c1                	sub    ecx,eax
c0008f7d:	b8 80 51 01 00       	mov    eax,0x15180
c0008f82:	f7 e9                	imul   ecx
c0008f84:	03 04 24             	add    eax,DWORD PTR [esp]
c0008f87:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008f8b:	83 c4 0c             	add    esp,0xc
c0008f8e:	5b                   	pop    ebx
c0008f8f:	5e                   	pop    esi
c0008f90:	5f                   	pop    edi
c0008f91:	5d                   	pop    ebp
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008f94:	57                   	push   edi
c0008f95:	56                   	push   esi
c0008f96:	53                   	push   ebx
c0008f97:	83 ec 10             	sub    esp,0x10
c0008f9a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008fa6:	e8 ca fe ff ff       	call   c0008e75 <KeDatetimeToSeconds(datetime_t)>
c0008fab:	59                   	pop    ecx
c0008fac:	5e                   	pop    esi
c0008fad:	0f b6 35 60 a6 02 c0 	movzx  esi,BYTE PTR ds:0xc002a660
c0008fb4:	03 35 64 a6 02 c0    	add    esi,DWORD PTR ds:0xc002a664
c0008fba:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008fc0:	89 f7                	mov    edi,esi
c0008fc2:	c1 ff 1f             	sar    edi,0x1f
c0008fc5:	29 f0                	sub    eax,esi
c0008fc7:	19 fa                	sbb    edx,edi
c0008fc9:	31 f6                	xor    esi,esi
c0008fcb:	80 3d 61 a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a661,0x0
c0008fd2:	74 05                	je     c0008fd9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x45>
c0008fd4:	be 08 07 00 00       	mov    esi,0x708
c0008fd9:	31 ff                	xor    edi,edi
c0008fdb:	29 f0                	sub    eax,esi
c0008fdd:	19 fa                	sbb    edx,edi
c0008fdf:	83 ec 0c             	sub    esp,0xc
c0008fe2:	89 d7                	mov    edi,edx
c0008fe4:	89 fe                	mov    esi,edi
c0008fe6:	31 ff                	xor    edi,edi
c0008fe8:	57                   	push   edi
c0008fe9:	31 ff                	xor    edi,edi
c0008feb:	56                   	push   esi
c0008fec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ff0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008ff4:	57                   	push   edi
c0008ff5:	50                   	push   eax
c0008ff6:	68 3e 28 02 c0       	push   0xc002283e
c0008ffb:	e8 64 df ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0009000:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0009002:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009006:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000900a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000900e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009012:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009016:	8b 41 2c             	mov    eax,DWORD PTR [ecx+0x2c]
c0009019:	83 c4 30             	add    esp,0x30
c000901c:	5b                   	pop    ebx
c000901d:	5e                   	pop    esi
c000901e:	5f                   	pop    edi
c000901f:	ff e0                	jmp    eax

c0009021 <KeSecondsToDatetime(unsigned long long)>:
c0009021:	55                   	push   ebp
c0009022:	57                   	push   edi
c0009023:	56                   	push   esi
c0009024:	53                   	push   ebx
c0009025:	83 ec 1c             	sub    esp,0x1c
c0009028:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000902c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009030:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009034:	6a 00                	push   0x0
c0009036:	68 80 51 01 00       	push   0x15180
c000903b:	55                   	push   ebp
c000903c:	57                   	push   edi
c000903d:	e8 72 7d 01 00       	call   c0020db4 <__udivdi3>
c0009042:	83 c4 10             	add    esp,0x10
c0009045:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000904b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000904f:	6a 00                	push   0x0
c0009051:	68 80 51 01 00       	push   0x15180
c0009056:	55                   	push   ebp
c0009057:	57                   	push   edi
c0009058:	bf 10 0e 00 00       	mov    edi,0xe10
c000905d:	e8 52 7e 01 00       	call   c0020eb4 <__umoddi3>
c0009062:	83 c4 10             	add    esp,0x10
c0009065:	99                   	cdq    
c0009066:	f7 ff                	idiv   edi
c0009068:	bf 3c 00 00 00       	mov    edi,0x3c
c000906d:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0009070:	89 d0                	mov    eax,edx
c0009072:	99                   	cdq    
c0009073:	f7 ff                	idiv   edi
c0009075:	85 db                	test   ebx,ebx
c0009077:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000907a:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000907d:	79 11                	jns    c0009090 <KeSecondsToDatetime(unsigned long long)+0x6f>
c000907f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009083:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0009089:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000908e:	eb 07                	jmp    c0009097 <KeSecondsToDatetime(unsigned long long)+0x76>
c0009090:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0009095:	89 d8                	mov    eax,ebx
c0009097:	bf b4 05 00 00       	mov    edi,0x5b4
c000909c:	99                   	cdq    
c000909d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00090a2:	f7 f9                	idiv   ecx
c00090a4:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00090a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090ad:	31 d2                	xor    edx,edx
c00090af:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00090b7:	01 c3                	add    ebx,eax
c00090b9:	89 d8                	mov    eax,ebx
c00090bb:	f7 f1                	div    ecx
c00090bd:	31 d2                	xor    edx,edx
c00090bf:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00090c2:	89 d8                	mov    eax,ebx
c00090c4:	f7 f7                	div    edi
c00090c6:	31 d2                	xor    edx,edx
c00090c8:	29 c1                	sub    ecx,eax
c00090ca:	89 d8                	mov    eax,ebx
c00090cc:	f7 f5                	div    ebp
c00090ce:	bd 6d 01 00 00       	mov    ebp,0x16d
c00090d3:	29 c1                	sub    ecx,eax
c00090d5:	31 d2                	xor    edx,edx
c00090d7:	89 c8                	mov    eax,ecx
c00090d9:	f7 f5                	div    ebp
c00090db:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00090e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00090e4:	31 d2                	xor    edx,edx
c00090e6:	89 c8                	mov    eax,ecx
c00090e8:	f7 f5                	div    ebp
c00090ea:	31 d2                	xor    edx,edx
c00090ec:	01 c3                	add    ebx,eax
c00090ee:	89 c8                	mov    eax,ecx
c00090f0:	f7 f7                	div    edi
c00090f2:	bf 99 00 00 00       	mov    edi,0x99
c00090f7:	29 c3                	sub    ebx,eax
c00090f9:	31 d2                	xor    edx,edx
c00090fb:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0009103:	29 c3                	sub    ebx,eax
c0009105:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0009108:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000910b:	bb 05 00 00 00       	mov    ebx,0x5
c0009110:	83 c1 02             	add    ecx,0x2
c0009113:	89 c8                	mov    eax,ecx
c0009115:	f7 f7                	div    edi
c0009117:	31 d2                	xor    edx,edx
c0009119:	89 c7                	mov    edi,eax
c000911b:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0009121:	83 c0 02             	add    eax,0x2
c0009124:	f7 f3                	div    ebx
c0009126:	89 eb                	mov    ebx,ebp
c0009128:	29 c3                	sub    ebx,eax
c000912a:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0009130:	88 1e                	mov    BYTE PTR [esi],bl
c0009132:	19 c0                	sbb    eax,eax
c0009134:	31 c9                	xor    ecx,ecx
c0009136:	83 e0 0c             	and    eax,0xc
c0009139:	8d 54 38 f6          	lea    edx,[eax+edi*1-0xa]
c000913d:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0009145:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0009149:	83 fa 01             	cmp    edx,0x1
c000914c:	0f 96 c1             	setbe  cl
c000914f:	42                   	inc    edx
c0009150:	8d 44 08 46          	lea    eax,[eax+ecx*1+0x46]
c0009154:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0009157:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000915b:	83 c4 1c             	add    esp,0x1c
c000915e:	89 f0                	mov    eax,esi
c0009160:	5b                   	pop    ebx
c0009161:	5e                   	pop    esi
c0009162:	5f                   	pop    edi
c0009163:	5d                   	pop    ebp
c0009164:	c2 04 00             	ret    0x4
c0009167:	90                   	nop

c0009168 <Clock::timeInDatetimeLocal()>:
c0009168:	53                   	push   ebx
c0009169:	83 ec 14             	sub    esp,0x14
c000916c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009170:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009174:	e8 5b fc ff ff       	call   c0008dd4 <Clock::timeInSecondsLocal()>
c0009179:	83 c4 0c             	add    esp,0xc
c000917c:	52                   	push   edx
c000917d:	50                   	push   eax
c000917e:	53                   	push   ebx
c000917f:	e8 9d fe ff ff       	call   c0009021 <KeSecondsToDatetime(unsigned long long)>
c0009184:	89 d8                	mov    eax,ebx
c0009186:	83 c4 14             	add    esp,0x14
c0009189:	5b                   	pop    ebx
c000918a:	c2 04 00             	ret    0x4
c000918d:	90                   	nop

c000918e <Device::hibernate()>:
c000918e:	c3                   	ret    
c000918f:	90                   	nop

c0009190 <Device::wake()>:
c0009190:	c3                   	ret    
c0009191:	90                   	nop

c0009192 <Device::detect()>:
c0009192:	c3                   	ret    
c0009193:	90                   	nop

c0009194 <Device::disableLegacy()>:
c0009194:	c3                   	ret    
c0009195:	90                   	nop

c0009196 <Device::powerSaving(PowerSavingLevel)>:
c0009196:	c3                   	ret    
c0009197:	90                   	nop

c0009198 <DriverlessDevice::close(int, int, void*)>:
c0009198:	31 c0                	xor    eax,eax
c000919a:	c3                   	ret    
c000919b:	90                   	nop

c000919c <DriverlessDevice::detect()>:
c000919c:	c3                   	ret    
c000919d:	90                   	nop

c000919e <DriverlessDevice::open(int, int, void*)>:
c000919e:	83 ec 18             	sub    esp,0x18
c00091a1:	68 d0 28 02 c0       	push   0xc00228d0
c00091a6:	e8 bb 66 00 00       	call   c000f866 <KePanic(char const*)>
c00091ab:	83 c8 ff             	or     eax,0xffffffff
c00091ae:	83 c4 1c             	add    esp,0x1c
c00091b1:	c3                   	ret    

c00091b2 <Device::~Device()>:
c00091b2:	ba 74 29 02 c0       	mov    edx,0xc0022974
c00091b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091bb:	89 10                	mov    DWORD PTR [eax],edx
c00091bd:	90                   	nop
c00091be:	c3                   	ret    
c00091bf:	90                   	nop

c00091c0 <Device::~Device()>:
c00091c0:	83 ec 0c             	sub    esp,0xc
c00091c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091c7:	e8 e6 ff ff ff       	call   c00091b2 <Device::~Device()>
c00091cc:	83 c4 04             	add    esp,0x4
c00091cf:	83 ec 08             	sub    esp,0x8
c00091d2:	68 58 01 00 00       	push   0x158
c00091d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091db:	e8 c7 39 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c00091e0:	83 c4 10             	add    esp,0x10
c00091e3:	83 c4 0c             	add    esp,0xc
c00091e6:	c3                   	ret    
c00091e7:	90                   	nop

c00091e8 <Device::findAndLoadDriver()>:
c00091e8:	c7 44 24 04 ee 28 02 c0 	mov    DWORD PTR [esp+0x4],0xc00228ee
c00091f0:	e9 6f dd ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c00091f5:	90                   	nop

c00091f6 <Device::preOpenPCI(PCIDeviceInfo)>:
c00091f6:	57                   	push   edi
c00091f7:	b9 09 00 00 00       	mov    ecx,0x9
c00091fc:	56                   	push   esi
c00091fd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009201:	8d 74 24 10          	lea    esi,[esp+0x10]
c0009205:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000920f:	81 c7 18 01 00 00    	add    edi,0x118
c0009215:	fc                   	cld    
c0009216:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009218:	5e                   	pop    esi
c0009219:	5f                   	pop    edi
c000921a:	c3                   	ret    
c000921b:	90                   	nop

c000921c <Device::preOpenACPI(void*, char*, char*)>:
c000921c:	57                   	push   edi
c000921d:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009222:	56                   	push   esi
c0009223:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009227:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000922b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0009235:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000923b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009241:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009245:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009247:	b9 0e 00 00 00       	mov    ecx,0xe
c000924c:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009252:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009256:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009258:	5e                   	pop    esi
c0009259:	5f                   	pop    edi
c000925a:	c3                   	ret    
c000925b:	90                   	nop

c000925c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000925c:	53                   	push   ebx
c000925d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009261:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009265:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009269:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000926d:	0f b6 c0             	movzx  eax,al
c0009270:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009274:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009278:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000927c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009280:	5b                   	pop    ebx
c0009281:	e9 09 08 01 00       	jmp    c0019a8f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009286 <Device::getParent()>:
c0009286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000928a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009292:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009296:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000929a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000929f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00092a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00092a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00092ab:	e9 41 09 01 00       	jmp    c0019bf1 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00092b0 <Device::addChild(Device*)>:
c00092b0:	53                   	push   ebx
c00092b1:	83 ec 08             	sub    esp,0x8
c00092b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00092b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00092bc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00092c2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00092c8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00092ca:	85 d2                	test   edx,edx
c00092cc:	74 04                	je     c00092d2 <Device::addChild(Device*)+0x22>
c00092ce:	89 d3                	mov    ebx,edx
c00092d0:	eb f6                	jmp    c00092c8 <Device::addChild(Device*)+0x18>
c00092d2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00092d5:	83 ec 0c             	sub    esp,0xc
c00092d8:	6a 08                	push   0x8
c00092da:	e8 40 62 00 00       	call   c000f51f <malloc>
c00092df:	89 03                	mov    DWORD PTR [ebx],eax
c00092e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092ee:	83 c4 18             	add    esp,0x18
c00092f1:	5b                   	pop    ebx
c00092f2:	c3                   	ret    
c00092f3:	90                   	nop

c00092f4 <Device::removeAllChildren()>:
c00092f4:	56                   	push   esi
c00092f5:	53                   	push   ebx
c00092f6:	52                   	push   edx
c00092f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00092fb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009301:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009304:	74 17                	je     c000931d <Device::removeAllChildren()+0x29>
c0009306:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009309:	85 c0                	test   eax,eax
c000930b:	74 0c                	je     c0009319 <Device::removeAllChildren()+0x25>
c000930d:	83 ec 0c             	sub    esp,0xc
c0009310:	8b 10                	mov    edx,DWORD PTR [eax]
c0009312:	50                   	push   eax
c0009313:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009316:	83 c4 10             	add    esp,0x10
c0009319:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000931b:	eb e4                	jmp    c0009301 <Device::removeAllChildren()+0xd>
c000931d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009323:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009329:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000932f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009336:	58                   	pop    eax
c0009337:	5b                   	pop    ebx
c0009338:	5e                   	pop    esi
c0009339:	c3                   	ret    

c000933a <Device::hibernateAll()>:
c000933a:	53                   	push   ebx
c000933b:	83 ec 14             	sub    esp,0x14
c000933e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009342:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009344:	53                   	push   ebx
c0009345:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009348:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000934e:	83 c4 10             	add    esp,0x10
c0009351:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009354:	74 0f                	je     c0009365 <Device::hibernateAll()+0x2b>
c0009356:	83 ec 0c             	sub    esp,0xc
c0009359:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000935c:	e8 d9 ff ff ff       	call   c000933a <Device::hibernateAll()>
c0009361:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009363:	eb e9                	jmp    c000934e <Device::hibernateAll()+0x14>
c0009365:	83 c4 08             	add    esp,0x8
c0009368:	5b                   	pop    ebx
c0009369:	c3                   	ret    

c000936a <Device::wakeAll()>:
c000936a:	53                   	push   ebx
c000936b:	83 ec 14             	sub    esp,0x14
c000936e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009372:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009374:	53                   	push   ebx
c0009375:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009378:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000937e:	83 c4 10             	add    esp,0x10
c0009381:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009384:	74 0f                	je     c0009395 <Device::wakeAll()+0x2b>
c0009386:	83 ec 0c             	sub    esp,0xc
c0009389:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000938c:	e8 d9 ff ff ff       	call   c000936a <Device::wakeAll()>
c0009391:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009393:	eb e9                	jmp    c000937e <Device::wakeAll()+0x14>
c0009395:	83 c4 08             	add    esp,0x8
c0009398:	5b                   	pop    ebx
c0009399:	c3                   	ret    

c000939a <Device::detectAll()>:
c000939a:	53                   	push   ebx
c000939b:	83 ec 14             	sub    esp,0x14
c000939e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00093a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00093a4:	53                   	push   ebx
c00093a5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00093a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00093ae:	83 c4 10             	add    esp,0x10
c00093b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00093b4:	74 0f                	je     c00093c5 <Device::detectAll()+0x2b>
c00093b6:	83 ec 0c             	sub    esp,0xc
c00093b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00093bc:	e8 d9 ff ff ff       	call   c000939a <Device::detectAll()>
c00093c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00093c3:	eb e9                	jmp    c00093ae <Device::detectAll()+0x14>
c00093c5:	83 c4 08             	add    esp,0x8
c00093c8:	5b                   	pop    ebx
c00093c9:	c3                   	ret    

c00093ca <Device::disableLegacyAll()>:
c00093ca:	c3                   	ret    
c00093cb:	90                   	nop

c00093cc <Device::loadDriversForAll()>:
c00093cc:	c3                   	ret    
c00093cd:	90                   	nop

c00093ce <Device::powerSavingAll(PowerSavingLevel)>:
c00093ce:	56                   	push   esi
c00093cf:	53                   	push   ebx
c00093d0:	83 ec 0c             	sub    esp,0xc
c00093d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00093d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00093db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00093dd:	56                   	push   esi
c00093de:	53                   	push   ebx
c00093df:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00093e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00093e8:	83 c4 10             	add    esp,0x10
c00093eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00093ee:	74 0f                	je     c00093ff <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00093f0:	52                   	push   edx
c00093f1:	52                   	push   edx
c00093f2:	56                   	push   esi
c00093f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00093f6:	e8 d3 ff ff ff       	call   c00093ce <Device::powerSavingAll(PowerSavingLevel)>
c00093fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00093fd:	eb e9                	jmp    c00093e8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00093ff:	58                   	pop    eax
c0009400:	5b                   	pop    ebx
c0009401:	5e                   	pop    esi
c0009402:	c3                   	ret    
c0009403:	90                   	nop

c0009404 <Device::setName(char const*)>:
c0009404:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000940c:	e9 2f 72 ff ff       	jmp    c0000640 <strcpy>
c0009411:	90                   	nop

c0009412 <Device::Device(char const*)>:
c0009412:	83 ec 1c             	sub    esp,0x1c
c0009415:	ba 74 29 02 c0       	mov    edx,0xc0022974
c000941a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000941e:	89 10                	mov    DWORD PTR [eax],edx
c0009420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009424:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000942e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009432:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000943c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009440:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000944a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000944e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009458:	83 ec 08             	sub    esp,0x8
c000945b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000945f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009463:	e8 9c ff ff ff       	call   c0009404 <Device::setName(char const*)>
c0009468:	83 c4 10             	add    esp,0x10
c000946b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009473:	83 ec 0c             	sub    esp,0xc
c0009476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000947a:	e8 a0 60 00 00       	call   c000f51f <malloc>
c000947f:	83 c4 10             	add    esp,0x10
c0009482:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009488:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000948f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009493:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000949d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00094a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00094a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094ad:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00094b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00094ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094be:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00094c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094c9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00094d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094d4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00094de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094e2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00094ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094f0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00094fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094fe:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009508:	90                   	nop
c0009509:	83 c4 1c             	add    esp,0x1c
c000950c:	c3                   	ret    
c000950d:	90                   	nop

c000950e <Device::getName()>:
c000950e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009512:	05 d0 00 00 00       	add    eax,0xd0
c0009517:	c3                   	ret    

c0009518 <Device::closeAll()>:
c0009518:	53                   	push   ebx
c0009519:	83 ec 08             	sub    esp,0x8
c000951c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009520:	53                   	push   ebx
c0009521:	e8 e8 ff ff ff       	call   c000950e <Device::getName()>
c0009526:	52                   	push   edx
c0009527:	50                   	push   eax
c0009528:	68 28 29 02 c0       	push   0xc0022928
c000952d:	e8 32 da ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0009532:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009534:	6a 00                	push   0x0
c0009536:	6a 00                	push   0x0
c0009538:	6a 00                	push   0x0
c000953a:	53                   	push   ebx
c000953b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000953e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009544:	83 c4 20             	add    esp,0x20
c0009547:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000954a:	74 12                	je     c000955e <Device::closeAll()+0x46>
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009552:	e8 c1 ff ff ff       	call   c0009518 <Device::closeAll()>
c0009557:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009559:	83 c4 10             	add    esp,0x10
c000955c:	eb e9                	jmp    c0009547 <Device::closeAll()+0x2f>
c000955e:	83 c4 08             	add    esp,0x8
c0009561:	5b                   	pop    ebx
c0009562:	c3                   	ret    
c0009563:	90                   	nop

c0009564 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009564:	83 ec 0c             	sub    esp,0xc
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	83 ec 08             	sub    esp,0x8
c000956e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009572:	50                   	push   eax
c0009573:	e8 9a fe ff ff       	call   c0009412 <Device::Device(char const*)>
c0009578:	83 c4 10             	add    esp,0x10
c000957b:	ba a0 29 02 c0       	mov    edx,0xc00229a0
c0009580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009584:	89 10                	mov    DWORD PTR [eax],edx
c0009586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000958a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009594:	90                   	nop
c0009595:	83 c4 0c             	add    esp,0xc
c0009598:	c3                   	ret    
c0009599:	90                   	nop

c000959a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000959a:	57                   	push   edi
c000959b:	56                   	push   esi
c000959c:	53                   	push   ebx
c000959d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00095a1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00095a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00095a9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00095af:	75 0c                	jne    c00095bd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00095b1:	52                   	push   edx
c00095b2:	52                   	push   edx
c00095b3:	53                   	push   ebx
c00095b4:	56                   	push   esi
c00095b5:	e8 72 7a 01 00       	call   c002102c <LinkedList<Device>::addElement(Device*)>
c00095ba:	83 c4 10             	add    esp,0x10
c00095bd:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00095c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00095c6:	74 12                	je     c00095da <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00095c8:	50                   	push   eax
c00095c9:	57                   	push   edi
c00095ca:	56                   	push   esi
c00095cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00095ce:	e8 c7 ff ff ff       	call   c000959a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00095d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00095d5:	83 c4 10             	add    esp,0x10
c00095d8:	eb e9                	jmp    c00095c3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00095da:	5b                   	pop    ebx
c00095db:	5e                   	pop    esi
c00095dc:	5f                   	pop    edi
c00095dd:	c3                   	ret    

c00095de <getDevicesOfType(DeviceType)>:
c00095de:	53                   	push   ebx
c00095df:	83 ec 14             	sub    esp,0x14
c00095e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00095e6:	53                   	push   ebx
c00095e7:	e8 1c 7b 01 00       	call   c0021108 <LinkedList<Device>::LinkedList()>
c00095ec:	83 c4 0c             	add    esp,0xc
c00095ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00095f3:	53                   	push   ebx
c00095f4:	ff 35 d0 b0 02 c0    	push   DWORD PTR ds:0xc002b0d0
c00095fa:	e8 9b ff ff ff       	call   c000959a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00095ff:	89 d8                	mov    eax,ebx
c0009601:	83 c4 18             	add    esp,0x18
c0009604:	5b                   	pop    ebx
c0009605:	c2 04 00             	ret    0x4

c0009608 <HardDiskController::HardDiskController(char const*)>:
c0009608:	83 ec 0c             	sub    esp,0xc
c000960b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000960f:	83 ec 08             	sub    esp,0x8
c0009612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009616:	50                   	push   eax
c0009617:	e8 f6 fd ff ff       	call   c0009412 <Device::Device(char const*)>
c000961c:	83 c4 10             	add    esp,0x10
c000961f:	ba cc 29 02 c0       	mov    edx,0xc00229cc
c0009624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009628:	89 10                	mov    DWORD PTR [eax],edx
c000962a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000962e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009638:	90                   	nop
c0009639:	83 c4 0c             	add    esp,0xc
c000963c:	c3                   	ret    
c000963d:	90                   	nop
c000963e:	66 90                	xchg   ax,ax

c0009640 <HardDiskController::~HardDiskController()>:
c0009640:	83 ec 0c             	sub    esp,0xc
c0009643:	ba cc 29 02 c0       	mov    edx,0xc00229cc
c0009648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000964c:	89 10                	mov    DWORD PTR [eax],edx
c000964e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009652:	83 ec 0c             	sub    esp,0xc
c0009655:	50                   	push   eax
c0009656:	e8 57 fb ff ff       	call   c00091b2 <Device::~Device()>
c000965b:	83 c4 10             	add    esp,0x10
c000965e:	90                   	nop
c000965f:	83 c4 0c             	add    esp,0xc
c0009662:	c3                   	ret    
c0009663:	90                   	nop

c0009664 <HardDiskController::~HardDiskController()>:
c0009664:	83 ec 0c             	sub    esp,0xc
c0009667:	83 ec 0c             	sub    esp,0xc
c000966a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000966e:	e8 cd ff ff ff       	call   c0009640 <HardDiskController::~HardDiskController()>
c0009673:	83 c4 10             	add    esp,0x10
c0009676:	83 ec 08             	sub    esp,0x8
c0009679:	68 58 01 00 00       	push   0x158
c000967e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009682:	e8 20 35 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c0009687:	83 c4 10             	add    esp,0x10
c000968a:	83 c4 0c             	add    esp,0xc
c000968d:	c3                   	ret    

c000968e <PhysicalDisk::eject()>:
c000968e:	83 c8 ff             	or     eax,0xffffffff
c0009691:	c3                   	ret    

c0009692 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009692:	83 ec 0c             	sub    esp,0xc
c0009695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009699:	83 ec 08             	sub    esp,0x8
c000969c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00096a0:	50                   	push   eax
c00096a1:	e8 6c fd ff ff       	call   c0009412 <Device::Device(char const*)>
c00096a6:	83 c4 10             	add    esp,0x10
c00096a9:	ba f8 29 02 c0       	mov    edx,0xc00229f8
c00096ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096b2:	89 10                	mov    DWORD PTR [eax],edx
c00096b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096b8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00096bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096c3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00096ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096ce:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00096d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00096e0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00096e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096ea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00096f4:	90                   	nop
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	c3                   	ret    
c00096f9:	90                   	nop

c00096fa <PhysicalDisk::startCache()>:
c00096fa:	56                   	push   esi
c00096fb:	53                   	push   ebx
c00096fc:	83 ec 10             	sub    esp,0x10
c00096ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009703:	6a 44                	push   0x44
c0009705:	e8 15 5e 00 00       	call   c000f51f <malloc>
c000970a:	89 c6                	mov    esi,eax
c000970c:	58                   	pop    eax
c000970d:	5a                   	pop    edx
c000970e:	53                   	push   ebx
c000970f:	56                   	push   esi
c0009710:	e8 a7 13 00 00       	call   c000aabc <VCache::VCache(PhysicalDisk*)>
c0009715:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000971b:	83 c4 14             	add    esp,0x14
c000971e:	5b                   	pop    ebx
c000971f:	5e                   	pop    esi
c0009720:	c3                   	ret    
c0009721:	90                   	nop

c0009722 <PhysicalDisk::~PhysicalDisk()>:
c0009722:	83 ec 0c             	sub    esp,0xc
c0009725:	ba f8 29 02 c0       	mov    edx,0xc00229f8
c000972a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000972e:	89 10                	mov    DWORD PTR [eax],edx
c0009730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009734:	83 ec 0c             	sub    esp,0xc
c0009737:	50                   	push   eax
c0009738:	e8 75 fa ff ff       	call   c00091b2 <Device::~Device()>
c000973d:	83 c4 10             	add    esp,0x10
c0009740:	90                   	nop
c0009741:	83 c4 0c             	add    esp,0xc
c0009744:	c3                   	ret    
c0009745:	90                   	nop

c0009746 <PhysicalDisk::~PhysicalDisk()>:
c0009746:	83 ec 0c             	sub    esp,0xc
c0009749:	83 ec 0c             	sub    esp,0xc
c000974c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009750:	e8 cd ff ff ff       	call   c0009722 <PhysicalDisk::~PhysicalDisk()>
c0009755:	83 c4 10             	add    esp,0x10
c0009758:	83 ec 08             	sub    esp,0x8
c000975b:	68 6c 01 00 00       	push   0x16c
c0009760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009764:	e8 3e 34 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c0009769:	83 c4 10             	add    esp,0x10
c000976c:	83 c4 0c             	add    esp,0xc
c000976f:	c3                   	ret    

c0009770 <startGUI(void*)>:
c0009770:	55                   	push   ebp
c0009771:	89 e5                	mov    ebp,esp
c0009773:	53                   	push   ebx
c0009774:	83 ec 04             	sub    esp,0x4
c0009777:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000977f:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0009784:	85 c0                	test   eax,eax
c0009786:	75 01                	jne    c0009789 <startGUI(void*)+0x19>
c0009788:	fb                   	sti    
c0009789:	8b 1d d0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0d0
c000978f:	83 ec 08             	sub    esp,0x8
c0009792:	6a 01                	push   0x1
c0009794:	68 28 2a 02 c0       	push   0xc0022a28
c0009799:	e8 c6 c1 00 00       	call   c0015964 <Thr::loadDLL(char const*, bool)>
c000979e:	83 c4 10             	add    esp,0x10
c00097a1:	83 ec 08             	sub    esp,0x8
c00097a4:	53                   	push   ebx
c00097a5:	50                   	push   eax
c00097a6:	e8 0b c4 00 00       	call   c0015bb6 <Thr::executeDLL(unsigned long, void*)>
c00097ab:	83 c4 10             	add    esp,0x10
c00097ae:	8b 1d d0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0d0
c00097b4:	83 ec 08             	sub    esp,0x8
c00097b7:	6a 01                	push   0x1
c00097b9:	68 42 2a 02 c0       	push   0xc0022a42
c00097be:	e8 a1 c1 00 00       	call   c0015964 <Thr::loadDLL(char const*, bool)>
c00097c3:	83 c4 10             	add    esp,0x10
c00097c6:	83 ec 08             	sub    esp,0x8
c00097c9:	53                   	push   ebx
c00097ca:	50                   	push   eax
c00097cb:	e8 e6 c3 00 00       	call   c0015bb6 <Thr::executeDLL(unsigned long, void*)>
c00097d0:	83 c4 10             	add    esp,0x10
c00097d3:	eb fe                	jmp    c00097d3 <startGUI(void*)+0x63>

c00097d5 <startGUIVESA(void*)>:
c00097d5:	55                   	push   ebp
c00097d6:	89 e5                	mov    ebp,esp
c00097d8:	53                   	push   ebx
c00097d9:	83 ec 04             	sub    esp,0x4
c00097dc:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00097e4:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00097e9:	85 c0                	test   eax,eax
c00097eb:	75 01                	jne    c00097ee <startGUIVESA(void*)+0x19>
c00097ed:	fb                   	sti    
c00097ee:	8b 1d d0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0d0
c00097f4:	83 ec 08             	sub    esp,0x8
c00097f7:	6a 01                	push   0x1
c00097f9:	68 60 2a 02 c0       	push   0xc0022a60
c00097fe:	e8 61 c1 00 00       	call   c0015964 <Thr::loadDLL(char const*, bool)>
c0009803:	83 c4 10             	add    esp,0x10
c0009806:	83 ec 08             	sub    esp,0x8
c0009809:	53                   	push   ebx
c000980a:	50                   	push   eax
c000980b:	e8 a6 c3 00 00       	call   c0015bb6 <Thr::executeDLL(unsigned long, void*)>
c0009810:	83 c4 10             	add    esp,0x10
c0009813:	8b 1d d0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0d0
c0009819:	83 ec 08             	sub    esp,0x8
c000981c:	6a 01                	push   0x1
c000981e:	68 42 2a 02 c0       	push   0xc0022a42
c0009823:	e8 3c c1 00 00       	call   c0015964 <Thr::loadDLL(char const*, bool)>
c0009828:	83 c4 10             	add    esp,0x10
c000982b:	83 ec 08             	sub    esp,0x8
c000982e:	53                   	push   ebx
c000982f:	50                   	push   eax
c0009830:	e8 81 c3 00 00       	call   c0015bb6 <Thr::executeDLL(unsigned long, void*)>
c0009835:	83 c4 10             	add    esp,0x10
c0009838:	eb fe                	jmp    c0009838 <startGUIVESA(void*)+0x63>

c000983a <sendKeyToTerminal(unsigned char)>:
c000983a:	55                   	push   ebp
c000983b:	89 e5                	mov    ebp,esp
c000983d:	83 ec 28             	sub    esp,0x28
c0009840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009843:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009846:	a1 b4 d1 02 c0       	mov    eax,ds:0xc002d1b4
c000984b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000984f:	83 ec 08             	sub    esp,0x8
c0009852:	52                   	push   edx
c0009853:	50                   	push   eax
c0009854:	e8 13 8b 00 00       	call   c001236c <VgaText::receiveKey(unsigned char)>
c0009859:	83 c4 10             	add    esp,0x10
c000985c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009860:	83 f8 0a             	cmp    eax,0xa
c0009863:	74 16                	je     c000987b <sendKeyToTerminal(unsigned char)+0x41>
c0009865:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009869:	83 f8 03             	cmp    eax,0x3
c000986c:	74 0d                	je     c000987b <sendKeyToTerminal(unsigned char)+0x41>
c000986e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009872:	83 f8 1c             	cmp    eax,0x1c
c0009875:	0f 85 92 00 00 00    	jne    c000990d <sendKeyToTerminal(unsigned char)+0xd3>
c000987b:	fa                   	cli    
c000987c:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0009881:	83 c0 01             	add    eax,0x1
c0009884:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0009889:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c000988e:	83 c0 01             	add    eax,0x1
c0009891:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0009896:	a1 80 a6 02 c0       	mov    eax,ds:0xc002a680
c000989b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000989e:	c7 05 80 a6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a680,0x0
c00098a8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00098ac:	74 1f                	je     c00098cd <sendKeyToTerminal(unsigned char)+0x93>
c00098ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00098b1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00098b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00098b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00098ba:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00098bd:	83 ec 0c             	sub    esp,0xc
c00098c0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00098c3:	e8 cc ce 00 00       	call   c0016794 <unblockTask(ThreadControlBlock*)>
c00098c8:	83 c4 10             	add    esp,0x10
c00098cb:	eb db                	jmp    c00098a8 <sendKeyToTerminal(unsigned char)+0x6e>
c00098cd:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00098d2:	83 e8 01             	sub    eax,0x1
c00098d5:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c00098da:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00098df:	85 c0                	test   eax,eax
c00098e1:	75 18                	jne    c00098fb <sendKeyToTerminal(unsigned char)+0xc1>
c00098e3:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c00098e8:	85 c0                	test   eax,eax
c00098ea:	74 0f                	je     c00098fb <sendKeyToTerminal(unsigned char)+0xc1>
c00098ec:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c00098f6:	e8 89 cb 00 00       	call   c0016484 <schedule()>
c00098fb:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0009903:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0009908:	85 c0                	test   eax,eax
c000990a:	75 01                	jne    c000990d <sendKeyToTerminal(unsigned char)+0xd3>
c000990c:	fb                   	sti    
c000990d:	90                   	nop
c000990e:	c9                   	leave  
c000990f:	c3                   	ret    

c0009910 <sendKeyboardToken(KeyboardToken)>:
c0009910:	55                   	push   ebp
c0009911:	89 e5                	mov    ebp,esp
c0009913:	83 ec 18             	sub    esp,0x18
c0009916:	e8 7b 68 00 00       	call   c0010196 <KeUserIOReceived()>
c000991b:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000991e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009921:	0f b7 c0             	movzx  eax,ax
c0009924:	83 f2 01             	xor    edx,0x1
c0009927:	88 90 a0 a6 02 c0    	mov    BYTE PTR [eax-0x3ffd5960],dl
c000992d:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0009932:	85 c0                	test   eax,eax
c0009934:	74 24                	je     c000995a <sendKeyboardToken(KeyboardToken)+0x4a>
c0009936:	8b 0d 88 a6 02 c0    	mov    ecx,DWORD PTR ds:0xc002a688
c000993c:	83 ec 04             	sub    esp,0x4
c000993f:	68 a0 a6 02 c0       	push   0xc002a6a0
c0009944:	83 ec 08             	sub    esp,0x8
c0009947:	89 e2                	mov    edx,esp
c0009949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000994c:	89 02                	mov    DWORD PTR [edx],eax
c000994e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009951:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009955:	ff d1                	call   ecx
c0009957:	83 c4 10             	add    esp,0x10
c000995a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000995e:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009961:	0f b6 c0             	movzx  eax,al
c0009964:	85 c0                	test   eax,eax
c0009966:	0f 84 da 00 00 00    	je     c0009a46 <sendKeyboardToken(KeyboardToken)+0x136>
c000996c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000996f:	0f b7 c0             	movzx  eax,ax
c0009972:	3d 18 03 00 00       	cmp    eax,0x318
c0009977:	75 06                	jne    c000997f <sendKeyboardToken(KeyboardToken)+0x6f>
c0009979:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000997f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009982:	0f b7 c0             	movzx  eax,ax
c0009985:	3d 19 03 00 00       	cmp    eax,0x319
c000998a:	75 06                	jne    c0009992 <sendKeyboardToken(KeyboardToken)+0x82>
c000998c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009995:	0f b7 c0             	movzx  eax,ax
c0009998:	3d 1a 03 00 00       	cmp    eax,0x31a
c000999d:	75 06                	jne    c00099a5 <sendKeyboardToken(KeyboardToken)+0x95>
c000999f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00099a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099a8:	0f b7 c0             	movzx  eax,ax
c00099ab:	3d 1b 03 00 00       	cmp    eax,0x31b
c00099b0:	75 06                	jne    c00099b8 <sendKeyboardToken(KeyboardToken)+0xa8>
c00099b2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00099b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099bb:	0f b7 c0             	movzx  eax,ax
c00099be:	3d 1c 03 00 00       	cmp    eax,0x31c
c00099c3:	75 06                	jne    c00099cb <sendKeyboardToken(KeyboardToken)+0xbb>
c00099c5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00099cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099ce:	0f b7 c0             	movzx  eax,ax
c00099d1:	3d 1d 03 00 00       	cmp    eax,0x31d
c00099d6:	75 06                	jne    c00099de <sendKeyboardToken(KeyboardToken)+0xce>
c00099d8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00099de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099e1:	0f b7 c0             	movzx  eax,ax
c00099e4:	3d 1e 03 00 00       	cmp    eax,0x31e
c00099e9:	75 06                	jne    c00099f1 <sendKeyboardToken(KeyboardToken)+0xe1>
c00099eb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00099f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099f4:	0f b7 c0             	movzx  eax,ax
c00099f7:	3d 1f 03 00 00       	cmp    eax,0x31f
c00099fc:	75 06                	jne    c0009a04 <sendKeyboardToken(KeyboardToken)+0xf4>
c00099fe:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0009a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a07:	0f b7 c0             	movzx  eax,ax
c0009a0a:	3d 20 03 00 00       	cmp    eax,0x320
c0009a0f:	75 06                	jne    c0009a17 <sendKeyboardToken(KeyboardToken)+0x107>
c0009a11:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0009a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a1a:	0f b7 c0             	movzx  eax,ax
c0009a1d:	3d 21 03 00 00       	cmp    eax,0x321
c0009a22:	75 06                	jne    c0009a2a <sendKeyboardToken(KeyboardToken)+0x11a>
c0009a24:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0009a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a2d:	0f b7 c0             	movzx  eax,ax
c0009a30:	3d 22 03 00 00       	cmp    eax,0x322
c0009a35:	0f 85 f1 00 00 00    	jne    c0009b2c <sendKeyboardToken(KeyboardToken)+0x21c>
c0009a3b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0009a41:	e9 e6 00 00 00       	jmp    c0009b2c <sendKeyboardToken(KeyboardToken)+0x21c>
c0009a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a49:	0f b7 c0             	movzx  eax,ax
c0009a4c:	3d 18 03 00 00       	cmp    eax,0x318
c0009a51:	75 0a                	jne    c0009a5d <sendKeyboardToken(KeyboardToken)+0x14d>
c0009a53:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0009a59:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a60:	0f b7 c0             	movzx  eax,ax
c0009a63:	3d 19 03 00 00       	cmp    eax,0x319
c0009a68:	75 0a                	jne    c0009a74 <sendKeyboardToken(KeyboardToken)+0x164>
c0009a6a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009a70:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a77:	0f b7 c0             	movzx  eax,ax
c0009a7a:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009a7f:	75 0a                	jne    c0009a8b <sendKeyboardToken(KeyboardToken)+0x17b>
c0009a81:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0009a87:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a8e:	0f b7 c0             	movzx  eax,ax
c0009a91:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009a96:	75 0a                	jne    c0009aa2 <sendKeyboardToken(KeyboardToken)+0x192>
c0009a98:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009a9e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009aa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aa5:	0f b7 c0             	movzx  eax,ax
c0009aa8:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009aad:	75 0a                	jne    c0009ab9 <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009aaf:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009ab5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009abc:	0f b7 c0             	movzx  eax,ax
c0009abf:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009ac4:	75 0a                	jne    c0009ad0 <sendKeyboardToken(KeyboardToken)+0x1c0>
c0009ac6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009acc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ad3:	0f b7 c0             	movzx  eax,ax
c0009ad6:	3d 1e 03 00 00       	cmp    eax,0x31e
c0009adb:	75 0a                	jne    c0009ae7 <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009add:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0009ae3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aea:	0f b7 c0             	movzx  eax,ax
c0009aed:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009af2:	75 0a                	jne    c0009afe <sendKeyboardToken(KeyboardToken)+0x1ee>
c0009af4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0009afa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b01:	0f b7 c0             	movzx  eax,ax
c0009b04:	3d 20 03 00 00       	cmp    eax,0x320
c0009b09:	75 0a                	jne    c0009b15 <sendKeyboardToken(KeyboardToken)+0x205>
c0009b0b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0009b11:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b18:	0f b7 c0             	movzx  eax,ax
c0009b1b:	3d 21 03 00 00       	cmp    eax,0x321
c0009b20:	75 0a                	jne    c0009b2c <sendKeyboardToken(KeyboardToken)+0x21c>
c0009b22:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0009b28:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b2f:	0f b7 c0             	movzx  eax,ax
c0009b32:	3d 00 02 00 00       	cmp    eax,0x200
c0009b37:	75 2f                	jne    c0009b68 <sendKeyboardToken(KeyboardToken)+0x258>
c0009b39:	a0 a0 aa 02 c0       	mov    al,ds:0xc002aaa0
c0009b3e:	83 f0 01             	xor    eax,0x1
c0009b41:	0f b6 c0             	movzx  eax,al
c0009b44:	85 c0                	test   eax,eax
c0009b46:	74 20                	je     c0009b68 <sendKeyboardToken(KeyboardToken)+0x258>
c0009b48:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0009b4d:	6a 01                	push   0x1
c0009b4f:	6a 00                	push   0x0
c0009b51:	68 70 97 00 c0       	push   0xc0009770
c0009b56:	50                   	push   eax
c0009b57:	e8 d0 c6 00 00       	call   c001622c <Process::createThread(void (*)(void*), void*, int)>
c0009b5c:	83 c4 10             	add    esp,0x10
c0009b5f:	c6 05 a0 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aaa0,0x1
c0009b66:	eb 3a                	jmp    c0009ba2 <sendKeyboardToken(KeyboardToken)+0x292>
c0009b68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b6b:	0f b7 c0             	movzx  eax,ax
c0009b6e:	3d 01 02 00 00       	cmp    eax,0x201
c0009b73:	75 2d                	jne    c0009ba2 <sendKeyboardToken(KeyboardToken)+0x292>
c0009b75:	a0 a0 aa 02 c0       	mov    al,ds:0xc002aaa0
c0009b7a:	83 f0 01             	xor    eax,0x1
c0009b7d:	0f b6 c0             	movzx  eax,al
c0009b80:	85 c0                	test   eax,eax
c0009b82:	74 1e                	je     c0009ba2 <sendKeyboardToken(KeyboardToken)+0x292>
c0009b84:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0009b89:	6a 01                	push   0x1
c0009b8b:	6a 00                	push   0x0
c0009b8d:	68 d5 97 00 c0       	push   0xc00097d5
c0009b92:	50                   	push   eax
c0009b93:	e8 94 c6 00 00       	call   c001622c <Process::createThread(void (*)(void*), void*, int)>
c0009b98:	83 c4 10             	add    esp,0x10
c0009b9b:	c6 05 a0 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aaa0,0x1
c0009ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ba5:	0f b7 c0             	movzx  eax,ax
c0009ba8:	3d 25 03 00 00       	cmp    eax,0x325
c0009bad:	75 06                	jne    c0009bb5 <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009baf:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bb8:	0f b7 c0             	movzx  eax,ax
c0009bbb:	3d 24 03 00 00       	cmp    eax,0x324
c0009bc0:	75 06                	jne    c0009bc8 <sendKeyboardToken(KeyboardToken)+0x2b8>
c0009bc2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0009bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bcb:	0f b7 c0             	movzx  eax,ax
c0009bce:	3d 23 03 00 00       	cmp    eax,0x323
c0009bd3:	75 06                	jne    c0009bdb <sendKeyboardToken(KeyboardToken)+0x2cb>
c0009bd5:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0009bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bde:	0f b7 c0             	movzx  eax,ax
c0009be1:	3d 26 03 00 00       	cmp    eax,0x326
c0009be6:	75 06                	jne    c0009bee <sendKeyboardToken(KeyboardToken)+0x2de>
c0009be8:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0009bee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bf1:	0f b7 c0             	movzx  eax,ax
c0009bf4:	3d 27 03 00 00       	cmp    eax,0x327
c0009bf9:	75 06                	jne    c0009c01 <sendKeyboardToken(KeyboardToken)+0x2f1>
c0009bfb:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0009c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c04:	0f b7 c0             	movzx  eax,ax
c0009c07:	3d 22 03 00 00       	cmp    eax,0x322
c0009c0c:	75 06                	jne    c0009c14 <sendKeyboardToken(KeyboardToken)+0x304>
c0009c0e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0009c14:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0009c18:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009c1b:	83 f0 01             	xor    eax,0x1
c0009c1e:	0f b6 c0             	movzx  eax,al
c0009c21:	85 c0                	test   eax,eax
c0009c23:	74 7c                	je     c0009ca1 <sendKeyboardToken(KeyboardToken)+0x391>
c0009c25:	a0 a1 a7 02 c0       	mov    al,ds:0xc002a7a1
c0009c2a:	0f b6 c0             	movzx  eax,al
c0009c2d:	85 c0                	test   eax,eax
c0009c2f:	74 43                	je     c0009c74 <sendKeyboardToken(KeyboardToken)+0x364>
c0009c31:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009c35:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0009c39:	85 c0                	test   eax,eax
c0009c3b:	74 2b                	je     c0009c68 <sendKeyboardToken(KeyboardToken)+0x358>
c0009c3d:	8b 15 a4 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aaa4
c0009c43:	89 d0                	mov    eax,edx
c0009c45:	c1 e0 02             	shl    eax,0x2
c0009c48:	01 d0                	add    eax,edx
c0009c4a:	01 c0                	add    eax,eax
c0009c4c:	a3 a4 aa 02 c0       	mov    ds:0xc002aaa4,eax
c0009c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c54:	0f b7 c0             	movzx  eax,ax
c0009c57:	8d 50 d0             	lea    edx,[eax-0x30]
c0009c5a:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c0009c5f:	01 d0                	add    eax,edx
c0009c61:	a3 a4 aa 02 c0       	mov    ds:0xc002aaa4,eax
c0009c66:	eb 71                	jmp    c0009cd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009c68:	c7 05 a4 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aaa4,0x0
c0009c72:	eb 65                	jmp    c0009cd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009c74:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c0009c79:	85 c0                	test   eax,eax
c0009c7b:	74 18                	je     c0009c95 <sendKeyboardToken(KeyboardToken)+0x385>
c0009c7d:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c0009c82:	0f b6 c0             	movzx  eax,al
c0009c85:	83 ec 0c             	sub    esp,0xc
c0009c88:	50                   	push   eax
c0009c89:	e8 ac fb ff ff       	call   c000983a <sendKeyToTerminal(unsigned char)>
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009c95:	c7 05 a4 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aaa4,0x0
c0009c9f:	eb 38                	jmp    c0009cd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ca4:	0f b7 c0             	movzx  eax,ax
c0009ca7:	3d 01 01 00 00       	cmp    eax,0x101
c0009cac:	75 2b                	jne    c0009cd9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009cae:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c0009cb3:	85 c0                	test   eax,eax
c0009cb5:	74 18                	je     c0009ccf <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009cb7:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c0009cbc:	0f b6 c0             	movzx  eax,al
c0009cbf:	83 ec 0c             	sub    esp,0xc
c0009cc2:	50                   	push   eax
c0009cc3:	e8 72 fb ff ff       	call   c000983a <sendKeyToTerminal(unsigned char)>
c0009cc8:	83 c4 10             	add    esp,0x10
c0009ccb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009ccf:	c7 05 a4 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aaa4,0x0
c0009cd9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009cdc:	83 f0 01             	xor    eax,0x1
c0009cdf:	0f b6 c0             	movzx  eax,al
c0009ce2:	85 c0                	test   eax,eax
c0009ce4:	74 5a                	je     c0009d40 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ce6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009ce9:	83 f0 01             	xor    eax,0x1
c0009cec:	0f b6 c0             	movzx  eax,al
c0009cef:	85 c0                	test   eax,eax
c0009cf1:	74 4d                	je     c0009d40 <sendKeyboardToken(KeyboardToken)+0x430>
c0009cf3:	a0 a0 a7 02 c0       	mov    al,ds:0xc002a7a0
c0009cf8:	83 f0 01             	xor    eax,0x1
c0009cfb:	0f b6 c0             	movzx  eax,al
c0009cfe:	85 c0                	test   eax,eax
c0009d00:	74 3e                	je     c0009d40 <sendKeyboardToken(KeyboardToken)+0x430>
c0009d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d05:	0f b7 c0             	movzx  eax,ax
c0009d08:	83 f8 1f             	cmp    eax,0x1f
c0009d0b:	76 0b                	jbe    c0009d18 <sendKeyboardToken(KeyboardToken)+0x408>
c0009d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d10:	0f b7 c0             	movzx  eax,ax
c0009d13:	83 f8 7e             	cmp    eax,0x7e
c0009d16:	76 16                	jbe    c0009d2e <sendKeyboardToken(KeyboardToken)+0x41e>
c0009d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d1b:	0f b7 c0             	movzx  eax,ax
c0009d1e:	83 f8 0a             	cmp    eax,0xa
c0009d21:	74 0b                	je     c0009d2e <sendKeyboardToken(KeyboardToken)+0x41e>
c0009d23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d26:	0f b7 c0             	movzx  eax,ax
c0009d29:	83 f8 08             	cmp    eax,0x8
c0009d2c:	75 12                	jne    c0009d40 <sendKeyboardToken(KeyboardToken)+0x430>
c0009d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d31:	0f b6 c0             	movzx  eax,al
c0009d34:	83 ec 0c             	sub    esp,0xc
c0009d37:	50                   	push   eax
c0009d38:	e8 fd fa ff ff       	call   c000983a <sendKeyToTerminal(unsigned char)>
c0009d3d:	83 c4 10             	add    esp,0x10
c0009d40:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009d43:	83 f0 01             	xor    eax,0x1
c0009d46:	0f b6 c0             	movzx  eax,al
c0009d49:	85 c0                	test   eax,eax
c0009d4b:	74 5d                	je     c0009daa <sendKeyboardToken(KeyboardToken)+0x49a>
c0009d4d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009d50:	83 f0 01             	xor    eax,0x1
c0009d53:	0f b6 c0             	movzx  eax,al
c0009d56:	85 c0                	test   eax,eax
c0009d58:	74 50                	je     c0009daa <sendKeyboardToken(KeyboardToken)+0x49a>
c0009d5a:	a0 a0 a7 02 c0       	mov    al,ds:0xc002a7a0
c0009d5f:	0f b6 c0             	movzx  eax,al
c0009d62:	85 c0                	test   eax,eax
c0009d64:	74 44                	je     c0009daa <sendKeyboardToken(KeyboardToken)+0x49a>
c0009d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d69:	0f b7 c0             	movzx  eax,ax
c0009d6c:	83 f8 3f             	cmp    eax,0x3f
c0009d6f:	76 39                	jbe    c0009daa <sendKeyboardToken(KeyboardToken)+0x49a>
c0009d71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d74:	0f b7 c0             	movzx  eax,ax
c0009d77:	83 f8 7f             	cmp    eax,0x7f
c0009d7a:	77 2e                	ja     c0009daa <sendKeyboardToken(KeyboardToken)+0x49a>
c0009d7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d7f:	88 c2                	mov    dl,al
c0009d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009d84:	0f b7 c0             	movzx  eax,ax
c0009d87:	83 f8 5f             	cmp    eax,0x5f
c0009d8a:	76 04                	jbe    c0009d90 <sendKeyboardToken(KeyboardToken)+0x480>
c0009d8c:	b0 20                	mov    al,0x20
c0009d8e:	eb 02                	jmp    c0009d92 <sendKeyboardToken(KeyboardToken)+0x482>
c0009d90:	b0 00                	mov    al,0x0
c0009d92:	89 d1                	mov    ecx,edx
c0009d94:	29 c1                	sub    ecx,eax
c0009d96:	89 c8                	mov    eax,ecx
c0009d98:	83 e8 40             	sub    eax,0x40
c0009d9b:	0f b6 c0             	movzx  eax,al
c0009d9e:	83 ec 0c             	sub    esp,0xc
c0009da1:	50                   	push   eax
c0009da2:	e8 93 fa ff ff       	call   c000983a <sendKeyToTerminal(unsigned char)>
c0009da7:	83 c4 10             	add    esp,0x10
c0009daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009dad:	0f b7 c0             	movzx  eax,ax
c0009db0:	3d 00 03 00 00       	cmp    eax,0x300
c0009db5:	75 12                	jne    c0009dc9 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009db7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009dba:	83 f0 01             	xor    eax,0x1
c0009dbd:	0f b6 c0             	movzx  eax,al
c0009dc0:	85 c0                	test   eax,eax
c0009dc2:	74 05                	je     c0009dc9 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009dc4:	e8 98 7c 00 00       	call   c0011a61 <doTerminalCycle()>
c0009dc9:	90                   	nop
c0009dca:	c9                   	leave  
c0009dcb:	c3                   	ret    

c0009dcc <clearInternalKeybuffer(VgaText*)>:
c0009dcc:	55                   	push   ebp
c0009dcd:	89 e5                	mov    ebp,esp
c0009dcf:	83 ec 08             	sub    esp,0x8
c0009dd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009dd5:	05 02 01 00 00       	add    eax,0x102
c0009dda:	83 ec 0c             	sub    esp,0xc
c0009ddd:	50                   	push   eax
c0009dde:	e8 8d 67 ff ff       	call   c0000570 <strlen>
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009de9:	81 c2 02 01 00 00    	add    edx,0x102
c0009def:	83 ec 04             	sub    esp,0x4
c0009df2:	50                   	push   eax
c0009df3:	6a 00                	push   0x0
c0009df5:	52                   	push   edx
c0009df6:	e8 f5 66 ff ff       	call   c00004f0 <memset>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	90                   	nop
c0009dff:	c9                   	leave  
c0009e00:	c3                   	ret    

c0009e01 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009e01:	55                   	push   ebp
c0009e02:	89 e5                	mov    ebp,esp
c0009e04:	83 ec 18             	sub    esp,0x18
c0009e07:	a1 88 a6 02 c0       	mov    eax,ds:0xc002a688
c0009e0c:	85 c0                	test   eax,eax
c0009e0e:	74 2a                	je     c0009e3a <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009e10:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009e16:	8b 0d 88 a6 02 c0    	mov    ecx,DWORD PTR ds:0xc002a688
c0009e1c:	83 ec 04             	sub    esp,0x4
c0009e1f:	68 a0 a6 02 c0       	push   0xc002a6a0
c0009e24:	83 ec 08             	sub    esp,0x8
c0009e27:	89 e2                	mov    edx,esp
c0009e29:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009e2c:	89 02                	mov    DWORD PTR [edx],eax
c0009e2e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009e31:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009e35:	ff d1                	call   ecx
c0009e37:	83 c4 10             	add    esp,0x10
c0009e3a:	fb                   	sti    
c0009e3b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009e42:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009e46:	0f 84 08 01 00 00    	je     c0009f54 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c0009e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009e4f:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009e55:	0f be c0             	movsx  eax,al
c0009e58:	85 c0                	test   eax,eax
c0009e5a:	75 27                	jne    c0009e83 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c0009e5c:	fa                   	cli    
c0009e5d:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0009e62:	83 c0 01             	add    eax,0x1
c0009e65:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0009e6a:	e8 15 c6 00 00       	call   c0016484 <schedule()>
c0009e6f:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0009e77:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0009e7c:	85 c0                	test   eax,eax
c0009e7e:	75 cc                	jne    c0009e4c <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009e80:	fb                   	sti    
c0009e81:	eb c9                	jmp    c0009e4c <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009e83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009e86:	8d 50 01             	lea    edx,[eax+0x1]
c0009e89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009e8c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009e8f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009e95:	88 10                	mov    BYTE PTR [eax],dl
c0009e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009e9a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009ea0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009ea3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009ea7:	83 f8 03             	cmp    eax,0x3
c0009eaa:	75 1e                	jne    c0009eca <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c0009eac:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009eb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0009eb3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009eb6:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ebc:	83 ec 08             	sub    esp,0x8
c0009ebf:	6a 02                	push   0x2
c0009ec1:	50                   	push   eax
c0009ec2:	e8 e8 6a 00 00       	call   c00109af <KeRaiseSignal(SigHandlerBlock*, int)>
c0009ec7:	83 c4 10             	add    esp,0x10
c0009eca:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009ece:	83 f8 1c             	cmp    eax,0x1c
c0009ed1:	75 1e                	jne    c0009ef1 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c0009ed3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ed8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009eda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009edd:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ee3:	83 ec 08             	sub    esp,0x8
c0009ee6:	6a 09                	push   0x9
c0009ee8:	50                   	push   eax
c0009ee9:	e8 c1 6a 00 00       	call   c00109af <KeRaiseSignal(SigHandlerBlock*, int)>
c0009eee:	83 c4 10             	add    esp,0x10
c0009ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ef4:	05 02 01 00 00       	add    eax,0x102
c0009ef9:	83 ec 0c             	sub    esp,0xc
c0009efc:	50                   	push   eax
c0009efd:	e8 6e 66 ff ff       	call   c0000570 <strlen>
c0009f02:	83 c4 10             	add    esp,0x10
c0009f05:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009f08:	81 c2 02 01 00 00    	add    edx,0x102
c0009f0e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009f11:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009f14:	81 c2 02 01 00 00    	add    edx,0x102
c0009f1a:	83 ec 04             	sub    esp,0x4
c0009f1d:	50                   	push   eax
c0009f1e:	51                   	push   ecx
c0009f1f:	52                   	push   edx
c0009f20:	e8 ab 64 ff ff       	call   c00003d0 <memmove>
c0009f25:	83 c4 10             	add    esp,0x10
c0009f28:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009f2c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009f30:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009f34:	83 f8 0a             	cmp    eax,0xa
c0009f37:	74 16                	je     c0009f4f <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009f39:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009f3d:	83 f8 03             	cmp    eax,0x3
c0009f40:	74 0d                	je     c0009f4f <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009f42:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009f46:	83 f8 1c             	cmp    eax,0x1c
c0009f49:	0f 85 f3 fe ff ff    	jne    c0009e42 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0009f4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009f52:	eb 03                	jmp    c0009f57 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c0009f54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009f57:	c9                   	leave  
c0009f58:	c3                   	ret    
c0009f59:	90                   	nop

c0009f5a <Keyboard::Keyboard(char const*)>:
c0009f5a:	83 ec 0c             	sub    esp,0xc
c0009f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f61:	83 ec 08             	sub    esp,0x8
c0009f64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f68:	50                   	push   eax
c0009f69:	e8 a4 f4 ff ff       	call   c0009412 <Device::Device(char const*)>
c0009f6e:	83 c4 10             	add    esp,0x10
c0009f71:	ba 84 2a 02 c0       	mov    edx,0xc0022a84
c0009f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f7a:	89 10                	mov    DWORD PTR [eax],edx
c0009f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f80:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009f8a:	c6 05 84 a6 02 c0 01 	mov    BYTE PTR ds:0xc002a684,0x1
c0009f91:	90                   	nop
c0009f92:	83 c4 0c             	add    esp,0xc
c0009f95:	c3                   	ret    

c0009f96 <Keyboard::~Keyboard()>:
c0009f96:	83 ec 0c             	sub    esp,0xc
c0009f99:	ba 84 2a 02 c0       	mov    edx,0xc0022a84
c0009f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fa2:	89 10                	mov    DWORD PTR [eax],edx
c0009fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fa8:	83 ec 0c             	sub    esp,0xc
c0009fab:	50                   	push   eax
c0009fac:	e8 01 f2 ff ff       	call   c00091b2 <Device::~Device()>
c0009fb1:	83 c4 10             	add    esp,0x10
c0009fb4:	90                   	nop
c0009fb5:	83 c4 0c             	add    esp,0xc
c0009fb8:	c3                   	ret    
c0009fb9:	90                   	nop

c0009fba <Keyboard::~Keyboard()>:
c0009fba:	83 ec 0c             	sub    esp,0xc
c0009fbd:	83 ec 0c             	sub    esp,0xc
c0009fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fc4:	e8 cd ff ff ff       	call   c0009f96 <Keyboard::~Keyboard()>
c0009fc9:	83 c4 10             	add    esp,0x10
c0009fcc:	83 ec 08             	sub    esp,0x8
c0009fcf:	68 5c 01 00 00       	push   0x15c
c0009fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fd8:	e8 ca 2b 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	83 c4 0c             	add    esp,0xc
c0009fe3:	c3                   	ret    

c0009fe4 <LogicalDisk::close(int, int, void*)>:
c0009fe4:	83 c8 ff             	or     eax,0xffffffff
c0009fe7:	c3                   	ret    

c0009fe8 <LogicalDisk::~LogicalDisk()>:
c0009fe8:	83 ec 0c             	sub    esp,0xc
c0009feb:	ba fc 2a 02 c0       	mov    edx,0xc0022afc
c0009ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ff4:	89 10                	mov    DWORD PTR [eax],edx
c0009ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ffa:	83 ec 0c             	sub    esp,0xc
c0009ffd:	50                   	push   eax
c0009ffe:	e8 af f1 ff ff       	call   c00091b2 <Device::~Device()>
c000a003:	83 c4 10             	add    esp,0x10
c000a006:	90                   	nop
c000a007:	83 c4 0c             	add    esp,0xc
c000a00a:	c3                   	ret    
c000a00b:	90                   	nop

c000a00c <LogicalDisk::~LogicalDisk()>:
c000a00c:	83 ec 0c             	sub    esp,0xc
c000a00f:	83 ec 0c             	sub    esp,0xc
c000a012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a016:	e8 cd ff ff ff       	call   c0009fe8 <LogicalDisk::~LogicalDisk()>
c000a01b:	83 c4 10             	add    esp,0x10
c000a01e:	83 ec 08             	sub    esp,0x8
c000a021:	68 78 01 00 00       	push   0x178
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	e8 78 2b 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c000a02f:	83 c4 10             	add    esp,0x10
c000a032:	83 c4 0c             	add    esp,0xc
c000a035:	c3                   	ret    

c000a036 <LogicalDisk::open(int, int, void*)>:
c000a036:	83 ec 18             	sub    esp,0x18
c000a039:	68 b0 2a 02 c0       	push   0xc0022ab0
c000a03e:	e8 23 58 00 00       	call   c000f866 <KePanic(char const*)>
c000a043:	83 c8 ff             	or     eax,0xffffffff
c000a046:	83 c4 1c             	add    esp,0x1c
c000a049:	c3                   	ret    

c000a04a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a04a:	53                   	push   ebx
c000a04b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a04f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a053:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a057:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a05d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a063:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a069:	77 10                	ja     c000a07b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a06b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a071:	89 d3                	mov    ebx,edx
c000a073:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a079:	72 05                	jb     c000a080 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a07b:	83 c8 ff             	or     eax,0xffffffff
c000a07e:	89 c2                	mov    edx,eax
c000a080:	5b                   	pop    ebx
c000a081:	c3                   	ret    

c000a082 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a082:	56                   	push   esi
c000a083:	83 c8 ff             	or     eax,0xffffffff
c000a086:	53                   	push   ebx
c000a087:	89 c2                	mov    edx,eax
c000a089:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a08d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a091:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a095:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a09b:	77 27                	ja     c000a0c4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a09d:	89 d8                	mov    eax,ebx
c000a09f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a0a5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a0ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a0b0:	89 c2                	mov    edx,eax
c000a0b2:	73 10                	jae    c000a0c4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a0b4:	89 c8                	mov    eax,ecx
c000a0b6:	89 da                	mov    edx,ebx
c000a0b8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a0be:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a0c4:	5b                   	pop    ebx
c000a0c5:	5e                   	pop    esi
c000a0c6:	c3                   	ret    
c000a0c7:	90                   	nop

c000a0c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a0c8:	83 ec 1c             	sub    esp,0x1c
c000a0cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a0cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a0db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0df:	89 04 24             	mov    DWORD PTR [esp],eax
c000a0e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a0e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a0ee:	83 ec 08             	sub    esp,0x8
c000a0f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0f5:	50                   	push   eax
c000a0f6:	e8 17 f3 ff ff       	call   c0009412 <Device::Device(char const*)>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	ba fc 2a 02 c0       	mov    edx,0xc0022afc
c000a103:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a107:	89 10                	mov    DWORD PTR [eax],edx
c000a109:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a10d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a118:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a11f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a123:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a12a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a12e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a138:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a13c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a140:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a144:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a14a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a150:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a154:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a157:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a15b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a161:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a16b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a16f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a175:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a179:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a183:	90                   	nop
c000a184:	83 c4 1c             	add    esp,0x1c
c000a187:	c3                   	ret    

c000a188 <LogicalDisk::assignDriveLetter()>:
c000a188:	55                   	push   ebp
c000a189:	57                   	push   edi
c000a18a:	56                   	push   esi
c000a18b:	53                   	push   ebx
c000a18c:	83 ec 14             	sub    esp,0x14
c000a18f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a193:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a199:	b0 41                	mov    al,0x41
c000a19b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a1a1:	84 d2                	test   dl,dl
c000a1a3:	75 02                	jne    c000a1a7 <LogicalDisk::assignDriveLetter()+0x1f>
c000a1a5:	b0 43                	mov    al,0x43
c000a1a7:	8b 3d c0 aa 02 c0    	mov    edi,DWORD PTR ds:0xc002aac0
c000a1ad:	0f b6 ca             	movzx  ecx,dl
c000a1b0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a1b4:	0f be e8             	movsx  ebp,al
c000a1b7:	8b 3d c4 aa 02 c0    	mov    edi,DWORD PTR ds:0xc002aac4
c000a1bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a1c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a1c5:	3c 43                	cmp    al,0x43
c000a1c7:	75 10                	jne    c000a1d9 <LogicalDisk::assignDriveLetter()+0x51>
c000a1c9:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a1d0:	75 5a                	jne    c000a22c <LogicalDisk::assignDriveLetter()+0xa4>
c000a1d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a1d7:	75 53                	jne    c000a22c <LogicalDisk::assignDriveLetter()+0xa4>
c000a1d9:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a1dc:	ba 01 00 00 00       	mov    edx,0x1
c000a1e1:	89 34 24             	mov    DWORD PTR [esp],esi
c000a1e4:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a1e7:	d3 e2                	shl    edx,cl
c000a1e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ed:	89 d7                	mov    edi,edx
c000a1ef:	89 d6                	mov    esi,edx
c000a1f1:	c1 ff 1f             	sar    edi,0x1f
c000a1f4:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a1f8:	21 f9                	and    ecx,edi
c000a1fa:	09 d1                	or     ecx,edx
c000a1fc:	75 2e                	jne    c000a22c <LogicalDisk::assignDriveLetter()+0xa4>
c000a1fe:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a202:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a206:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a20c:	09 f2                	or     edx,esi
c000a20e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a211:	89 15 c0 aa 02 c0    	mov    DWORD PTR ds:0xc002aac0,edx
c000a217:	89 1c b5 e0 aa 02 c0 	mov    DWORD PTR [esi*4-0x3ffd5520],ebx
c000a21e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a222:	09 fa                	or     edx,edi
c000a224:	89 15 c4 aa 02 c0    	mov    DWORD PTR ds:0xc002aac4,edx
c000a22a:	eb 0d                	jmp    c000a239 <LogicalDisk::assignDriveLetter()+0xb1>
c000a22c:	8d 50 01             	lea    edx,[eax+0x1]
c000a22f:	45                   	inc    ebp
c000a230:	88 d0                	mov    al,dl
c000a232:	80 fa 5b             	cmp    dl,0x5b
c000a235:	75 8e                	jne    c000a1c5 <LogicalDisk::assignDriveLetter()+0x3d>
c000a237:	31 c0                	xor    eax,eax
c000a239:	83 c4 14             	add    esp,0x14
c000a23c:	5b                   	pop    ebx
c000a23d:	5e                   	pop    esi
c000a23e:	5f                   	pop    edi
c000a23f:	5d                   	pop    ebp
c000a240:	c3                   	ret    
c000a241:	90                   	nop

c000a242 <LogicalDisk::mount()>:
c000a242:	56                   	push   esi
c000a243:	53                   	push   ebx
c000a244:	53                   	push   ebx
c000a245:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a249:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c000a24f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a259:	85 db                	test   ebx,ebx
c000a25b:	74 27                	je     c000a284 <LogicalDisk::mount()+0x42>
c000a25d:	51                   	push   ecx
c000a25e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a265:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a267:	83 e8 41             	sub    eax,0x41
c000a26a:	50                   	push   eax
c000a26b:	56                   	push   esi
c000a26c:	53                   	push   ebx
c000a26d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	84 c0                	test   al,al
c000a275:	74 08                	je     c000a27f <LogicalDisk::mount()+0x3d>
c000a277:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a27d:	eb 07                	jmp    c000a286 <LogicalDisk::mount()+0x44>
c000a27f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a282:	eb d5                	jmp    c000a259 <LogicalDisk::mount()+0x17>
c000a284:	31 c0                	xor    eax,eax
c000a286:	5a                   	pop    edx
c000a287:	5b                   	pop    ebx
c000a288:	5e                   	pop    esi
c000a289:	c3                   	ret    

c000a28a <LogicalDisk::unmount()>:
c000a28a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a28e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a298:	c3                   	ret    
c000a299:	90                   	nop

c000a29a <LogicalDisk::eject()>:
c000a29a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a29e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a2a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000a2a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a2aa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a2ad:	90                   	nop

c000a2ae <LogicalDisk::unassignDriveLetter()>:
c000a2ae:	57                   	push   edi
c000a2af:	56                   	push   esi
c000a2b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a2b4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a2bb:	85 c9                	test   ecx,ecx
c000a2bd:	75 0f                	jne    c000a2ce <LogicalDisk::unassignDriveLetter()+0x20>
c000a2bf:	c7 44 24 0c d4 2a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022ad4
c000a2c7:	5e                   	pop    esi
c000a2c8:	5f                   	pop    edi
c000a2c9:	e9 98 55 00 00       	jmp    c000f866 <KePanic(char const*)>
c000a2ce:	83 e9 41             	sub    ecx,0x41
c000a2d1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a2d8:	b8 01 00 00 00       	mov    eax,0x1
c000a2dd:	c7 04 8d e0 aa 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5520],0x0
c000a2e8:	d3 e0                	shl    eax,cl
c000a2ea:	89 c7                	mov    edi,eax
c000a2ec:	f7 d0                	not    eax
c000a2ee:	c1 ff 1f             	sar    edi,0x1f
c000a2f1:	21 05 c0 aa 02 c0    	and    DWORD PTR ds:0xc002aac0,eax
c000a2f7:	89 fe                	mov    esi,edi
c000a2f9:	f7 d6                	not    esi
c000a2fb:	21 35 c4 aa 02 c0    	and    DWORD PTR ds:0xc002aac4,esi
c000a301:	5e                   	pop    esi
c000a302:	5f                   	pop    edi
c000a303:	c3                   	ret    

c000a304 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a304:	57                   	push   edi
c000a305:	56                   	push   esi
c000a306:	53                   	push   ebx
c000a307:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a30b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a30f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a313:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a317:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a31d:	77 41                	ja     c000a360 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a31f:	99                   	cdq    
c000a320:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a326:	01 c8                	add    eax,ecx
c000a328:	11 da                	adc    edx,ebx
c000a32a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a330:	19 d7                	sbb    edi,edx
c000a332:	72 33                	jb     c000a367 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a334:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a33a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a340:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a344:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a348:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a34e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a354:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a358:	5b                   	pop    ebx
c000a359:	5e                   	pop    esi
c000a35a:	5f                   	pop    edi
c000a35b:	e9 76 0b 00 00       	jmp    c000aed6 <VCache::read(unsigned long long, int, void*)>
c000a360:	b8 05 00 00 00       	mov    eax,0x5
c000a365:	eb 05                	jmp    c000a36c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a367:	b8 07 00 00 00       	mov    eax,0x7
c000a36c:	5b                   	pop    ebx
c000a36d:	5e                   	pop    esi
c000a36e:	5f                   	pop    edi
c000a36f:	c3                   	ret    

c000a370 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a370:	57                   	push   edi
c000a371:	56                   	push   esi
c000a372:	53                   	push   ebx
c000a373:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a377:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a37b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a37f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a383:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a389:	77 41                	ja     c000a3cc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a38b:	99                   	cdq    
c000a38c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a392:	01 c8                	add    eax,ecx
c000a394:	11 da                	adc    edx,ebx
c000a396:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a39c:	19 d7                	sbb    edi,edx
c000a39e:	72 33                	jb     c000a3d3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a3a0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a3a6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a3ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a3b0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a3b4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a3ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a3c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3c4:	5b                   	pop    ebx
c000a3c5:	5e                   	pop    esi
c000a3c6:	5f                   	pop    edi
c000a3c7:	e9 3c 09 00 00       	jmp    c000ad08 <VCache::write(unsigned long long, int, void*)>
c000a3cc:	b8 05 00 00 00       	mov    eax,0x5
c000a3d1:	eb 05                	jmp    c000a3d8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a3d3:	b8 07 00 00 00       	mov    eax,0x7
c000a3d8:	5b                   	pop    ebx
c000a3d9:	5e                   	pop    esi
c000a3da:	5f                   	pop    edi
c000a3db:	c3                   	ret    

c000a3dc <Mouse::Mouse(char const*)>:
c000a3dc:	83 ec 0c             	sub    esp,0xc
c000a3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3e3:	83 ec 08             	sub    esp,0x8
c000a3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3ea:	50                   	push   eax
c000a3eb:	e8 22 f0 ff ff       	call   c0009412 <Device::Device(char const*)>
c000a3f0:	83 c4 10             	add    esp,0x10
c000a3f3:	ba 28 2b 02 c0       	mov    edx,0xc0022b28
c000a3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3fc:	89 10                	mov    DWORD PTR [eax],edx
c000a3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a402:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a40c:	90                   	nop
c000a40d:	83 c4 0c             	add    esp,0xc
c000a410:	c3                   	ret    
c000a411:	90                   	nop
c000a412:	66 90                	xchg   ax,ax

c000a414 <Mouse::~Mouse()>:
c000a414:	83 ec 0c             	sub    esp,0xc
c000a417:	ba 28 2b 02 c0       	mov    edx,0xc0022b28
c000a41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a420:	89 10                	mov    DWORD PTR [eax],edx
c000a422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a426:	83 ec 0c             	sub    esp,0xc
c000a429:	50                   	push   eax
c000a42a:	e8 83 ed ff ff       	call   c00091b2 <Device::~Device()>
c000a42f:	83 c4 10             	add    esp,0x10
c000a432:	90                   	nop
c000a433:	83 c4 0c             	add    esp,0xc
c000a436:	c3                   	ret    
c000a437:	90                   	nop

c000a438 <Mouse::~Mouse()>:
c000a438:	83 ec 0c             	sub    esp,0xc
c000a43b:	83 ec 0c             	sub    esp,0xc
c000a43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a442:	e8 cd ff ff ff       	call   c000a414 <Mouse::~Mouse()>
c000a447:	83 c4 10             	add    esp,0x10
c000a44a:	83 ec 08             	sub    esp,0x8
c000a44d:	68 58 01 00 00       	push   0x158
c000a452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a456:	e8 4c 27 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c000a45b:	83 c4 10             	add    esp,0x10
c000a45e:	83 c4 0c             	add    esp,0xc
c000a461:	c3                   	ret    

c000a462 <NIC::getMAC()>:
c000a462:	31 c0                	xor    eax,eax
c000a464:	31 d2                	xor    edx,edx
c000a466:	c3                   	ret    
c000a467:	90                   	nop

c000a468 <NIC::write(int, unsigned char*, int*)>:
c000a468:	b8 01 00 00 00       	mov    eax,0x1
c000a46d:	c3                   	ret    

c000a46e <NIC::NIC(char const*)>:
c000a46e:	83 ec 0c             	sub    esp,0xc
c000a471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a475:	83 ec 08             	sub    esp,0x8
c000a478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a47c:	50                   	push   eax
c000a47d:	e8 90 ef ff ff       	call   c0009412 <Device::Device(char const*)>
c000a482:	83 c4 10             	add    esp,0x10
c000a485:	ba 54 2b 02 c0       	mov    edx,0xc0022b54
c000a48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a48e:	89 10                	mov    DWORD PTR [eax],edx
c000a490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a494:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a49e:	90                   	nop
c000a49f:	83 c4 0c             	add    esp,0xc
c000a4a2:	c3                   	ret    
c000a4a3:	90                   	nop

c000a4a4 <NIC::~NIC()>:
c000a4a4:	83 ec 0c             	sub    esp,0xc
c000a4a7:	ba 54 2b 02 c0       	mov    edx,0xc0022b54
c000a4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4b0:	89 10                	mov    DWORD PTR [eax],edx
c000a4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4b6:	83 ec 0c             	sub    esp,0xc
c000a4b9:	50                   	push   eax
c000a4ba:	e8 f3 ec ff ff       	call   c00091b2 <Device::~Device()>
c000a4bf:	83 c4 10             	add    esp,0x10
c000a4c2:	90                   	nop
c000a4c3:	83 c4 0c             	add    esp,0xc
c000a4c6:	c3                   	ret    
c000a4c7:	90                   	nop

c000a4c8 <NIC::~NIC()>:
c000a4c8:	83 ec 0c             	sub    esp,0xc
c000a4cb:	83 ec 0c             	sub    esp,0xc
c000a4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4d2:	e8 cd ff ff ff       	call   c000a4a4 <NIC::~NIC()>
c000a4d7:	83 c4 10             	add    esp,0x10
c000a4da:	83 ec 08             	sub    esp,0x8
c000a4dd:	68 58 01 00 00       	push   0x158
c000a4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4e6:	e8 bc 26 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c000a4eb:	83 c4 10             	add    esp,0x10
c000a4ee:	83 c4 0c             	add    esp,0xc
c000a4f1:	c3                   	ret    

c000a4f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a4f2:	55                   	push   ebp
c000a4f3:	57                   	push   edi
c000a4f4:	56                   	push   esi
c000a4f5:	53                   	push   ebx
c000a4f6:	81 ec 28 01 00 00    	sub    esp,0x128
c000a4fc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000a503:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000a50a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000a511:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000a518:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a51c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a520:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a527:	e8 e2 ef ff ff       	call   c000950e <Device::getName()>
c000a52c:	5a                   	pop    edx
c000a52d:	59                   	pop    ecx
c000a52e:	50                   	push   eax
c000a52f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a533:	55                   	push   ebp
c000a534:	e8 07 61 ff ff       	call   c0000640 <strcpy>
c000a539:	5b                   	pop    ebx
c000a53a:	58                   	pop    eax
c000a53b:	68 80 2b 02 c0       	push   0xc0022b80
c000a540:	55                   	push   ebp
c000a541:	e8 fa 62 ff ff       	call   c0000840 <strcat>
c000a546:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a54d:	e8 cd 4f 00 00       	call   c000f51f <malloc>
c000a552:	83 c4 0c             	add    esp,0xc
c000a555:	89 c3                	mov    ebx,eax
c000a557:	57                   	push   edi
c000a558:	56                   	push   esi
c000a559:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a55d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a561:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a568:	55                   	push   ebp
c000a569:	50                   	push   eax
c000a56a:	e8 59 fb ff ff       	call   c000a0c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a56f:	83 c4 14             	add    esp,0x14
c000a572:	53                   	push   ebx
c000a573:	e8 10 fc ff ff       	call   c000a188 <LogicalDisk::assignDriveLetter()>
c000a578:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a57b:	e8 c2 fc ff ff       	call   c000a242 <LogicalDisk::mount()>
c000a580:	58                   	pop    eax
c000a581:	5a                   	pop    edx
c000a582:	53                   	push   ebx
c000a583:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a58a:	e8 21 ed ff ff       	call   c00092b0 <Device::addChild(Device*)>
c000a58f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a595:	5b                   	pop    ebx
c000a596:	5e                   	pop    esi
c000a597:	5f                   	pop    edi
c000a598:	5d                   	pop    ebp
c000a599:	c3                   	ret    

c000a59a <createPartitionsForDisk(PhysicalDisk*)>:
c000a59a:	55                   	push   ebp
c000a59b:	57                   	push   edi
c000a59c:	56                   	push   esi
c000a59d:	53                   	push   ebx
c000a59e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a5a4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a5ab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a5b1:	3d 00 02 00 00       	cmp    eax,0x200
c000a5b6:	74 27                	je     c000a5df <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a5b8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a5be:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a5c4:	83 ec 10             	sub    esp,0x10
c000a5c7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a5cb:	99                   	cdq    
c000a5cc:	c1 e6 0a             	shl    esi,0xa
c000a5cf:	52                   	push   edx
c000a5d0:	89 fd                	mov    ebp,edi
c000a5d2:	50                   	push   eax
c000a5d3:	55                   	push   ebp
c000a5d4:	56                   	push   esi
c000a5d5:	e8 da 67 01 00       	call   c0020db4 <__udivdi3>
c000a5da:	e9 b9 00 00 00       	jmp    c000a698 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a5df:	83 ec 0c             	sub    esp,0xc
c000a5e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a5e4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a5e8:	56                   	push   esi
c000a5e9:	6a 01                	push   0x1
c000a5eb:	6a 00                	push   0x0
c000a5ed:	6a 00                	push   0x0
c000a5ef:	53                   	push   ebx
c000a5f0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a5f3:	83 c4 20             	add    esp,0x20
c000a5f6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a5fe:	75 0a                	jne    c000a60a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a600:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a608:	74 2c                	je     c000a636 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a60a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a610:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a616:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a61c:	83 ec 10             	sub    esp,0x10
c000a61f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a623:	89 f7                	mov    edi,esi
c000a625:	c1 e0 0a             	shl    eax,0xa
c000a628:	c1 ff 1f             	sar    edi,0x1f
c000a62b:	57                   	push   edi
c000a62c:	56                   	push   esi
c000a62d:	52                   	push   edx
c000a62e:	50                   	push   eax
c000a62f:	e8 80 67 01 00       	call   c0020db4 <__udivdi3>
c000a634:	eb 62                	jmp    c000a698 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a636:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a63d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a644:	89 cf                	mov    edi,ecx
c000a646:	83 e2 7f             	and    edx,0x7f
c000a649:	83 e7 7f             	and    edi,0x7f
c000a64c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a653:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a656:	83 e0 7f             	and    eax,0x7f
c000a659:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a65c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a663:	83 e0 7f             	and    eax,0x7f
c000a666:	01 d0                	add    eax,edx
c000a668:	89 c5                	mov    ebp,eax
c000a66a:	84 c0                	test   al,al
c000a66c:	74 41                	je     c000a6af <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a66e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a674:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a67a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a680:	83 ec 10             	sub    esp,0x10
c000a683:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a687:	89 f7                	mov    edi,esi
c000a689:	c1 e0 0a             	shl    eax,0xa
c000a68c:	c1 ff 1f             	sar    edi,0x1f
c000a68f:	57                   	push   edi
c000a690:	56                   	push   esi
c000a691:	52                   	push   edx
c000a692:	50                   	push   eax
c000a693:	e8 1c 67 01 00       	call   c0020db4 <__udivdi3>
c000a698:	83 c4 14             	add    esp,0x14
c000a69b:	52                   	push   edx
c000a69c:	50                   	push   eax
c000a69d:	6a 00                	push   0x0
c000a69f:	6a 00                	push   0x0
c000a6a1:	53                   	push   ebx
c000a6a2:	e8 4b fe ff ff       	call   c000a4f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a6a7:	83 c4 20             	add    esp,0x20
c000a6aa:	e9 73 01 00 00       	jmp    c000a822 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a6af:	89 f0                	mov    eax,esi
c000a6b1:	31 c9                	xor    ecx,ecx
c000a6b3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a6ba:	75 02                	jne    c000a6be <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a6bc:	89 cd                	mov    ebp,ecx
c000a6be:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a6c5:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000a6cc:	c1 e2 08             	shl    edx,0x8
c000a6cf:	c1 e6 10             	shl    esi,0x10
c000a6d2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a6da:	09 f2                	or     edx,esi
c000a6dc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a6e4:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000a6eb:	83 c0 10             	add    eax,0x10
c000a6ee:	09 f2                	or     edx,esi
c000a6f0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a6f7:	c1 e6 18             	shl    esi,0x18
c000a6fa:	09 f2                	or     edx,esi
c000a6fc:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a703:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a707:	c1 e6 10             	shl    esi,0x10
c000a70a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a711:	c1 e2 08             	shl    edx,0x8
c000a714:	09 f2                	or     edx,esi
c000a716:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a71d:	09 f2                	or     edx,esi
c000a71f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a726:	c1 e6 18             	shl    esi,0x18
c000a729:	09 f2                	or     edx,esi
c000a72b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a72f:	41                   	inc    ecx
c000a730:	83 f9 04             	cmp    ecx,0x4
c000a733:	0f 85 7a ff ff ff    	jne    c000a6b3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73d:	83 f0 01             	xor    eax,0x1
c000a740:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a744:	75 4f                	jne    c000a795 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a74a:	83 f0 01             	xor    eax,0x1
c000a74d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a751:	75 42                	jne    c000a795 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a753:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a75b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a763:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a769:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a76f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a775:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a779:	89 f7                	mov    edi,esi
c000a77b:	c1 e0 0a             	shl    eax,0xa
c000a77e:	c1 ff 1f             	sar    edi,0x1f
c000a781:	57                   	push   edi
c000a782:	56                   	push   esi
c000a783:	52                   	push   edx
c000a784:	50                   	push   eax
c000a785:	e8 2a 66 01 00       	call   c0020db4 <__udivdi3>
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a795:	89 e8                	mov    eax,ebp
c000a797:	0f b6 e8             	movzx  ebp,al
c000a79a:	85 ed                	test   ebp,ebp
c000a79c:	74 50                	je     c000a7ee <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a79e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a7a2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a7a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a7aa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a7ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7b6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a7ba:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a7be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a7ca:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a7ce:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a7d2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a7d6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a7da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a7de:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a7e2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a7e6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a7ea:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a7ee:	31 ed                	xor    ebp,ebp
c000a7f0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a7f4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a7f8:	89 f8                	mov    eax,edi
c000a7fa:	09 f0                	or     eax,esi
c000a7fc:	74 1e                	je     c000a81c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a7fe:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a802:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a806:	89 d1                	mov    ecx,edx
c000a808:	09 c1                	or     ecx,eax
c000a80a:	74 10                	je     c000a81c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a80c:	83 ec 0c             	sub    esp,0xc
c000a80f:	57                   	push   edi
c000a810:	56                   	push   esi
c000a811:	52                   	push   edx
c000a812:	50                   	push   eax
c000a813:	53                   	push   ebx
c000a814:	e8 d9 fc ff ff       	call   c000a4f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a819:	83 c4 20             	add    esp,0x20
c000a81c:	45                   	inc    ebp
c000a81d:	83 fd 04             	cmp    ebp,0x4
c000a820:	75 ce                	jne    c000a7f0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a822:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a828:	5b                   	pop    ebx
c000a829:	5e                   	pop    esi
c000a82a:	5f                   	pop    edi
c000a82b:	5d                   	pop    ebp
c000a82c:	c3                   	ret    
c000a82d:	66 90                	xchg   ax,ax
c000a82f:	90                   	nop

c000a830 <Serial::Serial(char const*)>:
c000a830:	83 ec 0c             	sub    esp,0xc
c000a833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a837:	83 ec 08             	sub    esp,0x8
c000a83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a83e:	50                   	push   eax
c000a83f:	e8 ce eb ff ff       	call   c0009412 <Device::Device(char const*)>
c000a844:	83 c4 10             	add    esp,0x10
c000a847:	ba 94 2b 02 c0       	mov    edx,0xc0022b94
c000a84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a850:	89 10                	mov    DWORD PTR [eax],edx
c000a852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a856:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a860:	90                   	nop
c000a861:	83 c4 0c             	add    esp,0xc
c000a864:	c3                   	ret    
c000a865:	90                   	nop
c000a866:	66 90                	xchg   ax,ax

c000a868 <Serial::~Serial()>:
c000a868:	83 ec 0c             	sub    esp,0xc
c000a86b:	ba 94 2b 02 c0       	mov    edx,0xc0022b94
c000a870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a874:	89 10                	mov    DWORD PTR [eax],edx
c000a876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a87a:	83 ec 0c             	sub    esp,0xc
c000a87d:	50                   	push   eax
c000a87e:	e8 2f e9 ff ff       	call   c00091b2 <Device::~Device()>
c000a883:	83 c4 10             	add    esp,0x10
c000a886:	90                   	nop
c000a887:	83 c4 0c             	add    esp,0xc
c000a88a:	c3                   	ret    
c000a88b:	90                   	nop

c000a88c <Serial::~Serial()>:
c000a88c:	83 ec 0c             	sub    esp,0xc
c000a88f:	83 ec 0c             	sub    esp,0xc
c000a892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a896:	e8 cd ff ff ff       	call   c000a868 <Serial::~Serial()>
c000a89b:	83 c4 10             	add    esp,0x10
c000a89e:	83 ec 08             	sub    esp,0x8
c000a8a1:	68 58 01 00 00       	push   0x158
c000a8a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8aa:	e8 f8 22 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c000a8af:	83 c4 10             	add    esp,0x10
c000a8b2:	83 c4 0c             	add    esp,0xc
c000a8b5:	c3                   	ret    
c000a8b6:	66 90                	xchg   ax,ax

c000a8b8 <Timer::Timer(char const*)>:
c000a8b8:	83 ec 0c             	sub    esp,0xc
c000a8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8bf:	83 ec 08             	sub    esp,0x8
c000a8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8c6:	50                   	push   eax
c000a8c7:	e8 46 eb ff ff       	call   c0009412 <Device::Device(char const*)>
c000a8cc:	83 c4 10             	add    esp,0x10
c000a8cf:	ba 4c 2c 02 c0       	mov    edx,0xc0022c4c
c000a8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8d8:	89 10                	mov    DWORD PTR [eax],edx
c000a8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8de:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a8e8:	90                   	nop
c000a8e9:	83 c4 0c             	add    esp,0xc
c000a8ec:	c3                   	ret    
c000a8ed:	90                   	nop
c000a8ee:	66 90                	xchg   ax,ax

c000a8f0 <Timer::~Timer()>:
c000a8f0:	83 ec 0c             	sub    esp,0xc
c000a8f3:	ba 4c 2c 02 c0       	mov    edx,0xc0022c4c
c000a8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8fc:	89 10                	mov    DWORD PTR [eax],edx
c000a8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a902:	83 ec 0c             	sub    esp,0xc
c000a905:	50                   	push   eax
c000a906:	e8 a7 e8 ff ff       	call   c00091b2 <Device::~Device()>
c000a90b:	83 c4 10             	add    esp,0x10
c000a90e:	90                   	nop
c000a90f:	83 c4 0c             	add    esp,0xc
c000a912:	c3                   	ret    
c000a913:	90                   	nop

c000a914 <Timer::~Timer()>:
c000a914:	83 ec 0c             	sub    esp,0xc
c000a917:	83 ec 0c             	sub    esp,0xc
c000a91a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a91e:	e8 cd ff ff ff       	call   c000a8f0 <Timer::~Timer()>
c000a923:	83 c4 10             	add    esp,0x10
c000a926:	83 ec 08             	sub    esp,0x8
c000a929:	68 5c 01 00 00       	push   0x15c
c000a92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a932:	e8 70 22 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c000a937:	83 c4 10             	add    esp,0x10
c000a93a:	83 c4 0c             	add    esp,0xc
c000a93d:	c3                   	ret    

c000a93e <Timer::read()>:
c000a93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a942:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a948:	c3                   	ret    

c000a949 <setupTimer(int)>:
c000a949:	53                   	push   ebx
c000a94a:	83 ec 14             	sub    esp,0x14
c000a94d:	68 5c 01 00 00       	push   0x15c
c000a952:	e8 c8 4b 00 00       	call   c000f51f <malloc>
c000a957:	89 04 24             	mov    DWORD PTR [esp],eax
c000a95a:	89 c3                	mov    ebx,eax
c000a95c:	e8 d7 5c 01 00       	call   c0020638 <PIT::PIT()>
c000a961:	58                   	pop    eax
c000a962:	5a                   	pop    edx
c000a963:	53                   	push   ebx
c000a964:	ff 35 d0 b0 02 c0    	push   DWORD PTR ds:0xc002b0d0
c000a96a:	e8 41 e9 ff ff       	call   c00092b0 <Device::addChild(Device*)>
c000a96f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a971:	6a 00                	push   0x0
c000a973:	6a 00                	push   0x0
c000a975:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a979:	53                   	push   ebx
c000a97a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a97d:	89 d8                	mov    eax,ebx
c000a97f:	83 c4 28             	add    esp,0x28
c000a982:	5b                   	pop    ebx
c000a983:	c3                   	ret    

c000a984 <timerHandler(unsigned int)>:
c000a984:	57                   	push   edi
c000a985:	56                   	push   esi
c000a986:	53                   	push   ebx
c000a987:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	01 35 4c ab 02 c0    	add    DWORD PTR ds:0xc002ab4c,esi
c000a994:	68 23 2c 02 c0       	push   0xc0022c23
c000a999:	e8 c6 c5 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000a99e:	83 c4 10             	add    esp,0x10
c000a9a1:	80 3d d5 b0 02 c0 00 	cmp    BYTE PTR ds:0xc002b0d5,0x0
c000a9a8:	75 12                	jne    c000a9bc <timerHandler(unsigned int)+0x38>
c000a9aa:	c7 44 24 10 2b 2c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022c2b
c000a9b2:	5b                   	pop    ebx
c000a9b3:	5e                   	pop    esi
c000a9b4:	5f                   	pop    edi
c000a9b5:	e9 aa c5 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c000a9ba:	66 90                	xchg   ax,ax
c000a9bc:	fa                   	cli    
c000a9bd:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c000a9c3:	83 ec 0c             	sub    esp,0xc
c000a9c6:	68 40 da 02 c0       	push   0xc002da40
c000a9cb:	e8 7c 67 01 00       	call   c002114c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a9d0:	83 c4 10             	add    esp,0x10
c000a9d3:	84 c0                	test   al,al
c000a9d5:	0f 85 a1 00 00 00    	jne    c000aa7c <timerHandler(unsigned int)+0xf8>
c000a9db:	83 ec 0c             	sub    esp,0xc
c000a9de:	68 40 da 02 c0       	push   0xc002da40
c000a9e3:	e8 80 67 01 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a9e8:	83 c4 10             	add    esp,0x10
c000a9eb:	89 c7                	mov    edi,eax
c000a9ed:	8d 76 00             	lea    esi,[esi+0x0]
c000a9f0:	83 ec 0c             	sub    esp,0xc
c000a9f3:	68 40 da 02 c0       	push   0xc002da40
c000a9f8:	e8 6b 67 01 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a9fd:	c7 04 24 40 da 02 c0 	mov    DWORD PTR [esp],0xc002da40
c000aa04:	89 c3                	mov    ebx,eax
c000aa06:	e8 65 67 01 00       	call   c0021170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000aa0b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000aa0e:	83 c4 10             	add    esp,0x10
c000aa11:	3b 05 4c ab 02 c0    	cmp    eax,DWORD PTR ds:0xc002ab4c
c000aa17:	77 23                	ja     c000aa3c <timerHandler(unsigned int)+0xb8>
c000aa19:	83 ec 0c             	sub    esp,0xc
c000aa1c:	53                   	push   ebx
c000aa1d:	e8 72 bd 00 00       	call   c0016794 <unblockTask(ThreadControlBlock*)>
c000aa22:	83 c4 10             	add    esp,0x10
c000aa25:	39 df                	cmp    edi,ebx
c000aa27:	75 27                	jne    c000aa50 <timerHandler(unsigned int)+0xcc>
c000aa29:	83 ec 0c             	sub    esp,0xc
c000aa2c:	68 40 da 02 c0       	push   0xc002da40
c000aa31:	e8 32 67 01 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000aa36:	89 c7                	mov    edi,eax
c000aa38:	eb 12                	jmp    c000aa4c <timerHandler(unsigned int)+0xc8>
c000aa3a:	66 90                	xchg   ax,ax
c000aa3c:	50                   	push   eax
c000aa3d:	50                   	push   eax
c000aa3e:	53                   	push   ebx
c000aa3f:	68 40 da 02 c0       	push   0xc002da40
c000aa44:	e8 e3 67 01 00       	call   c002122c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000aa49:	8d 76 00             	lea    esi,[esi+0x0]
c000aa4c:	83 c4 10             	add    esp,0x10
c000aa4f:	90                   	nop
c000aa50:	83 ec 0c             	sub    esp,0xc
c000aa53:	68 40 da 02 c0       	push   0xc002da40
c000aa58:	e8 ef 66 01 00       	call   c002114c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000aa5d:	83 c4 10             	add    esp,0x10
c000aa60:	84 c0                	test   al,al
c000aa62:	75 18                	jne    c000aa7c <timerHandler(unsigned int)+0xf8>
c000aa64:	83 ec 0c             	sub    esp,0xc
c000aa67:	68 40 da 02 c0       	push   0xc002da40
c000aa6c:	e8 f7 66 01 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000aa71:	83 c4 10             	add    esp,0x10
c000aa74:	39 f8                	cmp    eax,edi
c000aa76:	0f 85 74 ff ff ff    	jne    c000a9f0 <timerHandler(unsigned int)+0x6c>
c000aa7c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000aa82:	8b 42 34             	mov    eax,DWORD PTR [edx+0x34]
c000aa85:	85 c0                	test   eax,eax
c000aa87:	74 1b                	je     c000aaa4 <timerHandler(unsigned int)+0x120>
c000aa89:	80 3d d4 b0 02 c0 00 	cmp    BYTE PTR ds:0xc002b0d4,0x0
c000aa90:	74 12                	je     c000aaa4 <timerHandler(unsigned int)+0x120>
c000aa92:	89 c1                	mov    ecx,eax
c000aa94:	29 f1                	sub    ecx,esi
c000aa96:	39 f0                	cmp    eax,esi
c000aa98:	89 4a 34             	mov    DWORD PTR [edx+0x34],ecx
c000aa9b:	77 07                	ja     c000aaa4 <timerHandler(unsigned int)+0x120>
c000aa9d:	e8 e2 b9 00 00       	call   c0016484 <schedule()>
c000aaa2:	66 90                	xchg   ax,ax
c000aaa4:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c000aaab:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c000aab2:	75 04                	jne    c000aab8 <timerHandler(unsigned int)+0x134>
c000aab4:	fb                   	sti    
c000aab5:	8d 76 00             	lea    esi,[esi+0x0]
c000aab8:	5b                   	pop    ebx
c000aab9:	5e                   	pop    esi
c000aaba:	5f                   	pop    edi
c000aabb:	c3                   	ret    

c000aabc <VCache::VCache(PhysicalDisk*)>:
c000aabc:	53                   	push   ebx
c000aabd:	83 ec 18             	sub    esp,0x18
c000aac0:	ba bc 2c 02 c0       	mov    edx,0xc0022cbc
c000aac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aac9:	89 10                	mov    DWORD PTR [eax],edx
c000aacb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aacf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000aad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aada:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000aae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aae5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000aaec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000aaf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aaf7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000aafe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000ab05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab09:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000ab10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab14:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000ab18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab1c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000ab23:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000ab2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab2e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000ab32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab36:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000ab3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab3e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000ab42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab46:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000ab4d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000ab55:	83 ec 0c             	sub    esp,0xc
c000ab58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab5c:	e8 be 49 00 00       	call   c000f51f <malloc>
c000ab61:	83 c4 10             	add    esp,0x10
c000ab64:	89 c3                	mov    ebx,eax
c000ab66:	83 ec 0c             	sub    esp,0xc
c000ab69:	53                   	push   ebx
c000ab6a:	e8 dd 4c 00 00       	call   c000f84c <Mutex::Mutex()>
c000ab6f:	83 c4 10             	add    esp,0x10
c000ab72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab76:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ab79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab7d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ab81:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ab84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab88:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000ab8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ab93:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000ab99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ab9d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aba0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aba4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000abaa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000abb0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000abb4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000abb7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000abba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000abbe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000abc2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000abcc:	05 00 01 00 00       	add    eax,0x100
c000abd1:	c1 e0 04             	shl    eax,0x4
c000abd4:	83 ec 0c             	sub    esp,0xc
c000abd7:	50                   	push   eax
c000abd8:	e8 42 49 00 00       	call   c000f51f <malloc>
c000abdd:	83 c4 10             	add    esp,0x10
c000abe0:	89 c2                	mov    edx,eax
c000abe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000abe6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000abe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000abed:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000abf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000abf8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000abfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac00:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000ac06:	89 d0                	mov    eax,edx
c000ac08:	c1 e0 02             	shl    eax,0x2
c000ac0b:	01 d0                	add    eax,edx
c000ac0d:	c1 e0 04             	shl    eax,0x4
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	50                   	push   eax
c000ac14:	e8 06 49 00 00       	call   c000f51f <malloc>
c000ac19:	83 c4 10             	add    esp,0x10
c000ac1c:	89 c2                	mov    edx,eax
c000ac1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ac22:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ac25:	90                   	nop
c000ac26:	83 c4 18             	add    esp,0x18
c000ac29:	5b                   	pop    ebx
c000ac2a:	c3                   	ret    
c000ac2b:	90                   	nop

c000ac2c <VCache::invalidateReadBuffer()>:
c000ac2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac30:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000ac36:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000ac3a:	c3                   	ret    
c000ac3b:	90                   	nop

c000ac3c <VCache::writeWriteBuffer()>:
c000ac3c:	53                   	push   ebx
c000ac3d:	83 ec 08             	sub    esp,0x8
c000ac40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac44:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac48:	74 1e                	je     c000ac68 <VCache::writeWriteBuffer()+0x2c>
c000ac4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac4d:	83 ec 0c             	sub    esp,0xc
c000ac50:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac52:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ac55:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ac58:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ac5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ac5e:	50                   	push   eax
c000ac5f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ac62:	83 c4 20             	add    esp,0x20
c000ac65:	8d 76 00             	lea    esi,[esi+0x0]
c000ac68:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ac6f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000ac76:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000ac7a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000ac81:	83 c4 08             	add    esp,0x8
c000ac84:	5b                   	pop    ebx
c000ac85:	c3                   	ret    
c000ac86:	66 90                	xchg   ax,ax

c000ac88 <VCache::~VCache()>:
c000ac88:	83 ec 0c             	sub    esp,0xc
c000ac8b:	ba bc 2c 02 c0       	mov    edx,0xc0022cbc
c000ac90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac94:	89 10                	mov    DWORD PTR [eax],edx
c000ac96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac9a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000ac9d:	0f b6 c0             	movzx  eax,al
c000aca0:	85 c0                	test   eax,eax
c000aca2:	74 10                	je     c000acb4 <VCache::~VCache()+0x2c>
c000aca4:	83 ec 0c             	sub    esp,0xc
c000aca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acab:	e8 8c ff ff ff       	call   c000ac3c <VCache::writeWriteBuffer()>
c000acb0:	83 c4 10             	add    esp,0x10
c000acb3:	90                   	nop
c000acb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acb8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000acbb:	83 ec 0c             	sub    esp,0xc
c000acbe:	50                   	push   eax
c000acbf:	e8 6b 48 00 00       	call   c000f52f <free>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000accb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000acce:	83 ec 0c             	sub    esp,0xc
c000acd1:	50                   	push   eax
c000acd2:	e8 58 48 00 00       	call   c000f52f <free>
c000acd7:	83 c4 10             	add    esp,0x10
c000acda:	90                   	nop
c000acdb:	83 c4 0c             	add    esp,0xc
c000acde:	c3                   	ret    
c000acdf:	90                   	nop

c000ace0 <VCache::~VCache()>:
c000ace0:	83 ec 0c             	sub    esp,0xc
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acea:	e8 99 ff ff ff       	call   c000ac88 <VCache::~VCache()>
c000acef:	83 c4 10             	add    esp,0x10
c000acf2:	83 ec 08             	sub    esp,0x8
c000acf5:	6a 44                	push   0x44
c000acf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acfb:	e8 a7 1e 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	83 c4 0c             	add    esp,0xc
c000ad06:	c3                   	ret    
c000ad07:	90                   	nop

c000ad08 <VCache::write(unsigned long long, int, void*)>:
c000ad08:	55                   	push   ebp
c000ad09:	57                   	push   edi
c000ad0a:	56                   	push   esi
c000ad0b:	53                   	push   ebx
c000ad0c:	83 ec 1c             	sub    esp,0x1c
c000ad0f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad13:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ad17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ad1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ad1f:	e8 c0 b4 00 00       	call   c00161e4 <KeDisablePreemption()>
c000ad24:	b9 00 10 00 00       	mov    ecx,0x1000
c000ad29:	50                   	push   eax
c000ad2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ad2d:	0f af c3             	imul   eax,ebx
c000ad30:	05 ff 0f 00 00       	add    eax,0xfff
c000ad35:	99                   	cdq    
c000ad36:	f7 f9                	idiv   ecx
c000ad38:	50                   	push   eax
c000ad39:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ad3d:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000ad43:	e8 66 8c 00 00       	call   c00139ae <VAS::canLockPages(unsigned long, int)>
c000ad48:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000ad4c:	83 c4 10             	add    esp,0x10
c000ad4f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ad54:	74 2a                	je     c000ad80 <VCache::write(unsigned long long, int, void*)+0x78>
c000ad56:	b9 00 10 00 00       	mov    ecx,0x1000
c000ad5b:	50                   	push   eax
c000ad5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ad5f:	0f af c3             	imul   eax,ebx
c000ad62:	05 ff 0f 00 00       	add    eax,0xfff
c000ad67:	99                   	cdq    
c000ad68:	f7 f9                	idiv   ecx
c000ad6a:	50                   	push   eax
c000ad6b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ad6f:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000ad75:	e8 2e 90 00 00       	call   c0013da8 <VAS::lockPages(unsigned long, int)>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ad80:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000ad84:	74 0e                	je     c000ad94 <VCache::write(unsigned long long, int, void*)+0x8c>
c000ad86:	83 ec 0c             	sub    esp,0xc
c000ad89:	55                   	push   ebp
c000ad8a:	e8 9d fe ff ff       	call   c000ac2c <VCache::invalidateReadBuffer()>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	66 90                	xchg   ax,ax
c000ad94:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000ad98:	74 72                	je     c000ae0c <VCache::write(unsigned long long, int, void*)+0x104>
c000ad9a:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000ad9d:	89 c8                	mov    eax,ecx
c000ad9f:	99                   	cdq    
c000ada0:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000ada3:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000ada6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb6:	31 f0                	xor    eax,esi
c000adb8:	31 fa                	xor    edx,edi
c000adba:	09 d0                	or     eax,edx
c000adbc:	75 42                	jne    c000ae00 <VCache::write(unsigned long long, int, void*)+0xf8>
c000adbe:	83 fb 01             	cmp    ebx,0x1
c000adc1:	75 3d                	jne    c000ae00 <VCache::write(unsigned long long, int, void*)+0xf8>
c000adc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adc6:	89 cf                	mov    edi,ecx
c000adc8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000adce:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000add2:	0f af f8             	imul   edi,eax
c000add5:	89 c1                	mov    ecx,eax
c000add7:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000adda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000addc:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000addf:	40                   	inc    eax
c000ade0:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000ade3:	83 f8 50             	cmp    eax,0x50
c000ade6:	0f 85 a8 00 00 00    	jne    c000ae94 <VCache::write(unsigned long long, int, void*)+0x18c>
c000adec:	83 ec 0c             	sub    esp,0xc
c000adef:	55                   	push   ebp
c000adf0:	e8 47 fe ff ff       	call   c000ac3c <VCache::writeWriteBuffer()>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	e9 97 00 00 00       	jmp    c000ae94 <VCache::write(unsigned long long, int, void*)+0x18c>
c000adfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ae00:	83 ec 0c             	sub    esp,0xc
c000ae03:	55                   	push   ebp
c000ae04:	e8 33 fe ff ff       	call   c000ac3c <VCache::writeWriteBuffer()>
c000ae09:	83 c4 10             	add    esp,0x10
c000ae0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae0f:	83 fb 4f             	cmp    ebx,0x4f
c000ae12:	7f 20                	jg     c000ae34 <VCache::write(unsigned long long, int, void*)+0x12c>
c000ae14:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000ae17:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000ae1a:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000ae1d:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000ae21:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000ae24:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ae2a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ae2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ae30:	eb 62                	jmp    c000ae94 <VCache::write(unsigned long long, int, void*)+0x18c>
c000ae32:	66 90                	xchg   ax,ax
c000ae34:	83 ec 0c             	sub    esp,0xc
c000ae37:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae39:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae3d:	53                   	push   ebx
c000ae3e:	57                   	push   edi
c000ae3f:	56                   	push   esi
c000ae40:	50                   	push   eax
c000ae41:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	89 c6                	mov    esi,eax
c000ae49:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ae4e:	74 28                	je     c000ae78 <VCache::write(unsigned long long, int, void*)+0x170>
c000ae50:	b9 00 10 00 00       	mov    ecx,0x1000
c000ae55:	52                   	push   edx
c000ae56:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000ae5a:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000ae60:	99                   	cdq    
c000ae61:	f7 f9                	idiv   ecx
c000ae63:	50                   	push   eax
c000ae64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ae68:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000ae6e:	e8 77 8b 00 00       	call   c00139ea <VAS::unlockPages(unsigned long, int)>
c000ae73:	83 c4 10             	add    esp,0x10
c000ae76:	66 90                	xchg   ax,ax
c000ae78:	e8 8f b3 00 00       	call   c001620c <KeRestorePreemption()>
c000ae7d:	85 f6                	test   esi,esi
c000ae7f:	74 4b                	je     c000aecc <VCache::write(unsigned long long, int, void*)+0x1c4>
c000ae81:	83 ec 0c             	sub    esp,0xc
c000ae84:	68 74 2c 02 c0       	push   0xc0022c74
c000ae89:	e8 d6 c0 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ae8e:	83 c4 10             	add    esp,0x10
c000ae91:	eb 39                	jmp    c000aecc <VCache::write(unsigned long long, int, void*)+0x1c4>
c000ae93:	90                   	nop
c000ae94:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ae99:	74 29                	je     c000aec4 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000ae9b:	b9 00 10 00 00       	mov    ecx,0x1000
c000aea0:	50                   	push   eax
c000aea1:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000aea5:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000aeab:	99                   	cdq    
c000aeac:	f7 f9                	idiv   ecx
c000aeae:	50                   	push   eax
c000aeaf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000aeb3:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000aeb9:	e8 2c 8b 00 00       	call   c00139ea <VAS::unlockPages(unsigned long, int)>
c000aebe:	83 c4 10             	add    esp,0x10
c000aec1:	8d 76 00             	lea    esi,[esi+0x0]
c000aec4:	e8 43 b3 00 00       	call   c001620c <KeRestorePreemption()>
c000aec9:	31 f6                	xor    esi,esi
c000aecb:	90                   	nop
c000aecc:	83 c4 1c             	add    esp,0x1c
c000aecf:	89 f0                	mov    eax,esi
c000aed1:	5b                   	pop    ebx
c000aed2:	5e                   	pop    esi
c000aed3:	5f                   	pop    edi
c000aed4:	5d                   	pop    ebp
c000aed5:	c3                   	ret    

c000aed6 <VCache::read(unsigned long long, int, void*)>:
c000aed6:	55                   	push   ebp
c000aed7:	57                   	push   edi
c000aed8:	bf 00 10 00 00       	mov    edi,0x1000
c000aedd:	56                   	push   esi
c000aede:	53                   	push   ebx
c000aedf:	83 ec 2c             	sub    esp,0x2c
c000aee2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000aee6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000aeea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aeee:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000aef2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aef6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000aefa:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000aefe:	e8 e1 b2 00 00       	call   c00161e4 <KeDisablePreemption()>
c000af03:	50                   	push   eax
c000af04:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000af07:	0f af c6             	imul   eax,esi
c000af0a:	05 ff 0f 00 00       	add    eax,0xfff
c000af0f:	99                   	cdq    
c000af10:	f7 ff                	idiv   edi
c000af12:	50                   	push   eax
c000af13:	55                   	push   ebp
c000af14:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000af1a:	e8 8f 8a 00 00       	call   c00139ae <VAS::canLockPages(unsigned long, int)>
c000af1f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000af23:	83 c4 10             	add    esp,0x10
c000af26:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000af2b:	74 1f                	je     c000af4c <VCache::read(unsigned long long, int, void*)+0x76>
c000af2d:	50                   	push   eax
c000af2e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000af31:	0f af c6             	imul   eax,esi
c000af34:	05 ff 0f 00 00       	add    eax,0xfff
c000af39:	99                   	cdq    
c000af3a:	f7 ff                	idiv   edi
c000af3c:	50                   	push   eax
c000af3d:	55                   	push   ebp
c000af3e:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000af44:	e8 5f 8e 00 00       	call   c0013da8 <VAS::lockPages(unsigned long, int)>
c000af49:	83 c4 10             	add    esp,0x10
c000af4c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000af50:	74 0e                	je     c000af60 <VCache::read(unsigned long long, int, void*)+0x8a>
c000af52:	83 ec 0c             	sub    esp,0xc
c000af55:	53                   	push   ebx
c000af56:	e8 e1 fc ff ff       	call   c000ac3c <VCache::writeWriteBuffer()>
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	66 90                	xchg   ax,ax
c000af60:	83 fe 01             	cmp    esi,0x1
c000af63:	0f 85 ef 00 00 00    	jne    c000b058 <VCache::read(unsigned long long, int, void*)+0x182>
c000af69:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000af6c:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000af73:	0f 85 df 00 00 00    	jne    c000b058 <VCache::read(unsigned long long, int, void*)+0x182>
c000af79:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000af7c:	89 fe                	mov    esi,edi
c000af7e:	f7 de                	neg    esi
c000af80:	89 f0                	mov    eax,esi
c000af82:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000af86:	c1 f8 1f             	sar    eax,0x1f
c000af89:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000af8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af91:	89 f0                	mov    eax,esi
c000af93:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000af97:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000af9b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000af9f:	89 f2                	mov    edx,esi
c000afa1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000afa6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000afaa:	74 0c                	je     c000afb8 <VCache::read(unsigned long long, int, void*)+0xe2>
c000afac:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000afaf:	75 07                	jne    c000afb8 <VCache::read(unsigned long long, int, void*)+0xe2>
c000afb1:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000afb4:	74 4e                	je     c000b004 <VCache::read(unsigned long long, int, void*)+0x12e>
c000afb6:	66 90                	xchg   ax,ax
c000afb8:	83 ec 0c             	sub    esp,0xc
c000afbb:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000afbf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000afc2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000afc5:	8b 31                	mov    esi,DWORD PTR [ecx]
c000afc7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000afca:	57                   	push   edi
c000afcb:	52                   	push   edx
c000afcc:	50                   	push   eax
c000afcd:	51                   	push   ecx
c000afce:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000afd1:	83 c4 20             	add    esp,0x20
c000afd4:	89 c7                	mov    edi,eax
c000afd6:	85 c0                	test   eax,eax
c000afd8:	74 2a                	je     c000b004 <VCache::read(unsigned long long, int, void*)+0x12e>
c000afda:	83 ec 0c             	sub    esp,0xc
c000afdd:	68 8c 2c 02 c0       	push   0xc0022c8c
c000afe2:	e8 7d bf ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000afe7:	83 c4 10             	add    esp,0x10
c000afea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000afef:	0f 84 b3 00 00 00    	je     c000b0a8 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000aff5:	51                   	push   ecx
c000aff6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000aff9:	05 ff 0f 00 00       	add    eax,0xfff
c000affe:	e9 8d 00 00 00       	jmp    c000b090 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b003:	90                   	nop
c000b004:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b007:	89 ef                	mov    edi,ebp
c000b009:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b00f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b012:	8d 70 ff             	lea    esi,[eax-0x1]
c000b015:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b019:	0f af f1             	imul   esi,ecx
c000b01c:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b01f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b021:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b026:	74 24                	je     c000b04c <VCache::read(unsigned long long, int, void*)+0x176>
c000b028:	b9 00 10 00 00       	mov    ecx,0x1000
c000b02d:	52                   	push   edx
c000b02e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b031:	05 ff 0f 00 00       	add    eax,0xfff
c000b036:	99                   	cdq    
c000b037:	f7 f9                	idiv   ecx
c000b039:	50                   	push   eax
c000b03a:	55                   	push   ebp
c000b03b:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000b041:	e8 a4 89 00 00       	call   c00139ea <VAS::unlockPages(unsigned long, int)>
c000b046:	83 c4 10             	add    esp,0x10
c000b049:	8d 76 00             	lea    esi,[esi+0x0]
c000b04c:	e8 bb b1 00 00       	call   c001620c <KeRestorePreemption()>
c000b051:	31 ff                	xor    edi,edi
c000b053:	eb 5b                	jmp    c000b0b0 <VCache::read(unsigned long long, int, void*)+0x1da>
c000b055:	8d 76 00             	lea    esi,[esi+0x0]
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	53                   	push   ebx
c000b05c:	e8 cb fb ff ff       	call   c000ac2c <VCache::invalidateReadBuffer()>
c000b061:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b064:	8b 10                	mov    edx,DWORD PTR [eax]
c000b066:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b069:	56                   	push   esi
c000b06a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b06e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b072:	50                   	push   eax
c000b073:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b076:	83 c4 20             	add    esp,0x20
c000b079:	89 c7                	mov    edi,eax
c000b07b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b080:	74 26                	je     c000b0a8 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b082:	50                   	push   eax
c000b083:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b087:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b08d:	8d 76 00             	lea    esi,[esi+0x0]
c000b090:	b9 00 10 00 00       	mov    ecx,0x1000
c000b095:	99                   	cdq    
c000b096:	f7 f9                	idiv   ecx
c000b098:	50                   	push   eax
c000b099:	55                   	push   ebp
c000b09a:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000b0a0:	e8 45 89 00 00       	call   c00139ea <VAS::unlockPages(unsigned long, int)>
c000b0a5:	83 c4 10             	add    esp,0x10
c000b0a8:	e8 5f b1 00 00       	call   c001620c <KeRestorePreemption()>
c000b0ad:	8d 76 00             	lea    esi,[esi+0x0]
c000b0b0:	83 c4 2c             	add    esp,0x2c
c000b0b3:	89 f8                	mov    eax,edi
c000b0b5:	5b                   	pop    ebx
c000b0b6:	5e                   	pop    esi
c000b0b7:	5f                   	pop    edi
c000b0b8:	5d                   	pop    ebp
c000b0b9:	c3                   	ret    

c000b0ba <Video::putrect(int, int, int, int, unsigned int)>:
c000b0ba:	55                   	push   ebp
c000b0bb:	57                   	push   edi
c000b0bc:	56                   	push   esi
c000b0bd:	53                   	push   ebx
c000b0be:	83 ec 1c             	sub    esp,0x1c
c000b0c1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b0c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b0c9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b0cd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b0d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b0d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b0d9:	01 df                	add    edi,ebx
c000b0db:	39 fb                	cmp    ebx,edi
c000b0dd:	7d 1f                	jge    c000b0fe <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b0df:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b0e3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b0e7:	7d 12                	jge    c000b0fb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b0e9:	8b 16                	mov    edx,DWORD PTR [esi]
c000b0eb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ef:	53                   	push   ebx
c000b0f0:	55                   	push   ebp
c000b0f1:	45                   	inc    ebp
c000b0f2:	56                   	push   esi
c000b0f3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b0f6:	83 c4 10             	add    esp,0x10
c000b0f9:	eb e8                	jmp    c000b0e3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b0fb:	43                   	inc    ebx
c000b0fc:	eb dd                	jmp    c000b0db <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b0fe:	83 c4 1c             	add    esp,0x1c
c000b101:	5b                   	pop    ebx
c000b102:	5e                   	pop    esi
c000b103:	5f                   	pop    edi
c000b104:	5d                   	pop    ebp
c000b105:	c3                   	ret    

c000b106 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b106:	55                   	push   ebp
c000b107:	57                   	push   edi
c000b108:	31 ff                	xor    edi,edi
c000b10a:	56                   	push   esi
c000b10b:	53                   	push   ebx
c000b10c:	83 ec 1c             	sub    esp,0x1c
c000b10f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b113:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b117:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b11e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b123:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b127:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b12b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b12f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b132:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b136:	01 f9                	add    ecx,edi
c000b138:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b13c:	7d 2f                	jge    c000b16d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b13e:	31 f6                	xor    esi,esi
c000b140:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b144:	01 f2                	add    edx,esi
c000b146:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b14a:	7d 1a                	jge    c000b166 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b14c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b14f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b152:	46                   	inc    esi
c000b153:	51                   	push   ecx
c000b154:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b158:	52                   	push   edx
c000b159:	55                   	push   ebp
c000b15a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b15d:	83 c4 10             	add    esp,0x10
c000b160:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b164:	eb da                	jmp    c000b140 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b166:	47                   	inc    edi
c000b167:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b16b:	eb c5                	jmp    c000b132 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b16d:	83 c4 1c             	add    esp,0x1c
c000b170:	5b                   	pop    ebx
c000b171:	5e                   	pop    esi
c000b172:	5f                   	pop    edi
c000b173:	5d                   	pop    ebp
c000b174:	c3                   	ret    
c000b175:	90                   	nop

c000b176 <Video::blit(unsigned int*, int, int, int, int)>:
c000b176:	55                   	push   ebp
c000b177:	57                   	push   edi
c000b178:	56                   	push   esi
c000b179:	53                   	push   ebx
c000b17a:	83 ec 1c             	sub    esp,0x1c
c000b17d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b181:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b185:	85 c0                	test   eax,eax
c000b187:	79 02                	jns    c000b18b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b189:	31 c0                	xor    eax,eax
c000b18b:	c1 e0 02             	shl    eax,0x2
c000b18e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b192:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b196:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b19a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b19e:	39 d8                	cmp    eax,ebx
c000b1a0:	7e 49                	jle    c000b1eb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b1a2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b1a8:	7c 41                	jl     c000b1eb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b1aa:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b1ae:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b1b2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b1b6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b1ba:	39 f9                	cmp    ecx,edi
c000b1bc:	7e 22                	jle    c000b1e0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b1be:	83 c5 04             	add    ebp,0x4
c000b1c1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b1c7:	7c 14                	jl     c000b1dd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b1c9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b1cb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b1ce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b1d2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b1d6:	56                   	push   esi
c000b1d7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b1da:	83 c4 10             	add    esp,0x10
c000b1dd:	47                   	inc    edi
c000b1de:	eb d2                	jmp    c000b1b2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b1e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b1e4:	43                   	inc    ebx
c000b1e5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b1e9:	eb ab                	jmp    c000b196 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b1eb:	83 c4 1c             	add    esp,0x1c
c000b1ee:	5b                   	pop    ebx
c000b1ef:	5e                   	pop    esi
c000b1f0:	5f                   	pop    edi
c000b1f1:	5d                   	pop    ebp
c000b1f2:	c3                   	ret    
c000b1f3:	90                   	nop

c000b1f4 <Video::clearScreen(unsigned int)>:
c000b1f4:	57                   	push   edi
c000b1f5:	56                   	push   esi
c000b1f6:	53                   	push   ebx
c000b1f7:	31 db                	xor    ebx,ebx
c000b1f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b1fd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b203:	7e 1f                	jle    c000b224 <Video::clearScreen(unsigned int)+0x30>
c000b205:	31 ff                	xor    edi,edi
c000b207:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b20d:	7e 12                	jle    c000b221 <Video::clearScreen(unsigned int)+0x2d>
c000b20f:	8b 06                	mov    eax,DWORD PTR [esi]
c000b211:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b215:	53                   	push   ebx
c000b216:	57                   	push   edi
c000b217:	47                   	inc    edi
c000b218:	56                   	push   esi
c000b219:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b21c:	83 c4 10             	add    esp,0x10
c000b21f:	eb e6                	jmp    c000b207 <Video::clearScreen(unsigned int)+0x13>
c000b221:	43                   	inc    ebx
c000b222:	eb d9                	jmp    c000b1fd <Video::clearScreen(unsigned int)+0x9>
c000b224:	5b                   	pop    ebx
c000b225:	5e                   	pop    esi
c000b226:	5f                   	pop    edi
c000b227:	c3                   	ret    

c000b228 <Video::putpixel(int, int, unsigned int)>:
c000b228:	c7 44 24 04 c4 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022cc4
c000b230:	e9 31 46 00 00       	jmp    c000f866 <KePanic(char const*)>
c000b235:	90                   	nop

c000b236 <Video::readPixelApprox(int, int)>:
c000b236:	83 ec 18             	sub    esp,0x18
c000b239:	68 e5 2c 02 c0       	push   0xc0022ce5
c000b23e:	e8 23 46 00 00       	call   c000f866 <KePanic(char const*)>
c000b243:	31 c0                	xor    eax,eax
c000b245:	83 c4 1c             	add    esp,0x1c
c000b248:	c3                   	ret    
c000b249:	90                   	nop

c000b24a <Video::Video(char const*)>:
c000b24a:	83 ec 0c             	sub    esp,0xc
c000b24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b251:	83 ec 08             	sub    esp,0x8
c000b254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b258:	50                   	push   eax
c000b259:	e8 b4 e1 ff ff       	call   c0009412 <Device::Device(char const*)>
c000b25e:	83 c4 10             	add    esp,0x10
c000b261:	ba 88 2d 02 c0       	mov    edx,0xc0022d88
c000b266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b26a:	89 10                	mov    DWORD PTR [eax],edx
c000b26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b270:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b27a:	90                   	nop
c000b27b:	83 c4 0c             	add    esp,0xc
c000b27e:	c3                   	ret    
c000b27f:	90                   	nop

c000b280 <Video::~Video()>:
c000b280:	83 ec 0c             	sub    esp,0xc
c000b283:	ba 88 2d 02 c0       	mov    edx,0xc0022d88
c000b288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28c:	89 10                	mov    DWORD PTR [eax],edx
c000b28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b292:	83 ec 0c             	sub    esp,0xc
c000b295:	50                   	push   eax
c000b296:	e8 17 df ff ff       	call   c00091b2 <Device::~Device()>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	90                   	nop
c000b29f:	83 c4 0c             	add    esp,0xc
c000b2a2:	c3                   	ret    
c000b2a3:	90                   	nop

c000b2a4 <Video::~Video()>:
c000b2a4:	83 ec 0c             	sub    esp,0xc
c000b2a7:	83 ec 0c             	sub    esp,0xc
c000b2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2ae:	e8 cd ff ff ff       	call   c000b280 <Video::~Video()>
c000b2b3:	83 c4 10             	add    esp,0x10
c000b2b6:	83 ec 08             	sub    esp,0x8
c000b2b9:	68 64 01 00 00       	push   0x164
c000b2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2c2:	e8 e0 18 00 00       	call   c000cba7 <operator delete(void*, unsigned long)>
c000b2c7:	83 c4 10             	add    esp,0x10
c000b2ca:	83 c4 0c             	add    esp,0xc
c000b2cd:	c3                   	ret    

c000b2ce <Video::isMonochrome()>:
c000b2ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2d2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000b2d8:	c3                   	ret    
c000b2d9:	90                   	nop

c000b2da <Video::getWidth()>:
c000b2da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b2e4:	c3                   	ret    
c000b2e5:	90                   	nop

c000b2e6 <Video::getHeight()>:
c000b2e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b2f0:	c3                   	ret    
c000b2f1:	90                   	nop

c000b2f2 <Video::drawCursor(int, int, unsigned int*, int)>:
c000b2f2:	55                   	push   ebp
c000b2f3:	57                   	push   edi
c000b2f4:	56                   	push   esi
c000b2f5:	53                   	push   ebx
c000b2f6:	83 ec 2c             	sub    esp,0x2c
c000b2f9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b2fd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b301:	83 f8 01             	cmp    eax,0x1
c000b304:	19 c9                	sbb    ecx,ecx
c000b306:	31 db                	xor    ebx,ebx
c000b308:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b30c:	89 cd                	mov    ebp,ecx
c000b30e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000b316:	f7 d5                	not    ebp
c000b318:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000b31e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b322:	01 d8                	add    eax,ebx
c000b324:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b328:	56                   	push   esi
c000b329:	e8 b8 ff ff ff       	call   c000b2e6 <Video::getHeight()>
c000b32e:	59                   	pop    ecx
c000b32f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b333:	7e 70                	jle    c000b3a5 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000b335:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b339:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000b33d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000b340:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b344:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b348:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000b34f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b353:	89 f8                	mov    eax,edi
c000b355:	83 c0 20             	add    eax,0x20
c000b358:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b35c:	56                   	push   esi
c000b35d:	e8 78 ff ff ff       	call   c000b2da <Video::getWidth()>
c000b362:	5a                   	pop    edx
c000b363:	39 c7                	cmp    edi,eax
c000b365:	7d 34                	jge    c000b39b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000b367:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000b36c:	74 05                	je     c000b373 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000b36e:	8b 06                	mov    eax,DWORD PTR [esi]
c000b370:	55                   	push   ebp
c000b371:	eb 0d                	jmp    c000b380 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000b373:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000b378:	74 12                	je     c000b38c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000b37a:	8b 06                	mov    eax,DWORD PTR [esi]
c000b37c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b380:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b384:	57                   	push   edi
c000b385:	56                   	push   esi
c000b386:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b389:	83 c4 10             	add    esp,0x10
c000b38c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000b390:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000b394:	47                   	inc    edi
c000b395:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b399:	75 c1                	jne    c000b35c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000b39b:	43                   	inc    ebx
c000b39c:	83 fb 20             	cmp    ebx,0x20
c000b39f:	0f 85 79 ff ff ff    	jne    c000b31e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000b3a5:	83 c4 2c             	add    esp,0x2c
c000b3a8:	5b                   	pop    ebx
c000b3a9:	5e                   	pop    esi
c000b3aa:	5f                   	pop    edi
c000b3ab:	5d                   	pop    ebp
c000b3ac:	c3                   	ret    
c000b3ad:	90                   	nop

c000b3ae <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b3ae:	55                   	push   ebp
c000b3af:	57                   	push   edi
c000b3b0:	56                   	push   esi
c000b3b1:	53                   	push   ebx
c000b3b2:	83 ec 48             	sub    esp,0x48
c000b3b5:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b3b9:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b3bd:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b3c1:	c1 e0 08             	shl    eax,0x8
c000b3c4:	01 d0                	add    eax,edx
c000b3c6:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b3ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b3ce:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b3d2:	c1 e0 08             	shl    eax,0x8
c000b3d5:	01 d0                	add    eax,edx
c000b3d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b3db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3df:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000b3e4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b3e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b3ec:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b3f3:	50                   	push   eax
c000b3f4:	e8 26 41 00 00       	call   c000f51f <malloc>
c000b3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b3fd:	83 c4 10             	add    esp,0x10
c000b400:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b405:	75 10                	jne    c000b417 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000b407:	83 ec 0c             	sub    esp,0xc
c000b40a:	68 10 2d 02 c0       	push   0xc0022d10
c000b40f:	e8 52 44 00 00       	call   c000f866 <KePanic(char const*)>
c000b414:	83 c4 10             	add    esp,0x10
c000b417:	51                   	push   ecx
c000b418:	51                   	push   ecx
c000b419:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b41d:	50                   	push   eax
c000b41e:	68 20 2d 02 c0       	push   0xc0022d20
c000b423:	e8 3c bb ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b428:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b42b:	83 e0 20             	and    eax,0x20
c000b42e:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000b432:	85 c0                	test   eax,eax
c000b434:	5e                   	pop    esi
c000b435:	0f 94 c0             	sete   al
c000b438:	5f                   	pop    edi
c000b439:	0f b6 c0             	movzx  eax,al
c000b43c:	be 12 00 00 00       	mov    esi,0x12
c000b441:	50                   	push   eax
c000b442:	68 2a 2d 02 c0       	push   0xc0022d2a
c000b447:	e8 18 bb ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b44c:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000b450:	83 c4 10             	add    esp,0x10
c000b453:	89 d0                	mov    eax,edx
c000b455:	85 d2                	test   edx,edx
c000b457:	74 11                	je     c000b46a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000b459:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000b45d:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b461:	c1 fe 03             	sar    esi,0x3
c000b464:	0f af f1             	imul   esi,ecx
c000b467:	83 c6 12             	add    esi,0x12
c000b46a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b46f:	74 07                	je     c000b478 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000b471:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b476:	75 12                	jne    c000b48a <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000b478:	83 ec 0c             	sub    esp,0xc
c000b47b:	68 38 2d 02 c0       	push   0xc0022d38
c000b480:	e8 df ba ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b485:	e9 a0 02 00 00       	jmp    c000b72a <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000b48a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b48e:	83 f9 02             	cmp    ecx,0x2
c000b491:	74 0e                	je     c000b4a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000b493:	83 f9 0a             	cmp    ecx,0xa
c000b496:	0f 84 c8 00 00 00    	je     c000b564 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000b49c:	e9 72 02 00 00       	jmp    c000b713 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000b4a1:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b4a6:	75 0e                	jne    c000b4b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b4a8:	84 c0                	test   al,al
c000b4aa:	75 0a                	jne    c000b4b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b4ac:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b4af:	83 e8 18             	sub    eax,0x18
c000b4b2:	a8 f7                	test   al,0xf7
c000b4b4:	74 0d                	je     c000b4c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000b4b6:	83 ec 0c             	sub    esp,0xc
c000b4b9:	68 4d 2d 02 c0       	push   0xc0022d4d
c000b4be:	e9 58 02 00 00       	jmp    c000b71b <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b4c3:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000b4c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b4d0:	31 c0                	xor    eax,eax
c000b4d2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4d6:	89 c7                	mov    edi,eax
c000b4d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b4e0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b4e5:	75 15                	jne    c000b4fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b4e7:	99                   	cdq    
c000b4e8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b4ec:	85 d2                	test   edx,edx
c000b4ee:	75 0c                	jne    c000b4fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b4f0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000b4f4:	29 c7                	sub    edi,eax
c000b4f6:	4f                   	dec    edi
c000b4f7:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000b4fc:	31 d2                	xor    edx,edx
c000b4fe:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b502:	75 08                	jne    c000b50c <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000b504:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000b509:	c1 e2 18             	shl    edx,0x18
c000b50c:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000b511:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b515:	c1 e1 10             	shl    ecx,0x10
c000b518:	8d 47 01             	lea    eax,[edi+0x1]
c000b51b:	89 cd                	mov    ebp,ecx
c000b51d:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000b522:	c1 e1 08             	shl    ecx,0x8
c000b525:	09 e9                	or     ecx,ebp
c000b527:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b52b:	09 e9                	or     ecx,ebp
c000b52d:	09 d1                	or     ecx,edx
c000b52f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b533:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000b536:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b53a:	c1 fa 03             	sar    edx,0x3
c000b53d:	01 d6                	add    esi,edx
c000b53f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b543:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b547:	7e 04                	jle    c000b54d <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000b549:	89 c7                	mov    edi,eax
c000b54b:	eb 93                	jmp    c000b4e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000b54d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b551:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b555:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000b559:	0f 8f 77 ff ff ff    	jg     c000b4d6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000b55f:	e9 d3 01 00 00       	jmp    c000b737 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b564:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b569:	75 0e                	jne    c000b579 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b56b:	85 d2                	test   edx,edx
c000b56d:	75 0a                	jne    c000b579 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b56f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b572:	83 e8 18             	sub    eax,0x18
c000b575:	a8 f7                	test   al,0xf7
c000b577:	74 0d                	je     c000b586 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000b579:	83 ec 0c             	sub    esp,0xc
c000b57c:	68 5b 2d 02 c0       	push   0xc0022d5b
c000b581:	e9 95 01 00 00       	jmp    c000b71b <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b586:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b58e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b596:	31 c9                	xor    ecx,ecx
c000b598:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b59c:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000b5a0:	0f 8e 91 01 00 00    	jle    c000b737 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b5a6:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000b5aa:	0f 8d 87 01 00 00    	jge    c000b737 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b5b0:	8d 46 01             	lea    eax,[esi+0x1]
c000b5b3:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b5b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b5bb:	83 fd 7f             	cmp    ebp,0x7f
c000b5be:	89 e8                	mov    eax,ebp
c000b5c0:	0f 8e 9d 00 00 00    	jle    c000b663 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000b5c6:	83 e0 7f             	and    eax,0x7f
c000b5c9:	31 d2                	xor    edx,edx
c000b5cb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b5cf:	40                   	inc    eax
c000b5d0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b5d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5d8:	75 0a                	jne    c000b5e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000b5da:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000b5df:	89 ea                	mov    edx,ebp
c000b5e1:	c1 e2 18             	shl    edx,0x18
c000b5e4:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000b5e9:	c1 e0 10             	shl    eax,0x10
c000b5ec:	89 c7                	mov    edi,eax
c000b5ee:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b5f3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b5f7:	c1 e0 08             	shl    eax,0x8
c000b5fa:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b5fe:	09 f8                	or     eax,edi
c000b600:	31 f6                	xor    esi,esi
c000b602:	09 c5                	or     ebp,eax
c000b604:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000b609:	09 d5                	or     ebp,edx
c000b60b:	85 ff                	test   edi,edi
c000b60d:	75 1d                	jne    c000b62c <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b60f:	89 c8                	mov    eax,ecx
c000b611:	99                   	cdq    
c000b612:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b616:	85 d2                	test   edx,edx
c000b618:	75 12                	jne    c000b62c <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b61a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b61e:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b622:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b626:	49                   	dec    ecx
c000b627:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b62c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b630:	8d 51 01             	lea    edx,[ecx+0x1]
c000b633:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000b636:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000b63a:	8d 46 01             	lea    eax,[esi+0x1]
c000b63d:	7e 06                	jle    c000b645 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000b63f:	89 c6                	mov    esi,eax
c000b641:	89 d1                	mov    ecx,edx
c000b643:	eb c6                	jmp    c000b60b <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000b645:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b649:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b64d:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b651:	c1 f8 03             	sar    eax,0x3
c000b654:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b658:	89 d1                	mov    ecx,edx
c000b65a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b65e:	e9 35 ff ff ff       	jmp    c000b598 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000b663:	8d 45 01             	lea    eax,[ebp+0x1]
c000b666:	31 f6                	xor    esi,esi
c000b668:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b66c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000b671:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b675:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b67a:	75 1d                	jne    c000b699 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b67c:	89 c8                	mov    eax,ecx
c000b67e:	99                   	cdq    
c000b67f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b683:	85 d2                	test   edx,edx
c000b685:	75 12                	jne    c000b699 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b687:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b68b:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b68f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b693:	49                   	dec    ecx
c000b694:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b699:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b6a1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b6a5:	75 10                	jne    c000b6b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000b6a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b6ab:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000b6b0:	c1 e7 18             	shl    edi,0x18
c000b6b3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b6b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b6bb:	8d 51 01             	lea    edx,[ecx+0x1]
c000b6be:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000b6c3:	c1 e0 10             	shl    eax,0x10
c000b6c6:	89 c7                	mov    edi,eax
c000b6c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b6cc:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000b6d1:	c1 e0 08             	shl    eax,0x8
c000b6d4:	09 f8                	or     eax,edi
c000b6d6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b6da:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000b6de:	09 f8                	or     eax,edi
c000b6e0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000b6e4:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b6e8:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000b6eb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b6ef:	c1 f8 03             	sar    eax,0x3
c000b6f2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b6f6:	8d 46 01             	lea    eax,[esi+0x1]
c000b6f9:	39 f5                	cmp    ebp,esi
c000b6fb:	7e 09                	jle    c000b706 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000b6fd:	89 c6                	mov    esi,eax
c000b6ff:	89 d1                	mov    ecx,edx
c000b701:	e9 6f ff ff ff       	jmp    c000b675 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000b706:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b70a:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b70e:	e9 45 ff ff ff       	jmp    c000b658 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000b713:	52                   	push   edx
c000b714:	52                   	push   edx
c000b715:	51                   	push   ecx
c000b716:	68 6a 2d 02 c0       	push   0xc0022d6a
c000b71b:	e8 44 b8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b720:	58                   	pop    eax
c000b721:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b725:	e8 05 3e 00 00       	call   c000f52f <free>
c000b72a:	83 c4 10             	add    esp,0x10
c000b72d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b735:	eb 14                	jmp    c000b74b <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000b737:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b73b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b73f:	89 18                	mov    DWORD PTR [eax],ebx
c000b741:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b745:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b749:	89 18                	mov    DWORD PTR [eax],ebx
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	83 c4 3c             	add    esp,0x3c
c000b752:	5b                   	pop    ebx
c000b753:	5e                   	pop    esi
c000b754:	5f                   	pop    edi
c000b755:	5d                   	pop    ebp
c000b756:	c3                   	ret    
c000b757:	90                   	nop

c000b758 <Video::putTGA(int, int, unsigned char*, int)>:
c000b758:	55                   	push   ebp
c000b759:	57                   	push   edi
c000b75a:	56                   	push   esi
c000b75b:	53                   	push   ebx
c000b75c:	83 ec 28             	sub    esp,0x28
c000b75f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b763:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b767:	50                   	push   eax
c000b768:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b76c:	50                   	push   eax
c000b76d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b771:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b775:	57                   	push   edi
c000b776:	e8 33 fc ff ff       	call   c000b3ae <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b77b:	83 c4 20             	add    esp,0x20
c000b77e:	85 c0                	test   eax,eax
c000b780:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b784:	74 3a                	je     c000b7c0 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b786:	89 c6                	mov    esi,eax
c000b788:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b78c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b790:	39 d8                	cmp    eax,ebx
c000b792:	7e 2c                	jle    c000b7c0 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b794:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b798:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b79c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b7a0:	39 e8                	cmp    eax,ebp
c000b7a2:	7e 19                	jle    c000b7bd <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000b7a4:	83 c6 04             	add    esi,0x4
c000b7a7:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b7aa:	85 c0                	test   eax,eax
c000b7ac:	79 0c                	jns    c000b7ba <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000b7ae:	8b 17                	mov    edx,DWORD PTR [edi]
c000b7b0:	50                   	push   eax
c000b7b1:	53                   	push   ebx
c000b7b2:	55                   	push   ebp
c000b7b3:	57                   	push   edi
c000b7b4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	45                   	inc    ebp
c000b7bb:	eb db                	jmp    c000b798 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b7bd:	43                   	inc    ebx
c000b7be:	eb c8                	jmp    c000b788 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b7c0:	83 c4 1c             	add    esp,0x1c
c000b7c3:	5b                   	pop    ebx
c000b7c4:	5e                   	pop    esi
c000b7c5:	5f                   	pop    edi
c000b7c6:	5d                   	pop    ebp
c000b7c7:	c3                   	ret    

c000b7c8 <ACPI::close(int, int, void*)>:
c000b7c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b7cd:	c3                   	ret    
c000b7ce:	66 90                	xchg   ax,ax

c000b7d0 <loadACPITables(unsigned char*)>:
c000b7d0:	57                   	push   edi
c000b7d1:	56                   	push   esi
c000b7d2:	53                   	push   ebx
c000b7d3:	83 ec 60             	sub    esp,0x60
c000b7d6:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b7db:	0f 84 43 02 00 00    	je     c000ba24 <loadACPITables(unsigned char*)+0x254>
c000b7e1:	a0 80 ad 02 c0       	mov    al,ds:0xc002ad80
c000b7e6:	0f b6 c0             	movzx  eax,al
c000b7e9:	85 c0                	test   eax,eax
c000b7eb:	74 7b                	je     c000b868 <loadACPITables(unsigned char*)+0x98>
c000b7ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b7f1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b7f5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b7f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7fc:	83 e8 24             	sub    eax,0x24
c000b7ff:	c1 e8 03             	shr    eax,0x3
c000b802:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b806:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b80e:	66 90                	xchg   ax,ax
c000b810:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b814:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b818:	0f 8d ba 00 00 00    	jge    c000b8d8 <loadACPITables(unsigned char*)+0x108>
c000b81e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b822:	83 c0 24             	add    eax,0x24
c000b825:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b829:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b82d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b831:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b835:	c1 e0 03             	shl    eax,0x3
c000b838:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b83c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b840:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b843:	8b 00                	mov    eax,DWORD PTR [eax]
c000b845:	89 c1                	mov    ecx,eax
c000b847:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c000b84c:	8d 50 01             	lea    edx,[eax+0x1]
c000b84f:	89 15 60 ab 02 c0    	mov    DWORD PTR ds:0xc002ab60,edx
c000b855:	89 ca                	mov    edx,ecx
c000b857:	89 14 c5 84 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd547c],edx
c000b85e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b863:	eb ab                	jmp    c000b810 <loadACPITables(unsigned char*)+0x40>
c000b865:	8d 76 00             	lea    esi,[esi+0x0]
c000b868:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b86c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b870:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b874:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b877:	83 e8 24             	sub    eax,0x24
c000b87a:	c1 e8 02             	shr    eax,0x2
c000b87d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b881:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b889:	8d 76 00             	lea    esi,[esi+0x0]
c000b88c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b890:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b894:	7d 42                	jge    c000b8d8 <loadACPITables(unsigned char*)+0x108>
c000b896:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b89a:	83 c0 24             	add    eax,0x24
c000b89d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b8a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b8a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b8a9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b8ad:	c1 e0 02             	shl    eax,0x2
c000b8b0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b8b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b8b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b8ba:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c000b8bf:	8d 50 01             	lea    edx,[eax+0x1]
c000b8c2:	89 15 60 ab 02 c0    	mov    DWORD PTR ds:0xc002ab60,edx
c000b8c8:	89 ca                	mov    edx,ecx
c000b8ca:	89 14 c5 84 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd547c],edx
c000b8d1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b8d6:	eb b4                	jmp    c000b88c <loadACPITables(unsigned char*)+0xbc>
c000b8d8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b8e0:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c000b8e5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b8e9:	0f 8d 39 01 00 00    	jge    c000ba28 <loadACPITables(unsigned char*)+0x258>
c000b8ef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b8f3:	8b 04 c5 84 ab 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd547c]
c000b8fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b8fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b902:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b90a:	25 ff 0f 00 00       	and    eax,0xfff
c000b90f:	89 c6                	mov    esi,eax
c000b911:	8b 1d 50 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d250
c000b917:	83 ec 0c             	sub    esp,0xc
c000b91a:	6a 01                	push   0x1
c000b91c:	e8 38 73 00 00       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c000b921:	83 c4 10             	add    esp,0x10
c000b924:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b928:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b92e:	83 ec 0c             	sub    esp,0xc
c000b931:	6a 01                	push   0x1
c000b933:	6a 01                	push   0x1
c000b935:	50                   	push   eax
c000b936:	52                   	push   edx
c000b937:	53                   	push   ebx
c000b938:	e8 e9 7b 00 00       	call   c0013526 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b93d:	83 c4 20             	add    esp,0x20
c000b940:	09 f0                	or     eax,esi
c000b942:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b946:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b94a:	c1 e0 03             	shl    eax,0x3
c000b94d:	05 80 ab 02 c0       	add    eax,0xc002ab80
c000b952:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b956:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b95a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b95e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b966:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b96a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b96e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b976:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b97a:	89 c6                	mov    esi,eax
c000b97c:	89 d7                	mov    edi,edx
c000b97e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b980:	89 c8                	mov    eax,ecx
c000b982:	89 fa                	mov    edx,edi
c000b984:	89 f3                	mov    ebx,esi
c000b986:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b98a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b98e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b992:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b999:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b99d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9a1:	05 00 10 00 00       	add    eax,0x1000
c000b9a6:	c1 e8 0c             	shr    eax,0xc
c000b9a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b9ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b9b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9b9:	25 ff 0f 00 00       	and    eax,0xfff
c000b9be:	89 c6                	mov    esi,eax
c000b9c0:	8b 1d 50 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d250
c000b9c6:	83 ec 0c             	sub    esp,0xc
c000b9c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b9cd:	e8 87 72 00 00       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c000b9d2:	83 c4 10             	add    esp,0x10
c000b9d5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b9d9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b9df:	83 ec 0c             	sub    esp,0xc
c000b9e2:	6a 01                	push   0x1
c000b9e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9e8:	50                   	push   eax
c000b9e9:	52                   	push   edx
c000b9ea:	53                   	push   ebx
c000b9eb:	e8 36 7b 00 00       	call   c0013526 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b9f0:	83 c4 20             	add    esp,0x20
c000b9f3:	09 f0                	or     eax,esi
c000b9f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b9f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9fd:	83 ec 0c             	sub    esp,0xc
c000ba00:	50                   	push   eax
c000ba01:	e8 5b 75 00 00       	call   c0012f61 <Virt::freeKernelVirtualPages(unsigned long)>
c000ba06:	83 c4 10             	add    esp,0x10
c000ba09:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ba0d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ba11:	89 14 c5 84 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd547c],edx
c000ba18:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ba1d:	e9 be fe ff ff       	jmp    c000b8e0 <loadACPITables(unsigned char*)+0x110>
c000ba22:	66 90                	xchg   ax,ax
c000ba24:	90                   	nop
c000ba25:	8d 76 00             	lea    esi,[esi+0x0]
c000ba28:	83 c4 60             	add    esp,0x60
c000ba2b:	5b                   	pop    ebx
c000ba2c:	5e                   	pop    esi
c000ba2d:	5f                   	pop    edi
c000ba2e:	c3                   	ret    
c000ba2f:	90                   	nop

c000ba30 <findRSDT(unsigned char*)>:
c000ba30:	57                   	push   edi
c000ba31:	56                   	push   esi
c000ba32:	53                   	push   ebx
c000ba33:	83 ec 50             	sub    esp,0x50
c000ba36:	a1 88 ad 02 c0       	mov    eax,ds:0xc002ad88
c000ba3b:	85 c0                	test   eax,eax
c000ba3d:	75 0d                	jne    c000ba4c <findRSDT(unsigned char*)+0x1c>
c000ba3f:	b8 00 00 00 00       	mov    eax,0x0
c000ba44:	e9 2b 01 00 00       	jmp    c000bb74 <findRSDT(unsigned char*)+0x144>
c000ba49:	8d 76 00             	lea    esi,[esi+0x0]
c000ba4c:	89 e0                	mov    eax,esp
c000ba4e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ba52:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ba56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ba5a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000ba62:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ba66:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ba6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ba72:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ba76:	89 c6                	mov    esi,eax
c000ba78:	89 d7                	mov    edi,edx
c000ba7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba7c:	89 c8                	mov    eax,ecx
c000ba7e:	89 fa                	mov    edx,edi
c000ba80:	89 f3                	mov    ebx,esi
c000ba82:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ba86:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ba8a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ba8e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ba92:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000ba96:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ba9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000baa2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000baa6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000baaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bab2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bab6:	25 ff 0f 00 00       	and    eax,0xfff
c000babb:	89 c6                	mov    esi,eax
c000babd:	8b 1d 50 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d250
c000bac3:	83 ec 0c             	sub    esp,0xc
c000bac6:	6a 02                	push   0x2
c000bac8:	e8 8c 71 00 00       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c000bacd:	83 c4 10             	add    esp,0x10
c000bad0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000bad4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000bada:	83 ec 0c             	sub    esp,0xc
c000badd:	6a 01                	push   0x1
c000badf:	6a 02                	push   0x2
c000bae1:	50                   	push   eax
c000bae2:	52                   	push   edx
c000bae3:	53                   	push   ebx
c000bae4:	e8 3d 7a 00 00       	call   c0013526 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bae9:	83 c4 20             	add    esp,0x20
c000baec:	09 f0                	or     eax,esi
c000baee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000baf2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000baf6:	25 ff 0f 00 00       	and    eax,0xfff
c000bafb:	89 c6                	mov    esi,eax
c000bafd:	8b 1d 50 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d250
c000bb03:	83 ec 0c             	sub    esp,0xc
c000bb06:	6a 02                	push   0x2
c000bb08:	e8 4c 71 00 00       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c000bb0d:	83 c4 10             	add    esp,0x10
c000bb10:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bb14:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000bb1a:	83 ec 0c             	sub    esp,0xc
c000bb1d:	6a 01                	push   0x1
c000bb1f:	6a 02                	push   0x2
c000bb21:	50                   	push   eax
c000bb22:	52                   	push   edx
c000bb23:	53                   	push   ebx
c000bb24:	e8 fd 79 00 00       	call   c0013526 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bb29:	83 c4 20             	add    esp,0x20
c000bb2c:	09 f0                	or     eax,esi
c000bb2e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bb32:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000bb37:	85 c0                	test   eax,eax
c000bb39:	75 11                	jne    c000bb4c <findRSDT(unsigned char*)+0x11c>
c000bb3b:	c6 05 80 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad80,0x0
c000bb42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb46:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bb4a:	eb 24                	jmp    c000bb70 <findRSDT(unsigned char*)+0x140>
c000bb4c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000bb51:	83 f8 02             	cmp    eax,0x2
c000bb54:	75 12                	jne    c000bb68 <findRSDT(unsigned char*)+0x138>
c000bb56:	c6 05 80 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad80,0x1
c000bb5d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bb61:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bb65:	eb 09                	jmp    c000bb70 <findRSDT(unsigned char*)+0x140>
c000bb67:	90                   	nop
c000bb68:	b8 00 00 00 00       	mov    eax,0x0
c000bb6d:	eb 05                	jmp    c000bb74 <findRSDT(unsigned char*)+0x144>
c000bb6f:	90                   	nop
c000bb70:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb74:	83 c4 50             	add    esp,0x50
c000bb77:	5b                   	pop    ebx
c000bb78:	5e                   	pop    esi
c000bb79:	5f                   	pop    edi
c000bb7a:	c3                   	ret    
c000bb7b:	90                   	nop

c000bb7c <findDataTable(unsigned char*, char*)>:
c000bb7c:	83 ec 1c             	sub    esp,0x1c
c000bb7f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000bb84:	75 0a                	jne    c000bb90 <findDataTable(unsigned char*, char*)+0x14>
c000bb86:	b8 00 00 00 00       	mov    eax,0x0
c000bb8b:	eb 5f                	jmp    c000bbec <findDataTable(unsigned char*, char*)+0x70>
c000bb8d:	8d 76 00             	lea    esi,[esi+0x0]
c000bb90:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bb98:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c000bb9d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000bba1:	7d 41                	jge    c000bbe4 <findDataTable(unsigned char*, char*)+0x68>
c000bba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bba7:	c1 e0 03             	shl    eax,0x3
c000bbaa:	05 80 ab 02 c0       	add    eax,0xc002ab80
c000bbaf:	83 ec 04             	sub    esp,0x4
c000bbb2:	6a 04                	push   0x4
c000bbb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbb8:	50                   	push   eax
c000bbb9:	e8 c2 47 ff ff       	call   c0000380 <memcmp>
c000bbbe:	83 c4 10             	add    esp,0x10
c000bbc1:	85 c0                	test   eax,eax
c000bbc3:	0f 94 c0             	sete   al
c000bbc6:	0f b6 c0             	movzx  eax,al
c000bbc9:	85 c0                	test   eax,eax
c000bbcb:	74 0f                	je     c000bbdc <findDataTable(unsigned char*, char*)+0x60>
c000bbcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbd1:	8b 04 c5 84 ab 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd547c]
c000bbd8:	eb 12                	jmp    c000bbec <findDataTable(unsigned char*, char*)+0x70>
c000bbda:	66 90                	xchg   ax,ax
c000bbdc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000bbe1:	eb b5                	jmp    c000bb98 <findDataTable(unsigned char*, char*)+0x1c>
c000bbe3:	90                   	nop
c000bbe4:	b8 00 00 00 00       	mov    eax,0x0
c000bbe9:	8d 76 00             	lea    esi,[esi+0x0]
c000bbec:	83 c4 1c             	add    esp,0x1c
c000bbef:	c3                   	ret    

c000bbf0 <scanMADT()>:
c000bbf0:	53                   	push   ebx
c000bbf1:	83 ec 38             	sub    esp,0x38
c000bbf4:	c7 05 88 ad 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ad88,0x0
c000bbfe:	c7 05 84 ad 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ad84,0x0
c000bc08:	e8 af d0 00 00       	call   c0018cbc <HalFindRSDP()>
c000bc0d:	a3 88 ad 02 c0       	mov    ds:0xc002ad88,eax
c000bc12:	a1 88 ad 02 c0       	mov    eax,ds:0xc002ad88
c000bc17:	85 c0                	test   eax,eax
c000bc19:	0f 84 11 04 00 00    	je     c000c030 <scanMADT()+0x440>
c000bc1f:	a1 88 ad 02 c0       	mov    eax,ds:0xc002ad88
c000bc24:	83 ec 0c             	sub    esp,0xc
c000bc27:	50                   	push   eax
c000bc28:	e8 03 fe ff ff       	call   c000ba30 <findRSDT(unsigned char*)>
c000bc2d:	83 c4 10             	add    esp,0x10
c000bc30:	a3 84 ad 02 c0       	mov    ds:0xc002ad84,eax
c000bc35:	a1 84 ad 02 c0       	mov    eax,ds:0xc002ad84
c000bc3a:	85 c0                	test   eax,eax
c000bc3c:	0f 84 f2 03 00 00    	je     c000c034 <scanMADT()+0x444>
c000bc42:	a1 84 ad 02 c0       	mov    eax,ds:0xc002ad84
c000bc47:	83 ec 0c             	sub    esp,0xc
c000bc4a:	50                   	push   eax
c000bc4b:	e8 80 fb ff ff       	call   c000b7d0 <loadACPITables(unsigned char*)>
c000bc50:	83 c4 10             	add    esp,0x10
c000bc53:	a1 84 ad 02 c0       	mov    eax,ds:0xc002ad84
c000bc58:	83 ec 08             	sub    esp,0x8
c000bc5b:	68 cc 2d 02 c0       	push   0xc0022dcc
c000bc60:	50                   	push   eax
c000bc61:	e8 16 ff ff ff       	call   c000bb7c <findDataTable(unsigned char*, char*)>
c000bc66:	83 c4 10             	add    esp,0x10
c000bc69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc6d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000bc72:	0f 84 c0 03 00 00    	je     c000c038 <scanMADT()+0x448>
c000bc78:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000bc80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc87:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000bc8b:	0f 87 af 03 00 00    	ja     c000c040 <scanMADT()+0x450>
c000bc91:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000bc99:	0f 87 a1 03 00 00    	ja     c000c040 <scanMADT()+0x450>
c000bc9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bca3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bca7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcab:	8d 50 01             	lea    edx,[eax+0x1]
c000bcae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bcb6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bcba:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000bcbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcc2:	8d 50 01             	lea    edx,[eax+0x1]
c000bcc5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bccd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bcd1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000bcd5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000bcda:	83 f8 02             	cmp    eax,0x2
c000bcdd:	0f 86 59 03 00 00    	jbe    c000c03c <scanMADT()+0x44c>
c000bce3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bce8:	85 c0                	test   eax,eax
c000bcea:	75 58                	jne    c000bd44 <scanMADT()+0x154>
c000bcec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcf0:	8d 50 01             	lea    edx,[eax+0x1]
c000bcf3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf7:	8a 15 80 af 02 c0    	mov    dl,BYTE PTR ds:0xc002af80
c000bcfd:	0f b6 d2             	movzx  edx,dl
c000bd00:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bd04:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bd08:	88 82 c0 af 02 c0    	mov    BYTE PTR [edx-0x3ffd5040],al
c000bd0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd12:	8d 50 01             	lea    edx,[eax+0x1]
c000bd15:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd19:	8a 15 80 af 02 c0    	mov    dl,BYTE PTR ds:0xc002af80
c000bd1f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bd22:	88 0d 80 af 02 c0    	mov    BYTE PTR ds:0xc002af80,cl
c000bd28:	0f b6 d2             	movzx  edx,dl
c000bd2b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bd2f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bd33:	88 82 a0 af 02 c0    	mov    BYTE PTR [edx-0x3ffd5060],al
c000bd39:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bd3e:	e9 d9 02 00 00       	jmp    c000c01c <scanMADT()+0x42c>
c000bd43:	90                   	nop
c000bd44:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bd49:	83 f8 01             	cmp    eax,0x1
c000bd4c:	0f 85 1a 01 00 00    	jne    c000be6c <scanMADT()+0x27c>
c000bd52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd56:	8d 50 01             	lea    edx,[eax+0x1]
c000bd59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd5d:	8a 15 40 ae 02 c0    	mov    dl,BYTE PTR ds:0xc002ae40
c000bd63:	0f b6 d2             	movzx  edx,dl
c000bd66:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bd6a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bd6e:	88 82 60 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd51a0],al
c000bd74:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000bd79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd81:	01 d0                	add    eax,edx
c000bd83:	83 c0 2c             	add    eax,0x2c
c000bd86:	8a 00                	mov    al,BYTE PTR [eax]
c000bd88:	0f b6 d0             	movzx  edx,al
c000bd8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd8f:	8d 48 01             	lea    ecx,[eax+0x1]
c000bd92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bd96:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bd9a:	0f b6 c0             	movzx  eax,al
c000bd9d:	c1 e0 08             	shl    eax,0x8
c000bda0:	89 d1                	mov    ecx,edx
c000bda2:	09 c1                	or     ecx,eax
c000bda4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bda8:	8d 50 02             	lea    edx,[eax+0x2]
c000bdab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdaf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bdb3:	0f b6 c0             	movzx  eax,al
c000bdb6:	c1 e0 10             	shl    eax,0x10
c000bdb9:	09 c1                	or     ecx,eax
c000bdbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bdbf:	8d 50 03             	lea    edx,[eax+0x3]
c000bdc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdc6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bdca:	0f b6 c0             	movzx  eax,al
c000bdcd:	c1 e0 18             	shl    eax,0x18
c000bdd0:	09 c1                	or     ecx,eax
c000bdd2:	89 ca                	mov    edx,ecx
c000bdd4:	a0 40 ae 02 c0       	mov    al,ds:0xc002ae40
c000bdd9:	0f b6 c0             	movzx  eax,al
c000bddc:	89 14 85 80 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5180],edx
c000bde3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bde8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bdec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bdf0:	01 d0                	add    eax,edx
c000bdf2:	83 c0 2c             	add    eax,0x2c
c000bdf5:	8a 00                	mov    al,BYTE PTR [eax]
c000bdf7:	0f b6 d0             	movzx  edx,al
c000bdfa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bdfe:	8d 48 01             	lea    ecx,[eax+0x1]
c000be01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000be05:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000be09:	0f b6 c0             	movzx  eax,al
c000be0c:	c1 e0 08             	shl    eax,0x8
c000be0f:	89 d1                	mov    ecx,edx
c000be11:	09 c1                	or     ecx,eax
c000be13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be17:	8d 50 02             	lea    edx,[eax+0x2]
c000be1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000be1e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000be22:	0f b6 c0             	movzx  eax,al
c000be25:	c1 e0 10             	shl    eax,0x10
c000be28:	09 c1                	or     ecx,eax
c000be2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be2e:	8d 50 03             	lea    edx,[eax+0x3]
c000be31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000be35:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000be39:	0f b6 c0             	movzx  eax,al
c000be3c:	c1 e0 18             	shl    eax,0x18
c000be3f:	09 c1                	or     ecx,eax
c000be41:	89 ca                	mov    edx,ecx
c000be43:	a0 40 ae 02 c0       	mov    al,ds:0xc002ae40
c000be48:	0f b6 c0             	movzx  eax,al
c000be4b:	89 14 85 00 af 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5100],edx
c000be52:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000be57:	a0 40 ae 02 c0       	mov    al,ds:0xc002ae40
c000be5c:	83 c0 01             	add    eax,0x1
c000be5f:	a2 40 ae 02 c0       	mov    ds:0xc002ae40,al
c000be64:	e9 b3 01 00 00       	jmp    c000c01c <scanMADT()+0x42c>
c000be69:	8d 76 00             	lea    esi,[esi+0x0]
c000be6c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000be71:	83 f8 02             	cmp    eax,0x2
c000be74:	0f 85 ea 00 00 00    	jne    c000bf64 <scanMADT()+0x374>
c000be7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be7e:	8d 50 01             	lea    edx,[eax+0x1]
c000be81:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000be89:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000be8d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000be91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be95:	8d 50 01             	lea    edx,[eax+0x1]
c000be98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be9c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bea0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bea4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bea8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000beac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000beb0:	01 d0                	add    eax,edx
c000beb2:	83 c0 2c             	add    eax,0x2c
c000beb5:	8a 00                	mov    al,BYTE PTR [eax]
c000beb7:	0f b6 d0             	movzx  edx,al
c000beba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bebe:	8d 48 01             	lea    ecx,[eax+0x1]
c000bec1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bec5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bec9:	0f b6 c0             	movzx  eax,al
c000becc:	c1 e0 08             	shl    eax,0x8
c000becf:	89 d1                	mov    ecx,edx
c000bed1:	09 c1                	or     ecx,eax
c000bed3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bed7:	8d 50 02             	lea    edx,[eax+0x2]
c000beda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bede:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bee2:	0f b6 c0             	movzx  eax,al
c000bee5:	c1 e0 10             	shl    eax,0x10
c000bee8:	09 c1                	or     ecx,eax
c000beea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000beee:	8d 50 03             	lea    edx,[eax+0x3]
c000bef1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bef5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bef9:	0f b6 c0             	movzx  eax,al
c000befc:	c1 e0 18             	shl    eax,0x18
c000beff:	09 c8                	or     eax,ecx
c000bf01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf05:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bf0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bf0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf12:	01 d0                	add    eax,edx
c000bf14:	83 c0 2c             	add    eax,0x2c
c000bf17:	8a 00                	mov    al,BYTE PTR [eax]
c000bf19:	0f b6 c0             	movzx  eax,al
c000bf1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000bf20:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bf23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bf27:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000bf2b:	0f b6 d2             	movzx  edx,dl
c000bf2e:	c1 e2 08             	shl    edx,0x8
c000bf31:	09 d0                	or     eax,edx
c000bf33:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bf38:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bf3d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bf42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf46:	88 90 c8 53 02 c0    	mov    BYTE PTR [eax-0x3ffdac38],dl
c000bf4c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000bf51:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000bf56:	66 89 84 12 20 ae 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd51e0],ax
c000bf5e:	e9 b9 00 00 00       	jmp    c000c01c <scanMADT()+0x42c>
c000bf63:	90                   	nop
c000bf64:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bf69:	83 f8 04             	cmp    eax,0x4
c000bf6c:	0f 85 9a 00 00 00    	jne    c000c00c <scanMADT()+0x41c>
c000bf72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf76:	8d 50 01             	lea    edx,[eax+0x1]
c000bf79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bf81:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bf85:	0f b6 c0             	movzx  eax,al
c000bf88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bf8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bf90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf94:	01 d0                	add    eax,edx
c000bf96:	83 c0 2c             	add    eax,0x2c
c000bf99:	8a 00                	mov    al,BYTE PTR [eax]
c000bf9b:	0f b6 d0             	movzx  edx,al
c000bf9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bfa2:	8d 48 01             	lea    ecx,[eax+0x1]
c000bfa5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bfa9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bfad:	0f b6 c0             	movzx  eax,al
c000bfb0:	c1 e0 08             	shl    eax,0x8
c000bfb3:	09 d0                	or     eax,edx
c000bfb5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfb9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bfbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bfc2:	8d 50 01             	lea    edx,[eax+0x1]
c000bfc5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bfcd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bfd1:	0f b6 c0             	movzx  eax,al
c000bfd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bfd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfdc:	c1 e0 08             	shl    eax,0x8
c000bfdf:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bfe3:	89 c1                	mov    ecx,eax
c000bfe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfe9:	c1 e0 18             	shl    eax,0x18
c000bfec:	89 c3                	mov    ebx,eax
c000bfee:	a1 8c ad 02 c0       	mov    eax,ds:0xc002ad8c
c000bff3:	8d 50 01             	lea    edx,[eax+0x1]
c000bff6:	89 15 8c ad 02 c0    	mov    DWORD PTR ds:0xc002ad8c,edx
c000bffc:	09 d9                	or     ecx,ebx
c000bffe:	89 ca                	mov    edx,ecx
c000c000:	89 14 85 a0 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5260],edx
c000c007:	eb 13                	jmp    c000c01c <scanMADT()+0x42c>
c000c009:	8d 76 00             	lea    esi,[esi+0x0]
c000c00c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c011:	83 f8 05             	cmp    eax,0x5
c000c014:	75 06                	jne    c000c01c <scanMADT()+0x42c>
c000c016:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c01b:	90                   	nop
c000c01c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c021:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c025:	01 d0                	add    eax,edx
c000c027:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c02b:	e9 50 fc ff ff       	jmp    c000bc80 <scanMADT()+0x90>
c000c030:	90                   	nop
c000c031:	eb 0d                	jmp    c000c040 <scanMADT()+0x450>
c000c033:	90                   	nop
c000c034:	90                   	nop
c000c035:	eb 09                	jmp    c000c040 <scanMADT()+0x450>
c000c037:	90                   	nop
c000c038:	90                   	nop
c000c039:	eb 05                	jmp    c000c040 <scanMADT()+0x450>
c000c03b:	90                   	nop
c000c03c:	90                   	nop
c000c03d:	8d 76 00             	lea    esi,[esi+0x0]
c000c040:	83 c4 38             	add    esp,0x38
c000c043:	5b                   	pop    ebx
c000c044:	c3                   	ret    
c000c045:	90                   	nop
c000c046:	66 90                	xchg   ax,ax

c000c048 <ACPI::ACPI()>:
c000c048:	83 ec 0c             	sub    esp,0xc
c000c04b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c04f:	83 ec 08             	sub    esp,0x8
c000c052:	68 d1 2d 02 c0       	push   0xc0022dd1
c000c057:	50                   	push   eax
c000c058:	e8 b5 d3 ff ff       	call   c0009412 <Device::Device(char const*)>
c000c05d:	83 c4 10             	add    esp,0x10
c000c060:	ba cc 2f 02 c0       	mov    edx,0xc0022fcc
c000c065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c069:	89 10                	mov    DWORD PTR [eax],edx
c000c06b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c06f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c07a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c088:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c092:	e8 59 fb ff ff       	call   c000bbf0 <scanMADT()>
c000c097:	90                   	nop
c000c098:	83 c4 0c             	add    esp,0xc
c000c09b:	c3                   	ret    

c000c09c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c09c:	83 ec 2c             	sub    esp,0x2c
c000c09f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c0a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0a7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c0ab:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c0af:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c0b4:	88 d0                	mov    al,dl
c000c0b6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c0ba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c0bf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c0c7:	90                   	nop
c000c0c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0cc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c0d2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c0d6:	0f 8d b0 00 00 00    	jge    c000c18c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c0dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c0e4:	83 c2 2a             	add    edx,0x2a
c000c0e7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c0eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c0f0:	0f b7 c0             	movzx  eax,ax
c000c0f3:	39 c2                	cmp    edx,eax
c000c0f5:	0f 85 85 00 00 00    	jne    c000c180 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c0fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c103:	83 c2 2a             	add    edx,0x2a
c000c106:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c10a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c10f:	0f b6 c0             	movzx  eax,al
c000c112:	39 c2                	cmp    edx,eax
c000c114:	75 6a                	jne    c000c180 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c116:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c11b:	85 c0                	test   eax,eax
c000c11d:	74 3d                	je     c000c15c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c11f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c123:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c127:	83 c2 2a             	add    edx,0x2a
c000c12a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c12e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c132:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c135:	39 c2                	cmp    edx,eax
c000c137:	74 13                	je     c000c14c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c139:	83 ec 0c             	sub    esp,0xc
c000c13c:	68 4c 2f 02 c0       	push   0xc0022f4c
c000c141:	e8 20 37 00 00       	call   c000f866 <KePanic(char const*)>
c000c146:	83 c4 10             	add    esp,0x10
c000c149:	8d 76 00             	lea    esi,[esi+0x0]
c000c14c:	83 ec 0c             	sub    esp,0xc
c000c14f:	68 d6 2d 02 c0       	push   0xc0022dd6
c000c154:	e8 0d 37 00 00       	call   c000f866 <KePanic(char const*)>
c000c159:	83 c4 10             	add    esp,0x10
c000c15c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c160:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c164:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c168:	83 c2 2a             	add    edx,0x2a
c000c16b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c16f:	8b 02                	mov    eax,DWORD PTR [edx]
c000c171:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c174:	89 01                	mov    DWORD PTR [ecx],eax
c000c176:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c179:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c17e:	66 90                	xchg   ax,ax
c000c180:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c185:	e9 3e ff ff ff       	jmp    c000c0c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c18a:	66 90                	xchg   ax,ax
c000c18c:	90                   	nop
c000c18d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c191:	83 c4 2c             	add    esp,0x2c
c000c194:	c2 04 00             	ret    0x4
c000c197:	90                   	nop

c000c198 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c198:	83 ec 1c             	sub    esp,0x1c
c000c19b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c19f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c1a3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c1ac:	88 c8                	mov    al,cl
c000c1ae:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c1b2:	88 d0                	mov    al,dl
c000c1b4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c1b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1bc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c1c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1c6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c1c9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c1cd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c1d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1d5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c1db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c1df:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000c1e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c1e6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000c1eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1ef:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c1f5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c1f9:	83 c0 01             	add    eax,0x1
c000c1fc:	88 c1                	mov    cl,al
c000c1fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c202:	83 c2 2a             	add    edx,0x2a
c000c205:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c20d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c217:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c21a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c21e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c226:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c22c:	8d 50 01             	lea    edx,[eax+0x1]
c000c22f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c233:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c23d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c243:	3d 00 02 00 00       	cmp    eax,0x200
c000c248:	75 12                	jne    c000c25c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c24a:	83 ec 0c             	sub    esp,0xc
c000c24d:	68 e5 2d 02 c0       	push   0xc0022de5
c000c252:	e8 0f 36 00 00       	call   c000f866 <KePanic(char const*)>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	66 90                	xchg   ax,ax
c000c25c:	90                   	nop
c000c25d:	83 c4 1c             	add    esp,0x1c
c000c260:	c3                   	ret    
c000c261:	90                   	nop
c000c262:	66 90                	xchg   ax,ax

c000c264 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000c264:	b8 00 00 00 00       	mov    eax,0x0
c000c269:	c3                   	ret    
c000c26a:	66 90                	xchg   ax,ax

c000c26c <ACPI::detectPCI()>:
c000c26c:	53                   	push   ebx
c000c26d:	83 ec 28             	sub    esp,0x28
c000c270:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c275:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000c27a:	a1 84 ad 02 c0       	mov    eax,ds:0xc002ad84
c000c27f:	83 ec 08             	sub    esp,0x8
c000c282:	68 02 2e 02 c0       	push   0xc0022e02
c000c287:	50                   	push   eax
c000c288:	e8 ef f8 ff ff       	call   c000bb7c <findDataTable(unsigned char*, char*)>
c000c28d:	83 c4 10             	add    esp,0x10
c000c290:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c294:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c299:	74 0d                	je     c000c2a8 <ACPI::detectPCI()+0x3c>
c000c29b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c2a0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c2a5:	8d 76 00             	lea    esi,[esi+0x0]
c000c2a8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000c2b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c2b4:	8a 00                	mov    al,BYTE PTR [eax]
c000c2b6:	0f b6 c0             	movzx  eax,al
c000c2b9:	83 f8 01             	cmp    eax,0x1
c000c2bc:	75 0e                	jne    c000c2cc <ACPI::detectPCI()+0x60>
c000c2be:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c2c3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c2c8:	eb 2e                	jmp    c000c2f8 <ACPI::detectPCI()+0x8c>
c000c2ca:	66 90                	xchg   ax,ax
c000c2cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c2d0:	8a 00                	mov    al,BYTE PTR [eax]
c000c2d2:	0f b6 c0             	movzx  eax,al
c000c2d5:	83 f8 02             	cmp    eax,0x2
c000c2d8:	75 1e                	jne    c000c2f8 <ACPI::detectPCI()+0x8c>
c000c2da:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c2df:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c2e4:	85 c0                	test   eax,eax
c000c2e6:	74 10                	je     c000c2f8 <ACPI::detectPCI()+0x8c>
c000c2e8:	83 ec 0c             	sub    esp,0xc
c000c2eb:	68 7c 2f 02 c0       	push   0xc0022f7c
c000c2f0:	e8 71 35 00 00       	call   c000f866 <KePanic(char const*)>
c000c2f5:	83 c4 10             	add    esp,0x10
c000c2f8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000c2fc:	83 f0 01             	xor    eax,0x1
c000c2ff:	0f b6 c0             	movzx  eax,al
c000c302:	85 c0                	test   eax,eax
c000c304:	74 46                	je     c000c34c <ACPI::detectPCI()+0xe0>
c000c306:	e8 25 3e ff ff       	call   c0000130 <manualPCIProbe>
c000c30b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c30f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000c314:	75 0e                	jne    c000c324 <ACPI::detectPCI()+0xb8>
c000c316:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c31b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c320:	eb 2a                	jmp    c000c34c <ACPI::detectPCI()+0xe0>
c000c322:	66 90                	xchg   ax,ax
c000c324:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000c329:	75 21                	jne    c000c34c <ACPI::detectPCI()+0xe0>
c000c32b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c330:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c335:	85 c0                	test   eax,eax
c000c337:	74 13                	je     c000c34c <ACPI::detectPCI()+0xe0>
c000c339:	83 ec 0c             	sub    esp,0xc
c000c33c:	68 7c 2f 02 c0       	push   0xc0022f7c
c000c341:	e8 20 35 00 00       	call   c000f866 <KePanic(char const*)>
c000c346:	83 c4 10             	add    esp,0x10
c000c349:	8d 76 00             	lea    esi,[esi+0x0]
c000c34c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c351:	85 c0                	test   eax,eax
c000c353:	0f 84 87 00 00 00    	je     c000c3e0 <ACPI::detectPCI()+0x174>
c000c359:	83 ec 0c             	sub    esp,0xc
c000c35c:	68 07 2e 02 c0       	push   0xc0022e07
c000c361:	e8 81 07 00 00       	call   c000cae7 <KeSetBootMessage(char const*)>
c000c366:	83 c4 10             	add    esp,0x10
c000c369:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000c371:	83 ec 0c             	sub    esp,0xc
c000c374:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c378:	e8 a2 31 00 00       	call   c000f51f <malloc>
c000c37d:	83 c4 10             	add    esp,0x10
c000c380:	89 c3                	mov    ebx,eax
c000c382:	83 ec 0c             	sub    esp,0xc
c000c385:	53                   	push   ebx
c000c386:	e8 d9 06 01 00       	call   c001ca64 <PCI::PCI()>
c000c38b:	83 c4 10             	add    esp,0x10
c000c38e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c392:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c396:	83 ec 08             	sub    esp,0x8
c000c399:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c39d:	50                   	push   eax
c000c39e:	e8 0d cf ff ff       	call   c00092b0 <Device::addChild(Device*)>
c000c3a3:	83 c4 10             	add    esp,0x10
c000c3a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c3aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3ac:	83 c0 08             	add    eax,0x8
c000c3af:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3b1:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c3b6:	85 d2                	test   edx,edx
c000c3b8:	74 0a                	je     c000c3c4 <ACPI::detectPCI()+0x158>
c000c3ba:	ba 01 00 00 00       	mov    edx,0x1
c000c3bf:	eb 0b                	jmp    c000c3cc <ACPI::detectPCI()+0x160>
c000c3c1:	8d 76 00             	lea    esi,[esi+0x0]
c000c3c4:	ba 02 00 00 00       	mov    edx,0x2
c000c3c9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3cc:	6a 00                	push   0x0
c000c3ce:	6a 00                	push   0x0
c000c3d0:	52                   	push   edx
c000c3d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c3d5:	ff d0                	call   eax
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	e9 91 00 00 00       	jmp    c000c470 <ACPI::detectPCI()+0x204>
c000c3df:	90                   	nop
c000c3e0:	83 ec 0c             	sub    esp,0xc
c000c3e3:	68 1f 2e 02 c0       	push   0xc0022e1f
c000c3e8:	e8 fa 06 00 00       	call   c000cae7 <KeSetBootMessage(char const*)>
c000c3ed:	83 c4 10             	add    esp,0x10
c000c3f0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c3f7:	83 ec 0c             	sub    esp,0xc
c000c3fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c3fe:	e8 1c 31 00 00       	call   c000f51f <malloc>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	89 c3                	mov    ebx,eax
c000c408:	83 ec 0c             	sub    esp,0xc
c000c40b:	53                   	push   ebx
c000c40c:	e8 59 12 01 00       	call   c001d66a <IDE::IDE()>
c000c411:	83 c4 10             	add    esp,0x10
c000c414:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c418:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c41c:	83 ec 08             	sub    esp,0x8
c000c41f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c423:	50                   	push   eax
c000c424:	e8 87 ce ff ff       	call   c00092b0 <Device::addChild(Device*)>
c000c429:	83 c4 10             	add    esp,0x10
c000c42c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c430:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c43a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c43e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c447:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c44b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c458:	8b 00                	mov    eax,DWORD PTR [eax]
c000c45a:	83 c0 08             	add    eax,0x8
c000c45d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c45f:	6a 00                	push   0x0
c000c461:	6a 00                	push   0x0
c000c463:	6a 00                	push   0x0
c000c465:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c469:	ff d0                	call   eax
c000c46b:	83 c4 10             	add    esp,0x10
c000c46e:	66 90                	xchg   ax,ax
c000c470:	90                   	nop
c000c471:	83 c4 28             	add    esp,0x28
c000c474:	5b                   	pop    ebx
c000c475:	c3                   	ret    
c000c476:	66 90                	xchg   ax,ax

c000c478 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c478:	83 ec 0c             	sub    esp,0xc
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	68 34 2e 02 c0       	push   0xc0022e34
c000c483:	e8 de 33 00 00       	call   c000f866 <KePanic(char const*)>
c000c488:	83 c4 10             	add    esp,0x10
c000c48b:	90                   	nop
c000c48c:	83 c4 0c             	add    esp,0xc
c000c48f:	c3                   	ret    

c000c490 <ACPI::open(int, int, void*)>:
c000c490:	57                   	push   edi
c000c491:	56                   	push   esi
c000c492:	53                   	push   ebx
c000c493:	81 ec 70 01 00 00    	sub    esp,0x170
c000c499:	83 ec 0c             	sub    esp,0xc
c000c49c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c4a3:	e8 c4 fd ff ff       	call   c000c26c <ACPI::detectPCI()>
c000c4a8:	83 c4 10             	add    esp,0x10
c000c4ab:	83 ec 0c             	sub    esp,0xc
c000c4ae:	68 a4 2f 02 c0       	push   0xc0022fa4
c000c4b3:	e8 2f 06 00 00       	call   c000cae7 <KeSetBootMessage(char const*)>
c000c4b8:	83 c4 10             	add    esp,0x10
c000c4bb:	b8 4c 05 00 00       	mov    eax,0x54c
c000c4c0:	8a 00                	mov    al,BYTE PTR [eax]
c000c4c2:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000c4c9:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c4d1:	83 f8 01             	cmp    eax,0x1
c000c4d4:	75 12                	jne    c000c4e8 <ACPI::open(int, int, void*)+0x58>
c000c4d6:	83 ec 0c             	sub    esp,0xc
c000c4d9:	68 45 2e 02 c0       	push   0xc0022e45
c000c4de:	e8 07 8a 00 00       	call   c0014eea <Thr::loadKernelSymbolTable(char const*)>
c000c4e3:	83 c4 10             	add    esp,0x10
c000c4e6:	eb 34                	jmp    c000c51c <ACPI::open(int, int, void*)+0x8c>
c000c4e8:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c4f0:	3d bb 00 00 00       	cmp    eax,0xbb
c000c4f5:	75 15                	jne    c000c50c <ACPI::open(int, int, void*)+0x7c>
c000c4f7:	83 ec 0c             	sub    esp,0xc
c000c4fa:	68 63 2e 02 c0       	push   0xc0022e63
c000c4ff:	e8 e6 89 00 00       	call   c0014eea <Thr::loadKernelSymbolTable(char const*)>
c000c504:	83 c4 10             	add    esp,0x10
c000c507:	eb 13                	jmp    c000c51c <ACPI::open(int, int, void*)+0x8c>
c000c509:	8d 76 00             	lea    esi,[esi+0x0]
c000c50c:	83 ec 0c             	sub    esp,0xc
c000c50f:	68 81 2e 02 c0       	push   0xc0022e81
c000c514:	e8 4d 33 00 00       	call   c000f866 <KePanic(char const*)>
c000c519:	83 c4 10             	add    esp,0x10
c000c51c:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000c524:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000c52f:	83 ec 0c             	sub    esp,0xc
c000c532:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c539:	e8 e1 2f 00 00       	call   c000f51f <malloc>
c000c53e:	83 c4 10             	add    esp,0x10
c000c541:	89 c3                	mov    ebx,eax
c000c543:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c000c548:	83 ec 04             	sub    esp,0x4
c000c54b:	50                   	push   eax
c000c54c:	68 9b 2e 02 c0       	push   0xc0022e9b
c000c551:	53                   	push   ebx
c000c552:	e8 db bb ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c557:	83 c4 10             	add    esp,0x10
c000c55a:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000c561:	83 ec 08             	sub    esp,0x8
c000c564:	6a 01                	push   0x1
c000c566:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c56d:	e8 de bb ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000c572:	83 c4 10             	add    esp,0x10
c000c575:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000c57c:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000c584:	75 16                	jne    c000c59c <ACPI::open(int, int, void*)+0x10c>
c000c586:	83 ec 0c             	sub    esp,0xc
c000c589:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c590:	e8 19 bc ff ff       	call   c00081ae <File::close()>
c000c595:	83 c4 10             	add    esp,0x10
c000c598:	eb 0a                	jmp    c000c5a4 <ACPI::open(int, int, void*)+0x114>
c000c59a:	66 90                	xchg   ax,ax
c000c59c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000c5a4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000c5ac:	74 1e                	je     c000c5cc <ACPI::open(int, int, void*)+0x13c>
c000c5ae:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000c5b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5b7:	83 c0 08             	add    eax,0x8
c000c5ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5bc:	83 ec 0c             	sub    esp,0xc
c000c5bf:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c5c6:	ff d0                	call   eax
c000c5c8:	83 c4 10             	add    esp,0x10
c000c5cb:	90                   	nop
c000c5cc:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000c5d3:	83 f0 01             	xor    eax,0x1
c000c5d6:	0f b6 c0             	movzx  eax,al
c000c5d9:	85 c0                	test   eax,eax
c000c5db:	74 2f                	je     c000c60c <ACPI::open(int, int, void*)+0x17c>
c000c5dd:	83 ec 0c             	sub    esp,0xc
c000c5e0:	68 b9 2e 02 c0       	push   0xc0022eb9
c000c5e5:	e8 fd 04 00 00       	call   c000cae7 <KeSetBootMessage(char const*)>
c000c5ea:	83 c4 10             	add    esp,0x10
c000c5ed:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000c5f8:	83 ec 0c             	sub    esp,0xc
c000c5fb:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000c602:	e8 81 68 00 00       	call   c0012e88 <Virt::setupPageSwapping(int)>
c000c607:	83 c4 10             	add    esp,0x10
c000c60a:	66 90                	xchg   ax,ax
c000c60c:	83 ec 0c             	sub    esp,0xc
c000c60f:	68 d4 2e 02 c0       	push   0xc0022ed4
c000c614:	e8 ce 04 00 00       	call   c000cae7 <KeSetBootMessage(char const*)>
c000c619:	83 c4 10             	add    esp,0x10
c000c61c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000c623:	83 ec 08             	sub    esp,0x8
c000c626:	6a 13                	push   0x13
c000c628:	50                   	push   eax
c000c629:	e8 b0 cf ff ff       	call   c00095de <getDevicesOfType(DeviceType)>
c000c62e:	83 c4 0c             	add    esp,0xc
c000c631:	8d 76 00             	lea    esi,[esi+0x0]
c000c634:	83 ec 0c             	sub    esp,0xc
c000c637:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c63e:	50                   	push   eax
c000c63f:	e8 18 4d 01 00       	call   c002135c <LinkedList<Device>::isEmpty()>
c000c644:	83 c4 10             	add    esp,0x10
c000c647:	83 f0 01             	xor    eax,0x1
c000c64a:	0f b6 c0             	movzx  eax,al
c000c64d:	85 c0                	test   eax,eax
c000c64f:	0f 84 47 01 00 00    	je     c000c79c <ACPI::open(int, int, void*)+0x30c>
c000c655:	83 ec 0c             	sub    esp,0xc
c000c658:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c65f:	50                   	push   eax
c000c660:	e8 13 4d 01 00       	call   c0021378 <LinkedList<Device>::getFirstElement()>
c000c665:	83 c4 10             	add    esp,0x10
c000c668:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000c66f:	83 ec 0c             	sub    esp,0xc
c000c672:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c679:	50                   	push   eax
c000c67a:	e8 01 4d 01 00       	call   c0021380 <LinkedList<Device>::removeFirst()>
c000c67f:	83 c4 10             	add    esp,0x10
c000c682:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000c689:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000c690:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000c697:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000c69b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000c6a1:	ba 09 00 00 00       	mov    edx,0x9
c000c6a6:	fc                   	cld    
c000c6a7:	89 c7                	mov    edi,eax
c000c6a9:	89 de                	mov    esi,ebx
c000c6ab:	89 d1                	mov    ecx,edx
c000c6ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c6af:	83 ec 08             	sub    esp,0x8
c000c6b2:	8d 44 24 38          	lea    eax,[esp+0x38]
c000c6b6:	50                   	push   eax
c000c6b7:	83 ec 24             	sub    esp,0x24
c000c6ba:	89 e0                	mov    eax,esp
c000c6bc:	89 c3                	mov    ebx,eax
c000c6be:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000c6c2:	ba 09 00 00 00       	mov    edx,0x9
c000c6c7:	89 df                	mov    edi,ebx
c000c6c9:	89 c6                	mov    esi,eax
c000c6cb:	89 d1                	mov    ecx,edx
c000c6cd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c6cf:	e8 7a 08 01 00       	call   c001cf4e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c6d4:	83 c4 30             	add    esp,0x30
c000c6d7:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000c6de:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000c6e6:	0f 84 48 ff ff ff    	je     c000c634 <ACPI::open(int, int, void*)+0x1a4>
c000c6ec:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000c6f7:	83 ec 0c             	sub    esp,0xc
c000c6fa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000c701:	e8 19 2e 00 00       	call   c000f51f <malloc>
c000c706:	83 c4 10             	add    esp,0x10
c000c709:	89 c3                	mov    ebx,eax
c000c70b:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c000c710:	83 ec 04             	sub    esp,0x4
c000c713:	50                   	push   eax
c000c714:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c71b:	53                   	push   ebx
c000c71c:	e8 11 ba ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c721:	83 c4 10             	add    esp,0x10
c000c724:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000c72b:	83 ec 0c             	sub    esp,0xc
c000c72e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c735:	e8 da bc ff ff       	call   c0008414 <File::exists()>
c000c73a:	83 c4 10             	add    esp,0x10
c000c73d:	0f b6 c0             	movzx  eax,al
c000c740:	85 c0                	test   eax,eax
c000c742:	74 28                	je     c000c76c <ACPI::open(int, int, void*)+0x2dc>
c000c744:	83 ec 08             	sub    esp,0x8
c000c747:	6a 01                	push   0x1
c000c749:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c750:	e8 0f 92 00 00       	call   c0015964 <Thr::loadDLL(char const*, bool)>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	83 ec 08             	sub    esp,0x8
c000c75b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c762:	50                   	push   eax
c000c763:	e8 4e 94 00 00       	call   c0015bb6 <Thr::executeDLL(unsigned long, void*)>
c000c768:	83 c4 10             	add    esp,0x10
c000c76b:	90                   	nop
c000c76c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000c774:	0f 84 ba fe ff ff    	je     c000c634 <ACPI::open(int, int, void*)+0x1a4>
c000c77a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000c781:	8b 00                	mov    eax,DWORD PTR [eax]
c000c783:	83 c0 08             	add    eax,0x8
c000c786:	8b 00                	mov    eax,DWORD PTR [eax]
c000c788:	83 ec 0c             	sub    esp,0xc
c000c78b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c792:	ff d0                	call   eax
c000c794:	83 c4 10             	add    esp,0x10
c000c797:	e9 98 fe ff ff       	jmp    c000c634 <ACPI::open(int, int, void*)+0x1a4>
c000c79c:	83 ec 0c             	sub    esp,0xc
c000c79f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c7a6:	50                   	push   eax
c000c7a7:	e8 ac 4b 01 00       	call   c0021358 <LinkedList<Device>::~LinkedList()>
c000c7ac:	83 c4 10             	add    esp,0x10
c000c7af:	8b 1d d0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0d0
c000c7b5:	83 ec 08             	sub    esp,0x8
c000c7b8:	6a 01                	push   0x1
c000c7ba:	68 ee 2e 02 c0       	push   0xc0022eee
c000c7bf:	e8 a0 91 00 00       	call   c0015964 <Thr::loadDLL(char const*, bool)>
c000c7c4:	83 c4 10             	add    esp,0x10
c000c7c7:	83 ec 08             	sub    esp,0x8
c000c7ca:	53                   	push   ebx
c000c7cb:	50                   	push   eax
c000c7cc:	e8 e5 93 00 00       	call   c0015bb6 <Thr::executeDLL(unsigned long, void*)>
c000c7d1:	83 c4 10             	add    esp,0x10
c000c7d4:	a1 84 ad 02 c0       	mov    eax,ds:0xc002ad84
c000c7d9:	85 c0                	test   eax,eax
c000c7db:	0f 84 27 01 00 00    	je     c000c908 <ACPI::open(int, int, void*)+0x478>
c000c7e1:	a1 88 ad 02 c0       	mov    eax,ds:0xc002ad88
c000c7e6:	85 c0                	test   eax,eax
c000c7e8:	0f 84 1a 01 00 00    	je     c000c908 <ACPI::open(int, int, void*)+0x478>
c000c7ee:	83 ec 0c             	sub    esp,0xc
c000c7f1:	68 0b 2f 02 c0       	push   0xc0022f0b
c000c7f6:	e8 ec 02 00 00       	call   c000cae7 <KeSetBootMessage(char const*)>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000c809:	83 ec 0c             	sub    esp,0xc
c000c80c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000c813:	e8 07 2d 00 00       	call   c000f51f <malloc>
c000c818:	83 c4 10             	add    esp,0x10
c000c81b:	89 c3                	mov    ebx,eax
c000c81d:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c000c822:	83 ec 04             	sub    esp,0x4
c000c825:	50                   	push   eax
c000c826:	68 28 2f 02 c0       	push   0xc0022f28
c000c82b:	53                   	push   ebx
c000c82c:	e8 01 b9 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c831:	83 c4 10             	add    esp,0x10
c000c834:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000c83b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c843:	74 1f                	je     c000c864 <ACPI::open(int, int, void*)+0x3d4>
c000c845:	83 ec 0c             	sub    esp,0xc
c000c848:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c84f:	e8 c0 bb ff ff       	call   c0008414 <File::exists()>
c000c854:	83 c4 10             	add    esp,0x10
c000c857:	0f b6 c0             	movzx  eax,al
c000c85a:	85 c0                	test   eax,eax
c000c85c:	74 06                	je     c000c864 <ACPI::open(int, int, void*)+0x3d4>
c000c85e:	b0 01                	mov    al,0x1
c000c860:	eb 06                	jmp    c000c868 <ACPI::open(int, int, void*)+0x3d8>
c000c862:	66 90                	xchg   ax,ax
c000c864:	b0 00                	mov    al,0x0
c000c866:	66 90                	xchg   ax,ax
c000c868:	0f b6 c0             	movzx  eax,al
c000c86b:	85 c0                	test   eax,eax
c000c86d:	74 25                	je     c000c894 <ACPI::open(int, int, void*)+0x404>
c000c86f:	83 ec 08             	sub    esp,0x8
c000c872:	6a 01                	push   0x1
c000c874:	68 28 2f 02 c0       	push   0xc0022f28
c000c879:	e8 e6 90 00 00       	call   c0015964 <Thr::loadDLL(char const*, bool)>
c000c87e:	83 c4 10             	add    esp,0x10
c000c881:	83 ec 08             	sub    esp,0x8
c000c884:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000c88b:	50                   	push   eax
c000c88c:	e8 25 93 00 00       	call   c0015bb6 <Thr::executeDLL(unsigned long, void*)>
c000c891:	83 c4 10             	add    esp,0x10
c000c894:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c89c:	74 2a                	je     c000c8c8 <ACPI::open(int, int, void*)+0x438>
c000c89e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c8a6:	74 20                	je     c000c8c8 <ACPI::open(int, int, void*)+0x438>
c000c8a8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000c8af:	8b 00                	mov    eax,DWORD PTR [eax]
c000c8b1:	83 c0 08             	add    eax,0x8
c000c8b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c8b6:	83 ec 0c             	sub    esp,0xc
c000c8b9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c8c0:	ff d0                	call   eax
c000c8c2:	83 c4 10             	add    esp,0x10
c000c8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000c8c8:	a1 84 ad 02 c0       	mov    eax,ds:0xc002ad84
c000c8cd:	83 ec 08             	sub    esp,0x8
c000c8d0:	68 45 2f 02 c0       	push   0xc0022f45
c000c8d5:	50                   	push   eax
c000c8d6:	e8 a1 f2 ff ff       	call   c000bb7c <findDataTable(unsigned char*, char*)>
c000c8db:	83 c4 10             	add    esp,0x10
c000c8de:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000c8e5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000c8ed:	74 19                	je     c000c908 <ACPI::open(int, int, void*)+0x478>
c000c8ef:	83 ec 08             	sub    esp,0x8
c000c8f2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c8f9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c900:	e8 73 fb ff ff       	call   c000c478 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c905:	83 c4 10             	add    esp,0x10
c000c908:	b8 00 00 00 00       	mov    eax,0x0
c000c90d:	81 c4 70 01 00 00    	add    esp,0x170
c000c913:	5b                   	pop    ebx
c000c914:	5e                   	pop    esi
c000c915:	5f                   	pop    edi
c000c916:	c3                   	ret    
c000c917:	90                   	nop

c000c918 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000c918:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000c91e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000c925:	89 c2                	mov    edx,eax
c000c927:	c1 fa 1f             	sar    edx,0x1f
c000c92a:	83 ec 04             	sub    esp,0x4
c000c92d:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000c931:	51                   	push   ecx
c000c932:	52                   	push   edx
c000c933:	50                   	push   eax
c000c934:	e8 db 29 00 00       	call   c000f314 <KeItoa(long long, char*)>
c000c939:	83 c4 10             	add    esp,0x10
c000c93c:	83 ec 08             	sub    esp,0x8
c000c93f:	68 f0 2f 02 c0       	push   0xc0022ff0
c000c944:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c948:	50                   	push   eax
c000c949:	e8 f2 3c ff ff       	call   c0000640 <strcpy>
c000c94e:	83 c4 10             	add    esp,0x10
c000c951:	83 ec 08             	sub    esp,0x8
c000c954:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000c95b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c95f:	50                   	push   eax
c000c960:	e8 db 3e ff ff       	call   c0000840 <strcat>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	83 ec 08             	sub    esp,0x8
c000c96b:	68 fe 2f 02 c0       	push   0xc0022ffe
c000c970:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c974:	50                   	push   eax
c000c975:	e8 c6 3e ff ff       	call   c0000840 <strcat>
c000c97a:	83 c4 10             	add    esp,0x10
c000c97d:	83 ec 08             	sub    esp,0x8
c000c980:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000c987:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c98b:	50                   	push   eax
c000c98c:	e8 af 3e ff ff       	call   c0000840 <strcat>
c000c991:	83 c4 10             	add    esp,0x10
c000c994:	83 ec 08             	sub    esp,0x8
c000c997:	68 01 30 02 c0       	push   0xc0023001
c000c99c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c9a0:	50                   	push   eax
c000c9a1:	e8 9a 3e ff ff       	call   c0000840 <strcat>
c000c9a6:	83 c4 10             	add    esp,0x10
c000c9a9:	83 ec 08             	sub    esp,0x8
c000c9ac:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000c9b3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c9b7:	50                   	push   eax
c000c9b8:	e8 83 3e ff ff       	call   c0000840 <strcat>
c000c9bd:	83 c4 10             	add    esp,0x10
c000c9c0:	83 ec 08             	sub    esp,0x8
c000c9c3:	68 01 30 02 c0       	push   0xc0023001
c000c9c8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c9cc:	50                   	push   eax
c000c9cd:	e8 6e 3e ff ff       	call   c0000840 <strcat>
c000c9d2:	83 c4 10             	add    esp,0x10
c000c9d5:	83 ec 08             	sub    esp,0x8
c000c9d8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c9dc:	50                   	push   eax
c000c9dd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c9e1:	50                   	push   eax
c000c9e2:	e8 59 3e ff ff       	call   c0000840 <strcat>
c000c9e7:	83 c4 10             	add    esp,0x10
c000c9ea:	83 ec 0c             	sub    esp,0xc
c000c9ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c9f1:	50                   	push   eax
c000c9f2:	e8 6f 2e 00 00       	call   c000f866 <KePanic(char const*)>
c000c9f7:	83 c4 10             	add    esp,0x10
c000c9fa:	90                   	nop
c000c9fb:	81 c4 2c 02 00 00    	add    esp,0x22c
c000ca01:	c3                   	ret    

c000ca02 <KeInitialiseAtexit()>:
c000ca02:	83 ec 10             	sub    esp,0x10
c000ca05:	c7 05 e0 af 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002afe0,0x0
c000ca0f:	6a 60                	push   0x60
c000ca11:	6a 00                	push   0x0
c000ca13:	68 60 b0 02 c0       	push   0xc002b060
c000ca18:	e8 d3 3a ff ff       	call   c00004f0 <memset>
c000ca1d:	83 c4 1c             	add    esp,0x1c
c000ca20:	c3                   	ret    

c000ca21 <KeRegisterAtexit(void (*)(void*), void*)>:
c000ca21:	a1 e0 af 02 c0       	mov    eax,ds:0xc002afe0
c000ca26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca2a:	89 14 85 60 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4fa0],edx
c000ca31:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca35:	89 14 85 00 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5000],edx
c000ca3c:	40                   	inc    eax
c000ca3d:	a3 e0 af 02 c0       	mov    ds:0xc002afe0,eax
c000ca42:	83 f8 17             	cmp    eax,0x17
c000ca45:	7e 0d                	jle    c000ca54 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000ca47:	c7 44 24 04 03 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023003
c000ca4f:	e9 12 2e 00 00       	jmp    c000f866 <KePanic(char const*)>
c000ca54:	c3                   	ret    

c000ca55 <KeExecuteAtexit()>:
c000ca55:	53                   	push   ebx
c000ca56:	31 db                	xor    ebx,ebx
c000ca58:	83 ec 08             	sub    esp,0x8
c000ca5b:	39 1d e0 af 02 c0    	cmp    DWORD PTR ds:0xc002afe0,ebx
c000ca61:	7e 50                	jle    c000cab3 <KeExecuteAtexit()+0x5e>
c000ca63:	8b 04 9d 60 b0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4fa0]
c000ca6a:	85 c0                	test   eax,eax
c000ca6c:	74 42                	je     c000cab0 <KeExecuteAtexit()+0x5b>
c000ca6e:	51                   	push   ecx
c000ca6f:	50                   	push   eax
c000ca70:	53                   	push   ebx
c000ca71:	68 1c 30 02 c0       	push   0xc002301c
c000ca76:	e8 e9 a4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ca7b:	58                   	pop    eax
c000ca7c:	ff 34 9d 00 b0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5000]
c000ca83:	ff 14 9d 60 b0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd4fa0]
c000ca8a:	c7 04 24 3e 30 02 c0 	mov    DWORD PTR [esp],0xc002303e
c000ca91:	e8 ce a4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ca96:	c7 04 24 cf 33 02 c0 	mov    DWORD PTR [esp],0xc00233cf
c000ca9d:	c7 04 9d 60 b0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd4fa0],0x0
c000caa8:	e8 b7 a4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000caad:	83 c4 10             	add    esp,0x10
c000cab0:	43                   	inc    ebx
c000cab1:	eb a8                	jmp    c000ca5b <KeExecuteAtexit()+0x6>
c000cab3:	83 c4 08             	add    esp,0x8
c000cab6:	5b                   	pop    ebx
c000cab7:	c3                   	ret    

c000cab8 <KeDisplaySplashScreen()>:
c000cab8:	53                   	push   ebx
c000cab9:	bb 01 00 00 00       	mov    ebx,0x1
c000cabe:	83 ec 08             	sub    esp,0x8
c000cac1:	43                   	inc    ebx
c000cac2:	0f be 83 41 30 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdcfbf]
c000cac9:	85 c0                	test   eax,eax
c000cacb:	74 15                	je     c000cae2 <KeDisplaySplashScreen()+0x2a>
c000cacd:	83 ec 0c             	sub    esp,0xc
c000cad0:	6a 01                	push   0x1
c000cad2:	53                   	push   ebx
c000cad3:	6a 00                	push   0x0
c000cad5:	6a 0f                	push   0xf
c000cad7:	50                   	push   eax
c000cad8:	e8 67 db 00 00       	call   c001a644 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000cadd:	83 c4 20             	add    esp,0x20
c000cae0:	eb df                	jmp    c000cac1 <KeDisplaySplashScreen()+0x9>
c000cae2:	83 c4 08             	add    esp,0x8
c000cae5:	5b                   	pop    ebx
c000cae6:	c3                   	ret    

c000cae7 <KeSetBootMessage(char const*)>:
c000cae7:	57                   	push   edi
c000cae8:	56                   	push   esi
c000cae9:	53                   	push   ebx
c000caea:	81 ec a4 00 00 00    	sub    esp,0xa4
c000caf0:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000caf7:	68 9e 00 00 00       	push   0x9e
c000cafc:	6a 00                	push   0x0
c000cafe:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000cb02:	56                   	push   esi
c000cb03:	e8 e8 39 ff ff       	call   c00004f0 <memset>
c000cb08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cb0b:	e8 60 3a ff ff       	call   c0000570 <strlen>
c000cb10:	ba 50 00 00 00       	mov    edx,0x50
c000cb15:	83 c4 10             	add    esp,0x10
c000cb18:	29 c2                	sub    edx,eax
c000cb1a:	31 c9                	xor    ecx,ecx
c000cb1c:	83 e2 fe             	and    edx,0xfffffffe
c000cb1f:	01 f2                	add    edx,esi
c000cb21:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000cb26:	84 c0                	test   al,al
c000cb28:	74 0a                	je     c000cb34 <KeSetBootMessage(char const*)+0x4d>
c000cb2a:	80 cc 07             	or     ah,0x7
c000cb2d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000cb31:	41                   	inc    ecx
c000cb32:	eb ed                	jmp    c000cb21 <KeSetBootMessage(char const*)+0x3a>
c000cb34:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000cb39:	b9 9e 00 00 00       	mov    ecx,0x9e
c000cb3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb40:	50                   	push   eax
c000cb41:	50                   	push   eax
c000cb42:	53                   	push   ebx
c000cb43:	68 56 30 02 c0       	push   0xc0023056
c000cb48:	e8 17 a4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000cb4d:	81 c4 b0 00 00 00    	add    esp,0xb0
c000cb53:	5b                   	pop    ebx
c000cb54:	5e                   	pop    esi
c000cb55:	5f                   	pop    edi
c000cb56:	c3                   	ret    

c000cb57 <__cxa_atexit>:
c000cb57:	31 c0                	xor    eax,eax
c000cb59:	c3                   	ret    

c000cb5a <__cxa_finalize>:
c000cb5a:	c3                   	ret    

c000cb5b <__stack_chk_fail>:
c000cb5b:	55                   	push   ebp
c000cb5c:	89 e5                	mov    ebp,esp
c000cb5e:	83 ec 10             	sub    esp,0x10
c000cb61:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb64:	68 64 30 02 c0       	push   0xc0023064
c000cb69:	e8 f6 a3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000cb6e:	58                   	pop    eax
c000cb6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb72:	5a                   	pop    edx
c000cb73:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cb76:	68 64 30 02 c0       	push   0xc0023064
c000cb7b:	e8 e4 a3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000cb80:	c7 04 24 6c 30 02 c0 	mov    DWORD PTR [esp],0xc002306c
c000cb87:	e8 da 2c 00 00       	call   c000f866 <KePanic(char const*)>
c000cb8c:	83 c4 10             	add    esp,0x10
c000cb8f:	c9                   	leave  
c000cb90:	c3                   	ret    

c000cb91 <__cxa_pure_virtual>:
c000cb91:	83 ec 18             	sub    esp,0x18
c000cb94:	68 84 30 02 c0       	push   0xc0023084
c000cb99:	e8 c8 2c 00 00       	call   c000f866 <KePanic(char const*)>
c000cb9e:	83 c4 1c             	add    esp,0x1c
c000cba1:	c3                   	ret    

c000cba2 <operator new[](unsigned long)>:
c000cba2:	e9 78 29 00 00       	jmp    c000f51f <malloc>

c000cba7 <operator delete(void*, unsigned long)>:
c000cba7:	e9 93 29 00 00       	jmp    c000f53f <rfree>

c000cbac <operator delete[](void*)>:
c000cbac:	e9 8e 29 00 00       	jmp    c000f53f <rfree>

c000cbb1 <operator delete[](void*, unsigned long)>:
c000cbb1:	e9 89 29 00 00       	jmp    c000f53f <rfree>
c000cbb6:	66 90                	xchg   ax,ax

c000cbb8 <CUnlockScheduler>:
c000cbb8:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000cbc0:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000cbc5:	85 c0                	test   eax,eax
c000cbc7:	75 03                	jne    c000cbcc <CUnlockScheduler+0x14>
c000cbc9:	fb                   	sti    
c000cbca:	66 90                	xchg   ax,ax
c000cbcc:	90                   	nop
c000cbcd:	c3                   	ret    
c000cbce:	66 90                	xchg   ax,ax

c000cbd0 <CLockScheduler>:
c000cbd0:	fa                   	cli    
c000cbd1:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000cbd6:	83 c0 01             	add    eax,0x1
c000cbd9:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c000cbde:	90                   	nop
c000cbdf:	c3                   	ret    

c000cbe0 <CPrintf>:
c000cbe0:	83 ec 0c             	sub    esp,0xc
c000cbe3:	83 ec 08             	sub    esp,0x8
c000cbe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbea:	68 97 30 02 c0       	push   0xc0023097
c000cbef:	e8 70 a3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	90                   	nop
c000cbf8:	83 c4 0c             	add    esp,0xc
c000cbfb:	c3                   	ret    

c000cbfc <CmOpen(char const*)>:
c000cbfc:	57                   	push   edi
c000cbfd:	56                   	push   esi
c000cbfe:	53                   	push   ebx
c000cbff:	83 ec 1c             	sub    esp,0x1c
c000cc02:	6a 30                	push   0x30
c000cc04:	e8 16 29 00 00       	call   c000f51f <malloc>
c000cc09:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000cc10:	89 c3                	mov    ebx,eax
c000cc12:	e8 08 29 00 00       	call   c000f51f <malloc>
c000cc17:	83 c4 0c             	add    esp,0xc
c000cc1a:	89 c6                	mov    esi,eax
c000cc1c:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c000cc22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000cc26:	50                   	push   eax
c000cc27:	e8 06 b5 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000cc2c:	83 c4 0c             	add    esp,0xc
c000cc2f:	89 33                	mov    DWORD PTR [ebx],esi
c000cc31:	8d 44 24 07          	lea    eax,[esp+0x7]
c000cc35:	50                   	push   eax
c000cc36:	8d 44 24 10          	lea    eax,[esp+0x10]
c000cc3a:	50                   	push   eax
c000cc3b:	56                   	push   esi
c000cc3c:	e8 11 b8 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000cc41:	5a                   	pop    edx
c000cc42:	59                   	pop    ecx
c000cc43:	6a 01                	push   0x1
c000cc45:	ff 33                	push   DWORD PTR [ebx]
c000cc47:	e8 04 b5 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000cc4c:	5e                   	pop    esi
c000cc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc51:	e8 c9 28 00 00       	call   c000f51f <malloc>
c000cc56:	5a                   	pop    edx
c000cc57:	89 c7                	mov    edi,eax
c000cc59:	8d 74 24 10          	lea    esi,[esp+0x10]
c000cc5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cc5f:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc61:	56                   	push   esi
c000cc62:	57                   	push   edi
c000cc63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cc67:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cc6b:	50                   	push   eax
c000cc6c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc6f:	83 c4 14             	add    esp,0x14
c000cc72:	ff 33                	push   DWORD PTR [ebx]
c000cc74:	e8 35 b5 ff ff       	call   c00081ae <File::close()>
c000cc79:	59                   	pop    ecx
c000cc7a:	58                   	pop    eax
c000cc7b:	6a 13                	push   0x13
c000cc7d:	ff 33                	push   DWORD PTR [ebx]
c000cc7f:	e8 cc b4 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000cc84:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cc86:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc88:	89 34 24             	mov    DWORD PTR [esp],esi
c000cc8b:	57                   	push   edi
c000cc8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cc90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cc94:	50                   	push   eax
c000cc95:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cc98:	83 c4 14             	add    esp,0x14
c000cc9b:	57                   	push   edi
c000cc9c:	e8 8e 28 00 00       	call   c000f52f <free>
c000cca1:	83 c4 10             	add    esp,0x10
c000cca4:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cca7:	75 10                	jne    c000ccb9 <CmOpen(char const*)+0xbd>
c000cca9:	83 ec 0c             	sub    esp,0xc
c000ccac:	68 9a 30 02 c0       	push   0xc002309a
c000ccb1:	e8 b0 2b 00 00       	call   c000f866 <KePanic(char const*)>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	8d 7b 05             	lea    edi,[ebx+0x5]
c000ccbc:	50                   	push   eax
c000ccbd:	6a 00                	push   0x0
c000ccbf:	6a 00                	push   0x0
c000ccc1:	ff 33                	push   DWORD PTR [ebx]
c000ccc3:	e8 46 b5 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000ccc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ccca:	8b 10                	mov    edx,DWORD PTR [eax]
c000cccc:	89 34 24             	mov    DWORD PTR [esp],esi
c000cccf:	57                   	push   edi
c000ccd0:	6a 00                	push   0x0
c000ccd2:	6a 2b                	push   0x2b
c000ccd4:	50                   	push   eax
c000ccd5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ccd8:	83 c4 1c             	add    esp,0x1c
c000ccdb:	6a 00                	push   0x0
c000ccdd:	6a 00                	push   0x0
c000ccdf:	ff 33                	push   DWORD PTR [ebx]
c000cce1:	e8 28 b5 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cce6:	83 c4 0c             	add    esp,0xc
c000cce9:	6a 08                	push   0x8
c000cceb:	68 ab 30 02 c0       	push   0xc00230ab
c000ccf0:	57                   	push   edi
c000ccf1:	e8 8a 36 ff ff       	call   c0000380 <memcmp>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	85 c0                	test   eax,eax
c000ccfb:	74 10                	je     c000cd0d <CmOpen(char const*)+0x111>
c000ccfd:	83 ec 0c             	sub    esp,0xc
c000cd00:	68 b4 30 02 c0       	push   0xc00230b4
c000cd05:	e8 5c 2b 00 00       	call   c000f866 <KePanic(char const*)>
c000cd0a:	83 c4 10             	add    esp,0x10
c000cd0d:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000cd11:	89 d8                	mov    eax,ebx
c000cd13:	83 c4 10             	add    esp,0x10
c000cd16:	5b                   	pop    ebx
c000cd17:	5e                   	pop    esi
c000cd18:	5f                   	pop    edi
c000cd19:	c3                   	ret    

c000cd1a <CmClose(Reghive_Tag*)>:
c000cd1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd1e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000cd22:	74 0b                	je     c000cd2f <CmClose(Reghive_Tag*)+0x15>
c000cd24:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd2a:	e9 7f b4 ff ff       	jmp    c00081ae <File::close()>
c000cd2f:	c3                   	ret    

c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000cd30:	53                   	push   ebx
c000cd31:	83 ec 18             	sub    esp,0x18
c000cd34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cd38:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000cd3c:	74 29                	je     c000cd67 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000cd3e:	50                   	push   eax
c000cd3f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000cd44:	99                   	cdq    
c000cd45:	52                   	push   edx
c000cd46:	50                   	push   eax
c000cd47:	ff 33                	push   DWORD PTR [ebx]
c000cd49:	e8 c0 b4 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cd4e:	5a                   	pop    edx
c000cd4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cd51:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cd55:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd57:	51                   	push   ecx
c000cd58:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000cd5c:	6a 00                	push   0x0
c000cd5e:	6a 2b                	push   0x2b
c000cd60:	50                   	push   eax
c000cd61:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cd64:	83 c4 20             	add    esp,0x20
c000cd67:	83 c4 18             	add    esp,0x18
c000cd6a:	5b                   	pop    ebx
c000cd6b:	c3                   	ret    

c000cd6c <CmGetString(Reghive_Tag*, int, char*)>:
c000cd6c:	55                   	push   ebp
c000cd6d:	57                   	push   edi
c000cd6e:	56                   	push   esi
c000cd6f:	53                   	push   ebx
c000cd70:	31 db                	xor    ebx,ebx
c000cd72:	83 ec 70             	sub    esp,0x70
c000cd75:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000cd7c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000cd80:	50                   	push   eax
c000cd81:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000cd88:	55                   	push   ebp
c000cd89:	e8 a2 ff ff ff       	call   c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd8e:	83 c4 10             	add    esp,0x10
c000cd91:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000cd96:	c1 e0 08             	shl    eax,0x8
c000cd99:	89 c2                	mov    edx,eax
c000cd9b:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000cda0:	09 d0                	or     eax,edx
c000cda2:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000cda7:	c1 e0 08             	shl    eax,0x8
c000cdaa:	09 d0                	or     eax,edx
c000cdac:	74 25                	je     c000cdd3 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000cdae:	6b fb 0d             	imul   edi,ebx,0xd
c000cdb1:	52                   	push   edx
c000cdb2:	8d 54 24 39          	lea    edx,[esp+0x39]
c000cdb6:	52                   	push   edx
c000cdb7:	50                   	push   eax
c000cdb8:	55                   	push   ebp
c000cdb9:	e8 72 ff ff ff       	call   c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cdbe:	8d 74 24 49          	lea    esi,[esp+0x49]
c000cdc2:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000cdc9:	b9 27 00 00 00       	mov    ecx,0x27
c000cdce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cdd0:	83 c4 10             	add    esp,0x10
c000cdd3:	83 c3 03             	add    ebx,0x3
c000cdd6:	83 fb 15             	cmp    ebx,0x15
c000cdd9:	75 b6                	jne    c000cd91 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000cddb:	83 c4 6c             	add    esp,0x6c
c000cdde:	5b                   	pop    ebx
c000cddf:	5e                   	pop    esi
c000cde0:	5f                   	pop    edi
c000cde1:	5d                   	pop    ebp
c000cde2:	c3                   	ret    

c000cde3 <CmEnterDirectory(Reghive_Tag*, int)>:
c000cde3:	83 ec 40             	sub    esp,0x40
c000cde6:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cdea:	50                   	push   eax
c000cdeb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cdef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cdf3:	e8 38 ff ff ff       	call   c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cdf8:	83 c4 10             	add    esp,0x10
c000cdfb:	83 c8 ff             	or     eax,0xffffffff
c000cdfe:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000ce03:	75 19                	jne    c000ce1e <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000ce05:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000ce0a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce0f:	c1 e0 08             	shl    eax,0x8
c000ce12:	09 c2                	or     edx,eax
c000ce14:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000ce19:	c1 e0 10             	shl    eax,0x10
c000ce1c:	09 d0                	or     eax,edx
c000ce1e:	83 c4 3c             	add    esp,0x3c
c000ce21:	c3                   	ret    

c000ce22 <CmGetNext(Reghive_Tag*, int)>:
c000ce22:	83 ec 40             	sub    esp,0x40
c000ce25:	8d 44 24 09          	lea    eax,[esp+0x9]
c000ce29:	50                   	push   eax
c000ce2a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce2e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce32:	e8 f9 fe ff ff       	call   c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce37:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000ce3c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000ce41:	c1 e0 08             	shl    eax,0x8
c000ce44:	09 c2                	or     edx,eax
c000ce46:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000ce4b:	83 c4 4c             	add    esp,0x4c
c000ce4e:	c1 e0 10             	shl    eax,0x10
c000ce51:	09 d0                	or     eax,edx
c000ce53:	c3                   	ret    

c000ce54 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000ce54:	53                   	push   ebx
c000ce55:	83 ec 18             	sub    esp,0x18
c000ce58:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ce5c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ce60:	74 29                	je     c000ce8b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000ce62:	50                   	push   eax
c000ce63:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000ce68:	99                   	cdq    
c000ce69:	52                   	push   edx
c000ce6a:	50                   	push   eax
c000ce6b:	ff 33                	push   DWORD PTR [ebx]
c000ce6d:	e8 9c b3 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000ce72:	5a                   	pop    edx
c000ce73:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce75:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000ce79:	8b 10                	mov    edx,DWORD PTR [eax]
c000ce7b:	51                   	push   ecx
c000ce7c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ce80:	6a 00                	push   0x0
c000ce82:	6a 2b                	push   0x2b
c000ce84:	50                   	push   eax
c000ce85:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ce88:	83 c4 20             	add    esp,0x20
c000ce8b:	83 c4 18             	add    esp,0x18
c000ce8e:	5b                   	pop    ebx
c000ce8f:	c3                   	ret    

c000ce90 <CmFreeExtent(Reghive_Tag*, int)>:
c000ce90:	53                   	push   ebx
c000ce91:	83 ec 3c             	sub    esp,0x3c
c000ce94:	6a 2b                	push   0x2b
c000ce96:	6a 00                	push   0x0
c000ce98:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ce9c:	53                   	push   ebx
c000ce9d:	e8 4e 36 ff ff       	call   c00004f0 <memset>
c000cea2:	83 c4 0c             	add    esp,0xc
c000cea5:	53                   	push   ebx
c000cea6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ceaa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ceae:	e8 a1 ff ff ff       	call   c000ce54 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ceb3:	83 c4 48             	add    esp,0x48
c000ceb6:	5b                   	pop    ebx
c000ceb7:	c3                   	ret    

c000ceb8 <CmUpdateHeader(Reghive_Tag*)>:
c000ceb8:	83 ec 0c             	sub    esp,0xc
c000cebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cebf:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000cec3:	74 10                	je     c000ced5 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000cec5:	52                   	push   edx
c000cec6:	8d 50 05             	lea    edx,[eax+0x5]
c000cec9:	52                   	push   edx
c000ceca:	6a 00                	push   0x0
c000cecc:	50                   	push   eax
c000cecd:	e8 82 ff ff ff       	call   c000ce54 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ced2:	83 c4 10             	add    esp,0x10
c000ced5:	83 c4 0c             	add    esp,0xc
c000ced8:	c3                   	ret    

c000ced9 <CmExpand(Reghive_Tag*, int)>:
c000ced9:	57                   	push   edi
c000ceda:	56                   	push   esi
c000cedb:	83 ce ff             	or     esi,0xffffffff
c000cede:	53                   	push   ebx
c000cedf:	83 ec 30             	sub    esp,0x30
c000cee2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000cee6:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ceea:	74 5f                	je     c000cf4b <CmExpand(Reghive_Tag*, int)+0x72>
c000ceec:	31 d2                	xor    edx,edx
c000ceee:	31 f6                	xor    esi,esi
c000cef0:	50                   	push   eax
c000cef1:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000cef5:	52                   	push   edx
c000cef6:	50                   	push   eax
c000cef7:	ff 33                	push   DWORD PTR [ebx]
c000cef9:	e8 10 b3 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cefe:	83 c4 0c             	add    esp,0xc
c000cf01:	6a 2b                	push   0x2b
c000cf03:	6a 00                	push   0x0
c000cf05:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000cf09:	57                   	push   edi
c000cf0a:	e8 e1 35 ff ff       	call   c00004f0 <memset>
c000cf0f:	83 c4 10             	add    esp,0x10
c000cf12:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000cf16:	7d 1b                	jge    c000cf33 <CmExpand(Reghive_Tag*, int)+0x5a>
c000cf18:	83 ec 0c             	sub    esp,0xc
c000cf1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cf1d:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000cf21:	8b 10                	mov    edx,DWORD PTR [eax]
c000cf23:	46                   	inc    esi
c000cf24:	51                   	push   ecx
c000cf25:	57                   	push   edi
c000cf26:	6a 00                	push   0x0
c000cf28:	6a 2b                	push   0x2b
c000cf2a:	50                   	push   eax
c000cf2b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cf2e:	83 c4 20             	add    esp,0x20
c000cf31:	eb df                	jmp    c000cf12 <CmExpand(Reghive_Tag*, int)+0x39>
c000cf33:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000cf37:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000cf3a:	83 ec 0c             	sub    esp,0xc
c000cf3d:	01 f2                	add    edx,esi
c000cf3f:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000cf42:	53                   	push   ebx
c000cf43:	e8 70 ff ff ff       	call   c000ceb8 <CmUpdateHeader(Reghive_Tag*)>
c000cf48:	83 c4 10             	add    esp,0x10
c000cf4b:	83 c4 30             	add    esp,0x30
c000cf4e:	89 f0                	mov    eax,esi
c000cf50:	5b                   	pop    ebx
c000cf51:	5e                   	pop    esi
c000cf52:	5f                   	pop    edi
c000cf53:	c3                   	ret    

c000cf54 <CmFindUnusedExtent(Reghive_Tag*)>:
c000cf54:	55                   	push   ebp
c000cf55:	57                   	push   edi
c000cf56:	56                   	push   esi
c000cf57:	53                   	push   ebx
c000cf58:	83 cb ff             	or     ebx,0xffffffff
c000cf5b:	83 ec 1c             	sub    esp,0x1c
c000cf5e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cf62:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000cf66:	74 68                	je     c000cfd0 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cf68:	be 2b 00 00 00       	mov    esi,0x2b
c000cf6d:	51                   	push   ecx
c000cf6e:	31 ff                	xor    edi,edi
c000cf70:	6a 00                	push   0x0
c000cf72:	31 db                	xor    ebx,ebx
c000cf74:	6a 00                	push   0x0
c000cf76:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cf79:	e8 90 b2 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cf7e:	83 c4 10             	add    esp,0x10
c000cf81:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000cf84:	76 3b                	jbe    c000cfc1 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000cf86:	83 ec 0c             	sub    esp,0xc
c000cf89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf8c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cf90:	8b 10                	mov    edx,DWORD PTR [eax]
c000cf92:	51                   	push   ecx
c000cf93:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000cf97:	51                   	push   ecx
c000cf98:	6a 00                	push   0x0
c000cf9a:	6a 01                	push   0x1
c000cf9c:	50                   	push   eax
c000cf9d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cfa0:	83 c4 20             	add    esp,0x20
c000cfa3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000cfa8:	74 26                	je     c000cfd0 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cfaa:	43                   	inc    ebx
c000cfab:	52                   	push   edx
c000cfac:	57                   	push   edi
c000cfad:	56                   	push   esi
c000cfae:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cfb1:	e8 58 b2 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cfb6:	83 c6 2b             	add    esi,0x2b
c000cfb9:	83 d7 00             	adc    edi,0x0
c000cfbc:	83 c4 10             	add    esp,0x10
c000cfbf:	eb c0                	jmp    c000cf81 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000cfc1:	50                   	push   eax
c000cfc2:	50                   	push   eax
c000cfc3:	6a 40                	push   0x40
c000cfc5:	55                   	push   ebp
c000cfc6:	e8 0e ff ff ff       	call   c000ced9 <CmExpand(Reghive_Tag*, int)>
c000cfcb:	83 c4 10             	add    esp,0x10
c000cfce:	89 c3                	mov    ebx,eax
c000cfd0:	83 c4 1c             	add    esp,0x1c
c000cfd3:	89 d8                	mov    eax,ebx
c000cfd5:	5b                   	pop    ebx
c000cfd6:	5e                   	pop    esi
c000cfd7:	5f                   	pop    edi
c000cfd8:	5d                   	pop    ebp
c000cfd9:	c3                   	ret    

c000cfda <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000cfda:	55                   	push   ebp
c000cfdb:	57                   	push   edi
c000cfdc:	56                   	push   esi
c000cfdd:	53                   	push   ebx
c000cfde:	81 ec 88 00 00 00    	sub    esp,0x88
c000cfe4:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000cfeb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cff2:	e8 5d ff ff ff       	call   c000cf54 <CmFindUnusedExtent(Reghive_Tag*)>
c000cff7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cffb:	83 c4 0c             	add    esp,0xc
c000cffe:	6a 2b                	push   0x2b
c000d000:	6a 00                	push   0x0
c000d002:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d006:	55                   	push   ebp
c000d007:	e8 e4 34 ff ff       	call   c00004f0 <memset>
c000d00c:	83 c4 10             	add    esp,0x10
c000d00f:	85 db                	test   ebx,ebx
c000d011:	74 12                	je     c000d025 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d013:	51                   	push   ecx
c000d014:	55                   	push   ebp
c000d015:	53                   	push   ebx
c000d016:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d01d:	e8 0e fd ff ff       	call   c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d022:	83 c4 10             	add    esp,0x10
c000d025:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d029:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d030:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d035:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d037:	85 db                	test   ebx,ebx
c000d039:	74 49                	je     c000d084 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d03b:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d040:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d045:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d049:	c1 e0 08             	shl    eax,0x8
c000d04c:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d052:	09 c8                	or     eax,ecx
c000d054:	74 11                	je     c000d067 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d056:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d05a:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d05e:	c1 e8 10             	shr    eax,0x10
c000d061:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d065:	eb 0f                	jmp    c000d076 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d067:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d06c:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d071:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d076:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d07a:	c1 ea 08             	shr    edx,0x8
c000d07d:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d082:	eb 0f                	jmp    c000d093 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d084:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d089:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d08e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d093:	52                   	push   edx
c000d094:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d098:	50                   	push   eax
c000d099:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d09d:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d0a4:	e8 ab fd ff ff       	call   c000ce54 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d0a9:	83 c4 10             	add    esp,0x10
c000d0ac:	85 db                	test   ebx,ebx
c000d0ae:	74 12                	je     c000d0c2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d0b0:	50                   	push   eax
c000d0b1:	55                   	push   ebp
c000d0b2:	53                   	push   ebx
c000d0b3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d0ba:	e8 95 fd ff ff       	call   c000ce54 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d0bf:	83 c4 10             	add    esp,0x10
c000d0c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d0c6:	83 c4 7c             	add    esp,0x7c
c000d0c9:	5b                   	pop    ebx
c000d0ca:	5e                   	pop    esi
c000d0cb:	5f                   	pop    edi
c000d0cc:	5d                   	pop    ebp
c000d0cd:	c3                   	ret    

c000d0ce <CmSetString(Reghive_Tag*, int, char const*)>:
c000d0ce:	55                   	push   ebp
c000d0cf:	57                   	push   edi
c000d0d0:	56                   	push   esi
c000d0d1:	53                   	push   ebx
c000d0d2:	bb 27 00 00 00       	mov    ebx,0x27
c000d0d7:	81 ec 88 00 00 00    	sub    esp,0x88
c000d0dd:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d0e4:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d0eb:	e8 80 34 ff ff       	call   c0000570 <strlen>
c000d0f0:	8d 48 26             	lea    ecx,[eax+0x26]
c000d0f3:	89 c8                	mov    eax,ecx
c000d0f5:	99                   	cdq    
c000d0f6:	f7 fb                	idiv   ebx
c000d0f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d0fc:	83 c4 10             	add    esp,0x10
c000d0ff:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d105:	7e 10                	jle    c000d117 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d107:	83 ec 0c             	sub    esp,0xc
c000d10a:	68 c5 30 02 c0       	push   0xc00230c5
c000d10f:	e8 52 27 00 00       	call   c000f866 <KePanic(char const*)>
c000d114:	83 c4 10             	add    esp,0x10
c000d117:	31 ff                	xor    edi,edi
c000d119:	50                   	push   eax
c000d11a:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d11e:	53                   	push   ebx
c000d11f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d126:	56                   	push   esi
c000d127:	e8 04 fc ff ff       	call   c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d12c:	83 c4 10             	add    esp,0x10
c000d12f:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d133:	89 d0                	mov    eax,edx
c000d135:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d139:	c1 e0 08             	shl    eax,0x8
c000d13c:	09 c2                	or     edx,eax
c000d13e:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d142:	c1 e2 08             	shl    edx,0x8
c000d145:	09 c2                	or     edx,eax
c000d147:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d14b:	7e 76                	jle    c000d1c3 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d14d:	85 d2                	test   edx,edx
c000d14f:	75 25                	jne    c000d176 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d151:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d156:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d15a:	50                   	push   eax
c000d15b:	6a 00                	push   0x0
c000d15d:	6a 00                	push   0x0
c000d15f:	56                   	push   esi
c000d160:	e8 75 fe ff ff       	call   c000cfda <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d165:	83 c4 10             	add    esp,0x10
c000d168:	89 c2                	mov    edx,eax
c000d16a:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d16d:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d170:	c1 f8 10             	sar    eax,0x10
c000d173:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d176:	55                   	push   ebp
c000d177:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d17b:	55                   	push   ebp
c000d17c:	52                   	push   edx
c000d17d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d181:	56                   	push   esi
c000d182:	e8 a9 fb ff ff       	call   c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d187:	83 c4 0c             	add    esp,0xc
c000d18a:	6a 27                	push   0x27
c000d18c:	6a 00                	push   0x0
c000d18e:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d192:	51                   	push   ecx
c000d193:	e8 58 33 ff ff       	call   c00004f0 <memset>
c000d198:	83 c4 0c             	add    esp,0xc
c000d19b:	6b c7 27             	imul   eax,edi,0x27
c000d19e:	6a 27                	push   0x27
c000d1a0:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d1a7:	50                   	push   eax
c000d1a8:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d1ac:	51                   	push   ecx
c000d1ad:	e8 ce 34 ff ff       	call   c0000680 <strncpy>
c000d1b2:	83 c4 0c             	add    esp,0xc
c000d1b5:	55                   	push   ebp
c000d1b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ba:	52                   	push   edx
c000d1bb:	56                   	push   esi
c000d1bc:	e8 93 fc ff ff       	call   c000ce54 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d1c1:	eb 19                	jmp    c000d1dc <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000d1c3:	85 d2                	test   edx,edx
c000d1c5:	74 18                	je     c000d1df <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000d1c7:	51                   	push   ecx
c000d1c8:	51                   	push   ecx
c000d1c9:	52                   	push   edx
c000d1ca:	56                   	push   esi
c000d1cb:	e8 c0 fc ff ff       	call   c000ce90 <CmFreeExtent(Reghive_Tag*, int)>
c000d1d0:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d1d4:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d1d8:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d1dc:	83 c4 10             	add    esp,0x10
c000d1df:	47                   	inc    edi
c000d1e0:	83 c3 03             	add    ebx,0x3
c000d1e3:	83 ff 07             	cmp    edi,0x7
c000d1e6:	0f 85 43 ff ff ff    	jne    c000d12f <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d1ec:	50                   	push   eax
c000d1ed:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d1f1:	50                   	push   eax
c000d1f2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d1f9:	56                   	push   esi
c000d1fa:	e8 55 fc ff ff       	call   c000ce54 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d1ff:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d205:	5b                   	pop    ebx
c000d206:	5e                   	pop    esi
c000d207:	5f                   	pop    edi
c000d208:	5d                   	pop    ebp
c000d209:	c3                   	ret    

c000d20a <CmGetMatch(char*, char*, bool, bool*)>:
c000d20a:	56                   	push   esi
c000d20b:	53                   	push   ebx
c000d20c:	50                   	push   eax
c000d20d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d211:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d216:	74 25                	je     c000d23d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d218:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d21b:	31 db                	xor    ebx,ebx
c000d21d:	50                   	push   eax
c000d21e:	50                   	push   eax
c000d21f:	8d 04 9d e0 53 02 c0 	lea    eax,[ebx*4-0x3ffdac20]
c000d226:	50                   	push   eax
c000d227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d22b:	e8 20 35 ff ff       	call   c0000750 <strcmp>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	85 c0                	test   eax,eax
c000d235:	74 2e                	je     c000d265 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d237:	43                   	inc    ebx
c000d238:	83 fb 3f             	cmp    ebx,0x3f
c000d23b:	75 e0                	jne    c000d21d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d23d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d240:	31 db                	xor    ebx,ebx
c000d242:	8d 04 9d e0 53 02 c0 	lea    eax,[ebx*4-0x3ffdac20]
c000d249:	51                   	push   ecx
c000d24a:	51                   	push   ecx
c000d24b:	50                   	push   eax
c000d24c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d250:	e8 fb 34 ff ff       	call   c0000750 <strcmp>
c000d255:	83 c4 10             	add    esp,0x10
c000d258:	85 c0                	test   eax,eax
c000d25a:	74 09                	je     c000d265 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d25c:	43                   	inc    ebx
c000d25d:	83 fb 3f             	cmp    ebx,0x3f
c000d260:	75 e0                	jne    c000d242 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d262:	83 cb ff             	or     ebx,0xffffffff
c000d265:	89 d8                	mov    eax,ebx
c000d267:	5a                   	pop    edx
c000d268:	5b                   	pop    ebx
c000d269:	5e                   	pop    esi
c000d26a:	c3                   	ret    

c000d26b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d26b:	55                   	push   ebp
c000d26c:	31 c0                	xor    eax,eax
c000d26e:	57                   	push   edi
c000d26f:	56                   	push   esi
c000d270:	53                   	push   ebx
c000d271:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d275:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d279:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d27b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d27f:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d282:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d286:	83 fd 1f             	cmp    ebp,0x1f
c000d289:	7f 0b                	jg     c000d296 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d28b:	0f b6 c2             	movzx  eax,dl
c000d28e:	d3 e0                	shl    eax,cl
c000d290:	09 07                	or     DWORD PTR [edi],eax
c000d292:	b0 01                	mov    al,0x1
c000d294:	01 33                	add    DWORD PTR [ebx],esi
c000d296:	5b                   	pop    ebx
c000d297:	5e                   	pop    esi
c000d298:	5f                   	pop    edi
c000d299:	5d                   	pop    ebp
c000d29a:	c3                   	ret    

c000d29b <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d29b:	57                   	push   edi
c000d29c:	56                   	push   esi
c000d29d:	53                   	push   ebx
c000d29e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2a2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d2a6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d2aa:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d2ae:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d2b0:	7c 17                	jl     c000d2c9 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d2b2:	8b 17                	mov    edx,DWORD PTR [edi]
c000d2b4:	b8 01 00 00 00       	mov    eax,0x1
c000d2b9:	d3 e0                	shl    eax,cl
c000d2bb:	48                   	dec    eax
c000d2bc:	21 d0                	and    eax,edx
c000d2be:	d3 ea                	shr    edx,cl
c000d2c0:	89 17                	mov    DWORD PTR [edi],edx
c000d2c2:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d2c4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d2c7:	eb 05                	jmp    c000d2ce <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d2c9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d2cc:	31 c0                	xor    eax,eax
c000d2ce:	5b                   	pop    ebx
c000d2cf:	5e                   	pop    esi
c000d2d0:	5f                   	pop    edi
c000d2d1:	c3                   	ret    

c000d2d2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d2d2:	83 ec 40             	sub    esp,0x40
c000d2d5:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d2d9:	50                   	push   eax
c000d2da:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d2de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d2e2:	e8 49 fa ff ff       	call   c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d2e7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d2eb:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d2ef:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000d2f3:	89 10                	mov    DWORD PTR [eax],edx
c000d2f5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000d2f8:	83 c4 4c             	add    esp,0x4c
c000d2fb:	c3                   	ret    

c000d2fc <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000d2fc:	55                   	push   ebp
c000d2fd:	57                   	push   edi
c000d2fe:	56                   	push   esi
c000d2ff:	53                   	push   ebx
c000d300:	83 ec 40             	sub    esp,0x40
c000d303:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000d307:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000d30b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d30f:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000d313:	53                   	push   ebx
c000d314:	56                   	push   esi
c000d315:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d319:	e8 12 fa ff ff       	call   c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d31e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000d322:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000d326:	83 c4 0c             	add    esp,0xc
c000d329:	53                   	push   ebx
c000d32a:	56                   	push   esi
c000d32b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d32f:	e8 20 fb ff ff       	call   c000ce54 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d334:	83 c4 4c             	add    esp,0x4c
c000d337:	5b                   	pop    ebx
c000d338:	5e                   	pop    esi
c000d339:	5f                   	pop    edi
c000d33a:	5d                   	pop    ebp
c000d33b:	c3                   	ret    

c000d33c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000d33c:	55                   	push   ebp
c000d33d:	57                   	push   edi
c000d33e:	56                   	push   esi
c000d33f:	31 f6                	xor    esi,esi
c000d341:	53                   	push   ebx
c000d342:	31 db                	xor    ebx,ebx
c000d344:	83 ec 40             	sub    esp,0x40
c000d347:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d34f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d357:	6a 12                	push   0x12
c000d359:	68 ee 00 00 00       	push   0xee
c000d35e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d362:	e8 89 31 ff ff       	call   c00004f0 <memset>
c000d367:	83 c4 10             	add    esp,0x10
c000d36a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000d36e:	6a 08                	push   0x8
c000d370:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d374:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000d378:	50                   	push   eax
c000d379:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d37d:	55                   	push   ebp
c000d37e:	57                   	push   edi
c000d37f:	e8 e7 fe ff ff       	call   c000d26b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d384:	83 c4 10             	add    esp,0x10
c000d387:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d38b:	50                   	push   eax
c000d38c:	6a 06                	push   0x6
c000d38e:	55                   	push   ebp
c000d38f:	57                   	push   edi
c000d390:	e8 06 ff ff ff       	call   c000d29b <CmGetShift(unsigned int*, int*, int, bool*)>
c000d395:	83 c4 10             	add    esp,0x10
c000d398:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d39d:	74 07                	je     c000d3a6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000d39f:	46                   	inc    esi
c000d3a0:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000d3a4:	eb e1                	jmp    c000d387 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000d3a6:	43                   	inc    ebx
c000d3a7:	83 fb 12             	cmp    ebx,0x12
c000d3aa:	75 c2                	jne    c000d36e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000d3ac:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d3b0:	31 db                	xor    ebx,ebx
c000d3b2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d3b5:	50                   	push   eax
c000d3b6:	50                   	push   eax
c000d3b7:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000d3bc:	43                   	inc    ebx
c000d3bd:	8d 04 85 e0 53 02 c0 	lea    eax,[eax*4-0x3ffdac20]
c000d3c4:	50                   	push   eax
c000d3c5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d3c9:	e8 72 34 ff ff       	call   c0000840 <strcat>
c000d3ce:	83 c4 10             	add    esp,0x10
c000d3d1:	83 fb 18             	cmp    ebx,0x18
c000d3d4:	75 df                	jne    c000d3b5 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000d3d6:	83 c4 3c             	add    esp,0x3c
c000d3d9:	31 c0                	xor    eax,eax
c000d3db:	5b                   	pop    ebx
c000d3dc:	5e                   	pop    esi
c000d3dd:	5f                   	pop    edi
c000d3de:	5d                   	pop    ebp
c000d3df:	c3                   	ret    

c000d3e0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000d3e0:	83 ec 40             	sub    esp,0x40
c000d3e3:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d3e7:	50                   	push   eax
c000d3e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d3ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d3f0:	e8 3b f9 ff ff       	call   c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d3f5:	58                   	pop    eax
c000d3f6:	5a                   	pop    edx
c000d3f7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000d3fb:	8d 44 24 15          	lea    eax,[esp+0x15]
c000d3ff:	50                   	push   eax
c000d400:	e8 37 ff ff ff       	call   c000d33c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000d405:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000d40a:	83 c4 4c             	add    esp,0x4c
c000d40d:	c3                   	ret    

c000d40e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000d40e:	55                   	push   ebp
c000d40f:	57                   	push   edi
c000d410:	56                   	push   esi
c000d411:	53                   	push   ebx
c000d412:	31 db                	xor    ebx,ebx
c000d414:	83 ec 70             	sub    esp,0x70
c000d417:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000d41e:	6a 30                	push   0x30
c000d420:	6a 00                	push   0x0
c000d422:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000d426:	56                   	push   esi
c000d427:	e8 c4 30 ff ff       	call   c00004f0 <memset>
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	83 ec 0c             	sub    esp,0xc
c000d432:	57                   	push   edi
c000d433:	e8 38 31 ff ff       	call   c0000570 <strlen>
c000d438:	83 c4 10             	add    esp,0x10
c000d43b:	39 d8                	cmp    eax,ebx
c000d43d:	76 16                	jbe    c000d455 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000d43f:	83 ec 0c             	sub    esp,0xc
c000d442:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000d446:	50                   	push   eax
c000d447:	e8 e4 34 ff ff       	call   c0000930 <toupper>
c000d44c:	83 c4 10             	add    esp,0x10
c000d44f:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000d452:	43                   	inc    ebx
c000d453:	eb da                	jmp    c000d42f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000d455:	31 f6                	xor    esi,esi
c000d457:	52                   	push   edx
c000d458:	31 ff                	xor    edi,edi
c000d45a:	6a 18                	push   0x18
c000d45c:	6a 3f                	push   0x3f
c000d45e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d462:	50                   	push   eax
c000d463:	e8 88 30 ff ff       	call   c00004f0 <memset>
c000d468:	83 c4 10             	add    esp,0x10
c000d46b:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000d46f:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000d473:	84 c0                	test   al,al
c000d475:	0f 84 b0 00 00 00    	je     c000d52b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d47b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000d47f:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000d484:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000d488:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000d48d:	8d 6e 01             	lea    ebp,[esi+0x1]
c000d490:	83 ec 0c             	sub    esp,0xc
c000d493:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000d497:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000d49b:	53                   	push   ebx
c000d49c:	e8 cf 30 ff ff       	call   c0000570 <strlen>
c000d4a1:	83 c4 10             	add    esp,0x10
c000d4a4:	85 c0                	test   eax,eax
c000d4a6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d4aa:	74 0b                	je     c000d4b7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000d4ac:	50                   	push   eax
c000d4ad:	6a 01                	push   0x1
c000d4af:	53                   	push   ebx
c000d4b0:	8d 44 24 20          	lea    eax,[esp+0x20]
c000d4b4:	50                   	push   eax
c000d4b5:	eb 0a                	jmp    c000d4c1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000d4b7:	50                   	push   eax
c000d4b8:	6a 00                	push   0x0
c000d4ba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000d4be:	50                   	push   eax
c000d4bf:	6a 00                	push   0x0
c000d4c1:	e8 44 fd ff ff       	call   c000d20a <CmGetMatch(char*, char*, bool, bool*)>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	83 f8 ff             	cmp    eax,0xffffffff
c000d4cc:	75 1a                	jne    c000d4e8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000d4ce:	83 ec 0c             	sub    esp,0xc
c000d4d1:	68 da 30 02 c0       	push   0xc00230da
c000d4d6:	e8 8b 23 00 00       	call   c000f866 <KePanic(char const*)>
c000d4db:	83 c4 10             	add    esp,0x10
c000d4de:	b8 02 00 00 00       	mov    eax,0x2
c000d4e3:	e9 bc 00 00 00       	jmp    c000d5a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d4e8:	83 ff 18             	cmp    edi,0x18
c000d4eb:	75 1a                	jne    c000d507 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000d4ed:	83 ec 0c             	sub    esp,0xc
c000d4f0:	68 ef 30 02 c0       	push   0xc00230ef
c000d4f5:	e8 6c 23 00 00       	call   c000f866 <KePanic(char const*)>
c000d4fa:	83 c4 10             	add    esp,0x10
c000d4fd:	b8 01 00 00 00       	mov    eax,0x1
c000d502:	e9 9d 00 00 00       	jmp    c000d5a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d507:	47                   	inc    edi
c000d508:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d50d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d511:	74 02                	je     c000d515 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000d513:	89 ee                	mov    esi,ebp
c000d515:	83 ec 0c             	sub    esp,0xc
c000d518:	53                   	push   ebx
c000d519:	e8 52 30 ff ff       	call   c0000570 <strlen>
c000d51e:	83 c4 10             	add    esp,0x10
c000d521:	85 c0                	test   eax,eax
c000d523:	74 06                	je     c000d52b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d525:	46                   	inc    esi
c000d526:	e9 40 ff ff ff       	jmp    c000d46b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d52b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d533:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d53b:	31 f6                	xor    esi,esi
c000d53d:	50                   	push   eax
c000d53e:	31 ff                	xor    edi,edi
c000d540:	6a 12                	push   0x12
c000d542:	68 ee 00 00 00       	push   0xee
c000d547:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d54e:	e8 9d 2f ff ff       	call   c00004f0 <memset>
c000d553:	83 c4 10             	add    esp,0x10
c000d556:	83 fe 17             	cmp    esi,0x17
c000d559:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d55d:	7e 26                	jle    c000d585 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000d55f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d563:	50                   	push   eax
c000d564:	6a 08                	push   0x8
c000d566:	55                   	push   ebp
c000d567:	53                   	push   ebx
c000d568:	e8 2e fd ff ff       	call   c000d29b <CmGetShift(unsigned int*, int*, int, bool*)>
c000d56d:	83 c4 10             	add    esp,0x10
c000d570:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d575:	74 26                	je     c000d59d <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000d577:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d57e:	4e                   	dec    esi
c000d57f:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d582:	47                   	inc    edi
c000d583:	eb 1c                	jmp    c000d5a1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d585:	6a 06                	push   0x6
c000d587:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000d58c:	50                   	push   eax
c000d58d:	55                   	push   ebp
c000d58e:	53                   	push   ebx
c000d58f:	e8 d7 fc ff ff       	call   c000d26b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d594:	83 c4 10             	add    esp,0x10
c000d597:	84 c0                	test   al,al
c000d599:	75 06                	jne    c000d5a1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d59b:	eb c2                	jmp    c000d55f <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000d59d:	31 c0                	xor    eax,eax
c000d59f:	eb 03                	jmp    c000d5a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d5a1:	46                   	inc    esi
c000d5a2:	eb b2                	jmp    c000d556 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000d5a4:	83 c4 6c             	add    esp,0x6c
c000d5a7:	5b                   	pop    ebx
c000d5a8:	5e                   	pop    esi
c000d5a9:	5f                   	pop    edi
c000d5aa:	5d                   	pop    ebp
c000d5ab:	c3                   	ret    

c000d5ac <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d5ac:	53                   	push   ebx
c000d5ad:	83 ec 3c             	sub    esp,0x3c
c000d5b0:	6a 2b                	push   0x2b
c000d5b2:	6a 00                	push   0x0
c000d5b4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d5b8:	53                   	push   ebx
c000d5b9:	e8 32 2f ff ff       	call   c00004f0 <memset>
c000d5be:	58                   	pop    eax
c000d5bf:	5a                   	pop    edx
c000d5c0:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d5c4:	50                   	push   eax
c000d5c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d5c9:	e8 40 fe ff ff       	call   c000d40e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d5ce:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d5d3:	83 c4 0c             	add    esp,0xc
c000d5d6:	6a 15                	push   0x15
c000d5d8:	6a 00                	push   0x0
c000d5da:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d5de:	50                   	push   eax
c000d5df:	e8 0c 2f ff ff       	call   c00004f0 <memset>
c000d5e4:	53                   	push   ebx
c000d5e5:	6a 00                	push   0x0
c000d5e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d5eb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d5ef:	e8 e6 f9 ff ff       	call   c000cfda <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d5f4:	83 c4 58             	add    esp,0x58
c000d5f7:	5b                   	pop    ebx
c000d5f8:	c3                   	ret    

c000d5f9 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d5f9:	56                   	push   esi
c000d5fa:	53                   	push   ebx
c000d5fb:	83 ec 48             	sub    esp,0x48
c000d5fe:	6a 12                	push   0x12
c000d600:	68 ff 00 00 00       	push   0xff
c000d605:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d609:	56                   	push   esi
c000d60a:	e8 e1 2e ff ff       	call   c00004f0 <memset>
c000d60f:	5a                   	pop    edx
c000d610:	59                   	pop    ecx
c000d611:	56                   	push   esi
c000d612:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d616:	e8 f3 fd ff ff       	call   c000d40e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d61b:	83 c4 10             	add    esp,0x10
c000d61e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d622:	85 db                	test   ebx,ebx
c000d624:	74 42                	je     c000d668 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d626:	50                   	push   eax
c000d627:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d62b:	50                   	push   eax
c000d62c:	53                   	push   ebx
c000d62d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d631:	e8 fa f6 ff ff       	call   c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d636:	83 c4 0c             	add    esp,0xc
c000d639:	6a 12                	push   0x12
c000d63b:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d63f:	50                   	push   eax
c000d640:	56                   	push   esi
c000d641:	e8 3a 2d ff ff       	call   c0000380 <memcmp>
c000d646:	83 c4 10             	add    esp,0x10
c000d649:	85 c0                	test   eax,eax
c000d64b:	74 1e                	je     c000d66b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d64d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d652:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d657:	c1 e3 08             	shl    ebx,0x8
c000d65a:	09 d8                	or     eax,ebx
c000d65c:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d661:	c1 e3 10             	shl    ebx,0x10
c000d664:	09 c3                	or     ebx,eax
c000d666:	eb ba                	jmp    c000d622 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d668:	83 cb ff             	or     ebx,0xffffffff
c000d66b:	89 d8                	mov    eax,ebx
c000d66d:	83 c4 44             	add    esp,0x44
c000d670:	5b                   	pop    ebx
c000d671:	5e                   	pop    esi
c000d672:	c3                   	ret    

c000d673 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d673:	57                   	push   edi
c000d674:	56                   	push   esi
c000d675:	53                   	push   ebx
c000d676:	83 ec 34             	sub    esp,0x34
c000d679:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d67d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d681:	6a 2b                	push   0x2b
c000d683:	6a 00                	push   0x0
c000d685:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d689:	53                   	push   ebx
c000d68a:	e8 61 2e ff ff       	call   c00004f0 <memset>
c000d68f:	58                   	pop    eax
c000d690:	5a                   	pop    edx
c000d691:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d695:	50                   	push   eax
c000d696:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d69a:	e8 6f fd ff ff       	call   c000d40e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d69f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000d6a3:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d6a7:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d6ab:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d6af:	53                   	push   ebx
c000d6b0:	6a 00                	push   0x0
c000d6b2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d6b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d6ba:	e8 1b f9 ff ff       	call   c000cfda <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d6bf:	83 c4 50             	add    esp,0x50
c000d6c2:	5b                   	pop    ebx
c000d6c3:	5e                   	pop    esi
c000d6c4:	5f                   	pop    edi
c000d6c5:	c3                   	ret    

c000d6c6 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d6c6:	55                   	push   ebp
c000d6c7:	57                   	push   edi
c000d6c8:	56                   	push   esi
c000d6c9:	53                   	push   ebx
c000d6ca:	83 ec 40             	sub    esp,0x40
c000d6cd:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d6d1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d6d5:	6a 2b                	push   0x2b
c000d6d7:	6a 00                	push   0x0
c000d6d9:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d6dd:	56                   	push   esi
c000d6de:	e8 0d 2e ff ff       	call   c00004f0 <memset>
c000d6e3:	5f                   	pop    edi
c000d6e4:	89 ef                	mov    edi,ebp
c000d6e6:	58                   	pop    eax
c000d6e7:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d6eb:	50                   	push   eax
c000d6ec:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d6f0:	e8 19 fd ff ff       	call   c000d40e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d6f5:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d6fa:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d6ff:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d704:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d709:	83 c4 10             	add    esp,0x10
c000d70c:	85 ed                	test   ebp,ebp
c000d70e:	74 14                	je     c000d724 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d710:	51                   	push   ecx
c000d711:	51                   	push   ecx
c000d712:	57                   	push   edi
c000d713:	53                   	push   ebx
c000d714:	e8 09 f7 ff ff       	call   c000ce22 <CmGetNext(Reghive_Tag*, int)>
c000d719:	83 c4 10             	add    esp,0x10
c000d71c:	85 c0                	test   eax,eax
c000d71e:	74 04                	je     c000d724 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d720:	89 c7                	mov    edi,eax
c000d722:	eb e8                	jmp    c000d70c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d724:	56                   	push   esi
c000d725:	6a 00                	push   0x0
c000d727:	57                   	push   edi
c000d728:	53                   	push   ebx
c000d729:	e8 ac f8 ff ff       	call   c000cfda <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d72e:	83 c4 0c             	add    esp,0xc
c000d731:	89 c7                	mov    edi,eax
c000d733:	56                   	push   esi
c000d734:	50                   	push   eax
c000d735:	53                   	push   ebx
c000d736:	e8 f5 f5 ff ff       	call   c000cd30 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d73b:	58                   	pop    eax
c000d73c:	5a                   	pop    edx
c000d73d:	6a 6c                	push   0x6c
c000d73f:	6a 00                	push   0x0
c000d741:	6a 00                	push   0x0
c000d743:	68 00 31 02 c0       	push   0xc0023100
c000d748:	57                   	push   edi
c000d749:	53                   	push   ebx
c000d74a:	e8 24 ff ff ff       	call   c000d673 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d74f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d753:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d757:	c1 e8 10             	shr    eax,0x10
c000d75a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d75e:	83 c4 1c             	add    esp,0x1c
c000d761:	56                   	push   esi
c000d762:	57                   	push   edi
c000d763:	53                   	push   ebx
c000d764:	e8 eb f6 ff ff       	call   c000ce54 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d769:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d76e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d773:	c1 e0 08             	shl    eax,0x8
c000d776:	09 c2                	or     edx,eax
c000d778:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d77d:	83 c4 4c             	add    esp,0x4c
c000d780:	c1 e0 10             	shl    eax,0x10
c000d783:	5b                   	pop    ebx
c000d784:	09 d0                	or     eax,edx
c000d786:	5e                   	pop    esi
c000d787:	5f                   	pop    edi
c000d788:	5d                   	pop    ebp
c000d789:	c3                   	ret    

c000d78a <zStrtok(char*, char const*)>:
c000d78a:	55                   	push   ebp
c000d78b:	57                   	push   edi
c000d78c:	56                   	push   esi
c000d78d:	53                   	push   ebx
c000d78e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d792:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d796:	85 db                	test   ebx,ebx
c000d798:	74 2f                	je     c000d7c9 <zStrtok(char*, char const*)+0x3f>
c000d79a:	85 c0                	test   eax,eax
c000d79c:	75 09                	jne    c000d7a7 <zStrtok(char*, char const*)+0x1d>
c000d79e:	a1 c0 b0 02 c0       	mov    eax,ds:0xc002b0c0
c000d7a3:	85 c0                	test   eax,eax
c000d7a5:	74 50                	je     c000d7f7 <zStrtok(char*, char const*)+0x6d>
c000d7a7:	31 c9                	xor    ecx,ecx
c000d7a9:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d7ad:	74 03                	je     c000d7b2 <zStrtok(char*, char const*)+0x28>
c000d7af:	41                   	inc    ecx
c000d7b0:	eb f7                	jmp    c000d7a9 <zStrtok(char*, char const*)+0x1f>
c000d7b2:	31 d2                	xor    edx,edx
c000d7b4:	39 ca                	cmp    edx,ecx
c000d7b6:	74 15                	je     c000d7cd <zStrtok(char*, char const*)+0x43>
c000d7b8:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d7bc:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d7bf:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d7c2:	39 ee                	cmp    esi,ebp
c000d7c4:	74 13                	je     c000d7d9 <zStrtok(char*, char const*)+0x4f>
c000d7c6:	42                   	inc    edx
c000d7c7:	eb eb                	jmp    c000d7b4 <zStrtok(char*, char const*)+0x2a>
c000d7c9:	31 c0                	xor    eax,eax
c000d7cb:	eb 2a                	jmp    c000d7f7 <zStrtok(char*, char const*)+0x6d>
c000d7cd:	c7 05 c0 b0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b0c0,0x0
c000d7d7:	eb 1e                	jmp    c000d7f7 <zStrtok(char*, char const*)+0x6d>
c000d7d9:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d7dc:	39 ce                	cmp    esi,ecx
c000d7de:	75 0a                	jne    c000d7ea <zStrtok(char*, char const*)+0x60>
c000d7e0:	40                   	inc    eax
c000d7e1:	a3 c0 b0 02 c0       	mov    ds:0xc002b0c0,eax
c000d7e6:	89 d8                	mov    eax,ebx
c000d7e8:	eb 0d                	jmp    c000d7f7 <zStrtok(char*, char const*)+0x6d>
c000d7ea:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d7ee:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d7f1:	89 15 c0 b0 02 c0    	mov    DWORD PTR ds:0xc002b0c0,edx
c000d7f7:	5b                   	pop    ebx
c000d7f8:	5e                   	pop    esi
c000d7f9:	5f                   	pop    edi
c000d7fa:	5d                   	pop    ebp
c000d7fb:	c3                   	ret    

c000d7fc <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d7fc:	57                   	push   edi
c000d7fd:	56                   	push   esi
c000d7fe:	53                   	push   ebx
c000d7ff:	81 ec 08 01 00 00    	sub    esp,0x108
c000d805:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d80c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d813:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d817:	53                   	push   ebx
c000d818:	e8 23 2e ff ff       	call   c0000640 <strcpy>
c000d81d:	59                   	pop    ecx
c000d81e:	5e                   	pop    esi
c000d81f:	68 43 42 02 c0       	push   0xc0024243
c000d824:	53                   	push   ebx
c000d825:	bb 01 00 00 00       	mov    ebx,0x1
c000d82a:	e8 5b ff ff ff       	call   c000d78a <zStrtok(char*, char const*)>
c000d82f:	83 c4 10             	add    esp,0x10
c000d832:	85 c0                	test   eax,eax
c000d834:	74 3b                	je     c000d871 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d836:	52                   	push   edx
c000d837:	50                   	push   eax
c000d838:	6a 01                	push   0x1
c000d83a:	57                   	push   edi
c000d83b:	e8 b9 fd ff ff       	call   c000d5f9 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d840:	59                   	pop    ecx
c000d841:	89 c3                	mov    ebx,eax
c000d843:	5e                   	pop    esi
c000d844:	68 43 42 02 c0       	push   0xc0024243
c000d849:	6a 00                	push   0x0
c000d84b:	e8 3a ff ff ff       	call   c000d78a <zStrtok(char*, char const*)>
c000d850:	83 c4 10             	add    esp,0x10
c000d853:	89 c6                	mov    esi,eax
c000d855:	85 c0                	test   eax,eax
c000d857:	74 18                	je     c000d871 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d859:	52                   	push   edx
c000d85a:	52                   	push   edx
c000d85b:	53                   	push   ebx
c000d85c:	57                   	push   edi
c000d85d:	e8 81 f5 ff ff       	call   c000cde3 <CmEnterDirectory(Reghive_Tag*, int)>
c000d862:	83 c4 10             	add    esp,0x10
c000d865:	89 c3                	mov    ebx,eax
c000d867:	83 f8 ff             	cmp    eax,0xffffffff
c000d86a:	74 05                	je     c000d871 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d86c:	50                   	push   eax
c000d86d:	56                   	push   esi
c000d86e:	53                   	push   ebx
c000d86f:	eb c9                	jmp    c000d83a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d871:	81 c4 00 01 00 00    	add    esp,0x100
c000d877:	89 d8                	mov    eax,ebx
c000d879:	5b                   	pop    ebx
c000d87a:	5e                   	pop    esi
c000d87b:	5f                   	pop    edi
c000d87c:	c3                   	ret    

c000d87d <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d87d:	55                   	push   ebp
c000d87e:	57                   	push   edi
c000d87f:	56                   	push   esi
c000d880:	53                   	push   ebx
c000d881:	83 ec 5c             	sub    esp,0x5c
c000d884:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d888:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d88c:	85 db                	test   ebx,ebx
c000d88e:	0f 8e 84 00 00 00    	jle    c000d918 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d894:	31 ed                	xor    ebp,ebp
c000d896:	57                   	push   edi
c000d897:	6a 32                	push   0x32
c000d899:	6a 00                	push   0x0
c000d89b:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d89f:	57                   	push   edi
c000d8a0:	e8 4b 2c ff ff       	call   c00004f0 <memset>
c000d8a5:	83 c4 0c             	add    esp,0xc
c000d8a8:	57                   	push   edi
c000d8a9:	53                   	push   ebx
c000d8aa:	56                   	push   esi
c000d8ab:	e8 30 fb ff ff       	call   c000d3e0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d8b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d8b4:	83 c4 10             	add    esp,0x10
c000d8b7:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d8bb:	7d 13                	jge    c000d8d0 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d8bd:	83 ec 0c             	sub    esp,0xc
c000d8c0:	45                   	inc    ebp
c000d8c1:	68 34 47 02 c0       	push   0xc0024734
c000d8c6:	e8 99 96 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d8cb:	83 c4 10             	add    esp,0x10
c000d8ce:	eb e7                	jmp    c000d8b7 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d8d0:	51                   	push   ecx
c000d8d1:	57                   	push   edi
c000d8d2:	53                   	push   ebx
c000d8d3:	68 06 31 02 c0       	push   0xc0023106
c000d8d8:	e8 87 96 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d8dd:	83 c4 10             	add    esp,0x10
c000d8e0:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d8e5:	75 1e                	jne    c000d905 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d8e7:	52                   	push   edx
c000d8e8:	52                   	push   edx
c000d8e9:	53                   	push   ebx
c000d8ea:	56                   	push   esi
c000d8eb:	e8 f3 f4 ff ff       	call   c000cde3 <CmEnterDirectory(Reghive_Tag*, int)>
c000d8f0:	83 c4 0c             	add    esp,0xc
c000d8f3:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d8f7:	8d 51 04             	lea    edx,[ecx+0x4]
c000d8fa:	52                   	push   edx
c000d8fb:	50                   	push   eax
c000d8fc:	56                   	push   esi
c000d8fd:	e8 7b ff ff ff       	call   c000d87d <CmDisplayTree(Reghive_Tag*, int, int)>
c000d902:	83 c4 10             	add    esp,0x10
c000d905:	50                   	push   eax
c000d906:	50                   	push   eax
c000d907:	53                   	push   ebx
c000d908:	56                   	push   esi
c000d909:	e8 14 f5 ff ff       	call   c000ce22 <CmGetNext(Reghive_Tag*, int)>
c000d90e:	83 c4 10             	add    esp,0x10
c000d911:	89 c3                	mov    ebx,eax
c000d913:	e9 74 ff ff ff       	jmp    c000d88c <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d918:	83 c4 5c             	add    esp,0x5c
c000d91b:	5b                   	pop    ebx
c000d91c:	5e                   	pop    esi
c000d91d:	5f                   	pop    edi
c000d91e:	5d                   	pop    ebp
c000d91f:	c3                   	ret    

c000d920 <CmSplitFinalSlashInPlace(char*)>:
c000d920:	53                   	push   ebx
c000d921:	83 ec 14             	sub    esp,0x14
c000d924:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d928:	53                   	push   ebx
c000d929:	e8 42 2c ff ff       	call   c0000570 <strlen>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	48                   	dec    eax
c000d932:	85 c0                	test   eax,eax
c000d934:	74 15                	je     c000d94b <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d936:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d939:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d93d:	75 09                	jne    c000d948 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d93f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d942:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d946:	eb 05                	jmp    c000d94d <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d948:	48                   	dec    eax
c000d949:	eb e7                	jmp    c000d932 <CmSplitFinalSlashInPlace(char*)+0x12>
c000d94b:	31 c0                	xor    eax,eax
c000d94d:	83 c4 08             	add    esp,0x8
c000d950:	5b                   	pop    ebx
c000d951:	c3                   	ret    
c000d952:	66 90                	xchg   ax,ax

c000d954 <Krnl::handlePowerButton()>:
c000d954:	83 ec 0c             	sub    esp,0xc
c000d957:	e8 45 28 00 00       	call   c00101a1 <KeHandlePowerButton()>
c000d95c:	90                   	nop
c000d95d:	83 c4 0c             	add    esp,0xc
c000d960:	c3                   	ret    
c000d961:	8d 76 00             	lea    esi,[esi+0x0]

c000d964 <Krnl::handleSleepButton()>:
c000d964:	83 ec 0c             	sub    esp,0xc
c000d967:	e8 4d 28 00 00       	call   c00101b9 <KeHandleSleepButton()>
c000d96c:	90                   	nop
c000d96d:	83 c4 0c             	add    esp,0xc
c000d970:	c3                   	ret    
c000d971:	90                   	nop

c000d972 <Computer::close(int, int, void*)>:
c000d972:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d977:	c3                   	ret    

c000d978 <Computer::open(int, int, void*)>:
c000d978:	56                   	push   esi
c000d979:	53                   	push   ebx
c000d97a:	83 ec 04             	sub    esp,0x4
c000d97d:	f6 05 24 d1 02 c0 04 	test   BYTE PTR ds:0xc002d124,0x4
c000d984:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d988:	0f 94 05 c0 5a 02 c0 	sete   BYTE PTR ds:0xc0025ac0
c000d98f:	39 1d d0 b0 02 c0    	cmp    DWORD PTR ds:0xc002b0d0,ebx
c000d995:	74 10                	je     c000d9a7 <Computer::open(int, int, void*)+0x2f>
c000d997:	83 ec 0c             	sub    esp,0xc
c000d99a:	68 10 31 02 c0       	push   0xc0023110
c000d99f:	e8 c2 1e 00 00       	call   c000f866 <KePanic(char const*)>
c000d9a4:	83 c4 10             	add    esp,0x10
c000d9a7:	83 ec 0c             	sub    esp,0xc
c000d9aa:	68 c8 31 02 c0       	push   0xc00231c8
c000d9af:	e8 33 f1 ff ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c000d9b4:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d9bb:	e8 5f 1b 00 00       	call   c000f51f <malloc>
c000d9c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d9c3:	89 c6                	mov    esi,eax
c000d9c5:	e8 7e e6 ff ff       	call   c000c048 <ACPI::ACPI()>
c000d9ca:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d9d0:	58                   	pop    eax
c000d9d1:	5a                   	pop    edx
c000d9d2:	56                   	push   esi
c000d9d3:	53                   	push   ebx
c000d9d4:	e8 d7 b8 ff ff       	call   c00092b0 <Device::addChild(Device*)>
c000d9d9:	c7 04 24 e0 31 02 c0 	mov    DWORD PTR [esp],0xc00231e0
c000d9e0:	e8 02 f1 ff ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c000d9e5:	e8 0d b2 00 00       	call   c0018bf7 <HalEnableNMI()>
c000d9ea:	e8 3d a4 00 00       	call   c0017e2c <HalDetectFeatures()>
c000d9ef:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d9f6:	e8 24 1b 00 00       	call   c000f51f <malloc>
c000d9fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000d9fe:	89 c6                	mov    esi,eax
c000da00:	e8 2d bd 00 00       	call   c0019732 <CPU::CPU()>
c000da05:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000da0b:	59                   	pop    ecx
c000da0c:	58                   	pop    eax
c000da0d:	56                   	push   esi
c000da0e:	53                   	push   ebx
c000da0f:	e8 9c b8 ff ff       	call   c00092b0 <Device::addChild(Device*)>
c000da14:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000da18:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000da1e:	8b 10                	mov    edx,DWORD PTR [eax]
c000da20:	51                   	push   ecx
c000da21:	6a 00                	push   0x0
c000da23:	6a 00                	push   0x0
c000da25:	50                   	push   eax
c000da26:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000da29:	83 c4 14             	add    esp,0x14
c000da2c:	68 3c 31 02 c0       	push   0xc002313c
c000da31:	e8 b1 f0 ff ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c000da36:	e8 52 b9 00 00       	call   c001938d <HalInitialiseCoprocessor()>
c000da3b:	c7 04 24 fa 31 02 c0 	mov    DWORD PTR [esp],0xc00231fa
c000da42:	e8 a0 f0 ff ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c000da47:	c7 04 24 5e da 00 c0 	mov    DWORD PTR [esp],0xc000da5e
c000da4e:	e8 0d 89 00 00       	call   c0016360 <setupMultitasking(void (*)())>
c000da53:	83 c4 14             	add    esp,0x14
c000da56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000da5b:	5b                   	pop    ebx
c000da5c:	5e                   	pop    esi
c000da5d:	c3                   	ret    

c000da5e <KeFirstTask()>:
c000da5e:	53                   	push   ebx
c000da5f:	83 ec 14             	sub    esp,0x14
c000da62:	fb                   	sti    
c000da63:	68 15 32 02 c0       	push   0xc0023215
c000da68:	e8 7a f0 ff ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c000da6d:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000da74:	e8 a6 1a 00 00       	call   c000f51f <malloc>
c000da79:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000da80:	89 c3                	mov    ebx,eax
c000da82:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c000da87:	50                   	push   eax
c000da88:	68 2e 32 02 c0       	push   0xc002322e
c000da8d:	6a 01                	push   0x1
c000da8f:	53                   	push   ebx
c000da90:	e8 57 85 00 00       	call   c0015fec <Process::Process(bool, char const*, Process*, char**)>
c000da95:	83 c4 20             	add    esp,0x20
c000da98:	68 ff 00 00 00       	push   0xff
c000da9d:	6a 00                	push   0x0
c000da9f:	68 5d e7 00 c0       	push   0xc000e75d
c000daa4:	53                   	push   ebx
c000daa5:	e8 82 87 00 00       	call   c001622c <Process::createThread(void (*)(void*), void*, int)>
c000daaa:	8b 15 58 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da58
c000dab0:	6a 7a                	push   0x7a
c000dab2:	6a 00                	push   0x0
c000dab4:	68 1c 6b 01 c0       	push   0xc0016b1c
c000dab9:	52                   	push   edx
c000daba:	e8 6d 87 00 00       	call   c001622c <Process::createThread(void (*)(void*), void*, int)>
c000dabf:	83 c4 14             	add    esp,0x14
c000dac2:	a3 10 da 02 c0       	mov    ds:0xc002da10,eax
c000dac7:	68 60 31 02 c0       	push   0xc0023160
c000dacc:	e8 16 f0 ff ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c000dad1:	c6 05 d5 b0 02 c0 01 	mov    BYTE PTR ds:0xc002b0d5,0x1
c000dad8:	e8 e8 27 00 00       	call   c00102c5 <KeInitRand()>
c000dadd:	e8 08 94 00 00       	call   c0016eea <Vm::initialise8086()>
c000dae2:	e8 09 a3 ff ff       	call   c0007df0 <Fs::initVFS()>
c000dae7:	c7 04 24 d4 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ed4
c000daee:	e8 f4 ef ff ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c000daf3:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c000daf8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000dafe:	8b 10                	mov    edx,DWORD PTR [eax]
c000db00:	6a 00                	push   0x0
c000db02:	6a 00                	push   0x0
c000db04:	6a 00                	push   0x0
c000db06:	50                   	push   eax
c000db07:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000db0a:	83 c4 14             	add    esp,0x14
c000db0d:	68 60 31 02 c0       	push   0xc0023160
c000db12:	e8 d0 ef ff ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c000db17:	e8 b9 9a ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000db1c:	e8 f5 05 00 00       	call   c000e116 <KeLoadSystemEnv()>
c000db21:	e8 ab 26 00 00       	call   c00101d1 <KeSetupPowerManager()>
c000db26:	c7 04 24 84 31 02 c0 	mov    DWORD PTR [esp],0xc0023184
c000db2d:	e8 b5 ef ff ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c000db32:	59                   	pop    ecx
c000db33:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c000db38:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000db3e:	53                   	push   ebx
c000db3f:	e8 88 b8 ff ff       	call   c00093cc <Device::loadDriversForAll()>
c000db44:	c7 04 24 3b 32 02 c0 	mov    DWORD PTR [esp],0xc002323b
c000db4b:	e8 97 ef ff ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c000db50:	58                   	pop    eax
c000db51:	8b 1d d0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0d0
c000db57:	5a                   	pop    edx
c000db58:	6a 01                	push   0x1
c000db5a:	68 4c 32 02 c0       	push   0xc002324c
c000db5f:	e8 00 7e 00 00       	call   c0015964 <Thr::loadDLL(char const*, bool)>
c000db64:	59                   	pop    ecx
c000db65:	5a                   	pop    edx
c000db66:	53                   	push   ebx
c000db67:	50                   	push   eax
c000db68:	e8 49 80 00 00       	call   c0015bb6 <Thr::executeDLL(unsigned long, void*)>
c000db6d:	83 c4 10             	add    esp,0x10
c000db70:	83 ec 0c             	sub    esp,0xc
c000db73:	6a 02                	push   0x2
c000db75:	e8 ca 89 00 00       	call   c0016544 <blockTask(TaskState)>
c000db7a:	83 c4 10             	add    esp,0x10
c000db7d:	eb f1                	jmp    c000db70 <KeFirstTask()+0x112>
c000db7f:	90                   	nop

c000db80 <Computer::Computer()>:
c000db80:	83 ec 0c             	sub    esp,0xc
c000db83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db87:	83 ec 08             	sub    esp,0x8
c000db8a:	68 68 32 02 c0       	push   0xc0023268
c000db8f:	50                   	push   eax
c000db90:	e8 7d b8 ff ff       	call   c0009412 <Device::Device(char const*)>
c000db95:	83 c4 10             	add    esp,0x10
c000db98:	ba 7c 32 02 c0       	mov    edx,0xc002327c
c000db9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba1:	89 10                	mov    DWORD PTR [eax],edx
c000dba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dbb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000dbbf:	90                   	nop
c000dbc0:	83 c4 0c             	add    esp,0xc
c000dbc3:	c3                   	ret    

c000dbc4 <KePrepareShutdown()>:
c000dbc4:	83 ec 0c             	sub    esp,0xc
c000dbc7:	e8 89 ee ff ff       	call   c000ca55 <KeExecuteAtexit()>
c000dbcc:	83 ec 0c             	sub    esp,0xc
c000dbcf:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c000dbd4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000dbda:	50                   	push   eax
c000dbdb:	e8 38 b9 ff ff       	call   c0009518 <Device::closeAll()>
c000dbe0:	83 c4 1c             	add    esp,0x1c
c000dbe3:	c3                   	ret    

c000dbe4 <KeShutdown()>:
c000dbe4:	83 ec 0c             	sub    esp,0xc
c000dbe7:	e8 d8 ff ff ff       	call   c000dbc4 <KePrepareShutdown()>
c000dbec:	a1 cc b0 02 c0       	mov    eax,ds:0xc002b0cc
c000dbf1:	85 c0                	test   eax,eax
c000dbf3:	74 02                	je     c000dbf7 <KeShutdown()+0x13>
c000dbf5:	ff d0                	call   eax
c000dbf7:	83 ec 0c             	sub    esp,0xc
c000dbfa:	68 a4 31 02 c0       	push   0xc00231a4
c000dbff:	e8 62 1c 00 00       	call   c000f866 <KePanic(char const*)>
c000dc04:	83 c4 1c             	add    esp,0x1c
c000dc07:	c3                   	ret    

c000dc08 <KeSleep()>:
c000dc08:	a1 c4 b0 02 c0       	mov    eax,ds:0xc002b0c4
c000dc0d:	85 c0                	test   eax,eax
c000dc0f:	74 02                	je     c000dc13 <KeSleep()+0xb>
c000dc11:	ff e0                	jmp    eax
c000dc13:	c3                   	ret    

c000dc14 <KeRestart()>:
c000dc14:	83 ec 0c             	sub    esp,0xc
c000dc17:	e8 a8 ff ff ff       	call   c000dbc4 <KePrepareShutdown()>
c000dc1c:	a1 c8 b0 02 c0       	mov    eax,ds:0xc002b0c8
c000dc21:	85 c0                	test   eax,eax
c000dc23:	74 02                	je     c000dc27 <KeRestart()+0x13>
c000dc25:	ff d0                	call   eax
c000dc27:	e4 64                	in     al,0x64
c000dc29:	a8 02                	test   al,0x2
c000dc2b:	75 fa                	jne    c000dc27 <KeRestart()+0x13>
c000dc2d:	b0 fe                	mov    al,0xfe
c000dc2f:	e6 64                	out    0x64,al
c000dc31:	83 c4 0c             	add    esp,0xc
c000dc34:	c3                   	ret    

c000dc35 <KeCalculateCRC32(unsigned char*, int)>:
c000dc35:	53                   	push   ebx
c000dc36:	83 c8 ff             	or     eax,0xffffffff
c000dc39:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc3d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000dc41:	01 cb                	add    ebx,ecx
c000dc43:	39 d9                	cmp    ecx,ebx
c000dc45:	74 15                	je     c000dc5c <KeCalculateCRC32(unsigned char*, int)+0x27>
c000dc47:	41                   	inc    ecx
c000dc48:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000dc4b:	31 c2                	xor    edx,eax
c000dc4d:	c1 e8 08             	shr    eax,0x8
c000dc50:	0f b6 d2             	movzx  edx,dl
c000dc53:	33 04 95 e0 54 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdab20]
c000dc5a:	eb e7                	jmp    c000dc43 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000dc5c:	f7 d0                	not    eax
c000dc5e:	5b                   	pop    ebx
c000dc5f:	c3                   	ret    

c000dc60 <EnvVarContainer::getEnv(char const*)>:
c000dc60:	57                   	push   edi
c000dc61:	56                   	push   esi
c000dc62:	53                   	push   ebx
c000dc63:	31 db                	xor    ebx,ebx
c000dc65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dc69:	39 1e                	cmp    DWORD PTR [esi],ebx
c000dc6b:	7e 2b                	jle    c000dc98 <EnvVarContainer::getEnv(char const*)+0x38>
c000dc6d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000dc74:	50                   	push   eax
c000dc75:	50                   	push   eax
c000dc76:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dc79:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000dc7c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dc80:	e8 cb 2a ff ff       	call   c0000750 <strcmp>
c000dc85:	83 c4 10             	add    esp,0x10
c000dc88:	85 c0                	test   eax,eax
c000dc8a:	75 09                	jne    c000dc95 <EnvVarContainer::getEnv(char const*)+0x35>
c000dc8c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dc8f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000dc93:	eb 05                	jmp    c000dc9a <EnvVarContainer::getEnv(char const*)+0x3a>
c000dc95:	43                   	inc    ebx
c000dc96:	eb d1                	jmp    c000dc69 <EnvVarContainer::getEnv(char const*)+0x9>
c000dc98:	31 c0                	xor    eax,eax
c000dc9a:	5b                   	pop    ebx
c000dc9b:	5e                   	pop    esi
c000dc9c:	5f                   	pop    edi
c000dc9d:	c3                   	ret    

c000dc9e <EnvVarContainer::setEnv(char const*, char const*)>:
c000dc9e:	55                   	push   ebp
c000dc9f:	57                   	push   edi
c000dca0:	56                   	push   esi
c000dca1:	53                   	push   ebx
c000dca2:	83 ec 28             	sub    esp,0x28
c000dca5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dca9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000dcad:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dcb1:	56                   	push   esi
c000dcb2:	e8 b9 28 ff ff       	call   c0000570 <strlen>
c000dcb7:	40                   	inc    eax
c000dcb8:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcbb:	e8 5f 18 00 00       	call   c000f51f <malloc>
c000dcc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dcc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcc7:	e8 a4 28 ff ff       	call   c0000570 <strlen>
c000dccc:	40                   	inc    eax
c000dccd:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcd0:	e8 4a 18 00 00       	call   c000f51f <malloc>
c000dcd5:	89 34 24             	mov    DWORD PTR [esp],esi
c000dcd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcdc:	e8 8f 28 ff ff       	call   c0000570 <strlen>
c000dce1:	83 c4 0c             	add    esp,0xc
c000dce4:	40                   	inc    eax
c000dce5:	50                   	push   eax
c000dce6:	6a 00                	push   0x0
c000dce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dcec:	e8 ff 27 ff ff       	call   c00004f0 <memset>
c000dcf1:	89 34 24             	mov    DWORD PTR [esp],esi
c000dcf4:	e8 77 28 ff ff       	call   c0000570 <strlen>
c000dcf9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dcfd:	8d 48 01             	lea    ecx,[eax+0x1]
c000dd00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd05:	89 de                	mov    esi,ebx
c000dd07:	e8 64 28 ff ff       	call   c0000570 <strlen>
c000dd0c:	83 c4 0c             	add    esp,0xc
c000dd0f:	40                   	inc    eax
c000dd10:	50                   	push   eax
c000dd11:	6a 00                	push   0x0
c000dd13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd17:	e8 d4 27 ff ff       	call   c00004f0 <memset>
c000dd1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd1f:	e8 4c 28 ff ff       	call   c0000570 <strlen>
c000dd24:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000dd28:	8d 48 01             	lea    ecx,[eax+0x1]
c000dd2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd2d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dd30:	40                   	inc    eax
c000dd31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000dd34:	c1 e0 03             	shl    eax,0x3
c000dd37:	5a                   	pop    edx
c000dd38:	59                   	pop    ecx
c000dd39:	50                   	push   eax
c000dd3a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dd3d:	e8 c9 17 00 00       	call   c000f50b <realloc>
c000dd42:	8d 74 24 18          	lea    esi,[esp+0x18]
c000dd46:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000dd49:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000dd4c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000dd50:	b9 08 00 00 00       	mov    ecx,0x8
c000dd55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd57:	83 c4 2c             	add    esp,0x2c
c000dd5a:	5b                   	pop    ebx
c000dd5b:	5e                   	pop    esi
c000dd5c:	5f                   	pop    edi
c000dd5d:	5d                   	pop    ebp
c000dd5e:	c3                   	ret    
c000dd5f:	90                   	nop

c000dd60 <EnvVarContainer::deleteEnv(char const*)>:
c000dd60:	c3                   	ret    
c000dd61:	90                   	nop

c000dd62 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000dd62:	55                   	push   ebp
c000dd63:	57                   	push   edi
c000dd64:	56                   	push   esi
c000dd65:	53                   	push   ebx
c000dd66:	81 ec 38 01 00 00    	sub    esp,0x138
c000dd6c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000dd73:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000dd7a:	68 14 01 00 00       	push   0x114
c000dd7f:	e8 9b 17 00 00       	call   c000f51f <malloc>
c000dd84:	83 c4 0c             	add    esp,0xc
c000dd87:	89 c3                	mov    ebx,eax
c000dd89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dd8c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000dd93:	50                   	push   eax
c000dd94:	e8 99 a3 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000dd99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd9c:	e8 73 a6 ff ff       	call   c0008414 <File::exists()>
c000dda1:	83 c4 10             	add    esp,0x10
c000dda4:	84 c0                	test   al,al
c000dda6:	75 31                	jne    c000ddd9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000dda8:	50                   	push   eax
c000dda9:	50                   	push   eax
c000ddaa:	6a 12                	push   0x12
c000ddac:	53                   	push   ebx
c000ddad:	e8 9e a3 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000ddb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ddb4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000ddb7:	89 34 24             	mov    DWORD PTR [esp],esi
c000ddba:	e8 b1 27 ff ff       	call   c0000570 <strlen>
c000ddbf:	5a                   	pop    edx
c000ddc0:	31 d2                	xor    edx,edx
c000ddc2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ddc6:	51                   	push   ecx
c000ddc7:	56                   	push   esi
c000ddc8:	52                   	push   edx
c000ddc9:	50                   	push   eax
c000ddca:	53                   	push   ebx
c000ddcb:	ff d7                	call   edi
c000ddcd:	83 c4 14             	add    esp,0x14
c000ddd0:	53                   	push   ebx
c000ddd1:	e8 d8 a3 ff ff       	call   c00081ae <File::close()>
c000ddd6:	83 c4 10             	add    esp,0x10
c000ddd9:	56                   	push   esi
c000ddda:	31 f6                	xor    esi,esi
c000dddc:	68 00 01 00 00       	push   0x100
c000dde1:	6a 00                	push   0x0
c000dde3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dde7:	50                   	push   eax
c000dde8:	e8 03 27 ff ff       	call   c00004f0 <memset>
c000dded:	5f                   	pop    edi
c000ddee:	58                   	pop    eax
c000ddef:	6a 01                	push   0x1
c000ddf1:	53                   	push   ebx
c000ddf2:	e8 59 a3 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000ddf7:	83 c4 10             	add    esp,0x10
c000ddfa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000de02:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de0a:	83 ec 0c             	sub    esp,0xc
c000de0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de0f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000de13:	51                   	push   ecx
c000de14:	8d 54 24 23          	lea    edx,[esp+0x23]
c000de18:	52                   	push   edx
c000de19:	6a 00                	push   0x0
c000de1b:	6a 01                	push   0x1
c000de1d:	53                   	push   ebx
c000de1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000de21:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000de26:	83 c4 20             	add    esp,0x20
c000de29:	89 c2                	mov    edx,eax
c000de2b:	85 c0                	test   eax,eax
c000de2d:	0f 84 36 01 00 00    	je     c000df69 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000de33:	83 f8 0d             	cmp    eax,0xd
c000de36:	0f 84 22 01 00 00    	je     c000df5e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000de3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000de41:	0f 84 f0 00 00 00    	je     c000df37 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000de47:	83 f8 0a             	cmp    eax,0xa
c000de4a:	74 13                	je     c000de5f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000de4c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000de51:	74 0c                	je     c000de5f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000de53:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000de59:	0f 8e f6 00 00 00    	jle    c000df55 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000de5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de63:	83 ec 0c             	sub    esp,0xc
c000de66:	8d 78 01             	lea    edi,[eax+0x1]
c000de69:	57                   	push   edi
c000de6a:	e8 b0 16 00 00       	call   c000f51f <malloc>
c000de6f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000de73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000de77:	8d 56 04             	lea    edx,[esi+0x4]
c000de7a:	89 14 24             	mov    DWORD PTR [esp],edx
c000de7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de81:	e8 99 16 00 00       	call   c000f51f <malloc>
c000de86:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de8a:	83 c4 0c             	add    esp,0xc
c000de8d:	57                   	push   edi
c000de8e:	6a 00                	push   0x0
c000de90:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000de94:	e8 57 26 ff ff       	call   c00004f0 <memset>
c000de99:	8d 74 24 30          	lea    esi,[esp+0x30]
c000de9d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dea1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000dea5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dea7:	83 c4 0c             	add    esp,0xc
c000deaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deae:	52                   	push   edx
c000deaf:	6a 00                	push   0x0
c000deb1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000deb5:	e8 36 26 ff ff       	call   c00004f0 <memset>
c000deba:	8d 74 24 30          	lea    esi,[esp+0x30]
c000debe:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000dec2:	89 34 24             	mov    DWORD PTR [esp],esi
c000dec5:	e8 a6 26 ff ff       	call   c0000570 <strlen>
c000deca:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000dece:	89 c1                	mov    ecx,eax
c000ded0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ded2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ded5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ded8:	40                   	inc    eax
c000ded9:	83 c4 10             	add    esp,0x10
c000dedc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000dedf:	85 d2                	test   edx,edx
c000dee1:	75 0c                	jne    c000deef <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000dee3:	83 ec 0c             	sub    esp,0xc
c000dee6:	6a 08                	push   0x8
c000dee8:	e8 32 16 00 00       	call   c000f51f <malloc>
c000deed:	eb 0c                	jmp    c000defb <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000deef:	c1 e0 03             	shl    eax,0x3
c000def2:	51                   	push   ecx
c000def3:	51                   	push   ecx
c000def4:	50                   	push   eax
c000def5:	52                   	push   edx
c000def6:	e8 10 16 00 00       	call   c000f50b <realloc>
c000defb:	83 c4 10             	add    esp,0x10
c000defe:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000df01:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000df04:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000df07:	8d 74 24 18          	lea    esi,[esp+0x18]
c000df0b:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000df0f:	b9 08 00 00 00       	mov    ecx,0x8
c000df14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df16:	31 f6                	xor    esi,esi
c000df18:	50                   	push   eax
c000df19:	68 00 01 00 00       	push   0x100
c000df1e:	6a 00                	push   0x0
c000df20:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000df24:	50                   	push   eax
c000df25:	e8 c6 25 ff ff       	call   c00004f0 <memset>
c000df2a:	83 c4 10             	add    esp,0x10
c000df2d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000df35:	eb 27                	jmp    c000df5e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000df37:	83 f8 3d             	cmp    eax,0x3d
c000df3a:	74 1e                	je     c000df5a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000df3c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000df42:	7f 07                	jg     c000df4b <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000df44:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000df48:	46                   	inc    esi
c000df49:	eb 13                	jmp    c000df5e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000df4b:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000df53:	eb 09                	jmp    c000df5e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000df55:	83 f8 3d             	cmp    eax,0x3d
c000df58:	75 ea                	jne    c000df44 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000df5a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000df5e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000df63:	0f 85 99 fe ff ff    	jne    c000de02 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000df69:	83 ec 0c             	sub    esp,0xc
c000df6c:	53                   	push   ebx
c000df6d:	e8 3c a2 ff ff       	call   c00081ae <File::close()>
c000df72:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000df77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000df7a:	81 c4 3c 01 00 00    	add    esp,0x13c
c000df80:	5b                   	pop    ebx
c000df81:	5e                   	pop    esi
c000df82:	5f                   	pop    edi
c000df83:	5d                   	pop    ebp
c000df84:	c3                   	ret    
c000df85:	90                   	nop

c000df86 <EnvVarContainer::__loadSystem()>:
c000df86:	83 ec 10             	sub    esp,0x10
c000df89:	68 e0 58 02 c0       	push   0xc00258e0
c000df8e:	68 a0 32 02 c0       	push   0xc00232a0
c000df93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df97:	e8 c6 fd ff ff       	call   c000dd62 <EnvVarContainer::loadFrom(char const*, char const*)>
c000df9c:	83 c4 1c             	add    esp,0x1c
c000df9f:	c3                   	ret    

c000dfa0 <EnvVarContainer::__loadUser()>:
c000dfa0:	c3                   	ret    
c000dfa1:	90                   	nop

c000dfa2 <EnvVarContainer::EnvVarContainer(Process*)>:
c000dfa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfa6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dfac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dfb4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dfb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfbb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dfc2:	90                   	nop
c000dfc3:	c3                   	ret    

c000dfc4 <EnvVarContainer::~EnvVarContainer()>:
c000dfc4:	83 ec 0c             	sub    esp,0xc
c000dfc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dfce:	85 c0                	test   eax,eax
c000dfd0:	74 1d                	je     c000dfef <EnvVarContainer::~EnvVarContainer()+0x2b>
c000dfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd6:	8b 00                	mov    eax,DWORD PTR [eax]
c000dfd8:	85 c0                	test   eax,eax
c000dfda:	74 13                	je     c000dfef <EnvVarContainer::~EnvVarContainer()+0x2b>
c000dfdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dfe3:	83 ec 0c             	sub    esp,0xc
c000dfe6:	50                   	push   eax
c000dfe7:	e8 43 15 00 00       	call   c000f52f <free>
c000dfec:	83 c4 10             	add    esp,0x10
c000dfef:	90                   	nop
c000dff0:	83 c4 0c             	add    esp,0xc
c000dff3:	c3                   	ret    

c000dff4 <KeGetEnv(Process*, char const*)>:
c000dff4:	53                   	push   ebx
c000dff5:	83 ec 08             	sub    esp,0x8
c000dff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e000:	39 05 58 da 02 c0    	cmp    DWORD PTR ds:0xc002da58,eax
c000e006:	74 04                	je     c000e00c <KeGetEnv(Process*, char const*)+0x18>
c000e008:	85 c0                	test   eax,eax
c000e00a:	75 0b                	jne    c000e017 <KeGetEnv(Process*, char const*)+0x23>
c000e00c:	a1 d8 b0 02 c0       	mov    eax,ds:0xc002b0d8
c000e011:	85 c0                	test   eax,eax
c000e013:	75 19                	jne    c000e02e <KeGetEnv(Process*, char const*)+0x3a>
c000e015:	eb 27                	jmp    c000e03e <KeGetEnv(Process*, char const*)+0x4a>
c000e017:	52                   	push   edx
c000e018:	52                   	push   edx
c000e019:	53                   	push   ebx
c000e01a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000e020:	e8 3b fc ff ff       	call   c000dc60 <EnvVarContainer::getEnv(char const*)>
c000e025:	83 c4 10             	add    esp,0x10
c000e028:	85 c0                	test   eax,eax
c000e02a:	75 28                	jne    c000e054 <KeGetEnv(Process*, char const*)+0x60>
c000e02c:	eb de                	jmp    c000e00c <KeGetEnv(Process*, char const*)+0x18>
c000e02e:	52                   	push   edx
c000e02f:	52                   	push   edx
c000e030:	53                   	push   ebx
c000e031:	50                   	push   eax
c000e032:	e8 29 fc ff ff       	call   c000dc60 <EnvVarContainer::getEnv(char const*)>
c000e037:	83 c4 10             	add    esp,0x10
c000e03a:	85 c0                	test   eax,eax
c000e03c:	75 16                	jne    c000e054 <KeGetEnv(Process*, char const*)+0x60>
c000e03e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e042:	a1 dc b0 02 c0       	mov    eax,ds:0xc002b0dc
c000e047:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e04b:	83 c4 08             	add    esp,0x8
c000e04e:	5b                   	pop    ebx
c000e04f:	e9 0c fc ff ff       	jmp    c000dc60 <EnvVarContainer::getEnv(char const*)>
c000e054:	83 c4 08             	add    esp,0x8
c000e057:	5b                   	pop    ebx
c000e058:	c3                   	ret    

c000e059 <KeSetEnvSystem(char const*, char const*)>:
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e060:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e064:	ff 35 dc b0 02 c0    	push   DWORD PTR ds:0xc002b0dc
c000e06a:	e8 2f fc ff ff       	call   c000dc9e <EnvVarContainer::setEnv(char const*, char const*)>
c000e06f:	83 c4 1c             	add    esp,0x1c
c000e072:	c3                   	ret    

c000e073 <KeSetEnvUser(char const*, char const*)>:
c000e073:	a1 d8 b0 02 c0       	mov    eax,ds:0xc002b0d8
c000e078:	85 c0                	test   eax,eax
c000e07a:	74 15                	je     c000e091 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e07c:	83 ec 10             	sub    esp,0x10
c000e07f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e083:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e087:	50                   	push   eax
c000e088:	e8 11 fc ff ff       	call   c000dc9e <EnvVarContainer::setEnv(char const*, char const*)>
c000e08d:	83 c4 1c             	add    esp,0x1c
c000e090:	c3                   	ret    
c000e091:	c3                   	ret    

c000e092 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e096:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000e09c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e0a0:	e9 f9 fb ff ff       	jmp    c000dc9e <EnvVarContainer::setEnv(char const*, char const*)>

c000e0a5 <KeDeleteEnvSystem(char const*)>:
c000e0a5:	c3                   	ret    

c000e0a6 <KeDeleteEnvUser(char const*)>:
c000e0a6:	c3                   	ret    

c000e0a7 <KeDeleteEnvProcess(Process*, char const*)>:
c000e0a7:	c3                   	ret    

c000e0a8 <KeNewProcessEnv(Process*)>:
c000e0a8:	83 ec 28             	sub    esp,0x28
c000e0ab:	6a 0c                	push   0xc
c000e0ad:	e8 6d 14 00 00       	call   c000f51f <malloc>
c000e0b2:	5a                   	pop    edx
c000e0b3:	59                   	pop    ecx
c000e0b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e0b8:	50                   	push   eax
c000e0b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0bd:	e8 e0 fe ff ff       	call   c000dfa2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e0c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e0c6:	83 c4 2c             	add    esp,0x2c
c000e0c9:	c3                   	ret    

c000e0ca <KeCopyProcessEnv(Process*, Process*)>:
c000e0ca:	57                   	push   edi
c000e0cb:	56                   	push   esi
c000e0cc:	53                   	push   ebx
c000e0cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0d1:	83 ec 0c             	sub    esp,0xc
c000e0d4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000e0da:	6a 0c                	push   0xc
c000e0dc:	e8 3e 14 00 00       	call   c000f51f <malloc>
c000e0e1:	89 c3                	mov    ebx,eax
c000e0e3:	58                   	pop    eax
c000e0e4:	5a                   	pop    edx
c000e0e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0e9:	53                   	push   ebx
c000e0ea:	e8 b3 fe ff ff       	call   c000dfa2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e0ef:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0f1:	89 03                	mov    DWORD PTR [ebx],eax
c000e0f3:	c1 e0 03             	shl    eax,0x3
c000e0f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0f9:	e8 21 14 00 00       	call   c000f51f <malloc>
c000e0fe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e101:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e103:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e106:	c1 e1 03             	shl    ecx,0x3
c000e109:	89 c7                	mov    edi,eax
c000e10b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 d8                	mov    eax,ebx
c000e112:	5b                   	pop    ebx
c000e113:	5e                   	pop    esi
c000e114:	5f                   	pop    edi
c000e115:	c3                   	ret    

c000e116 <KeLoadSystemEnv()>:
c000e116:	53                   	push   ebx
c000e117:	83 ec 14             	sub    esp,0x14
c000e11a:	6a 0c                	push   0xc
c000e11c:	e8 fe 13 00 00       	call   c000f51f <malloc>
c000e121:	89 c3                	mov    ebx,eax
c000e123:	58                   	pop    eax
c000e124:	5a                   	pop    edx
c000e125:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c000e12b:	53                   	push   ebx
c000e12c:	e8 71 fe ff ff       	call   c000dfa2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e131:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e134:	89 1d dc b0 02 c0    	mov    DWORD PTR ds:0xc002b0dc,ebx
c000e13a:	e8 47 fe ff ff       	call   c000df86 <EnvVarContainer::__loadSystem()>
c000e13f:	83 c4 18             	add    esp,0x18
c000e142:	5b                   	pop    ebx
c000e143:	c3                   	ret    

c000e144 <KeLoadUserEnv()>:
c000e144:	53                   	push   ebx
c000e145:	83 ec 14             	sub    esp,0x14
c000e148:	6a 0c                	push   0xc
c000e14a:	e8 d0 13 00 00       	call   c000f51f <malloc>
c000e14f:	89 c3                	mov    ebx,eax
c000e151:	58                   	pop    eax
c000e152:	5a                   	pop    edx
c000e153:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c000e159:	53                   	push   ebx
c000e15a:	e8 43 fe ff ff       	call   c000dfa2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e15f:	89 1d d8 b0 02 c0    	mov    DWORD PTR ds:0xc002b0d8,ebx
c000e165:	83 c4 18             	add    esp,0x18
c000e168:	5b                   	pop    ebx
c000e169:	c3                   	ret    

c000e16a <KeFlushEnv()>:
c000e16a:	c3                   	ret    

c000e16b <KeGetProcessTotalEnvCount(Process*)>:
c000e16b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e16f:	8b 15 d8 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b0d8
c000e175:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000e17b:	a1 dc b0 02 c0       	mov    eax,ds:0xc002b0dc
c000e180:	8b 00                	mov    eax,DWORD PTR [eax]
c000e182:	03 01                	add    eax,DWORD PTR [ecx]
c000e184:	85 d2                	test   edx,edx
c000e186:	74 02                	je     c000e18a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e188:	03 02                	add    eax,DWORD PTR [edx]
c000e18a:	c3                   	ret    

c000e18b <KeGetProcessEnvPair(Process*, int)>:
c000e18b:	57                   	push   edi
c000e18c:	56                   	push   esi
c000e18d:	8b 35 d8 b0 02 c0    	mov    esi,DWORD PTR ds:0xc002b0d8
c000e193:	53                   	push   ebx
c000e194:	85 f6                	test   esi,esi
c000e196:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e19a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e19e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000e1a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e1a8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e1aa:	75 16                	jne    c000e1c2 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e1ac:	39 c2                	cmp    edx,eax
c000e1ae:	7c 16                	jl     c000e1c6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e1b0:	8b 0d dc b0 02 c0    	mov    ecx,DWORD PTR ds:0xc002b0dc
c000e1b6:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e1b8:	01 c6                	add    esi,eax
c000e1ba:	39 d6                	cmp    esi,edx
c000e1bc:	7e 3c                	jle    c000e1fa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e1be:	29 c2                	sub    edx,eax
c000e1c0:	eb 04                	jmp    c000e1c6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e1c2:	39 c2                	cmp    edx,eax
c000e1c4:	7d 05                	jge    c000e1cb <KeGetProcessEnvPair(Process*, int)+0x40>
c000e1c6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e1c9:	eb 20                	jmp    c000e1eb <KeGetProcessEnvPair(Process*, int)+0x60>
c000e1cb:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e1cd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e1d0:	39 d1                	cmp    ecx,edx
c000e1d2:	7e 04                	jle    c000e1d8 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e1d4:	29 c2                	sub    edx,eax
c000e1d6:	eb 10                	jmp    c000e1e8 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e1d8:	8b 35 dc b0 02 c0    	mov    esi,DWORD PTR ds:0xc002b0dc
c000e1de:	03 0e                	add    ecx,DWORD PTR [esi]
c000e1e0:	39 d1                	cmp    ecx,edx
c000e1e2:	7e 16                	jle    c000e1fa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e1e4:	29 c2                	sub    edx,eax
c000e1e6:	29 fa                	sub    edx,edi
c000e1e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e1eb:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e1ee:	8b 02                	mov    eax,DWORD PTR [edx]
c000e1f0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e1f3:	89 03                	mov    DWORD PTR [ebx],eax
c000e1f5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e1f8:	eb 1d                	jmp    c000e217 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e1fa:	83 ec 0c             	sub    esp,0xc
c000e1fd:	68 c2 32 02 c0       	push   0xc00232c2
c000e202:	e8 5f 16 00 00       	call   c000f866 <KePanic(char const*)>
c000e207:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e20d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e214:	83 c4 10             	add    esp,0x10
c000e217:	89 d8                	mov    eax,ebx
c000e219:	5b                   	pop    ebx
c000e21a:	5e                   	pop    esi
c000e21b:	5f                   	pop    edi
c000e21c:	c2 04 00             	ret    0x4
c000e21f:	90                   	nop

c000e220 <KeSetupInterrupts()>:
c000e220:	83 ec 10             	sub    esp,0x10
c000e223:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e22b:	90                   	nop
c000e22c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e234:	7f 5a                	jg     c000e290 <KeSetupInterrupts()+0x70>
c000e236:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e23e:	66 90                	xchg   ax,ax
c000e240:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e245:	7f 41                	jg     c000e288 <KeSetupInterrupts()+0x68>
c000e247:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e24b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e252:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e256:	01 d0                	add    eax,edx
c000e258:	c7 04 85 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd3f20],0x0
c000e263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e267:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e26e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e272:	01 d0                	add    eax,edx
c000e274:	c7 04 85 e0 b0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd4f20],0x0
c000e27f:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e284:	eb ba                	jmp    c000e240 <KeSetupInterrupts()+0x20>
c000e286:	66 90                	xchg   ax,ax
c000e288:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e28d:	eb 9d                	jmp    c000e22c <KeSetupInterrupts()+0xc>
c000e28f:	90                   	nop
c000e290:	90                   	nop
c000e291:	83 c4 10             	add    esp,0x10
c000e294:	c3                   	ret    
c000e295:	8d 76 00             	lea    esi,[esi+0x0]

c000e298 <int_handler>:
c000e298:	83 ec 2c             	sub    esp,0x2c
c000e29b:	90                   	nop
c000e29c:	a0 28 d1 02 c0       	mov    al,ds:0xc002d128
c000e2a1:	0f b6 c0             	movzx  eax,al
c000e2a4:	85 c0                	test   eax,eax
c000e2a6:	74 04                	je     c000e2ac <int_handler+0x14>
c000e2a8:	fa                   	cli    
c000e2a9:	f4                   	hlt    
c000e2aa:	eb f0                	jmp    c000e29c <int_handler+0x4>
c000e2ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e2b0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e2b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2b7:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e2bc:	7e 1a                	jle    c000e2d8 <int_handler+0x40>
c000e2be:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e2c3:	7f 13                	jg     c000e2d8 <int_handler+0x40>
c000e2c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2c9:	83 e8 20             	sub    eax,0x20
c000e2cc:	83 ec 0c             	sub    esp,0xc
c000e2cf:	50                   	push   eax
c000e2d0:	e8 2f b4 00 00       	call   c0019704 <HalEndOfInterrupt(int)>
c000e2d5:	83 c4 10             	add    esp,0x10
c000e2d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2dc:	c1 e0 04             	shl    eax,0x4
c000e2df:	05 e0 c0 02 c0       	add    eax,0xc002c0e0
c000e2e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e2e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2ec:	c1 e0 04             	shl    eax,0x4
c000e2ef:	05 e0 b0 02 c0       	add    eax,0xc002b0e0
c000e2f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2f8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e300:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000e305:	0f 8f ad 00 00 00    	jg     c000e3b8 <int_handler+0x120>
c000e30b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e30f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e316:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e31a:	01 d0                	add    eax,edx
c000e31c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e31e:	85 c0                	test   eax,eax
c000e320:	0f 84 86 00 00 00    	je     c000e3ac <int_handler+0x114>
c000e326:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e32a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e32d:	83 f8 60             	cmp    eax,0x60
c000e330:	75 46                	jne    c000e378 <int_handler+0xe0>
c000e332:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e336:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e33d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e341:	01 d0                	add    eax,edx
c000e343:	8b 00                	mov    eax,DWORD PTR [eax]
c000e345:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e349:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e350:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e354:	01 ca                	add    edx,ecx
c000e356:	8b 12                	mov    edx,DWORD PTR [edx]
c000e358:	83 ec 08             	sub    esp,0x8
c000e35b:	52                   	push   edx
c000e35c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e360:	ff d0                	call   eax
c000e362:	83 c4 10             	add    esp,0x10
c000e365:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e369:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e36d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e371:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e375:	eb 4d                	jmp    c000e3c4 <int_handler+0x12c>
c000e377:	90                   	nop
c000e378:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e37c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e383:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e387:	01 d0                	add    eax,edx
c000e389:	8b 00                	mov    eax,DWORD PTR [eax]
c000e38b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e38f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e396:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e39a:	01 ca                	add    edx,ecx
c000e39c:	8b 12                	mov    edx,DWORD PTR [edx]
c000e39e:	83 ec 08             	sub    esp,0x8
c000e3a1:	52                   	push   edx
c000e3a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e3a6:	ff d0                	call   eax
c000e3a8:	83 c4 10             	add    esp,0x10
c000e3ab:	90                   	nop
c000e3ac:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000e3b1:	e9 4a ff ff ff       	jmp    c000e300 <int_handler+0x68>
c000e3b6:	66 90                	xchg   ax,ax
c000e3b8:	b8 00 00 00 00       	mov    eax,0x0
c000e3bd:	ba 00 00 00 00       	mov    edx,0x0
c000e3c2:	66 90                	xchg   ax,ax
c000e3c4:	83 c4 2c             	add    esp,0x2c
c000e3c7:	c3                   	ret    

c000e3c8 <KeDisplayProgramFault(char const*)>:
c000e3c8:	83 ec 0c             	sub    esp,0xc
c000e3cb:	83 ec 0c             	sub    esp,0xc
c000e3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d2:	e8 8d 8b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e3d7:	83 c4 10             	add    esp,0x10
c000e3da:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e3df:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3e1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e3e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e3ea:	85 c0                	test   eax,eax
c000e3ec:	74 22                	je     c000e410 <KeDisplayProgramFault(char const*)+0x48>
c000e3ee:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e3f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e3f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e3fe:	6a 04                	push   0x4
c000e400:	6a 0f                	push   0xf
c000e402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e406:	50                   	push   eax
c000e407:	e8 86 3c 00 00       	call   c0012092 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e40c:	83 c4 10             	add    esp,0x10
c000e40f:	90                   	nop
c000e410:	90                   	nop
c000e411:	83 c4 0c             	add    esp,0xc
c000e414:	c3                   	ret    
c000e415:	8d 76 00             	lea    esi,[esi+0x0]

c000e418 <KeGeneralProtectionFault(void*, void*)>:
c000e418:	83 ec 0c             	sub    esp,0xc
c000e41b:	83 ec 08             	sub    esp,0x8
c000e41e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e426:	e8 7b a8 00 00       	call   c0018ca6 <HalHandleGeneralProtectionFault(void*, void*)>
c000e42b:	83 c4 10             	add    esp,0x10
c000e42e:	0f b6 c0             	movzx  eax,al
c000e431:	85 c0                	test   eax,eax
c000e433:	75 2f                	jne    c000e464 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e435:	83 ec 0c             	sub    esp,0xc
c000e438:	68 dc 32 02 c0       	push   0xc00232dc
c000e43d:	e8 86 ff ff ff       	call   c000e3c8 <KeDisplayProgramFault(char const*)>
c000e442:	83 c4 10             	add    esp,0x10
c000e445:	83 ec 0c             	sub    esp,0xc
c000e448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44c:	e8 ef a9 00 00       	call   c0018e40 <HalDisplayDebugInfo(void*)>
c000e451:	83 c4 10             	add    esp,0x10
c000e454:	83 ec 0c             	sub    esp,0xc
c000e457:	6a 00                	push   0x0
c000e459:	e8 e6 88 00 00       	call   c0016d44 <Thr::terminateFromIRQ(int)>
c000e45e:	83 c4 10             	add    esp,0x10
c000e461:	eb 05                	jmp    c000e468 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e463:	90                   	nop
c000e464:	90                   	nop
c000e465:	8d 76 00             	lea    esi,[esi+0x0]
c000e468:	83 c4 0c             	add    esp,0xc
c000e46b:	c3                   	ret    

c000e46c <KePageFault(void*, void*)>:
c000e46c:	83 ec 0c             	sub    esp,0xc
c000e46f:	83 ec 0c             	sub    esp,0xc
c000e472:	68 f5 32 02 c0       	push   0xc00232f5
c000e477:	e8 e8 8a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e47c:	83 c4 10             	add    esp,0x10
c000e47f:	83 ec 08             	sub    esp,0x8
c000e482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e48a:	e8 c2 a8 00 00       	call   c0018d51 <HalHandlePageFault(void*, void*)>
c000e48f:	83 c4 10             	add    esp,0x10
c000e492:	0f b6 c0             	movzx  eax,al
c000e495:	85 c0                	test   eax,eax
c000e497:	75 2f                	jne    c000e4c8 <KePageFault(void*, void*)+0x5c>
c000e499:	83 ec 0c             	sub    esp,0xc
c000e49c:	68 02 33 02 c0       	push   0xc0023302
c000e4a1:	e8 22 ff ff ff       	call   c000e3c8 <KeDisplayProgramFault(char const*)>
c000e4a6:	83 c4 10             	add    esp,0x10
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b0:	e8 8b a9 00 00       	call   c0018e40 <HalDisplayDebugInfo(void*)>
c000e4b5:	83 c4 10             	add    esp,0x10
c000e4b8:	83 ec 0c             	sub    esp,0xc
c000e4bb:	6a 00                	push   0x0
c000e4bd:	e8 82 88 00 00       	call   c0016d44 <Thr::terminateFromIRQ(int)>
c000e4c2:	83 c4 10             	add    esp,0x10
c000e4c5:	eb 05                	jmp    c000e4cc <KePageFault(void*, void*)+0x60>
c000e4c7:	90                   	nop
c000e4c8:	90                   	nop
c000e4c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4cc:	83 c4 0c             	add    esp,0xc
c000e4cf:	c3                   	ret    

c000e4d0 <KeNonMaskableInterrupt(void*, void*)>:
c000e4d0:	83 ec 0c             	sub    esp,0xc
c000e4d3:	e8 f6 ac 00 00       	call   c00191ce <HalReceivedNMI()>
c000e4d8:	90                   	nop
c000e4d9:	83 c4 0c             	add    esp,0xc
c000e4dc:	c3                   	ret    
c000e4dd:	8d 76 00             	lea    esi,[esi+0x0]

c000e4e0 <KeOtherFault(void*, void*)>:
c000e4e0:	83 ec 0c             	sub    esp,0xc
c000e4e3:	83 ec 0c             	sub    esp,0xc
c000e4e6:	68 10 33 02 c0       	push   0xc0023310
c000e4eb:	e8 d8 fe ff ff       	call   c000e3c8 <KeDisplayProgramFault(char const*)>
c000e4f0:	83 c4 10             	add    esp,0x10
c000e4f3:	83 ec 0c             	sub    esp,0xc
c000e4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4fa:	e8 41 a9 00 00       	call   c0018e40 <HalDisplayDebugInfo(void*)>
c000e4ff:	83 c4 10             	add    esp,0x10
c000e502:	83 ec 0c             	sub    esp,0xc
c000e505:	6a 00                	push   0x0
c000e507:	e8 38 88 00 00       	call   c0016d44 <Thr::terminateFromIRQ(int)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	90                   	nop
c000e510:	83 c4 0c             	add    esp,0xc
c000e513:	c3                   	ret    

c000e514 <KeOpcodeFault(void*, void*)>:
c000e514:	55                   	push   ebp
c000e515:	89 e5                	mov    ebp,esp
c000e517:	83 ec 08             	sub    esp,0x8
c000e51a:	83 ec 08             	sub    esp,0x8
c000e51d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e520:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e523:	e8 d6 a8 00 00       	call   c0018dfe <HalHandleOpcodeFault(void*, void*)>
c000e528:	83 c4 10             	add    esp,0x10
c000e52b:	0f b6 c0             	movzx  eax,al
c000e52e:	85 c0                	test   eax,eax
c000e530:	75 2e                	jne    c000e560 <KeOpcodeFault(void*, void*)+0x4c>
c000e532:	83 ec 0c             	sub    esp,0xc
c000e535:	68 38 33 02 c0       	push   0xc0023338
c000e53a:	e8 89 fe ff ff       	call   c000e3c8 <KeDisplayProgramFault(char const*)>
c000e53f:	83 c4 10             	add    esp,0x10
c000e542:	83 ec 0c             	sub    esp,0xc
c000e545:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e548:	e8 f3 a8 00 00       	call   c0018e40 <HalDisplayDebugInfo(void*)>
c000e54d:	83 c4 10             	add    esp,0x10
c000e550:	83 ec 0c             	sub    esp,0xc
c000e553:	6a 00                	push   0x0
c000e555:	e8 ea 87 00 00       	call   c0016d44 <Thr::terminateFromIRQ(int)>
c000e55a:	83 c4 10             	add    esp,0x10
c000e55d:	eb 05                	jmp    c000e564 <KeOpcodeFault(void*, void*)+0x50>
c000e55f:	90                   	nop
c000e560:	90                   	nop
c000e561:	8d 76 00             	lea    esi,[esi+0x0]
c000e564:	c9                   	leave  
c000e565:	c3                   	ret    
c000e566:	66 90                	xchg   ax,ax

c000e568 <KeDoubleFault(void*, void*)>:
c000e568:	55                   	push   ebp
c000e569:	89 e5                	mov    ebp,esp
c000e56b:	83 ec 08             	sub    esp,0x8
c000e56e:	83 ec 0c             	sub    esp,0xc
c000e571:	68 45 33 02 c0       	push   0xc0023345
c000e576:	e8 eb 12 00 00       	call   c000f866 <KePanic(char const*)>
c000e57b:	83 c4 10             	add    esp,0x10
c000e57e:	90                   	nop
c000e57f:	c9                   	leave  
c000e580:	c3                   	ret    
c000e581:	90                   	nop

c000e582 <GDTEntry::setBase(unsigned int)>:
c000e582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e586:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e58a:	89 c1                	mov    ecx,eax
c000e58c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e590:	c1 e9 10             	shr    ecx,0x10
c000e593:	c1 e8 18             	shr    eax,0x18
c000e596:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e599:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e59c:	c3                   	ret    
c000e59d:	90                   	nop

c000e59e <GDTEntry::setLimit(unsigned int)>:
c000e59e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e5a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5a6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e5a9:	66 89 01             	mov    WORD PTR [ecx],ax
c000e5ac:	83 e2 f0             	and    edx,0xfffffff0
c000e5af:	c1 e8 10             	shr    eax,0x10
c000e5b2:	83 e0 0f             	and    eax,0xf
c000e5b5:	09 d0                	or     eax,edx
c000e5b7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e5ba:	c3                   	ret    
c000e5bb:	90                   	nop

c000e5bc <GDT::GDT()>:
c000e5bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e5c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e5d0:	90                   	nop
c000e5d1:	c3                   	ret    

c000e5d2 <GDT::addEntry(GDTEntry)>:
c000e5d2:	53                   	push   ebx
c000e5d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5db:	8b 02                	mov    eax,DWORD PTR [edx]
c000e5dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e5e1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e5e5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e5e9:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5ec:	c1 e0 03             	shl    eax,0x3
c000e5ef:	89 0a                	mov    DWORD PTR [edx],ecx
c000e5f1:	5b                   	pop    ebx
c000e5f2:	c3                   	ret    
c000e5f3:	90                   	nop

c000e5f4 <GDT::getNumberOfEntries()>:
c000e5f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5fa:	c3                   	ret    
c000e5fb:	90                   	nop

c000e5fc <GDT::flush()>:
c000e5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e600:	8b 10                	mov    edx,DWORD PTR [eax]
c000e602:	83 c0 04             	add    eax,0x4
c000e605:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e60c:	a3 e2 d0 02 c0       	mov    ds:0xc002d0e2,eax
c000e611:	66 89 15 e0 d0 02 c0 	mov    WORD PTR ds:0xc002d0e0,dx
c000e618:	e9 3d 1d ff ff       	jmp    c000035a <loadGDT>
c000e61d:	90                   	nop

c000e61e <GDT::setup()>:
c000e61e:	57                   	push   edi
c000e61f:	56                   	push   esi
c000e620:	53                   	push   ebx
c000e621:	83 ec 30             	sub    esp,0x30
c000e624:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e628:	6a 00                	push   0x0
c000e62a:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e62e:	56                   	push   esi
c000e62f:	e8 4e ff ff ff       	call   c000e582 <GDTEntry::setBase(unsigned int)>
c000e634:	6a 00                	push   0x0
c000e636:	56                   	push   esi
c000e637:	e8 62 ff ff ff       	call   c000e59e <GDTEntry::setLimit(unsigned int)>
c000e63c:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e644:	6a 00                	push   0x0
c000e646:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e64a:	56                   	push   esi
c000e64b:	e8 32 ff ff ff       	call   c000e582 <GDTEntry::setBase(unsigned int)>
c000e650:	68 ff ff ff 00       	push   0xffffff
c000e655:	56                   	push   esi
c000e656:	e8 43 ff ff ff       	call   c000e59e <GDTEntry::setLimit(unsigned int)>
c000e65b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e65f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e663:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e667:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e66b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e670:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e675:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e679:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e67d:	89 f8                	mov    eax,edi
c000e67f:	89 fa                	mov    edx,edi
c000e681:	80 e4 f7             	and    ah,0xf7
c000e684:	80 ce 60             	or     dh,0x60
c000e687:	89 c7                	mov    edi,eax
c000e689:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e68d:	80 cc 60             	or     ah,0x60
c000e690:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e694:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e698:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e69c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6a4:	83 c4 20             	add    esp,0x20
c000e6a7:	6a 00                	push   0x0
c000e6a9:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e6ad:	50                   	push   eax
c000e6ae:	e8 cf fe ff ff       	call   c000e582 <GDTEntry::setBase(unsigned int)>
c000e6b3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e6b7:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e6bb:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e6bf:	83 e0 3f             	and    eax,0x3f
c000e6c2:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e6c6:	6a 00                	push   0x0
c000e6c8:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e6cc:	50                   	push   eax
c000e6cd:	e8 b0 fe ff ff       	call   c000e582 <GDTEntry::setBase(unsigned int)>
c000e6d2:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e6d6:	83 e0 3f             	and    eax,0x3f
c000e6d9:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e6dd:	83 c4 0c             	add    esp,0xc
c000e6e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6e8:	53                   	push   ebx
c000e6e9:	e8 e4 fe ff ff       	call   c000e5d2 <GDT::addEntry(GDTEntry)>
c000e6ee:	83 c4 0c             	add    esp,0xc
c000e6f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e6f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e6f9:	53                   	push   ebx
c000e6fa:	e8 d3 fe ff ff       	call   c000e5d2 <GDT::addEntry(GDTEntry)>
c000e6ff:	83 c4 0c             	add    esp,0xc
c000e702:	57                   	push   edi
c000e703:	56                   	push   esi
c000e704:	53                   	push   ebx
c000e705:	e8 c8 fe ff ff       	call   c000e5d2 <GDT::addEntry(GDTEntry)>
c000e70a:	83 c4 0c             	add    esp,0xc
c000e70d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e711:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e715:	53                   	push   ebx
c000e716:	e8 b7 fe ff ff       	call   c000e5d2 <GDT::addEntry(GDTEntry)>
c000e71b:	83 c4 0c             	add    esp,0xc
c000e71e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e722:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e726:	53                   	push   ebx
c000e727:	e8 a6 fe ff ff       	call   c000e5d2 <GDT::addEntry(GDTEntry)>
c000e72c:	83 c4 0c             	add    esp,0xc
c000e72f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e733:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e737:	53                   	push   ebx
c000e738:	e8 95 fe ff ff       	call   c000e5d2 <GDT::addEntry(GDTEntry)>
c000e73d:	83 c4 0c             	add    esp,0xc
c000e740:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e744:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e748:	53                   	push   ebx
c000e749:	e8 84 fe ff ff       	call   c000e5d2 <GDT::addEntry(GDTEntry)>
c000e74e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e751:	e8 a6 fe ff ff       	call   c000e5fc <GDT::flush()>
c000e756:	83 c4 40             	add    esp,0x40
c000e759:	5b                   	pop    ebx
c000e75a:	5e                   	pop    esi
c000e75b:	5f                   	pop    edi
c000e75c:	c3                   	ret    

c000e75d <idleFunction(void*)>:
c000e75d:	83 ec 0c             	sub    esp,0xc
c000e760:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c000e767:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c000e76e:	75 01                	jne    c000e771 <idleFunction(void*)+0x14>
c000e770:	fb                   	sti    
c000e771:	e8 f3 aa 00 00       	call   c0019269 <HalSystemIdle()>
c000e776:	e8 0b 2d 01 00       	call   c0021486 <idleCommon()>
c000e77b:	eb f4                	jmp    c000e771 <idleFunction(void*)+0x14>
c000e77d:	66 90                	xchg   ax,ax
c000e77f:	90                   	nop

c000e780 <IDTEntry::IDTEntry(bool)>:
c000e780:	53                   	push   ebx
c000e781:	83 ec 04             	sub    esp,0x4
c000e784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e788:	88 04 24             	mov    BYTE PTR [esp],al
c000e78b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e78f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e795:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e799:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e79d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7a1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e7a4:	83 e2 f0             	and    edx,0xfffffff0
c000e7a7:	83 ca 0e             	or     edx,0xe
c000e7aa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e7ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7b1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e7b4:	83 e2 ef             	and    edx,0xffffffef
c000e7b7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e7ba:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e7be:	85 c0                	test   eax,eax
c000e7c0:	74 06                	je     c000e7c8 <IDTEntry::IDTEntry(bool)+0x48>
c000e7c2:	b2 03                	mov    dl,0x3
c000e7c4:	eb 06                	jmp    c000e7cc <IDTEntry::IDTEntry(bool)+0x4c>
c000e7c6:	66 90                	xchg   ax,ax
c000e7c8:	b2 00                	mov    dl,0x0
c000e7ca:	66 90                	xchg   ax,ax
c000e7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7d0:	83 e2 03             	and    edx,0x3
c000e7d3:	89 d3                	mov    ebx,edx
c000e7d5:	c1 e3 05             	shl    ebx,0x5
c000e7d8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e7db:	83 e2 9f             	and    edx,0xffffff9f
c000e7de:	88 d1                	mov    cl,dl
c000e7e0:	88 da                	mov    dl,bl
c000e7e2:	09 ca                	or     edx,ecx
c000e7e4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e7e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7eb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e7ee:	83 ca 80             	or     edx,0xffffff80
c000e7f1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e7f4:	90                   	nop
c000e7f5:	83 c4 04             	add    esp,0x4
c000e7f8:	5b                   	pop    ebx
c000e7f9:	c3                   	ret    

c000e7fa <IDTEntry::setOffset(unsigned int)>:
c000e7fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e7fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e802:	66 89 02             	mov    WORD PTR [edx],ax
c000e805:	c1 e8 10             	shr    eax,0x10
c000e808:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e80c:	c3                   	ret    
c000e80d:	90                   	nop
c000e80e:	66 90                	xchg   ax,ax

c000e810 <IDT::IDT()>:
c000e810:	90                   	nop
c000e811:	c3                   	ret    

c000e812 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e816:	83 c0 30             	add    eax,0x30
c000e819:	c3                   	ret    

c000e81a <IDT::addEntry(IDTEntry, int)>:
c000e81a:	53                   	push   ebx
c000e81b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e81f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e823:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e827:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e82b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e82e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e832:	5b                   	pop    ebx
c000e833:	c3                   	ret    

c000e834 <IDT::addEntry(int, void (*)(), bool)>:
c000e834:	53                   	push   ebx
c000e835:	83 ec 10             	sub    esp,0x10
c000e838:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e83d:	50                   	push   eax
c000e83e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e842:	53                   	push   ebx
c000e843:	e8 38 ff ff ff       	call   c000e780 <IDTEntry::IDTEntry(bool)>
c000e848:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e84c:	53                   	push   ebx
c000e84d:	e8 a8 ff ff ff       	call   c000e7fa <IDTEntry::setOffset(unsigned int)>
c000e852:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e856:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e85a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e85e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e862:	e8 b3 ff ff ff       	call   c000e81a <IDT::addEntry(IDTEntry, int)>
c000e867:	83 c4 30             	add    esp,0x30
c000e86a:	5b                   	pop    ebx
c000e86b:	c3                   	ret    

c000e86c <IDT::flush()>:
c000e86c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e870:	66 c7 05 e8 d0 02 c0 ff 07 	mov    WORD PTR ds:0xc002d0e8,0x7ff
c000e879:	a3 ea d0 02 c0       	mov    ds:0xc002d0ea,eax
c000e87e:	0f 01 1d e8 d0 02 c0 	lidtd  ds:0xc002d0e8
c000e885:	c3                   	ret    

c000e886 <IDT::setup()>:
c000e886:	57                   	push   edi
c000e887:	56                   	push   esi
c000e888:	53                   	push   ebx
c000e889:	83 ec 10             	sub    esp,0x10
c000e88c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e890:	6a 00                	push   0x0
c000e892:	68 30 07 02 c0       	push   0xc0020730
c000e897:	6a 00                	push   0x0
c000e899:	53                   	push   ebx
c000e89a:	e8 95 ff ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e89f:	6a 00                	push   0x0
c000e8a1:	68 40 07 02 c0       	push   0xc0020740
c000e8a6:	6a 01                	push   0x1
c000e8a8:	53                   	push   ebx
c000e8a9:	e8 86 ff ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e8ae:	83 c4 20             	add    esp,0x20
c000e8b1:	6a 00                	push   0x0
c000e8b3:	68 4a 07 02 c0       	push   0xc002074a
c000e8b8:	6a 02                	push   0x2
c000e8ba:	53                   	push   ebx
c000e8bb:	e8 74 ff ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e8c0:	6a 00                	push   0x0
c000e8c2:	68 54 07 02 c0       	push   0xc0020754
c000e8c7:	6a 03                	push   0x3
c000e8c9:	53                   	push   ebx
c000e8ca:	e8 65 ff ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e8cf:	83 c4 20             	add    esp,0x20
c000e8d2:	6a 00                	push   0x0
c000e8d4:	68 5e 07 02 c0       	push   0xc002075e
c000e8d9:	6a 04                	push   0x4
c000e8db:	53                   	push   ebx
c000e8dc:	e8 53 ff ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e8e1:	6a 00                	push   0x0
c000e8e3:	68 68 07 02 c0       	push   0xc0020768
c000e8e8:	6a 05                	push   0x5
c000e8ea:	53                   	push   ebx
c000e8eb:	e8 44 ff ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e8f0:	83 c4 20             	add    esp,0x20
c000e8f3:	6a 00                	push   0x0
c000e8f5:	68 72 07 02 c0       	push   0xc0020772
c000e8fa:	6a 06                	push   0x6
c000e8fc:	53                   	push   ebx
c000e8fd:	e8 32 ff ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e902:	6a 00                	push   0x0
c000e904:	68 7c 07 02 c0       	push   0xc002077c
c000e909:	6a 07                	push   0x7
c000e90b:	53                   	push   ebx
c000e90c:	e8 23 ff ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e911:	83 c4 20             	add    esp,0x20
c000e914:	6a 00                	push   0x0
c000e916:	68 86 07 02 c0       	push   0xc0020786
c000e91b:	6a 08                	push   0x8
c000e91d:	53                   	push   ebx
c000e91e:	e8 11 ff ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e923:	6a 00                	push   0x0
c000e925:	68 8e 07 02 c0       	push   0xc002078e
c000e92a:	6a 09                	push   0x9
c000e92c:	53                   	push   ebx
c000e92d:	e8 02 ff ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e932:	83 c4 20             	add    esp,0x20
c000e935:	6a 00                	push   0x0
c000e937:	68 98 07 02 c0       	push   0xc0020798
c000e93c:	6a 0a                	push   0xa
c000e93e:	53                   	push   ebx
c000e93f:	e8 f0 fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e944:	6a 00                	push   0x0
c000e946:	68 a0 07 02 c0       	push   0xc00207a0
c000e94b:	6a 0b                	push   0xb
c000e94d:	53                   	push   ebx
c000e94e:	e8 e1 fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e953:	83 c4 20             	add    esp,0x20
c000e956:	6a 00                	push   0x0
c000e958:	68 a8 07 02 c0       	push   0xc00207a8
c000e95d:	6a 0c                	push   0xc
c000e95f:	53                   	push   ebx
c000e960:	e8 cf fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e965:	6a 00                	push   0x0
c000e967:	68 b0 07 02 c0       	push   0xc00207b0
c000e96c:	6a 0d                	push   0xd
c000e96e:	53                   	push   ebx
c000e96f:	e8 c0 fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e974:	83 c4 20             	add    esp,0x20
c000e977:	6a 00                	push   0x0
c000e979:	68 ca 07 02 c0       	push   0xc00207ca
c000e97e:	6a 0e                	push   0xe
c000e980:	53                   	push   ebx
c000e981:	e8 ae fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e986:	6a 00                	push   0x0
c000e988:	68 d2 07 02 c0       	push   0xc00207d2
c000e98d:	6a 0f                	push   0xf
c000e98f:	53                   	push   ebx
c000e990:	e8 9f fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e995:	83 c4 20             	add    esp,0x20
c000e998:	6a 00                	push   0x0
c000e99a:	68 dc 07 02 c0       	push   0xc00207dc
c000e99f:	6a 10                	push   0x10
c000e9a1:	53                   	push   ebx
c000e9a2:	e8 8d fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e9a7:	6a 00                	push   0x0
c000e9a9:	68 e6 07 02 c0       	push   0xc00207e6
c000e9ae:	6a 11                	push   0x11
c000e9b0:	53                   	push   ebx
c000e9b1:	e8 7e fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e9b6:	83 c4 20             	add    esp,0x20
c000e9b9:	6a 00                	push   0x0
c000e9bb:	68 f0 07 02 c0       	push   0xc00207f0
c000e9c0:	6a 12                	push   0x12
c000e9c2:	53                   	push   ebx
c000e9c3:	e8 6c fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e9c8:	6a 01                	push   0x1
c000e9ca:	68 8a 08 02 c0       	push   0xc002088a
c000e9cf:	6a 60                	push   0x60
c000e9d1:	53                   	push   ebx
c000e9d2:	e8 5d fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e9d7:	83 c4 20             	add    esp,0x20
c000e9da:	6a 00                	push   0x0
c000e9dc:	68 91 08 02 c0       	push   0xc0020891
c000e9e1:	6a 20                	push   0x20
c000e9e3:	53                   	push   ebx
c000e9e4:	e8 4b fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e9e9:	6a 00                	push   0x0
c000e9eb:	68 7c 08 02 c0       	push   0xc002087c
c000e9f0:	6a 21                	push   0x21
c000e9f2:	53                   	push   ebx
c000e9f3:	e8 3c fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000e9f8:	83 c4 20             	add    esp,0x20
c000e9fb:	6a 00                	push   0x0
c000e9fd:	68 83 08 02 c0       	push   0xc0020883
c000ea02:	6a 22                	push   0x22
c000ea04:	53                   	push   ebx
c000ea05:	e8 2a fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000ea0a:	6a 00                	push   0x0
c000ea0c:	68 fa 07 02 c0       	push   0xc00207fa
c000ea11:	6a 23                	push   0x23
c000ea13:	53                   	push   ebx
c000ea14:	e8 1b fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000ea19:	83 c4 20             	add    esp,0x20
c000ea1c:	6a 00                	push   0x0
c000ea1e:	68 04 08 02 c0       	push   0xc0020804
c000ea23:	6a 24                	push   0x24
c000ea25:	53                   	push   ebx
c000ea26:	e8 09 fe ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000ea2b:	6a 00                	push   0x0
c000ea2d:	68 0e 08 02 c0       	push   0xc002080e
c000ea32:	6a 25                	push   0x25
c000ea34:	53                   	push   ebx
c000ea35:	e8 fa fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000ea3a:	83 c4 20             	add    esp,0x20
c000ea3d:	6a 00                	push   0x0
c000ea3f:	68 18 08 02 c0       	push   0xc0020818
c000ea44:	6a 26                	push   0x26
c000ea46:	53                   	push   ebx
c000ea47:	e8 e8 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000ea4c:	6a 00                	push   0x0
c000ea4e:	68 22 08 02 c0       	push   0xc0020822
c000ea53:	6a 27                	push   0x27
c000ea55:	53                   	push   ebx
c000ea56:	e8 d9 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000ea5b:	83 c4 20             	add    esp,0x20
c000ea5e:	6a 00                	push   0x0
c000ea60:	68 2c 08 02 c0       	push   0xc002082c
c000ea65:	6a 28                	push   0x28
c000ea67:	53                   	push   ebx
c000ea68:	e8 c7 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000ea6d:	6a 00                	push   0x0
c000ea6f:	68 36 08 02 c0       	push   0xc0020836
c000ea74:	6a 29                	push   0x29
c000ea76:	53                   	push   ebx
c000ea77:	e8 b8 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000ea7c:	83 c4 20             	add    esp,0x20
c000ea7f:	6a 00                	push   0x0
c000ea81:	68 40 08 02 c0       	push   0xc0020840
c000ea86:	6a 2a                	push   0x2a
c000ea88:	53                   	push   ebx
c000ea89:	e8 a6 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000ea8e:	6a 00                	push   0x0
c000ea90:	68 4a 08 02 c0       	push   0xc002084a
c000ea95:	6a 2b                	push   0x2b
c000ea97:	53                   	push   ebx
c000ea98:	e8 97 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000ea9d:	83 c4 20             	add    esp,0x20
c000eaa0:	6a 00                	push   0x0
c000eaa2:	68 54 08 02 c0       	push   0xc0020854
c000eaa7:	6a 2c                	push   0x2c
c000eaa9:	53                   	push   ebx
c000eaaa:	e8 85 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000eaaf:	6a 00                	push   0x0
c000eab1:	68 5e 08 02 c0       	push   0xc002085e
c000eab6:	6a 2d                	push   0x2d
c000eab8:	53                   	push   ebx
c000eab9:	e8 76 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000eabe:	83 c4 20             	add    esp,0x20
c000eac1:	6a 00                	push   0x0
c000eac3:	68 68 08 02 c0       	push   0xc0020868
c000eac8:	6a 2e                	push   0x2e
c000eaca:	53                   	push   ebx
c000eacb:	e8 64 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000ead0:	6a 00                	push   0x0
c000ead2:	68 72 08 02 c0       	push   0xc0020872
c000ead7:	6a 2f                	push   0x2f
c000ead9:	53                   	push   ebx
c000eada:	e8 55 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000eadf:	83 c4 20             	add    esp,0x20
c000eae2:	6a 00                	push   0x0
c000eae4:	68 cc 09 02 c0       	push   0xc00209cc
c000eae9:	6a 30                	push   0x30
c000eaeb:	53                   	push   ebx
c000eaec:	e8 43 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000eaf1:	6a 00                	push   0x0
c000eaf3:	68 d6 09 02 c0       	push   0xc00209d6
c000eaf8:	6a 31                	push   0x31
c000eafa:	53                   	push   ebx
c000eafb:	e8 34 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000eb00:	83 c4 20             	add    esp,0x20
c000eb03:	6a 00                	push   0x0
c000eb05:	68 e0 09 02 c0       	push   0xc00209e0
c000eb0a:	6a 32                	push   0x32
c000eb0c:	53                   	push   ebx
c000eb0d:	e8 22 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000eb12:	6a 00                	push   0x0
c000eb14:	68 ea 09 02 c0       	push   0xc00209ea
c000eb19:	6a 33                	push   0x33
c000eb1b:	53                   	push   ebx
c000eb1c:	e8 13 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000eb21:	83 c4 20             	add    esp,0x20
c000eb24:	6a 00                	push   0x0
c000eb26:	68 f4 09 02 c0       	push   0xc00209f4
c000eb2b:	6a 34                	push   0x34
c000eb2d:	53                   	push   ebx
c000eb2e:	e8 01 fd ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000eb33:	6a 00                	push   0x0
c000eb35:	68 fe 09 02 c0       	push   0xc00209fe
c000eb3a:	6a 35                	push   0x35
c000eb3c:	53                   	push   ebx
c000eb3d:	e8 f2 fc ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000eb42:	83 c4 20             	add    esp,0x20
c000eb45:	6a 00                	push   0x0
c000eb47:	68 08 0a 02 c0       	push   0xc0020a08
c000eb4c:	6a 36                	push   0x36
c000eb4e:	53                   	push   ebx
c000eb4f:	e8 e0 fc ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000eb54:	6a 00                	push   0x0
c000eb56:	68 12 0a 02 c0       	push   0xc0020a12
c000eb5b:	6a 37                	push   0x37
c000eb5d:	53                   	push   ebx
c000eb5e:	e8 d1 fc ff ff       	call   c000e834 <IDT::addEntry(int, void (*)(), bool)>
c000eb63:	83 c4 1c             	add    esp,0x1c
c000eb66:	6a 03                	push   0x3
c000eb68:	6a 02                	push   0x2
c000eb6a:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000eb70:	e8 cb 48 00 00       	call   c0013440 <VAS::allocatePages(int, int)>
c000eb75:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000eb7c:	89 c6                	mov    esi,eax
c000eb7e:	e8 9c 09 00 00       	call   c000f51f <malloc>
c000eb83:	81 c6 00 20 00 00    	add    esi,0x2000
c000eb89:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb8c:	89 c7                	mov    edi,eax
c000eb8e:	e8 69 39 00 00       	call   c00124fc <TSS::TSS()>
c000eb93:	83 c4 0c             	add    esp,0xc
c000eb96:	68 86 07 02 c0       	push   0xc0020786
c000eb9b:	56                   	push   esi
c000eb9c:	57                   	push   edi
c000eb9d:	e8 9e 39 00 00       	call   c0012540 <TSS::setup(unsigned long, unsigned long)>
c000eba2:	89 c6                	mov    esi,eax
c000eba4:	58                   	pop    eax
c000eba5:	5a                   	pop    edx
c000eba6:	6a 00                	push   0x0
c000eba8:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ebac:	50                   	push   eax
c000ebad:	e8 ce fb ff ff       	call   c000e780 <IDTEntry::IDTEntry(bool)>
c000ebb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebb6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ebbb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ebc2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ebc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebcc:	80 ce 05             	or     dh,0x5
c000ebcf:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ebd2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ebd6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebda:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ebdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ebe0:	e8 87 fc ff ff       	call   c000e86c <IDT::flush()>
c000ebe5:	83 c4 20             	add    esp,0x20
c000ebe8:	5b                   	pop    ebx
c000ebe9:	5e                   	pop    esi
c000ebea:	5f                   	pop    edi
c000ebeb:	c3                   	ret    

c000ebec <CPU::current()>:
c000ebec:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c000ebf1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ebf7:	c3                   	ret    

c000ebf8 <operator new(unsigned long)>:
c000ebf8:	e9 22 09 00 00       	jmp    c000f51f <malloc>

c000ebfd <operator delete(void*)>:
c000ebfd:	e9 3d 09 00 00       	jmp    c000f53f <rfree>

c000ec02 <disableIRQs()>:
c000ec02:	fa                   	cli    
c000ec03:	c3                   	ret    

c000ec04 <enableIRQs()>:
c000ec04:	fb                   	sti    
c000ec05:	c3                   	ret    

c000ec06 <lockScheduler()>:
c000ec06:	fa                   	cli    
c000ec07:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c000ec0d:	c3                   	ret    

c000ec0e <unlockScheduler()>:
c000ec0e:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c000ec15:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c000ec1c:	75 01                	jne    c000ec1f <unlockScheduler()+0x11>
c000ec1e:	fb                   	sti    
c000ec1f:	c3                   	ret    

c000ec20 <lockStuff()>:
c000ec20:	fa                   	cli    
c000ec21:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c000ec27:	ff 05 2c da 02 c0    	inc    DWORD PTR ds:0xc002da2c
c000ec2d:	c3                   	ret    

c000ec2e <unlockStuff()>:
c000ec2e:	83 ec 0c             	sub    esp,0xc
c000ec31:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c000ec36:	48                   	dec    eax
c000ec37:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c000ec3c:	75 18                	jne    c000ec56 <unlockStuff()+0x28>
c000ec3e:	83 3d 28 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da28,0x0
c000ec45:	74 0f                	je     c000ec56 <unlockStuff()+0x28>
c000ec47:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c000ec51:	e8 2e 78 00 00       	call   c0016484 <schedule()>
c000ec56:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c000ec5d:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c000ec64:	75 01                	jne    c000ec67 <unlockStuff()+0x39>
c000ec66:	fb                   	sti    
c000ec67:	83 c4 0c             	add    esp,0xc
c000ec6a:	c3                   	ret    

c000ec6b <Virt::getAKernelVAS()>:
c000ec6b:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c000ec70:	c3                   	ret    

c000ec71 <__not_memcpy>:
c000ec71:	57                   	push   edi
c000ec72:	56                   	push   esi
c000ec73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ec7b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ec7f:	89 c7                	mov    edi,eax
c000ec81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ec83:	5e                   	pop    esi
c000ec84:	5f                   	pop    edi
c000ec85:	c3                   	ret    

c000ec86 <KeFormatDate(char*, int, int, int, int, bool)>:
c000ec86:	55                   	push   ebp
c000ec87:	b9 0a 00 00 00       	mov    ecx,0xa
c000ec8c:	57                   	push   edi
c000ec8d:	56                   	push   esi
c000ec8e:	53                   	push   ebx
c000ec8f:	bb e8 03 00 00       	mov    ebx,0x3e8
c000ec94:	81 ec ac 00 00 00    	sub    esp,0xac
c000ec9a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000eca1:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000eca6:	99                   	cdq    
c000eca7:	f7 f9                	idiv   ecx
c000eca9:	89 d5                	mov    ebp,edx
c000ecab:	99                   	cdq    
c000ecac:	f7 f9                	idiv   ecx
c000ecae:	8d 42 30             	lea    eax,[edx+0x30]
c000ecb1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ecb5:	8d 45 30             	lea    eax,[ebp+0x30]
c000ecb8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000ecbc:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000ecc3:	99                   	cdq    
c000ecc4:	f7 fb                	idiv   ebx
c000ecc6:	bb 64 00 00 00       	mov    ebx,0x64
c000eccb:	99                   	cdq    
c000eccc:	f7 f9                	idiv   ecx
c000ecce:	8d 42 30             	lea    eax,[edx+0x30]
c000ecd1:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000ecd5:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000ecdc:	99                   	cdq    
c000ecdd:	f7 fb                	idiv   ebx
c000ecdf:	31 db                	xor    ebx,ebx
c000ece1:	99                   	cdq    
c000ece2:	f7 f9                	idiv   ecx
c000ece4:	8d 42 30             	lea    eax,[edx+0x30]
c000ece7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000eceb:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000ecf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ecf7:	0f be 8b 04 d1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd2efc]
c000ecfe:	83 f9 59             	cmp    ecx,0x59
c000ed01:	74 1c                	je     c000ed1f <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000ed03:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000ed0a:	83 f9 4d             	cmp    ecx,0x4d
c000ed0d:	0f 84 e3 00 00 00    	je     c000edf6 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000ed13:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000ed1a:	e9 d7 00 00 00       	jmp    c000edf6 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000ed1f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ed24:	74 27                	je     c000ed4d <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000ed26:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000ed2a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed2f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000ed33:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ed37:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000ed3b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ed3f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000ed43:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000ed47:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000ed4b:	eb 15                	jmp    c000ed62 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000ed4d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ed51:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000ed55:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000ed59:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000ed5d:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000ed62:	50                   	push   eax
c000ed63:	50                   	push   eax
c000ed64:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000ed68:	57                   	push   edi
c000ed69:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ed6d:	56                   	push   esi
c000ed6e:	e8 cd 1a ff ff       	call   c0000840 <strcat>
c000ed73:	83 c4 10             	add    esp,0x10
c000ed76:	83 fb 02             	cmp    ebx,0x2
c000ed79:	74 1a                	je     c000ed95 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000ed7b:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000ed80:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c000ed85:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000ed89:	55                   	push   ebp
c000ed8a:	55                   	push   ebp
c000ed8b:	57                   	push   edi
c000ed8c:	56                   	push   esi
c000ed8d:	e8 ae 1a ff ff       	call   c0000840 <strcat>
c000ed92:	83 c4 10             	add    esp,0x10
c000ed95:	43                   	inc    ebx
c000ed96:	83 fb 03             	cmp    ebx,0x3
c000ed99:	0f 85 58 ff ff ff    	jne    c000ecf7 <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000ed9f:	51                   	push   ecx
c000eda0:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000eda7:	6a 00                	push   0x0
c000eda9:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000edb0:	e8 3b 17 ff ff       	call   c00004f0 <memset>
c000edb5:	89 34 24             	mov    DWORD PTR [esp],esi
c000edb8:	e8 b3 17 ff ff       	call   c0000570 <strlen>
c000edbd:	83 c4 10             	add    esp,0x10
c000edc0:	40                   	inc    eax
c000edc1:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000edc8:	72 17                	jb     c000ede1 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000edca:	52                   	push   edx
c000edcb:	52                   	push   edx
c000edcc:	56                   	push   esi
c000edcd:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000edd4:	e8 67 18 ff ff       	call   c0000640 <strcpy>
c000edd9:	83 c4 10             	add    esp,0x10
c000eddc:	e9 8a 00 00 00       	jmp    c000ee6b <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000ede1:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000ede8:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000edef:	8d 48 ff             	lea    ecx,[eax-0x1]
c000edf2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000edf4:	eb 75                	jmp    c000ee6b <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000edf6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000edfa:	89 ef                	mov    edi,ebp
c000edfc:	50                   	push   eax
c000edfd:	c1 ff 1f             	sar    edi,0x1f
c000ee00:	50                   	push   eax
c000ee01:	57                   	push   edi
c000ee02:	55                   	push   ebp
c000ee03:	e8 70 04 00 00       	call   c000f278 <KeGetDigitsInNumber(long long)>
c000ee08:	83 c4 10             	add    esp,0x10
c000ee0b:	48                   	dec    eax
c000ee0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee10:	75 1c                	jne    c000ee2e <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000ee12:	83 f9 44             	cmp    ecx,0x44
c000ee15:	75 09                	jne    c000ee20 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000ee17:	80 3d 20 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d120,0x0
c000ee1e:	eb 0c                	jmp    c000ee2c <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000ee20:	83 f9 4d             	cmp    ecx,0x4d
c000ee23:	75 2b                	jne    c000ee50 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000ee25:	80 3d 21 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d121,0x0
c000ee2c:	74 22                	je     c000ee50 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000ee2e:	89 e8                	mov    eax,ebp
c000ee30:	b9 0a 00 00 00       	mov    ecx,0xa
c000ee35:	99                   	cdq    
c000ee36:	f7 f9                	idiv   ecx
c000ee38:	89 d5                	mov    ebp,edx
c000ee3a:	99                   	cdq    
c000ee3b:	f7 f9                	idiv   ecx
c000ee3d:	83 c2 30             	add    edx,0x30
c000ee40:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000ee44:	8d 55 30             	lea    edx,[ebp+0x30]
c000ee47:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000ee4b:	e9 0d ff ff ff       	jmp    c000ed5d <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000ee50:	89 e8                	mov    eax,ebp
c000ee52:	b9 0a 00 00 00       	mov    ecx,0xa
c000ee57:	99                   	cdq    
c000ee58:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000ee5d:	f7 f9                	idiv   ecx
c000ee5f:	83 c2 30             	add    edx,0x30
c000ee62:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000ee66:	e9 f7 fe ff ff       	jmp    c000ed62 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000ee6b:	81 c4 ac 00 00 00    	add    esp,0xac
c000ee71:	5b                   	pop    ebx
c000ee72:	5e                   	pop    esi
c000ee73:	5f                   	pop    edi
c000ee74:	5d                   	pop    ebp
c000ee75:	c3                   	ret    

c000ee76 <KeFormatShortDate(char*, int, int, int, int)>:
c000ee76:	83 ec 14             	sub    esp,0x14
c000ee79:	6a 00                	push   0x0
c000ee7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ee7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ee83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ee87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ee8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ee8f:	e8 f2 fd ff ff       	call   c000ec86 <KeFormatDate(char*, int, int, int, int, bool)>
c000ee94:	83 c4 2c             	add    esp,0x2c
c000ee97:	c3                   	ret    

c000ee98 <KeFormatLongDate(char*, int, int, int, int)>:
c000ee98:	83 ec 14             	sub    esp,0x14
c000ee9b:	6a 01                	push   0x1
c000ee9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eea5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eea9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eead:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eeb1:	e8 d0 fd ff ff       	call   c000ec86 <KeFormatDate(char*, int, int, int, int, bool)>
c000eeb6:	83 c4 2c             	add    esp,0x2c
c000eeb9:	c3                   	ret    

c000eeba <KeSetLocale(klocale_t)>:
c000eeba:	57                   	push   edi
c000eebb:	b9 09 00 00 00       	mov    ecx,0x9
c000eec0:	56                   	push   esi
c000eec1:	bf 00 d1 02 c0       	mov    edi,0xc002d100
c000eec6:	fc                   	cld    
c000eec7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000eecb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eecd:	5e                   	pop    esi
c000eece:	5f                   	pop    edi
c000eecf:	c3                   	ret    

c000eed0 <KeInitialiseLocale()>:
c000eed0:	57                   	push   edi
c000eed1:	56                   	push   esi
c000eed2:	83 ec 3c             	sub    esp,0x3c
c000eed5:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000eedd:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000eee5:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000eeed:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000eef5:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000eefc:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000ef04:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ef0c:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000ef13:	68 52 33 02 c0       	push   0xc0023352
c000ef18:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ef1c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000ef20:	50                   	push   eax
c000ef21:	e8 1a 17 ff ff       	call   c0000640 <strcpy>
c000ef26:	83 ec 20             	sub    esp,0x20
c000ef29:	b9 09 00 00 00       	mov    ecx,0x9
c000ef2e:	fc                   	cld    
c000ef2f:	89 e7                	mov    edi,esp
c000ef31:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef33:	e8 82 ff ff ff       	call   c000eeba <KeSetLocale(klocale_t)>
c000ef38:	83 c4 64             	add    esp,0x64
c000ef3b:	5e                   	pop    esi
c000ef3c:	5f                   	pop    edi
c000ef3d:	c3                   	ret    

c000ef3e <KeFormatCurrency(char*, int, long long, long long)>:
c000ef3e:	c3                   	ret    

c000ef3f <KeFormatCurrency(char*, int, double)>:
c000ef3f:	c3                   	ret    

c000ef40 <KeFormatNumber(char*, long long, long long)>:
c000ef40:	c3                   	ret    

c000ef41 <KeFormatNumber(char*, double)>:
c000ef41:	c3                   	ret    
c000ef42:	66 90                	xchg   ax,ax

c000ef44 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000ef44:	55                   	push   ebp
c000ef45:	57                   	push   edi
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	83 ec 5c             	sub    esp,0x5c
c000ef4b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ef4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef53:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000ef57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef5b:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000ef5f:	bb 8f 21 02 c0       	mov    ebx,0xc002218f
c000ef64:	bd 11 00 00 00       	mov    ebp,0x11
c000ef69:	89 d0                	mov    eax,edx
c000ef6b:	83 e0 01             	and    eax,0x1
c000ef6e:	74 10                	je     c000ef80 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000ef70:	8a 03                	mov    al,BYTE PTR [ebx]
c000ef72:	88 02                	mov    BYTE PTR [edx],al
c000ef74:	8d 52 01             	lea    edx,[edx+0x1]
c000ef77:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000ef7a:	83 ed 01             	sub    ebp,0x1
c000ef7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef80:	89 d0                	mov    eax,edx
c000ef82:	83 e0 02             	and    eax,0x2
c000ef85:	74 11                	je     c000ef98 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000ef87:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000ef8a:	66 89 02             	mov    WORD PTR [edx],ax
c000ef8d:	8d 52 02             	lea    edx,[edx+0x2]
c000ef90:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000ef93:	83 ed 02             	sub    ebp,0x2
c000ef96:	66 90                	xchg   ax,ax
c000ef98:	89 e8                	mov    eax,ebp
c000ef9a:	c1 e8 02             	shr    eax,0x2
c000ef9d:	fc                   	cld    
c000ef9e:	89 d7                	mov    edi,edx
c000efa0:	89 de                	mov    esi,ebx
c000efa2:	89 c1                	mov    ecx,eax
c000efa4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000efa6:	89 f3                	mov    ebx,esi
c000efa8:	89 fa                	mov    edx,edi
c000efaa:	b9 00 00 00 00       	mov    ecx,0x0
c000efaf:	89 e8                	mov    eax,ebp
c000efb1:	83 e0 02             	and    eax,0x2
c000efb4:	74 0e                	je     c000efc4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000efb6:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000efba:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000efbe:	8d 41 02             	lea    eax,[ecx+0x2]
c000efc1:	89 c1                	mov    ecx,eax
c000efc3:	90                   	nop
c000efc4:	89 e8                	mov    eax,ebp
c000efc6:	83 e0 01             	and    eax,0x1
c000efc9:	74 09                	je     c000efd4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000efcb:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000efce:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000efd1:	8d 76 00             	lea    esi,[esi+0x0]
c000efd4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000efd8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efe0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000efe4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000efe8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000efec:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000eff1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000eff5:	89 c2                	mov    edx,eax
c000eff7:	c1 fa 1f             	sar    edx,0x1f
c000effa:	52                   	push   edx
c000effb:	50                   	push   eax
c000effc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f000:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f004:	e8 ab 1d 01 00       	call   c0020db4 <__udivdi3>
c000f009:	83 c4 10             	add    esp,0x10
c000f00c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f010:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f014:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f018:	80 f4 00             	xor    ah,0x0
c000f01b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f01f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f023:	80 f4 00             	xor    ah,0x0
c000f026:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f02a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f02e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f032:	89 f8                	mov    eax,edi
c000f034:	09 f0                	or     eax,esi
c000f036:	74 04                	je     c000f03c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f038:	eb b2                	jmp    c000efec <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f03a:	66 90                	xchg   ax,ax
c000f03c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f040:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f043:	90                   	nop
c000f044:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f048:	89 c1                	mov    ecx,eax
c000f04a:	89 c3                	mov    ebx,eax
c000f04c:	c1 fb 1f             	sar    ebx,0x1f
c000f04f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f053:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f057:	53                   	push   ebx
c000f058:	51                   	push   ecx
c000f059:	52                   	push   edx
c000f05a:	50                   	push   eax
c000f05b:	e8 54 1e 01 00       	call   c0020eb4 <__umoddi3>
c000f060:	83 c4 10             	add    esp,0x10
c000f063:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f068:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f06c:	01 c8                	add    eax,ecx
c000f06e:	8a 10                	mov    dl,BYTE PTR [eax]
c000f070:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f074:	88 10                	mov    BYTE PTR [eax],dl
c000f076:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f07a:	89 c2                	mov    edx,eax
c000f07c:	c1 fa 1f             	sar    edx,0x1f
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f085:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f089:	e8 26 1d 01 00       	call   c0020db4 <__udivdi3>
c000f08e:	83 c4 10             	add    esp,0x10
c000f091:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f095:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f099:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f09d:	80 f4 00             	xor    ah,0x0
c000f0a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f0a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f0a8:	80 f4 00             	xor    ah,0x0
c000f0ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f0af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f0b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f0b7:	89 f8                	mov    eax,edi
c000f0b9:	09 f0                	or     eax,esi
c000f0bb:	74 03                	je     c000f0c0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f0bd:	eb 85                	jmp    c000f044 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f0bf:	90                   	nop
c000f0c0:	90                   	nop
c000f0c1:	83 c4 5c             	add    esp,0x5c
c000f0c4:	5b                   	pop    ebx
c000f0c5:	5e                   	pop    esi
c000f0c6:	5f                   	pop    edi
c000f0c7:	5d                   	pop    ebp
c000f0c8:	c3                   	ret    
c000f0c9:	8d 76 00             	lea    esi,[esi+0x0]

c000f0cc <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f0cc:	55                   	push   ebp
c000f0cd:	57                   	push   edi
c000f0ce:	56                   	push   esi
c000f0cf:	53                   	push   ebx
c000f0d0:	83 ec 5c             	sub    esp,0x5c
c000f0d3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f0db:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f0df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f0e3:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f0e7:	bb 8f 21 02 c0       	mov    ebx,0xc002218f
c000f0ec:	bd 11 00 00 00       	mov    ebp,0x11
c000f0f1:	89 d0                	mov    eax,edx
c000f0f3:	83 e0 01             	and    eax,0x1
c000f0f6:	74 10                	je     c000f108 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f0f8:	8a 03                	mov    al,BYTE PTR [ebx]
c000f0fa:	88 02                	mov    BYTE PTR [edx],al
c000f0fc:	8d 52 01             	lea    edx,[edx+0x1]
c000f0ff:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f102:	83 ed 01             	sub    ebp,0x1
c000f105:	8d 76 00             	lea    esi,[esi+0x0]
c000f108:	89 d0                	mov    eax,edx
c000f10a:	83 e0 02             	and    eax,0x2
c000f10d:	74 11                	je     c000f120 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f10f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f112:	66 89 02             	mov    WORD PTR [edx],ax
c000f115:	8d 52 02             	lea    edx,[edx+0x2]
c000f118:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f11b:	83 ed 02             	sub    ebp,0x2
c000f11e:	66 90                	xchg   ax,ax
c000f120:	89 e8                	mov    eax,ebp
c000f122:	c1 e8 02             	shr    eax,0x2
c000f125:	fc                   	cld    
c000f126:	89 d7                	mov    edi,edx
c000f128:	89 de                	mov    esi,ebx
c000f12a:	89 c1                	mov    ecx,eax
c000f12c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f12e:	89 f3                	mov    ebx,esi
c000f130:	89 fa                	mov    edx,edi
c000f132:	b9 00 00 00 00       	mov    ecx,0x0
c000f137:	89 e8                	mov    eax,ebp
c000f139:	83 e0 02             	and    eax,0x2
c000f13c:	74 0e                	je     c000f14c <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f13e:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f142:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f146:	8d 41 02             	lea    eax,[ecx+0x2]
c000f149:	89 c1                	mov    ecx,eax
c000f14b:	90                   	nop
c000f14c:	89 e8                	mov    eax,ebp
c000f14e:	83 e0 01             	and    eax,0x1
c000f151:	74 09                	je     c000f15c <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f153:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f156:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f159:	8d 76 00             	lea    esi,[esi+0x0]
c000f15c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f160:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f164:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f169:	79 1d                	jns    c000f188 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f16b:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f16f:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f174:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f178:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f17c:	8d 50 01             	lea    edx,[eax+0x1]
c000f17f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f183:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f186:	66 90                	xchg   ax,ax
c000f188:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f18c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f190:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f194:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f198:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f19d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f1a1:	89 c2                	mov    edx,eax
c000f1a3:	c1 fa 1f             	sar    edx,0x1f
c000f1a6:	52                   	push   edx
c000f1a7:	50                   	push   eax
c000f1a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f1ac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f1b0:	e8 ff 1b 01 00       	call   c0020db4 <__udivdi3>
c000f1b5:	83 c4 10             	add    esp,0x10
c000f1b8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f1bc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f1c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f1c4:	80 f4 00             	xor    ah,0x0
c000f1c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f1cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1cf:	80 f4 00             	xor    ah,0x0
c000f1d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f1d6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f1da:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f1de:	89 f8                	mov    eax,edi
c000f1e0:	09 f0                	or     eax,esi
c000f1e2:	74 04                	je     c000f1e8 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f1e4:	eb b2                	jmp    c000f198 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f1e6:	66 90                	xchg   ax,ax
c000f1e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f1ec:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f1ef:	90                   	nop
c000f1f0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f1f4:	89 c1                	mov    ecx,eax
c000f1f6:	89 c3                	mov    ebx,eax
c000f1f8:	c1 fb 1f             	sar    ebx,0x1f
c000f1fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f1ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f203:	53                   	push   ebx
c000f204:	51                   	push   ecx
c000f205:	52                   	push   edx
c000f206:	50                   	push   eax
c000f207:	e8 28 1a 01 00       	call   c0020c34 <__moddi3>
c000f20c:	83 c4 10             	add    esp,0x10
c000f20f:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f214:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f218:	01 c8                	add    eax,ecx
c000f21a:	8a 10                	mov    dl,BYTE PTR [eax]
c000f21c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f220:	88 10                	mov    BYTE PTR [eax],dl
c000f222:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f226:	89 c2                	mov    edx,eax
c000f228:	c1 fa 1f             	sar    edx,0x1f
c000f22b:	52                   	push   edx
c000f22c:	50                   	push   eax
c000f22d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f231:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f235:	e8 ae 18 01 00       	call   c0020ae8 <__divdi3>
c000f23a:	83 c4 10             	add    esp,0x10
c000f23d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f241:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f245:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f249:	80 f4 00             	xor    ah,0x0
c000f24c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f250:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f254:	80 f4 00             	xor    ah,0x0
c000f257:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f25b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f25f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f263:	89 f8                	mov    eax,edi
c000f265:	09 f0                	or     eax,esi
c000f267:	74 03                	je     c000f26c <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000f269:	eb 85                	jmp    c000f1f0 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000f26b:	90                   	nop
c000f26c:	90                   	nop
c000f26d:	83 c4 5c             	add    esp,0x5c
c000f270:	5b                   	pop    ebx
c000f271:	5e                   	pop    esi
c000f272:	5f                   	pop    edi
c000f273:	5d                   	pop    ebp
c000f274:	c3                   	ret    
c000f275:	8d 76 00             	lea    esi,[esi+0x0]

c000f278 <KeGetDigitsInNumber(long long)>:
c000f278:	56                   	push   esi
c000f279:	53                   	push   ebx
c000f27a:	83 ec 24             	sub    esp,0x24
c000f27d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f285:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f289:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f28d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f295:	8d 76 00             	lea    esi,[esi+0x0]
c000f298:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f29c:	80 f4 00             	xor    ah,0x0
c000f29f:	89 c3                	mov    ebx,eax
c000f2a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2a5:	80 f4 00             	xor    ah,0x0
c000f2a8:	89 c6                	mov    esi,eax
c000f2aa:	89 f0                	mov    eax,esi
c000f2ac:	09 d8                	or     eax,ebx
c000f2ae:	74 28                	je     c000f2d8 <KeGetDigitsInNumber(long long)+0x60>
c000f2b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f2b8:	6a 00                	push   0x0
c000f2ba:	6a 0a                	push   0xa
c000f2bc:	52                   	push   edx
c000f2bd:	50                   	push   eax
c000f2be:	e8 25 18 01 00       	call   c0020ae8 <__divdi3>
c000f2c3:	83 c4 10             	add    esp,0x10
c000f2c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2ce:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f2d3:	eb c3                	jmp    c000f298 <KeGetDigitsInNumber(long long)+0x20>
c000f2d5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f2dc:	83 c4 24             	add    esp,0x24
c000f2df:	5b                   	pop    ebx
c000f2e0:	5e                   	pop    esi
c000f2e1:	c3                   	ret    
c000f2e2:	66 90                	xchg   ax,ax

c000f2e4 <KeItoa(unsigned long long, char*)>:
c000f2e4:	83 ec 1c             	sub    esp,0x1c
c000f2e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f2eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f2f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f2f7:	6a 0a                	push   0xa
c000f2f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f2fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f301:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f305:	e8 3a fc ff ff       	call   c000ef44 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f30a:	83 c4 10             	add    esp,0x10
c000f30d:	90                   	nop
c000f30e:	83 c4 1c             	add    esp,0x1c
c000f311:	c3                   	ret    
c000f312:	66 90                	xchg   ax,ax

c000f314 <KeItoa(long long, char*)>:
c000f314:	83 ec 1c             	sub    esp,0x1c
c000f317:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f31b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f31f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f323:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f327:	6a 0a                	push   0xa
c000f329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f32d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f331:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f335:	e8 92 fd ff ff       	call   c000f0cc <KeBasedSignedIntegerToString(long long, char*, int)>
c000f33a:	83 c4 10             	add    esp,0x10
c000f33d:	90                   	nop
c000f33e:	83 c4 1c             	add    esp,0x1c
c000f341:	c3                   	ret    
c000f342:	66 90                	xchg   ax,ax

c000f344 <KeXtoa(unsigned long long, char*)>:
c000f344:	83 ec 1c             	sub    esp,0x1c
c000f347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f34b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f34f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f357:	6a 10                	push   0x10
c000f359:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f35d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f361:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f365:	e8 da fb ff ff       	call   c000ef44 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f36a:	83 c4 10             	add    esp,0x10
c000f36d:	90                   	nop
c000f36e:	83 c4 1c             	add    esp,0x1c
c000f371:	c3                   	ret    

c000f372 <sbrk>:
c000f372:	55                   	push   ebp
c000f373:	57                   	push   edi
c000f374:	56                   	push   esi
c000f375:	53                   	push   ebx
c000f376:	83 ec 1c             	sub    esp,0x1c
c000f379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f37d:	85 c0                	test   eax,eax
c000f37f:	74 61                	je     c000f3e2 <sbrk+0x70>
c000f381:	78 66                	js     c000f3e9 <sbrk+0x77>
c000f383:	8b 15 30 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025930
c000f389:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f38d:	05 ff 0f 00 00       	add    eax,0xfff
c000f392:	89 c5                	mov    ebp,eax
c000f394:	78 6b                	js     c000f401 <sbrk+0x8f>
c000f396:	c1 fd 0c             	sar    ebp,0xc
c000f399:	bb 00 00 00 00       	mov    ebx,0x0
c000f39e:	8b 35 50 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d250
c000f3a4:	8b 3d 30 59 02 c0    	mov    edi,DWORD PTR ds:0xc0025930
c000f3aa:	e8 ab 06 00 00       	call   c000fa5a <Phys::allocatePage()>
c000f3af:	68 01 04 00 00       	push   0x401
c000f3b4:	57                   	push   edi
c000f3b5:	50                   	push   eax
c000f3b6:	56                   	push   esi
c000f3b7:	e8 80 3f 00 00       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3bc:	81 05 30 59 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0025930,0x1000
c000f3c6:	83 c3 01             	add    ebx,0x1
c000f3c9:	83 c4 10             	add    esp,0x10
c000f3cc:	39 dd                	cmp    ebp,ebx
c000f3ce:	75 ce                	jne    c000f39e <sbrk+0x2c>
c000f3d0:	0f 20 d8             	mov    eax,cr3
c000f3d3:	0f 22 d8             	mov    cr3,eax
c000f3d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3da:	83 c4 1c             	add    esp,0x1c
c000f3dd:	5b                   	pop    ebx
c000f3de:	5e                   	pop    esi
c000f3df:	5f                   	pop    edi
c000f3e0:	5d                   	pop    ebp
c000f3e1:	c3                   	ret    
c000f3e2:	a1 30 59 02 c0       	mov    eax,ds:0xc0025930
c000f3e7:	eb f1                	jmp    c000f3da <sbrk+0x68>
c000f3e9:	83 ec 08             	sub    esp,0x8
c000f3ec:	50                   	push   eax
c000f3ed:	68 58 33 02 c0       	push   0xc0023358
c000f3f2:	e8 6d 7b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f3f7:	83 c4 10             	add    esp,0x10
c000f3fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f3ff:	eb d9                	jmp    c000f3da <sbrk+0x68>
c000f401:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000f407:	eb 8d                	jmp    c000f396 <sbrk+0x24>

c000f409 <sbrk_thunk>:
c000f409:	83 ec 0c             	sub    esp,0xc
c000f40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f410:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f415:	7f 10                	jg     c000f427 <sbrk_thunk+0x1e>
c000f417:	83 ec 0c             	sub    esp,0xc
c000f41a:	50                   	push   eax
c000f41b:	e8 52 ff ff ff       	call   c000f372 <sbrk>
c000f420:	83 c4 10             	add    esp,0x10
c000f423:	83 c4 0c             	add    esp,0xc
c000f426:	c3                   	ret    
c000f427:	83 ec 08             	sub    esp,0x8
c000f42a:	50                   	push   eax
c000f42b:	68 88 33 02 c0       	push   0xc0023388
c000f430:	e8 2f 7b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f435:	83 c4 10             	add    esp,0x10
c000f438:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f43d:	eb e4                	jmp    c000f423 <sbrk_thunk+0x1a>

c000f43f <mmap>:
c000f43f:	55                   	push   ebp
c000f440:	57                   	push   edi
c000f441:	56                   	push   esi
c000f442:	53                   	push   ebx
c000f443:	83 ec 18             	sub    esp,0x18
c000f446:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f44a:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f450:	89 fb                	mov    ebx,edi
c000f452:	c1 eb 0c             	shr    ebx,0xc
c000f455:	53                   	push   ebx
c000f456:	e8 fe 37 00 00       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c000f45b:	89 c5                	mov    ebp,eax
c000f45d:	83 c4 10             	add    esp,0x10
c000f460:	85 db                	test   ebx,ebx
c000f462:	7e 2f                	jle    c000f493 <mmap+0x54>
c000f464:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f46a:	01 c7                	add    edi,eax
c000f46c:	89 c3                	mov    ebx,eax
c000f46e:	8b 35 50 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d250
c000f474:	e8 e1 05 00 00       	call   c000fa5a <Phys::allocatePage()>
c000f479:	68 01 04 00 00       	push   0x401
c000f47e:	53                   	push   ebx
c000f47f:	50                   	push   eax
c000f480:	56                   	push   esi
c000f481:	e8 b6 3e 00 00       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f486:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f48c:	83 c4 10             	add    esp,0x10
c000f48f:	39 fb                	cmp    ebx,edi
c000f491:	75 db                	jne    c000f46e <mmap+0x2f>
c000f493:	89 e8                	mov    eax,ebp
c000f495:	83 c4 0c             	add    esp,0xc
c000f498:	5b                   	pop    ebx
c000f499:	5e                   	pop    esi
c000f49a:	5f                   	pop    edi
c000f49b:	5d                   	pop    ebp
c000f49c:	c3                   	ret    

c000f49d <munmap>:
c000f49d:	83 ec 18             	sub    esp,0x18
c000f4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4a4:	e8 b8 3a 00 00       	call   c0012f61 <Virt::freeKernelVirtualPages(unsigned long)>
c000f4a9:	b8 00 00 00 00       	mov    eax,0x0
c000f4ae:	83 c4 1c             	add    esp,0x1c
c000f4b1:	c3                   	ret    

c000f4b2 <liballoc_lock()>:
c000f4b2:	fa                   	cli    
c000f4b3:	83 05 30 da 02 c0 01 	add    DWORD PTR ds:0xc002da30,0x1
c000f4ba:	b8 00 00 00 00       	mov    eax,0x0
c000f4bf:	c3                   	ret    

c000f4c0 <liballoc_unlock()>:
c000f4c0:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000f4c8:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c000f4cf:	75 01                	jne    c000f4d2 <liballoc_unlock()+0x12>
c000f4d1:	fb                   	sti    
c000f4d2:	b8 00 00 00 00       	mov    eax,0x0
c000f4d7:	c3                   	ret    

c000f4d8 <liballoc_alloc(int)>:
c000f4d8:	83 ec 10             	sub    esp,0x10
c000f4db:	6a 01                	push   0x1
c000f4dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4e1:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000f4e7:	e8 54 3f 00 00       	call   c0013440 <VAS::allocatePages(int, int)>
c000f4ec:	83 c4 1c             	add    esp,0x1c
c000f4ef:	c3                   	ret    

c000f4f0 <liballoc_free(void*, int)>:
c000f4f0:	83 ec 14             	sub    esp,0x14
c000f4f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4f7:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c000f4fd:	e8 9c 3b 00 00       	call   c001309e <VAS::freeAllocatedPages(unsigned long)>
c000f502:	b8 00 00 00 00       	mov    eax,0x0
c000f507:	83 c4 1c             	add    esp,0x1c
c000f50a:	c3                   	ret    

c000f50b <realloc>:
c000f50b:	83 ec 14             	sub    esp,0x14
c000f50e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f516:	e8 3c 22 ff ff       	call   c0001757 <dlrealloc>
c000f51b:	83 c4 1c             	add    esp,0x1c
c000f51e:	c3                   	ret    

c000f51f <malloc>:
c000f51f:	83 ec 18             	sub    esp,0x18
c000f522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f526:	e8 ef 1c ff ff       	call   c000121a <dlmalloc>
c000f52b:	83 c4 1c             	add    esp,0x1c
c000f52e:	c3                   	ret    

c000f52f <free>:
c000f52f:	83 ec 18             	sub    esp,0x18
c000f532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f536:	e8 18 18 ff ff       	call   c0000d53 <dlfree>
c000f53b:	83 c4 1c             	add    esp,0x1c
c000f53e:	c3                   	ret    

c000f53f <rfree>:
c000f53f:	83 ec 18             	sub    esp,0x18
c000f542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f546:	e8 08 18 ff ff       	call   c0000d53 <dlfree>
c000f54b:	83 c4 1c             	add    esp,0x1c
c000f54e:	c3                   	ret    

c000f54f <calloc>:
c000f54f:	56                   	push   esi
c000f550:	53                   	push   ebx
c000f551:	83 ec 10             	sub    esp,0x10
c000f554:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f558:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f55d:	53                   	push   ebx
c000f55e:	e8 bc ff ff ff       	call   c000f51f <malloc>
c000f563:	89 c6                	mov    esi,eax
c000f565:	83 c4 0c             	add    esp,0xc
c000f568:	53                   	push   ebx
c000f569:	6a 00                	push   0x0
c000f56b:	50                   	push   eax
c000f56c:	e8 7f 0f ff ff       	call   c00004f0 <memset>
c000f571:	89 f0                	mov    eax,esi
c000f573:	83 c4 14             	add    esp,0x14
c000f576:	5b                   	pop    ebx
c000f577:	5e                   	pop    esi
c000f578:	c3                   	ret    
c000f579:	66 90                	xchg   ax,ax
c000f57b:	90                   	nop

c000f57c <KeMailboxTryPost(Mailbox*, void*)>:
c000f57c:	83 ec 10             	sub    esp,0x10
c000f57f:	fa                   	cli    
c000f580:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f585:	83 c0 01             	add    eax,0x1
c000f588:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c000f58d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f592:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f596:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f599:	85 c0                	test   eax,eax
c000f59b:	75 23                	jne    c000f5c0 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f59d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5a5:	89 10                	mov    DWORD PTR [eax],edx
c000f5a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5ae:	8d 50 01             	lea    edx,[eax+0x1]
c000f5b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f5b8:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f5c0:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000f5c8:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f5cd:	85 c0                	test   eax,eax
c000f5cf:	75 03                	jne    c000f5d4 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f5d1:	fb                   	sti    
c000f5d2:	66 90                	xchg   ax,ax
c000f5d4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f5d8:	83 c4 10             	add    esp,0x10
c000f5db:	c3                   	ret    

c000f5dc <KeMailboxTryGet(Mailbox*, void**)>:
c000f5dc:	83 ec 10             	sub    esp,0x10
c000f5df:	fa                   	cli    
c000f5e0:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f5e5:	83 c0 01             	add    eax,0x1
c000f5e8:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c000f5ed:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f5f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5f9:	83 f8 01             	cmp    eax,0x1
c000f5fc:	75 22                	jne    c000f620 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f5fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f602:	8b 10                	mov    edx,DWORD PTR [eax]
c000f604:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f608:	89 10                	mov    DWORD PTR [eax],edx
c000f60a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f60e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f611:	8d 50 ff             	lea    edx,[eax-0x1]
c000f614:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f618:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f61b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f620:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000f628:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f62d:	85 c0                	test   eax,eax
c000f62f:	75 03                	jne    c000f634 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f631:	fb                   	sti    
c000f632:	66 90                	xchg   ax,ax
c000f634:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f638:	83 c4 10             	add    esp,0x10
c000f63b:	c3                   	ret    

c000f63c <KeMailboxCreate()>:
c000f63c:	83 ec 1c             	sub    esp,0x1c
c000f63f:	83 ec 0c             	sub    esp,0xc
c000f642:	6a 08                	push   0x8
c000f644:	e8 d6 fe ff ff       	call   c000f51f <malloc>
c000f649:	83 c4 10             	add    esp,0x10
c000f64c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f654:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f65a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f65e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f665:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f669:	83 c4 1c             	add    esp,0x1c
c000f66c:	c3                   	ret    
c000f66d:	8d 76 00             	lea    esi,[esi+0x0]

c000f670 <KeMailboxPost(Mailbox*, void*)>:
c000f670:	83 ec 1c             	sub    esp,0x1c
c000f673:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f678:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f680:	e8 f7 fe ff ff       	call   c000f57c <KeMailboxTryPost(Mailbox*, void*)>
c000f685:	83 c4 08             	add    esp,0x8
c000f688:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f68c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f690:	83 f0 01             	xor    eax,0x1
c000f693:	0f b6 c0             	movzx  eax,al
c000f696:	85 c0                	test   eax,eax
c000f698:	74 26                	je     c000f6c0 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f69a:	fa                   	cli    
c000f69b:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f6a0:	83 c0 01             	add    eax,0x1
c000f6a3:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c000f6a8:	e8 d7 6d 00 00       	call   c0016484 <schedule()>
c000f6ad:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000f6b5:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f6ba:	85 c0                	test   eax,eax
c000f6bc:	75 02                	jne    c000f6c0 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f6be:	fb                   	sti    
c000f6bf:	90                   	nop
c000f6c0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f6c5:	85 c0                	test   eax,eax
c000f6c7:	75 03                	jne    c000f6cc <KeMailboxPost(Mailbox*, void*)+0x5c>
c000f6c9:	eb ad                	jmp    c000f678 <KeMailboxPost(Mailbox*, void*)+0x8>
c000f6cb:	90                   	nop
c000f6cc:	90                   	nop
c000f6cd:	83 c4 1c             	add    esp,0x1c
c000f6d0:	c3                   	ret    
c000f6d1:	8d 76 00             	lea    esi,[esi+0x0]

c000f6d4 <KeMailboxGet(Mailbox*, void**)>:
c000f6d4:	83 ec 1c             	sub    esp,0x1c
c000f6d7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f6e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f6e4:	e8 f3 fe ff ff       	call   c000f5dc <KeMailboxTryGet(Mailbox*, void**)>
c000f6e9:	83 c4 08             	add    esp,0x8
c000f6ec:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f6f0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f6f4:	83 f0 01             	xor    eax,0x1
c000f6f7:	0f b6 c0             	movzx  eax,al
c000f6fa:	85 c0                	test   eax,eax
c000f6fc:	74 26                	je     c000f724 <KeMailboxGet(Mailbox*, void**)+0x50>
c000f6fe:	fa                   	cli    
c000f6ff:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f704:	83 c0 01             	add    eax,0x1
c000f707:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c000f70c:	e8 73 6d 00 00       	call   c0016484 <schedule()>
c000f711:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000f719:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000f71e:	85 c0                	test   eax,eax
c000f720:	75 02                	jne    c000f724 <KeMailboxGet(Mailbox*, void**)+0x50>
c000f722:	fb                   	sti    
c000f723:	90                   	nop
c000f724:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f729:	85 c0                	test   eax,eax
c000f72b:	75 03                	jne    c000f730 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000f72d:	eb ad                	jmp    c000f6dc <KeMailboxGet(Mailbox*, void**)+0x8>
c000f72f:	90                   	nop
c000f730:	90                   	nop
c000f731:	83 c4 1c             	add    esp,0x1c
c000f734:	c3                   	ret    
c000f735:	8d 76 00             	lea    esi,[esi+0x0]

c000f738 <KeMailboxDestroy(Mailbox*)>:
c000f738:	83 ec 0c             	sub    esp,0xc
c000f73b:	83 ec 0c             	sub    esp,0xc
c000f73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f742:	e8 e8 fd ff ff       	call   c000f52f <free>
c000f747:	83 c4 10             	add    esp,0x10
c000f74a:	90                   	nop
c000f74b:	83 c4 0c             	add    esp,0xc
c000f74e:	c3                   	ret    

c000f74f <KeEntryPoint>:
c000f74f:	57                   	push   edi
c000f750:	bf f9 03 00 00       	mov    edi,0x3f9
c000f755:	56                   	push   esi
c000f756:	89 fa                	mov    edx,edi
c000f758:	53                   	push   ebx
c000f759:	31 f6                	xor    esi,esi
c000f75b:	83 ec 2c             	sub    esp,0x2c
c000f75e:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f763:	a3 24 d1 02 c0       	mov    ds:0xc002d124,eax
c000f768:	89 f0                	mov    eax,esi
c000f76a:	ee                   	out    dx,al
c000f76b:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f770:	b0 80                	mov    al,0x80
c000f772:	89 da                	mov    edx,ebx
c000f774:	ee                   	out    dx,al
c000f775:	b1 03                	mov    cl,0x3
c000f777:	ba f8 03 00 00       	mov    edx,0x3f8
c000f77c:	88 c8                	mov    al,cl
c000f77e:	ee                   	out    dx,al
c000f77f:	89 f0                	mov    eax,esi
c000f781:	89 fa                	mov    edx,edi
c000f783:	ee                   	out    dx,al
c000f784:	88 c8                	mov    al,cl
c000f786:	89 da                	mov    edx,ebx
c000f788:	ee                   	out    dx,al
c000f789:	b0 c7                	mov    al,0xc7
c000f78b:	ba fa 03 00 00       	mov    edx,0x3fa
c000f790:	ee                   	out    dx,al
c000f791:	b0 0b                	mov    al,0xb
c000f793:	ba fc 03 00 00       	mov    edx,0x3fc
c000f798:	ee                   	out    dx,al
c000f799:	68 97 33 02 c0       	push   0xc0023397
c000f79e:	e8 c1 77 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f7a3:	e8 10 d3 ff ff       	call   c000cab8 <KeDisplaySplashScreen()>
c000f7a8:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f7ad:	05 ff 0f 00 00       	add    eax,0xfff
c000f7b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000f7ba:	e8 2c 04 00 00       	call   c000fbeb <Phys::physicalMemorySetup(unsigned int)>
c000f7bf:	e8 73 36 00 00       	call   c0012e37 <Virt::virtualMemorySetup()>
c000f7c4:	e8 39 d2 ff ff       	call   c000ca02 <KeInitialiseAtexit()>
c000f7c9:	c7 04 24 ae 33 02 c0 	mov    DWORD PTR [esp],0xc00233ae
c000f7d0:	e8 8f 77 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f7d5:	58                   	pop    eax
c000f7d6:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f7da:	53                   	push   ebx
c000f7db:	e8 3e 39 00 00       	call   c001311e <VAS::VAS()>
c000f7e0:	c7 04 24 be 33 02 c0 	mov    DWORD PTR [esp],0xc00233be
c000f7e7:	89 1d 50 d2 02 c0    	mov    DWORD PTR ds:0xc002d250,ebx
c000f7ed:	e8 72 77 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f7f2:	e8 d7 17 01 00       	call   c0020fce <_init>
c000f7f7:	c7 04 24 d2 33 02 c0 	mov    DWORD PTR [esp],0xc00233d2
c000f7fe:	e8 61 77 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f803:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000f80a:	e8 10 fd ff ff       	call   c000f51f <malloc>
c000f80f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f812:	89 c6                	mov    esi,eax
c000f814:	e8 67 e3 ff ff       	call   c000db80 <Computer::Computer()>
c000f819:	5a                   	pop    edx
c000f81a:	89 35 d0 b0 02 c0    	mov    DWORD PTR ds:0xc002b0d0,esi
c000f820:	59                   	pop    ecx
c000f821:	56                   	push   esi
c000f822:	68 e1 33 02 c0       	push   0xc00233e1
c000f827:	e8 38 77 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f82c:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c000f831:	8b 10                	mov    edx,DWORD PTR [eax]
c000f833:	53                   	push   ebx
c000f834:	6a 00                	push   0x0
c000f836:	6a 00                	push   0x0
c000f838:	50                   	push   eax
c000f839:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f83c:	83 c4 14             	add    esp,0x14
c000f83f:	53                   	push   ebx
c000f840:	e8 8f 39 00 00       	call   c00131d4 <VAS::~VAS()>
c000f845:	83 c4 30             	add    esp,0x30
c000f848:	5b                   	pop    ebx
c000f849:	5e                   	pop    esi
c000f84a:	5f                   	pop    edi
c000f84b:	c3                   	ret    

c000f84c <Mutex::Mutex()>:
c000f84c:	83 ec 0c             	sub    esp,0xc
c000f84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f853:	83 ec 08             	sub    esp,0x8
c000f856:	6a 01                	push   0x1
c000f858:	50                   	push   eax
c000f859:	e8 56 0c 00 00       	call   c00104b4 <Semaphore::Semaphore(int)>
c000f85e:	83 c4 10             	add    esp,0x10
c000f861:	90                   	nop
c000f862:	83 c4 0c             	add    esp,0xc
c000f865:	c3                   	ret    

c000f866 <KePanic(char const*)>:
c000f866:	c6 05 28 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d128,0x1
c000f86d:	e9 9f 9b 00 00       	jmp    c0019411 <HalPanic(char const*)>

c000f872 <Phys::allocateDMA(unsigned long)>:
c000f872:	55                   	push   ebp
c000f873:	31 ed                	xor    ebp,ebp
c000f875:	57                   	push   edi
c000f876:	56                   	push   esi
c000f877:	53                   	push   ebx
c000f878:	31 db                	xor    ebx,ebx
c000f87a:	83 ec 1c             	sub    esp,0x1c
c000f87d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f881:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f889:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f88f:	31 c0                	xor    eax,eax
c000f891:	c1 ef 0c             	shr    edi,0xc
c000f894:	eb 1b                	jmp    c000f8b1 <Phys::allocateDMA(unsigned long)+0x3f>
c000f896:	85 c0                	test   eax,eax
c000f898:	75 06                	jne    c000f8a0 <Phys::allocateDMA(unsigned long)+0x2e>
c000f89a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f89e:	89 dd                	mov    ebp,ebx
c000f8a0:	8d 70 01             	lea    esi,[eax+0x1]
c000f8a3:	39 f7                	cmp    edi,esi
c000f8a5:	74 37                	je     c000f8de <Phys::allocateDMA(unsigned long)+0x6c>
c000f8a7:	89 f0                	mov    eax,esi
c000f8a9:	83 c3 01             	add    ebx,0x1
c000f8ac:	83 fb 0f             	cmp    ebx,0xf
c000f8af:	7f 13                	jg     c000f8c4 <Phys::allocateDMA(unsigned long)+0x52>
c000f8b1:	80 bb 44 d1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd2ebc],0x0
c000f8b8:	74 dc                	je     c000f896 <Phys::allocateDMA(unsigned long)+0x24>
c000f8ba:	31 c0                	xor    eax,eax
c000f8bc:	83 c3 01             	add    ebx,0x1
c000f8bf:	83 fb 0f             	cmp    ebx,0xf
c000f8c2:	7e ed                	jle    c000f8b1 <Phys::allocateDMA(unsigned long)+0x3f>
c000f8c4:	83 ec 0c             	sub    esp,0xc
c000f8c7:	68 f8 33 02 c0       	push   0xc00233f8
c000f8cc:	e8 95 ff ff ff       	call   c000f866 <KePanic(char const*)>
c000f8d1:	83 c4 10             	add    esp,0x10
c000f8d4:	31 c0                	xor    eax,eax
c000f8d6:	83 c4 1c             	add    esp,0x1c
c000f8d9:	5b                   	pop    ebx
c000f8da:	5e                   	pop    esi
c000f8db:	5f                   	pop    edi
c000f8dc:	5d                   	pop    ebp
c000f8dd:	c3                   	ret    
c000f8de:	89 e9                	mov    ecx,ebp
c000f8e0:	c1 f9 04             	sar    ecx,0x4
c000f8e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f8e7:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000f8eb:	89 ca                	mov    edx,ecx
c000f8ed:	83 ea 01             	sub    edx,0x1
c000f8f0:	79 03                	jns    c000f8f5 <Phys::allocateDMA(unsigned long)+0x83>
c000f8f2:	8d 51 0e             	lea    edx,[ecx+0xe]
c000f8f5:	c1 fa 04             	sar    edx,0x4
c000f8f8:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000f8fc:	74 08                	je     c000f906 <Phys::allocateDMA(unsigned long)+0x94>
c000f8fe:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f902:	31 c0                	xor    eax,eax
c000f904:	eb b6                	jmp    c000f8bc <Phys::allocateDMA(unsigned long)+0x4a>
c000f906:	85 f6                	test   esi,esi
c000f908:	74 17                	je     c000f921 <Phys::allocateDMA(unsigned long)+0xaf>
c000f90a:	8d 95 44 d1 02 c0    	lea    edx,[ebp-0x3ffd2ebc]
c000f910:	8d 84 05 45 d1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd2ebb]
c000f917:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f91a:	83 c2 01             	add    edx,0x1
c000f91d:	39 d0                	cmp    eax,edx
c000f91f:	75 f6                	jne    c000f917 <Phys::allocateDMA(unsigned long)+0xa5>
c000f921:	a1 3c d1 02 c0       	mov    eax,ds:0xc002d13c
c000f926:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f92a:	01 f8                	add    eax,edi
c000f92c:	85 d2                	test   edx,edx
c000f92e:	a3 3c d1 02 c0       	mov    ds:0xc002d13c,eax
c000f933:	74 17                	je     c000f94c <Phys::allocateDMA(unsigned long)+0xda>
c000f935:	83 ec 0c             	sub    esp,0xc
c000f938:	68 f8 33 02 c0       	push   0xc00233f8
c000f93d:	e8 24 ff ff ff       	call   c000f866 <KePanic(char const*)>
c000f942:	83 c4 10             	add    esp,0x10
c000f945:	89 f0                	mov    eax,esi
c000f947:	e9 5d ff ff ff       	jmp    c000f8a9 <Phys::allocateDMA(unsigned long)+0x37>
c000f94c:	c1 e5 0c             	shl    ebp,0xc
c000f94f:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000f955:	e9 7c ff ff ff       	jmp    c000f8d6 <Phys::allocateDMA(unsigned long)+0x64>

c000f95a <Phys::freeDMA(unsigned long, unsigned long)>:
c000f95a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f95e:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f964:	a1 3c d1 02 c0       	mov    eax,ds:0xc002d13c
c000f969:	c1 ea 0c             	shr    edx,0xc
c000f96c:	29 d0                	sub    eax,edx
c000f96e:	a3 3c d1 02 c0       	mov    ds:0xc002d13c,eax
c000f973:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f977:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000f97c:	c1 e8 0c             	shr    eax,0xc
c000f97f:	85 d2                	test   edx,edx
c000f981:	74 11                	je     c000f994 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000f983:	05 44 d1 02 c0       	add    eax,0xc002d144
c000f988:	01 c2                	add    edx,eax
c000f98a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f98d:	83 c0 01             	add    eax,0x1
c000f990:	39 d0                	cmp    eax,edx
c000f992:	75 f6                	jne    c000f98a <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000f994:	c3                   	ret    

c000f995 <Phys::setPageState(unsigned long, bool)>:
c000f995:	57                   	push   edi
c000f996:	56                   	push   esi
c000f997:	8b 35 34 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025934
c000f99d:	53                   	push   ebx
c000f99e:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000f9a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f9ab:	0f b6 c0             	movzx  eax,al
c000f9ae:	89 ca                	mov    edx,ecx
c000f9b0:	83 e1 07             	and    ecx,0x7
c000f9b3:	c1 ea 03             	shr    edx,0x3
c000f9b6:	d3 c3                	rol    ebx,cl
c000f9b8:	01 d6                	add    esi,edx
c000f9ba:	d3 e0                	shl    eax,cl
c000f9bc:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000f9bf:	21 fb                	and    ebx,edi
c000f9c1:	88 1e                	mov    BYTE PTR [esi],bl
c000f9c3:	8b 1d 34 59 02 c0    	mov    ebx,DWORD PTR ds:0xc0025934
c000f9c9:	01 da                	add    edx,ebx
c000f9cb:	8a 0a                	mov    cl,BYTE PTR [edx]
c000f9cd:	09 c8                	or     eax,ecx
c000f9cf:	88 02                	mov    BYTE PTR [edx],al
c000f9d1:	5b                   	pop    ebx
c000f9d2:	5e                   	pop    esi
c000f9d3:	5f                   	pop    edi
c000f9d4:	c3                   	ret    

c000f9d5 <Phys::getPageState(unsigned long)>:
c000f9d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9d9:	8b 15 34 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025934
c000f9df:	89 c8                	mov    eax,ecx
c000f9e1:	83 e1 07             	and    ecx,0x7
c000f9e4:	c1 e8 03             	shr    eax,0x3
c000f9e7:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f9eb:	d3 f8                	sar    eax,cl
c000f9ed:	83 e0 01             	and    eax,0x1
c000f9f0:	c3                   	ret    

c000f9f1 <Phys::freePage(unsigned long)>:
c000f9f1:	53                   	push   ebx
c000f9f2:	83 ec 08             	sub    esp,0x8
c000f9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9f9:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000f9ff:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000fa05:	76 41                	jbe    c000fa48 <Phys::freePage(unsigned long)+0x57>
c000fa07:	c1 e8 0c             	shr    eax,0xc
c000fa0a:	50                   	push   eax
c000fa0b:	89 c3                	mov    ebx,eax
c000fa0d:	e8 c3 ff ff ff       	call   c000f9d5 <Phys::getPageState(unsigned long)>
c000fa12:	5a                   	pop    edx
c000fa13:	84 c0                	test   al,al
c000fa15:	74 20                	je     c000fa37 <Phys::freePage(unsigned long)+0x46>
c000fa17:	83 ec 08             	sub    esp,0x8
c000fa1a:	a1 3c d1 02 c0       	mov    eax,ds:0xc002d13c
c000fa1f:	6a 00                	push   0x0
c000fa21:	83 e8 01             	sub    eax,0x1
c000fa24:	53                   	push   ebx
c000fa25:	a3 3c d1 02 c0       	mov    ds:0xc002d13c,eax
c000fa2a:	e8 66 ff ff ff       	call   c000f995 <Phys::setPageState(unsigned long, bool)>
c000fa2f:	83 c4 10             	add    esp,0x10
c000fa32:	83 c4 08             	add    esp,0x8
c000fa35:	5b                   	pop    ebx
c000fa36:	c3                   	ret    
c000fa37:	c7 44 24 10 fd 34 02 c0 	mov    DWORD PTR [esp+0x10],0xc00234fd
c000fa3f:	83 c4 08             	add    esp,0x8
c000fa42:	5b                   	pop    ebx
c000fa43:	e9 1e fe ff ff       	jmp    c000f866 <KePanic(char const*)>
c000fa48:	68 00 10 00 00       	push   0x1000
c000fa4d:	50                   	push   eax
c000fa4e:	e8 07 ff ff ff       	call   c000f95a <Phys::freeDMA(unsigned long, unsigned long)>
c000fa53:	59                   	pop    ecx
c000fa54:	5b                   	pop    ebx
c000fa55:	83 c4 08             	add    esp,0x8
c000fa58:	5b                   	pop    ebx
c000fa59:	c3                   	ret    

c000fa5a <Phys::allocatePage()>:
c000fa5a:	56                   	push   esi
c000fa5b:	53                   	push   ebx
c000fa5c:	83 ec 14             	sub    esp,0x14
c000fa5f:	8b 35 30 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d130
c000fa65:	89 f3                	mov    ebx,esi
c000fa67:	eb 0a                	jmp    c000fa73 <Phys::allocatePage()+0x19>
c000fa69:	89 1d 30 d1 02 c0    	mov    DWORD PTR ds:0xc002d130,ebx
c000fa6f:	39 de                	cmp    esi,ebx
c000fa71:	74 26                	je     c000fa99 <Phys::allocatePage()+0x3f>
c000fa73:	53                   	push   ebx
c000fa74:	e8 5c ff ff ff       	call   c000f9d5 <Phys::getPageState(unsigned long)>
c000fa79:	59                   	pop    ecx
c000fa7a:	84 c0                	test   al,al
c000fa7c:	74 67                	je     c000fae5 <Phys::allocatePage()+0x8b>
c000fa7e:	83 c3 01             	add    ebx,0x1
c000fa81:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fa87:	75 e0                	jne    c000fa69 <Phys::allocatePage()+0xf>
c000fa89:	31 db                	xor    ebx,ebx
c000fa8b:	c7 05 30 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d130,0x0
c000fa95:	39 de                	cmp    esi,ebx
c000fa97:	75 da                	jne    c000fa73 <Phys::allocatePage()+0x19>
c000fa99:	83 ec 0c             	sub    esp,0xc
c000fa9c:	a0 54 d1 02 c0       	mov    al,ds:0xc002d154
c000faa1:	83 f0 01             	xor    eax,0x1
c000faa4:	a2 54 d1 02 c0       	mov    ds:0xc002d154,al
c000faa9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000faae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fab1:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000fab7:	51                   	push   ecx
c000fab8:	e8 c7 43 00 00       	call   c0013e84 <VAS::scanForEviction()>
c000fabd:	83 c4 10             	add    esp,0x10
c000fac0:	85 c0                	test   eax,eax
c000fac2:	75 48                	jne    c000fb0c <Phys::allocatePage()+0xb2>
c000fac4:	83 ec 0c             	sub    esp,0xc
c000fac7:	68 20 34 02 c0       	push   0xc0023420
c000facc:	e8 95 fd ff ff       	call   c000f866 <KePanic(char const*)>
c000fad1:	83 c4 10             	add    esp,0x10
c000fad4:	8b 1d 30 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d130
c000fada:	53                   	push   ebx
c000fadb:	e8 f5 fe ff ff       	call   c000f9d5 <Phys::getPageState(unsigned long)>
c000fae0:	59                   	pop    ecx
c000fae1:	84 c0                	test   al,al
c000fae3:	75 99                	jne    c000fa7e <Phys::allocatePage()+0x24>
c000fae5:	6a 01                	push   0x1
c000fae7:	53                   	push   ebx
c000fae8:	e8 a8 fe ff ff       	call   c000f995 <Phys::setPageState(unsigned long, bool)>
c000faed:	8b 1d 3c d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d13c
c000faf3:	a1 30 d1 02 c0       	mov    eax,ds:0xc002d130
c000faf8:	83 c3 01             	add    ebx,0x1
c000fafb:	5e                   	pop    esi
c000fafc:	89 1d 3c d1 02 c0    	mov    DWORD PTR ds:0xc002d13c,ebx
c000fb02:	c1 e0 0c             	shl    eax,0xc
c000fb05:	5a                   	pop    edx
c000fb06:	83 c4 14             	add    esp,0x14
c000fb09:	5b                   	pop    ebx
c000fb0a:	5e                   	pop    esi
c000fb0b:	c3                   	ret    
c000fb0c:	83 ec 08             	sub    esp,0x8
c000fb0f:	8b 15 3c d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d13c
c000fb15:	6a 01                	push   0x1
c000fb17:	83 c2 01             	add    edx,0x1
c000fb1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb1e:	89 15 3c d1 02 c0    	mov    DWORD PTR ds:0xc002d13c,edx
c000fb24:	89 c2                	mov    edx,eax
c000fb26:	c1 ea 0c             	shr    edx,0xc
c000fb29:	52                   	push   edx
c000fb2a:	e8 66 fe ff ff       	call   c000f995 <Phys::setPageState(unsigned long, bool)>
c000fb2f:	83 c4 10             	add    esp,0x10
c000fb32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb36:	eb ce                	jmp    c000fb06 <Phys::allocatePage()+0xac>

c000fb38 <Phys::allocateContiguousPages(int)>:
c000fb38:	57                   	push   edi
c000fb39:	56                   	push   esi
c000fb3a:	53                   	push   ebx
c000fb3b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fb3f:	fa                   	cli    
c000fb40:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c000fb46:	83 ec 0c             	sub    esp,0xc
c000fb49:	83 c2 01             	add    edx,0x1
c000fb4c:	68 50 34 02 c0       	push   0xc0023450
c000fb51:	89 15 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,edx
c000fb57:	31 db                	xor    ebx,ebx
c000fb59:	e8 06 74 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fb5e:	83 c4 10             	add    esp,0x10
c000fb61:	85 db                	test   ebx,ebx
c000fb63:	75 11                	jne    c000fb76 <Phys::allocateContiguousPages(int)+0x3e>
c000fb65:	e8 f0 fe ff ff       	call   c000fa5a <Phys::allocatePage()>
c000fb6a:	83 ff 01             	cmp    edi,0x1
c000fb6d:	89 c6                	mov    esi,eax
c000fb6f:	74 21                	je     c000fb92 <Phys::allocateContiguousPages(int)+0x5a>
c000fb71:	bb 01 00 00 00       	mov    ebx,0x1
c000fb76:	e8 df fe ff ff       	call   c000fa5a <Phys::allocatePage()>
c000fb7b:	89 da                	mov    edx,ebx
c000fb7d:	c1 e2 0c             	shl    edx,0xc
c000fb80:	01 f2                	add    edx,esi
c000fb82:	39 c2                	cmp    edx,eax
c000fb84:	74 24                	je     c000fbaa <Phys::allocateContiguousPages(int)+0x72>
c000fb86:	bb 01 00 00 00       	mov    ebx,0x1
c000fb8b:	89 c6                	mov    esi,eax
c000fb8d:	83 ff 01             	cmp    edi,0x1
c000fb90:	75 e4                	jne    c000fb76 <Phys::allocateContiguousPages(int)+0x3e>
c000fb92:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c000fb9a:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c000fb9f:	85 c0                	test   eax,eax
c000fba1:	75 01                	jne    c000fba4 <Phys::allocateContiguousPages(int)+0x6c>
c000fba3:	fb                   	sti    
c000fba4:	89 f0                	mov    eax,esi
c000fba6:	5b                   	pop    ebx
c000fba7:	5e                   	pop    esi
c000fba8:	5f                   	pop    edi
c000fba9:	c3                   	ret    
c000fbaa:	83 c3 01             	add    ebx,0x1
c000fbad:	39 fb                	cmp    ebx,edi
c000fbaf:	75 b0                	jne    c000fb61 <Phys::allocateContiguousPages(int)+0x29>
c000fbb1:	eb df                	jmp    c000fb92 <Phys::allocateContiguousPages(int)+0x5a>

c000fbb3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fbb3:	56                   	push   esi
c000fbb4:	53                   	push   ebx
c000fbb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbb9:	39 1d 34 d1 02 c0    	cmp    DWORD PTR ds:0xc002d134,ebx
c000fbbf:	73 06                	jae    c000fbc7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fbc1:	89 1d 34 d1 02 c0    	mov    DWORD PTR ds:0xc002d134,ebx
c000fbc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbcb:	c1 eb 0c             	shr    ebx,0xc
c000fbce:	c1 e8 0c             	shr    eax,0xc
c000fbd1:	39 d8                	cmp    eax,ebx
c000fbd3:	73 13                	jae    c000fbe8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fbd5:	6a 00                	push   0x0
c000fbd7:	8d 70 01             	lea    esi,[eax+0x1]
c000fbda:	50                   	push   eax
c000fbdb:	e8 b5 fd ff ff       	call   c000f995 <Phys::setPageState(unsigned long, bool)>
c000fbe0:	5a                   	pop    edx
c000fbe1:	89 f0                	mov    eax,esi
c000fbe3:	59                   	pop    ecx
c000fbe4:	39 f3                	cmp    ebx,esi
c000fbe6:	75 ed                	jne    c000fbd5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fbe8:	5b                   	pop    ebx
c000fbe9:	5e                   	pop    esi
c000fbea:	c3                   	ret    

c000fbeb <Phys::physicalMemorySetup(unsigned int)>:
c000fbeb:	55                   	push   ebp
c000fbec:	57                   	push   edi
c000fbed:	56                   	push   esi
c000fbee:	53                   	push   ebx
c000fbef:	83 ec 40             	sub    esp,0x40
c000fbf2:	6a 10                	push   0x10
c000fbf4:	6a 00                	push   0x0
c000fbf6:	68 44 d1 02 c0       	push   0xc002d144
c000fbfb:	e8 f0 08 ff ff       	call   c00004f0 <memset>
c000fc00:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fc04:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc09:	05 00 10 00 00       	add    eax,0x1000
c000fc0e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fc12:	5b                   	pop    ebx
c000fc13:	31 db                	xor    ebx,ebx
c000fc15:	5e                   	pop    esi
c000fc16:	50                   	push   eax
c000fc17:	68 13 35 02 c0       	push   0xc0023513
c000fc1c:	e8 43 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fc21:	83 c4 10             	add    esp,0x10
c000fc24:	83 ec 08             	sub    esp,0x8
c000fc27:	6a 01                	push   0x1
c000fc29:	53                   	push   ebx
c000fc2a:	83 c3 01             	add    ebx,0x1
c000fc2d:	e8 63 fd ff ff       	call   c000f995 <Phys::setPageState(unsigned long, bool)>
c000fc32:	83 c4 10             	add    esp,0x10
c000fc35:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc3b:	75 e7                	jne    c000fc24 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fc3d:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000fc44:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000fc4b:	c1 e0 08             	shl    eax,0x8
c000fc4e:	09 c2                	or     edx,eax
c000fc50:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000fc54:	0f 84 98 01 00 00    	je     c000fdf2 <Phys::physicalMemorySetup(unsigned int)+0x207>
c000fc5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc5e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fc66:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fc6b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc6f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fc77:	eb 1c                	jmp    c000fc95 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000fc79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fc7d:	83 c3 18             	add    ebx,0x18
c000fc80:	83 c6 01             	add    esi,0x1
c000fc83:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000fc87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc8b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fc8f:	0f 84 6d 01 00 00    	je     c000fe02 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000fc95:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fc98:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fc9b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fca2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fca6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fca8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fcab:	01 f0                	add    eax,esi
c000fcad:	55                   	push   ebp
c000fcae:	11 fa                	adc    edx,edi
c000fcb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcb4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fcb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcbc:	51                   	push   ecx
c000fcbd:	56                   	push   esi
c000fcbe:	68 b0 34 02 c0       	push   0xc00234b0
c000fcc3:	e8 9c 72 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fcc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fccc:	83 c4 10             	add    esp,0x10
c000fccf:	09 f8                	or     eax,edi
c000fcd1:	0f 85 2b 01 00 00    	jne    c000fe02 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000fcd7:	83 fd 01             	cmp    ebp,0x1
c000fcda:	75 9d                	jne    c000fc79 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000fcdc:	ba 00 00 08 00       	mov    edx,0x80000
c000fce1:	89 c1                	mov    ecx,eax
c000fce3:	39 f2                	cmp    edx,esi
c000fce5:	19 f9                	sbb    ecx,edi
c000fce7:	0f 82 ab 00 00 00    	jb     c000fd98 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000fced:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fcf1:	89 c1                	mov    ecx,eax
c000fcf3:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fcf7:	0f 83 9b 00 00 00    	jae    c000fd98 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000fcfd:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fd02:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fd06:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fd0a:	39 fa                	cmp    edx,edi
c000fd0c:	19 e8                	sbb    eax,ebp
c000fd0e:	0f 82 b0 01 00 00    	jb     c000fec4 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c000fd14:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fd18:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fd1c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fd22:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd27:	83 d5 ff             	adc    ebp,0xffffffff
c000fd2a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fd2e:	31 c0                	xor    eax,eax
c000fd30:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fd34:	39 fa                	cmp    edx,edi
c000fd36:	89 c1                	mov    ecx,eax
c000fd38:	19 e9                	sbb    ecx,ebp
c000fd3a:	0f 83 39 ff ff ff    	jae    c000fc79 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000fd40:	be 00 00 08 00       	mov    esi,0x80000
c000fd45:	83 ec 04             	sub    esp,0x4
c000fd48:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fd4c:	57                   	push   edi
c000fd4d:	56                   	push   esi
c000fd4e:	68 d4 34 02 c0       	push   0xc00234d4
c000fd53:	e8 0c 72 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fd58:	5d                   	pop    ebp
c000fd59:	58                   	pop    eax
c000fd5a:	57                   	push   edi
c000fd5b:	56                   	push   esi
c000fd5c:	e8 52 fe ff ff       	call   c000fbb3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fd61:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fd65:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd69:	83 c4 0c             	add    esp,0xc
c000fd6c:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fd70:	8b 15 40 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d140
c000fd76:	01 d0                	add    eax,edx
c000fd78:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd7f:	a3 40 d1 02 c0       	mov    ds:0xc002d140,eax
c000fd84:	52                   	push   edx
c000fd85:	50                   	push   eax
c000fd86:	68 39 35 02 c0       	push   0xc0023539
c000fd8b:	e8 d4 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fd90:	83 c4 10             	add    esp,0x10
c000fd93:	e9 e1 fe ff ff       	jmp    c000fc79 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000fd98:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fd9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fda0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fda4:	39 ea                	cmp    edx,ebp
c000fda6:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fdaa:	0f 82 c9 fe ff ff    	jb     c000fc79 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000fdb0:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fdb5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fdb9:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fdbd:	0f 83 b6 fe ff ff    	jae    c000fc79 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000fdc3:	39 ee                	cmp    esi,ebp
c000fdc5:	89 f8                	mov    eax,edi
c000fdc7:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fdcb:	0f 83 74 ff ff ff    	jae    c000fd45 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000fdd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fdd9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fddd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fde1:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fde5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fde9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fded:	e9 53 ff ff ff       	jmp    c000fd45 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000fdf2:	83 ec 0c             	sub    esp,0xc
c000fdf5:	68 2b 35 02 c0       	push   0xc002352b
c000fdfa:	e8 67 fa ff ff       	call   c000f866 <KePanic(char const*)>
c000fdff:	83 c4 10             	add    esp,0x10
c000fe02:	83 ec 08             	sub    esp,0x8
c000fe05:	bb 60 00 00 00       	mov    ebx,0x60
c000fe0a:	6a 00                	push   0x0
c000fe0c:	6a 06                	push   0x6
c000fe0e:	e8 82 fb ff ff       	call   c000f995 <Phys::setPageState(unsigned long, bool)>
c000fe13:	58                   	pop    eax
c000fe14:	5a                   	pop    edx
c000fe15:	6a 00                	push   0x0
c000fe17:	6a 07                	push   0x7
c000fe19:	e8 77 fb ff ff       	call   c000f995 <Phys::setPageState(unsigned long, bool)>
c000fe1e:	8b 0d 40 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d140
c000fe24:	83 c4 10             	add    esp,0x10
c000fe27:	83 c1 02             	add    ecx,0x2
c000fe2a:	89 0d 40 d1 02 c0    	mov    DWORD PTR ds:0xc002d140,ecx
c000fe30:	83 ec 08             	sub    esp,0x8
c000fe33:	6a 00                	push   0x0
c000fe35:	53                   	push   ebx
c000fe36:	83 c3 01             	add    ebx,0x1
c000fe39:	e8 57 fb ff ff       	call   c000f995 <Phys::setPageState(unsigned long, bool)>
c000fe3e:	83 c4 10             	add    esp,0x10
c000fe41:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000fe47:	75 e7                	jne    c000fe30 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000fe49:	a1 40 d1 02 c0       	mov    eax,ds:0xc002d140
c000fe4e:	bb 40 01 00 00       	mov    ebx,0x140
c000fe53:	83 c0 20             	add    eax,0x20
c000fe56:	a3 40 d1 02 c0       	mov    ds:0xc002d140,eax
c000fe5b:	eb 26                	jmp    c000fe83 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000fe5d:	83 ec 08             	sub    esp,0x8
c000fe60:	6a 00                	push   0x0
c000fe62:	53                   	push   ebx
c000fe63:	83 c3 01             	add    ebx,0x1
c000fe66:	e8 2a fb ff ff       	call   c000f995 <Phys::setPageState(unsigned long, bool)>
c000fe6b:	a1 40 d1 02 c0       	mov    eax,ds:0xc002d140
c000fe70:	83 c4 10             	add    esp,0x10
c000fe73:	83 c0 01             	add    eax,0x1
c000fe76:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000fe7c:	a3 40 d1 02 c0       	mov    ds:0xc002d140,eax
c000fe81:	74 07                	je     c000fe8a <Phys::physicalMemorySetup(unsigned int)+0x29f>
c000fe83:	3d ff 03 00 00       	cmp    eax,0x3ff
c000fe88:	7e d3                	jle    c000fe5d <Phys::physicalMemorySetup(unsigned int)+0x272>
c000fe8a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000fe8f:	3d ff 07 00 00       	cmp    eax,0x7ff
c000fe94:	7f 26                	jg     c000febc <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c000fe96:	83 ec 08             	sub    esp,0x8
c000fe99:	6a 00                	push   0x0
c000fe9b:	53                   	push   ebx
c000fe9c:	83 c3 01             	add    ebx,0x1
c000fe9f:	e8 f1 fa ff ff       	call   c000f995 <Phys::setPageState(unsigned long, bool)>
c000fea4:	a1 40 d1 02 c0       	mov    eax,ds:0xc002d140
c000fea9:	83 c4 10             	add    esp,0x10
c000feac:	83 c0 01             	add    eax,0x1
c000feaf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000feb5:	a3 40 d1 02 c0       	mov    ds:0xc002d140,eax
c000feba:	75 d3                	jne    c000fe8f <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000febc:	83 c4 3c             	add    esp,0x3c
c000febf:	5b                   	pop    ebx
c000fec0:	5e                   	pop    esi
c000fec1:	5f                   	pop    edi
c000fec2:	5d                   	pop    ebp
c000fec3:	c3                   	ret    
c000fec4:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fecc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fed4:	e9 3b fe ff ff       	jmp    c000fd14 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000fed9:	90                   	nop

c000feda <Pipe::isAtty()>:
c000feda:	31 c0                	xor    eax,eax
c000fedc:	c3                   	ret    
c000fedd:	90                   	nop

c000fede <Pipe::~Pipe()>:
c000fede:	83 ec 0c             	sub    esp,0xc
c000fee1:	ba 98 35 02 c0       	mov    edx,0xc0023598
c000fee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feea:	89 10                	mov    DWORD PTR [eax],edx
c000feec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef0:	83 ec 0c             	sub    esp,0xc
c000fef3:	50                   	push   eax
c000fef4:	e8 e5 2a 00 00       	call   c00129de <UnixFile::~UnixFile()>
c000fef9:	83 c4 10             	add    esp,0x10
c000fefc:	90                   	nop
c000fefd:	83 c4 0c             	add    esp,0xc
c000ff00:	c3                   	ret    
c000ff01:	90                   	nop

c000ff02 <Pipe::~Pipe()>:
c000ff02:	83 ec 0c             	sub    esp,0xc
c000ff05:	83 ec 0c             	sub    esp,0xc
c000ff08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff0c:	e8 cd ff ff ff       	call   c000fede <Pipe::~Pipe()>
c000ff11:	83 c4 10             	add    esp,0x10
c000ff14:	83 ec 08             	sub    esp,0x8
c000ff17:	6a 20                	push   0x20
c000ff19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff1d:	e8 85 cc ff ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c000ff22:	83 c4 10             	add    esp,0x10
c000ff25:	83 c4 0c             	add    esp,0xc
c000ff28:	c3                   	ret    
c000ff29:	90                   	nop

c000ff2a <Pipe::write(unsigned long long, void*, int*)>:
c000ff2a:	55                   	push   ebp
c000ff2b:	57                   	push   edi
c000ff2c:	56                   	push   esi
c000ff2d:	53                   	push   ebx
c000ff2e:	83 ec 1c             	sub    esp,0x1c
c000ff31:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ff35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff39:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000ff3c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ff40:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff43:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff47:	89 d8                	mov    eax,ebx
c000ff49:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000ff4c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ff50:	89 d6                	mov    esi,edx
c000ff52:	89 d7                	mov    edi,edx
c000ff54:	c1 ff 1f             	sar    edi,0x1f
c000ff57:	03 34 24             	add    esi,DWORD PTR [esp]
c000ff5a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000ff5e:	c1 f8 1f             	sar    eax,0x1f
c000ff61:	39 f3                	cmp    ebx,esi
c000ff63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff6b:	19 f8                	sbb    eax,edi
c000ff6d:	b8 01 00 00 00       	mov    eax,0x1
c000ff72:	72 6e                	jb     c000ffe2 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000ff74:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff77:	01 d0                	add    eax,edx
c000ff79:	99                   	cdq    
c000ff7a:	f7 fb                	idiv   ebx
c000ff7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff80:	29 d3                	sub    ebx,edx
c000ff82:	89 d7                	mov    edi,edx
c000ff84:	89 de                	mov    esi,ebx
c000ff86:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff89:	c1 fb 1f             	sar    ebx,0x1f
c000ff8c:	39 f2                	cmp    edx,esi
c000ff8e:	19 d8                	sbb    eax,ebx
c000ff90:	b8 00 00 00 00       	mov    eax,0x0
c000ff95:	72 04                	jb     c000ff9b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff97:	89 d0                	mov    eax,edx
c000ff99:	29 f0                	sub    eax,esi
c000ff9b:	89 d3                	mov    ebx,edx
c000ff9d:	29 c3                	sub    ebx,eax
c000ff9f:	74 0b                	je     c000ffac <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ffa1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ffa4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ffa8:	89 d9                	mov    ecx,ebx
c000ffaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffac:	85 c0                	test   eax,eax
c000ffae:	74 0d                	je     c000ffbd <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ffb0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ffb4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ffb7:	89 de                	mov    esi,ebx
c000ffb9:	89 c1                	mov    ecx,eax
c000ffbb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffbd:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ffc0:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ffc5:	75 10                	jne    c000ffd7 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ffc7:	83 ec 0c             	sub    esp,0xc
c000ffca:	68 55 35 02 c0       	push   0xc0023555
c000ffcf:	e8 92 f8 ff ff       	call   c000f866 <KePanic(char const*)>
c000ffd4:	83 c4 10             	add    esp,0x10
c000ffd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ffdb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ffde:	89 08                	mov    DWORD PTR [eax],ecx
c000ffe0:	31 c0                	xor    eax,eax
c000ffe2:	83 c4 1c             	add    esp,0x1c
c000ffe5:	5b                   	pop    ebx
c000ffe6:	5e                   	pop    esi
c000ffe7:	5f                   	pop    edi
c000ffe8:	5d                   	pop    ebp
c000ffe9:	c3                   	ret    

c000ffea <Pipe::read(unsigned long long, void*, int*)>:
c000ffea:	55                   	push   ebp
c000ffeb:	57                   	push   edi
c000ffec:	56                   	push   esi
c000ffed:	53                   	push   ebx
c000ffee:	83 ec 1c             	sub    esp,0x1c
c000fff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fff5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fff9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fffd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010000:	89 c8                	mov    eax,ecx
c0010002:	99                   	cdq    
c0010003:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010007:	74 27                	je     c0010030 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010009:	39 f9                	cmp    ecx,edi
c001000b:	89 d1                	mov    ecx,edx
c001000d:	19 f1                	sbb    ecx,esi
c001000f:	73 1f                	jae    c0010030 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010011:	fa                   	cli    
c0010012:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0010018:	e8 67 64 00 00       	call   c0016484 <schedule()>
c001001d:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0010024:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c001002b:	75 d0                	jne    c000fffd <Pipe::read(unsigned long long, void*, int*)+0x13>
c001002d:	fb                   	sti    
c001002e:	eb cd                	jmp    c000fffd <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010030:	39 f8                	cmp    eax,edi
c0010032:	89 d1                	mov    ecx,edx
c0010034:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010037:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001003b:	19 f1                	sbb    ecx,esi
c001003d:	73 07                	jae    c0010046 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c001003f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010042:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010046:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010049:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c001004c:	29 f7                	sub    edi,esi
c001004e:	89 f8                	mov    eax,edi
c0010050:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010054:	99                   	cdq    
c0010055:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001005c:	19 d0                	sbb    eax,edx
c001005e:	73 07                	jae    c0010067 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c0010060:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010063:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010067:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001006a:	89 ea                	mov    edx,ebp
c001006c:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010070:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010075:	74 0d                	je     c0010084 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c0010077:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001007a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001007e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010082:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010084:	85 d2                	test   edx,edx
c0010086:	74 11                	je     c0010099 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001008c:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001008f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010093:	89 d1                	mov    ecx,edx
c0010095:	89 c7                	mov    edi,eax
c0010097:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010099:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001009c:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001009f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100a2:	99                   	cdq    
c00100a3:	89 f7                	mov    edi,esi
c00100a5:	03 04 24             	add    eax,DWORD PTR [esp]
c00100a8:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00100ac:	c1 ff 1f             	sar    edi,0x1f
c00100af:	57                   	push   edi
c00100b0:	56                   	push   esi
c00100b1:	52                   	push   edx
c00100b2:	50                   	push   eax
c00100b3:	e8 fc 0d 01 00       	call   c0020eb4 <__umoddi3>
c00100b8:	83 c4 10             	add    esp,0x10
c00100bb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00100be:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00100c3:	75 10                	jne    c00100d5 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c00100c5:	83 ec 0c             	sub    esp,0xc
c00100c8:	68 72 35 02 c0       	push   0xc0023572
c00100cd:	e8 94 f7 ff ff       	call   c000f866 <KePanic(char const*)>
c00100d2:	83 c4 10             	add    esp,0x10
c00100d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00100d9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00100dc:	89 10                	mov    DWORD PTR [eax],edx
c00100de:	83 c4 1c             	add    esp,0x1c
c00100e1:	31 c0                	xor    eax,eax
c00100e3:	5b                   	pop    ebx
c00100e4:	5e                   	pop    esi
c00100e5:	5f                   	pop    edi
c00100e6:	5d                   	pop    ebp
c00100e7:	c3                   	ret    

c00100e8 <Pipe::Pipe(int)>:
c00100e8:	83 ec 0c             	sub    esp,0xc
c00100eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ef:	83 ec 08             	sub    esp,0x8
c00100f2:	6a 00                	push   0x0
c00100f4:	50                   	push   eax
c00100f5:	e8 fe 26 00 00       	call   c00127f8 <UnixFile::UnixFile(int)>
c00100fa:	83 c4 10             	add    esp,0x10
c00100fd:	ba 98 35 02 c0       	mov    edx,0xc0023598
c0010102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010106:	89 10                	mov    DWORD PTR [eax],edx
c0010108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001010c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010110:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010117:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001011e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010122:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010129:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001012d:	83 ec 0c             	sub    esp,0xc
c0010130:	50                   	push   eax
c0010131:	e8 e9 f3 ff ff       	call   c000f51f <malloc>
c0010136:	83 c4 10             	add    esp,0x10
c0010139:	89 c2                	mov    edx,eax
c001013b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010146:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001014a:	90                   	nop
c001014b:	83 c4 0c             	add    esp,0xc
c001014e:	c3                   	ret    

c001014f <KePowerThread(void*)>:
c001014f:	83 ec 0c             	sub    esp,0xc
c0010152:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0010159:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0010160:	75 01                	jne    c0010163 <KePowerThread(void*)+0x14>
c0010162:	fb                   	sti    
c0010163:	83 ec 0c             	sub    esp,0xc
c0010166:	c6 05 60 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d160,0x0
c001016d:	6a 0a                	push   0xa
c001016f:	e8 0c 65 00 00       	call   c0016680 <sleep(unsigned int)>
c0010174:	83 05 a4 d1 02 c0 0a 	add    DWORD PTR ds:0xc002d1a4,0xa
c001017b:	83 c4 10             	add    esp,0x10
c001017e:	eb e3                	jmp    c0010163 <KePowerThread(void*)+0x14>

c0010180 <KeChangePowerSettings(PowerSettings)>:
c0010180:	57                   	push   edi
c0010181:	b9 09 00 00 00       	mov    ecx,0x9
c0010186:	56                   	push   esi
c0010187:	bf 80 d1 02 c0       	mov    edi,0xc002d180
c001018c:	fc                   	cld    
c001018d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010191:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010193:	5e                   	pop    esi
c0010194:	5f                   	pop    edi
c0010195:	c3                   	ret    

c0010196 <KeUserIOReceived()>:
c0010196:	c7 05 a4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1a4,0x0
c00101a0:	c3                   	ret    

c00101a1 <KeHandlePowerButton()>:
c00101a1:	a1 80 d1 02 c0       	mov    eax,ds:0xc002d180
c00101a6:	83 f8 02             	cmp    eax,0x2
c00101a9:	75 05                	jne    c00101b0 <KeHandlePowerButton()+0xf>
c00101ab:	e9 34 da ff ff       	jmp    c000dbe4 <KeShutdown()>
c00101b0:	48                   	dec    eax
c00101b1:	75 05                	jne    c00101b8 <KeHandlePowerButton()+0x17>
c00101b3:	e9 50 da ff ff       	jmp    c000dc08 <KeSleep()>
c00101b8:	c3                   	ret    

c00101b9 <KeHandleSleepButton()>:
c00101b9:	a1 84 d1 02 c0       	mov    eax,ds:0xc002d184
c00101be:	83 f8 02             	cmp    eax,0x2
c00101c1:	75 05                	jne    c00101c8 <KeHandleSleepButton()+0xf>
c00101c3:	e9 1c da ff ff       	jmp    c000dbe4 <KeShutdown()>
c00101c8:	48                   	dec    eax
c00101c9:	75 05                	jne    c00101d0 <KeHandleSleepButton()+0x17>
c00101cb:	e9 38 da ff ff       	jmp    c000dc08 <KeSleep()>
c00101d0:	c3                   	ret    

c00101d1 <KeSetupPowerManager()>:
c00101d1:	83 ec 0c             	sub    esp,0xc
c00101d4:	c7 05 a4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1a4,0x0
c00101de:	68 f0 00 00 00       	push   0xf0
c00101e3:	c6 05 60 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d160,0x0
c00101ea:	6a 00                	push   0x0
c00101ec:	68 4f 01 01 c0       	push   0xc001014f
c00101f1:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c00101f7:	e8 30 60 00 00       	call   c001622c <Process::createThread(void (*)(void*), void*, int)>
c00101fc:	c7 05 80 d1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d180,0x2
c0010206:	c7 05 84 d1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d184,0x1
c0010210:	c7 05 88 d1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d188,0x3
c001021a:	c7 05 8c d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d18c,0x0
c0010224:	c7 05 98 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d198,0x0
c001022e:	c7 05 90 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d190,0x0
c0010238:	c7 05 9c d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d19c,0x0
c0010242:	c7 05 94 d1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002d194,0x3c
c001024c:	c7 05 a0 d1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002d1a0,0x3c
c0010256:	83 c4 1c             	add    esp,0x1c
c0010259:	c3                   	ret    

c001025a <KeRand()>:
c001025a:	69 05 a8 d1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002d1a8,0x2875
c0010264:	69 0d ac d1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002d1ac,0xa2e7b175
c001026e:	53                   	push   ebx
c001026f:	01 c1                	add    ecx,eax
c0010271:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010276:	f7 25 a8 d1 02 c0    	mul    DWORD PTR ds:0xc002d1a8
c001027c:	01 ca                	add    edx,ecx
c001027e:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010283:	83 d2 00             	adc    edx,0x0
c0010286:	a3 a8 d1 02 c0       	mov    ds:0xc002d1a8,eax
c001028b:	0f b7 da             	movzx  ebx,dx
c001028e:	89 da                	mov    edx,ebx
c0010290:	89 1d ac d1 02 c0    	mov    DWORD PTR ds:0xc002d1ac,ebx
c0010296:	0f ac d0 0e          	shrd   eax,edx,0xe
c001029a:	5b                   	pop    ebx
c001029b:	c3                   	ret    

c001029c <KeSeedRand(unsigned int)>:
c001029c:	53                   	push   ebx
c001029d:	83 ec 08             	sub    esp,0x8
c00102a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102a4:	e8 58 94 00 00       	call   c0019701 <HalGetRand()>
c00102a9:	c7 05 ac d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1ac,0x0
c00102b3:	31 d8                	xor    eax,ebx
c00102b5:	a3 a8 d1 02 c0       	mov    ds:0xc002d1a8,eax
c00102ba:	e8 9b ff ff ff       	call   c001025a <KeRand()>
c00102bf:	83 c4 08             	add    esp,0x8
c00102c2:	5b                   	pop    ebx
c00102c3:	eb 95                	jmp    c001025a <KeRand()>

c00102c5 <KeInitRand()>:
c00102c5:	83 ec 0c             	sub    esp,0xc
c00102c8:	e8 58 92 00 00       	call   c0019525 <HalQueryPerformanceCounter()>
c00102cd:	0f 20 da             	mov    edx,cr3
c00102d0:	0f 22 da             	mov    cr3,edx
c00102d3:	0f 20 da             	mov    edx,cr3
c00102d6:	0f 22 da             	mov    cr3,edx
c00102d9:	0f 20 da             	mov    edx,cr3
c00102dc:	0f 22 da             	mov    cr3,edx
c00102df:	0f 20 da             	mov    edx,cr3
c00102e2:	0f 22 da             	mov    cr3,edx
c00102e5:	83 ec 0c             	sub    esp,0xc
c00102e8:	35 03 8a 95 38       	xor    eax,0x38958a03
c00102ed:	50                   	push   eax
c00102ee:	e8 a9 ff ff ff       	call   c001029c <KeSeedRand(unsigned int)>
c00102f3:	83 c4 1c             	add    esp,0x1c
c00102f6:	c3                   	ret    
c00102f7:	90                   	nop

c00102f8 <KeResolveCompatibilitySymbol(char*)>:
c00102f8:	83 ec 0c             	sub    esp,0xc
c00102fb:	83 ec 08             	sub    esp,0x8
c00102fe:	68 ac 35 02 c0       	push   0xc00235ac
c0010303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010307:	e8 44 04 ff ff       	call   c0000750 <strcmp>
c001030c:	83 c4 10             	add    esp,0x10
c001030f:	85 c0                	test   eax,eax
c0010311:	0f 94 c0             	sete   al
c0010314:	0f b6 c0             	movzx  eax,al
c0010317:	85 c0                	test   eax,eax
c0010319:	74 0d                	je     c0010328 <KeResolveCompatibilitySymbol(char*)+0x30>
c001031b:	b8 d0 b0 02 c0       	mov    eax,0xc002b0d0
c0010320:	e9 8b 01 00 00       	jmp    c00104b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010325:	8d 76 00             	lea    esi,[esi+0x0]
c0010328:	83 ec 08             	sub    esp,0x8
c001032b:	68 b5 35 02 c0       	push   0xc00235b5
c0010330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010334:	e8 17 04 ff ff       	call   c0000750 <strcmp>
c0010339:	83 c4 10             	add    esp,0x10
c001033c:	85 c0                	test   eax,eax
c001033e:	0f 94 c0             	sete   al
c0010341:	0f b6 c0             	movzx  eax,al
c0010344:	85 c0                	test   eax,eax
c0010346:	74 0c                	je     c0010354 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010348:	b8 b4 0d 02 c0       	mov    eax,0xc0020db4
c001034d:	e9 5e 01 00 00       	jmp    c00104b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010352:	66 90                	xchg   ax,ax
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	68 bf 35 02 c0       	push   0xc00235bf
c001035c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010360:	e8 eb 03 ff ff       	call   c0000750 <strcmp>
c0010365:	83 c4 10             	add    esp,0x10
c0010368:	85 c0                	test   eax,eax
c001036a:	0f 94 c0             	sete   al
c001036d:	0f b6 c0             	movzx  eax,al
c0010370:	85 c0                	test   eax,eax
c0010372:	74 0c                	je     c0010380 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010374:	b8 e8 0a 02 c0       	mov    eax,0xc0020ae8
c0010379:	e9 32 01 00 00       	jmp    c00104b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001037e:	66 90                	xchg   ax,ax
c0010380:	83 ec 08             	sub    esp,0x8
c0010383:	68 c8 35 02 c0       	push   0xc00235c8
c0010388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001038c:	e8 bf 03 ff ff       	call   c0000750 <strcmp>
c0010391:	83 c4 10             	add    esp,0x10
c0010394:	85 c0                	test   eax,eax
c0010396:	0f 94 c0             	sete   al
c0010399:	0f b6 c0             	movzx  eax,al
c001039c:	85 c0                	test   eax,eax
c001039e:	74 0c                	je     c00103ac <KeResolveCompatibilitySymbol(char*)+0xb4>
c00103a0:	b8 66 f8 00 c0       	mov    eax,0xc000f866
c00103a5:	e9 06 01 00 00       	jmp    c00104b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00103aa:	66 90                	xchg   ax,ax
c00103ac:	83 ec 08             	sub    esp,0x8
c00103af:	68 db 35 02 c0       	push   0xc00235db
c00103b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b8:	e8 93 03 ff ff       	call   c0000750 <strcmp>
c00103bd:	83 c4 10             	add    esp,0x10
c00103c0:	85 c0                	test   eax,eax
c00103c2:	0f 94 c0             	sete   al
c00103c5:	0f b6 c0             	movzx  eax,al
c00103c8:	85 c0                	test   eax,eax
c00103ca:	74 0c                	je     c00103d8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00103cc:	b8 e7 ca 00 c0       	mov    eax,0xc000cae7
c00103d1:	e9 da 00 00 00       	jmp    c00104b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00103d6:	66 90                	xchg   ax,ax
c00103d8:	83 ec 08             	sub    esp,0x8
c00103db:	68 f8 35 02 c0       	push   0xc00235f8
c00103e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103e4:	e8 67 03 ff ff       	call   c0000750 <strcmp>
c00103e9:	83 c4 10             	add    esp,0x10
c00103ec:	85 c0                	test   eax,eax
c00103ee:	0f 94 c0             	sete   al
c00103f1:	0f b6 c0             	movzx  eax,al
c00103f4:	85 c0                	test   eax,eax
c00103f6:	74 0c                	je     c0010404 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00103f8:	b8 b4 0e 02 c0       	mov    eax,0xc0020eb4
c00103fd:	e9 ae 00 00 00       	jmp    c00104b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010402:	66 90                	xchg   ax,ax
c0010404:	83 ec 08             	sub    esp,0x8
c0010407:	68 02 36 02 c0       	push   0xc0023602
c001040c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010410:	e8 3b 03 ff ff       	call   c0000750 <strcmp>
c0010415:	83 c4 10             	add    esp,0x10
c0010418:	85 c0                	test   eax,eax
c001041a:	0f 94 c0             	sete   al
c001041d:	0f b6 c0             	movzx  eax,al
c0010420:	85 c0                	test   eax,eax
c0010422:	74 0c                	je     c0010430 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010424:	b8 34 0c 02 c0       	mov    eax,0xc0020c34
c0010429:	e9 82 00 00 00       	jmp    c00104b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001042e:	66 90                	xchg   ax,ax
c0010430:	83 ec 08             	sub    esp,0x8
c0010433:	68 0b 36 02 c0       	push   0xc002360b
c0010438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001043c:	e8 0f 03 ff ff       	call   c0000750 <strcmp>
c0010441:	83 c4 10             	add    esp,0x10
c0010444:	85 c0                	test   eax,eax
c0010446:	0f 94 c0             	sete   al
c0010449:	0f b6 c0             	movzx  eax,al
c001044c:	85 c0                	test   eax,eax
c001044e:	74 08                	je     c0010458 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010450:	b8 d4 b0 02 c0       	mov    eax,0xc002b0d4
c0010455:	eb 59                	jmp    c00104b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010457:	90                   	nop
c0010458:	83 ec 08             	sub    esp,0x8
c001045b:	68 23 36 02 c0       	push   0xc0023623
c0010460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010464:	e8 e7 02 ff ff       	call   c0000750 <strcmp>
c0010469:	83 c4 10             	add    esp,0x10
c001046c:	85 c0                	test   eax,eax
c001046e:	0f 94 c0             	sete   al
c0010471:	0f b6 c0             	movzx  eax,al
c0010474:	85 c0                	test   eax,eax
c0010476:	74 08                	je     c0010480 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010478:	b8 d4 b0 02 c0       	mov    eax,0xc002b0d4
c001047d:	eb 31                	jmp    c00104b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001047f:	90                   	nop
c0010480:	83 ec 08             	sub    esp,0x8
c0010483:	68 30 36 02 c0       	push   0xc0023630
c0010488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001048c:	e8 bf 02 ff ff       	call   c0000750 <strcmp>
c0010491:	83 c4 10             	add    esp,0x10
c0010494:	85 c0                	test   eax,eax
c0010496:	0f 94 c0             	sete   al
c0010499:	0f b6 c0             	movzx  eax,al
c001049c:	85 c0                	test   eax,eax
c001049e:	74 08                	je     c00104a8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00104a0:	b8 d5 b0 02 c0       	mov    eax,0xc002b0d5
c00104a5:	eb 09                	jmp    c00104b0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00104a7:	90                   	nop
c00104a8:	b8 00 00 00 00       	mov    eax,0x0
c00104ad:	8d 76 00             	lea    esi,[esi+0x0]
c00104b0:	83 c4 0c             	add    esp,0xc
c00104b3:	c3                   	ret    

c00104b4 <Semaphore::Semaphore(int)>:
c00104b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104bc:	89 10                	mov    DWORD PTR [eax],edx
c00104be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00104c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00104df:	90                   	nop
c00104e0:	c3                   	ret    
c00104e1:	90                   	nop
c00104e2:	66 90                	xchg   ax,ax

c00104e4 <Semaphore::tryAcquire()>:
c00104e4:	83 ec 0c             	sub    esp,0xc
c00104e7:	fa                   	cli    
c00104e8:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00104ed:	83 c0 01             	add    eax,0x1
c00104f0:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c00104f5:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00104fa:	83 c0 01             	add    eax,0x1
c00104fd:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010506:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050d:	8b 00                	mov    eax,DWORD PTR [eax]
c001050f:	39 c2                	cmp    edx,eax
c0010511:	7d 59                	jge    c001056c <Semaphore::tryAcquire()+0x88>
c0010513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010517:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001051a:	8d 50 01             	lea    edx,[eax+0x1]
c001051d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010521:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010524:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c0010529:	83 e8 01             	sub    eax,0x1
c001052c:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010531:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c0010536:	85 c0                	test   eax,eax
c0010538:	75 1a                	jne    c0010554 <Semaphore::tryAcquire()+0x70>
c001053a:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c001053f:	85 c0                	test   eax,eax
c0010541:	74 11                	je     c0010554 <Semaphore::tryAcquire()+0x70>
c0010543:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c001054d:	e8 32 5f 00 00       	call   c0016484 <schedule()>
c0010552:	66 90                	xchg   ax,ax
c0010554:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c001055c:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0010561:	85 c0                	test   eax,eax
c0010563:	75 03                	jne    c0010568 <Semaphore::tryAcquire()+0x84>
c0010565:	fb                   	sti    
c0010566:	66 90                	xchg   ax,ax
c0010568:	b0 01                	mov    al,0x1
c001056a:	eb 48                	jmp    c00105b4 <Semaphore::tryAcquire()+0xd0>
c001056c:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c0010571:	83 e8 01             	sub    eax,0x1
c0010574:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010579:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001057e:	85 c0                	test   eax,eax
c0010580:	75 1a                	jne    c001059c <Semaphore::tryAcquire()+0xb8>
c0010582:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c0010587:	85 c0                	test   eax,eax
c0010589:	74 11                	je     c001059c <Semaphore::tryAcquire()+0xb8>
c001058b:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c0010595:	e8 ea 5e 00 00       	call   c0016484 <schedule()>
c001059a:	66 90                	xchg   ax,ax
c001059c:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00105a4:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00105a9:	85 c0                	test   eax,eax
c00105ab:	75 03                	jne    c00105b0 <Semaphore::tryAcquire()+0xcc>
c00105ad:	fb                   	sti    
c00105ae:	66 90                	xchg   ax,ax
c00105b0:	b0 00                	mov    al,0x0
c00105b2:	66 90                	xchg   ax,ax
c00105b4:	83 c4 0c             	add    esp,0xc
c00105b7:	c3                   	ret    

c00105b8 <Semaphore::assertLocked(char const*)>:
c00105b8:	83 ec 0c             	sub    esp,0xc
c00105bb:	fa                   	cli    
c00105bc:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00105c1:	83 c0 01             	add    eax,0x1
c00105c4:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c00105c9:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00105ce:	83 c0 01             	add    eax,0x1
c00105d1:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c00105d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00105dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00105e3:	39 c2                	cmp    edx,eax
c00105e5:	7d 11                	jge    c00105f8 <Semaphore::assertLocked(char const*)+0x40>
c00105e7:	83 ec 0c             	sub    esp,0xc
c00105ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00105ee:	e8 73 f2 ff ff       	call   c000f866 <KePanic(char const*)>
c00105f3:	83 c4 10             	add    esp,0x10
c00105f6:	66 90                	xchg   ax,ax
c00105f8:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00105fd:	83 e8 01             	sub    eax,0x1
c0010600:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010605:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001060a:	85 c0                	test   eax,eax
c001060c:	75 1a                	jne    c0010628 <Semaphore::assertLocked(char const*)+0x70>
c001060e:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c0010613:	85 c0                	test   eax,eax
c0010615:	74 11                	je     c0010628 <Semaphore::assertLocked(char const*)+0x70>
c0010617:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c0010621:	e8 5e 5e 00 00       	call   c0016484 <schedule()>
c0010626:	66 90                	xchg   ax,ax
c0010628:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0010630:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0010635:	85 c0                	test   eax,eax
c0010637:	75 03                	jne    c001063c <Semaphore::assertLocked(char const*)+0x84>
c0010639:	fb                   	sti    
c001063a:	66 90                	xchg   ax,ax
c001063c:	90                   	nop
c001063d:	83 c4 0c             	add    esp,0xc
c0010640:	c3                   	ret    
c0010641:	90                   	nop
c0010642:	66 90                	xchg   ax,ax

c0010644 <Semaphore::acquire(int)>:
c0010644:	83 ec 1c             	sub    esp,0x1c
c0010647:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001064c:	0f 84 9a 00 00 00    	je     c00106ec <Semaphore::acquire(int)+0xa8>
c0010652:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001065a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c001065f:	90                   	nop
c0010660:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010665:	85 c0                	test   eax,eax
c0010667:	74 77                	je     c00106e0 <Semaphore::acquire(int)+0x9c>
c0010669:	83 ec 0c             	sub    esp,0xc
c001066c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010670:	e8 6f fe ff ff       	call   c00104e4 <Semaphore::tryAcquire()>
c0010675:	83 c4 10             	add    esp,0x10
c0010678:	83 f0 01             	xor    eax,0x1
c001067b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001067f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010683:	83 f0 01             	xor    eax,0x1
c0010686:	0f b6 c0             	movzx  eax,al
c0010689:	85 c0                	test   eax,eax
c001068b:	75 4f                	jne    c00106dc <Semaphore::acquire(int)+0x98>
c001068d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010692:	7f 2c                	jg     c00106c0 <Semaphore::acquire(int)+0x7c>
c0010694:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010698:	89 d0                	mov    eax,edx
c001069a:	c1 e0 02             	shl    eax,0x2
c001069d:	01 d0                	add    eax,edx
c001069f:	01 c0                	add    eax,eax
c00106a1:	83 ec 0c             	sub    esp,0xc
c00106a4:	50                   	push   eax
c00106a5:	e8 c2 5f 00 00       	call   c001666c <milliTenthSleep(unsigned int)>
c00106aa:	83 c4 10             	add    esp,0x10
c00106ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00106b1:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00106b5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00106bd:	eb a1                	jmp    c0010660 <Semaphore::acquire(int)+0x1c>
c00106bf:	90                   	nop
c00106c0:	83 ec 0c             	sub    esp,0xc
c00106c3:	68 90 01 00 00       	push   0x190
c00106c8:	e8 9f 5f 00 00       	call   c001666c <milliTenthSleep(unsigned int)>
c00106cd:	83 c4 10             	add    esp,0x10
c00106d0:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c00106d5:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c00106da:	eb 84                	jmp    c0010660 <Semaphore::acquire(int)+0x1c>
c00106dc:	90                   	nop
c00106dd:	8d 76 00             	lea    esi,[esi+0x0]
c00106e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106e4:	e9 fb 00 00 00       	jmp    c00107e4 <Semaphore::acquire(int)+0x1a0>
c00106e9:	8d 76 00             	lea    esi,[esi+0x0]
c00106ec:	fa                   	cli    
c00106ed:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00106f2:	83 c0 01             	add    eax,0x1
c00106f5:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c00106fa:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00106ff:	83 c0 01             	add    eax,0x1
c0010702:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010707:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001070b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001070e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010712:	8b 00                	mov    eax,DWORD PTR [eax]
c0010714:	39 c2                	cmp    edx,eax
c0010716:	7d 14                	jge    c001072c <Semaphore::acquire(int)+0xe8>
c0010718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001071c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001071f:	8d 50 01             	lea    edx,[eax+0x1]
c0010722:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010726:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010729:	eb 6d                	jmp    c0010798 <Semaphore::acquire(int)+0x154>
c001072b:	90                   	nop
c001072c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010731:	8b 00                	mov    eax,DWORD PTR [eax]
c0010733:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001073a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001073e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010741:	85 c0                	test   eax,eax
c0010743:	75 13                	jne    c0010758 <Semaphore::acquire(int)+0x114>
c0010745:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001074a:	8b 10                	mov    edx,DWORD PTR [eax]
c001074c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010750:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010753:	eb 17                	jmp    c001076c <Semaphore::acquire(int)+0x128>
c0010755:	8d 76 00             	lea    esi,[esi+0x0]
c0010758:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001075d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010761:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010764:	8b 12                	mov    edx,DWORD PTR [edx]
c0010766:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010769:	8d 76 00             	lea    esi,[esi+0x0]
c001076c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010771:	8b 10                	mov    edx,DWORD PTR [eax]
c0010773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010777:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001077a:	83 ec 0c             	sub    esp,0xc
c001077d:	68 40 36 02 c0       	push   0xc0023640
c0010782:	e8 dd 67 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010787:	83 c4 10             	add    esp,0x10
c001078a:	83 ec 0c             	sub    esp,0xc
c001078d:	6a 05                	push   0x5
c001078f:	e8 b0 5d 00 00       	call   c0016544 <blockTask(TaskState)>
c0010794:	83 c4 10             	add    esp,0x10
c0010797:	90                   	nop
c0010798:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001079d:	83 e8 01             	sub    eax,0x1
c00107a0:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c00107a5:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00107aa:	85 c0                	test   eax,eax
c00107ac:	75 1a                	jne    c00107c8 <Semaphore::acquire(int)+0x184>
c00107ae:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c00107b3:	85 c0                	test   eax,eax
c00107b5:	74 11                	je     c00107c8 <Semaphore::acquire(int)+0x184>
c00107b7:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c00107c1:	e8 be 5c 00 00       	call   c0016484 <schedule()>
c00107c6:	66 90                	xchg   ax,ax
c00107c8:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00107d0:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00107d5:	85 c0                	test   eax,eax
c00107d7:	75 03                	jne    c00107dc <Semaphore::acquire(int)+0x198>
c00107d9:	fb                   	sti    
c00107da:	66 90                	xchg   ax,ax
c00107dc:	b8 00 00 00 00       	mov    eax,0x0
c00107e1:	8d 76 00             	lea    esi,[esi+0x0]
c00107e4:	83 c4 1c             	add    esp,0x1c
c00107e7:	c3                   	ret    

c00107e8 <Semaphore::acquire()>:
c00107e8:	83 ec 0c             	sub    esp,0xc
c00107eb:	83 ec 08             	sub    esp,0x8
c00107ee:	6a 00                	push   0x0
c00107f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107f4:	e8 4b fe ff ff       	call   c0010644 <Semaphore::acquire(int)>
c00107f9:	83 c4 10             	add    esp,0x10
c00107fc:	90                   	nop
c00107fd:	83 c4 0c             	add    esp,0xc
c0010800:	c3                   	ret    
c0010801:	90                   	nop
c0010802:	66 90                	xchg   ax,ax

c0010804 <Semaphore::release()>:
c0010804:	83 ec 1c             	sub    esp,0x1c
c0010807:	fa                   	cli    
c0010808:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001080d:	83 c0 01             	add    eax,0x1
c0010810:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0010815:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001081a:	83 c0 01             	add    eax,0x1
c001081d:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010829:	85 c0                	test   eax,eax
c001082b:	74 2b                	je     c0010858 <Semaphore::release()+0x54>
c001082d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010831:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010834:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010838:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001083c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001083f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010843:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010846:	83 ec 0c             	sub    esp,0xc
c0010849:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001084d:	e8 42 5f 00 00       	call   c0016794 <unblockTask(ThreadControlBlock*)>
c0010852:	83 c4 10             	add    esp,0x10
c0010855:	eb 15                	jmp    c001086c <Semaphore::release()+0x68>
c0010857:	90                   	nop
c0010858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001085c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001085f:	8d 50 ff             	lea    edx,[eax-0x1]
c0010862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010866:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010869:	8d 76 00             	lea    esi,[esi+0x0]
c001086c:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c0010871:	83 e8 01             	sub    eax,0x1
c0010874:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0010879:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c001087e:	85 c0                	test   eax,eax
c0010880:	75 1a                	jne    c001089c <Semaphore::release()+0x98>
c0010882:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c0010887:	85 c0                	test   eax,eax
c0010889:	74 11                	je     c001089c <Semaphore::release()+0x98>
c001088b:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c0010895:	e8 ea 5b 00 00       	call   c0016484 <schedule()>
c001089a:	66 90                	xchg   ax,ax
c001089c:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00108a4:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00108a9:	85 c0                	test   eax,eax
c00108ab:	75 03                	jne    c00108b0 <Semaphore::release()+0xac>
c00108ad:	fb                   	sti    
c00108ae:	66 90                	xchg   ax,ax
c00108b0:	90                   	nop
c00108b1:	83 c4 1c             	add    esp,0x1c
c00108b4:	c3                   	ret    

c00108b5 <KiSigKill(int)>:
c00108b5:	83 ec 0c             	sub    esp,0xc
c00108b8:	6a 00                	push   0x0
c00108ba:	6a 00                	push   0x0
c00108bc:	6a ff                	push   0xffffffff
c00108be:	6a 01                	push   0x1
c00108c0:	e8 8d 57 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00108c5:	83 c4 1c             	add    esp,0x1c
c00108c8:	c3                   	ret    

c00108c9 <KiDefaultSignalHandlerIgnore(int)>:
c00108c9:	c3                   	ret    

c00108ca <KiDefaultSignalHandlerPause(int)>:
c00108ca:	57                   	push   edi
c00108cb:	b9 07 00 00 00       	mov    ecx,0x7
c00108d0:	56                   	push   esi
c00108d1:	be 9b 36 02 c0       	mov    esi,0xc002369b
c00108d6:	83 ec 24             	sub    esp,0x24
c00108d9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00108dd:	fc                   	cld    
c00108de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108e0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00108e4:	50                   	push   eax
c00108e5:	6a 00                	push   0x0
c00108e7:	6a 00                	push   0x0
c00108e9:	6a 27                	push   0x27
c00108eb:	e8 62 57 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00108f0:	83 c4 34             	add    esp,0x34
c00108f3:	5e                   	pop    esi
c00108f4:	5f                   	pop    edi
c00108f5:	c3                   	ret    

c00108f6 <KiDefaultSignalHandlerResume(int)>:
c00108f6:	57                   	push   edi
c00108f7:	b9 1d 00 00 00       	mov    ecx,0x1d
c00108fc:	56                   	push   esi
c00108fd:	be b7 36 02 c0       	mov    esi,0xc00236b7
c0010902:	83 ec 24             	sub    esp,0x24
c0010905:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010909:	fc                   	cld    
c001090a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001090c:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010910:	50                   	push   eax
c0010911:	6a 00                	push   0x0
c0010913:	6a 00                	push   0x0
c0010915:	6a 27                	push   0x27
c0010917:	e8 36 57 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001091c:	83 c4 34             	add    esp,0x34
c001091f:	5e                   	pop    esi
c0010920:	5f                   	pop    edi
c0010921:	c3                   	ret    

c0010922 <KeDeinitSignals(SigHandlerBlock*)>:
c0010922:	e9 08 ec ff ff       	jmp    c000f52f <free>

c0010927 <KeInitSignals()>:
c0010927:	53                   	push   ebx
c0010928:	83 ec 14             	sub    esp,0x14
c001092b:	68 c8 00 00 00       	push   0xc8
c0010930:	e8 ea eb ff ff       	call   c000f51f <malloc>
c0010935:	83 c4 0c             	add    esp,0xc
c0010938:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010942:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001094c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010953:	89 c3                	mov    ebx,eax
c0010955:	6a 20                	push   0x20
c0010957:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001095d:	6a 00                	push   0x0
c001095f:	50                   	push   eax
c0010960:	e8 8b fb fe ff       	call   c00004f0 <memset>
c0010965:	83 c4 0c             	add    esp,0xc
c0010968:	6a 44                	push   0x44
c001096a:	6a 00                	push   0x0
c001096c:	53                   	push   ebx
c001096d:	e8 7e fb fe ff       	call   c00004f0 <memset>
c0010972:	89 d8                	mov    eax,ebx
c0010974:	83 c4 18             	add    esp,0x18
c0010977:	5b                   	pop    ebx
c0010978:	c3                   	ret    

c0010979 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010979:	53                   	push   ebx
c001097a:	b8 01 00 00 00       	mov    eax,0x1
c001097f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010983:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010987:	83 f9 10             	cmp    ecx,0x10
c001098a:	7f 21                	jg     c00109ad <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001098c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001098f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010993:	89 03                	mov    DWORD PTR [ebx],eax
c0010995:	b8 01 00 00 00       	mov    eax,0x1
c001099a:	d3 e0                	shl    eax,cl
c001099c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00109a0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00109a3:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00109ab:	31 c0                	xor    eax,eax
c00109ad:	5b                   	pop    ebx
c00109ae:	c3                   	ret    

c00109af <KeRaiseSignal(SigHandlerBlock*, int)>:
c00109af:	55                   	push   ebp
c00109b0:	57                   	push   edi
c00109b1:	bf 08 00 00 00       	mov    edi,0x8
c00109b6:	56                   	push   esi
c00109b7:	53                   	push   ebx
c00109b8:	83 ec 18             	sub    esp,0x18
c00109bb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00109bf:	68 d4 36 02 c0       	push   0xc00236d4
c00109c4:	e8 9b 65 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00109c9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00109d0:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00109d6:	83 c4 10             	add    esp,0x10
c00109d9:	31 c9                	xor    ecx,ecx
c00109db:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00109df:	99                   	cdq    
c00109e0:	f7 ff                	idiv   edi
c00109e2:	8d 42 24             	lea    eax,[edx+0x24]
c00109e5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00109e9:	85 f6                	test   esi,esi
c00109eb:	75 1a                	jne    c0010a07 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00109ed:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00109f1:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00109f5:	50                   	push   eax
c00109f6:	50                   	push   eax
c00109f7:	52                   	push   edx
c00109f8:	68 e5 36 02 c0       	push   0xc00236e5
c00109fd:	e8 62 65 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010a02:	83 c4 10             	add    esp,0x10
c0010a05:	eb 1b                	jmp    c0010a22 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010a07:	41                   	inc    ecx
c0010a08:	83 f9 08             	cmp    ecx,0x8
c0010a0b:	75 ce                	jne    c00109db <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010a0d:	83 ec 0c             	sub    esp,0xc
c0010a10:	be 01 00 00 00       	mov    esi,0x1
c0010a15:	68 06 37 02 c0       	push   0xc0023706
c0010a1a:	e8 45 65 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	83 c4 0c             	add    esp,0xc
c0010a25:	89 f0                	mov    eax,esi
c0010a27:	5b                   	pop    ebx
c0010a28:	5e                   	pop    esi
c0010a29:	5f                   	pop    edi
c0010a2a:	5d                   	pop    ebp
c0010a2b:	c3                   	ret    

c0010a2c <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010a2c:	55                   	push   ebp
c0010a2d:	57                   	push   edi
c0010a2e:	56                   	push   esi
c0010a2f:	53                   	push   ebx
c0010a30:	51                   	push   ecx
c0010a31:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010a35:	85 db                	test   ebx,ebx
c0010a37:	0f 84 bc 00 00 00    	je     c0010af9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010a3d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010a44:	0f 84 af 00 00 00    	je     c0010af9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010a4a:	31 c9                	xor    ecx,ecx
c0010a4c:	bf 08 00 00 00       	mov    edi,0x8
c0010a51:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010a57:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010a5a:	99                   	cdq    
c0010a5b:	f7 ff                	idiv   edi
c0010a5d:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010a64:	85 ed                	test   ebp,ebp
c0010a66:	0f 84 9e 00 00 00    	je     c0010b0a <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0010a6c:	89 e9                	mov    ecx,ebp
c0010a6e:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010a74:	bf 01 00 00 00       	mov    edi,0x1
c0010a79:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a7c:	d3 e7                	shl    edi,cl
c0010a7e:	31 c9                	xor    ecx,ecx
c0010a80:	b8 01 00 00 00       	mov    eax,0x1
c0010a85:	d3 e0                	shl    eax,cl
c0010a87:	85 04 24             	test   DWORD PTR [esp],eax
c0010a8a:	74 06                	je     c0010a92 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0010a8c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010a90:	75 67                	jne    c0010af9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010a92:	41                   	inc    ecx
c0010a93:	83 f9 11             	cmp    ecx,0x11
c0010a96:	75 e8                	jne    c0010a80 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0010a98:	46                   	inc    esi
c0010a99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010a9c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010aa2:	09 f8                	or     eax,edi
c0010aa4:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010aaf:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010ab5:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010abc:	31 c0                	xor    eax,eax
c0010abe:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010ac6:	74 09                	je     c0010ad1 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0010ac8:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010acf:	eb 06                	jmp    c0010ad7 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0010ad1:	40                   	inc    eax
c0010ad2:	83 f8 08             	cmp    eax,0x8
c0010ad5:	75 e7                	jne    c0010abe <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0010ad7:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010ada:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010ade:	83 fd 09             	cmp    ebp,0x9
c0010ae1:	89 2a                	mov    DWORD PTR [edx],ebp
c0010ae3:	75 07                	jne    c0010aec <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0010ae5:	b8 b5 08 01 c0       	mov    eax,0xc00108b5
c0010aea:	eb 31                	jmp    c0010b1d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0010aec:	83 f8 01             	cmp    eax,0x1
c0010aef:	75 0c                	jne    c0010afd <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0010af1:	f7 d7                	not    edi
c0010af3:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010af9:	31 c0                	xor    eax,eax
c0010afb:	eb 20                	jmp    c0010b1d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0010afd:	85 c0                	test   eax,eax
c0010aff:	75 1c                	jne    c0010b1d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0010b01:	8b 04 ad 40 59 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffda6c0]
c0010b08:	eb 13                	jmp    c0010b1d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0010b0a:	46                   	inc    esi
c0010b0b:	41                   	inc    ecx
c0010b0c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010b12:	83 f9 08             	cmp    ecx,0x8
c0010b15:	0f 85 36 ff ff ff    	jne    c0010a51 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0010b1b:	eb dc                	jmp    c0010af9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010b1d:	5a                   	pop    edx
c0010b1e:	5b                   	pop    ebx
c0010b1f:	5e                   	pop    esi
c0010b20:	5f                   	pop    edi
c0010b21:	5d                   	pop    ebp
c0010b22:	c3                   	ret    

c0010b23 <KiCheckSignalZ>:
c0010b23:	83 ec 10             	sub    esp,0x10
c0010b26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010b2a:	50                   	push   eax
c0010b2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b33:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010b39:	e8 ee fe ff ff       	call   c0010a2c <KeCheckSignal(SigHandlerBlock*, int*)>
c0010b3e:	5a                   	pop    edx
c0010b3f:	31 d2                	xor    edx,edx
c0010b41:	59                   	pop    ecx
c0010b42:	85 c0                	test   eax,eax
c0010b44:	74 19                	je     c0010b5f <KiCheckSignalZ+0x3c>
c0010b46:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010b4c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010b4f:	89 02                	mov    DWORD PTR [edx],eax
c0010b51:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010b58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b5c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010b5f:	89 d0                	mov    eax,edx
c0010b61:	83 c4 10             	add    esp,0x10
c0010b64:	c3                   	ret    

c0010b65 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010b65:	56                   	push   esi
c0010b66:	53                   	push   ebx
c0010b67:	bb 01 00 00 00       	mov    ebx,0x1
c0010b6c:	52                   	push   edx
c0010b6d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010b71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b75:	d3 e3                	shl    ebx,cl
c0010b77:	83 f9 10             	cmp    ecx,0x10
c0010b7a:	7f 08                	jg     c0010b84 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010b7c:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010b82:	75 10                	jne    c0010b94 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010b84:	83 ec 0c             	sub    esp,0xc
c0010b87:	68 17 37 02 c0       	push   0xc0023717
c0010b8c:	e8 d5 ec ff ff       	call   c000f866 <KePanic(char const*)>
c0010b91:	83 c4 10             	add    esp,0x10
c0010b94:	f7 d3                	not    ebx
c0010b96:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010b9c:	58                   	pop    eax
c0010b9d:	5b                   	pop    ebx
c0010b9e:	5e                   	pop    esi
c0010b9f:	c3                   	ret    

c0010ba0 <KiFinishSignalZ>:
c0010ba0:	53                   	push   ebx
c0010ba1:	83 ec 10             	sub    esp,0x10
c0010ba4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ba8:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010bab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bb3:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010bb9:	e8 a7 ff ff ff       	call   c0010b65 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010bbe:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010bc4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010bcb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010bd2:	83 c4 18             	add    esp,0x18
c0010bd5:	5b                   	pop    ebx
c0010bd6:	c3                   	ret    

c0010bd7 <SysSeekDir(regs*)>:
c0010bd7:	31 c0                	xor    eax,eax
c0010bd9:	31 d2                	xor    edx,edx
c0010bdb:	c3                   	ret    

c0010bdc <SysTellDir(regs*)>:
c0010bdc:	31 c0                	xor    eax,eax
c0010bde:	31 d2                	xor    edx,edx
c0010be0:	c3                   	ret    

c0010be1 <SysVerify(regs*)>:
c0010be1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010be5:	31 d2                	xor    edx,edx
c0010be7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010bea:	c3                   	ret    

c0010beb <SysGetArgc(regs*)>:
c0010beb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bf0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bf3:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010bf9:	89 c2                	mov    edx,eax
c0010bfb:	c1 fa 1f             	sar    edx,0x1f
c0010bfe:	c3                   	ret    

c0010bff <SysTTYName(regs*)>:
c0010bff:	b8 01 00 00 00       	mov    eax,0x1
c0010c04:	31 d2                	xor    edx,edx
c0010c06:	c3                   	ret    

c0010c07 <SysFormatDisk(regs*)>:
c0010c07:	56                   	push   esi
c0010c08:	53                   	push   ebx
c0010c09:	83 ec 04             	sub    esp,0x4
c0010c0c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c10:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c0010c16:	eb 28                	jmp    c0010c40 <SysFormatDisk(regs*)+0x39>
c0010c18:	83 ec 0c             	sub    esp,0xc
c0010c1b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010c1e:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010c21:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010c23:	51                   	push   ecx
c0010c24:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010c27:	51                   	push   ecx
c0010c28:	50                   	push   eax
c0010c29:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c0010c30:	50                   	push   eax
c0010c31:	53                   	push   ebx
c0010c32:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0010c35:	83 c4 20             	add    esp,0x20
c0010c38:	83 f8 08             	cmp    eax,0x8
c0010c3b:	75 14                	jne    c0010c51 <SysFormatDisk(regs*)+0x4a>
c0010c3d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010c40:	85 db                	test   ebx,ebx
c0010c42:	75 d4                	jne    c0010c18 <SysFormatDisk(regs*)+0x11>
c0010c44:	83 c4 04             	add    esp,0x4
c0010c47:	b8 03 00 00 00       	mov    eax,0x3
c0010c4c:	31 d2                	xor    edx,edx
c0010c4e:	5b                   	pop    ebx
c0010c4f:	5e                   	pop    esi
c0010c50:	c3                   	ret    
c0010c51:	85 c0                	test   eax,eax
c0010c53:	74 1f                	je     c0010c74 <SysFormatDisk(regs*)+0x6d>
c0010c55:	83 f8 09             	cmp    eax,0x9
c0010c58:	74 0d                	je     c0010c67 <SysFormatDisk(regs*)+0x60>
c0010c5a:	83 c4 04             	add    esp,0x4
c0010c5d:	b8 02 00 00 00       	mov    eax,0x2
c0010c62:	31 d2                	xor    edx,edx
c0010c64:	5b                   	pop    ebx
c0010c65:	5e                   	pop    esi
c0010c66:	c3                   	ret    
c0010c67:	83 c4 04             	add    esp,0x4
c0010c6a:	b8 01 00 00 00       	mov    eax,0x1
c0010c6f:	31 d2                	xor    edx,edx
c0010c71:	5b                   	pop    ebx
c0010c72:	5e                   	pop    esi
c0010c73:	c3                   	ret    
c0010c74:	83 c4 04             	add    esp,0x4
c0010c77:	31 c0                	xor    eax,eax
c0010c79:	31 d2                	xor    edx,edx
c0010c7b:	5b                   	pop    ebx
c0010c7c:	5e                   	pop    esi
c0010c7d:	c3                   	ret    

c0010c7e <SysSetDiskVolumeLabel(regs*)>:
c0010c7e:	56                   	push   esi
c0010c7f:	53                   	push   ebx
c0010c80:	83 ec 04             	sub    esp,0x4
c0010c83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010c87:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010c8a:	83 f8 19             	cmp    eax,0x19
c0010c8d:	77 33                	ja     c0010cc2 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010c8f:	8b 0c 85 e0 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5520]
c0010c96:	85 c9                	test   ecx,ecx
c0010c98:	74 28                	je     c0010cc2 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010c9a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010c9d:	85 db                	test   ebx,ebx
c0010c9f:	74 21                	je     c0010cc2 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010ca1:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010ca7:	85 d2                	test   edx,edx
c0010ca9:	74 17                	je     c0010cc2 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010cab:	8b 32                	mov    esi,DWORD PTR [edx]
c0010cad:	53                   	push   ebx
c0010cae:	50                   	push   eax
c0010caf:	51                   	push   ecx
c0010cb0:	52                   	push   edx
c0010cb1:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0010cb4:	83 c4 10             	add    esp,0x10
c0010cb7:	89 c2                	mov    edx,eax
c0010cb9:	83 c4 04             	add    esp,0x4
c0010cbc:	c1 fa 1f             	sar    edx,0x1f
c0010cbf:	5b                   	pop    ebx
c0010cc0:	5e                   	pop    esi
c0010cc1:	c3                   	ret    
c0010cc2:	83 c4 04             	add    esp,0x4
c0010cc5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010cca:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ccf:	5b                   	pop    ebx
c0010cd0:	5e                   	pop    esi
c0010cd1:	c3                   	ret    

c0010cd2 <SysGetDiskVolumeLabel(regs*)>:
c0010cd2:	57                   	push   edi
c0010cd3:	56                   	push   esi
c0010cd4:	53                   	push   ebx
c0010cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010cdc:	83 fa 19             	cmp    edx,0x19
c0010cdf:	77 3c                	ja     c0010d1d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ce1:	8b 0c 95 e0 aa 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5520]
c0010ce8:	85 c9                	test   ecx,ecx
c0010cea:	74 31                	je     c0010d1d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010cec:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010cef:	85 db                	test   ebx,ebx
c0010cf1:	74 2a                	je     c0010d1d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010cf3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010cf6:	85 f6                	test   esi,esi
c0010cf8:	74 23                	je     c0010d1d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010cfa:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010d00:	85 c0                	test   eax,eax
c0010d02:	74 19                	je     c0010d1d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010d04:	83 ec 0c             	sub    esp,0xc
c0010d07:	8b 38                	mov    edi,DWORD PTR [eax]
c0010d09:	56                   	push   esi
c0010d0a:	53                   	push   ebx
c0010d0b:	52                   	push   edx
c0010d0c:	51                   	push   ecx
c0010d0d:	50                   	push   eax
c0010d0e:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0010d11:	83 c4 20             	add    esp,0x20
c0010d14:	89 c2                	mov    edx,eax
c0010d16:	5b                   	pop    ebx
c0010d17:	c1 fa 1f             	sar    edx,0x1f
c0010d1a:	5e                   	pop    esi
c0010d1b:	5f                   	pop    edi
c0010d1c:	c3                   	ret    
c0010d1d:	5b                   	pop    ebx
c0010d1e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010d23:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d28:	5e                   	pop    esi
c0010d29:	5f                   	pop    edi
c0010d2a:	c3                   	ret    

c0010d2b <SysRealpath(regs*)>:
c0010d2b:	83 ec 0c             	sub    esp,0xc
c0010d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d32:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010d35:	85 d2                	test   edx,edx
c0010d37:	74 07                	je     c0010d40 <SysRealpath(regs*)+0x15>
c0010d39:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d3c:	85 c0                	test   eax,eax
c0010d3e:	75 0b                	jne    c0010d4b <SysRealpath(regs*)+0x20>
c0010d40:	b8 01 00 00 00       	mov    eax,0x1
c0010d45:	31 d2                	xor    edx,edx
c0010d47:	83 c4 0c             	add    esp,0xc
c0010d4a:	c3                   	ret    
c0010d4b:	6a 00                	push   0x0
c0010d4d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010d53:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010d56:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010d5c:	51                   	push   ecx
c0010d5d:	52                   	push   edx
c0010d5e:	50                   	push   eax
c0010d5f:	e8 b6 70 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010d64:	83 c4 10             	add    esp,0x10
c0010d67:	31 c0                	xor    eax,eax
c0010d69:	31 d2                	xor    edx,edx
c0010d6b:	83 c4 0c             	add    esp,0xc
c0010d6e:	c3                   	ret    

c0010d6f <SysReadDir(regs*)>:
c0010d6f:	53                   	push   ebx
c0010d70:	83 ec 18             	sub    esp,0x18
c0010d73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010d77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010d7a:	83 f8 02             	cmp    eax,0x2
c0010d7d:	76 61                	jbe    c0010de0 <SysReadDir(regs*)+0x71>
c0010d7f:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010d86:	77 49                	ja     c0010dd1 <SysReadDir(regs*)+0x62>
c0010d88:	83 ec 0c             	sub    esp,0xc
c0010d8b:	50                   	push   eax
c0010d8c:	e8 5c 1d 00 00       	call   c0012aed <KeGetFileFromDescriptor(int)>
c0010d91:	83 c4 10             	add    esp,0x10
c0010d94:	85 c0                	test   eax,eax
c0010d96:	74 39                	je     c0010dd1 <SysReadDir(regs*)+0x62>
c0010d98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010da0:	83 ec 0c             	sub    esp,0xc
c0010da3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010da5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010da9:	51                   	push   ecx
c0010daa:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010dad:	51                   	push   ecx
c0010dae:	6a 00                	push   0x0
c0010db0:	68 10 01 00 00       	push   0x110
c0010db5:	50                   	push   eax
c0010db6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010db9:	83 c4 20             	add    esp,0x20
c0010dbc:	85 c0                	test   eax,eax
c0010dbe:	74 29                	je     c0010de9 <SysReadDir(regs*)+0x7a>
c0010dc0:	83 f8 07             	cmp    eax,0x7
c0010dc3:	74 1b                	je     c0010de0 <SysReadDir(regs*)+0x71>
c0010dc5:	b8 02 00 00 00       	mov    eax,0x2
c0010dca:	31 d2                	xor    edx,edx
c0010dcc:	83 c4 18             	add    esp,0x18
c0010dcf:	5b                   	pop    ebx
c0010dd0:	c3                   	ret    
c0010dd1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dd6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ddb:	83 c4 18             	add    esp,0x18
c0010dde:	5b                   	pop    ebx
c0010ddf:	c3                   	ret    
c0010de0:	b8 01 00 00 00       	mov    eax,0x1
c0010de5:	31 d2                	xor    edx,edx
c0010de7:	eb e3                	jmp    c0010dcc <SysReadDir(regs*)+0x5d>
c0010de9:	31 c0                	xor    eax,eax
c0010deb:	31 d2                	xor    edx,edx
c0010ded:	eb dd                	jmp    c0010dcc <SysReadDir(regs*)+0x5d>

c0010def <SysIsATTY(regs*)>:
c0010def:	83 ec 0c             	sub    esp,0xc
c0010df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010df9:	83 f8 02             	cmp    eax,0x2
c0010dfc:	76 07                	jbe    c0010e05 <SysIsATTY(regs*)+0x16>
c0010dfe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e03:	75 26                	jne    c0010e2b <SysIsATTY(regs*)+0x3c>
c0010e05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e0d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010e13:	85 c0                	test   eax,eax
c0010e15:	74 24                	je     c0010e3b <SysIsATTY(regs*)+0x4c>
c0010e17:	83 ec 0c             	sub    esp,0xc
c0010e1a:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e1c:	50                   	push   eax
c0010e1d:	ff 12                	call   DWORD PTR [edx]
c0010e1f:	31 d2                	xor    edx,edx
c0010e21:	0f b6 c0             	movzx  eax,al
c0010e24:	83 c4 10             	add    esp,0x10
c0010e27:	83 c4 0c             	add    esp,0xc
c0010e2a:	c3                   	ret    
c0010e2b:	83 ec 0c             	sub    esp,0xc
c0010e2e:	50                   	push   eax
c0010e2f:	e8 b9 1c 00 00       	call   c0012aed <KeGetFileFromDescriptor(int)>
c0010e34:	83 c4 10             	add    esp,0x10
c0010e37:	85 c0                	test   eax,eax
c0010e39:	75 dc                	jne    c0010e17 <SysIsATTY(regs*)+0x28>
c0010e3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e40:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e45:	83 c4 0c             	add    esp,0xc
c0010e48:	c3                   	ret    

c0010e49 <SysSeek(regs*)>:
c0010e49:	53                   	push   ebx
c0010e4a:	83 ec 08             	sub    esp,0x8
c0010e4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e51:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e54:	8d 50 fd             	lea    edx,[eax-0x3]
c0010e57:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010e5d:	77 39                	ja     c0010e98 <SysSeek(regs*)+0x4f>
c0010e5f:	83 ec 0c             	sub    esp,0xc
c0010e62:	50                   	push   eax
c0010e63:	e8 85 1c 00 00       	call   c0012aed <KeGetFileFromDescriptor(int)>
c0010e68:	83 c4 10             	add    esp,0x10
c0010e6b:	85 c0                	test   eax,eax
c0010e6d:	74 29                	je     c0010e98 <SysSeek(regs*)+0x4f>
c0010e6f:	83 ec 04             	sub    esp,0x4
c0010e72:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010e75:	31 db                	xor    ebx,ebx
c0010e77:	53                   	push   ebx
c0010e78:	51                   	push   ecx
c0010e79:	50                   	push   eax
c0010e7a:	e8 8f 73 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0010e7f:	83 c4 10             	add    esp,0x10
c0010e82:	85 c0                	test   eax,eax
c0010e84:	0f 95 c0             	setne  al
c0010e87:	31 d2                	xor    edx,edx
c0010e89:	0f b6 c0             	movzx  eax,al
c0010e8c:	f7 d8                	neg    eax
c0010e8e:	83 d2 00             	adc    edx,0x0
c0010e91:	83 c4 08             	add    esp,0x8
c0010e94:	f7 da                	neg    edx
c0010e96:	5b                   	pop    ebx
c0010e97:	c3                   	ret    
c0010e98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ea2:	83 c4 08             	add    esp,0x8
c0010ea5:	5b                   	pop    ebx
c0010ea6:	c3                   	ret    

c0010ea7 <SysTell(regs*)>:
c0010ea7:	53                   	push   ebx
c0010ea8:	83 ec 08             	sub    esp,0x8
c0010eab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010eaf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010eb2:	83 f8 02             	cmp    eax,0x2
c0010eb5:	76 56                	jbe    c0010f0d <SysTell(regs*)+0x66>
c0010eb7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ebc:	76 19                	jbe    c0010ed7 <SysTell(regs*)+0x30>
c0010ebe:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010ec1:	31 d2                	xor    edx,edx
c0010ec3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ec9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ed0:	31 c0                	xor    eax,eax
c0010ed2:	83 c4 08             	add    esp,0x8
c0010ed5:	5b                   	pop    ebx
c0010ed6:	c3                   	ret    
c0010ed7:	83 ec 0c             	sub    esp,0xc
c0010eda:	50                   	push   eax
c0010edb:	e8 0d 1c 00 00       	call   c0012aed <KeGetFileFromDescriptor(int)>
c0010ee0:	83 c4 10             	add    esp,0x10
c0010ee3:	85 c0                	test   eax,eax
c0010ee5:	74 26                	je     c0010f0d <SysTell(regs*)+0x66>
c0010ee7:	83 ec 08             	sub    esp,0x8
c0010eea:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010eed:	52                   	push   edx
c0010eee:	50                   	push   eax
c0010eef:	e8 c6 73 ff ff       	call   c00082ba <File::tell(unsigned long long*)>
c0010ef4:	83 c4 10             	add    esp,0x10
c0010ef7:	85 c0                	test   eax,eax
c0010ef9:	0f 95 c0             	setne  al
c0010efc:	31 d2                	xor    edx,edx
c0010efe:	0f b6 c0             	movzx  eax,al
c0010f01:	f7 d8                	neg    eax
c0010f03:	83 d2 00             	adc    edx,0x0
c0010f06:	83 c4 08             	add    esp,0x8
c0010f09:	f7 da                	neg    edx
c0010f0b:	5b                   	pop    ebx
c0010f0c:	c3                   	ret    
c0010f0d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f12:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f17:	83 c4 08             	add    esp,0x8
c0010f1a:	5b                   	pop    ebx
c0010f1b:	c3                   	ret    

c0010f1c <SysSize(regs*)>:
c0010f1c:	53                   	push   ebx
c0010f1d:	83 ec 18             	sub    esp,0x18
c0010f20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f24:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f27:	83 f8 02             	cmp    eax,0x2
c0010f2a:	76 5b                	jbe    c0010f87 <SysSize(regs*)+0x6b>
c0010f2c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010f31:	76 19                	jbe    c0010f4c <SysSize(regs*)+0x30>
c0010f33:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010f36:	31 d2                	xor    edx,edx
c0010f38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010f3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f45:	31 c0                	xor    eax,eax
c0010f47:	83 c4 18             	add    esp,0x18
c0010f4a:	5b                   	pop    ebx
c0010f4b:	c3                   	ret    
c0010f4c:	83 ec 0c             	sub    esp,0xc
c0010f4f:	50                   	push   eax
c0010f50:	e8 98 1b 00 00       	call   c0012aed <KeGetFileFromDescriptor(int)>
c0010f55:	83 c4 10             	add    esp,0x10
c0010f58:	85 c0                	test   eax,eax
c0010f5a:	74 2b                	je     c0010f87 <SysSize(regs*)+0x6b>
c0010f5c:	83 ec 04             	sub    esp,0x4
c0010f5f:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010f63:	52                   	push   edx
c0010f64:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010f67:	52                   	push   edx
c0010f68:	50                   	push   eax
c0010f69:	e8 e4 74 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	85 c0                	test   eax,eax
c0010f73:	0f 95 c0             	setne  al
c0010f76:	31 d2                	xor    edx,edx
c0010f78:	0f b6 c0             	movzx  eax,al
c0010f7b:	f7 d8                	neg    eax
c0010f7d:	83 d2 00             	adc    edx,0x0
c0010f80:	83 c4 18             	add    esp,0x18
c0010f83:	f7 da                	neg    edx
c0010f85:	5b                   	pop    ebx
c0010f86:	c3                   	ret    
c0010f87:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f8c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f91:	83 c4 18             	add    esp,0x18
c0010f94:	5b                   	pop    ebx
c0010f95:	c3                   	ret    

c0010f96 <SysSizeFromFilename(regs*)>:
c0010f96:	55                   	push   ebp
c0010f97:	57                   	push   edi
c0010f98:	56                   	push   esi
c0010f99:	53                   	push   ebx
c0010f9a:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010fa0:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010fa7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010faa:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010fad:	85 f6                	test   esi,esi
c0010faf:	74 34                	je     c0010fe5 <SysSizeFromFilename(regs*)+0x4f>
c0010fb1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010fb7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fba:	83 f8 02             	cmp    eax,0x2
c0010fbd:	76 2d                	jbe    c0010fec <SysSizeFromFilename(regs*)+0x56>
c0010fbf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010fc4:	76 3b                	jbe    c0011001 <SysSizeFromFilename(regs*)+0x6b>
c0010fc6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010fc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010fcf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fd6:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010fdc:	31 c0                	xor    eax,eax
c0010fde:	5b                   	pop    ebx
c0010fdf:	31 d2                	xor    edx,edx
c0010fe1:	5e                   	pop    esi
c0010fe2:	5f                   	pop    edi
c0010fe3:	5d                   	pop    ebp
c0010fe4:	c3                   	ret    
c0010fe5:	89 f8                	mov    eax,edi
c0010fe7:	83 f8 02             	cmp    eax,0x2
c0010fea:	77 d3                	ja     c0010fbf <SysSizeFromFilename(regs*)+0x29>
c0010fec:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010ff2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ff7:	5b                   	pop    ebx
c0010ff8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ffd:	5e                   	pop    esi
c0010ffe:	5f                   	pop    edi
c0010fff:	5d                   	pop    ebp
c0011000:	c3                   	ret    
c0011001:	83 ec 0c             	sub    esp,0xc
c0011004:	68 14 01 00 00       	push   0x114
c0011009:	e8 11 e5 ff ff       	call   c000f51f <malloc>
c001100e:	6a 01                	push   0x1
c0011010:	89 c5                	mov    ebp,eax
c0011012:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011017:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001101a:	50                   	push   eax
c001101b:	57                   	push   edi
c001101c:	55                   	push   ebp
c001101d:	e8 12 70 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011022:	83 c4 20             	add    esp,0x20
c0011025:	85 ed                	test   ebp,ebp
c0011027:	74 c3                	je     c0010fec <SysSizeFromFilename(regs*)+0x56>
c0011029:	83 ec 04             	sub    esp,0x4
c001102c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011030:	50                   	push   eax
c0011031:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011034:	51                   	push   ecx
c0011035:	55                   	push   ebp
c0011036:	e8 17 74 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001103b:	89 c3                	mov    ebx,eax
c001103d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011040:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011043:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011046:	83 c4 10             	add    esp,0x10
c0011049:	85 db                	test   ebx,ebx
c001104b:	75 9f                	jne    c0010fec <SysSizeFromFilename(regs*)+0x56>
c001104d:	6a 00                	push   0x0
c001104f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011054:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011057:	05 0c 01 00 00       	add    eax,0x10c
c001105c:	50                   	push   eax
c001105d:	57                   	push   edi
c001105e:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011065:	53                   	push   ebx
c0011066:	e8 af 6d ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001106b:	58                   	pop    eax
c001106c:	5a                   	pop    edx
c001106d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011071:	50                   	push   eax
c0011072:	53                   	push   ebx
c0011073:	e8 29 68 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0011078:	83 c4 10             	add    esp,0x10
c001107b:	83 f8 01             	cmp    eax,0x1
c001107e:	74 1a                	je     c001109a <SysSizeFromFilename(regs*)+0x104>
c0011080:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011085:	74 26                	je     c00110ad <SysSizeFromFilename(regs*)+0x117>
c0011087:	85 f6                	test   esi,esi
c0011089:	0f 84 47 ff ff ff    	je     c0010fd6 <SysSizeFromFilename(regs*)+0x40>
c001108f:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011095:	e9 3c ff ff ff       	jmp    c0010fd6 <SysSizeFromFilename(regs*)+0x40>
c001109a:	85 f6                	test   esi,esi
c001109c:	0f 84 34 ff ff ff    	je     c0010fd6 <SysSizeFromFilename(regs*)+0x40>
c00110a2:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00110a8:	e9 29 ff ff ff       	jmp    c0010fd6 <SysSizeFromFilename(regs*)+0x40>
c00110ad:	85 f6                	test   esi,esi
c00110af:	0f 84 21 ff ff ff    	je     c0010fd6 <SysSizeFromFilename(regs*)+0x40>
c00110b5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00110bb:	e9 16 ff ff ff       	jmp    c0010fd6 <SysSizeFromFilename(regs*)+0x40>

c00110c0 <SysSizeFromFilenameNoSymlink(regs*)>:
c00110c0:	55                   	push   ebp
c00110c1:	57                   	push   edi
c00110c2:	56                   	push   esi
c00110c3:	53                   	push   ebx
c00110c4:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00110ca:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00110d1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00110d4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00110d7:	85 f6                	test   esi,esi
c00110d9:	74 34                	je     c001110f <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00110db:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00110e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00110e4:	83 f8 02             	cmp    eax,0x2
c00110e7:	76 2d                	jbe    c0011116 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00110e9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00110ee:	76 3b                	jbe    c001112b <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00110f0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00110f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00110f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011100:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011106:	31 c0                	xor    eax,eax
c0011108:	5b                   	pop    ebx
c0011109:	31 d2                	xor    edx,edx
c001110b:	5e                   	pop    esi
c001110c:	5f                   	pop    edi
c001110d:	5d                   	pop    ebp
c001110e:	c3                   	ret    
c001110f:	89 f8                	mov    eax,edi
c0011111:	83 f8 02             	cmp    eax,0x2
c0011114:	77 d3                	ja     c00110e9 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011116:	81 c4 4c 02 00 00    	add    esp,0x24c
c001111c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011121:	5b                   	pop    ebx
c0011122:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011127:	5e                   	pop    esi
c0011128:	5f                   	pop    edi
c0011129:	5d                   	pop    ebp
c001112a:	c3                   	ret    
c001112b:	83 ec 0c             	sub    esp,0xc
c001112e:	68 14 01 00 00       	push   0x114
c0011133:	e8 e7 e3 ff ff       	call   c000f51f <malloc>
c0011138:	6a 00                	push   0x0
c001113a:	89 c5                	mov    ebp,eax
c001113c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011141:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011144:	50                   	push   eax
c0011145:	57                   	push   edi
c0011146:	55                   	push   ebp
c0011147:	e8 e8 6e ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c001114c:	83 c4 20             	add    esp,0x20
c001114f:	85 ed                	test   ebp,ebp
c0011151:	74 c3                	je     c0011116 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011153:	83 ec 04             	sub    esp,0x4
c0011156:	8d 44 24 13          	lea    eax,[esp+0x13]
c001115a:	50                   	push   eax
c001115b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001115e:	51                   	push   ecx
c001115f:	55                   	push   ebp
c0011160:	e8 ed 72 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0011165:	89 c3                	mov    ebx,eax
c0011167:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001116a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001116d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011170:	83 c4 10             	add    esp,0x10
c0011173:	85 db                	test   ebx,ebx
c0011175:	75 9f                	jne    c0011116 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011177:	6a 00                	push   0x0
c0011179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001117e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011181:	05 0c 01 00 00       	add    eax,0x10c
c0011186:	50                   	push   eax
c0011187:	57                   	push   edi
c0011188:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001118f:	53                   	push   ebx
c0011190:	e8 85 6c ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011195:	58                   	pop    eax
c0011196:	5a                   	pop    edx
c0011197:	8d 44 24 18          	lea    eax,[esp+0x18]
c001119b:	50                   	push   eax
c001119c:	53                   	push   ebx
c001119d:	e8 ff 66 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00111a2:	83 c4 10             	add    esp,0x10
c00111a5:	83 f8 01             	cmp    eax,0x1
c00111a8:	74 1a                	je     c00111c4 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c00111aa:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00111af:	74 26                	je     c00111d7 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c00111b1:	85 f6                	test   esi,esi
c00111b3:	0f 84 47 ff ff ff    	je     c0011100 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00111b9:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00111bf:	e9 3c ff ff ff       	jmp    c0011100 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00111c4:	85 f6                	test   esi,esi
c00111c6:	0f 84 34 ff ff ff    	je     c0011100 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00111cc:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00111d2:	e9 29 ff ff ff       	jmp    c0011100 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00111d7:	85 f6                	test   esi,esi
c00111d9:	0f 84 21 ff ff ff    	je     c0011100 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00111df:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00111e5:	e9 16 ff ff ff       	jmp    c0011100 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00111ea <SysClose(regs*)>:
c00111ea:	53                   	push   ebx
c00111eb:	83 ec 08             	sub    esp,0x8
c00111ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00111f5:	83 f8 02             	cmp    eax,0x2
c00111f8:	76 41                	jbe    c001123b <SysClose(regs*)+0x51>
c00111fa:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011200:	83 fa 01             	cmp    edx,0x1
c0011203:	76 2d                	jbe    c0011232 <SysClose(regs*)+0x48>
c0011205:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001120a:	77 2f                	ja     c001123b <SysClose(regs*)+0x51>
c001120c:	83 ec 0c             	sub    esp,0xc
c001120f:	50                   	push   eax
c0011210:	e8 d8 18 00 00       	call   c0012aed <KeGetFileFromDescriptor(int)>
c0011215:	83 c4 10             	add    esp,0x10
c0011218:	89 c3                	mov    ebx,eax
c001121a:	85 c0                	test   eax,eax
c001121c:	74 1d                	je     c001123b <SysClose(regs*)+0x51>
c001121e:	83 ec 0c             	sub    esp,0xc
c0011221:	50                   	push   eax
c0011222:	e8 87 6f ff ff       	call   c00081ae <File::close()>
c0011227:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011229:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001122c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001122f:	83 c4 10             	add    esp,0x10
c0011232:	31 c0                	xor    eax,eax
c0011234:	31 d2                	xor    edx,edx
c0011236:	83 c4 08             	add    esp,0x8
c0011239:	5b                   	pop    ebx
c001123a:	c3                   	ret    
c001123b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011240:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011245:	83 c4 08             	add    esp,0x8
c0011248:	5b                   	pop    ebx
c0011249:	c3                   	ret    

c001124a <SysOpenDir(regs*)>:
c001124a:	56                   	push   esi
c001124b:	53                   	push   ebx
c001124c:	83 ec 04             	sub    esp,0x4
c001124f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011253:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011256:	85 c9                	test   ecx,ecx
c0011258:	74 5d                	je     c00112b7 <SysOpenDir(regs*)+0x6d>
c001125a:	83 ec 0c             	sub    esp,0xc
c001125d:	68 14 01 00 00       	push   0x114
c0011262:	e8 b8 e2 ff ff       	call   c000f51f <malloc>
c0011267:	83 c4 0c             	add    esp,0xc
c001126a:	89 c6                	mov    esi,eax
c001126c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011271:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011274:	50                   	push   eax
c0011275:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011278:	52                   	push   edx
c0011279:	56                   	push   esi
c001127a:	e8 93 73 ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c001127f:	83 c4 10             	add    esp,0x10
c0011282:	85 f6                	test   esi,esi
c0011284:	74 31                	je     c00112b7 <SysOpenDir(regs*)+0x6d>
c0011286:	83 ec 0c             	sub    esp,0xc
c0011289:	56                   	push   esi
c001128a:	e8 4b 74 ff ff       	call   c00086da <Directory::open()>
c001128f:	83 c4 10             	add    esp,0x10
c0011292:	85 c0                	test   eax,eax
c0011294:	75 21                	jne    c00112b7 <SysOpenDir(regs*)+0x6d>
c0011296:	83 ec 0c             	sub    esp,0xc
c0011299:	56                   	push   esi
c001129a:	e8 51 15 00 00       	call   c00127f0 <UnixFile::getFileDescriptor()>
c001129f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	89 02                	mov    DWORD PTR [edx],eax
c00112a7:	c1 f8 1f             	sar    eax,0x1f
c00112aa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00112ad:	83 c4 04             	add    esp,0x4
c00112b0:	31 c0                	xor    eax,eax
c00112b2:	31 d2                	xor    edx,edx
c00112b4:	5b                   	pop    ebx
c00112b5:	5e                   	pop    esi
c00112b6:	c3                   	ret    
c00112b7:	83 c4 04             	add    esp,0x4
c00112ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112c4:	5b                   	pop    ebx
c00112c5:	5e                   	pop    esi
c00112c6:	c3                   	ret    

c00112c7 <SysMakeDir(regs*)>:
c00112c7:	56                   	push   esi
c00112c8:	53                   	push   ebx
c00112c9:	83 ec 10             	sub    esp,0x10
c00112cc:	68 14 01 00 00       	push   0x114
c00112d1:	e8 49 e2 ff ff       	call   c000f51f <malloc>
c00112d6:	83 c4 0c             	add    esp,0xc
c00112d9:	89 c3                	mov    ebx,eax
c00112db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112e3:	50                   	push   eax
c00112e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00112e8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00112eb:	52                   	push   edx
c00112ec:	53                   	push   ebx
c00112ed:	e8 20 73 ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c00112f2:	83 c4 10             	add    esp,0x10
c00112f5:	85 db                	test   ebx,ebx
c00112f7:	74 2c                	je     c0011325 <SysMakeDir(regs*)+0x5e>
c00112f9:	83 ec 0c             	sub    esp,0xc
c00112fc:	53                   	push   ebx
c00112fd:	e8 b8 75 ff ff       	call   c00088ba <Directory::create()>
c0011302:	89 c6                	mov    esi,eax
c0011304:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011306:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011309:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001130c:	83 c4 10             	add    esp,0x10
c001130f:	31 c0                	xor    eax,eax
c0011311:	85 f6                	test   esi,esi
c0011313:	0f 95 c0             	setne  al
c0011316:	31 d2                	xor    edx,edx
c0011318:	f7 d8                	neg    eax
c001131a:	83 d2 00             	adc    edx,0x0
c001131d:	83 c4 04             	add    esp,0x4
c0011320:	f7 da                	neg    edx
c0011322:	5b                   	pop    ebx
c0011323:	5e                   	pop    esi
c0011324:	c3                   	ret    
c0011325:	83 c4 04             	add    esp,0x4
c0011328:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001132d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011332:	5b                   	pop    ebx
c0011333:	5e                   	pop    esi
c0011334:	c3                   	ret    

c0011335 <SysCloseDir(regs*)>:
c0011335:	53                   	push   ebx
c0011336:	83 ec 08             	sub    esp,0x8
c0011339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011340:	8d 50 fd             	lea    edx,[eax-0x3]
c0011343:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011349:	77 2f                	ja     c001137a <SysCloseDir(regs*)+0x45>
c001134b:	83 ec 0c             	sub    esp,0xc
c001134e:	50                   	push   eax
c001134f:	e8 99 17 00 00       	call   c0012aed <KeGetFileFromDescriptor(int)>
c0011354:	83 c4 10             	add    esp,0x10
c0011357:	89 c3                	mov    ebx,eax
c0011359:	85 c0                	test   eax,eax
c001135b:	74 1d                	je     c001137a <SysCloseDir(regs*)+0x45>
c001135d:	83 ec 0c             	sub    esp,0xc
c0011360:	50                   	push   eax
c0011361:	e8 d0 73 ff ff       	call   c0008736 <Directory::close()>
c0011366:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011368:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001136b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001136e:	83 c4 10             	add    esp,0x10
c0011371:	31 c0                	xor    eax,eax
c0011373:	31 d2                	xor    edx,edx
c0011375:	83 c4 08             	add    esp,0x8
c0011378:	5b                   	pop    ebx
c0011379:	c3                   	ret    
c001137a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001137f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011384:	83 c4 08             	add    esp,0x8
c0011387:	5b                   	pop    ebx
c0011388:	c3                   	ret    

c0011389 <SysWait(regs*)>:
c0011389:	83 ec 10             	sub    esp,0x10
c001138c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011390:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011393:	52                   	push   edx
c0011394:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011397:	51                   	push   ecx
c0011398:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001139b:	50                   	push   eax
c001139c:	e8 df 51 00 00       	call   c0016580 <waitTask(int, int*, int)>
c00113a1:	83 c4 1c             	add    esp,0x1c
c00113a4:	89 c2                	mov    edx,eax
c00113a6:	c1 fa 1f             	sar    edx,0x1f
c00113a9:	c3                   	ret    

c00113aa <SysNotImpl(regs*)>:
c00113aa:	83 ec 18             	sub    esp,0x18
c00113ad:	68 28 37 02 c0       	push   0xc0023728
c00113b2:	e8 af e4 ff ff       	call   c000f866 <KePanic(char const*)>
c00113b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113c1:	83 c4 1c             	add    esp,0x1c
c00113c4:	c3                   	ret    

c00113c5 <SysPanic(regs*)>:
c00113c5:	83 ec 18             	sub    esp,0x18
c00113c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113cc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00113cf:	50                   	push   eax
c00113d0:	e8 91 e4 ff ff       	call   c000f866 <KePanic(char const*)>
c00113d5:	b8 01 00 00 00       	mov    eax,0x1
c00113da:	31 d2                	xor    edx,edx
c00113dc:	83 c4 1c             	add    esp,0x1c
c00113df:	c3                   	ret    

c00113e0 <SysRmdir(regs*)>:
c00113e0:	56                   	push   esi
c00113e1:	53                   	push   ebx
c00113e2:	83 ec 20             	sub    esp,0x20
c00113e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00113e9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00113ec:	68 14 01 00 00       	push   0x114
c00113f1:	e8 29 e1 ff ff       	call   c000f51f <malloc>
c00113f6:	6a 00                	push   0x0
c00113f8:	89 c3                	mov    ebx,eax
c00113fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011402:	50                   	push   eax
c0011403:	56                   	push   esi
c0011404:	53                   	push   ebx
c0011405:	e8 2a 6c ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c001140a:	83 c4 14             	add    esp,0x14
c001140d:	53                   	push   ebx
c001140e:	e8 0b 6f ff ff       	call   c000831e <File::unlink()>
c0011413:	83 c4 10             	add    esp,0x10
c0011416:	85 db                	test   ebx,ebx
c0011418:	74 14                	je     c001142e <SysRmdir(regs*)+0x4e>
c001141a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001141e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011420:	83 ec 0c             	sub    esp,0xc
c0011423:	53                   	push   ebx
c0011424:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011427:	83 c4 10             	add    esp,0x10
c001142a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001142e:	85 c0                	test   eax,eax
c0011430:	0f 95 c0             	setne  al
c0011433:	31 d2                	xor    edx,edx
c0011435:	0f b6 c0             	movzx  eax,al
c0011438:	f7 d8                	neg    eax
c001143a:	83 d2 00             	adc    edx,0x0
c001143d:	83 c4 14             	add    esp,0x14
c0011440:	f7 da                	neg    edx
c0011442:	5b                   	pop    ebx
c0011443:	5e                   	pop    esi
c0011444:	c3                   	ret    

c0011445 <SysUnlink(regs*)>:
c0011445:	56                   	push   esi
c0011446:	53                   	push   ebx
c0011447:	83 ec 20             	sub    esp,0x20
c001144a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001144e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011451:	68 14 01 00 00       	push   0x114
c0011456:	e8 c4 e0 ff ff       	call   c000f51f <malloc>
c001145b:	6a 00                	push   0x0
c001145d:	89 c3                	mov    ebx,eax
c001145f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011464:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011467:	50                   	push   eax
c0011468:	56                   	push   esi
c0011469:	53                   	push   ebx
c001146a:	e8 c5 6b ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c001146f:	83 c4 14             	add    esp,0x14
c0011472:	53                   	push   ebx
c0011473:	e8 a6 6e ff ff       	call   c000831e <File::unlink()>
c0011478:	83 c4 10             	add    esp,0x10
c001147b:	85 db                	test   ebx,ebx
c001147d:	74 14                	je     c0011493 <SysUnlink(regs*)+0x4e>
c001147f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011483:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011485:	83 ec 0c             	sub    esp,0xc
c0011488:	53                   	push   ebx
c0011489:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001148c:	83 c4 10             	add    esp,0x10
c001148f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011493:	85 c0                	test   eax,eax
c0011495:	0f 95 c0             	setne  al
c0011498:	31 d2                	xor    edx,edx
c001149a:	0f b6 c0             	movzx  eax,al
c001149d:	f7 d8                	neg    eax
c001149f:	83 d2 00             	adc    edx,0x0
c00114a2:	83 c4 14             	add    esp,0x14
c00114a5:	f7 da                	neg    edx
c00114a7:	5b                   	pop    ebx
c00114a8:	5e                   	pop    esi
c00114a9:	c3                   	ret    

c00114aa <SysGetArgv(regs*)>:
c00114aa:	83 ec 0c             	sub    esp,0xc
c00114ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114b1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00114b4:	85 c0                	test   eax,eax
c00114b6:	78 2c                	js     c00114e4 <SysGetArgv(regs*)+0x3a>
c00114b8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00114be:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00114c1:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00114c7:	7d 1b                	jge    c00114e4 <SysGetArgv(regs*)+0x3a>
c00114c9:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00114d0:	85 c0                	test   eax,eax
c00114d2:	74 18                	je     c00114ec <SysGetArgv(regs*)+0x42>
c00114d4:	83 ec 08             	sub    esp,0x8
c00114d7:	50                   	push   eax
c00114d8:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00114db:	50                   	push   eax
c00114dc:	e8 5f f1 fe ff       	call   c0000640 <strcpy>
c00114e1:	83 c4 10             	add    esp,0x10
c00114e4:	31 c0                	xor    eax,eax
c00114e6:	31 d2                	xor    edx,edx
c00114e8:	83 c4 0c             	add    esp,0xc
c00114eb:	c3                   	ret    
c00114ec:	b8 01 00 00 00       	mov    eax,0x1
c00114f1:	31 d2                	xor    edx,edx
c00114f3:	83 c4 0c             	add    esp,0xc
c00114f6:	c3                   	ret    

c00114f7 <SysUSleep(regs*)>:
c00114f7:	83 ec 1c             	sub    esp,0x1c
c00114fa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00114fe:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011501:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011504:	6a 00                	push   0x0
c0011506:	6a 64                	push   0x64
c0011508:	52                   	push   edx
c0011509:	50                   	push   eax
c001150a:	e8 a5 f8 00 00       	call   c0020db4 <__udivdi3>
c001150f:	83 c4 14             	add    esp,0x14
c0011512:	50                   	push   eax
c0011513:	e8 54 51 00 00       	call   c001666c <milliTenthSleep(unsigned int)>
c0011518:	31 c0                	xor    eax,eax
c001151a:	31 d2                	xor    edx,edx
c001151c:	83 c4 1c             	add    esp,0x1c
c001151f:	c3                   	ret    

c0011520 <SysSpawn(regs*)>:
c0011520:	56                   	push   esi
c0011521:	53                   	push   ebx
c0011522:	83 ec 04             	sub    esp,0x4
c0011525:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011529:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001152c:	85 f6                	test   esi,esi
c001152e:	75 0a                	jne    c001153a <SysSpawn(regs*)+0x1a>
c0011530:	83 c4 04             	add    esp,0x4
c0011533:	31 c0                	xor    eax,eax
c0011535:	31 d2                	xor    edx,edx
c0011537:	5b                   	pop    ebx
c0011538:	5e                   	pop    esi
c0011539:	c3                   	ret    
c001153a:	83 ec 0c             	sub    esp,0xc
c001153d:	68 24 07 00 00       	push   0x724
c0011542:	e8 d8 df ff ff       	call   c000f51f <malloc>
c0011547:	83 c4 10             	add    esp,0x10
c001154a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001154d:	89 c6                	mov    esi,eax
c001154f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011552:	85 c9                	test   ecx,ecx
c0011554:	74 39                	je     c001158f <SysSpawn(regs*)+0x6f>
c0011556:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001155b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001155e:	52                   	push   edx
c001155f:	50                   	push   eax
c0011560:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011563:	50                   	push   eax
c0011564:	56                   	push   esi
c0011565:	e8 5a 48 00 00       	call   c0015dc4 <Process::Process(char const*, Process*, char**)>
c001156a:	83 c4 10             	add    esp,0x10
c001156d:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011574:	75 ba                	jne    c0011530 <SysSpawn(regs*)+0x10>
c0011576:	83 ec 0c             	sub    esp,0xc
c0011579:	56                   	push   esi
c001157a:	e8 c1 4d 00 00       	call   c0016340 <Process::createUserThread()>
c001157f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011581:	83 c4 10             	add    esp,0x10
c0011584:	89 c2                	mov    edx,eax
c0011586:	83 c4 04             	add    esp,0x4
c0011589:	c1 fa 1f             	sar    edx,0x1f
c001158c:	5b                   	pop    ebx
c001158d:	5e                   	pop    esi
c001158e:	c3                   	ret    
c001158f:	31 c0                	xor    eax,eax
c0011591:	eb cb                	jmp    c001155e <SysSpawn(regs*)+0x3e>

c0011593 <SysGetEnv(regs*)>:
c0011593:	57                   	push   edi
c0011594:	56                   	push   esi
c0011595:	53                   	push   ebx
c0011596:	83 ec 1c             	sub    esp,0x1c
c0011599:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001159d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115a2:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00115a5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00115a8:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00115ab:	51                   	push   ecx
c00115ac:	e8 ba cb ff ff       	call   c000e16b <KeGetProcessTotalEnvCount(Process*)>
c00115b1:	83 c4 10             	add    esp,0x10
c00115b4:	39 c7                	cmp    edi,eax
c00115b6:	7c 14                	jl     c00115cc <SysGetEnv(regs*)+0x39>
c00115b8:	85 f6                	test   esi,esi
c00115ba:	75 0b                	jne    c00115c7 <SysGetEnv(regs*)+0x34>
c00115bc:	83 c4 10             	add    esp,0x10
c00115bf:	31 c0                	xor    eax,eax
c00115c1:	5b                   	pop    ebx
c00115c2:	31 d2                	xor    edx,edx
c00115c4:	5e                   	pop    esi
c00115c5:	5f                   	pop    edi
c00115c6:	c3                   	ret    
c00115c7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00115ca:	eb f0                	jmp    c00115bc <SysGetEnv(regs*)+0x29>
c00115cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00115d0:	83 ec 04             	sub    esp,0x4
c00115d3:	57                   	push   edi
c00115d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00115da:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00115dd:	57                   	push   edi
c00115de:	50                   	push   eax
c00115df:	e8 a7 cb ff ff       	call   c000e18b <KeGetProcessEnvPair(Process*, int)>
c00115e4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00115e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00115eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00115ef:	83 c4 0c             	add    esp,0xc
c00115f2:	85 d2                	test   edx,edx
c00115f4:	75 23                	jne    c0011619 <SysGetEnv(regs*)+0x86>
c00115f6:	83 ec 0c             	sub    esp,0xc
c00115f9:	50                   	push   eax
c00115fa:	e8 71 ef fe ff       	call   c0000570 <strlen>
c00115ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011602:	89 c3                	mov    ebx,eax
c0011604:	e8 67 ef fe ff       	call   c0000570 <strlen>
c0011609:	83 c4 10             	add    esp,0x10
c001160c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	31 d2                	xor    edx,edx
c0011615:	5b                   	pop    ebx
c0011616:	5e                   	pop    esi
c0011617:	5f                   	pop    edi
c0011618:	c3                   	ret    
c0011619:	83 ec 08             	sub    esp,0x8
c001161c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001161f:	50                   	push   eax
c0011620:	56                   	push   esi
c0011621:	e8 1a f0 fe ff       	call   c0000640 <strcpy>
c0011626:	58                   	pop    eax
c0011627:	5a                   	pop    edx
c0011628:	68 42 37 02 c0       	push   0xc0023742
c001162d:	56                   	push   esi
c001162e:	e8 0d f2 fe ff       	call   c0000840 <strcat>
c0011633:	59                   	pop    ecx
c0011634:	5b                   	pop    ebx
c0011635:	57                   	push   edi
c0011636:	56                   	push   esi
c0011637:	e8 04 f2 fe ff       	call   c0000840 <strcat>
c001163c:	83 c4 10             	add    esp,0x10
c001163f:	e9 78 ff ff ff       	jmp    c00115bc <SysGetEnv(regs*)+0x29>

c0011644 <SysSetFatAttrib(regs*)>:
c0011644:	57                   	push   edi
c0011645:	56                   	push   esi
c0011646:	53                   	push   ebx
c0011647:	83 ec 1c             	sub    esp,0x1c
c001164a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001164e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011651:	68 14 01 00 00       	push   0x114
c0011656:	e8 c4 de ff ff       	call   c000f51f <malloc>
c001165b:	83 c4 0c             	add    esp,0xc
c001165e:	89 c3                	mov    ebx,eax
c0011660:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011665:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011668:	50                   	push   eax
c0011669:	57                   	push   edi
c001166a:	53                   	push   ebx
c001166b:	e8 c2 6a ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0011670:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011673:	83 c4 0c             	add    esp,0xc
c0011676:	0f b6 d4             	movzx  edx,ah
c0011679:	0f b6 c0             	movzx  eax,al
c001167c:	52                   	push   edx
c001167d:	50                   	push   eax
c001167e:	53                   	push   ebx
c001167f:	e8 34 6d ff ff       	call   c00083b8 <File::chfatattr(unsigned char, unsigned char)>
c0011684:	83 c4 10             	add    esp,0x10
c0011687:	85 db                	test   ebx,ebx
c0011689:	74 14                	je     c001169f <SysSetFatAttrib(regs*)+0x5b>
c001168b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001168f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011691:	83 ec 0c             	sub    esp,0xc
c0011694:	53                   	push   ebx
c0011695:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011698:	83 c4 10             	add    esp,0x10
c001169b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001169f:	85 c0                	test   eax,eax
c00116a1:	0f 95 c0             	setne  al
c00116a4:	31 d2                	xor    edx,edx
c00116a6:	0f b6 c0             	movzx  eax,al
c00116a9:	f7 d8                	neg    eax
c00116ab:	83 d2 00             	adc    edx,0x0
c00116ae:	83 c4 10             	add    esp,0x10
c00116b1:	f7 da                	neg    edx
c00116b3:	5b                   	pop    ebx
c00116b4:	5e                   	pop    esi
c00116b5:	5f                   	pop    edi
c00116b6:	c3                   	ret    

c00116b7 <SysShutdown(regs*)>:
c00116b7:	83 ec 1c             	sub    esp,0x1c
c00116ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116be:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00116c1:	85 c9                	test   ecx,ecx
c00116c3:	74 18                	je     c00116dd <SysShutdown(regs*)+0x26>
c00116c5:	83 f9 01             	cmp    ecx,0x1
c00116c8:	74 26                	je     c00116f0 <SysShutdown(regs*)+0x39>
c00116ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116d4:	83 f9 02             	cmp    ecx,0x2
c00116d7:	74 24                	je     c00116fd <SysShutdown(regs*)+0x46>
c00116d9:	83 c4 1c             	add    esp,0x1c
c00116dc:	c3                   	ret    
c00116dd:	e8 02 c5 ff ff       	call   c000dbe4 <KeShutdown()>
c00116e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116ec:	83 c4 1c             	add    esp,0x1c
c00116ef:	c3                   	ret    
c00116f0:	e8 13 c5 ff ff       	call   c000dc08 <KeSleep()>
c00116f5:	31 c0                	xor    eax,eax
c00116f7:	31 d2                	xor    edx,edx
c00116f9:	83 c4 1c             	add    esp,0x1c
c00116fc:	c3                   	ret    
c00116fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011701:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011705:	e8 0a c5 ff ff       	call   c000dc14 <KeRestart()>
c001170a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001170e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011712:	eb c5                	jmp    c00116d9 <SysShutdown(regs*)+0x22>

c0011714 <SysPipe(regs*)>:
c0011714:	57                   	push   edi
c0011715:	56                   	push   esi
c0011716:	53                   	push   ebx
c0011717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001171b:	83 ec 0c             	sub    esp,0xc
c001171e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011721:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011724:	6a 20                	push   0x20
c0011726:	e8 f4 dd ff ff       	call   c000f51f <malloc>
c001172b:	89 c3                	mov    ebx,eax
c001172d:	58                   	pop    eax
c001172e:	5a                   	pop    edx
c001172f:	68 00 50 00 00       	push   0x5000
c0011734:	53                   	push   ebx
c0011735:	e8 ae e9 ff ff       	call   c00100e8 <Pipe::Pipe(int)>
c001173a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001173d:	e8 ae 10 00 00       	call   c00127f0 <UnixFile::getFileDescriptor()>
c0011742:	89 07                	mov    DWORD PTR [edi],eax
c0011744:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011747:	e8 a4 10 00 00       	call   c00127f0 <UnixFile::getFileDescriptor()>
c001174c:	83 c4 10             	add    esp,0x10
c001174f:	89 06                	mov    DWORD PTR [esi],eax
c0011751:	31 d2                	xor    edx,edx
c0011753:	5b                   	pop    ebx
c0011754:	31 c0                	xor    eax,eax
c0011756:	5e                   	pop    esi
c0011757:	5f                   	pop    edi
c0011758:	c3                   	ret    

c0011759 <SysGetUnixTime(regs*)>:
c0011759:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c001175e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011764:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011768:	e9 67 76 ff ff       	jmp    c0008dd4 <Clock::timeInSecondsLocal()>

c001176d <string_ends_with(char const*, char const*)>:
c001176d:	57                   	push   edi
c001176e:	56                   	push   esi
c001176f:	53                   	push   ebx
c0011770:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011774:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011778:	83 ec 0c             	sub    esp,0xc
c001177b:	53                   	push   ebx
c001177c:	e8 ef ed fe ff       	call   c0000570 <strlen>
c0011781:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011784:	89 c6                	mov    esi,eax
c0011786:	e8 e5 ed fe ff       	call   c0000570 <strlen>
c001178b:	83 c4 10             	add    esp,0x10
c001178e:	39 c6                	cmp    esi,eax
c0011790:	7d 06                	jge    c0011798 <string_ends_with(char const*, char const*)+0x2b>
c0011792:	5b                   	pop    ebx
c0011793:	31 c0                	xor    eax,eax
c0011795:	5e                   	pop    esi
c0011796:	5f                   	pop    edi
c0011797:	c3                   	ret    
c0011798:	83 ec 08             	sub    esp,0x8
c001179b:	29 c6                	sub    esi,eax
c001179d:	57                   	push   edi
c001179e:	01 f3                	add    ebx,esi
c00117a0:	53                   	push   ebx
c00117a1:	e8 aa ef fe ff       	call   c0000750 <strcmp>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	85 c0                	test   eax,eax
c00117ab:	5b                   	pop    ebx
c00117ac:	0f 94 c0             	sete   al
c00117af:	5e                   	pop    esi
c00117b0:	0f b6 c0             	movzx  eax,al
c00117b3:	5f                   	pop    edi
c00117b4:	c3                   	ret    

c00117b5 <SysOpen(regs*)>:
c00117b5:	56                   	push   esi
c00117b6:	53                   	push   ebx
c00117b7:	81 ec 04 01 00 00    	sub    esp,0x104
c00117bd:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00117c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00117c7:	85 c0                	test   eax,eax
c00117c9:	0f 84 bc 01 00 00    	je     c001198b <SysOpen(regs*)+0x1d6>
c00117cf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00117d2:	85 c0                	test   eax,eax
c00117d4:	0f 84 b1 01 00 00    	je     c001198b <SysOpen(regs*)+0x1d6>
c00117da:	6a 00                	push   0x0
c00117dc:	68 44 37 02 c0       	push   0xc0023744
c00117e1:	50                   	push   eax
c00117e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00117e6:	56                   	push   esi
c00117e7:	e8 2e 66 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00117ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00117ef:	e8 7c ed fe ff       	call   c0000570 <strlen>
c00117f4:	83 c4 10             	add    esp,0x10
c00117f7:	83 e8 01             	sub    eax,0x1
c00117fa:	74 21                	je     c001181d <SysOpen(regs*)+0x68>
c00117fc:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011800:	eb 12                	jmp    c0011814 <SysOpen(regs*)+0x5f>
c0011802:	83 fa 3a             	cmp    edx,0x3a
c0011805:	74 12                	je     c0011819 <SysOpen(regs*)+0x64>
c0011807:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001180b:	83 e8 01             	sub    eax,0x1
c001180e:	74 0d                	je     c001181d <SysOpen(regs*)+0x68>
c0011810:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011814:	83 fa 2e             	cmp    edx,0x2e
c0011817:	75 e9                	jne    c0011802 <SysOpen(regs*)+0x4d>
c0011819:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001181d:	83 ec 08             	sub    esp,0x8
c0011820:	68 48 37 02 c0       	push   0xc0023748
c0011825:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011828:	50                   	push   eax
c0011829:	e8 3f ff ff ff       	call   c001176d <string_ends_with(char const*, char const*)>
c001182e:	83 c4 10             	add    esp,0x10
c0011831:	85 c0                	test   eax,eax
c0011833:	74 1d                	je     c0011852 <SysOpen(regs*)+0x9d>
c0011835:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011838:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001183e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011845:	81 c4 04 01 00 00    	add    esp,0x104
c001184b:	31 c0                	xor    eax,eax
c001184d:	31 d2                	xor    edx,edx
c001184f:	5b                   	pop    ebx
c0011850:	5e                   	pop    esi
c0011851:	c3                   	ret    
c0011852:	83 ec 08             	sub    esp,0x8
c0011855:	68 4d 37 02 c0       	push   0xc002374d
c001185a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001185d:	50                   	push   eax
c001185e:	e8 0a ff ff ff       	call   c001176d <string_ends_with(char const*, char const*)>
c0011863:	83 c4 10             	add    esp,0x10
c0011866:	85 c0                	test   eax,eax
c0011868:	75 cb                	jne    c0011835 <SysOpen(regs*)+0x80>
c001186a:	83 ec 08             	sub    esp,0x8
c001186d:	68 49 37 02 c0       	push   0xc0023749
c0011872:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011875:	50                   	push   eax
c0011876:	e8 d5 ee fe ff       	call   c0000750 <strcmp>
c001187b:	83 c4 10             	add    esp,0x10
c001187e:	85 c0                	test   eax,eax
c0011880:	74 b3                	je     c0011835 <SysOpen(regs*)+0x80>
c0011882:	83 ec 08             	sub    esp,0x8
c0011885:	68 48 37 02 c0       	push   0xc0023748
c001188a:	56                   	push   esi
c001188b:	e8 dd fe ff ff       	call   c001176d <string_ends_with(char const*, char const*)>
c0011890:	83 c4 10             	add    esp,0x10
c0011893:	85 c0                	test   eax,eax
c0011895:	75 9e                	jne    c0011835 <SysOpen(regs*)+0x80>
c0011897:	83 ec 08             	sub    esp,0x8
c001189a:	68 52 37 02 c0       	push   0xc0023752
c001189f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00118a2:	50                   	push   eax
c00118a3:	e8 c5 fe ff ff       	call   c001176d <string_ends_with(char const*, char const*)>
c00118a8:	83 c4 10             	add    esp,0x10
c00118ab:	85 c0                	test   eax,eax
c00118ad:	0f 85 eb 00 00 00    	jne    c001199e <SysOpen(regs*)+0x1e9>
c00118b3:	83 ec 08             	sub    esp,0x8
c00118b6:	68 57 37 02 c0       	push   0xc0023757
c00118bb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00118be:	50                   	push   eax
c00118bf:	e8 a9 fe ff ff       	call   c001176d <string_ends_with(char const*, char const*)>
c00118c4:	83 c4 10             	add    esp,0x10
c00118c7:	85 c0                	test   eax,eax
c00118c9:	0f 85 cf 00 00 00    	jne    c001199e <SysOpen(regs*)+0x1e9>
c00118cf:	83 ec 08             	sub    esp,0x8
c00118d2:	68 53 37 02 c0       	push   0xc0023753
c00118d7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00118da:	51                   	push   ecx
c00118db:	e8 70 ee fe ff       	call   c0000750 <strcmp>
c00118e0:	83 c4 10             	add    esp,0x10
c00118e3:	85 c0                	test   eax,eax
c00118e5:	0f 84 b3 00 00 00    	je     c001199e <SysOpen(regs*)+0x1e9>
c00118eb:	83 ec 08             	sub    esp,0x8
c00118ee:	68 52 37 02 c0       	push   0xc0023752
c00118f3:	56                   	push   esi
c00118f4:	e8 74 fe ff ff       	call   c001176d <string_ends_with(char const*, char const*)>
c00118f9:	83 c4 10             	add    esp,0x10
c00118fc:	85 c0                	test   eax,eax
c00118fe:	0f 85 9a 00 00 00    	jne    c001199e <SysOpen(regs*)+0x1e9>
c0011904:	83 ec 0c             	sub    esp,0xc
c0011907:	68 14 01 00 00       	push   0x114
c001190c:	e8 0e dc ff ff       	call   c000f51f <malloc>
c0011911:	83 c4 0c             	add    esp,0xc
c0011914:	89 c6                	mov    esi,eax
c0011916:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001191b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001191e:	50                   	push   eax
c001191f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011922:	52                   	push   edx
c0011923:	56                   	push   esi
c0011924:	e8 09 68 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0011929:	83 c4 10             	add    esp,0x10
c001192c:	85 f6                	test   esi,esi
c001192e:	74 5b                	je     c001198b <SysOpen(regs*)+0x1d6>
c0011930:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011933:	0f b6 c2             	movzx  eax,dl
c0011936:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011939:	89 d0                	mov    eax,edx
c001193b:	83 e0 01             	and    eax,0x1
c001193e:	f6 c2 02             	test   dl,0x2
c0011941:	74 03                	je     c0011946 <SysOpen(regs*)+0x191>
c0011943:	83 c8 02             	or     eax,0x2
c0011946:	f6 c2 04             	test   dl,0x4
c0011949:	74 03                	je     c001194e <SysOpen(regs*)+0x199>
c001194b:	83 c8 04             	or     eax,0x4
c001194e:	f6 c2 08             	test   dl,0x8
c0011951:	74 03                	je     c0011956 <SysOpen(regs*)+0x1a1>
c0011953:	83 c8 0a             	or     eax,0xa
c0011956:	80 e2 10             	and    dl,0x10
c0011959:	74 03                	je     c001195e <SysOpen(regs*)+0x1a9>
c001195b:	83 c8 12             	or     eax,0x12
c001195e:	83 ec 08             	sub    esp,0x8
c0011961:	50                   	push   eax
c0011962:	56                   	push   esi
c0011963:	e8 e8 67 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0011968:	83 c4 10             	add    esp,0x10
c001196b:	85 c0                	test   eax,eax
c001196d:	75 1c                	jne    c001198b <SysOpen(regs*)+0x1d6>
c001196f:	83 ec 0c             	sub    esp,0xc
c0011972:	56                   	push   esi
c0011973:	e8 78 0e 00 00       	call   c00127f0 <UnixFile::getFileDescriptor()>
c0011978:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001197b:	83 c4 10             	add    esp,0x10
c001197e:	89 02                	mov    DWORD PTR [edx],eax
c0011980:	c1 f8 1f             	sar    eax,0x1f
c0011983:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011986:	e9 ba fe ff ff       	jmp    c0011845 <SysOpen(regs*)+0x90>
c001198b:	81 c4 04 01 00 00    	add    esp,0x104
c0011991:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011996:	ba ff ff ff ff       	mov    edx,0xffffffff
c001199b:	5b                   	pop    ebx
c001199c:	5e                   	pop    esi
c001199d:	c3                   	ret    
c001199e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00119a1:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00119a7:	e9 92 fe ff ff       	jmp    c001183e <SysOpen(regs*)+0x89>

c00119ac <KeSystemCall(regs*, void*)>:
c00119ac:	53                   	push   ebx
c00119ad:	83 ec 08             	sub    esp,0x8
c00119b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119b4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00119b7:	83 f8 40             	cmp    eax,0x40
c00119ba:	77 16                	ja     c00119d2 <KeSystemCall(regs*, void*)+0x26>
c00119bc:	8b 14 85 a0 59 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda660]
c00119c3:	85 d2                	test   edx,edx
c00119c5:	74 0b                	je     c00119d2 <KeSystemCall(regs*, void*)+0x26>
c00119c7:	83 ec 0c             	sub    esp,0xc
c00119ca:	53                   	push   ebx
c00119cb:	ff d2                	call   edx
c00119cd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00119d0:	eb 0d                	jmp    c00119df <KeSystemCall(regs*, void*)+0x33>
c00119d2:	52                   	push   edx
c00119d3:	52                   	push   edx
c00119d4:	50                   	push   eax
c00119d5:	68 5c 37 02 c0       	push   0xc002375c
c00119da:	e8 85 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00119df:	83 c4 10             	add    esp,0x10
c00119e2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00119e7:	31 d2                	xor    edx,edx
c00119e9:	83 c4 08             	add    esp,0x8
c00119ec:	5b                   	pop    ebx
c00119ed:	c3                   	ret    

c00119ee <VgaText::isAtty()>:
c00119ee:	b0 01                	mov    al,0x1
c00119f0:	c3                   	ret    
c00119f1:	90                   	nop

c00119f2 <VgaText::~VgaText()>:
c00119f2:	83 ec 0c             	sub    esp,0xc
c00119f5:	ba c8 37 02 c0       	mov    edx,0xc00237c8
c00119fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119fe:	89 10                	mov    DWORD PTR [eax],edx
c0011a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a04:	83 ec 0c             	sub    esp,0xc
c0011a07:	50                   	push   eax
c0011a08:	e8 d1 0f 00 00       	call   c00129de <UnixFile::~UnixFile()>
c0011a0d:	83 c4 10             	add    esp,0x10
c0011a10:	90                   	nop
c0011a11:	83 c4 0c             	add    esp,0xc
c0011a14:	c3                   	ret    
c0011a15:	90                   	nop

c0011a16 <VgaText::~VgaText()>:
c0011a16:	83 ec 0c             	sub    esp,0xc
c0011a19:	83 ec 0c             	sub    esp,0xc
c0011a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a20:	e8 cd ff ff ff       	call   c00119f2 <VgaText::~VgaText()>
c0011a25:	83 c4 10             	add    esp,0x10
c0011a28:	83 ec 08             	sub    esp,0x8
c0011a2b:	68 84 01 00 00       	push   0x184
c0011a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a34:	e8 6e b1 ff ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c0011a39:	83 c4 10             	add    esp,0x10
c0011a3c:	83 c4 0c             	add    esp,0xc
c0011a3f:	c3                   	ret    

c0011a40 <VgaText::read(unsigned long long, void*, int*)>:
c0011a40:	83 ec 10             	sub    esp,0x10
c0011a43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011a4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a4f:	e8 ad 83 ff ff       	call   c0009e01 <readKeyboard(VgaText*, char*, unsigned long)>
c0011a54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011a58:	89 02                	mov    DWORD PTR [edx],eax
c0011a5a:	31 c0                	xor    eax,eax
c0011a5c:	83 c4 1c             	add    esp,0x1c
c0011a5f:	c3                   	ret    

c0011a60 <setTerminalScrollLock(bool)>:
c0011a60:	c3                   	ret    

c0011a61 <doTerminalCycle()>:
c0011a61:	c3                   	ret    

c0011a62 <addToTerminalCycle(VgaText*)>:
c0011a62:	c3                   	ret    

c0011a63 <scrollTerminalScrollLock(int)>:
c0011a63:	c3                   	ret    

c0011a64 <VgaText::updateTitle()>:
c0011a64:	c3                   	ret    
c0011a65:	90                   	nop

c0011a66 <VgaText::load()>:
c0011a66:	c3                   	ret    
c0011a67:	90                   	nop

c0011a68 <VgaText::updateCursor()>:
c0011a68:	83 ec 14             	sub    esp,0x14
c0011a6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011a6f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011a72:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011a75:	e8 2e 8c 00 00       	call   c001a6a8 <HalConsoleCursorUpdate(int, int)>
c0011a7a:	83 c4 1c             	add    esp,0x1c
c0011a7d:	c3                   	ret    

c0011a7e <VgaText::doANSI_SGR(int)>:
c0011a7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a86:	85 d2                	test   edx,edx
c0011a88:	75 0b                	jne    c0011a95 <VgaText::doANSI_SGR(int)+0x17>
c0011a8a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0011a8d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011a90:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011a93:	eb 59                	jmp    c0011aee <VgaText::doANSI_SGR(int)+0x70>
c0011a95:	83 fa 07             	cmp    edx,0x7
c0011a98:	75 0b                	jne    c0011aa5 <VgaText::doANSI_SGR(int)+0x27>
c0011a9a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0011a9d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0011aa0:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0011aa3:	eb 49                	jmp    c0011aee <VgaText::doANSI_SGR(int)+0x70>
c0011aa5:	83 fa 1b             	cmp    edx,0x1b
c0011aa8:	74 e0                	je     c0011a8a <VgaText::doANSI_SGR(int)+0xc>
c0011aaa:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0011aad:	83 f9 07             	cmp    ecx,0x7
c0011ab0:	77 09                	ja     c0011abb <VgaText::doANSI_SGR(int)+0x3d>
c0011ab2:	8b 14 8d e0 5a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda520]
c0011ab9:	eb 20                	jmp    c0011adb <VgaText::doANSI_SGR(int)+0x5d>
c0011abb:	8d 4a d8             	lea    ecx,[edx-0x28]
c0011abe:	83 f9 07             	cmp    ecx,0x7
c0011ac1:	77 09                	ja     c0011acc <VgaText::doANSI_SGR(int)+0x4e>
c0011ac3:	8b 14 8d e0 5a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda520]
c0011aca:	eb 22                	jmp    c0011aee <VgaText::doANSI_SGR(int)+0x70>
c0011acc:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0011acf:	83 f9 07             	cmp    ecx,0x7
c0011ad2:	77 0b                	ja     c0011adf <VgaText::doANSI_SGR(int)+0x61>
c0011ad4:	8b 14 95 98 59 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda668]
c0011adb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011ade:	c3                   	ret    
c0011adf:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0011ae2:	83 f9 07             	cmp    ecx,0x7
c0011ae5:	77 0a                	ja     c0011af1 <VgaText::doANSI_SGR(int)+0x73>
c0011ae7:	8b 14 95 70 59 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda690]
c0011aee:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011af1:	c3                   	ret    

c0011af2 <VgaText::setDefaultBgColour(VgaColour)>:
c0011af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011af6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011afa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011afd:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011b00:	c3                   	ret    
c0011b01:	90                   	nop

c0011b02 <VgaText::setDefaultFgColour(VgaColour)>:
c0011b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b0a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011b0d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011b10:	c3                   	ret    
c0011b11:	90                   	nop

c0011b12 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0011b12:	53                   	push   ebx
c0011b13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011b1f:	51                   	push   ecx
c0011b20:	e8 cd ff ff ff       	call   c0011af2 <VgaText::setDefaultBgColour(VgaColour)>
c0011b25:	58                   	pop    eax
c0011b26:	5a                   	pop    edx
c0011b27:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011b2b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011b2f:	5b                   	pop    ebx
c0011b30:	eb d0                	jmp    c0011b02 <VgaText::setDefaultFgColour(VgaColour)>

c0011b32 <VgaText::setTitleTextColour(VgaColour)>:
c0011b32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b3a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0011b3d:	c3                   	ret    

c0011b3e <VgaText::setTitleColour(VgaColour)>:
c0011b3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b46:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011b49:	c3                   	ret    

c0011b4a <VgaText::setTitle(char*)>:
c0011b4a:	c3                   	ret    
c0011b4b:	90                   	nop

c0011b4c <VgaText::combineColours(unsigned char, unsigned char)>:
c0011b4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b50:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0011b55:	83 e0 0f             	and    eax,0xf
c0011b58:	c1 e2 04             	shl    edx,0x4
c0011b5b:	09 d0                	or     eax,edx
c0011b5d:	c3                   	ret    

c0011b5e <VgaText::scrollScreen()>:
c0011b5e:	55                   	push   ebp
c0011b5f:	57                   	push   edi
c0011b60:	56                   	push   esi
c0011b61:	be 01 00 00 00       	mov    esi,0x1
c0011b66:	53                   	push   ebx
c0011b67:	83 ec 0c             	sub    esp,0xc
c0011b6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b6e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0011b71:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0011b77:	31 ff                	xor    edi,edi
c0011b79:	01 e9                	add    ecx,ebp
c0011b7b:	8a 01                	mov    al,BYTE PTR [ecx]
c0011b7d:	83 fe 18             	cmp    esi,0x18
c0011b80:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0011b86:	75 20                	jne    c0011ba8 <VgaText::scrollScreen()+0x4a>
c0011b88:	f7 c7 01 00 00 00    	test   edi,0x1
c0011b8e:	74 15                	je     c0011ba5 <VgaText::scrollScreen()+0x47>
c0011b90:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011b94:	50                   	push   eax
c0011b95:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011b99:	50                   	push   eax
c0011b9a:	e8 ad ff ff ff       	call   c0011b4c <VgaText::combineColours(unsigned char, unsigned char)>
c0011b9f:	5a                   	pop    edx
c0011ba0:	5a                   	pop    edx
c0011ba1:	88 01                	mov    BYTE PTR [ecx],al
c0011ba3:	eb 03                	jmp    c0011ba8 <VgaText::scrollScreen()+0x4a>
c0011ba5:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0011ba8:	47                   	inc    edi
c0011ba9:	41                   	inc    ecx
c0011baa:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0011bb0:	75 c9                	jne    c0011b7b <VgaText::scrollScreen()+0x1d>
c0011bb2:	46                   	inc    esi
c0011bb3:	83 fe 19             	cmp    esi,0x19
c0011bb6:	75 b9                	jne    c0011b71 <VgaText::scrollScreen()+0x13>
c0011bb8:	39 1d b4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1b4,ebx
c0011bbe:	75 1f                	jne    c0011bdf <VgaText::scrollScreen()+0x81>
c0011bc0:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0011bc4:	74 05                	je     c0011bcb <VgaText::scrollScreen()+0x6d>
c0011bc6:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0011bc9:	eb 14                	jmp    c0011bdf <VgaText::scrollScreen()+0x81>
c0011bcb:	50                   	push   eax
c0011bcc:	50                   	push   eax
c0011bcd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011bd1:	50                   	push   eax
c0011bd2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011bd6:	50                   	push   eax
c0011bd7:	e8 60 89 00 00       	call   c001a53c <HalConsoleScroll(int, int)>
c0011bdc:	83 c4 10             	add    esp,0x10
c0011bdf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011be3:	83 c4 0c             	add    esp,0xc
c0011be6:	5b                   	pop    ebx
c0011be7:	5e                   	pop    esi
c0011be8:	5f                   	pop    edi
c0011be9:	5d                   	pop    ebp
c0011bea:	e9 79 fe ff ff       	jmp    c0011a68 <VgaText::updateCursor()>
c0011bef:	90                   	nop

c0011bf0 <VgaText::combineCharAndColour(char, unsigned char)>:
c0011bf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0011bf5:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0011bfa:	c1 e0 08             	shl    eax,0x8
c0011bfd:	09 d0                	or     eax,edx
c0011bff:	c3                   	ret    

c0011c00 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0011c00:	55                   	push   ebp
c0011c01:	57                   	push   edi
c0011c02:	56                   	push   esi
c0011c03:	53                   	push   ebx
c0011c04:	83 ec 1c             	sub    esp,0x1c
c0011c07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011c0b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c13:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0011c16:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c1a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011c1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c22:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011c26:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0011c2a:	85 ed                	test   ebp,ebp
c0011c2c:	75 14                	jne    c0011c42 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0011c2e:	c7 44 24 30 70 37 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023770
c0011c36:	83 c4 1c             	add    esp,0x1c
c0011c39:	5b                   	pop    ebx
c0011c3a:	5e                   	pop    esi
c0011c3b:	5f                   	pop    edi
c0011c3c:	5d                   	pop    ebp
c0011c3d:	e9 24 dc ff ff       	jmp    c000f866 <KePanic(char const*)>
c0011c42:	50                   	push   eax
c0011c43:	50                   	push   eax
c0011c44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0011c49:	50                   	push   eax
c0011c4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0011c4f:	50                   	push   eax
c0011c50:	e8 f7 fe ff ff       	call   c0011b4c <VgaText::combineColours(unsigned char, unsigned char)>
c0011c55:	5a                   	pop    edx
c0011c56:	0f be c9             	movsx  ecx,cl
c0011c59:	5a                   	pop    edx
c0011c5a:	0f b6 c0             	movzx  eax,al
c0011c5d:	50                   	push   eax
c0011c5e:	51                   	push   ecx
c0011c5f:	e8 8c ff ff ff       	call   c0011bf0 <VgaText::combineCharAndColour(char, unsigned char)>
c0011c64:	6b d6 50             	imul   edx,esi,0x50
c0011c67:	83 c4 10             	add    esp,0x10
c0011c6a:	01 da                	add    edx,ebx
c0011c6c:	0f b7 d2             	movzx  edx,dx
c0011c6f:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0011c74:	39 3d b4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1b4,edi
c0011c7a:	75 28                	jne    c0011ca4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0011c7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c80:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0011c84:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0011c88:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011c8c:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0011c90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011c98:	83 c4 1c             	add    esp,0x1c
c0011c9b:	5b                   	pop    ebx
c0011c9c:	5e                   	pop    esi
c0011c9d:	5f                   	pop    edi
c0011c9e:	5d                   	pop    ebp
c0011c9f:	e9 a0 89 00 00       	jmp    c001a644 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011ca4:	83 c4 1c             	add    esp,0x1c
c0011ca7:	5b                   	pop    ebx
c0011ca8:	5e                   	pop    esi
c0011ca9:	5f                   	pop    edi
c0011caa:	5d                   	pop    ebp
c0011cab:	c3                   	ret    

c0011cac <VgaText::getCursorX()>:
c0011cac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cb0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011cb3:	c3                   	ret    

c0011cb4 <VgaText::getCursorY()>:
c0011cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cb8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011cbb:	c3                   	ret    

c0011cbc <VgaText::setCursor(int, int)>:
c0011cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011cc4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0011cc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ccb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011cce:	e9 95 fd ff ff       	jmp    c0011a68 <VgaText::updateCursor()>

c0011cd3 <setActiveTerminal(VgaText*)>:
c0011cd3:	53                   	push   ebx
c0011cd4:	83 ec 08             	sub    esp,0x8
c0011cd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cdb:	85 db                	test   ebx,ebx
c0011cdd:	75 11                	jne    c0011cf0 <setActiveTerminal(VgaText*)+0x1d>
c0011cdf:	c7 44 24 10 80 37 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023780
c0011ce7:	83 c4 08             	add    esp,0x8
c0011cea:	5b                   	pop    ebx
c0011ceb:	e9 76 db ff ff       	jmp    c000f866 <KePanic(char const*)>
c0011cf0:	a1 b4 d1 02 c0       	mov    eax,ds:0xc002d1b4
c0011cf5:	85 c0                	test   eax,eax
c0011cf7:	74 0c                	je     c0011d05 <setActiveTerminal(VgaText*)+0x32>
c0011cf9:	83 ec 0c             	sub    esp,0xc
c0011cfc:	50                   	push   eax
c0011cfd:	e8 66 fd ff ff       	call   c0011a68 <VgaText::updateCursor()>
c0011d02:	83 c4 10             	add    esp,0x10
c0011d05:	89 1d b4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1b4,ebx
c0011d0b:	50                   	push   eax
c0011d0c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011d0f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011d12:	53                   	push   ebx
c0011d13:	e8 a4 ff ff ff       	call   c0011cbc <VgaText::setCursor(int, int)>
c0011d18:	83 c4 18             	add    esp,0x18
c0011d1b:	5b                   	pop    ebx
c0011d1c:	c3                   	ret    
c0011d1d:	90                   	nop

c0011d1e <VgaText::clearScreen()>:
c0011d1e:	57                   	push   edi
c0011d1f:	56                   	push   esi
c0011d20:	31 f6                	xor    esi,esi
c0011d22:	53                   	push   ebx
c0011d23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d27:	52                   	push   edx
c0011d28:	6a 00                	push   0x0
c0011d2a:	6a 00                	push   0x0
c0011d2c:	53                   	push   ebx
c0011d2d:	e8 8a ff ff ff       	call   c0011cbc <VgaText::setCursor(int, int)>
c0011d32:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0011d39:	83 c4 10             	add    esp,0x10
c0011d3c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0011d3f:	7e 20                	jle    c0011d61 <VgaText::clearScreen()+0x43>
c0011d41:	31 ff                	xor    edi,edi
c0011d43:	50                   	push   eax
c0011d44:	50                   	push   eax
c0011d45:	56                   	push   esi
c0011d46:	57                   	push   edi
c0011d47:	47                   	inc    edi
c0011d48:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011d4b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011d4e:	6a 20                	push   0x20
c0011d50:	53                   	push   ebx
c0011d51:	e8 aa fe ff ff       	call   c0011c00 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011d56:	83 c4 20             	add    esp,0x20
c0011d59:	83 ff 50             	cmp    edi,0x50
c0011d5c:	75 e5                	jne    c0011d43 <VgaText::clearScreen()+0x25>
c0011d5e:	46                   	inc    esi
c0011d5f:	eb db                	jmp    c0011d3c <VgaText::clearScreen()+0x1e>
c0011d61:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0011d68:	5b                   	pop    ebx
c0011d69:	5e                   	pop    esi
c0011d6a:	5f                   	pop    edi
c0011d6b:	c3                   	ret    

c0011d6c <VgaText::setCursorX(int)>:
c0011d6c:	83 ec 10             	sub    esp,0x10
c0011d6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d73:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d7a:	50                   	push   eax
c0011d7b:	e8 3c ff ff ff       	call   c0011cbc <VgaText::setCursor(int, int)>
c0011d80:	83 c4 1c             	add    esp,0x1c
c0011d83:	c3                   	ret    

c0011d84 <VgaText::setCursorY(int)>:
c0011d84:	83 ec 10             	sub    esp,0x10
c0011d87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011d8f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011d92:	50                   	push   eax
c0011d93:	e8 24 ff ff ff       	call   c0011cbc <VgaText::setCursor(int, int)>
c0011d98:	83 c4 1c             	add    esp,0x1c
c0011d9b:	c3                   	ret    

c0011d9c <VgaText::incrementCursor(bool)>:
c0011d9c:	56                   	push   esi
c0011d9d:	53                   	push   ebx
c0011d9e:	51                   	push   ecx
c0011d9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011da3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011da7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011daa:	40                   	inc    eax
c0011dab:	83 f8 50             	cmp    eax,0x50
c0011dae:	74 05                	je     c0011db5 <VgaText::incrementCursor(bool)+0x19>
c0011db0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011db3:	eb 24                	jmp    c0011dd9 <VgaText::incrementCursor(bool)+0x3d>
c0011db5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011db8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011dbf:	8d 50 01             	lea    edx,[eax+0x1]
c0011dc2:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011dc5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011dc8:	75 0f                	jne    c0011dd9 <VgaText::incrementCursor(bool)+0x3d>
c0011dca:	83 ec 0c             	sub    esp,0xc
c0011dcd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011dd0:	53                   	push   ebx
c0011dd1:	e8 88 fd ff ff       	call   c0011b5e <VgaText::scrollScreen()>
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	89 f0                	mov    eax,esi
c0011ddb:	84 c0                	test   al,al
c0011ddd:	74 0c                	je     c0011deb <VgaText::incrementCursor(bool)+0x4f>
c0011ddf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011de3:	5a                   	pop    edx
c0011de4:	5b                   	pop    ebx
c0011de5:	5e                   	pop    esi
c0011de6:	e9 7d fc ff ff       	jmp    c0011a68 <VgaText::updateCursor()>
c0011deb:	58                   	pop    eax
c0011dec:	5b                   	pop    ebx
c0011ded:	5e                   	pop    esi
c0011dee:	c3                   	ret    
c0011def:	90                   	nop

c0011df0 <VgaText::decrementCursor(bool)>:
c0011df0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011df4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011df8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011dfb:	85 c0                	test   eax,eax
c0011dfd:	74 04                	je     c0011e03 <VgaText::decrementCursor(bool)+0x13>
c0011dff:	48                   	dec    eax
c0011e00:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011e03:	84 c9                	test   cl,cl
c0011e05:	74 09                	je     c0011e10 <VgaText::decrementCursor(bool)+0x20>
c0011e07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011e0b:	e9 58 fc ff ff       	jmp    c0011a68 <VgaText::updateCursor()>
c0011e10:	c3                   	ret    
c0011e11:	90                   	nop

c0011e12 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011e12:	53                   	push   ebx
c0011e13:	83 ec 08             	sub    esp,0x8
c0011e16:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011e1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e23:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011e27:	83 f8 07             	cmp    eax,0x7
c0011e2a:	75 21                	jne    c0011e4d <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0011e2c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e34:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0011e3c:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0011e44:	83 c4 08             	add    esp,0x8
c0011e47:	5b                   	pop    ebx
c0011e48:	e9 85 6b ff ff       	jmp    c00089d2 <KeBeep(int, int, bool)>
c0011e4d:	83 f8 0d             	cmp    eax,0xd
c0011e50:	75 09                	jne    c0011e5b <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0011e52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011e59:	eb 2d                	jmp    c0011e88 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0011e5b:	83 f8 0a             	cmp    eax,0xa
c0011e5e:	75 31                	jne    c0011e91 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0011e60:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011e63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011e6a:	8d 50 01             	lea    edx,[eax+0x1]
c0011e6d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011e70:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011e73:	75 0f                	jne    c0011e84 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0011e75:	83 ec 0c             	sub    esp,0xc
c0011e78:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011e7b:	53                   	push   ebx
c0011e7c:	e8 dd fc ff ff       	call   c0011b5e <VgaText::scrollScreen()>
c0011e81:	83 c4 10             	add    esp,0x10
c0011e84:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011e88:	83 c4 08             	add    esp,0x8
c0011e8b:	5b                   	pop    ebx
c0011e8c:	e9 d7 fb ff ff       	jmp    c0011a68 <VgaText::updateCursor()>
c0011e91:	83 f8 08             	cmp    eax,0x8
c0011e94:	75 25                	jne    c0011ebb <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0011e96:	50                   	push   eax
c0011e97:	50                   	push   eax
c0011e98:	6a 01                	push   0x1
c0011e9a:	53                   	push   ebx
c0011e9b:	e8 50 ff ff ff       	call   c0011df0 <VgaText::decrementCursor(bool)>
c0011ea0:	5a                   	pop    edx
c0011ea1:	59                   	pop    ecx
c0011ea2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011ea5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011ea8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011eab:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011eae:	6a 20                	push   0x20
c0011eb0:	53                   	push   ebx
c0011eb1:	e8 4a fd ff ff       	call   c0011c00 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011eb6:	83 c4 28             	add    esp,0x28
c0011eb9:	5b                   	pop    ebx
c0011eba:	c3                   	ret    
c0011ebb:	83 ec 08             	sub    esp,0x8
c0011ebe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011ec1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011ec4:	51                   	push   ecx
c0011ec5:	52                   	push   edx
c0011ec6:	50                   	push   eax
c0011ec7:	53                   	push   ebx
c0011ec8:	e8 33 fd ff ff       	call   c0011c00 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011ecd:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011ed1:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0011ed9:	83 c4 28             	add    esp,0x28
c0011edc:	5b                   	pop    ebx
c0011edd:	e9 ba fe ff ff       	jmp    c0011d9c <VgaText::incrementCursor(bool)>

c0011ee2 <VgaText::putchar(char)>:
c0011ee2:	57                   	push   edi
c0011ee3:	56                   	push   esi
c0011ee4:	53                   	push   ebx
c0011ee5:	83 ec 10             	sub    esp,0x10
c0011ee8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011eec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ef0:	89 f8                	mov    eax,edi
c0011ef2:	0f be c0             	movsx  eax,al
c0011ef5:	83 f8 5b             	cmp    eax,0x5b
c0011ef8:	75 18                	jne    c0011f12 <VgaText::putchar(char)+0x30>
c0011efa:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0011efe:	74 20                	je     c0011f20 <VgaText::putchar(char)+0x3e>
c0011f00:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0011f06:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0011f0d:	e9 c1 00 00 00       	jmp    c0011fd3 <VgaText::putchar(char)+0xf1>
c0011f12:	83 f8 1b             	cmp    eax,0x1b
c0011f15:	75 09                	jne    c0011f20 <VgaText::putchar(char)+0x3e>
c0011f17:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0011f1b:	e9 b3 00 00 00       	jmp    c0011fd3 <VgaText::putchar(char)+0xf1>
c0011f20:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0011f23:	84 c9                	test   cl,cl
c0011f25:	0f 84 98 00 00 00    	je     c0011fc3 <VgaText::putchar(char)+0xe1>
c0011f2b:	8d 77 c0             	lea    esi,[edi-0x40]
c0011f2e:	89 f2                	mov    edx,esi
c0011f30:	80 fa 3e             	cmp    dl,0x3e
c0011f33:	77 78                	ja     c0011fad <VgaText::putchar(char)+0xcb>
c0011f35:	83 f8 6d             	cmp    eax,0x6d
c0011f38:	75 47                	jne    c0011f81 <VgaText::putchar(char)+0x9f>
c0011f3a:	31 f6                	xor    esi,esi
c0011f3c:	31 d2                	xor    edx,edx
c0011f3e:	31 c0                	xor    eax,eax
c0011f40:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0011f43:	7e 2d                	jle    c0011f72 <VgaText::putchar(char)+0x90>
c0011f45:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0011f4a:	83 fa 3b             	cmp    edx,0x3b
c0011f4d:	75 17                	jne    c0011f66 <VgaText::putchar(char)+0x84>
c0011f4f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011f53:	50                   	push   eax
c0011f54:	53                   	push   ebx
c0011f55:	e8 24 fb ff ff       	call   c0011a7e <VgaText::doANSI_SGR(int)>
c0011f5a:	59                   	pop    ecx
c0011f5b:	31 d2                	xor    edx,edx
c0011f5d:	5f                   	pop    edi
c0011f5e:	31 c0                	xor    eax,eax
c0011f60:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011f64:	eb 09                	jmp    c0011f6f <VgaText::putchar(char)+0x8d>
c0011f66:	6b c0 0a             	imul   eax,eax,0xa
c0011f69:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011f6d:	88 ca                	mov    dl,cl
c0011f6f:	46                   	inc    esi
c0011f70:	eb ce                	jmp    c0011f40 <VgaText::putchar(char)+0x5e>
c0011f72:	84 d2                	test   dl,dl
c0011f74:	74 2f                	je     c0011fa5 <VgaText::putchar(char)+0xc3>
c0011f76:	50                   	push   eax
c0011f77:	53                   	push   ebx
c0011f78:	e8 01 fb ff ff       	call   c0011a7e <VgaText::doANSI_SGR(int)>
c0011f7d:	58                   	pop    eax
c0011f7e:	5a                   	pop    edx
c0011f7f:	eb 24                	jmp    c0011fa5 <VgaText::putchar(char)+0xc3>
c0011f81:	83 f8 4a             	cmp    eax,0x4a
c0011f84:	75 1f                	jne    c0011fa5 <VgaText::putchar(char)+0xc3>
c0011f86:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0011f8a:	75 19                	jne    c0011fa5 <VgaText::putchar(char)+0xc3>
c0011f8c:	83 ec 0c             	sub    esp,0xc
c0011f8f:	53                   	push   ebx
c0011f90:	e8 89 fd ff ff       	call   c0011d1e <VgaText::clearScreen()>
c0011f95:	83 c4 0c             	add    esp,0xc
c0011f98:	6a 00                	push   0x0
c0011f9a:	6a 00                	push   0x0
c0011f9c:	53                   	push   ebx
c0011f9d:	e8 1a fd ff ff       	call   c0011cbc <VgaText::setCursor(int, int)>
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011fab:	eb 26                	jmp    c0011fd3 <VgaText::putchar(char)+0xf1>
c0011fad:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0011fb0:	83 f8 0e             	cmp    eax,0xe
c0011fb3:	7f 1e                	jg     c0011fd3 <VgaText::putchar(char)+0xf1>
c0011fb5:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fb8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011fbb:	89 f9                	mov    ecx,edi
c0011fbd:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0011fc1:	eb 10                	jmp    c0011fd3 <VgaText::putchar(char)+0xf1>
c0011fc3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011fc6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011fc9:	50                   	push   eax
c0011fca:	53                   	push   ebx
c0011fcb:	e8 42 fe ff ff       	call   c0011e12 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011fd0:	83 c4 10             	add    esp,0x10
c0011fd3:	83 c4 10             	add    esp,0x10
c0011fd6:	5b                   	pop    ebx
c0011fd7:	5e                   	pop    esi
c0011fd8:	5f                   	pop    edi
c0011fd9:	c3                   	ret    

c0011fda <VgaText::putx(unsigned int)>:
c0011fda:	57                   	push   edi
c0011fdb:	b9 11 00 00 00       	mov    ecx,0x11
c0011fe0:	56                   	push   esi
c0011fe1:	be 8f 21 02 c0       	mov    esi,0xc002218f
c0011fe6:	53                   	push   ebx
c0011fe7:	83 ec 20             	sub    esp,0x20
c0011fea:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011fee:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011ff2:	fc                   	cld    
c0011ff3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ff5:	be 08 00 00 00       	mov    esi,0x8
c0011ffa:	50                   	push   eax
c0011ffb:	50                   	push   eax
c0011ffc:	89 d8                	mov    eax,ebx
c0011ffe:	c1 e3 04             	shl    ebx,0x4
c0012001:	c1 e8 1c             	shr    eax,0x1c
c0012004:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0012009:	50                   	push   eax
c001200a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001200e:	e8 cf fe ff ff       	call   c0011ee2 <VgaText::putchar(char)>
c0012013:	83 c4 10             	add    esp,0x10
c0012016:	4e                   	dec    esi
c0012017:	75 e1                	jne    c0011ffa <VgaText::putx(unsigned int)+0x20>
c0012019:	83 c4 20             	add    esp,0x20
c001201c:	5b                   	pop    ebx
c001201d:	5e                   	pop    esi
c001201e:	5f                   	pop    edi
c001201f:	c3                   	ret    

c0012020 <VgaText::puts(char const*)>:
c0012020:	53                   	push   ebx
c0012021:	83 ec 08             	sub    esp,0x8
c0012024:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012028:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001202b:	85 c0                	test   eax,eax
c001202d:	74 12                	je     c0012041 <VgaText::puts(char const*)+0x21>
c001202f:	43                   	inc    ebx
c0012030:	51                   	push   ecx
c0012031:	51                   	push   ecx
c0012032:	50                   	push   eax
c0012033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012037:	e8 a6 fe ff ff       	call   c0011ee2 <VgaText::putchar(char)>
c001203c:	83 c4 10             	add    esp,0x10
c001203f:	eb e7                	jmp    c0012028 <VgaText::puts(char const*)+0x8>
c0012041:	83 c4 08             	add    esp,0x8
c0012044:	5b                   	pop    ebx
c0012045:	c3                   	ret    

c0012046 <VgaText::write(unsigned long long, void*, int*)>:
c0012046:	55                   	push   ebp
c0012047:	57                   	push   edi
c0012048:	56                   	push   esi
c0012049:	53                   	push   ebx
c001204a:	83 ec 0c             	sub    esp,0xc
c001204d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012051:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012055:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012059:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012060:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012063:	39 eb                	cmp    ebx,ebp
c0012065:	74 13                	je     c001207a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012067:	43                   	inc    ebx
c0012068:	50                   	push   eax
c0012069:	50                   	push   eax
c001206a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001206e:	50                   	push   eax
c001206f:	56                   	push   esi
c0012070:	e8 6d fe ff ff       	call   c0011ee2 <VgaText::putchar(char)>
c0012075:	83 c4 10             	add    esp,0x10
c0012078:	eb e9                	jmp    c0012063 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001207a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012081:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012085:	89 38                	mov    DWORD PTR [eax],edi
c0012087:	83 c4 0c             	add    esp,0xc
c001208a:	31 c0                	xor    eax,eax
c001208c:	5b                   	pop    ebx
c001208d:	5e                   	pop    esi
c001208e:	5f                   	pop    edi
c001208f:	5d                   	pop    ebp
c0012090:	c3                   	ret    
c0012091:	90                   	nop

c0012092 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012092:	55                   	push   ebp
c0012093:	57                   	push   edi
c0012094:	56                   	push   esi
c0012095:	53                   	push   ebx
c0012096:	83 ec 1c             	sub    esp,0x1c
c0012099:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001209d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00120a5:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c00120a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120ac:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00120b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120b4:	85 db                	test   ebx,ebx
c00120b6:	75 14                	jne    c00120cc <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c00120b8:	c7 44 24 30 8e 37 02 c0 	mov    DWORD PTR [esp+0x30],0xc002378e
c00120c0:	83 c4 1c             	add    esp,0x1c
c00120c3:	5b                   	pop    ebx
c00120c4:	5e                   	pop    esi
c00120c5:	5f                   	pop    edi
c00120c6:	5d                   	pop    ebp
c00120c7:	e9 9a d7 ff ff       	jmp    c000f866 <KePanic(char const*)>
c00120cc:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00120d3:	50                   	push   eax
c00120d4:	50                   	push   eax
c00120d5:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00120da:	50                   	push   eax
c00120db:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00120e0:	50                   	push   eax
c00120e1:	e8 66 fa ff ff       	call   c0011b4c <VgaText::combineColours(unsigned char, unsigned char)>
c00120e6:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00120ea:	83 c4 10             	add    esp,0x10
c00120ed:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00120f0:	0f b6 e8             	movzx  ebp,al
c00120f3:	0f b7 c9             	movzx  ecx,cx
c00120f6:	01 c9                	add    ecx,ecx
c00120f8:	01 cb                	add    ebx,ecx
c00120fa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00120fd:	85 c0                	test   eax,eax
c00120ff:	0f 84 ef 00 00 00    	je     c00121f4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012105:	83 f8 0d             	cmp    eax,0xd
c0012108:	75 0c                	jne    c0012116 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c001210a:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012111:	e9 d8 00 00 00       	jmp    c00121ee <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012116:	83 f8 0a             	cmp    eax,0xa
c0012119:	75 44                	jne    c001215f <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c001211b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001211e:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012125:	8d 48 01             	lea    ecx,[eax+0x1]
c0012128:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c001212b:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c001212e:	75 0f                	jne    c001213f <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012130:	83 ec 0c             	sub    esp,0xc
c0012133:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012136:	57                   	push   edi
c0012137:	e8 22 fa ff ff       	call   c0011b5e <VgaText::scrollScreen()>
c001213c:	83 c4 10             	add    esp,0x10
c001213f:	83 ec 0c             	sub    esp,0xc
c0012142:	57                   	push   edi
c0012143:	e8 20 f9 ff ff       	call   c0011a68 <VgaText::updateCursor()>
c0012148:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001214c:	83 c4 10             	add    esp,0x10
c001214f:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012152:	0f b7 db             	movzx  ebx,bx
c0012155:	01 db                	add    ebx,ebx
c0012157:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001215a:	e9 8f 00 00 00       	jmp    c00121ee <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001215f:	83 f8 08             	cmp    eax,0x8
c0012162:	75 34                	jne    c0012198 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012164:	51                   	push   ecx
c0012165:	51                   	push   ecx
c0012166:	6a 01                	push   0x1
c0012168:	57                   	push   edi
c0012169:	e8 82 fc ff ff       	call   c0011df0 <VgaText::decrementCursor(bool)>
c001216e:	5b                   	pop    ebx
c001216f:	58                   	pop    eax
c0012170:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012173:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012176:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012179:	ff 77 34             	push   DWORD PTR [edi+0x34]
c001217c:	6a 20                	push   0x20
c001217e:	57                   	push   edi
c001217f:	e8 7c fa ff ff       	call   c0011c00 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012184:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012188:	83 c4 20             	add    esp,0x20
c001218b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001218e:	0f b7 db             	movzx  ebx,bx
c0012191:	01 db                	add    ebx,ebx
c0012193:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012196:	eb 56                	jmp    c00121ee <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012198:	52                   	push   edx
c0012199:	52                   	push   edx
c001219a:	55                   	push   ebp
c001219b:	50                   	push   eax
c001219c:	e8 4f fa ff ff       	call   c0011bf0 <VgaText::combineCharAndColour(char, unsigned char)>
c00121a1:	83 c4 10             	add    esp,0x10
c00121a4:	66 89 03             	mov    WORD PTR [ebx],ax
c00121a7:	39 3d b4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1b4,edi
c00121ad:	75 1d                	jne    c00121cc <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00121af:	83 ec 0c             	sub    esp,0xc
c00121b2:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00121b5:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00121b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00121bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00121c0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00121c3:	50                   	push   eax
c00121c4:	e8 7b 84 00 00       	call   c001a644 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00121c9:	83 c4 20             	add    esp,0x20
c00121cc:	83 c3 02             	add    ebx,0x2
c00121cf:	50                   	push   eax
c00121d0:	50                   	push   eax
c00121d1:	6a 00                	push   0x0
c00121d3:	57                   	push   edi
c00121d4:	e8 c3 fb ff ff       	call   c0011d9c <VgaText::incrementCursor(bool)>
c00121d9:	83 c4 10             	add    esp,0x10
c00121dc:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00121e0:	75 0c                	jne    c00121ee <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00121e2:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00121e6:	0f b7 db             	movzx  ebx,bx
c00121e9:	01 db                	add    ebx,ebx
c00121eb:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00121ee:	46                   	inc    esi
c00121ef:	e9 06 ff ff ff       	jmp    c00120fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00121f4:	83 ec 0c             	sub    esp,0xc
c00121f7:	57                   	push   edi
c00121f8:	e8 6b f8 ff ff       	call   c0011a68 <VgaText::updateCursor()>
c00121fd:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012204:	83 c4 2c             	add    esp,0x2c
c0012207:	5b                   	pop    ebx
c0012208:	5e                   	pop    esi
c0012209:	5f                   	pop    edi
c001220a:	5d                   	pop    ebp
c001220b:	c3                   	ret    

c001220c <VgaText::VgaText(char const*)>:
c001220c:	56                   	push   esi
c001220d:	53                   	push   ebx
c001220e:	83 ec 04             	sub    esp,0x4
c0012211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012215:	83 ec 08             	sub    esp,0x8
c0012218:	6a 00                	push   0x0
c001221a:	50                   	push   eax
c001221b:	e8 d8 05 00 00       	call   c00127f8 <UnixFile::UnixFile(int)>
c0012220:	83 c4 10             	add    esp,0x10
c0012223:	ba c8 37 02 c0       	mov    edx,0xc00237c8
c0012228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001222c:	89 10                	mov    DWORD PTR [eax],edx
c001222e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012232:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001223d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012248:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001224c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012250:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012258:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001225f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012263:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001226a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001226e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012279:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012280:	83 ec 0c             	sub    esp,0xc
c0012283:	68 9e 37 02 c0       	push   0xc002379e
c0012288:	e8 d7 4c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001228d:	83 c4 10             	add    esp,0x10
c0012290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012294:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001229b:	83 ec 0c             	sub    esp,0xc
c001229e:	6a 01                	push   0x1
c00122a0:	e8 b4 09 00 00       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c00122a5:	83 c4 10             	add    esp,0x10
c00122a8:	89 c2                	mov    edx,eax
c00122aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ae:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00122b1:	8b 1d 50 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d250
c00122b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122be:	89 c6                	mov    esi,eax
c00122c0:	e8 95 d7 ff ff       	call   c000fa5a <Phys::allocatePage()>
c00122c5:	68 05 0c 00 00       	push   0xc05
c00122ca:	56                   	push   esi
c00122cb:	50                   	push   eax
c00122cc:	53                   	push   ebx
c00122cd:	e8 6a 10 00 00       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c00122d2:	83 c4 10             	add    esp,0x10
c00122d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122d9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122dc:	83 ec 04             	sub    esp,0x4
c00122df:	68 a0 0f 00 00       	push   0xfa0
c00122e4:	6a 00                	push   0x0
c00122e6:	50                   	push   eax
c00122e7:	e8 04 e2 fe ff       	call   c00004f0 <memset>
c00122ec:	83 c4 10             	add    esp,0x10
c00122ef:	83 ec 04             	sub    esp,0x4
c00122f2:	6a 00                	push   0x0
c00122f4:	6a 07                	push   0x7
c00122f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122fa:	e8 13 f8 ff ff       	call   c0011b12 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00122ff:	83 c4 10             	add    esp,0x10
c0012302:	83 ec 04             	sub    esp,0x4
c0012305:	6a 00                	push   0x0
c0012307:	6a 00                	push   0x0
c0012309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001230d:	e8 aa f9 ff ff       	call   c0011cbc <VgaText::setCursor(int, int)>
c0012312:	83 c4 10             	add    esp,0x10
c0012315:	83 ec 0c             	sub    esp,0xc
c0012318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001231c:	e8 fd f9 ff ff       	call   c0011d1e <VgaText::clearScreen()>
c0012321:	83 c4 10             	add    esp,0x10
c0012324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012328:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001232c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012330:	05 82 00 00 00       	add    eax,0x82
c0012335:	83 ec 04             	sub    esp,0x4
c0012338:	68 80 00 00 00       	push   0x80
c001233d:	6a 00                	push   0x0
c001233f:	50                   	push   eax
c0012340:	e8 ab e1 fe ff       	call   c00004f0 <memset>
c0012345:	83 c4 10             	add    esp,0x10
c0012348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001234c:	05 02 01 00 00       	add    eax,0x102
c0012351:	83 ec 04             	sub    esp,0x4
c0012354:	68 80 00 00 00       	push   0x80
c0012359:	6a 00                	push   0x0
c001235b:	50                   	push   eax
c001235c:	e8 8f e1 fe ff       	call   c00004f0 <memset>
c0012361:	83 c4 10             	add    esp,0x10
c0012364:	90                   	nop
c0012365:	83 c4 04             	add    esp,0x4
c0012368:	5b                   	pop    ebx
c0012369:	5e                   	pop    esi
c001236a:	c3                   	ret    
c001236b:	90                   	nop

c001236c <VgaText::receiveKey(unsigned char)>:
c001236c:	55                   	push   ebp
c001236d:	57                   	push   edi
c001236e:	56                   	push   esi
c001236f:	53                   	push   ebx
c0012370:	83 ec 2c             	sub    esp,0x2c
c0012373:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012377:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001237b:	89 ef                	mov    edi,ebp
c001237d:	81 e7 ff 00 00 00    	and    edi,0xff
c0012383:	0f 84 66 01 00 00    	je     c00124ef <VgaText::receiveKey(unsigned char)+0x183>
c0012389:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c001238f:	83 ff 08             	cmp    edi,0x8
c0012392:	75 73                	jne    c0012407 <VgaText::receiveKey(unsigned char)+0x9b>
c0012394:	83 ec 0c             	sub    esp,0xc
c0012397:	56                   	push   esi
c0012398:	e8 d3 e1 fe ff       	call   c0000570 <strlen>
c001239d:	83 c4 10             	add    esp,0x10
c00123a0:	85 c0                	test   eax,eax
c00123a2:	0f 84 02 01 00 00    	je     c00124aa <VgaText::receiveKey(unsigned char)+0x13e>
c00123a8:	50                   	push   eax
c00123a9:	50                   	push   eax
c00123aa:	6a 08                	push   0x8
c00123ac:	53                   	push   ebx
c00123ad:	e8 30 fb ff ff       	call   c0011ee2 <VgaText::putchar(char)>
c00123b2:	89 34 24             	mov    DWORD PTR [esp],esi
c00123b5:	e8 b6 e1 fe ff       	call   c0000570 <strlen>
c00123ba:	83 c4 10             	add    esp,0x10
c00123bd:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00123c5:	83 fa 0d             	cmp    edx,0xd
c00123c8:	89 d0                	mov    eax,edx
c00123ca:	0f 95 c1             	setne  cl
c00123cd:	83 fa 1f             	cmp    edx,0x1f
c00123d0:	0f 9e c2             	setle  dl
c00123d3:	0f b6 d2             	movzx  edx,dl
c00123d6:	85 ca                	test   edx,ecx
c00123d8:	74 17                	je     c00123f1 <VgaText::receiveKey(unsigned char)+0x85>
c00123da:	83 e8 08             	sub    eax,0x8
c00123dd:	3c 02                	cmp    al,0x2
c00123df:	76 10                	jbe    c00123f1 <VgaText::receiveKey(unsigned char)+0x85>
c00123e1:	55                   	push   ebp
c00123e2:	55                   	push   ebp
c00123e3:	68 b1 37 02 c0       	push   0xc00237b1
c00123e8:	53                   	push   ebx
c00123e9:	e8 32 fc ff ff       	call   c0012020 <VgaText::puts(char const*)>
c00123ee:	83 c4 10             	add    esp,0x10
c00123f1:	83 ec 0c             	sub    esp,0xc
c00123f4:	56                   	push   esi
c00123f5:	e8 76 e1 fe ff       	call   c0000570 <strlen>
c00123fa:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012402:	e9 a0 00 00 00       	jmp    c00124a7 <VgaText::receiveKey(unsigned char)+0x13b>
c0012407:	83 ec 0c             	sub    esp,0xc
c001240a:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012410:	50                   	push   eax
c0012411:	e8 5a e1 fe ff       	call   c0000570 <strlen>
c0012416:	89 34 24             	mov    DWORD PTR [esp],esi
c0012419:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001241d:	e8 4e e1 fe ff       	call   c0000570 <strlen>
c0012422:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012426:	83 c4 10             	add    esp,0x10
c0012429:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001242d:	3d 80 00 00 00       	cmp    eax,0x80
c0012432:	0f 87 b7 00 00 00    	ja     c00124ef <VgaText::receiveKey(unsigned char)+0x183>
c0012438:	8d 45 ff             	lea    eax,[ebp-0x1]
c001243b:	8d 55 f7             	lea    edx,[ebp-0x9]
c001243e:	3c 1e                	cmp    al,0x1e
c0012440:	0f 96 c0             	setbe  al
c0012443:	80 fa 01             	cmp    dl,0x1
c0012446:	0f 97 c2             	seta   dl
c0012449:	0f b6 d2             	movzx  edx,dl
c001244c:	85 c2                	test   edx,eax
c001244e:	74 2e                	je     c001247e <VgaText::receiveKey(unsigned char)+0x112>
c0012450:	83 ff 0d             	cmp    edi,0xd
c0012453:	74 29                	je     c001247e <VgaText::receiveKey(unsigned char)+0x112>
c0012455:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012458:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001245b:	68 b7 37 02 c0       	push   0xc00237b7
c0012460:	53                   	push   ebx
c0012461:	e8 2c fc ff ff       	call   c0012092 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012466:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012469:	8d 45 40             	lea    eax,[ebp+0x40]
c001246c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001246f:	0f b6 c0             	movzx  eax,al
c0012472:	50                   	push   eax
c0012473:	53                   	push   ebx
c0012474:	e8 99 f9 ff ff       	call   c0011e12 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012479:	83 c4 20             	add    esp,0x20
c001247c:	eb 11                	jmp    c001248f <VgaText::receiveKey(unsigned char)+0x123>
c001247e:	89 e8                	mov    eax,ebp
c0012480:	51                   	push   ecx
c0012481:	0f be c0             	movsx  eax,al
c0012484:	51                   	push   ecx
c0012485:	50                   	push   eax
c0012486:	53                   	push   ebx
c0012487:	e8 56 fa ff ff       	call   c0011ee2 <VgaText::putchar(char)>
c001248c:	83 c4 10             	add    esp,0x10
c001248f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012494:	89 e8                	mov    eax,ebp
c0012496:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001249a:	52                   	push   edx
c001249b:	52                   	push   edx
c001249c:	8d 44 24 26          	lea    eax,[esp+0x26]
c00124a0:	50                   	push   eax
c00124a1:	56                   	push   esi
c00124a2:	e8 99 e3 fe ff       	call   c0000840 <strcat>
c00124a7:	83 c4 10             	add    esp,0x10
c00124aa:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c00124b0:	b0 01                	mov    al,0x1
c00124b2:	83 ff 1c             	cmp    edi,0x1c
c00124b5:	77 0e                	ja     c00124c5 <VgaText::receiveKey(unsigned char)+0x159>
c00124b7:	b8 08 04 00 10       	mov    eax,0x10000408
c00124bc:	89 f9                	mov    ecx,edi
c00124be:	d3 e8                	shr    eax,cl
c00124c0:	f7 d0                	not    eax
c00124c2:	83 e0 01             	and    eax,0x1
c00124c5:	84 c0                	test   al,al
c00124c7:	74 04                	je     c00124cd <VgaText::receiveKey(unsigned char)+0x161>
c00124c9:	84 d2                	test   dl,dl
c00124cb:	74 22                	je     c00124ef <VgaText::receiveKey(unsigned char)+0x183>
c00124cd:	81 c3 02 01 00 00    	add    ebx,0x102
c00124d3:	50                   	push   eax
c00124d4:	50                   	push   eax
c00124d5:	56                   	push   esi
c00124d6:	53                   	push   ebx
c00124d7:	e8 64 e3 fe ff       	call   c0000840 <strcat>
c00124dc:	83 c4 0c             	add    esp,0xc
c00124df:	68 80 00 00 00       	push   0x80
c00124e4:	6a 00                	push   0x0
c00124e6:	56                   	push   esi
c00124e7:	e8 04 e0 fe ff       	call   c00004f0 <memset>
c00124ec:	83 c4 10             	add    esp,0x10
c00124ef:	83 c4 2c             	add    esp,0x2c
c00124f2:	5b                   	pop    ebx
c00124f3:	5e                   	pop    esi
c00124f4:	5f                   	pop    edi
c00124f5:	5d                   	pop    ebp
c00124f6:	c3                   	ret    
c00124f7:	90                   	nop

c00124f8 <VgaText::doUpdate()>:
c00124f8:	c3                   	ret    
c00124f9:	66 90                	xchg   ax,ax
c00124fb:	90                   	nop

c00124fc <TSS::TSS()>:
c00124fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012500:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012507:	90                   	nop
c0012508:	c3                   	ret    
c0012509:	90                   	nop
c001250a:	66 90                	xchg   ax,ax

c001250c <TSS::setESP(unsigned long)>:
c001250c:	55                   	push   ebp
c001250d:	89 e5                	mov    ebp,esp
c001250f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012512:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012515:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012518:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001251b:	90                   	nop
c001251c:	5d                   	pop    ebp
c001251d:	c3                   	ret    
c001251e:	66 90                	xchg   ax,ax

c0012520 <TSS::flush()>:
c0012520:	55                   	push   ebp
c0012521:	89 e5                	mov    ebp,esp
c0012523:	83 ec 10             	sub    esp,0x10
c0012526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012529:	8b 00                	mov    eax,DWORD PTR [eax]
c001252b:	83 c8 03             	or     eax,0x3
c001252e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012532:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012536:	66 89 d0             	mov    ax,dx
c0012539:	0f 00 d8             	ltr    ax
c001253c:	90                   	nop
c001253d:	c9                   	leave  
c001253e:	c3                   	ret    
c001253f:	90                   	nop

c0012540 <TSS::setup(unsigned long, unsigned long)>:
c0012540:	55                   	push   ebp
c0012541:	89 e5                	mov    ebp,esp
c0012543:	83 ec 18             	sub    esp,0x18
c0012546:	83 ec 0c             	sub    esp,0xc
c0012549:	6a 68                	push   0x68
c001254b:	e8 cf cf ff ff       	call   c000f51f <malloc>
c0012550:	83 c4 10             	add    esp,0x10
c0012553:	89 c2                	mov    edx,eax
c0012555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012558:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001255b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001255e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012561:	83 ec 08             	sub    esp,0x8
c0012564:	50                   	push   eax
c0012565:	68 dc 37 02 c0       	push   0xc00237dc
c001256a:	e8 f5 49 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001256f:	83 c4 10             	add    esp,0x10
c0012572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012575:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012578:	83 ec 04             	sub    esp,0x4
c001257b:	6a 68                	push   0x68
c001257d:	6a 00                	push   0x0
c001257f:	50                   	push   eax
c0012580:	e8 6b df fe ff       	call   c00004f0 <memset>
c0012585:	83 c4 10             	add    esp,0x10
c0012588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001258b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001258e:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012597:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001259a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00125a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00125a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00125a6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00125a9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00125ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00125af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00125b2:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00125b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00125bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00125be:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00125c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00125c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00125ca:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00125d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00125d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00125d6:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00125dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00125df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00125e2:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00125e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00125eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00125ee:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00125f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00125f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00125fa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00125fd:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012603:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012606:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012609:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001260c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001260f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012612:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012619:	83 ec 0c             	sub    esp,0xc
c001261c:	68 f3 37 02 c0       	push   0xc00237f3
c0012621:	e8 3e 49 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012626:	83 c4 10             	add    esp,0x10
c0012629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001262c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001262f:	0f 20 da             	mov    edx,cr3
c0012632:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012635:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012638:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001263b:	83 ec 0c             	sub    esp,0xc
c001263e:	68 f6 37 02 c0       	push   0xc00237f6
c0012643:	e8 1c 49 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012648:	83 c4 10             	add    esp,0x10
c001264b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001264e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012651:	83 ec 08             	sub    esp,0x8
c0012654:	50                   	push   eax
c0012655:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012658:	50                   	push   eax
c0012659:	e8 24 bf ff ff       	call   c000e582 <GDTEntry::setBase(unsigned int)>
c001265e:	83 c4 10             	add    esp,0x10
c0012661:	83 ec 08             	sub    esp,0x8
c0012664:	6a 68                	push   0x68
c0012666:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012669:	50                   	push   eax
c001266a:	e8 2f bf ff ff       	call   c000e59e <GDTEntry::setLimit(unsigned int)>
c001266f:	83 c4 10             	add    esp,0x10
c0012672:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012676:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012679:	83 e0 0f             	and    eax,0xf
c001267c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001267f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012682:	83 c8 40             	or     eax,0x40
c0012685:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012688:	83 ec 0c             	sub    esp,0xc
c001268b:	68 f9 37 02 c0       	push   0xc00237f9
c0012690:	e8 cf 48 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012695:	83 c4 10             	add    esp,0x10
c0012698:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c001269d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00126a3:	83 ec 08             	sub    esp,0x8
c00126a6:	50                   	push   eax
c00126a7:	68 fc 37 02 c0       	push   0xc00237fc
c00126ac:	e8 b3 48 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00126b1:	83 c4 10             	add    esp,0x10
c00126b4:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c00126b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00126bf:	05 64 01 00 00       	add    eax,0x164
c00126c4:	83 ec 04             	sub    esp,0x4
c00126c7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00126ca:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00126cd:	50                   	push   eax
c00126ce:	e8 ff be ff ff       	call   c000e5d2 <GDT::addEntry(GDTEntry)>
c00126d3:	83 c4 10             	add    esp,0x10
c00126d6:	89 c2                	mov    edx,eax
c00126d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00126db:	89 10                	mov    DWORD PTR [eax],edx
c00126dd:	83 ec 0c             	sub    esp,0xc
c00126e0:	68 11 38 02 c0       	push   0xc0023811
c00126e5:	e8 7a 48 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00126ea:	83 c4 10             	add    esp,0x10
c00126ed:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c00126f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00126f8:	05 64 01 00 00       	add    eax,0x164
c00126fd:	83 ec 0c             	sub    esp,0xc
c0012700:	50                   	push   eax
c0012701:	e8 f6 be ff ff       	call   c000e5fc <GDT::flush()>
c0012706:	83 c4 10             	add    esp,0x10
c0012709:	83 ec 0c             	sub    esp,0xc
c001270c:	68 14 38 02 c0       	push   0xc0023814
c0012711:	e8 4e 48 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012716:	83 c4 10             	add    esp,0x10
c0012719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001271c:	8b 00                	mov    eax,DWORD PTR [eax]
c001271e:	c9                   	leave  
c001271f:	c3                   	ret    

c0012720 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012724:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012728:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001272b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012730:	75 08                	jne    c001273a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012732:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012738:	eb 38                	jmp    c0012772 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001273a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001273f:	75 17                	jne    c0012758 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012741:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012746:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012749:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001274f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012751:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012755:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012758:	89 c1                	mov    ecx,eax
c001275a:	83 e1 fd             	and    ecx,0xfffffffd
c001275d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012763:	74 cd                	je     c0012732 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012765:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001276a:	83 e0 ef             	and    eax,0xffffffef
c001276d:	83 f8 08             	cmp    eax,0x8
c0012770:	76 c0                	jbe    c0012732 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012772:	31 c0                	xor    eax,eax
c0012774:	c3                   	ret    
c0012775:	90                   	nop

c0012776 <ReservedFilename::isAtty()>:
c0012776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001277a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001277d:	31 c0                	xor    eax,eax
c001277f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012785:	74 09                	je     c0012790 <ReservedFilename::isAtty()+0x1a>
c0012787:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001278d:	0f 94 c0             	sete   al
c0012790:	c3                   	ret    
c0012791:	90                   	nop

c0012792 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012792:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001279a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001279d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00127a1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00127a6:	75 08                	jne    c00127b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00127a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00127ae:	eb 3d                	jmp    c00127ed <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00127b0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00127b5:	75 17                	jne    c00127ce <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00127b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127bf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00127c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00127c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127cb:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00127ce:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00127d3:	75 04                	jne    c00127d9 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00127d5:	89 0a                	mov    DWORD PTR [edx],ecx
c00127d7:	eb 14                	jmp    c00127ed <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00127d9:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00127de:	74 c8                	je     c00127a8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00127e0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00127e5:	83 e0 ef             	and    eax,0xffffffef
c00127e8:	83 f8 08             	cmp    eax,0x8
c00127eb:	76 bb                	jbe    c00127a8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00127ed:	31 c0                	xor    eax,eax
c00127ef:	c3                   	ret    

c00127f0 <UnixFile::getFileDescriptor()>:
c00127f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00127f7:	c3                   	ret    

c00127f8 <UnixFile::UnixFile(int)>:
c00127f8:	53                   	push   ebx
c00127f9:	83 ec 28             	sub    esp,0x28
c00127fc:	ba 64 38 02 c0       	mov    edx,0xc0023864
c0012801:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012805:	89 10                	mov    DWORD PTR [eax],edx
c0012807:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001280f:	0f 8f 90 01 00 00    	jg     c00129a5 <UnixFile::UnixFile(int)+0x1ad>
c0012815:	a1 20 5b 02 c0       	mov    eax,ds:0xc0025b20
c001281a:	8d 50 01             	lea    edx,[eax+0x1]
c001281d:	89 15 20 5b 02 c0    	mov    DWORD PTR ds:0xc0025b20,edx
c0012823:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012827:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001282a:	83 ec 08             	sub    esp,0x8
c001282d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012831:	68 38 d2 02 c0       	push   0xc002d238
c0012836:	e8 b3 ec 00 00       	call   c00214ee <LinkedList<UnixFile>::addElement(UnixFile*)>
c001283b:	83 c4 10             	add    esp,0x10
c001283e:	a0 34 d2 02 c0       	mov    al,ds:0xc002d234
c0012843:	83 f0 01             	xor    eax,0x1
c0012846:	0f b6 c0             	movzx  eax,al
c0012849:	85 c0                	test   eax,eax
c001284b:	0f 84 55 01 00 00    	je     c00129a6 <UnixFile::UnixFile(int)+0x1ae>
c0012851:	c6 05 34 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d234,0x1
c0012858:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012860:	83 ec 0c             	sub    esp,0xc
c0012863:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012867:	e8 b3 cc ff ff       	call   c000f51f <malloc>
c001286c:	83 c4 10             	add    esp,0x10
c001286f:	89 c3                	mov    ebx,eax
c0012871:	83 ec 08             	sub    esp,0x8
c0012874:	68 03 ff ff 0f       	push   0xfffff03
c0012879:	53                   	push   ebx
c001287a:	e8 2d 01 00 00       	call   c00129ac <ReservedFilename::ReservedFilename(int)>
c001287f:	83 c4 10             	add    esp,0x10
c0012882:	89 1d 2c d2 02 c0    	mov    DWORD PTR ds:0xc002d22c,ebx
c0012888:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012890:	83 ec 0c             	sub    esp,0xc
c0012893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012897:	e8 83 cc ff ff       	call   c000f51f <malloc>
c001289c:	83 c4 10             	add    esp,0x10
c001289f:	89 c3                	mov    ebx,eax
c00128a1:	83 ec 08             	sub    esp,0x8
c00128a4:	68 01 ff ff 0f       	push   0xfffff01
c00128a9:	53                   	push   ebx
c00128aa:	e8 fd 00 00 00       	call   c00129ac <ReservedFilename::ReservedFilename(int)>
c00128af:	83 c4 10             	add    esp,0x10
c00128b2:	89 1d 30 d2 02 c0    	mov    DWORD PTR ds:0xc002d230,ebx
c00128b8:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00128c0:	83 ec 0c             	sub    esp,0xc
c00128c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128c7:	e8 53 cc ff ff       	call   c000f51f <malloc>
c00128cc:	83 c4 10             	add    esp,0x10
c00128cf:	89 c3                	mov    ebx,eax
c00128d1:	83 ec 08             	sub    esp,0x8
c00128d4:	68 00 ff ff 0f       	push   0xfffff00
c00128d9:	53                   	push   ebx
c00128da:	e8 cd 00 00 00       	call   c00129ac <ReservedFilename::ReservedFilename(int)>
c00128df:	83 c4 10             	add    esp,0x10
c00128e2:	89 1d 24 d2 02 c0    	mov    DWORD PTR ds:0xc002d224,ebx
c00128e8:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00128f0:	83 ec 0c             	sub    esp,0xc
c00128f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00128f7:	e8 23 cc ff ff       	call   c000f51f <malloc>
c00128fc:	83 c4 10             	add    esp,0x10
c00128ff:	89 c3                	mov    ebx,eax
c0012901:	83 ec 08             	sub    esp,0x8
c0012904:	68 02 ff ff 0f       	push   0xfffff02
c0012909:	53                   	push   ebx
c001290a:	e8 9d 00 00 00       	call   c00129ac <ReservedFilename::ReservedFilename(int)>
c001290f:	83 c4 10             	add    esp,0x10
c0012912:	89 1d 28 d2 02 c0    	mov    DWORD PTR ds:0xc002d228,ebx
c0012918:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012920:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012925:	7f 7f                	jg     c00129a6 <UnixFile::UnixFile(int)+0x1ae>
c0012927:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001292f:	83 ec 0c             	sub    esp,0xc
c0012932:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012936:	e8 e4 cb ff ff       	call   c000f51f <malloc>
c001293b:	83 c4 10             	add    esp,0x10
c001293e:	89 c3                	mov    ebx,eax
c0012940:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012944:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012949:	83 ec 08             	sub    esp,0x8
c001294c:	50                   	push   eax
c001294d:	53                   	push   ebx
c001294e:	e8 59 00 00 00       	call   c00129ac <ReservedFilename::ReservedFilename(int)>
c0012953:	83 c4 10             	add    esp,0x10
c0012956:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001295a:	89 1c 85 00 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e00],ebx
c0012961:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012969:	83 ec 0c             	sub    esp,0xc
c001296c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012970:	e8 aa cb ff ff       	call   c000f51f <malloc>
c0012975:	83 c4 10             	add    esp,0x10
c0012978:	89 c3                	mov    ebx,eax
c001297a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001297e:	05 20 ff ff 0f       	add    eax,0xfffff20
c0012983:	83 ec 08             	sub    esp,0x8
c0012986:	50                   	push   eax
c0012987:	53                   	push   ebx
c0012988:	e8 1f 00 00 00       	call   c00129ac <ReservedFilename::ReservedFilename(int)>
c001298d:	83 c4 10             	add    esp,0x10
c0012990:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012994:	89 1c 85 c0 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e40],ebx
c001299b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00129a0:	e9 7b ff ff ff       	jmp    c0012920 <UnixFile::UnixFile(int)+0x128>
c00129a5:	90                   	nop
c00129a6:	83 c4 28             	add    esp,0x28
c00129a9:	5b                   	pop    ebx
c00129aa:	c3                   	ret    
c00129ab:	90                   	nop

c00129ac <ReservedFilename::ReservedFilename(int)>:
c00129ac:	83 ec 0c             	sub    esp,0xc
c00129af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129b3:	83 ec 08             	sub    esp,0x8
c00129b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ba:	50                   	push   eax
c00129bb:	e8 38 fe ff ff       	call   c00127f8 <UnixFile::UnixFile(int)>
c00129c0:	83 c4 10             	add    esp,0x10
c00129c3:	ba 80 38 02 c0       	mov    edx,0xc0023880
c00129c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129cc:	89 10                	mov    DWORD PTR [eax],edx
c00129ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00129d6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129d9:	90                   	nop
c00129da:	83 c4 0c             	add    esp,0xc
c00129dd:	c3                   	ret    

c00129de <UnixFile::~UnixFile()>:
c00129de:	83 ec 1c             	sub    esp,0x1c
c00129e1:	ba 64 38 02 c0       	mov    edx,0xc0023864
c00129e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129ea:	89 10                	mov    DWORD PTR [eax],edx
c00129ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129f3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00129f8:	7f 76                	jg     c0012a70 <UnixFile::~UnixFile()+0x92>
c00129fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012a02:	83 ec 0c             	sub    esp,0xc
c0012a05:	68 38 d2 02 c0       	push   0xc002d238
c0012a0a:	e8 b3 eb 00 00       	call   c00215c2 <LinkedList<UnixFile>::getFirstElement()>
c0012a0f:	83 c4 10             	add    esp,0x10
c0012a12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a16:	83 ec 0c             	sub    esp,0xc
c0012a19:	68 38 d2 02 c0       	push   0xc002d238
c0012a1e:	e8 a7 eb 00 00       	call   c00215ca <LinkedList<UnixFile>::removeFirst()>
c0012a23:	83 c4 10             	add    esp,0x10
c0012a26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a2a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0012a2e:	74 43                	je     c0012a73 <UnixFile::~UnixFile()+0x95>
c0012a30:	83 ec 08             	sub    esp,0x8
c0012a33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012a37:	68 38 d2 02 c0       	push   0xc002d238
c0012a3c:	e8 ad ea 00 00       	call   c00214ee <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012a41:	83 c4 10             	add    esp,0x10
c0012a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a48:	8d 50 01             	lea    edx,[eax+0x1]
c0012a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a4f:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0012a54:	0f 94 c0             	sete   al
c0012a57:	0f b6 c0             	movzx  eax,al
c0012a5a:	85 c0                	test   eax,eax
c0012a5c:	74 a4                	je     c0012a02 <UnixFile::~UnixFile()+0x24>
c0012a5e:	83 ec 0c             	sub    esp,0xc
c0012a61:	68 18 38 02 c0       	push   0xc0023818
c0012a66:	e8 fb cd ff ff       	call   c000f866 <KePanic(char const*)>
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	eb 92                	jmp    c0012a02 <UnixFile::~UnixFile()+0x24>
c0012a70:	90                   	nop
c0012a71:	eb 01                	jmp    c0012a74 <UnixFile::~UnixFile()+0x96>
c0012a73:	90                   	nop
c0012a74:	90                   	nop
c0012a75:	83 c4 1c             	add    esp,0x1c
c0012a78:	c3                   	ret    
c0012a79:	90                   	nop

c0012a7a <UnixFile::~UnixFile()>:
c0012a7a:	83 ec 0c             	sub    esp,0xc
c0012a7d:	83 ec 0c             	sub    esp,0xc
c0012a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a84:	e8 55 ff ff ff       	call   c00129de <UnixFile::~UnixFile()>
c0012a89:	83 c4 10             	add    esp,0x10
c0012a8c:	83 ec 08             	sub    esp,0x8
c0012a8f:	6a 0c                	push   0xc
c0012a91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a95:	e8 0d a1 ff ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c0012a9a:	83 c4 10             	add    esp,0x10
c0012a9d:	83 c4 0c             	add    esp,0xc
c0012aa0:	c3                   	ret    
c0012aa1:	90                   	nop

c0012aa2 <ReservedFilename::~ReservedFilename()>:
c0012aa2:	83 ec 0c             	sub    esp,0xc
c0012aa5:	ba 80 38 02 c0       	mov    edx,0xc0023880
c0012aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aae:	89 10                	mov    DWORD PTR [eax],edx
c0012ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ab4:	83 ec 0c             	sub    esp,0xc
c0012ab7:	50                   	push   eax
c0012ab8:	e8 21 ff ff ff       	call   c00129de <UnixFile::~UnixFile()>
c0012abd:	83 c4 10             	add    esp,0x10
c0012ac0:	90                   	nop
c0012ac1:	83 c4 0c             	add    esp,0xc
c0012ac4:	c3                   	ret    
c0012ac5:	90                   	nop

c0012ac6 <ReservedFilename::~ReservedFilename()>:
c0012ac6:	83 ec 0c             	sub    esp,0xc
c0012ac9:	83 ec 0c             	sub    esp,0xc
c0012acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ad0:	e8 cd ff ff ff       	call   c0012aa2 <ReservedFilename::~ReservedFilename()>
c0012ad5:	83 c4 10             	add    esp,0x10
c0012ad8:	83 ec 08             	sub    esp,0x8
c0012adb:	6a 0c                	push   0xc
c0012add:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae1:	e8 c1 a0 ff ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c0012ae6:	83 c4 10             	add    esp,0x10
c0012ae9:	83 c4 0c             	add    esp,0xc
c0012aec:	c3                   	ret    

c0012aed <KeGetFileFromDescriptor(int)>:
c0012aed:	53                   	push   ebx
c0012aee:	83 ec 10             	sub    esp,0x10
c0012af1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012af5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0012afb:	53                   	push   ebx
c0012afc:	68 38 38 02 c0       	push   0xc0023838
c0012b01:	e8 5e 44 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012b06:	83 c4 10             	add    esp,0x10
c0012b09:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0012b0f:	7f 30                	jg     c0012b41 <KeGetFileFromDescriptor(int)+0x54>
c0012b11:	83 ec 0c             	sub    esp,0xc
c0012b14:	68 38 d2 02 c0       	push   0xc002d238
c0012b19:	e8 a4 ea 00 00       	call   c00215c2 <LinkedList<UnixFile>::getFirstElement()>
c0012b1e:	83 c4 10             	add    esp,0x10
c0012b21:	8d 50 ff             	lea    edx,[eax-0x1]
c0012b24:	83 fa fd             	cmp    edx,0xfffffffd
c0012b27:	76 04                	jbe    c0012b2d <KeGetFileFromDescriptor(int)+0x40>
c0012b29:	31 c0                	xor    eax,eax
c0012b2b:	eb 6e                	jmp    c0012b9b <KeGetFileFromDescriptor(int)+0xae>
c0012b2d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0012b30:	74 69                	je     c0012b9b <KeGetFileFromDescriptor(int)+0xae>
c0012b32:	52                   	push   edx
c0012b33:	52                   	push   edx
c0012b34:	50                   	push   eax
c0012b35:	68 38 d2 02 c0       	push   0xc002d238
c0012b3a:	e8 2d eb 00 00       	call   c002166c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0012b3f:	eb dd                	jmp    c0012b1e <KeGetFileFromDescriptor(int)+0x31>
c0012b41:	a1 2c d2 02 c0       	mov    eax,ds:0xc002d22c
c0012b46:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0012b4c:	74 4d                	je     c0012b9b <KeGetFileFromDescriptor(int)+0xae>
c0012b4e:	a1 30 d2 02 c0       	mov    eax,ds:0xc002d230
c0012b53:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0012b59:	74 40                	je     c0012b9b <KeGetFileFromDescriptor(int)+0xae>
c0012b5b:	a1 28 d2 02 c0       	mov    eax,ds:0xc002d228
c0012b60:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0012b66:	74 33                	je     c0012b9b <KeGetFileFromDescriptor(int)+0xae>
c0012b68:	a1 24 d2 02 c0       	mov    eax,ds:0xc002d224
c0012b6d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0012b73:	74 26                	je     c0012b9b <KeGetFileFromDescriptor(int)+0xae>
c0012b75:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0012b7b:	83 f8 08             	cmp    eax,0x8
c0012b7e:	77 09                	ja     c0012b89 <KeGetFileFromDescriptor(int)+0x9c>
c0012b80:	8b 04 85 00 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2e00]
c0012b87:	eb 12                	jmp    c0012b9b <KeGetFileFromDescriptor(int)+0xae>
c0012b89:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0012b8f:	83 fb 08             	cmp    ebx,0x8
c0012b92:	77 95                	ja     c0012b29 <KeGetFileFromDescriptor(int)+0x3c>
c0012b94:	8b 04 9d c0 d1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2e40]
c0012b9b:	83 c4 08             	add    esp,0x8
c0012b9e:	5b                   	pop    ebx
c0012b9f:	c3                   	ret    

c0012ba0 <__static_initialization_and_destruction_0(int, int)>:
c0012ba0:	83 ec 0c             	sub    esp,0xc
c0012ba3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0012ba8:	75 34                	jne    c0012bde <__static_initialization_and_destruction_0(int, int)+0x3e>
c0012baa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0012bb2:	75 2a                	jne    c0012bde <__static_initialization_and_destruction_0(int, int)+0x3e>
c0012bb4:	83 ec 0c             	sub    esp,0xc
c0012bb7:	68 38 d2 02 c0       	push   0xc002d238
c0012bbc:	e8 eb e8 00 00       	call   c00214ac <LinkedList<UnixFile>::LinkedList()>
c0012bc1:	83 c4 10             	add    esp,0x10
c0012bc4:	83 ec 04             	sub    esp,0x4
c0012bc7:	68 84 53 02 c0       	push   0xc0025384
c0012bcc:	68 38 d2 02 c0       	push   0xc002d238
c0012bd1:	68 aa 14 02 c0       	push   0xc00214aa
c0012bd6:	e8 7c 9f ff ff       	call   c000cb57 <__cxa_atexit>
c0012bdb:	83 c4 10             	add    esp,0x10
c0012bde:	90                   	nop
c0012bdf:	83 c4 0c             	add    esp,0xc
c0012be2:	c3                   	ret    

c0012be3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0012be3:	83 ec 0c             	sub    esp,0xc
c0012be6:	83 ec 08             	sub    esp,0x8
c0012be9:	68 ff ff 00 00       	push   0xffff
c0012bee:	6a 01                	push   0x1
c0012bf0:	e8 ab ff ff ff       	call   c0012ba0 <__static_initialization_and_destruction_0(int, int)>
c0012bf5:	83 c4 10             	add    esp,0x10
c0012bf8:	83 c4 0c             	add    esp,0xc
c0012bfb:	c3                   	ret    

c0012bfc <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0012bfc:	53                   	push   ebx
c0012bfd:	8b 15 28 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b28
c0012c03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012c0b:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0012c11:	89 d8                	mov    eax,ebx
c0012c13:	d1 e8                	shr    eax,1
c0012c15:	01 d0                	add    eax,edx
c0012c17:	80 e3 01             	and    bl,0x1
c0012c1a:	8a 10                	mov    dl,BYTE PTR [eax]
c0012c1c:	75 09                	jne    c0012c27 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0012c1e:	83 e2 f0             	and    edx,0xfffffff0
c0012c21:	09 ca                	or     edx,ecx
c0012c23:	88 10                	mov    BYTE PTR [eax],dl
c0012c25:	5b                   	pop    ebx
c0012c26:	c3                   	ret    
c0012c27:	83 e2 0f             	and    edx,0xf
c0012c2a:	0f b6 c9             	movzx  ecx,cl
c0012c2d:	c1 e1 04             	shl    ecx,0x4
c0012c30:	09 ca                	or     edx,ecx
c0012c32:	88 10                	mov    BYTE PTR [eax],dl
c0012c34:	5b                   	pop    ebx
c0012c35:	c3                   	ret    

c0012c36 <Virt::getPageState(unsigned long)>:
c0012c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c3a:	8b 0d 28 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025b28
c0012c40:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0012c46:	89 d0                	mov    eax,edx
c0012c48:	d1 e8                	shr    eax,1
c0012c4a:	80 e2 01             	and    dl,0x1
c0012c4d:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0012c50:	74 03                	je     c0012c55 <Virt::getPageState(unsigned long)+0x1f>
c0012c52:	c1 e8 04             	shr    eax,0x4
c0012c55:	83 e0 0f             	and    eax,0xf
c0012c58:	c3                   	ret    

c0012c59 <Virt::allocateKernelVirtualPages(int)>:
c0012c59:	55                   	push   ebp
c0012c5a:	31 ed                	xor    ebp,ebp
c0012c5c:	57                   	push   edi
c0012c5d:	31 ff                	xor    edi,edi
c0012c5f:	56                   	push   esi
c0012c60:	53                   	push   ebx
c0012c61:	31 db                	xor    ebx,ebx
c0012c63:	83 ec 0c             	sub    esp,0xc
c0012c66:	8b 35 24 5b 02 c0    	mov    esi,DWORD PTR ds:0xc0025b24
c0012c6c:	56                   	push   esi
c0012c6d:	e8 c4 ff ff ff       	call   c0012c36 <Virt::getPageState(unsigned long)>
c0012c72:	5a                   	pop    edx
c0012c73:	84 c0                	test   al,al
c0012c75:	75 41                	jne    c0012cb8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0012c77:	85 db                	test   ebx,ebx
c0012c79:	75 02                	jne    c0012c7d <Virt::allocateKernelVirtualPages(int)+0x24>
c0012c7b:	89 f5                	mov    ebp,esi
c0012c7d:	83 c3 01             	add    ebx,0x1
c0012c80:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012c84:	74 5f                	je     c0012ce5 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0012c86:	83 c6 01             	add    esi,0x1
c0012c89:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0012c8f:	76 34                	jbe    c0012cc5 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0012c91:	c7 05 24 5b 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025b24,0xc8000
c0012c9b:	f7 c7 01 00 00 00    	test   edi,0x1
c0012ca1:	75 2a                	jne    c0012ccd <Virt::allocateKernelVirtualPages(int)+0x74>
c0012ca3:	be 00 80 0c 00       	mov    esi,0xc8000
c0012ca8:	bf 01 00 00 00       	mov    edi,0x1
c0012cad:	56                   	push   esi
c0012cae:	e8 83 ff ff ff       	call   c0012c36 <Virt::getPageState(unsigned long)>
c0012cb3:	5a                   	pop    edx
c0012cb4:	84 c0                	test   al,al
c0012cb6:	74 bf                	je     c0012c77 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0012cb8:	31 db                	xor    ebx,ebx
c0012cba:	83 c6 01             	add    esi,0x1
c0012cbd:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0012cc3:	77 cc                	ja     c0012c91 <Virt::allocateKernelVirtualPages(int)+0x38>
c0012cc5:	89 35 24 5b 02 c0    	mov    DWORD PTR ds:0xc0025b24,esi
c0012ccb:	eb 9f                	jmp    c0012c6c <Virt::allocateKernelVirtualPages(int)+0x13>
c0012ccd:	83 ec 0c             	sub    esp,0xc
c0012cd0:	68 94 38 02 c0       	push   0xc0023894
c0012cd5:	e8 8c cb ff ff       	call   c000f866 <KePanic(char const*)>
c0012cda:	8b 35 24 5b 02 c0    	mov    esi,DWORD PTR ds:0xc0025b24
c0012ce0:	83 c4 10             	add    esp,0x10
c0012ce3:	eb 87                	jmp    c0012c6c <Virt::allocateKernelVirtualPages(int)+0x13>
c0012ce5:	89 2d 24 5b 02 c0    	mov    DWORD PTR ds:0xc0025b24,ebp
c0012ceb:	83 fb 01             	cmp    ebx,0x1
c0012cee:	74 6f                	je     c0012d5f <Virt::allocateKernelVirtualPages(int)+0x106>
c0012cf0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012cf4:	85 c9                	test   ecx,ecx
c0012cf6:	74 49                	je     c0012d41 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0012cf8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012cfc:	89 e8                	mov    eax,ebp
c0012cfe:	31 db                	xor    ebx,ebx
c0012d00:	8d 79 ff             	lea    edi,[ecx-0x1]
c0012d03:	eb 18                	jmp    c0012d1d <Virt::allocateKernelVirtualPages(int)+0xc4>
c0012d05:	6a 01                	push   0x1
c0012d07:	83 c3 01             	add    ebx,0x1
c0012d0a:	50                   	push   eax
c0012d0b:	e8 ec fe ff ff       	call   c0012bfc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012d10:	58                   	pop    eax
c0012d11:	5a                   	pop    edx
c0012d12:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012d16:	74 29                	je     c0012d41 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0012d18:	a1 24 5b 02 c0       	mov    eax,ds:0xc0025b24
c0012d1d:	8d 50 01             	lea    edx,[eax+0x1]
c0012d20:	85 db                	test   ebx,ebx
c0012d22:	89 15 24 5b 02 c0    	mov    DWORD PTR ds:0xc0025b24,edx
c0012d28:	74 24                	je     c0012d4e <Virt::allocateKernelVirtualPages(int)+0xf5>
c0012d2a:	39 df                	cmp    edi,ebx
c0012d2c:	75 d7                	jne    c0012d05 <Virt::allocateKernelVirtualPages(int)+0xac>
c0012d2e:	6a 03                	push   0x3
c0012d30:	83 c3 01             	add    ebx,0x1
c0012d33:	50                   	push   eax
c0012d34:	e8 c3 fe ff ff       	call   c0012bfc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012d39:	59                   	pop    ecx
c0012d3a:	5e                   	pop    esi
c0012d3b:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012d3f:	75 d7                	jne    c0012d18 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0012d41:	83 c4 0c             	add    esp,0xc
c0012d44:	89 e8                	mov    eax,ebp
c0012d46:	5b                   	pop    ebx
c0012d47:	c1 e0 0c             	shl    eax,0xc
c0012d4a:	5e                   	pop    esi
c0012d4b:	5f                   	pop    edi
c0012d4c:	5d                   	pop    ebp
c0012d4d:	c3                   	ret    
c0012d4e:	6a 02                	push   0x2
c0012d50:	bb 01 00 00 00       	mov    ebx,0x1
c0012d55:	50                   	push   eax
c0012d56:	e8 a1 fe ff ff       	call   c0012bfc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012d5b:	58                   	pop    eax
c0012d5c:	5a                   	pop    edx
c0012d5d:	eb b9                	jmp    c0012d18 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0012d5f:	6a 04                	push   0x4
c0012d61:	8d 45 01             	lea    eax,[ebp+0x1]
c0012d64:	55                   	push   ebp
c0012d65:	a3 24 5b 02 c0       	mov    ds:0xc0025b24,eax
c0012d6a:	e8 8d fe ff ff       	call   c0012bfc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012d6f:	5b                   	pop    ebx
c0012d70:	89 e8                	mov    eax,ebp
c0012d72:	5e                   	pop    esi
c0012d73:	c1 e0 0c             	shl    eax,0xc
c0012d76:	83 c4 0c             	add    esp,0xc
c0012d79:	5b                   	pop    ebx
c0012d7a:	5e                   	pop    esi
c0012d7b:	5f                   	pop    edi
c0012d7c:	5d                   	pop    ebp
c0012d7d:	c3                   	ret    

c0012d7e <Virt::freeSwapfilePage(unsigned long)>:
c0012d7e:	53                   	push   ebx
c0012d7f:	8b 15 4c d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d24c
c0012d85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d89:	b8 01 00 00 00       	mov    eax,0x1
c0012d8e:	89 cb                	mov    ebx,ecx
c0012d90:	d3 e0                	shl    eax,cl
c0012d92:	c1 eb 05             	shr    ebx,0x5
c0012d95:	f7 d0                	not    eax
c0012d97:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0012d9a:	21 c1                	and    ecx,eax
c0012d9c:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0012d9f:	5b                   	pop    ebx
c0012da0:	c3                   	ret    

c0012da1 <Virt::swapIDToSector(unsigned long)>:
c0012da1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012da5:	8b 15 2c 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b2c
c0012dab:	8b 0d 34 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025b34
c0012db1:	0f af c2             	imul   eax,edx
c0012db4:	01 c8                	add    eax,ecx
c0012db6:	c3                   	ret    

c0012db7 <Virt::allocateSwapfilePage()>:
c0012db7:	55                   	push   ebp
c0012db8:	31 d2                	xor    edx,edx
c0012dba:	57                   	push   edi
c0012dbb:	56                   	push   esi
c0012dbc:	53                   	push   ebx
c0012dbd:	83 ec 0c             	sub    esp,0xc
c0012dc0:	8b 0d 2c 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025b2c
c0012dc6:	a1 30 5b 02 c0       	mov    eax,ds:0xc0025b30
c0012dcb:	f7 f1                	div    ecx
c0012dcd:	39 0d 30 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b30,ecx
c0012dd3:	72 2f                	jb     c0012e04 <Virt::allocateSwapfilePage()+0x4d>
c0012dd5:	8b 35 4c d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d24c
c0012ddb:	8b 16                	mov    edx,DWORD PTR [esi]
c0012ddd:	f6 c2 01             	test   dl,0x1
c0012de0:	74 3e                	je     c0012e20 <Virt::allocateSwapfilePage()+0x69>
c0012de2:	31 c9                	xor    ecx,ecx
c0012de4:	bf 01 00 00 00       	mov    edi,0x1
c0012de9:	eb 12                	jmp    c0012dfd <Virt::allocateSwapfilePage()+0x46>
c0012deb:	89 fd                	mov    ebp,edi
c0012ded:	89 ca                	mov    edx,ecx
c0012def:	d3 e5                	shl    ebp,cl
c0012df1:	c1 ea 05             	shr    edx,0x5
c0012df4:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0012df7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012df9:	85 ea                	test   edx,ebp
c0012dfb:	74 2c                	je     c0012e29 <Virt::allocateSwapfilePage()+0x72>
c0012dfd:	83 c1 01             	add    ecx,0x1
c0012e00:	39 c8                	cmp    eax,ecx
c0012e02:	77 e7                	ja     c0012deb <Virt::allocateSwapfilePage()+0x34>
c0012e04:	83 ec 0c             	sub    esp,0xc
c0012e07:	68 17 3e 02 c0       	push   0xc0023e17
c0012e0c:	e8 55 ca ff ff       	call   c000f866 <KePanic(char const*)>
c0012e11:	83 c4 10             	add    esp,0x10
c0012e14:	31 c9                	xor    ecx,ecx
c0012e16:	83 c4 0c             	add    esp,0xc
c0012e19:	89 c8                	mov    eax,ecx
c0012e1b:	5b                   	pop    ebx
c0012e1c:	5e                   	pop    esi
c0012e1d:	5f                   	pop    edi
c0012e1e:	5d                   	pop    ebp
c0012e1f:	c3                   	ret    
c0012e20:	89 f3                	mov    ebx,esi
c0012e22:	bd 01 00 00 00       	mov    ebp,0x1
c0012e27:	31 c9                	xor    ecx,ecx
c0012e29:	09 ea                	or     edx,ebp
c0012e2b:	89 c8                	mov    eax,ecx
c0012e2d:	89 13                	mov    DWORD PTR [ebx],edx
c0012e2f:	83 c4 0c             	add    esp,0xc
c0012e32:	5b                   	pop    ebx
c0012e33:	5e                   	pop    esi
c0012e34:	5f                   	pop    edi
c0012e35:	5d                   	pop    ebp
c0012e36:	c3                   	ret    

c0012e37 <Virt::virtualMemorySetup()>:
c0012e37:	53                   	push   ebx
c0012e38:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012e3d:	6a 0f                	push   0xf
c0012e3f:	53                   	push   ebx
c0012e40:	83 c3 01             	add    ebx,0x1
c0012e43:	e8 b4 fd ff ff       	call   c0012bfc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012e48:	58                   	pop    eax
c0012e49:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012e4f:	5a                   	pop    edx
c0012e50:	75 eb                	jne    c0012e3d <Virt::virtualMemorySetup()+0x6>
c0012e52:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012e57:	6a 00                	push   0x0
c0012e59:	53                   	push   ebx
c0012e5a:	83 c3 01             	add    ebx,0x1
c0012e5d:	e8 9a fd ff ff       	call   c0012bfc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012e62:	59                   	pop    ecx
c0012e63:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012e69:	58                   	pop    eax
c0012e6a:	75 eb                	jne    c0012e57 <Virt::virtualMemorySetup()+0x20>
c0012e6c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0012e71:	6a 0f                	push   0xf
c0012e73:	53                   	push   ebx
c0012e74:	83 c3 01             	add    ebx,0x1
c0012e77:	e8 80 fd ff ff       	call   c0012bfc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012e7c:	58                   	pop    eax
c0012e7d:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012e83:	5a                   	pop    edx
c0012e84:	75 eb                	jne    c0012e71 <Virt::virtualMemorySetup()+0x3a>
c0012e86:	5b                   	pop    ebx
c0012e87:	c3                   	ret    

c0012e88 <Virt::setupPageSwapping(int)>:
c0012e88:	53                   	push   ebx
c0012e89:	83 ec 0c             	sub    esp,0xc
c0012e8c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e90:	a1 e8 aa 02 c0       	mov    eax,ds:0xc002aae8
c0012e95:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0012e9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e9d:	53                   	push   ebx
c0012e9e:	c1 e3 0b             	shl    ebx,0xb
c0012ea1:	68 2e 3e 02 c0       	push   0xc0023e2e
c0012ea6:	50                   	push   eax
c0012ea7:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0012eaa:	89 1d 30 5b 02 c0    	mov    DWORD PTR ds:0xc0025b30,ebx
c0012eb0:	c6 05 38 5b 02 c0 43 	mov    BYTE PTR ds:0xc0025b38,0x43
c0012eb7:	c1 eb 08             	shr    ebx,0x8
c0012eba:	a3 34 5b 02 c0       	mov    ds:0xc0025b34,eax
c0012ebf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ec2:	c7 05 2c 5b 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0025b2c,0x8
c0012ecc:	e8 4e c6 ff ff       	call   c000f51f <malloc>
c0012ed1:	83 c4 0c             	add    esp,0xc
c0012ed4:	89 c1                	mov    ecx,eax
c0012ed6:	a3 4c d2 02 c0       	mov    ds:0xc002d24c,eax
c0012edb:	31 d2                	xor    edx,edx
c0012edd:	a1 30 5b 02 c0       	mov    eax,ds:0xc0025b30
c0012ee2:	f7 35 2c 5b 02 c0    	div    DWORD PTR ds:0xc0025b2c
c0012ee8:	c1 e8 05             	shr    eax,0x5
c0012eeb:	50                   	push   eax
c0012eec:	6a 00                	push   0x0
c0012eee:	51                   	push   ecx
c0012eef:	e8 fc d5 fe ff       	call   c00004f0 <memset>
c0012ef4:	83 c4 18             	add    esp,0x18
c0012ef7:	5b                   	pop    ebx
c0012ef8:	c3                   	ret    
c0012ef9:	90                   	nop

c0012efa <VAS::setCPUSpecific(unsigned long)>:
c0012efa:	c3                   	ret    
c0012efb:	90                   	nop

c0012efc <VAS::VAS(VAS*)>:
c0012efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012f07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f0b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012f12:	90                   	nop
c0012f13:	c3                   	ret    

c0012f14 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f18:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0012f1d:	89 c2                	mov    edx,eax
c0012f1f:	c1 e8 0a             	shr    eax,0xa
c0012f22:	c1 ea 16             	shr    edx,0x16
c0012f25:	83 f9 01             	cmp    ecx,0x1
c0012f28:	19 c9                	sbb    ecx,ecx
c0012f2a:	c1 e2 0c             	shl    edx,0xc
c0012f2d:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012f33:	25 fc 0f 00 00       	and    eax,0xffc
c0012f38:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012f3f:	01 d0                	add    eax,edx
c0012f41:	c3                   	ret    

c0012f42 <VAS::getPageTableEntry(unsigned long)>:
c0012f42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012f46:	89 ca                	mov    edx,ecx
c0012f48:	c1 e9 0a             	shr    ecx,0xa
c0012f4b:	c1 ea 16             	shr    edx,0x16
c0012f4e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012f54:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012f5a:	c1 e0 0c             	shl    eax,0xc
c0012f5d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012f60:	c3                   	ret    

c0012f61 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012f61:	55                   	push   ebp
c0012f62:	57                   	push   edi
c0012f63:	bf 01 00 00 00       	mov    edi,0x1
c0012f68:	56                   	push   esi
c0012f69:	53                   	push   ebx
c0012f6a:	83 ec 1c             	sub    esp,0x1c
c0012f6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012f71:	c1 ee 0c             	shr    esi,0xc
c0012f74:	eb 48                	jmp    c0012fbe <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0012f76:	83 ec 08             	sub    esp,0x8
c0012f79:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c0012f7e:	55                   	push   ebp
c0012f7f:	50                   	push   eax
c0012f80:	e8 bd ff ff ff       	call   c0012f42 <VAS::getPageTableEntry(unsigned long)>
c0012f85:	83 c4 10             	add    esp,0x10
c0012f88:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f8a:	f6 c6 04             	test   dh,0x4
c0012f8d:	75 70                	jne    c0012fff <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012f8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012f95:	83 fb 04             	cmp    ebx,0x4
c0012f98:	0f 84 8a 00 00 00    	je     c0013028 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012f9e:	83 fb 02             	cmp    ebx,0x2
c0012fa1:	0f 84 9a 00 00 00    	je     c0013041 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0012fa7:	83 fb 03             	cmp    ebx,0x3
c0012faa:	0f 84 be 00 00 00    	je     c001306e <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0012fb0:	83 fb 01             	cmp    ebx,0x1
c0012fb3:	0f 84 a2 00 00 00    	je     c001305b <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012fb9:	83 c6 01             	add    esi,0x1
c0012fbc:	31 ff                	xor    edi,edi
c0012fbe:	56                   	push   esi
c0012fbf:	89 f5                	mov    ebp,esi
c0012fc1:	e8 70 fc ff ff       	call   c0012c36 <Virt::getPageState(unsigned long)>
c0012fc6:	c1 e5 0c             	shl    ebp,0xc
c0012fc9:	0f b6 d8             	movzx  ebx,al
c0012fcc:	5a                   	pop    edx
c0012fcd:	85 db                	test   ebx,ebx
c0012fcf:	75 a5                	jne    c0012f76 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0012fd1:	83 ec 0c             	sub    esp,0xc
c0012fd4:	68 45 3e 02 c0       	push   0xc0023e45
c0012fd9:	e8 88 c8 ff ff       	call   c000f866 <KePanic(char const*)>
c0012fde:	5a                   	pop    edx
c0012fdf:	59                   	pop    ecx
c0012fe0:	55                   	push   ebp
c0012fe1:	8b 2d 50 d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d250
c0012fe7:	55                   	push   ebp
c0012fe8:	e8 55 ff ff ff       	call   c0012f42 <VAS::getPageTableEntry(unsigned long)>
c0012fed:	83 c4 10             	add    esp,0x10
c0012ff0:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ff2:	f6 c6 04             	test   dh,0x4
c0012ff5:	75 08                	jne    c0012fff <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012ff7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012ffd:	eb ba                	jmp    c0012fb9 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012fff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013003:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013009:	83 ec 0c             	sub    esp,0xc
c001300c:	52                   	push   edx
c001300d:	e8 df c9 ff ff       	call   c000f9f1 <Phys::freePage(unsigned long)>
c0013012:	83 c4 10             	add    esp,0x10
c0013015:	83 fb 04             	cmp    ebx,0x4
c0013018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001301c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013022:	0f 85 76 ff ff ff    	jne    c0012f9e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0013028:	83 e7 01             	and    edi,0x1
c001302b:	75 46                	jne    c0013073 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001302d:	c7 44 24 30 b4 38 02 c0 	mov    DWORD PTR [esp+0x30],0xc00238b4
c0013035:	83 c4 1c             	add    esp,0x1c
c0013038:	5b                   	pop    ebx
c0013039:	5e                   	pop    esi
c001303a:	5f                   	pop    edi
c001303b:	5d                   	pop    ebp
c001303c:	e9 25 c8 ff ff       	jmp    c000f866 <KePanic(char const*)>
c0013041:	83 e7 01             	and    edi,0x1
c0013044:	75 15                	jne    c001305b <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013046:	83 ec 0c             	sub    esp,0xc
c0013049:	68 61 3e 02 c0       	push   0xc0023e61
c001304e:	e8 13 c8 ff ff       	call   c000f866 <KePanic(char const*)>
c0013053:	83 c4 10             	add    esp,0x10
c0013056:	e9 5e ff ff ff       	jmp    c0012fb9 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001305b:	83 ec 08             	sub    esp,0x8
c001305e:	6a 00                	push   0x0
c0013060:	56                   	push   esi
c0013061:	e8 96 fb ff ff       	call   c0012bfc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013066:	83 c4 10             	add    esp,0x10
c0013069:	e9 4b ff ff ff       	jmp    c0012fb9 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001306e:	83 e7 01             	and    edi,0x1
c0013071:	75 16                	jne    c0013089 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013073:	83 ec 08             	sub    esp,0x8
c0013076:	6a 00                	push   0x0
c0013078:	56                   	push   esi
c0013079:	e8 7e fb ff ff       	call   c0012bfc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001307e:	83 c4 10             	add    esp,0x10
c0013081:	83 c4 1c             	add    esp,0x1c
c0013084:	5b                   	pop    ebx
c0013085:	5e                   	pop    esi
c0013086:	5f                   	pop    edi
c0013087:	5d                   	pop    ebp
c0013088:	c3                   	ret    
c0013089:	c7 44 24 30 7d 3e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023e7d
c0013091:	83 c4 1c             	add    esp,0x1c
c0013094:	5b                   	pop    ebx
c0013095:	5e                   	pop    esi
c0013096:	5f                   	pop    edi
c0013097:	5d                   	pop    ebp
c0013098:	e9 c9 c7 ff ff       	jmp    c000f866 <KePanic(char const*)>
c001309d:	90                   	nop

c001309e <VAS::freeAllocatedPages(unsigned long)>:
c001309e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130a6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00130aa:	74 09                	je     c00130b5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00130ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130b0:	e9 ac fe ff ff       	jmp    c0012f61 <Virt::freeKernelVirtualPages(unsigned long)>
c00130b5:	c7 44 24 04 d8 38 02 c0 	mov    DWORD PTR [esp+0x4],0xc00238d8
c00130bd:	e9 a2 3e ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c00130c2 <VAS::virtualToPhysical(unsigned long)>:
c00130c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00130c6:	50                   	push   eax
c00130c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130cb:	52                   	push   edx
c00130cc:	e8 71 fe ff ff       	call   c0012f42 <VAS::getPageTableEntry(unsigned long)>
c00130d1:	59                   	pop    ecx
c00130d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00130d4:	5a                   	pop    edx
c00130d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00130da:	c3                   	ret    
c00130db:	90                   	nop

c00130dc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00130dc:	55                   	push   ebp
c00130dd:	57                   	push   edi
c00130de:	56                   	push   esi
c00130df:	53                   	push   ebx
c00130e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00130e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00130e8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130ec:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00130f0:	85 db                	test   ebx,ebx
c00130f2:	7e 24                	jle    c0013118 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00130f4:	c1 e3 0c             	shl    ebx,0xc
c00130f7:	01 f3                	add    ebx,esi
c00130f9:	56                   	push   esi
c00130fa:	81 c6 00 10 00 00    	add    esi,0x1000
c0013100:	55                   	push   ebp
c0013101:	e8 3c fe ff ff       	call   c0012f42 <VAS::getPageTableEntry(unsigned long)>
c0013106:	5a                   	pop    edx
c0013107:	59                   	pop    ecx
c0013108:	8b 08                	mov    ecx,DWORD PTR [eax]
c001310a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001310e:	21 f9                	and    ecx,edi
c0013110:	09 d1                	or     ecx,edx
c0013112:	39 f3                	cmp    ebx,esi
c0013114:	89 08                	mov    DWORD PTR [eax],ecx
c0013116:	75 e1                	jne    c00130f9 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0013118:	5b                   	pop    ebx
c0013119:	5e                   	pop    esi
c001311a:	5f                   	pop    edi
c001311b:	5d                   	pop    ebp
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <VAS::VAS()>:
c001311e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013122:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013129:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001312d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013138:	a3 50 d2 02 c0       	mov    ds:0xc002d250,eax
c001313d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013141:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013145:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013149:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001314c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013150:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013157:	ba 7d 60 02 c0       	mov    edx,0xc002607d
c001315c:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0013161:	29 c2                	sub    edx,eax
c0013163:	89 d0                	mov    eax,edx
c0013165:	05 ff 0f 00 00       	add    eax,0xfff
c001316a:	c1 e8 0c             	shr    eax,0xc
c001316d:	89 c2                	mov    edx,eax
c001316f:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0013174:	6a 04                	push   0x4
c0013176:	6a ff                	push   0xffffffff
c0013178:	52                   	push   edx
c0013179:	50                   	push   eax
c001317a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001317e:	e8 59 ff ff ff       	call   c00130dc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013183:	83 c4 14             	add    esp,0x14
c0013186:	90                   	nop
c0013187:	c3                   	ret    

c0013188 <VAS::setToWriteCombining(unsigned long, int)>:
c0013188:	a1 e4 da 02 c0       	mov    eax,ds:0xc002dae4
c001318d:	50                   	push   eax
c001318e:	6a ff                	push   0xffffffff
c0013190:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013194:	52                   	push   edx
c0013195:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013199:	51                   	push   ecx
c001319a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001319e:	50                   	push   eax
c001319f:	e8 38 ff ff ff       	call   c00130dc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00131a4:	83 c4 14             	add    esp,0x14
c00131a7:	c3                   	ret    

c00131a8 <VAS::mapOtherVASIn(bool, VAS*)>:
c00131a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00131ac:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00131af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00131b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00131bb:	83 f8 01             	cmp    eax,0x1
c00131be:	19 c0                	sbb    eax,eax
c00131c0:	83 ca 03             	or     edx,0x3
c00131c3:	83 e0 fc             	and    eax,0xfffffffc
c00131c6:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00131cd:	0f 20 d8             	mov    eax,cr3
c00131d0:	0f 22 d8             	mov    cr3,eax
c00131d3:	c3                   	ret    

c00131d4 <VAS::~VAS()>:
c00131d4:	83 ec 2c             	sub    esp,0x2c
c00131d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00131df:	fa                   	cli    
c00131e0:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00131e5:	83 c0 01             	add    eax,0x1
c00131e8:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c00131ed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00131f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00131f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131f7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00131fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013201:	6a 01                	push   0x1
c0013203:	50                   	push   eax
c0013204:	e8 9f ff ff ff       	call   c00131a8 <VAS::mapOtherVASIn(bool, VAS*)>
c0013209:	83 c4 0c             	add    esp,0xc
c001320c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013214:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001321c:	0f 8f d8 00 00 00    	jg     c00132fa <VAS::~VAS()+0x126>
c0013222:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013226:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013229:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001322d:	c1 e2 02             	shl    edx,0x2
c0013230:	01 d0                	add    eax,edx
c0013232:	8b 00                	mov    eax,DWORD PTR [eax]
c0013234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001323c:	83 e0 01             	and    eax,0x1
c001323f:	0f 84 ab 00 00 00    	je     c00132f0 <VAS::~VAS()+0x11c>
c0013245:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001324d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013255:	7f 74                	jg     c00132cb <VAS::~VAS()+0xf7>
c0013257:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001325b:	c1 e0 0a             	shl    eax,0xa
c001325e:	89 c2                	mov    edx,eax
c0013260:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013264:	01 d0                	add    eax,edx
c0013266:	c1 e0 0c             	shl    eax,0xc
c0013269:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001326d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013272:	8b 00                	mov    eax,DWORD PTR [eax]
c0013274:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013277:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001327d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013281:	6a 01                	push   0x1
c0013283:	50                   	push   eax
c0013284:	e8 8b fc ff ff       	call   c0012f14 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013289:	83 c4 0c             	add    esp,0xc
c001328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013290:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013294:	8b 00                	mov    eax,DWORD PTR [eax]
c0013296:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001329a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001329e:	25 01 04 00 00       	and    eax,0x401
c00132a3:	3d 01 04 00 00       	cmp    eax,0x401
c00132a8:	75 1a                	jne    c00132c4 <VAS::~VAS()+0xf0>
c00132aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00132b3:	83 ec 0c             	sub    esp,0xc
c00132b6:	50                   	push   eax
c00132b7:	e8 35 c7 ff ff       	call   c000f9f1 <Phys::freePage(unsigned long)>
c00132bc:	83 c4 10             	add    esp,0x10
c00132bf:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00132c4:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00132c9:	eb 82                	jmp    c001324d <VAS::~VAS()+0x79>
c00132cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132cf:	25 00 04 00 00       	and    eax,0x400
c00132d4:	74 1a                	je     c00132f0 <VAS::~VAS()+0x11c>
c00132d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00132df:	83 ec 0c             	sub    esp,0xc
c00132e2:	50                   	push   eax
c00132e3:	e8 09 c7 ff ff       	call   c000f9f1 <Phys::freePage(unsigned long)>
c00132e8:	83 c4 10             	add    esp,0x10
c00132eb:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00132f0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00132f5:	e9 1a ff ff ff       	jmp    c0013214 <VAS::~VAS()+0x40>
c00132fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132fe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013301:	83 ec 0c             	sub    esp,0xc
c0013304:	50                   	push   eax
c0013305:	e8 57 fc ff ff       	call   c0012f61 <Virt::freeKernelVirtualPages(unsigned long)>
c001330a:	83 c4 10             	add    esp,0x10
c001330d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013311:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013314:	83 ec 0c             	sub    esp,0xc
c0013317:	50                   	push   eax
c0013318:	e8 d4 c6 ff ff       	call   c000f9f1 <Phys::freePage(unsigned long)>
c001331d:	83 c4 10             	add    esp,0x10
c0013320:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013325:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c001332d:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013332:	85 c0                	test   eax,eax
c0013334:	75 01                	jne    c0013337 <VAS::~VAS()+0x163>
c0013336:	fb                   	sti    
c0013337:	90                   	nop
c0013338:	83 c4 2c             	add    esp,0x2c
c001333b:	c3                   	ret    

c001333c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001333c:	55                   	push   ebp
c001333d:	57                   	push   edi
c001333e:	56                   	push   esi
c001333f:	53                   	push   ebx
c0013340:	83 ec 1c             	sub    esp,0x1c
c0013343:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013347:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001334b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013351:	77 08                	ja     c001335b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013353:	0f 20 d8             	mov    eax,cr3
c0013356:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013359:	75 49                	jne    c00133a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c001335b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001335f:	09 d8                	or     eax,ebx
c0013361:	a9 ff 0f 00 00       	test   eax,0xfff
c0013366:	75 59                	jne    c00133c1 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013368:	89 de                	mov    esi,ebx
c001336a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001336d:	c1 ee 16             	shr    esi,0x16
c0013370:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013377:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001337b:	74 56                	je     c00133d3 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c001337d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013381:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013385:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001338b:	c1 eb 0a             	shr    ebx,0xa
c001338e:	c1 e6 0c             	shl    esi,0xc
c0013391:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013397:	09 d0                	or     eax,edx
c0013399:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001339c:	83 c4 1c             	add    esp,0x1c
c001339f:	5b                   	pop    ebx
c00133a0:	5e                   	pop    esi
c00133a1:	5f                   	pop    edi
c00133a2:	5d                   	pop    ebp
c00133a3:	c3                   	ret    
c00133a4:	83 ec 0c             	sub    esp,0xc
c00133a7:	68 fc 38 02 c0       	push   0xc00238fc
c00133ac:	e8 b3 3b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00133b1:	83 c4 10             	add    esp,0x10
c00133b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133b8:	09 d8                	or     eax,ebx
c00133ba:	a9 ff 0f 00 00       	test   eax,0xfff
c00133bf:	74 a7                	je     c0013368 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00133c1:	83 ec 0c             	sub    esp,0xc
c00133c4:	68 64 39 02 c0       	push   0xc0023964
c00133c9:	e8 98 c4 ff ff       	call   c000f866 <KePanic(char const*)>
c00133ce:	83 c4 10             	add    esp,0x10
c00133d1:	eb 95                	jmp    c0013368 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00133d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00133d7:	e8 7e c6 ff ff       	call   c000fa5a <Phys::allocatePage()>
c00133dc:	83 ec 0c             	sub    esp,0xc
c00133df:	89 c5                	mov    ebp,eax
c00133e1:	8b 0d 50 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d250
c00133e7:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00133eb:	6a 01                	push   0x1
c00133ed:	e8 67 f8 ff ff       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c00133f2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00133f9:	6a 01                	push   0x1
c00133fb:	50                   	push   eax
c00133fc:	55                   	push   ebp
c00133fd:	81 cd 07 04 00 00    	or     ebp,0x407
c0013403:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013407:	51                   	push   ecx
c0013408:	e8 19 01 00 00       	call   c0013526 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001340d:	83 c4 1c             	add    esp,0x1c
c0013410:	68 00 10 00 00       	push   0x1000
c0013415:	6a 00                	push   0x0
c0013417:	50                   	push   eax
c0013418:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001341c:	e8 cf d0 fe ff       	call   c00004f0 <memset>
c0013421:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013425:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013428:	e8 34 fb ff ff       	call   c0012f61 <Virt::freeKernelVirtualPages(unsigned long)>
c001342d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013431:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013434:	83 c4 10             	add    esp,0x10
c0013437:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001343a:	e9 3e ff ff ff       	jmp    c001337d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c001343f:	90                   	nop

c0013440 <VAS::allocatePages(int, int)>:
c0013440:	55                   	push   ebp
c0013441:	57                   	push   edi
c0013442:	56                   	push   esi
c0013443:	53                   	push   ebx
c0013444:	83 ec 1c             	sub    esp,0x1c
c0013447:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001344b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001344f:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013453:	75 71                	jne    c00134c6 <VAS::allocatePages(int, int)+0x86>
c0013455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013458:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001345c:	85 c0                	test   eax,eax
c001345e:	74 4d                	je     c00134ad <VAS::allocatePages(int, int)+0x6d>
c0013460:	89 dd                	mov    ebp,ebx
c0013462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013466:	c1 e5 0c             	shl    ebp,0xc
c0013469:	01 c5                	add    ebp,eax
c001346b:	85 db                	test   ebx,ebx
c001346d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013470:	7e 29                	jle    c001349b <VAS::allocatePages(int, int)+0x5b>
c0013472:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013476:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001347a:	81 cf 00 04 00 00    	or     edi,0x400
c0013480:	e8 d5 c5 ff ff       	call   c000fa5a <Phys::allocatePage()>
c0013485:	57                   	push   edi
c0013486:	53                   	push   ebx
c0013487:	81 c3 00 10 00 00    	add    ebx,0x1000
c001348d:	50                   	push   eax
c001348e:	56                   	push   esi
c001348f:	e8 a8 fe ff ff       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013494:	83 c4 10             	add    esp,0x10
c0013497:	39 dd                	cmp    ebp,ebx
c0013499:	75 e5                	jne    c0013480 <VAS::allocatePages(int, int)+0x40>
c001349b:	0f 20 d8             	mov    eax,cr3
c001349e:	0f 22 d8             	mov    cr3,eax
c00134a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134a5:	83 c4 1c             	add    esp,0x1c
c00134a8:	5b                   	pop    ebx
c00134a9:	5e                   	pop    esi
c00134aa:	5f                   	pop    edi
c00134ab:	5d                   	pop    ebp
c00134ac:	c3                   	ret    
c00134ad:	83 ec 0c             	sub    esp,0xc
c00134b0:	68 88 39 02 c0       	push   0xc0023988
c00134b5:	e8 ac c3 ff ff       	call   c000f866 <KePanic(char const*)>
c00134ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00134bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134c1:	83 c4 10             	add    esp,0x10
c00134c4:	eb 9a                	jmp    c0013460 <VAS::allocatePages(int, int)+0x20>
c00134c6:	83 ec 0c             	sub    esp,0xc
c00134c9:	53                   	push   ebx
c00134ca:	e8 8a f7 ff ff       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c00134cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134d3:	83 c4 10             	add    esp,0x10
c00134d6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00134db:	77 37                	ja     c0013514 <VAS::allocatePages(int, int)+0xd4>
c00134dd:	85 db                	test   ebx,ebx
c00134df:	7e ba                	jle    c001349b <VAS::allocatePages(int, int)+0x5b>
c00134e1:	c1 e3 0c             	shl    ebx,0xc
c00134e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134e8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00134ec:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00134ef:	81 cf 00 04 00 00    	or     edi,0x400
c00134f5:	89 c3                	mov    ebx,eax
c00134f7:	e8 5e c5 ff ff       	call   c000fa5a <Phys::allocatePage()>
c00134fc:	57                   	push   edi
c00134fd:	53                   	push   ebx
c00134fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013504:	50                   	push   eax
c0013505:	56                   	push   esi
c0013506:	e8 31 fe ff ff       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c001350b:	83 c4 10             	add    esp,0x10
c001350e:	39 dd                	cmp    ebp,ebx
c0013510:	75 e5                	jne    c00134f7 <VAS::allocatePages(int, int)+0xb7>
c0013512:	eb 87                	jmp    c001349b <VAS::allocatePages(int, int)+0x5b>
c0013514:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013518:	a1 e8 da 02 c0       	mov    eax,ds:0xc002dae8
c001351d:	09 c2                	or     edx,eax
c001351f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013523:	eb b8                	jmp    c00134dd <VAS::allocatePages(int, int)+0x9d>
c0013525:	90                   	nop

c0013526 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013526:	55                   	push   ebp
c0013527:	57                   	push   edi
c0013528:	56                   	push   esi
c0013529:	53                   	push   ebx
c001352a:	83 ec 0c             	sub    esp,0xc
c001352d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013531:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013535:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013539:	85 db                	test   ebx,ebx
c001353b:	7e 2f                	jle    c001356c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c001353d:	c1 e3 0c             	shl    ebx,0xc
c0013540:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013544:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013548:	01 d3                	add    ebx,edx
c001354a:	55                   	push   ebp
c001354b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001354f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013553:	29 c2                	sub    edx,eax
c0013555:	01 f2                	add    edx,esi
c0013557:	52                   	push   edx
c0013558:	56                   	push   esi
c0013559:	81 c6 00 10 00 00    	add    esi,0x1000
c001355f:	57                   	push   edi
c0013560:	e8 d7 fd ff ff       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013565:	83 c4 10             	add    esp,0x10
c0013568:	39 de                	cmp    esi,ebx
c001356a:	75 de                	jne    c001354a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c001356c:	0f 20 d8             	mov    eax,cr3
c001356f:	0f 22 d8             	mov    cr3,eax
c0013572:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013576:	83 c4 0c             	add    esp,0xc
c0013579:	5b                   	pop    ebx
c001357a:	5e                   	pop    esi
c001357b:	5f                   	pop    edi
c001357c:	5d                   	pop    ebp
c001357d:	c3                   	ret    

c001357e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001357e:	55                   	push   ebp
c001357f:	57                   	push   edi
c0013580:	56                   	push   esi
c0013581:	53                   	push   ebx
c0013582:	83 ec 1c             	sub    esp,0x1c
c0013585:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013589:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001358d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013591:	09 f8                	or     eax,edi
c0013593:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013597:	a9 ff 0f 00 00       	test   eax,0xfff
c001359c:	75 4f                	jne    c00135ed <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c001359e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00135a2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00135a5:	c1 eb 16             	shr    ebx,0x16
c00135a8:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c00135af:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c00135b3:	74 52                	je     c0013607 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c00135b5:	0f b6 f2             	movzx  esi,dl
c00135b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00135bc:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00135c0:	c1 e8 0a             	shr    eax,0xa
c00135c3:	83 fe 01             	cmp    esi,0x1
c00135c6:	19 d2                	sbb    edx,edx
c00135c8:	c1 e3 0c             	shl    ebx,0xc
c00135cb:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00135d1:	25 fc 0f 00 00       	and    eax,0xffc
c00135d6:	01 d8                	add    eax,ebx
c00135d8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00135dc:	09 d9                	or     ecx,ebx
c00135de:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00135e5:	83 c4 1c             	add    esp,0x1c
c00135e8:	5b                   	pop    ebx
c00135e9:	5e                   	pop    esi
c00135ea:	5f                   	pop    edi
c00135eb:	5d                   	pop    ebp
c00135ec:	c3                   	ret    
c00135ed:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00135f1:	83 ec 0c             	sub    esp,0xc
c00135f4:	68 b4 39 02 c0       	push   0xc00239b4
c00135f9:	e8 68 c2 ff ff       	call   c000f866 <KePanic(char const*)>
c00135fe:	83 c4 10             	add    esp,0x10
c0013601:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013605:	eb 97                	jmp    c001359e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001360b:	e8 4a c4 ff ff       	call   c000fa5a <Phys::allocatePage()>
c0013610:	83 ec 0c             	sub    esp,0xc
c0013613:	89 c5                	mov    ebp,eax
c0013615:	8b 0d 50 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d250
c001361b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001361f:	6a 01                	push   0x1
c0013621:	e8 33 f6 ff ff       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c0013626:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001362d:	6a 01                	push   0x1
c001362f:	50                   	push   eax
c0013630:	55                   	push   ebp
c0013631:	81 cd 07 04 00 00    	or     ebp,0x407
c0013637:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001363b:	51                   	push   ecx
c001363c:	e8 e5 fe ff ff       	call   c0013526 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013641:	83 c4 1c             	add    esp,0x1c
c0013644:	68 00 10 00 00       	push   0x1000
c0013649:	6a 00                	push   0x0
c001364b:	50                   	push   eax
c001364c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013650:	e8 9b ce fe ff       	call   c00004f0 <memset>
c0013655:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013659:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001365c:	e8 00 f9 ff ff       	call   c0012f61 <Virt::freeKernelVirtualPages(unsigned long)>
c0013661:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013664:	83 c4 10             	add    esp,0x10
c0013667:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c001366a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001366e:	e9 42 ff ff ff       	jmp    c00135b5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013673:	90                   	nop

c0013674 <VAS::VAS(bool)>:
c0013674:	53                   	push   ebx
c0013675:	83 ec 28             	sub    esp,0x28
c0013678:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001367c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013680:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013684:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001368b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001368f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013696:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001369a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001369e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00136a1:	e8 b4 c3 ff ff       	call   c000fa5a <Phys::allocatePage()>
c00136a6:	89 c2                	mov    edx,eax
c00136a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136ac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00136af:	8b 1d 50 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d250
c00136b5:	83 ec 0c             	sub    esp,0xc
c00136b8:	6a 01                	push   0x1
c00136ba:	e8 9a f5 ff ff       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c00136bf:	83 c4 10             	add    esp,0x10
c00136c2:	89 c2                	mov    edx,eax
c00136c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136c8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00136cb:	83 ec 0c             	sub    esp,0xc
c00136ce:	6a 03                	push   0x3
c00136d0:	6a 01                	push   0x1
c00136d2:	52                   	push   edx
c00136d3:	50                   	push   eax
c00136d4:	53                   	push   ebx
c00136d5:	e8 4c fe ff ff       	call   c0013526 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00136da:	83 c4 20             	add    esp,0x20
c00136dd:	89 c2                	mov    edx,eax
c00136df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136e3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00136e6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00136ee:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00136f6:	7f 1d                	jg     c0013715 <VAS::VAS(bool)+0xa1>
c00136f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00136ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013703:	c1 e2 02             	shl    edx,0x2
c0013706:	01 d0                	add    eax,edx
c0013708:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001370e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013713:	eb d9                	jmp    c00136ee <VAS::VAS(bool)+0x7a>
c0013715:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001371d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013725:	7f 59                	jg     c0013780 <VAS::VAS(bool)+0x10c>
c0013727:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001372b:	2d 00 02 00 00       	sub    eax,0x200
c0013730:	c1 e0 0c             	shl    eax,0xc
c0013733:	89 c2                	mov    edx,eax
c0013735:	a1 e8 da 02 c0       	mov    eax,ds:0xc002dae8
c001373a:	89 d1                	mov    ecx,edx
c001373c:	09 c1                	or     ecx,eax
c001373e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013742:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013745:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013749:	c1 e2 02             	shl    edx,0x2
c001374c:	01 d0                	add    eax,edx
c001374e:	83 c9 05             	or     ecx,0x5
c0013751:	89 ca                	mov    edx,ecx
c0013753:	89 10                	mov    DWORD PTR [eax],edx
c0013755:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013759:	2d 40 03 00 00       	sub    eax,0x340
c001375e:	83 f8 7f             	cmp    eax,0x7f
c0013761:	77 16                	ja     c0013779 <VAS::VAS(bool)+0x105>
c0013763:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013767:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001376a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001376e:	c1 e2 02             	shl    edx,0x2
c0013771:	01 d0                	add    eax,edx
c0013773:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013779:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001377e:	eb 9d                	jmp    c001371d <VAS::VAS(bool)+0xa9>
c0013780:	8b 15 e8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dae8
c0013786:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001378a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001378d:	05 20 0c 00 00       	add    eax,0xc20
c0013792:	81 ca 03 40 00 00    	or     edx,0x4003
c0013798:	89 10                	mov    DWORD PTR [eax],edx
c001379a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001379e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00137a1:	a1 e8 da 02 c0       	mov    eax,ds:0xc002dae8
c00137a6:	09 c2                	or     edx,eax
c00137a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00137af:	05 fc 0f 00 00       	add    eax,0xffc
c00137b4:	83 ca 03             	or     edx,0x3
c00137b7:	89 10                	mov    DWORD PTR [eax],edx
c00137b9:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c00137be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00137c4:	83 ec 0c             	sub    esp,0xc
c00137c7:	50                   	push   eax
c00137c8:	e8 41 5d ff ff       	call   c000950e <Device::getName()>
c00137cd:	83 c4 10             	add    esp,0x10
c00137d0:	83 ec 08             	sub    esp,0x8
c00137d3:	68 97 3e 02 c0       	push   0xc0023e97
c00137d8:	50                   	push   eax
c00137d9:	e8 72 cf fe ff       	call   c0000750 <strcmp>
c00137de:	83 c4 10             	add    esp,0x10
c00137e1:	85 c0                	test   eax,eax
c00137e3:	0f 94 c0             	sete   al
c00137e6:	0f b6 c0             	movzx  eax,al
c00137e9:	85 c0                	test   eax,eax
c00137eb:	74 68                	je     c0013855 <VAS::VAS(bool)+0x1e1>
c00137ed:	fa                   	cli    
c00137ee:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c00137f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00137f9:	05 68 09 00 00       	add    eax,0x968
c00137fe:	83 ec 0c             	sub    esp,0xc
c0013801:	50                   	push   eax
c0013802:	e8 0b b0 ff ff       	call   c000e812 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013807:	83 c4 10             	add    esp,0x10
c001380a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001380f:	89 c3                	mov    ebx,eax
c0013811:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c0013816:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001381c:	05 68 09 00 00       	add    eax,0x968
c0013821:	83 ec 0c             	sub    esp,0xc
c0013824:	50                   	push   eax
c0013825:	e8 e8 af ff ff       	call   c000e812 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001382a:	83 c4 10             	add    esp,0x10
c001382d:	83 ec 08             	sub    esp,0x8
c0013830:	50                   	push   eax
c0013831:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013835:	e8 08 f7 ff ff       	call   c0012f42 <VAS::getPageTableEntry(unsigned long)>
c001383a:	83 c4 10             	add    esp,0x10
c001383d:	8b 00                	mov    eax,DWORD PTR [eax]
c001383f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013844:	6a 11                	push   0x11
c0013846:	53                   	push   ebx
c0013847:	50                   	push   eax
c0013848:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001384c:	e8 eb fa ff ff       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013851:	83 c4 10             	add    esp,0x10
c0013854:	fb                   	sti    
c0013855:	90                   	nop
c0013856:	83 c4 28             	add    esp,0x28
c0013859:	5b                   	pop    ebx
c001385a:	c3                   	ret    
c001385b:	90                   	nop

c001385c <VAS::evict(unsigned long)>:
c001385c:	55                   	push   ebp
c001385d:	57                   	push   edi
c001385e:	56                   	push   esi
c001385f:	53                   	push   ebx
c0013860:	83 ec 24             	sub    esp,0x24
c0013863:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013867:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001386b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001386f:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013874:	50                   	push   eax
c0013875:	68 a5 3e 02 c0       	push   0xc0023ea5
c001387a:	e8 e5 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001387f:	e8 33 f5 ff ff       	call   c0012db7 <Virt::allocateSwapfilePage()>
c0013884:	83 c4 10             	add    esp,0x10
c0013887:	89 c7                	mov    edi,eax
c0013889:	a1 2c 5b 02 c0       	mov    eax,ds:0xc0025b2c
c001388e:	85 c0                	test   eax,eax
c0013890:	7e 40                	jle    c00138d2 <VAS::evict(unsigned long)+0x76>
c0013892:	89 ee                	mov    esi,ebp
c0013894:	31 db                	xor    ebx,ebx
c0013896:	83 ec 0c             	sub    esp,0xc
c0013899:	57                   	push   edi
c001389a:	e8 02 f5 ff ff       	call   c0012da1 <Virt::swapIDToSector(unsigned long)>
c001389f:	89 34 24             	mov    DWORD PTR [esp],esi
c00138a2:	01 d8                	add    eax,ebx
c00138a4:	6a 01                	push   0x1
c00138a6:	31 d2                	xor    edx,edx
c00138a8:	83 c3 01             	add    ebx,0x1
c00138ab:	52                   	push   edx
c00138ac:	81 c6 00 02 00 00    	add    esi,0x200
c00138b2:	50                   	push   eax
c00138b3:	0f be 05 38 5b 02 c0 	movsx  eax,BYTE PTR ds:0xc0025b38
c00138ba:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c00138c1:	50                   	push   eax
c00138c2:	e8 a9 6a ff ff       	call   c000a370 <LogicalDisk::write(unsigned long long, int, void*)>
c00138c7:	83 c4 20             	add    esp,0x20
c00138ca:	39 1d 2c 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b2c,ebx
c00138d0:	7f c4                	jg     c0013896 <VAS::evict(unsigned long)+0x3a>
c00138d2:	83 ec 08             	sub    esp,0x8
c00138d5:	c1 e7 0c             	shl    edi,0xc
c00138d8:	55                   	push   ebp
c00138d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138dd:	50                   	push   eax
c00138de:	e8 5f f6 ff ff       	call   c0012f42 <VAS::getPageTableEntry(unsigned long)>
c00138e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00138e5:	89 d3                	mov    ebx,edx
c00138e7:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00138ed:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00138f3:	09 d7                	or     edi,edx
c00138f5:	89 38                	mov    DWORD PTR [eax],edi
c00138f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138fa:	8b 15 48 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d248
c0013900:	83 c2 01             	add    edx,0x1
c0013903:	89 15 48 d2 02 c0    	mov    DWORD PTR ds:0xc002d248,edx
c0013909:	e8 e3 c0 ff ff       	call   c000f9f1 <Phys::freePage(unsigned long)>
c001390e:	0f 20 d8             	mov    eax,cr3
c0013911:	0f 22 d8             	mov    cr3,eax
c0013914:	8b 0d 48 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d248
c001391a:	51                   	push   ecx
c001391b:	55                   	push   ebp
c001391c:	53                   	push   ebx
c001391d:	68 d8 39 02 c0       	push   0xc00239d8
c0013922:	e8 3d 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013927:	83 c4 18             	add    esp,0x18
c001392a:	a1 44 d2 02 c0       	mov    eax,ds:0xc002d244
c001392f:	50                   	push   eax
c0013930:	8d 50 01             	lea    edx,[eax+0x1]
c0013933:	68 ba 3e 02 c0       	push   0xc0023eba
c0013938:	89 15 44 d2 02 c0    	mov    DWORD PTR ds:0xc002d244,edx
c001393e:	e8 21 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013943:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013948:	c7 44 24 40 cc 3e 02 c0 	mov    DWORD PTR [esp+0x40],0xc0023ecc
c0013950:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013954:	83 c4 2c             	add    esp,0x2c
c0013957:	5b                   	pop    ebx
c0013958:	5e                   	pop    esi
c0013959:	5f                   	pop    edi
c001395a:	5d                   	pop    ebp
c001395b:	e9 04 36 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0013960 <VAS::canLockPage(unsigned long)>:
c0013960:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013964:	50                   	push   eax
c0013965:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013969:	52                   	push   edx
c001396a:	e8 d3 f5 ff ff       	call   c0012f42 <VAS::getPageTableEntry(unsigned long)>
c001396f:	59                   	pop    ecx
c0013970:	8b 00                	mov    eax,DWORD PTR [eax]
c0013972:	5a                   	pop    edx
c0013973:	c1 e8 0b             	shr    eax,0xb
c0013976:	83 e0 01             	and    eax,0x1
c0013979:	c3                   	ret    

c001397a <VAS::unlockPage(unsigned long)>:
c001397a:	83 ec 0c             	sub    esp,0xc
c001397d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013981:	50                   	push   eax
c0013982:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013986:	52                   	push   edx
c0013987:	e8 b6 f5 ff ff       	call   c0012f42 <VAS::getPageTableEntry(unsigned long)>
c001398c:	59                   	pop    ecx
c001398d:	5a                   	pop    edx
c001398e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013990:	f6 c6 08             	test   dh,0x8
c0013993:	75 09                	jne    c001399e <VAS::unlockPage(unsigned long)+0x24>
c0013995:	80 ce 08             	or     dh,0x8
c0013998:	89 10                	mov    DWORD PTR [eax],edx
c001399a:	83 c4 0c             	add    esp,0xc
c001399d:	c3                   	ret    
c001399e:	c7 44 24 10 0c 3a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023a0c
c00139a6:	83 c4 0c             	add    esp,0xc
c00139a9:	e9 b8 be ff ff       	jmp    c000f866 <KePanic(char const*)>

c00139ae <VAS::canLockPages(unsigned long, int)>:
c00139ae:	55                   	push   ebp
c00139af:	57                   	push   edi
c00139b0:	56                   	push   esi
c00139b1:	53                   	push   ebx
c00139b2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00139b6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00139ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00139be:	85 ff                	test   edi,edi
c00139c0:	7e 23                	jle    c00139e5 <VAS::canLockPages(unsigned long, int)+0x37>
c00139c2:	31 f6                	xor    esi,esi
c00139c4:	eb 0d                	jmp    c00139d3 <VAS::canLockPages(unsigned long, int)+0x25>
c00139c6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00139cc:	83 c6 01             	add    esi,0x1
c00139cf:	39 f7                	cmp    edi,esi
c00139d1:	74 0d                	je     c00139e0 <VAS::canLockPages(unsigned long, int)+0x32>
c00139d3:	53                   	push   ebx
c00139d4:	55                   	push   ebp
c00139d5:	e8 86 ff ff ff       	call   c0013960 <VAS::canLockPage(unsigned long)>
c00139da:	5a                   	pop    edx
c00139db:	84 c0                	test   al,al
c00139dd:	59                   	pop    ecx
c00139de:	75 e6                	jne    c00139c6 <VAS::canLockPages(unsigned long, int)+0x18>
c00139e0:	5b                   	pop    ebx
c00139e1:	5e                   	pop    esi
c00139e2:	5f                   	pop    edi
c00139e3:	5d                   	pop    ebp
c00139e4:	c3                   	ret    
c00139e5:	b0 01                	mov    al,0x1
c00139e7:	eb f7                	jmp    c00139e0 <VAS::canLockPages(unsigned long, int)+0x32>
c00139e9:	90                   	nop

c00139ea <VAS::unlockPages(unsigned long, int)>:
c00139ea:	55                   	push   ebp
c00139eb:	57                   	push   edi
c00139ec:	56                   	push   esi
c00139ed:	53                   	push   ebx
c00139ee:	83 ec 0c             	sub    esp,0xc
c00139f1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00139f5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00139f9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00139fd:	85 ff                	test   edi,edi
c00139ff:	7e 1c                	jle    c0013a1d <VAS::unlockPages(unsigned long, int)+0x33>
c0013a01:	31 f6                	xor    esi,esi
c0013a03:	83 ec 08             	sub    esp,0x8
c0013a06:	83 c6 01             	add    esi,0x1
c0013a09:	53                   	push   ebx
c0013a0a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013a10:	55                   	push   ebp
c0013a11:	e8 64 ff ff ff       	call   c001397a <VAS::unlockPage(unsigned long)>
c0013a16:	83 c4 10             	add    esp,0x10
c0013a19:	39 f7                	cmp    edi,esi
c0013a1b:	75 e6                	jne    c0013a03 <VAS::unlockPages(unsigned long, int)+0x19>
c0013a1d:	83 c4 0c             	add    esp,0xc
c0013a20:	5b                   	pop    ebx
c0013a21:	5e                   	pop    esi
c0013a22:	5f                   	pop    edi
c0013a23:	5d                   	pop    ebp
c0013a24:	c3                   	ret    
c0013a25:	90                   	nop

c0013a26 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0013a26:	55                   	push   ebp
c0013a27:	57                   	push   edi
c0013a28:	56                   	push   esi
c0013a29:	53                   	push   ebx
c0013a2a:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0013a30:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0013a37:	89 f3                	mov    ebx,esi
c0013a39:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013a3f:	53                   	push   ebx
c0013a40:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0013a47:	50                   	push   eax
c0013a48:	e8 f5 f4 ff ff       	call   c0012f42 <VAS::getPageTableEntry(unsigned long)>
c0013a4d:	5a                   	pop    edx
c0013a4e:	89 c5                	mov    ebp,eax
c0013a50:	59                   	pop    ecx
c0013a51:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0013a57:	0f 87 cb 00 00 00    	ja     c0013b28 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0013a5d:	83 ec 08             	sub    esp,0x8
c0013a60:	56                   	push   esi
c0013a61:	68 3c 3a 02 c0       	push   0xc0023a3c
c0013a66:	e8 f9 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013a6b:	5e                   	pop    esi
c0013a6c:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c0013a71:	5f                   	pop    edi
c0013a72:	50                   	push   eax
c0013a73:	68 6c 3a 02 c0       	push   0xc0023a6c
c0013a78:	e8 e7 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013a7d:	58                   	pop    eax
c0013a7e:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c0013a84:	5a                   	pop    edx
c0013a85:	51                   	push   ecx
c0013a86:	68 90 3a 02 c0       	push   0xc0023a90
c0013a8b:	e8 d4 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013a90:	83 c4 10             	add    esp,0x10
c0013a93:	85 db                	test   ebx,ebx
c0013a95:	74 5b                	je     c0013af2 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0013a97:	85 ed                	test   ebp,ebp
c0013a99:	74 21                	je     c0013abc <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c0013a9b:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0013a9e:	f7 c6 00 02 00 00    	test   esi,0x200
c0013aa4:	0f 85 c5 00 00 00    	jne    c0013b6f <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c0013aaa:	89 f0                	mov    eax,esi
c0013aac:	25 01 04 00 00       	and    eax,0x401
c0013ab1:	3d 00 04 00 00       	cmp    eax,0x400
c0013ab6:	0f 84 39 01 00 00    	je     c0013bf5 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c0013abc:	83 ec 08             	sub    esp,0x8
c0013abf:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c0013ac4:	50                   	push   eax
c0013ac5:	68 84 3c 02 c0       	push   0xc0023c84
c0013aca:	e8 95 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013acf:	5a                   	pop    edx
c0013ad0:	8b 1d 30 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da30
c0013ad6:	59                   	pop    ecx
c0013ad7:	53                   	push   ebx
c0013ad8:	68 a8 3c 02 c0       	push   0xc0023ca8
c0013add:	e8 82 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013ae2:	83 c4 10             	add    esp,0x10
c0013ae5:	31 c0                	xor    eax,eax
c0013ae7:	81 c4 0c 10 00 00    	add    esp,0x100c
c0013aed:	5b                   	pop    ebx
c0013aee:	5e                   	pop    esi
c0013aef:	5f                   	pop    edi
c0013af0:	5d                   	pop    ebp
c0013af1:	c3                   	ret    
c0013af2:	83 ec 08             	sub    esp,0x8
c0013af5:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c0013afa:	50                   	push   eax
c0013afb:	68 b4 3a 02 c0       	push   0xc0023ab4
c0013b00:	e8 5f 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013b05:	58                   	pop    eax
c0013b06:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c0013b0c:	5a                   	pop    edx
c0013b0d:	51                   	push   ecx
c0013b0e:	68 d8 3a 02 c0       	push   0xc0023ad8
c0013b13:	e8 4c 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013b18:	83 c4 10             	add    esp,0x10
c0013b1b:	31 c0                	xor    eax,eax
c0013b1d:	81 c4 0c 10 00 00    	add    esp,0x100c
c0013b23:	5b                   	pop    ebx
c0013b24:	5e                   	pop    esi
c0013b25:	5f                   	pop    edi
c0013b26:	5d                   	pop    ebp
c0013b27:	c3                   	ret    
c0013b28:	83 ec 0c             	sub    esp,0xc
c0013b2b:	68 e1 3e 02 c0       	push   0xc0023ee1
c0013b30:	e8 31 bd ff ff       	call   c000f866 <KePanic(char const*)>
c0013b35:	5f                   	pop    edi
c0013b36:	58                   	pop    eax
c0013b37:	56                   	push   esi
c0013b38:	68 3c 3a 02 c0       	push   0xc0023a3c
c0013b3d:	e8 22 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013b42:	58                   	pop    eax
c0013b43:	8b 0d 0c da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da0c
c0013b49:	5a                   	pop    edx
c0013b4a:	51                   	push   ecx
c0013b4b:	68 6c 3a 02 c0       	push   0xc0023a6c
c0013b50:	e8 0f 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013b55:	5e                   	pop    esi
c0013b56:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013b5b:	5f                   	pop    edi
c0013b5c:	50                   	push   eax
c0013b5d:	68 90 3a 02 c0       	push   0xc0023a90
c0013b62:	e8 fd 33 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013b67:	83 c4 10             	add    esp,0x10
c0013b6a:	e9 28 ff ff ff       	jmp    c0013a97 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c0013b6f:	83 ec 0c             	sub    esp,0xc
c0013b72:	68 fc 3a 02 c0       	push   0xc0023afc
c0013b77:	e8 e8 33 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013b7c:	e8 d9 be ff ff       	call   c000fa5a <Phys::allocatePage()>
c0013b81:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013b84:	83 ca 01             	or     edx,0x1
c0013b87:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0013b8a:	0f 20 da             	mov    edx,cr3
c0013b8d:	0f 22 da             	mov    cr3,edx
c0013b90:	ba 00 10 00 00       	mov    edx,0x1000
c0013b95:	89 de                	mov    esi,ebx
c0013b97:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013b9b:	89 d1                	mov    ecx,edx
c0013b9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b9f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013ba2:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0013ba8:	09 c8                	or     eax,ecx
c0013baa:	83 c8 02             	or     eax,0x2
c0013bad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013bb0:	0f 20 d8             	mov    eax,cr3
c0013bb3:	0f 22 d8             	mov    cr3,eax
c0013bb6:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013bba:	89 df                	mov    edi,ebx
c0013bbc:	89 d1                	mov    ecx,edx
c0013bbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013bc0:	8b 35 0c da 02 c0    	mov    esi,DWORD PTR ds:0xc002da0c
c0013bc6:	59                   	pop    ecx
c0013bc7:	5b                   	pop    ebx
c0013bc8:	56                   	push   esi
c0013bc9:	68 1c 3b 02 c0       	push   0xc0023b1c
c0013bce:	e8 91 33 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013bd3:	5f                   	pop    edi
c0013bd4:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013bd9:	5d                   	pop    ebp
c0013bda:	50                   	push   eax
c0013bdb:	68 40 3b 02 c0       	push   0xc0023b40
c0013be0:	e8 7f 33 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013be5:	83 c4 10             	add    esp,0x10
c0013be8:	b0 01                	mov    al,0x1
c0013bea:	81 c4 0c 10 00 00    	add    esp,0x100c
c0013bf0:	5b                   	pop    ebx
c0013bf1:	5e                   	pop    esi
c0013bf2:	5f                   	pop    edi
c0013bf3:	5d                   	pop    ebp
c0013bf4:	c3                   	ret    
c0013bf5:	83 ec 08             	sub    esp,0x8
c0013bf8:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013bfd:	c1 ee 0c             	shr    esi,0xc
c0013c00:	50                   	push   eax
c0013c01:	68 64 3b 02 c0       	push   0xc0023b64
c0013c06:	e8 59 33 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013c0b:	e8 4a be ff ff       	call   c000fa5a <Phys::allocatePage()>
c0013c10:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c0013c16:	89 c7                	mov    edi,eax
c0013c18:	58                   	pop    eax
c0013c19:	5a                   	pop    edx
c0013c1a:	51                   	push   ecx
c0013c1b:	68 88 3b 02 c0       	push   0xc0023b88
c0013c20:	e8 3f 33 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013c25:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013c28:	83 c4 10             	add    esp,0x10
c0013c2b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0013c31:	09 fa                	or     edx,edi
c0013c33:	81 ca 01 08 00 00    	or     edx,0x801
c0013c39:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0013c3c:	8b 3d 2c 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025b2c
c0013c42:	85 ff                	test   edi,edi
c0013c44:	7e 65                	jle    c0013cab <VAS::tryLoadBackOffDisk(unsigned long)+0x285>
c0013c46:	89 dd                	mov    ebp,ebx
c0013c48:	31 ff                	xor    edi,edi
c0013c4a:	83 ec 08             	sub    esp,0x8
c0013c4d:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013c52:	50                   	push   eax
c0013c53:	68 3c 3c 02 c0       	push   0xc0023c3c
c0013c58:	e8 07 33 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013c5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c60:	e8 3c f1 ff ff       	call   c0012da1 <Virt::swapIDToSector(unsigned long)>
c0013c65:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013c68:	01 f8                	add    eax,edi
c0013c6a:	6a 01                	push   0x1
c0013c6c:	31 d2                	xor    edx,edx
c0013c6e:	83 c7 01             	add    edi,0x1
c0013c71:	52                   	push   edx
c0013c72:	81 c5 00 02 00 00    	add    ebp,0x200
c0013c78:	50                   	push   eax
c0013c79:	0f be 05 38 5b 02 c0 	movsx  eax,BYTE PTR ds:0xc0025b38
c0013c80:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c0013c87:	50                   	push   eax
c0013c88:	e8 77 66 ff ff       	call   c000a304 <LogicalDisk::read(unsigned long long, int, void*)>
c0013c8d:	83 c4 18             	add    esp,0x18
c0013c90:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013c95:	50                   	push   eax
c0013c96:	68 60 3c 02 c0       	push   0xc0023c60
c0013c9b:	e8 c4 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013ca0:	83 c4 10             	add    esp,0x10
c0013ca3:	39 3d 2c 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b2c,edi
c0013ca9:	7f 9f                	jg     c0013c4a <VAS::tryLoadBackOffDisk(unsigned long)+0x224>
c0013cab:	83 ec 08             	sub    esp,0x8
c0013cae:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013cb3:	50                   	push   eax
c0013cb4:	68 ac 3b 02 c0       	push   0xc0023bac
c0013cb9:	e8 a6 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013cbe:	83 c4 0c             	add    esp,0xc
c0013cc1:	a1 48 d2 02 c0       	mov    eax,ds:0xc002d248
c0013cc6:	83 e8 01             	sub    eax,0x1
c0013cc9:	50                   	push   eax
c0013cca:	a3 48 d2 02 c0       	mov    ds:0xc002d248,eax
c0013ccf:	53                   	push   ebx
c0013cd0:	68 f3 3e 02 c0       	push   0xc0023ef3
c0013cd5:	e8 8a 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013cda:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cdd:	e8 9c f0 ff ff       	call   c0012d7e <Virt::freeSwapfilePage(unsigned long)>
c0013ce2:	58                   	pop    eax
c0013ce3:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c0013ce9:	5a                   	pop    edx
c0013cea:	51                   	push   ecx
c0013ceb:	68 d0 3b 02 c0       	push   0xc0023bd0
c0013cf0:	e8 6f 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013cf5:	0f 20 d8             	mov    eax,cr3
c0013cf8:	0f 22 d8             	mov    cr3,eax
c0013cfb:	c7 04 24 08 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f08
c0013d02:	e8 5d 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013d07:	5b                   	pop    ebx
c0013d08:	8b 3d 0c da 02 c0    	mov    edi,DWORD PTR ds:0xc002da0c
c0013d0e:	5e                   	pop    esi
c0013d0f:	57                   	push   edi
c0013d10:	68 f4 3b 02 c0       	push   0xc0023bf4
c0013d15:	e8 4a 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013d1a:	5d                   	pop    ebp
c0013d1b:	58                   	pop    eax
c0013d1c:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013d21:	50                   	push   eax
c0013d22:	68 18 3c 02 c0       	push   0xc0023c18
c0013d27:	e8 38 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013d2c:	83 c4 10             	add    esp,0x10
c0013d2f:	b0 01                	mov    al,0x1
c0013d31:	e9 b1 fd ff ff       	jmp    c0013ae7 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>

c0013d36 <VAS::lockPage(unsigned long)>:
c0013d36:	56                   	push   esi
c0013d37:	53                   	push   ebx
c0013d38:	83 ec 04             	sub    esp,0x4
c0013d3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d43:	50                   	push   eax
c0013d44:	56                   	push   esi
c0013d45:	e8 f8 f1 ff ff       	call   c0012f42 <VAS::getPageTableEntry(unsigned long)>
c0013d4a:	5a                   	pop    edx
c0013d4b:	89 c3                	mov    ebx,eax
c0013d4d:	59                   	pop    ecx
c0013d4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d50:	a8 01                	test   al,0x1
c0013d52:	74 10                	je     c0013d64 <VAS::lockPage(unsigned long)+0x2e>
c0013d54:	f6 c4 08             	test   ah,0x8
c0013d57:	74 28                	je     c0013d81 <VAS::lockPage(unsigned long)+0x4b>
c0013d59:	80 e4 f7             	and    ah,0xf7
c0013d5c:	89 03                	mov    DWORD PTR [ebx],eax
c0013d5e:	83 c4 04             	add    esp,0x4
c0013d61:	5b                   	pop    ebx
c0013d62:	5e                   	pop    esi
c0013d63:	c3                   	ret    
c0013d64:	83 ec 08             	sub    esp,0x8
c0013d67:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013d6c:	50                   	push   eax
c0013d6d:	56                   	push   esi
c0013d6e:	e8 b3 fc ff ff       	call   c0013a26 <VAS::tryLoadBackOffDisk(unsigned long)>
c0013d73:	83 c4 10             	add    esp,0x10
c0013d76:	84 c0                	test   al,al
c0013d78:	74 19                	je     c0013d93 <VAS::lockPage(unsigned long)+0x5d>
c0013d7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d7c:	f6 c4 08             	test   ah,0x8
c0013d7f:	75 d8                	jne    c0013d59 <VAS::lockPage(unsigned long)+0x23>
c0013d81:	c7 44 24 10 0c 3a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023a0c
c0013d89:	83 c4 04             	add    esp,0x4
c0013d8c:	5b                   	pop    ebx
c0013d8d:	5e                   	pop    esi
c0013d8e:	e9 d3 ba ff ff       	jmp    c000f866 <KePanic(char const*)>
c0013d93:	83 ec 0c             	sub    esp,0xc
c0013d96:	68 cc 3c 02 c0       	push   0xc0023ccc
c0013d9b:	e8 c6 ba ff ff       	call   c000f866 <KePanic(char const*)>
c0013da0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013da2:	83 c4 10             	add    esp,0x10
c0013da5:	eb ad                	jmp    c0013d54 <VAS::lockPage(unsigned long)+0x1e>
c0013da7:	90                   	nop

c0013da8 <VAS::lockPages(unsigned long, int)>:
c0013da8:	55                   	push   ebp
c0013da9:	57                   	push   edi
c0013daa:	56                   	push   esi
c0013dab:	53                   	push   ebx
c0013dac:	83 ec 0c             	sub    esp,0xc
c0013daf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013db3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013db7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013dbb:	85 ff                	test   edi,edi
c0013dbd:	7e 1c                	jle    c0013ddb <VAS::lockPages(unsigned long, int)+0x33>
c0013dbf:	31 f6                	xor    esi,esi
c0013dc1:	83 ec 08             	sub    esp,0x8
c0013dc4:	83 c6 01             	add    esi,0x1
c0013dc7:	53                   	push   ebx
c0013dc8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013dce:	55                   	push   ebp
c0013dcf:	e8 62 ff ff ff       	call   c0013d36 <VAS::lockPage(unsigned long)>
c0013dd4:	83 c4 10             	add    esp,0x10
c0013dd7:	39 f7                	cmp    edi,esi
c0013dd9:	75 e6                	jne    c0013dc1 <VAS::lockPages(unsigned long, int)+0x19>
c0013ddb:	83 c4 0c             	add    esp,0xc
c0013dde:	5b                   	pop    ebx
c0013ddf:	5e                   	pop    esi
c0013de0:	5f                   	pop    edi
c0013de1:	5d                   	pop    ebp
c0013de2:	c3                   	ret    
c0013de3:	90                   	nop

c0013de4 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0013de4:	55                   	push   ebp
c0013de5:	57                   	push   edi
c0013de6:	56                   	push   esi
c0013de7:	53                   	push   ebx
c0013de8:	83 ec 28             	sub    esp,0x28
c0013deb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0013def:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013df3:	50                   	push   eax
c0013df4:	e8 60 ee ff ff       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c0013df9:	83 c4 0c             	add    esp,0xc
c0013dfc:	89 c5                	mov    ebp,eax
c0013dfe:	6a 07                	push   0x7
c0013e00:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013e04:	52                   	push   edx
c0013e05:	56                   	push   esi
c0013e06:	e8 35 f6 ff ff       	call   c0013440 <VAS::allocatePages(int, int)>
c0013e0b:	83 c4 10             	add    esp,0x10
c0013e0e:	89 c7                	mov    edi,eax
c0013e10:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0013e14:	85 c9                	test   ecx,ecx
c0013e16:	74 2f                	je     c0013e47 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0013e18:	31 db                	xor    ebx,ebx
c0013e1a:	e8 3b bc ff ff       	call   c000fa5a <Phys::allocatePage()>
c0013e1f:	83 c3 01             	add    ebx,0x1
c0013e22:	6a 03                	push   0x3
c0013e24:	55                   	push   ebp
c0013e25:	50                   	push   eax
c0013e26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e2a:	56                   	push   esi
c0013e2b:	e8 0c f5 ff ff       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e30:	6a 07                	push   0x7
c0013e32:	57                   	push   edi
c0013e33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e37:	50                   	push   eax
c0013e38:	56                   	push   esi
c0013e39:	e8 fe f4 ff ff       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e3e:	83 c4 20             	add    esp,0x20
c0013e41:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0013e45:	75 d3                	jne    c0013e1a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0013e47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013e4b:	89 28                	mov    DWORD PTR [eax],ebp
c0013e4d:	83 c4 1c             	add    esp,0x1c
c0013e50:	89 f8                	mov    eax,edi
c0013e52:	5b                   	pop    ebx
c0013e53:	5e                   	pop    esi
c0013e54:	5f                   	pop    edi
c0013e55:	5d                   	pop    ebp
c0013e56:	c3                   	ret    
c0013e57:	90                   	nop

c0013e58 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0013e58:	53                   	push   ebx
c0013e59:	83 ec 14             	sub    esp,0x14
c0013e5c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013e60:	68 fc 3c 02 c0       	push   0xc0023cfc
c0013e65:	e8 fa 30 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013e6a:	c7 04 24 5c 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d5c
c0013e71:	e8 ee 30 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013e76:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013e7a:	83 c4 18             	add    esp,0x18
c0013e7d:	5b                   	pop    ebx
c0013e7e:	e9 de f0 ff ff       	jmp    c0012f61 <Virt::freeKernelVirtualPages(unsigned long)>
c0013e83:	90                   	nop

c0013e84 <VAS::scanForEviction()>:
c0013e84:	57                   	push   edi
c0013e85:	56                   	push   esi
c0013e86:	31 f6                	xor    esi,esi
c0013e88:	53                   	push   ebx
c0013e89:	83 ec 18             	sub    esp,0x18
c0013e8c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013e90:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0013e95:	50                   	push   eax
c0013e96:	68 d8 3d 02 c0       	push   0xc0023dd8
c0013e9b:	e8 c4 30 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013ea0:	c7 04 24 0f 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f0f
c0013ea7:	e8 b8 30 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013eac:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013eaf:	83 c4 10             	add    esp,0x10
c0013eb2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0013eb8:	75 0e                	jne    c0013ec8 <VAS::scanForEviction()+0x44>
c0013eba:	89 da                	mov    edx,ebx
c0013ebc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013ebf:	c1 ea 16             	shr    edx,0x16
c0013ec2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013ec6:	74 5b                	je     c0013f23 <VAS::scanForEviction()+0x9f>
c0013ec8:	83 ec 08             	sub    esp,0x8
c0013ecb:	53                   	push   ebx
c0013ecc:	57                   	push   edi
c0013ecd:	e8 70 f0 ff ff       	call   c0012f42 <VAS::getPageTableEntry(unsigned long)>
c0013ed2:	83 c4 10             	add    esp,0x10
c0013ed5:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ed7:	89 d1                	mov    ecx,edx
c0013ed9:	c1 e9 0c             	shr    ecx,0xc
c0013edc:	74 10                	je     c0013eee <VAS::scanForEviction()+0x6a>
c0013ede:	89 d1                	mov    ecx,edx
c0013ee0:	81 e1 01 08 00 00    	and    ecx,0x801
c0013ee6:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0013eec:	74 40                	je     c0013f2e <VAS::scanForEviction()+0xaa>
c0013eee:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013ef4:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0013efa:	76 2d                	jbe    c0013f29 <VAS::scanForEviction()+0xa5>
c0013efc:	83 c6 01             	add    esi,0x1
c0013eff:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0013f06:	83 fe 03             	cmp    esi,0x3
c0013f09:	74 32                	je     c0013f3d <VAS::scanForEviction()+0xb9>
c0013f0b:	31 db                	xor    ebx,ebx
c0013f0d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0013f13:	75 b3                	jne    c0013ec8 <VAS::scanForEviction()+0x44>
c0013f15:	89 da                	mov    edx,ebx
c0013f17:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013f1a:	c1 ea 16             	shr    edx,0x16
c0013f1d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013f21:	75 a5                	jne    c0013ec8 <VAS::scanForEviction()+0x44>
c0013f23:	81 c3 00 00 40 00    	add    ebx,0x400000
c0013f29:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0013f2c:	eb 84                	jmp    c0013eb2 <VAS::scanForEviction()+0x2e>
c0013f2e:	f6 c2 20             	test   dl,0x20
c0013f31:	74 13                	je     c0013f46 <VAS::scanForEviction()+0xc2>
c0013f33:	83 e2 df             	and    edx,0xffffffdf
c0013f36:	89 10                	mov    DWORD PTR [eax],edx
c0013f38:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013f3b:	eb b1                	jmp    c0013eee <VAS::scanForEviction()+0x6a>
c0013f3d:	83 c4 10             	add    esp,0x10
c0013f40:	31 c0                	xor    eax,eax
c0013f42:	5b                   	pop    ebx
c0013f43:	5e                   	pop    esi
c0013f44:	5f                   	pop    edi
c0013f45:	c3                   	ret    
c0013f46:	83 ec 08             	sub    esp,0x8
c0013f49:	89 d0                	mov    eax,edx
c0013f4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f54:	53                   	push   ebx
c0013f55:	68 2b 3f 02 c0       	push   0xc0023f2b
c0013f5a:	e8 05 30 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013f5f:	58                   	pop    eax
c0013f60:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013f63:	5a                   	pop    edx
c0013f64:	51                   	push   ecx
c0013f65:	57                   	push   edi
c0013f66:	e8 f1 f8 ff ff       	call   c001385c <VAS::evict(unsigned long)>
c0013f6b:	5b                   	pop    ebx
c0013f6c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013f6f:	5e                   	pop    esi
c0013f70:	50                   	push   eax
c0013f71:	68 3f 3f 02 c0       	push   0xc0023f3f
c0013f76:	e8 e9 2f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013f7b:	58                   	pop    eax
c0013f7c:	5a                   	pop    edx
c0013f7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f81:	50                   	push   eax
c0013f82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f86:	68 52 3f 02 c0       	push   0xc0023f52
c0013f8b:	e8 d4 2f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013f90:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013f93:	81 c1 00 10 00 00    	add    ecx,0x1000
c0013f99:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0013f9c:	8b 3d 30 da 02 c0    	mov    edi,DWORD PTR ds:0xc002da30
c0013fa2:	5b                   	pop    ebx
c0013fa3:	5e                   	pop    esi
c0013fa4:	57                   	push   edi
c0013fa5:	68 f8 3d 02 c0       	push   0xc0023df8
c0013faa:	e8 b5 2f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013faf:	83 c4 10             	add    esp,0x10
c0013fb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fb6:	83 c4 10             	add    esp,0x10
c0013fb9:	5b                   	pop    ebx
c0013fba:	5e                   	pop    esi
c0013fbb:	5f                   	pop    edi
c0013fbc:	c3                   	ret    

c0013fbd <mapVASFirstTime>:
c0013fbd:	55                   	push   ebp
c0013fbe:	57                   	push   edi
c0013fbf:	56                   	push   esi
c0013fc0:	53                   	push   ebx
c0013fc1:	83 ec 0c             	sub    esp,0xc
c0013fc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fc9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0013fcc:	83 fa 01             	cmp    edx,0x1
c0013fcf:	0f 84 cb 00 00 00    	je     c00140a0 <mapVASFirstTime+0xe3>
c0013fd5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013fd8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0013fdb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0013fe0:	c1 e5 15             	shl    ebp,0x15
c0013fe3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0013fe8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0013fee:	29 eb                	sub    ebx,ebp
c0013ff0:	29 ef                	sub    edi,ebp
c0013ff2:	e8 63 ba ff ff       	call   c000fa5a <Phys::allocatePage()>
c0013ff7:	83 ec 0c             	sub    esp,0xc
c0013ffa:	68 03 04 00 00       	push   0x403
c0013fff:	6a 01                	push   0x1
c0014001:	53                   	push   ebx
c0014002:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014008:	50                   	push   eax
c0014009:	56                   	push   esi
c001400a:	e8 17 f5 ff ff       	call   c0013526 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001400f:	83 c4 20             	add    esp,0x20
c0014012:	39 fb                	cmp    ebx,edi
c0014014:	75 dc                	jne    c0013ff2 <mapVASFirstTime+0x35>
c0014016:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001401b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014020:	29 eb                	sub    ebx,ebp
c0014022:	29 ef                	sub    edi,ebp
c0014024:	e8 31 ba ff ff       	call   c000fa5a <Phys::allocatePage()>
c0014029:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001402d:	83 fa 01             	cmp    edx,0x1
c0014030:	19 d2                	sbb    edx,edx
c0014032:	83 ec 0c             	sub    esp,0xc
c0014035:	83 e2 04             	and    edx,0x4
c0014038:	81 c2 03 04 00 00    	add    edx,0x403
c001403e:	52                   	push   edx
c001403f:	6a 01                	push   0x1
c0014041:	53                   	push   ebx
c0014042:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014048:	50                   	push   eax
c0014049:	56                   	push   esi
c001404a:	e8 d7 f4 ff ff       	call   c0013526 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001404f:	83 c4 20             	add    esp,0x20
c0014052:	39 df                	cmp    edi,ebx
c0014054:	75 ce                	jne    c0014024 <mapVASFirstTime+0x67>
c0014056:	83 ec 0c             	sub    esp,0xc
c0014059:	bb 7c 70 02 c0       	mov    ebx,0xc002707c
c001405e:	6a 04                	push   0x4
c0014060:	81 eb 00 60 02 c0    	sub    ebx,0xc0026000
c0014066:	6a ff                	push   0xffffffff
c0014068:	c1 eb 0c             	shr    ebx,0xc
c001406b:	53                   	push   ebx
c001406c:	68 00 60 02 c0       	push   0xc0026000
c0014071:	56                   	push   esi
c0014072:	e8 65 f0 ff ff       	call   c00130dc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014077:	83 c4 14             	add    esp,0x14
c001407a:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c001407f:	6a 04                	push   0x4
c0014081:	6a ff                	push   0xffffffff
c0014083:	53                   	push   ebx
c0014084:	68 00 60 02 c0       	push   0xc0026000
c0014089:	50                   	push   eax
c001408a:	e8 4d f0 ff ff       	call   c00130dc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001408f:	0f 20 d8             	mov    eax,cr3
c0014092:	0f 22 d8             	mov    cr3,eax
c0014095:	83 c4 20             	add    esp,0x20
c0014098:	83 c4 0c             	add    esp,0xc
c001409b:	5b                   	pop    ebx
c001409c:	5e                   	pop    esi
c001409d:	5f                   	pop    edi
c001409e:	5d                   	pop    ebp
c001409f:	c3                   	ret    
c00140a0:	83 ec 0c             	sub    esp,0xc
c00140a3:	68 5f 3f 02 c0       	push   0xc0023f5f
c00140a8:	e8 b7 2e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00140ad:	83 c4 10             	add    esp,0x10
c00140b0:	83 c4 0c             	add    esp,0xc
c00140b3:	5b                   	pop    ebx
c00140b4:	5e                   	pop    esi
c00140b5:	5f                   	pop    edi
c00140b6:	5d                   	pop    ebp
c00140b7:	c3                   	ret    

c00140b8 <SysEject(regs*)>:
c00140b8:	83 ec 0c             	sub    esp,0xc
c00140bb:	83 ca ff             	or     edx,0xffffffff
c00140be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00140c5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00140ca:	83 e9 41             	sub    ecx,0x41
c00140cd:	83 f9 19             	cmp    ecx,0x19
c00140d0:	77 18                	ja     c00140ea <SysEject(regs*)+0x32>
c00140d2:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c00140d9:	85 c9                	test   ecx,ecx
c00140db:	74 0d                	je     c00140ea <SysEject(regs*)+0x32>
c00140dd:	83 ec 0c             	sub    esp,0xc
c00140e0:	51                   	push   ecx
c00140e1:	e8 b4 61 ff ff       	call   c000a29a <LogicalDisk::eject()>
c00140e6:	83 c4 10             	add    esp,0x10
c00140e9:	99                   	cdq    
c00140ea:	83 c4 0c             	add    esp,0xc
c00140ed:	c3                   	ret    

c00140ee <SysExit(regs*)>:
c00140ee:	83 ec 18             	sub    esp,0x18
c00140f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00140f5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00140f8:	e8 37 2b 00 00       	call   c0016c34 <terminateTask(int)>
c00140fd:	83 c8 ff             	or     eax,0xffffffff
c0014100:	83 c4 1c             	add    esp,0x1c
c0014103:	89 c2                	mov    edx,eax
c0014105:	c3                   	ret    

c0014106 <SysGetCwd(regs*)>:
c0014106:	83 ec 10             	sub    esp,0x10
c0014109:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001410d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014110:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014113:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014118:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001411b:	e8 a6 3c ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c0014120:	83 c4 1c             	add    esp,0x1c
c0014123:	99                   	cdq    
c0014124:	c3                   	ret    

c0014125 <SysGetPID(regs*)>:
c0014125:	83 ec 14             	sub    esp,0x14
c0014128:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001412d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014130:	ff 30                	push   DWORD PTR [eax]
c0014132:	68 78 3f 02 c0       	push   0xc0023f78
c0014137:	e8 28 2e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001413c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014141:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014144:	8b 00                	mov    eax,DWORD PTR [eax]
c0014146:	83 c4 1c             	add    esp,0x1c
c0014149:	99                   	cdq    
c001414a:	c3                   	ret    

c001414b <SysGetRAMData(regs*)>:
c001414b:	8b 0d 40 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d140
c0014151:	a1 48 d2 02 c0       	mov    eax,ds:0xc002d248
c0014156:	03 05 3c d1 02 c0    	add    eax,DWORD PTR ds:0xc002d13c
c001415c:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0014162:	99                   	cdq    
c0014163:	f7 f9                	idiv   ecx
c0014165:	c1 e0 18             	shl    eax,0x18
c0014168:	09 c8                	or     eax,ecx
c001416a:	99                   	cdq    
c001416b:	c3                   	ret    

c001416c <SysGetVGAPtr(regs*)>:
c001416c:	55                   	push   ebp
c001416d:	57                   	push   edi
c001416e:	56                   	push   esi
c001416f:	53                   	push   ebx
c0014170:	83 ec 0c             	sub    esp,0xc
c0014173:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014177:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001417a:	83 f8 ff             	cmp    eax,0xffffffff
c001417d:	74 1b                	je     c001419a <SysGetVGAPtr(regs*)+0x2e>
c001417f:	83 ec 0c             	sub    esp,0xc
c0014182:	50                   	push   eax
c0014183:	e8 5c 25 00 00       	call   c00166e4 <Thr::processFromPID(int)>
c0014188:	83 c4 10             	add    esp,0x10
c001418b:	89 c1                	mov    ecx,eax
c001418d:	31 d2                	xor    edx,edx
c001418f:	b8 01 00 00 00       	mov    eax,0x1
c0014194:	85 c9                	test   ecx,ecx
c0014196:	75 0a                	jne    c00141a2 <SysGetVGAPtr(regs*)+0x36>
c0014198:	eb 61                	jmp    c00141fb <SysGetVGAPtr(regs*)+0x8f>
c001419a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001419f:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00141a2:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00141a8:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00141ac:	74 0c                	je     c00141ba <SysGetVGAPtr(regs*)+0x4e>
c00141ae:	83 ec 0c             	sub    esp,0xc
c00141b1:	55                   	push   ebp
c00141b2:	e8 1c db ff ff       	call   c0011cd3 <setActiveTerminal(VgaText*)>
c00141b7:	83 c4 10             	add    esp,0x10
c00141ba:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00141bd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00141c0:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00141c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141c7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00141ca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141cd:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00141d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141d6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00141d9:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00141df:	50                   	push   eax
c00141e0:	50                   	push   eax
c00141e1:	68 87 3f 02 c0       	push   0xc0023f87
c00141e6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141e9:	05 a8 0f 00 00       	add    eax,0xfa8
c00141ee:	50                   	push   eax
c00141ef:	e8 4c c4 fe ff       	call   c0000640 <strcpy>
c00141f4:	83 c4 10             	add    esp,0x10
c00141f7:	31 c0                	xor    eax,eax
c00141f9:	31 d2                	xor    edx,edx
c00141fb:	83 c4 0c             	add    esp,0xc
c00141fe:	5b                   	pop    ebx
c00141ff:	5e                   	pop    esi
c0014200:	5f                   	pop    edi
c0014201:	5d                   	pop    ebp
c0014202:	c3                   	ret    
c0014203:	90                   	nop

c0014204 <SysKill(regs*)>:
c0014204:	53                   	push   ebx
c0014205:	83 ec 08             	sub    esp,0x8
c0014208:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001420c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014210:	75 16                	jne    c0014228 <SysKill(regs*)+0x24>
c0014212:	83 ec 0c             	sub    esp,0xc
c0014215:	68 91 3f 02 c0       	push   0xc0023f91
c001421a:	e8 47 b6 ff ff       	call   c000f866 <KePanic(char const*)>
c001421f:	83 c4 10             	add    esp,0x10
c0014222:	e9 89 00 00 00       	jmp    c00142b0 <SysKill(regs*)+0xac>
c0014227:	90                   	nop
c0014228:	83 ec 0c             	sub    esp,0xc
c001422b:	68 4c da 02 c0       	push   0xc002da4c
c0014230:	e8 33 cf 00 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014235:	8d 76 00             	lea    esi,[esi+0x0]
c0014238:	83 c4 10             	add    esp,0x10
c001423b:	85 c0                	test   eax,eax
c001423d:	74 19                	je     c0014258 <SysKill(regs*)+0x54>
c001423f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014242:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014245:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014247:	74 33                	je     c001427c <SysKill(regs*)+0x78>
c0014249:	52                   	push   edx
c001424a:	52                   	push   edx
c001424b:	50                   	push   eax
c001424c:	68 4c da 02 c0       	push   0xc002da4c
c0014251:	e8 1e d4 00 00       	call   c0021674 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014256:	eb e0                	jmp    c0014238 <SysKill(regs*)+0x34>
c0014258:	83 ec 0c             	sub    esp,0xc
c001425b:	68 40 da 02 c0       	push   0xc002da40
c0014260:	e8 03 cf 00 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014265:	8d 76 00             	lea    esi,[esi+0x0]
c0014268:	83 c4 10             	add    esp,0x10
c001426b:	85 c0                	test   eax,eax
c001426d:	74 41                	je     c00142b0 <SysKill(regs*)+0xac>
c001426f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014272:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014275:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014277:	75 27                	jne    c00142a0 <SysKill(regs*)+0x9c>
c0014279:	8d 76 00             	lea    esi,[esi+0x0]
c001427c:	51                   	push   ecx
c001427d:	51                   	push   ecx
c001427e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014281:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014286:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014289:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001428f:	e8 1b c7 ff ff       	call   c00109af <KeRaiseSignal(SigHandlerBlock*, int)>
c0014294:	83 c4 10             	add    esp,0x10
c0014297:	31 c0                	xor    eax,eax
c0014299:	31 d2                	xor    edx,edx
c001429b:	eb 1b                	jmp    c00142b8 <SysKill(regs*)+0xb4>
c001429d:	8d 76 00             	lea    esi,[esi+0x0]
c00142a0:	52                   	push   edx
c00142a1:	52                   	push   edx
c00142a2:	50                   	push   eax
c00142a3:	68 40 da 02 c0       	push   0xc002da40
c00142a8:	e8 c7 d3 00 00       	call   c0021674 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00142ad:	eb b9                	jmp    c0014268 <SysKill(regs*)+0x64>
c00142af:	90                   	nop
c00142b0:	83 c8 ff             	or     eax,0xffffffff
c00142b3:	89 c2                	mov    edx,eax
c00142b5:	8d 76 00             	lea    esi,[esi+0x0]
c00142b8:	83 c4 08             	add    esp,0x8
c00142bb:	5b                   	pop    ebx
c00142bc:	c3                   	ret    

c00142bd <SysLoadDLL(regs*)>:
c00142bd:	56                   	push   esi
c00142be:	53                   	push   ebx
c00142bf:	31 d2                	xor    edx,edx
c00142c1:	51                   	push   ecx
c00142c2:	b8 01 00 00 00       	mov    eax,0x1
c00142c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142cb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00142cf:	0f 84 8c 00 00 00    	je     c0014361 <SysLoadDLL(regs*)+0xa4>
c00142d5:	83 ec 0c             	sub    esp,0xc
c00142d8:	68 14 01 00 00       	push   0x114
c00142dd:	e8 3d b2 ff ff       	call   c000f51f <malloc>
c00142e2:	83 c4 0c             	add    esp,0xc
c00142e5:	89 c3                	mov    ebx,eax
c00142e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142ec:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00142ef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00142f2:	53                   	push   ebx
c00142f3:	e8 3a 3e ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00142f8:	83 c4 10             	add    esp,0x10
c00142fb:	31 d2                	xor    edx,edx
c00142fd:	b8 02 00 00 00       	mov    eax,0x2
c0014302:	85 db                	test   ebx,ebx
c0014304:	74 5b                	je     c0014361 <SysLoadDLL(regs*)+0xa4>
c0014306:	83 ec 0c             	sub    esp,0xc
c0014309:	53                   	push   ebx
c001430a:	e8 05 41 ff ff       	call   c0008414 <File::exists()>
c001430f:	83 c4 10             	add    esp,0x10
c0014312:	84 c0                	test   al,al
c0014314:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014316:	75 11                	jne    c0014329 <SysLoadDLL(regs*)+0x6c>
c0014318:	83 ec 0c             	sub    esp,0xc
c001431b:	53                   	push   ebx
c001431c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001431f:	83 c4 10             	add    esp,0x10
c0014322:	b8 03 00 00 00       	mov    eax,0x3
c0014327:	eb 36                	jmp    c001435f <SysLoadDLL(regs*)+0xa2>
c0014329:	83 ec 0c             	sub    esp,0xc
c001432c:	53                   	push   ebx
c001432d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014330:	58                   	pop    eax
c0014331:	5a                   	pop    edx
c0014332:	6a 00                	push   0x0
c0014334:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014337:	e8 28 16 00 00       	call   c0015964 <Thr::loadDLL(char const*, bool)>
c001433c:	83 c4 10             	add    esp,0x10
c001433f:	89 c1                	mov    ecx,eax
c0014341:	31 d2                	xor    edx,edx
c0014343:	b8 04 00 00 00       	mov    eax,0x4
c0014348:	85 c9                	test   ecx,ecx
c001434a:	74 15                	je     c0014361 <SysLoadDLL(regs*)+0xa4>
c001434c:	53                   	push   ebx
c001434d:	53                   	push   ebx
c001434e:	ff 35 d0 b0 02 c0    	push   DWORD PTR ds:0xc002b0d0
c0014354:	51                   	push   ecx
c0014355:	e8 5c 18 00 00       	call   c0015bb6 <Thr::executeDLL(unsigned long, void*)>
c001435a:	83 c4 10             	add    esp,0x10
c001435d:	31 c0                	xor    eax,eax
c001435f:	31 d2                	xor    edx,edx
c0014361:	59                   	pop    ecx
c0014362:	5b                   	pop    ebx
c0014363:	5e                   	pop    esi
c0014364:	c3                   	ret    

c0014365 <SysRead(regs*)>:
c0014365:	57                   	push   edi
c0014366:	56                   	push   esi
c0014367:	53                   	push   ebx
c0014368:	83 ec 10             	sub    esp,0x10
c001436b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001436f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014372:	83 f8 02             	cmp    eax,0x2
c0014375:	77 10                	ja     c0014387 <SysRead(regs*)+0x22>
c0014377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001437c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001437f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014385:	eb 0e                	jmp    c0014395 <SysRead(regs*)+0x30>
c0014387:	83 ec 0c             	sub    esp,0xc
c001438a:	50                   	push   eax
c001438b:	e8 5d e7 ff ff       	call   c0012aed <KeGetFileFromDescriptor(int)>
c0014390:	83 c4 10             	add    esp,0x10
c0014393:	89 c1                	mov    ecx,eax
c0014395:	83 c8 ff             	or     eax,0xffffffff
c0014398:	85 c9                	test   ecx,ecx
c001439a:	89 c2                	mov    edx,eax
c001439c:	74 28                	je     c00143c6 <SysRead(regs*)+0x61>
c001439e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143a6:	31 ff                	xor    edi,edi
c00143a8:	83 ec 0c             	sub    esp,0xc
c00143ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c00143ad:	8d 54 24 18          	lea    edx,[esp+0x18]
c00143b1:	52                   	push   edx
c00143b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00143b5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00143b8:	57                   	push   edi
c00143b9:	56                   	push   esi
c00143ba:	51                   	push   ecx
c00143bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00143c2:	83 c4 20             	add    esp,0x20
c00143c5:	99                   	cdq    
c00143c6:	83 c4 10             	add    esp,0x10
c00143c9:	5b                   	pop    ebx
c00143ca:	5e                   	pop    esi
c00143cb:	5f                   	pop    edi
c00143cc:	c3                   	ret    

c00143cd <SysRegisterSignal(regs*)>:
c00143cd:	83 ec 18             	sub    esp,0x18
c00143d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143d4:	6a 00                	push   0x0
c00143d6:	6a 00                	push   0x0
c00143d8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00143db:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143e6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00143ec:	e8 88 c5 ff ff       	call   c0010979 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00143f1:	83 c4 2c             	add    esp,0x2c
c00143f4:	99                   	cdq    
c00143f5:	c3                   	ret    

c00143f6 <SysRegistryGetTypeFromPath(regs*)>:
c00143f6:	53                   	push   ebx
c00143f7:	81 ec 40 01 00 00    	sub    esp,0x140
c00143fd:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014404:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014407:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001440a:	e8 ed 93 ff ff       	call   c000d7fc <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001440f:	83 c4 10             	add    esp,0x10
c0014412:	89 c1                	mov    ecx,eax
c0014414:	85 c0                	test   eax,eax
c0014416:	74 15                	je     c001442d <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014418:	50                   	push   eax
c0014419:	8d 44 24 08          	lea    eax,[esp+0x8]
c001441d:	50                   	push   eax
c001441e:	51                   	push   ecx
c001441f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014422:	e8 b9 8f ff ff       	call   c000d3e0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014427:	83 c4 10             	add    esp,0x10
c001442a:	99                   	cdq    
c001442b:	eb 05                	jmp    c0014432 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c001442d:	83 c8 ff             	or     eax,0xffffffff
c0014430:	89 c2                	mov    edx,eax
c0014432:	81 c4 38 01 00 00    	add    esp,0x138
c0014438:	5b                   	pop    ebx
c0014439:	c3                   	ret    

c001443a <SysRegistryReadExtent(regs*)>:
c001443a:	83 ec 1c             	sub    esp,0x1c
c001443d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014441:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014444:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014447:	85 c0                	test   eax,eax
c0014449:	79 1f                	jns    c001446a <SysRegistryReadExtent(regs*)+0x30>
c001444b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014450:	52                   	push   edx
c0014451:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014455:	52                   	push   edx
c0014456:	50                   	push   eax
c0014457:	51                   	push   ecx
c0014458:	e8 75 8e ff ff       	call   c000d2d2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001445d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014461:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014465:	83 c4 10             	add    esp,0x10
c0014468:	eb 14                	jmp    c001447e <SysRegistryReadExtent(regs*)+0x44>
c001446a:	83 ec 04             	sub    esp,0x4
c001446d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014470:	50                   	push   eax
c0014471:	51                   	push   ecx
c0014472:	e8 f5 88 ff ff       	call   c000cd6c <CmGetString(Reghive_Tag*, int, char*)>
c0014477:	83 c4 10             	add    esp,0x10
c001447a:	31 c0                	xor    eax,eax
c001447c:	31 d2                	xor    edx,edx
c001447e:	83 c4 1c             	add    esp,0x1c
c0014481:	c3                   	ret    

c0014482 <SysRegistryPathToExtentLookup(regs*)>:
c0014482:	83 ec 14             	sub    esp,0x14
c0014485:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014489:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001448c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001448f:	e8 68 93 ff ff       	call   c000d7fc <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014494:	83 c4 1c             	add    esp,0x1c
c0014497:	99                   	cdq    
c0014498:	c3                   	ret    

c0014499 <SysRegistryEnterDirectory(regs*)>:
c0014499:	83 ec 14             	sub    esp,0x14
c001449c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144a0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00144a3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00144a6:	e8 38 89 ff ff       	call   c000cde3 <CmEnterDirectory(Reghive_Tag*, int)>
c00144ab:	83 c4 1c             	add    esp,0x1c
c00144ae:	99                   	cdq    
c00144af:	c3                   	ret    

c00144b0 <SysRegistryGetNext(regs*)>:
c00144b0:	83 ec 14             	sub    esp,0x14
c00144b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144b7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00144ba:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00144bd:	e8 60 89 ff ff       	call   c000ce22 <CmGetNext(Reghive_Tag*, int)>
c00144c2:	83 c4 1c             	add    esp,0x1c
c00144c5:	99                   	cdq    
c00144c6:	c3                   	ret    

c00144c7 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00144c7:	57                   	push   edi
c00144c8:	56                   	push   esi
c00144c9:	53                   	push   ebx
c00144ca:	81 ec 34 01 00 00    	sub    esp,0x134
c00144d0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00144d7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00144db:	57                   	push   edi
c00144dc:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00144df:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00144e2:	e8 f9 8e ff ff       	call   c000d3e0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00144e7:	89 c3                	mov    ebx,eax
c00144e9:	58                   	pop    eax
c00144ea:	5a                   	pop    edx
c00144eb:	57                   	push   edi
c00144ec:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00144ef:	e8 4c c1 fe ff       	call   c0000640 <strcpy>
c00144f4:	89 d8                	mov    eax,ebx
c00144f6:	81 c4 40 01 00 00    	add    esp,0x140
c00144fc:	99                   	cdq    
c00144fd:	5b                   	pop    ebx
c00144fe:	5e                   	pop    esi
c00144ff:	5f                   	pop    edi
c0014500:	c3                   	ret    

c0014501 <SysRegistryOpen(regs*)>:
c0014501:	83 ec 18             	sub    esp,0x18
c0014504:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014508:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001450b:	e8 ec 86 ff ff       	call   c000cbfc <CmOpen(char const*)>
c0014510:	83 c4 1c             	add    esp,0x1c
c0014513:	99                   	cdq    
c0014514:	c3                   	ret    

c0014515 <SysRegistryClose(regs*)>:
c0014515:	83 ec 18             	sub    esp,0x18
c0014518:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001451c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001451f:	e8 f6 87 ff ff       	call   c000cd1a <CmClose(Reghive_Tag*)>
c0014524:	31 c0                	xor    eax,eax
c0014526:	31 d2                	xor    edx,edx
c0014528:	83 c4 1c             	add    esp,0x1c
c001452b:	c3                   	ret    

c001452c <SysRegistryEasyReadString(regs*)>:
c001452c:	57                   	push   edi
c001452d:	56                   	push   esi
c001452e:	53                   	push   ebx
c001452f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014533:	83 ec 0c             	sub    esp,0xc
c0014536:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014539:	e8 be 86 ff ff       	call   c000cbfc <CmOpen(char const*)>
c001453e:	5a                   	pop    edx
c001453f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014542:	59                   	pop    ecx
c0014543:	89 c3                	mov    ebx,eax
c0014545:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014548:	50                   	push   eax
c0014549:	e8 ae 92 ff ff       	call   c000d7fc <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001454e:	83 c4 10             	add    esp,0x10
c0014551:	89 c1                	mov    ecx,eax
c0014553:	b8 01 00 00 00       	mov    eax,0x1
c0014558:	85 c9                	test   ecx,ecx
c001455a:	7e 16                	jle    c0014572 <SysRegistryEasyReadString(regs*)+0x46>
c001455c:	50                   	push   eax
c001455d:	57                   	push   edi
c001455e:	51                   	push   ecx
c001455f:	53                   	push   ebx
c0014560:	e8 07 88 ff ff       	call   c000cd6c <CmGetString(Reghive_Tag*, int, char*)>
c0014565:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014568:	e8 ad 87 ff ff       	call   c000cd1a <CmClose(Reghive_Tag*)>
c001456d:	83 c4 10             	add    esp,0x10
c0014570:	31 c0                	xor    eax,eax
c0014572:	5b                   	pop    ebx
c0014573:	31 d2                	xor    edx,edx
c0014575:	5e                   	pop    esi
c0014576:	5f                   	pop    edi
c0014577:	c3                   	ret    

c0014578 <SysRegistryEasyReadInteger(regs*)>:
c0014578:	56                   	push   esi
c0014579:	53                   	push   ebx
c001457a:	83 ec 10             	sub    esp,0x10
c001457d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014581:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014584:	e8 73 86 ff ff       	call   c000cbfc <CmOpen(char const*)>
c0014589:	5a                   	pop    edx
c001458a:	89 c3                	mov    ebx,eax
c001458c:	59                   	pop    ecx
c001458d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014590:	50                   	push   eax
c0014591:	e8 66 92 ff ff       	call   c000d7fc <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014596:	83 c4 10             	add    esp,0x10
c0014599:	89 c1                	mov    ecx,eax
c001459b:	b8 01 00 00 00       	mov    eax,0x1
c00145a0:	85 c9                	test   ecx,ecx
c00145a2:	7e 18                	jle    c00145bc <SysRegistryEasyReadInteger(regs*)+0x44>
c00145a4:	50                   	push   eax
c00145a5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00145a8:	51                   	push   ecx
c00145a9:	53                   	push   ebx
c00145aa:	e8 23 8d ff ff       	call   c000d2d2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00145af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145b2:	e8 63 87 ff ff       	call   c000cd1a <CmClose(Reghive_Tag*)>
c00145b7:	83 c4 10             	add    esp,0x10
c00145ba:	31 c0                	xor    eax,eax
c00145bc:	59                   	pop    ecx
c00145bd:	31 d2                	xor    edx,edx
c00145bf:	5b                   	pop    ebx
c00145c0:	5e                   	pop    esi
c00145c1:	c3                   	ret    

c00145c2 <SysSbrk(regs*)>:
c00145c2:	56                   	push   esi
c00145c3:	53                   	push   ebx
c00145c4:	50                   	push   eax
c00145c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00145ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145d1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00145d4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00145da:	85 db                	test   ebx,ebx
c00145dc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00145df:	74 02                	je     c00145e3 <SysSbrk(regs*)+0x21>
c00145e1:	79 06                	jns    c00145e9 <SysSbrk(regs*)+0x27>
c00145e3:	89 f0                	mov    eax,esi
c00145e5:	31 d2                	xor    edx,edx
c00145e7:	eb 2a                	jmp    c0014613 <SysSbrk(regs*)+0x51>
c00145e9:	83 c8 ff             	or     eax,0xffffffff
c00145ec:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00145f2:	89 c2                	mov    edx,eax
c00145f4:	77 1d                	ja     c0014613 <SysSbrk(regs*)+0x51>
c00145f6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00145fc:	50                   	push   eax
c00145fd:	c1 ea 0c             	shr    edx,0xc
c0014600:	68 07 0c 00 00       	push   0xc07
c0014605:	52                   	push   edx
c0014606:	51                   	push   ecx
c0014607:	e8 34 ee ff ff       	call   c0013440 <VAS::allocatePages(int, int)>
c001460c:	89 f0                	mov    eax,esi
c001460e:	31 d2                	xor    edx,edx
c0014610:	83 c4 10             	add    esp,0x10
c0014613:	59                   	pop    ecx
c0014614:	5b                   	pop    ebx
c0014615:	5e                   	pop    esi
c0014616:	c3                   	ret    

c0014617 <SysSetCwd(regs*)>:
c0014617:	83 ec 14             	sub    esp,0x14
c001461a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001461e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014621:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014626:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014629:	e8 85 3e ff ff       	call   c00084b3 <Fs::setcwd(Process*, char*)>
c001462e:	83 c4 1c             	add    esp,0x1c
c0014631:	99                   	cdq    
c0014632:	c3                   	ret    

c0014633 <SysSetTime(regs*)>:
c0014633:	55                   	push   ebp
c0014634:	31 d2                	xor    edx,edx
c0014636:	57                   	push   edi
c0014637:	56                   	push   esi
c0014638:	be 18 00 00 00       	mov    esi,0x18
c001463d:	53                   	push   ebx
c001463e:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014643:	83 ec 20             	sub    esp,0x20
c0014646:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001464a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001464d:	f7 f3                	div    ebx
c001464f:	89 d7                	mov    edi,edx
c0014651:	31 d2                	xor    edx,edx
c0014653:	f7 f3                	div    ebx
c0014655:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014658:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001465c:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014661:	31 d2                	xor    edx,edx
c0014663:	f7 f3                	div    ebx
c0014665:	31 d2                	xor    edx,edx
c0014667:	f7 f6                	div    esi
c0014669:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001466c:	89 d5                	mov    ebp,edx
c001466e:	89 c3                	mov    ebx,eax
c0014670:	be 0c 00 00 00       	mov    esi,0xc
c0014675:	83 e3 1f             	and    ebx,0x1f
c0014678:	c1 e8 05             	shr    eax,0x5
c001467b:	43                   	inc    ebx
c001467c:	31 d2                	xor    edx,edx
c001467e:	f7 f6                	div    esi
c0014680:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014684:	57                   	push   edi
c0014685:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014689:	55                   	push   ebp
c001468a:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c001468e:	56                   	push   esi
c001468f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014693:	53                   	push   ebx
c0014694:	68 b2 3f 02 c0       	push   0xc0023fb2
c0014699:	e8 c6 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001469e:	83 c4 1c             	add    esp,0x1c
c00146a1:	57                   	push   edi
c00146a2:	c1 e7 10             	shl    edi,0x10
c00146a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146a9:	55                   	push   ebp
c00146aa:	56                   	push   esi
c00146ab:	c1 e6 10             	shl    esi,0x10
c00146ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00146b2:	53                   	push   ebx
c00146b3:	68 d4 3f 02 c0       	push   0xc0023fd4
c00146b8:	e8 a7 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00146bd:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c00146c2:	31 d2                	xor    edx,edx
c00146c4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00146ca:	31 c0                	xor    eax,eax
c00146cc:	88 d8                	mov    al,bl
c00146ce:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c00146d2:	0f b7 d8             	movzx  ebx,ax
c00146d5:	09 f3                	or     ebx,esi
c00146d7:	89 d8                	mov    eax,ebx
c00146d9:	89 eb                	mov    ebx,ebp
c00146db:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c00146df:	88 da                	mov    dl,bl
c00146e1:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c00146e5:	83 c4 1c             	add    esp,0x1c
c00146e8:	89 d6                	mov    esi,edx
c00146ea:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c00146f0:	09 fe                	or     esi,edi
c00146f2:	56                   	push   esi
c00146f3:	50                   	push   eax
c00146f4:	51                   	push   ecx
c00146f5:	e8 9a 48 ff ff       	call   c0008f94 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00146fa:	83 c4 2c             	add    esp,0x2c
c00146fd:	83 f0 01             	xor    eax,0x1
c0014700:	5b                   	pop    ebx
c0014701:	0f b6 c0             	movzx  eax,al
c0014704:	5e                   	pop    esi
c0014705:	31 d2                	xor    edx,edx
c0014707:	5f                   	pop    edi
c0014708:	5d                   	pop    ebp
c0014709:	c3                   	ret    

c001470a <SysSymlink(regs*)>:
c001470a:	56                   	push   esi
c001470b:	83 c8 ff             	or     eax,0xffffffff
c001470e:	53                   	push   ebx
c001470f:	89 c2                	mov    edx,eax
c0014711:	81 ec 34 02 00 00    	sub    esp,0x234
c0014717:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c001471e:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014722:	74 50                	je     c0014774 <SysSymlink(regs*)+0x6a>
c0014724:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014727:	85 c9                	test   ecx,ecx
c0014729:	74 49                	je     c0014774 <SysSymlink(regs*)+0x6a>
c001472b:	6a 01                	push   0x1
c001472d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014732:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014735:	05 0c 01 00 00       	add    eax,0x10c
c001473a:	50                   	push   eax
c001473b:	51                   	push   ecx
c001473c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014740:	56                   	push   esi
c0014741:	e8 d4 36 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014746:	6a 01                	push   0x1
c0014748:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001474d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014750:	05 0c 01 00 00       	add    eax,0x10c
c0014755:	50                   	push   eax
c0014756:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014759:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014760:	53                   	push   ebx
c0014761:	e8 b4 36 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014766:	83 c4 18             	add    esp,0x18
c0014769:	56                   	push   esi
c001476a:	53                   	push   ebx
c001476b:	e8 d8 32 ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c0014770:	83 c4 10             	add    esp,0x10
c0014773:	99                   	cdq    
c0014774:	81 c4 34 02 00 00    	add    esp,0x234
c001477a:	5b                   	pop    ebx
c001477b:	5e                   	pop    esi
c001477c:	c3                   	ret    

c001477d <SysTimezone(regs*)>:
c001477d:	83 ec 0c             	sub    esp,0xc
c0014780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014784:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014788:	75 17                	jne    c00147a1 <SysTimezone(regs*)+0x24>
c001478a:	83 ec 0c             	sub    esp,0xc
c001478d:	68 f6 3f 02 c0       	push   0xc0023ff6
c0014792:	e8 cd 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014797:	83 c8 ff             	or     eax,0xffffffff
c001479a:	83 c4 10             	add    esp,0x10
c001479d:	89 c2                	mov    edx,eax
c001479f:	eb 16                	jmp    c00147b7 <SysTimezone(regs*)+0x3a>
c00147a1:	83 ec 0c             	sub    esp,0xc
c00147a4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00147a7:	e8 24 45 ff ff       	call   c0008cd0 <KeSetTimezone(int)>
c00147ac:	31 d2                	xor    edx,edx
c00147ae:	83 f0 01             	xor    eax,0x1
c00147b1:	83 c4 10             	add    esp,0x10
c00147b4:	0f b6 c0             	movzx  eax,al
c00147b7:	83 c4 0c             	add    esp,0xc
c00147ba:	c3                   	ret    

c00147bb <SysTruncate(regs*)>:
c00147bb:	55                   	push   ebp
c00147bc:	57                   	push   edi
c00147bd:	31 ff                	xor    edi,edi
c00147bf:	56                   	push   esi
c00147c0:	53                   	push   ebx
c00147c1:	83 ec 0c             	sub    esp,0xc
c00147c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147c8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00147cb:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00147ce:	89 ce                	mov    esi,ecx
c00147d0:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00147d4:	0f 84 9a 00 00 00    	je     c0014874 <SysTruncate(regs*)+0xb9>
c00147da:	83 ec 0c             	sub    esp,0xc
c00147dd:	68 14 01 00 00       	push   0x114
c00147e2:	e8 38 ad ff ff       	call   c000f51f <malloc>
c00147e7:	83 c4 0c             	add    esp,0xc
c00147ea:	89 c3                	mov    ebx,eax
c00147ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147f1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00147f4:	55                   	push   ebp
c00147f5:	53                   	push   ebx
c00147f6:	e8 37 39 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00147fb:	83 c4 10             	add    esp,0x10
c00147fe:	31 d2                	xor    edx,edx
c0014800:	b8 03 00 00 00       	mov    eax,0x3
c0014805:	85 db                	test   ebx,ebx
c0014807:	0f 84 a2 00 00 00    	je     c00148af <SysTruncate(regs*)+0xf4>
c001480d:	51                   	push   ecx
c001480e:	51                   	push   ecx
c001480f:	6a 02                	push   0x2
c0014811:	53                   	push   ebx
c0014812:	e8 39 39 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0014817:	83 c4 10             	add    esp,0x10
c001481a:	85 c0                	test   eax,eax
c001481c:	74 13                	je     c0014831 <SysTruncate(regs*)+0x76>
c001481e:	83 ec 0c             	sub    esp,0xc
c0014821:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014823:	53                   	push   ebx
c0014824:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014827:	83 c4 10             	add    esp,0x10
c001482a:	b8 04 00 00 00       	mov    eax,0x4
c001482f:	eb 7c                	jmp    c00148ad <SysTruncate(regs*)+0xf2>
c0014831:	52                   	push   edx
c0014832:	57                   	push   edi
c0014833:	56                   	push   esi
c0014834:	53                   	push   ebx
c0014835:	e8 2a 3a ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c001483a:	83 c4 10             	add    esp,0x10
c001483d:	85 c0                	test   eax,eax
c001483f:	74 1b                	je     c001485c <SysTruncate(regs*)+0xa1>
c0014841:	83 ec 0c             	sub    esp,0xc
c0014844:	53                   	push   ebx
c0014845:	e8 64 39 ff ff       	call   c00081ae <File::close()>
c001484a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001484c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001484f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014852:	83 c4 10             	add    esp,0x10
c0014855:	b8 05 00 00 00       	mov    eax,0x5
c001485a:	eb 51                	jmp    c00148ad <SysTruncate(regs*)+0xf2>
c001485c:	83 ec 0c             	sub    esp,0xc
c001485f:	53                   	push   ebx
c0014860:	e8 49 39 ff ff       	call   c00081ae <File::close()>
c0014865:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014867:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001486a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001486d:	83 c4 10             	add    esp,0x10
c0014870:	31 c0                	xor    eax,eax
c0014872:	eb 39                	jmp    c00148ad <SysTruncate(regs*)+0xf2>
c0014874:	31 d2                	xor    edx,edx
c0014876:	b8 01 00 00 00       	mov    eax,0x1
c001487b:	83 fd 02             	cmp    ebp,0x2
c001487e:	7e 2f                	jle    c00148af <SysTruncate(regs*)+0xf4>
c0014880:	83 ec 0c             	sub    esp,0xc
c0014883:	51                   	push   ecx
c0014884:	e8 64 e2 ff ff       	call   c0012aed <KeGetFileFromDescriptor(int)>
c0014889:	83 c4 10             	add    esp,0x10
c001488c:	89 c1                	mov    ecx,eax
c001488e:	31 d2                	xor    edx,edx
c0014890:	b8 02 00 00 00       	mov    eax,0x2
c0014895:	85 c9                	test   ecx,ecx
c0014897:	74 16                	je     c00148af <SysTruncate(regs*)+0xf4>
c0014899:	50                   	push   eax
c001489a:	57                   	push   edi
c001489b:	56                   	push   esi
c001489c:	51                   	push   ecx
c001489d:	e8 c2 39 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c00148a2:	83 c4 10             	add    esp,0x10
c00148a5:	85 c0                	test   eax,eax
c00148a7:	0f 95 c0             	setne  al
c00148aa:	0f b6 c0             	movzx  eax,al
c00148ad:	31 d2                	xor    edx,edx
c00148af:	83 c4 0c             	add    esp,0xc
c00148b2:	5b                   	pop    ebx
c00148b3:	5e                   	pop    esi
c00148b4:	5f                   	pop    edi
c00148b5:	5d                   	pop    ebp
c00148b6:	c3                   	ret    

c00148b7 <SysWrite(regs*)>:
c00148b7:	57                   	push   edi
c00148b8:	56                   	push   esi
c00148b9:	53                   	push   ebx
c00148ba:	83 ec 10             	sub    esp,0x10
c00148bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00148c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00148c4:	83 f8 02             	cmp    eax,0x2
c00148c7:	77 10                	ja     c00148d9 <SysWrite(regs*)+0x22>
c00148c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148d1:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00148d7:	eb 0e                	jmp    c00148e7 <SysWrite(regs*)+0x30>
c00148d9:	83 ec 0c             	sub    esp,0xc
c00148dc:	50                   	push   eax
c00148dd:	e8 0b e2 ff ff       	call   c0012aed <KeGetFileFromDescriptor(int)>
c00148e2:	83 c4 10             	add    esp,0x10
c00148e5:	89 c1                	mov    ecx,eax
c00148e7:	83 c8 ff             	or     eax,0xffffffff
c00148ea:	85 c9                	test   ecx,ecx
c00148ec:	89 c2                	mov    edx,eax
c00148ee:	74 28                	je     c0014918 <SysWrite(regs*)+0x61>
c00148f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148f8:	31 ff                	xor    edi,edi
c00148fa:	83 ec 0c             	sub    esp,0xc
c00148fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00148ff:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014903:	52                   	push   edx
c0014904:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014907:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001490a:	57                   	push   edi
c001490b:	56                   	push   esi
c001490c:	51                   	push   ecx
c001490d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014910:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014914:	83 c4 20             	add    esp,0x20
c0014917:	99                   	cdq    
c0014918:	83 c4 10             	add    esp,0x10
c001491b:	5b                   	pop    ebx
c001491c:	5e                   	pop    esi
c001491d:	5f                   	pop    edi
c001491e:	c3                   	ret    

c001491f <SysWsbe(regs*)>:
c001491f:	55                   	push   ebp
c0014920:	57                   	push   edi
c0014921:	56                   	push   esi
c0014922:	53                   	push   ebx
c0014923:	83 ec 3c             	sub    esp,0x3c
c0014926:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001492a:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014931:	75 2d                	jne    c0014960 <SysWsbe(regs*)+0x41>
c0014933:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c001493a:	75 24                	jne    c0014960 <SysWsbe(regs*)+0x41>
c001493c:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0014943:	75 1b                	jne    c0014960 <SysWsbe(regs*)+0x41>
c0014945:	6a 01                	push   0x1
c0014947:	6a 00                	push   0x0
c0014949:	68 d5 97 00 c0       	push   0xc00097d5
c001494e:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0014954:	e8 d3 18 00 00       	call   c001622c <Process::createThread(void (*)(void*), void*, int)>
c0014959:	83 c4 10             	add    esp,0x10
c001495c:	31 c0                	xor    eax,eax
c001495e:	eb 52                	jmp    c00149b2 <SysWsbe(regs*)+0x93>
c0014960:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014964:	be 0b 40 02 c0       	mov    esi,0xc002400b
c0014969:	b9 0b 00 00 00       	mov    ecx,0xb
c001496e:	fc                   	cld    
c001496f:	83 ec 0c             	sub    esp,0xc
c0014972:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014974:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014978:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001497d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014980:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014986:	8b 06                	mov    eax,DWORD PTR [esi]
c0014988:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c001498b:	57                   	push   edi
c001498c:	e8 df bb fe ff       	call   c0000570 <strlen>
c0014991:	5a                   	pop    edx
c0014992:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014996:	52                   	push   edx
c0014997:	31 d2                	xor    edx,edx
c0014999:	57                   	push   edi
c001499a:	52                   	push   edx
c001499b:	50                   	push   eax
c001499c:	56                   	push   esi
c001499d:	ff d5                	call   ebp
c001499f:	83 c4 14             	add    esp,0x14
c00149a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149a5:	e8 8a 22 00 00       	call   c0016c34 <terminateTask(int)>
c00149aa:	83 c4 10             	add    esp,0x10
c00149ad:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00149b2:	83 c4 3c             	add    esp,0x3c
c00149b5:	31 d2                	xor    edx,edx
c00149b7:	5b                   	pop    ebx
c00149b8:	5e                   	pop    esi
c00149b9:	5f                   	pop    edi
c00149ba:	5d                   	pop    ebp
c00149bb:	c3                   	ret    

c00149bc <SysYield(regs*)>:
c00149bc:	83 ec 0c             	sub    esp,0xc
c00149bf:	fa                   	cli    
c00149c0:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c00149c6:	e8 b9 1a 00 00       	call   c0016484 <schedule()>
c00149cb:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c00149d2:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c00149d9:	75 01                	jne    c00149dc <SysYield(regs*)+0x20>
c00149db:	fb                   	sti    
c00149dc:	31 c0                	xor    eax,eax
c00149de:	31 d2                	xor    edx,edx
c00149e0:	83 c4 0c             	add    esp,0xc
c00149e3:	c3                   	ret    

c00149e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00149e4:	55                   	push   ebp
c00149e5:	57                   	push   edi
c00149e6:	56                   	push   esi
c00149e7:	53                   	push   ebx
c00149e8:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00149ee:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00149f6:	0f 95 c0             	setne  al
c00149f9:	31 d2                	xor    edx,edx
c00149fb:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014a03:	0f 94 c2             	sete   dl
c0014a06:	85 c2                	test   edx,eax
c0014a08:	74 34                	je     c0014a3e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014a0a:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014a15:	74 27                	je     c0014a3e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014a17:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014a1e:	05 00 10 00 00       	add    eax,0x1000
c0014a23:	89 c1                	mov    ecx,eax
c0014a25:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a2a:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0014a30:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014a37:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014a3e:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014a45:	83 ec 0c             	sub    esp,0xc
c0014a48:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014a4e:	6a 01                	push   0x1
c0014a50:	e8 04 e2 ff ff       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c0014a55:	83 c4 10             	add    esp,0x10
c0014a58:	89 c3                	mov    ebx,eax
c0014a5a:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014a60:	0f 86 26 01 00 00    	jbe    c0014b8c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0014a66:	c1 ee 0c             	shr    esi,0xc
c0014a69:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014a70:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014a74:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a7c:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014a83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014a87:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014a8e:	29 ef                	sub    edi,ebp
c0014a90:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014a94:	0f 83 f9 00 00 00    	jae    c0014b93 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0014a9a:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014aa0:	76 05                	jbe    c0014aa7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0014aa2:	bf 00 10 00 00       	mov    edi,0x1000
c0014aa7:	83 ec 0c             	sub    esp,0xc
c0014aaa:	31 d2                	xor    edx,edx
c0014aac:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014ab3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014ab5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014ab9:	50                   	push   eax
c0014aba:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014abe:	56                   	push   esi
c0014abf:	52                   	push   edx
c0014ac0:	57                   	push   edi
c0014ac1:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014ac8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014acb:	83 c4 20             	add    esp,0x20
c0014ace:	85 c0                	test   eax,eax
c0014ad0:	75 06                	jne    c0014ad8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0014ad2:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014ad6:	74 13                	je     c0014aeb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0014ad8:	83 ec 0c             	sub    esp,0xc
c0014adb:	53                   	push   ebx
c0014adc:	e8 80 e4 ff ff       	call   c0012f61 <Virt::freeKernelVirtualPages(unsigned long)>
c0014ae1:	83 c4 10             	add    esp,0x10
c0014ae4:	31 c0                	xor    eax,eax
c0014ae6:	e9 80 01 00 00       	jmp    c0014c6b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0014aeb:	fa                   	cli    
c0014aec:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0014af2:	e8 63 af ff ff       	call   c000fa5a <Phys::allocatePage()>
c0014af7:	6a 07                	push   0x7
c0014af9:	89 c7                	mov    edi,eax
c0014afb:	53                   	push   ebx
c0014afc:	50                   	push   eax
c0014afd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014b05:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014b0b:	e8 2c e8 ff ff       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c0014b10:	83 c4 0c             	add    esp,0xc
c0014b13:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014b1a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014b20:	6a 00                	push   0x0
c0014b22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b27:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014b2a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014b30:	e8 73 e6 ff ff       	call   c00131a8 <VAS::mapOtherVASIn(bool, VAS*)>
c0014b35:	58                   	pop    eax
c0014b36:	5a                   	pop    edx
c0014b37:	68 07 0c 00 00       	push   0xc07
c0014b3c:	55                   	push   ebp
c0014b3d:	57                   	push   edi
c0014b3e:	89 df                	mov    edi,ebx
c0014b40:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014b47:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014b4d:	6a 00                	push   0x0
c0014b4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014b57:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014b5d:	e8 1c ea ff ff       	call   c001357e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014b62:	b9 00 10 00 00       	mov    ecx,0x1000
c0014b67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b69:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0014b70:	83 c4 20             	add    esp,0x20
c0014b73:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0014b7a:	75 01                	jne    c0014b7d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c0014b7c:	fb                   	sti    
c0014b7d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014b83:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014b87:	e9 f0 fe ff ff       	jmp    c0014a7c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014b8c:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014b93:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014b9a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014ba0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014ba6:	0f 86 b1 00 00 00    	jbe    c0014c5d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0014bac:	fa                   	cli    
c0014bad:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0014bb3:	c1 ee 0c             	shr    esi,0xc
c0014bb6:	51                   	push   ecx
c0014bb7:	31 ff                	xor    edi,edi
c0014bb9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014bc0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014bc6:	6a 00                	push   0x0
c0014bc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bcd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014bd0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014bd6:	e8 cd e5 ff ff       	call   c00131a8 <VAS::mapOtherVASIn(bool, VAS*)>
c0014bdb:	83 c4 10             	add    esp,0x10
c0014bde:	e8 77 ae ff ff       	call   c000fa5a <Phys::allocatePage()>
c0014be3:	47                   	inc    edi
c0014be4:	6a 07                	push   0x7
c0014be6:	53                   	push   ebx
c0014be7:	50                   	push   eax
c0014be8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bf2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014bf5:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014bfb:	e8 3c e7 ff ff       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c0014c00:	58                   	pop    eax
c0014c01:	5a                   	pop    edx
c0014c02:	68 07 0c 00 00       	push   0xc07
c0014c07:	55                   	push   ebp
c0014c08:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014c0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c12:	50                   	push   eax
c0014c13:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014c1a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014c20:	6a 00                	push   0x0
c0014c22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c27:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c2a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014c30:	e8 49 e9 ff ff       	call   c001357e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014c35:	83 c4 1c             	add    esp,0x1c
c0014c38:	68 00 10 00 00       	push   0x1000
c0014c3d:	6a 00                	push   0x0
c0014c3f:	53                   	push   ebx
c0014c40:	e8 ab b8 fe ff       	call   c00004f0 <memset>
c0014c45:	83 c4 10             	add    esp,0x10
c0014c48:	39 fe                	cmp    esi,edi
c0014c4a:	77 92                	ja     c0014bde <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0014c4c:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0014c53:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0014c5a:	75 01                	jne    c0014c5d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0014c5c:	fb                   	sti    
c0014c5d:	83 ec 0c             	sub    esp,0xc
c0014c60:	53                   	push   ebx
c0014c61:	e8 fb e2 ff ff       	call   c0012f61 <Virt::freeKernelVirtualPages(unsigned long)>
c0014c66:	83 c4 10             	add    esp,0x10
c0014c69:	b0 01                	mov    al,0x1
c0014c6b:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014c71:	5b                   	pop    ebx
c0014c72:	5e                   	pop    esi
c0014c73:	5f                   	pop    edi
c0014c74:	5d                   	pop    ebp
c0014c75:	c3                   	ret    

c0014c76 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014c76:	55                   	push   ebp
c0014c77:	57                   	push   edi
c0014c78:	56                   	push   esi
c0014c79:	53                   	push   ebx
c0014c7a:	83 ec 48             	sub    esp,0x48
c0014c7d:	68 14 01 00 00       	push   0x114
c0014c82:	e8 98 a8 ff ff       	call   c000f51f <malloc>
c0014c87:	83 c4 0c             	add    esp,0xc
c0014c8a:	89 c6                	mov    esi,eax
c0014c8c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014c90:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014c94:	50                   	push   eax
c0014c95:	e8 98 34 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014c9a:	58                   	pop    eax
c0014c9b:	5a                   	pop    edx
c0014c9c:	6a 01                	push   0x1
c0014c9e:	56                   	push   esi
c0014c9f:	e8 ac 34 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0014ca4:	83 c4 10             	add    esp,0x10
c0014ca7:	85 c0                	test   eax,eax
c0014ca9:	0f 85 43 01 00 00    	jne    c0014df2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014caf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014cb7:	83 ec 0c             	sub    esp,0xc
c0014cba:	6a 34                	push   0x34
c0014cbc:	e8 5e a8 ff ff       	call   c000f51f <malloc>
c0014cc1:	89 c3                	mov    ebx,eax
c0014cc3:	58                   	pop    eax
c0014cc4:	8b 06                	mov    eax,DWORD PTR [esi]
c0014cc6:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014cca:	57                   	push   edi
c0014ccb:	53                   	push   ebx
c0014ccc:	6a 00                	push   0x0
c0014cce:	6a 34                	push   0x34
c0014cd0:	56                   	push   esi
c0014cd1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cd4:	83 c4 20             	add    esp,0x20
c0014cd7:	85 c0                	test   eax,eax
c0014cd9:	0f 85 13 01 00 00    	jne    c0014df2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014cdf:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014ce5:	0f 85 07 01 00 00    	jne    c0014df2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014ceb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014cee:	85 c0                	test   eax,eax
c0014cf0:	0f 84 fc 00 00 00    	je     c0014df2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014cf6:	31 d2                	xor    edx,edx
c0014cf8:	55                   	push   ebp
c0014cf9:	52                   	push   edx
c0014cfa:	50                   	push   eax
c0014cfb:	56                   	push   esi
c0014cfc:	e8 0d 35 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014d01:	83 c4 10             	add    esp,0x10
c0014d04:	85 c0                	test   eax,eax
c0014d06:	0f 85 e6 00 00 00    	jne    c0014df2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014d0c:	83 ec 0c             	sub    esp,0xc
c0014d0f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014d12:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014d16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d1a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014d1e:	0f af c2             	imul   eax,edx
c0014d21:	50                   	push   eax
c0014d22:	e8 f8 a7 ff ff       	call   c000f51f <malloc>
c0014d27:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014d29:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014d2d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014d30:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d34:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014d38:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014d3c:	0f af c2             	imul   eax,edx
c0014d3f:	99                   	cdq    
c0014d40:	52                   	push   edx
c0014d41:	50                   	push   eax
c0014d42:	56                   	push   esi
c0014d43:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d46:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014d49:	83 c4 20             	add    esp,0x20
c0014d4c:	85 c0                	test   eax,eax
c0014d4e:	0f 84 9e 00 00 00    	je     c0014df2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014d54:	31 d2                	xor    edx,edx
c0014d56:	51                   	push   ecx
c0014d57:	52                   	push   edx
c0014d58:	50                   	push   eax
c0014d59:	56                   	push   esi
c0014d5a:	e8 af 34 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014d5f:	83 c4 10             	add    esp,0x10
c0014d62:	85 c0                	test   eax,eax
c0014d64:	0f 85 88 00 00 00    	jne    c0014df2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014d6a:	83 ec 0c             	sub    esp,0xc
c0014d6d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014d71:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014d75:	31 ed                	xor    ebp,ebp
c0014d77:	0f af c2             	imul   eax,edx
c0014d7a:	50                   	push   eax
c0014d7b:	e8 9f a7 ff ff       	call   c000f51f <malloc>
c0014d80:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014d82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014d89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d8d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014d91:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014d95:	0f af c2             	imul   eax,edx
c0014d98:	99                   	cdq    
c0014d99:	52                   	push   edx
c0014d9a:	50                   	push   eax
c0014d9b:	56                   	push   esi
c0014d9c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d9f:	83 c4 20             	add    esp,0x20
c0014da2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014daa:	0f b7 fd             	movzx  edi,bp
c0014dad:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014db1:	73 7d                	jae    c0014e30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014db3:	c1 e7 05             	shl    edi,0x5
c0014db6:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014dba:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014dbd:	75 6b                	jne    c0014e2a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014dbf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014dc2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014dc6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014dc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014dcd:	52                   	push   edx
c0014dce:	31 d2                	xor    edx,edx
c0014dd0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014dd3:	52                   	push   edx
c0014dd4:	50                   	push   eax
c0014dd5:	56                   	push   esi
c0014dd6:	e8 33 34 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014ddb:	83 c4 10             	add    esp,0x10
c0014dde:	85 c0                	test   eax,eax
c0014de0:	74 17                	je     c0014df9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014de2:	83 ec 0c             	sub    esp,0xc
c0014de5:	68 37 40 02 c0       	push   0xc0024037
c0014dea:	e8 75 21 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014def:	83 c4 10             	add    esp,0x10
c0014df2:	31 c0                	xor    eax,eax
c0014df4:	e9 87 00 00 00       	jmp    c0014e80 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014df9:	83 ec 0c             	sub    esp,0xc
c0014dfc:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014dff:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014e02:	50                   	push   eax
c0014e03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014e07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e0b:	56                   	push   esi
c0014e0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014e10:	e8 cf fb ff ff       	call   c00149e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014e15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014e19:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014e1d:	83 c4 20             	add    esp,0x20
c0014e20:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014e24:	73 04                	jae    c0014e2a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014e26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014e2a:	45                   	inc    ebp
c0014e2b:	e9 7a ff ff ff       	jmp    c0014daa <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014e30:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014e34:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014e38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e3c:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014e42:	83 ec 0c             	sub    esp,0xc
c0014e45:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014e4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014e50:	05 00 10 00 00       	add    eax,0x1000
c0014e55:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e5c:	e8 ce a6 ff ff       	call   c000f52f <free>
c0014e61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e64:	e8 c6 a6 ff ff       	call   c000f52f <free>
c0014e69:	58                   	pop    eax
c0014e6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e6e:	e8 bc a6 ff ff       	call   c000f52f <free>
c0014e73:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e76:	e8 33 33 ff ff       	call   c00081ae <File::close()>
c0014e7b:	83 c4 10             	add    esp,0x10
c0014e7e:	b0 01                	mov    al,0x1
c0014e80:	83 c4 3c             	add    esp,0x3c
c0014e83:	5b                   	pop    ebx
c0014e84:	5e                   	pop    esi
c0014e85:	5f                   	pop    edi
c0014e86:	5d                   	pop    ebp
c0014e87:	c3                   	ret    

c0014e88 <Thr::runtimeReferenceHelper()>:
c0014e88:	83 ec 18             	sub    esp,0x18
c0014e8b:	68 3f 40 02 c0       	push   0xc002403f
c0014e90:	e8 cf 20 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014e95:	fa                   	cli    
c0014e96:	83 c4 10             	add    esp,0x10
c0014e99:	eb fe                	jmp    c0014e99 <Thr::runtimeReferenceHelper()+0x11>

c0014e9b <Thr::getAddressOfKernelSymbol(char const*)>:
c0014e9b:	57                   	push   edi
c0014e9c:	56                   	push   esi
c0014e9d:	53                   	push   ebx
c0014e9e:	31 db                	xor    ebx,ebx
c0014ea0:	39 1d 00 da 02 c0    	cmp    DWORD PTR ds:0xc002da00,ebx
c0014ea6:	7e 3c                	jle    c0014ee4 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014ea8:	8b 34 9d 80 d9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2680]
c0014eaf:	31 ff                	xor    edi,edi
c0014eb1:	39 3c 9d 80 d8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2780],edi
c0014eb8:	7e 27                	jle    c0014ee1 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014eba:	50                   	push   eax
c0014ebb:	50                   	push   eax
c0014ebc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ec0:	8b 06                	mov    eax,DWORD PTR [esi]
c0014ec2:	03 04 9d 00 d9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2700]
c0014ec9:	50                   	push   eax
c0014eca:	e8 81 b8 fe ff       	call   c0000750 <strcmp>
c0014ecf:	83 c4 10             	add    esp,0x10
c0014ed2:	85 c0                	test   eax,eax
c0014ed4:	75 05                	jne    c0014edb <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014ed6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014ed9:	eb 0b                	jmp    c0014ee6 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014edb:	83 c6 10             	add    esi,0x10
c0014ede:	47                   	inc    edi
c0014edf:	eb d0                	jmp    c0014eb1 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014ee1:	43                   	inc    ebx
c0014ee2:	eb bc                	jmp    c0014ea0 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014ee4:	31 c0                	xor    eax,eax
c0014ee6:	5b                   	pop    ebx
c0014ee7:	5e                   	pop    esi
c0014ee8:	5f                   	pop    edi
c0014ee9:	c3                   	ret    

c0014eea <Thr::loadKernelSymbolTable(char const*)>:
c0014eea:	55                   	push   ebp
c0014eeb:	57                   	push   edi
c0014eec:	56                   	push   esi
c0014eed:	53                   	push   ebx
c0014eee:	83 ec 68             	sub    esp,0x68
c0014ef1:	8b 35 58 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da58
c0014ef7:	68 14 01 00 00       	push   0x114
c0014efc:	e8 1e a6 ff ff       	call   c000f51f <malloc>
c0014f01:	83 c4 0c             	add    esp,0xc
c0014f04:	89 c3                	mov    ebx,eax
c0014f06:	56                   	push   esi
c0014f07:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014f0b:	50                   	push   eax
c0014f0c:	e8 21 32 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014f11:	5e                   	pop    esi
c0014f12:	5f                   	pop    edi
c0014f13:	6a 01                	push   0x1
c0014f15:	53                   	push   ebx
c0014f16:	e8 35 32 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0014f1b:	83 c4 10             	add    esp,0x10
c0014f1e:	85 c0                	test   eax,eax
c0014f20:	74 0a                	je     c0014f2c <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014f22:	83 ec 0c             	sub    esp,0xc
c0014f25:	68 61 40 02 c0       	push   0xc0024061
c0014f2a:	eb 34                	jmp    c0014f60 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014f2c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014f34:	83 ec 0c             	sub    esp,0xc
c0014f37:	6a 34                	push   0x34
c0014f39:	e8 e1 a5 ff ff       	call   c000f51f <malloc>
c0014f3e:	59                   	pop    ecx
c0014f3f:	89 c7                	mov    edi,eax
c0014f41:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014f45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f47:	56                   	push   esi
c0014f48:	57                   	push   edi
c0014f49:	6a 00                	push   0x0
c0014f4b:	6a 34                	push   0x34
c0014f4d:	53                   	push   ebx
c0014f4e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f51:	83 c4 20             	add    esp,0x20
c0014f54:	85 c0                	test   eax,eax
c0014f56:	74 17                	je     c0014f6f <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014f58:	83 ec 0c             	sub    esp,0xc
c0014f5b:	68 78 40 02 c0       	push   0xc0024078
c0014f60:	e8 01 a9 ff ff       	call   c000f866 <KePanic(char const*)>
c0014f65:	83 c4 10             	add    esp,0x10
c0014f68:	31 c0                	xor    eax,eax
c0014f6a:	e9 31 02 00 00       	jmp    c00151a0 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014f6f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014f75:	75 e1                	jne    c0014f58 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014f77:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014f7a:	85 c0                	test   eax,eax
c0014f7c:	74 da                	je     c0014f58 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014f7e:	52                   	push   edx
c0014f7f:	31 d2                	xor    edx,edx
c0014f81:	52                   	push   edx
c0014f82:	50                   	push   eax
c0014f83:	53                   	push   ebx
c0014f84:	e8 85 32 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014f89:	83 c4 10             	add    esp,0x10
c0014f8c:	85 c0                	test   eax,eax
c0014f8e:	75 c8                	jne    c0014f58 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014f90:	83 ec 0c             	sub    esp,0xc
c0014f93:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f97:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f9b:	31 ed                	xor    ebp,ebp
c0014f9d:	0f af c2             	imul   eax,edx
c0014fa0:	50                   	push   eax
c0014fa1:	e8 79 a5 ff ff       	call   c000f51f <malloc>
c0014fa6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014fa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014fac:	89 34 24             	mov    DWORD PTR [esp],esi
c0014faf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fb3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014fb7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014fbb:	0f af c2             	imul   eax,edx
c0014fbe:	99                   	cdq    
c0014fbf:	52                   	push   edx
c0014fc0:	50                   	push   eax
c0014fc1:	53                   	push   ebx
c0014fc2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fc5:	83 c4 20             	add    esp,0x20
c0014fc8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014fd0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014fd8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014fe0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014fe8:	0f b7 f5             	movzx  esi,bp
c0014feb:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014fef:	0f 83 a7 00 00 00    	jae    c001509c <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014ff5:	6b f6 28             	imul   esi,esi,0x28
c0014ff8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014ffc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014fff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015003:	50                   	push   eax
c0015004:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015008:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001500c:	8b 16                	mov    edx,DWORD PTR [esi]
c001500e:	6b c0 28             	imul   eax,eax,0x28
c0015011:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015015:	89 d0                	mov    eax,edx
c0015017:	31 d2                	xor    edx,edx
c0015019:	52                   	push   edx
c001501a:	50                   	push   eax
c001501b:	53                   	push   ebx
c001501c:	e8 ed 31 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015021:	83 c4 0c             	add    esp,0xc
c0015024:	6a 20                	push   0x20
c0015026:	6a 00                	push   0x0
c0015028:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001502c:	52                   	push   edx
c001502d:	e8 be b4 fe ff       	call   c00004f0 <memset>
c0015032:	58                   	pop    eax
c0015033:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015035:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015039:	51                   	push   ecx
c001503a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001503e:	52                   	push   edx
c001503f:	6a 00                	push   0x0
c0015041:	6a 1f                	push   0x1f
c0015043:	53                   	push   ebx
c0015044:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015047:	83 c4 18             	add    esp,0x18
c001504a:	68 8f 40 02 c0       	push   0xc002408f
c001504f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015053:	52                   	push   edx
c0015054:	e8 f7 b6 fe ff       	call   c0000750 <strcmp>
c0015059:	83 c4 10             	add    esp,0x10
c001505c:	85 c0                	test   eax,eax
c001505e:	75 0f                	jne    c001506f <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015060:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015063:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015067:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001506b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001506f:	50                   	push   eax
c0015070:	50                   	push   eax
c0015071:	68 97 40 02 c0       	push   0xc0024097
c0015076:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001507a:	50                   	push   eax
c001507b:	e8 d0 b6 fe ff       	call   c0000750 <strcmp>
c0015080:	83 c4 10             	add    esp,0x10
c0015083:	85 c0                	test   eax,eax
c0015085:	75 0f                	jne    c0015096 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015087:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001508a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001508e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015096:	45                   	inc    ebp
c0015097:	e9 4c ff ff ff       	jmp    c0014fe8 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001509c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00150a1:	75 10                	jne    c00150b3 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00150a3:	83 ec 0c             	sub    esp,0xc
c00150a6:	68 9f 40 02 c0       	push   0xc002409f
c00150ab:	e8 b6 a7 ff ff       	call   c000f866 <KePanic(char const*)>
c00150b0:	83 c4 10             	add    esp,0x10
c00150b3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00150b8:	75 10                	jne    c00150ca <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00150ba:	83 ec 0c             	sub    esp,0xc
c00150bd:	68 9f 40 02 c0       	push   0xc002409f
c00150c2:	e8 9f a7 ff ff       	call   c000f866 <KePanic(char const*)>
c00150c7:	83 c4 10             	add    esp,0x10
c00150ca:	31 d2                	xor    edx,edx
c00150cc:	50                   	push   eax
c00150cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150d1:	52                   	push   edx
c00150d2:	50                   	push   eax
c00150d3:	53                   	push   ebx
c00150d4:	e8 35 31 ff ff       	call   c000820e <File::seek(unsigned long long)>
c00150d9:	5a                   	pop    edx
c00150da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00150de:	e8 3c a4 ff ff       	call   c000f51f <malloc>
c00150e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00150e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00150eb:	31 c9                	xor    ecx,ecx
c00150ed:	5e                   	pop    esi
c00150ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150f0:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00150f4:	55                   	push   ebp
c00150f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150f9:	51                   	push   ecx
c00150fa:	52                   	push   edx
c00150fb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00150ff:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015103:	53                   	push   ebx
c0015104:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015107:	83 c4 14             	add    esp,0x14
c001510a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001510e:	e8 0c a4 ff ff       	call   c000f51f <malloc>
c0015113:	89 c6                	mov    esi,eax
c0015115:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015117:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001511a:	56                   	push   esi
c001511b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001511f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015123:	51                   	push   ecx
c0015124:	52                   	push   edx
c0015125:	53                   	push   ebx
c0015126:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015129:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001512d:	8b 15 00 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da00
c0015133:	83 c4 1c             	add    esp,0x1c
c0015136:	c1 e8 04             	shr    eax,0x4
c0015139:	89 04 95 80 d8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2780],eax
c0015140:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015144:	31 d2                	xor    edx,edx
c0015146:	52                   	push   edx
c0015147:	50                   	push   eax
c0015148:	53                   	push   ebx
c0015149:	e8 c0 30 ff ff       	call   c000820e <File::seek(unsigned long long)>
c001514e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015150:	31 d2                	xor    edx,edx
c0015152:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015155:	56                   	push   esi
c0015156:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001515a:	52                   	push   edx
c001515b:	50                   	push   eax
c001515c:	53                   	push   ebx
c001515d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015160:	83 c4 14             	add    esp,0x14
c0015163:	53                   	push   ebx
c0015164:	e8 45 30 ff ff       	call   c00081ae <File::close()>
c0015169:	5d                   	pop    ebp
c001516a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001516e:	e8 bc a3 ff ff       	call   c000f52f <free>
c0015173:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015176:	e8 b4 a3 ff ff       	call   c000f52f <free>
c001517b:	a1 00 da 02 c0       	mov    eax,ds:0xc002da00
c0015180:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015184:	8d 50 01             	lea    edx,[eax+0x1]
c0015187:	89 0c 85 80 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2680],ecx
c001518e:	89 34 85 00 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2700],esi
c0015195:	89 15 00 da 02 c0    	mov    DWORD PTR ds:0xc002da00,edx
c001519b:	83 c4 10             	add    esp,0x10
c001519e:	b0 01                	mov    al,0x1
c00151a0:	83 c4 5c             	add    esp,0x5c
c00151a3:	5b                   	pop    ebx
c00151a4:	5e                   	pop    esi
c00151a5:	5f                   	pop    edi
c00151a6:	5d                   	pop    ebp
c00151a7:	c3                   	ret    

c00151a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00151a8:	55                   	push   ebp
c00151a9:	57                   	push   edi
c00151aa:	56                   	push   esi
c00151ab:	53                   	push   ebx
c00151ac:	81 ec 68 03 00 00    	sub    esp,0x368
c00151b2:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00151b9:	8b 1d 58 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da58
c00151bf:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00151c3:	68 14 01 00 00       	push   0x114
c00151c8:	e8 52 a3 ff ff       	call   c000f51f <malloc>
c00151cd:	83 c4 0c             	add    esp,0xc
c00151d0:	89 c5                	mov    ebp,eax
c00151d2:	53                   	push   ebx
c00151d3:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00151da:	50                   	push   eax
c00151db:	e8 52 2f ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00151e0:	5e                   	pop    esi
c00151e1:	5f                   	pop    edi
c00151e2:	6a 01                	push   0x1
c00151e4:	55                   	push   ebp
c00151e5:	e8 66 2f ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00151ea:	83 c4 10             	add    esp,0x10
c00151ed:	85 c0                	test   eax,eax
c00151ef:	0f 85 aa 06 00 00    	jne    c001589f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00151f5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00151fd:	83 ec 0c             	sub    esp,0xc
c0015200:	6a 34                	push   0x34
c0015202:	e8 18 a3 ff ff       	call   c000f51f <malloc>
c0015207:	5b                   	pop    ebx
c0015208:	89 c7                	mov    edi,eax
c001520a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001520e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015211:	53                   	push   ebx
c0015212:	57                   	push   edi
c0015213:	6a 00                	push   0x0
c0015215:	6a 34                	push   0x34
c0015217:	55                   	push   ebp
c0015218:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001521b:	83 c4 20             	add    esp,0x20
c001521e:	85 c0                	test   eax,eax
c0015220:	0f 85 79 06 00 00    	jne    c001589f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015226:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001522c:	0f 85 6d 06 00 00    	jne    c001589f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015232:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015235:	85 c0                	test   eax,eax
c0015237:	0f 84 62 06 00 00    	je     c001589f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001523d:	31 d2                	xor    edx,edx
c001523f:	51                   	push   ecx
c0015240:	52                   	push   edx
c0015241:	50                   	push   eax
c0015242:	55                   	push   ebp
c0015243:	e8 c6 2f ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015248:	83 c4 10             	add    esp,0x10
c001524b:	85 c0                	test   eax,eax
c001524d:	0f 85 4c 06 00 00    	jne    c001589f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015253:	83 ec 0c             	sub    esp,0xc
c0015256:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015259:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001525d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015261:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015265:	0f af c2             	imul   eax,edx
c0015268:	50                   	push   eax
c0015269:	e8 b1 a2 ff ff       	call   c000f51f <malloc>
c001526e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015271:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015275:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015278:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001527c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015280:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015284:	0f af c2             	imul   eax,edx
c0015287:	99                   	cdq    
c0015288:	52                   	push   edx
c0015289:	50                   	push   eax
c001528a:	55                   	push   ebp
c001528b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001528e:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015291:	83 c4 20             	add    esp,0x20
c0015294:	85 c0                	test   eax,eax
c0015296:	0f 84 03 06 00 00    	je     c001589f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001529c:	52                   	push   edx
c001529d:	31 d2                	xor    edx,edx
c001529f:	52                   	push   edx
c00152a0:	50                   	push   eax
c00152a1:	55                   	push   ebp
c00152a2:	e8 67 2f ff ff       	call   c000820e <File::seek(unsigned long long)>
c00152a7:	83 c4 10             	add    esp,0x10
c00152aa:	85 c0                	test   eax,eax
c00152ac:	0f 85 ed 05 00 00    	jne    c001589f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00152b2:	83 ec 0c             	sub    esp,0xc
c00152b5:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00152b9:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00152bd:	31 f6                	xor    esi,esi
c00152bf:	0f af c2             	imul   eax,edx
c00152c2:	50                   	push   eax
c00152c3:	e8 57 a2 ff ff       	call   c000f51f <malloc>
c00152c8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00152cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00152cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00152d6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00152da:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00152de:	0f af c2             	imul   eax,edx
c00152e1:	99                   	cdq    
c00152e2:	52                   	push   edx
c00152e3:	50                   	push   eax
c00152e4:	55                   	push   ebp
c00152e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152e8:	83 c4 20             	add    esp,0x20
c00152eb:	0f b7 de             	movzx  ebx,si
c00152ee:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00152f2:	0f 83 87 00 00 00    	jae    c001537f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00152f8:	c1 e3 05             	shl    ebx,0x5
c00152fb:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00152ff:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015302:	75 75                	jne    c0015379 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0015304:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015307:	31 d2                	xor    edx,edx
c0015309:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001530d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015310:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015314:	50                   	push   eax
c0015315:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015318:	52                   	push   edx
c0015319:	50                   	push   eax
c001531a:	55                   	push   ebp
c001531b:	e8 ee 2e ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015320:	83 c4 10             	add    esp,0x10
c0015323:	85 c0                	test   eax,eax
c0015325:	0f 85 74 05 00 00    	jne    c001589f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001532b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015332:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015335:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0015339:	31 d2                	xor    edx,edx
c001533b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001533f:	83 ec 0c             	sub    esp,0xc
c0015342:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015346:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001534d:	50                   	push   eax
c001534e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015352:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015356:	52                   	push   edx
c0015357:	50                   	push   eax
c0015358:	55                   	push   ebp
c0015359:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001535c:	83 c4 1c             	add    esp,0x1c
c001535f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015362:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015365:	50                   	push   eax
c0015366:	6a 00                	push   0x0
c0015368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001536c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015370:	50                   	push   eax
c0015371:	e8 7a b1 fe ff       	call   c00004f0 <memset>
c0015376:	83 c4 10             	add    esp,0x10
c0015379:	46                   	inc    esi
c001537a:	e9 6c ff ff ff       	jmp    c00152eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001537f:	53                   	push   ebx
c0015380:	31 db                	xor    ebx,ebx
c0015382:	68 00 01 00 00       	push   0x100
c0015387:	6a 00                	push   0x0
c0015389:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001538d:	50                   	push   eax
c001538e:	e8 5d b1 fe ff       	call   c00004f0 <memset>
c0015393:	83 c4 0c             	add    esp,0xc
c0015396:	68 00 01 00 00       	push   0x100
c001539b:	6a 00                	push   0x0
c001539d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00153a4:	50                   	push   eax
c00153a5:	e8 46 b1 fe ff       	call   c00004f0 <memset>
c00153aa:	83 c4 10             	add    esp,0x10
c00153ad:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00153b5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00153bd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00153c5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00153cd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00153d5:	0f b7 f3             	movzx  esi,bx
c00153d8:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00153dc:	0f 83 2d 01 00 00    	jae    c001550f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00153e2:	6b f6 28             	imul   esi,esi,0x28
c00153e5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00153e9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00153ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153f0:	52                   	push   edx
c00153f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00153f5:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00153f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00153fb:	6b d2 28             	imul   edx,edx,0x28
c00153fe:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015402:	31 d2                	xor    edx,edx
c0015404:	52                   	push   edx
c0015405:	50                   	push   eax
c0015406:	55                   	push   ebp
c0015407:	e8 02 2e ff ff       	call   c000820e <File::seek(unsigned long long)>
c001540c:	83 c4 0c             	add    esp,0xc
c001540f:	6a 20                	push   0x20
c0015411:	6a 00                	push   0x0
c0015413:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001541a:	51                   	push   ecx
c001541b:	e8 d0 b0 fe ff       	call   c00004f0 <memset>
c0015420:	59                   	pop    ecx
c0015421:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015424:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015428:	52                   	push   edx
c0015429:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015430:	51                   	push   ecx
c0015431:	6a 00                	push   0x0
c0015433:	6a 1f                	push   0x1f
c0015435:	55                   	push   ebp
c0015436:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015439:	83 c4 1c             	add    esp,0x1c
c001543c:	6a 09                	push   0x9
c001543e:	68 b9 40 02 c0       	push   0xc00240b9
c0015443:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001544a:	51                   	push   ecx
c001544b:	e8 30 af fe ff       	call   c0000380 <memcmp>
c0015450:	83 c4 10             	add    esp,0x10
c0015453:	85 c0                	test   eax,eax
c0015455:	75 21                	jne    c0015478 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015457:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001545b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001545f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015463:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015467:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001546a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015471:	89 d0                	mov    eax,edx
c0015473:	40                   	inc    eax
c0015474:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015478:	50                   	push   eax
c0015479:	6a 09                	push   0x9
c001547b:	68 c3 40 02 c0       	push   0xc00240c3
c0015480:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015487:	50                   	push   eax
c0015488:	e8 f3 ae fe ff       	call   c0000380 <memcmp>
c001548d:	83 c4 10             	add    esp,0x10
c0015490:	85 c0                	test   eax,eax
c0015492:	75 21                	jne    c00154b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0015494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015498:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001549c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00154a0:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00154a4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00154a7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00154ae:	89 d0                	mov    eax,edx
c00154b0:	40                   	inc    eax
c00154b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154b5:	50                   	push   eax
c00154b6:	50                   	push   eax
c00154b7:	68 8f 40 02 c0       	push   0xc002408f
c00154bc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154c3:	50                   	push   eax
c00154c4:	e8 87 b2 fe ff       	call   c0000750 <strcmp>
c00154c9:	83 c4 10             	add    esp,0x10
c00154cc:	85 c0                	test   eax,eax
c00154ce:	75 0f                	jne    c00154df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00154d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00154d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00154d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00154db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00154df:	50                   	push   eax
c00154e0:	50                   	push   eax
c00154e1:	68 97 40 02 c0       	push   0xc0024097
c00154e6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154ed:	50                   	push   eax
c00154ee:	e8 5d b2 fe ff       	call   c0000750 <strcmp>
c00154f3:	83 c4 10             	add    esp,0x10
c00154f6:	85 c0                	test   eax,eax
c00154f8:	75 0f                	jne    c0015509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00154fa:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00154fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015501:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015505:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015509:	43                   	inc    ebx
c001550a:	e9 c6 fe ff ff       	jmp    c00153d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001550f:	31 d2                	xor    edx,edx
c0015511:	50                   	push   eax
c0015512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015516:	52                   	push   edx
c0015517:	50                   	push   eax
c0015518:	55                   	push   ebp
c0015519:	e8 f0 2c ff ff       	call   c000820e <File::seek(unsigned long long)>
c001551e:	58                   	pop    eax
c001551f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015523:	e8 f7 9f ff ff       	call   c000f51f <malloc>
c0015528:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001552b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001552f:	31 d2                	xor    edx,edx
c0015531:	58                   	pop    eax
c0015532:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015536:	53                   	push   ebx
c0015537:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001553b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001553f:	52                   	push   edx
c0015540:	50                   	push   eax
c0015541:	55                   	push   ebp
c0015542:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015545:	83 c4 14             	add    esp,0x14
c0015548:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001554c:	e8 ce 9f ff ff       	call   c000f51f <malloc>
c0015551:	31 d2                	xor    edx,edx
c0015553:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015557:	83 c4 0c             	add    esp,0xc
c001555a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001555e:	52                   	push   edx
c001555f:	50                   	push   eax
c0015560:	55                   	push   ebp
c0015561:	e8 a8 2c ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015566:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015569:	31 d2                	xor    edx,edx
c001556b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001556e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015572:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015576:	52                   	push   edx
c0015577:	50                   	push   eax
c0015578:	55                   	push   ebp
c0015579:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001557c:	83 c4 20             	add    esp,0x20
c001557f:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0015584:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001558c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015590:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015594:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015598:	0f 84 05 03 00 00    	je     c00158a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c001559e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00155a5:	31 d2                	xor    edx,edx
c00155a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00155ab:	c1 e8 03             	shr    eax,0x3
c00155ae:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00155b2:	51                   	push   ecx
c00155b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155b7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00155bb:	52                   	push   edx
c00155bc:	50                   	push   eax
c00155bd:	55                   	push   ebp
c00155be:	e8 4b 2c ff ff       	call   c000820e <File::seek(unsigned long long)>
c00155c3:	5b                   	pop    ebx
c00155c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00155cf:	e8 4b 9f ff ff       	call   c000f51f <malloc>
c00155d4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00155d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00155db:	31 d2                	xor    edx,edx
c00155dd:	5e                   	pop    esi
c00155de:	8d 44 24 58          	lea    eax,[esp+0x58]
c00155e2:	50                   	push   eax
c00155e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00155eb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00155f2:	52                   	push   edx
c00155f3:	50                   	push   eax
c00155f4:	55                   	push   ebp
c00155f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00155f8:	83 c4 20             	add    esp,0x20
c00155fb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015603:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015607:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c001560b:	0f 8d 76 02 00 00    	jge    c0015887 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0015611:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015619:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c001561e:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0015621:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015625:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015629:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c001562d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015631:	c1 e8 08             	shr    eax,0x8
c0015634:	89 c6                	mov    esi,eax
c0015636:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001563a:	c1 e6 04             	shl    esi,0x4
c001563d:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015641:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0015644:	85 db                	test   ebx,ebx
c0015646:	0f 85 b3 00 00 00    	jne    c00156ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001564c:	83 ec 0c             	sub    esp,0xc
c001564f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015653:	03 06                	add    eax,DWORD PTR [esi]
c0015655:	50                   	push   eax
c0015656:	e8 40 f8 ff ff       	call   c0014e9b <Thr::getAddressOfKernelSymbol(char const*)>
c001565b:	83 c4 10             	add    esp,0x10
c001565e:	89 c3                	mov    ebx,eax
c0015660:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0015665:	85 c0                	test   eax,eax
c0015667:	0f 85 92 00 00 00    	jne    c00156ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001566d:	83 ec 0c             	sub    esp,0xc
c0015670:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015674:	03 06                	add    eax,DWORD PTR [esi]
c0015676:	50                   	push   eax
c0015677:	e8 7c ac ff ff       	call   c00102f8 <KeResolveCompatibilitySymbol(char*)>
c001567c:	83 c4 10             	add    esp,0x10
c001567f:	89 c3                	mov    ebx,eax
c0015681:	85 c0                	test   eax,eax
c0015683:	75 7a                	jne    c00156ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015685:	51                   	push   ecx
c0015686:	51                   	push   ecx
c0015687:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001568b:	03 06                	add    eax,DWORD PTR [esi]
c001568d:	50                   	push   eax
c001568e:	68 cd 40 02 c0       	push   0xc00240cd
c0015693:	e8 cc 18 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015698:	58                   	pop    eax
c0015699:	5a                   	pop    edx
c001569a:	68 e7 40 02 c0       	push   0xc00240e7
c001569f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00156a6:	50                   	push   eax
c00156a7:	e8 94 af fe ff       	call   c0000640 <strcpy>
c00156ac:	59                   	pop    ecx
c00156ad:	58                   	pop    eax
c00156ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00156b2:	03 06                	add    eax,DWORD PTR [esi]
c00156b4:	50                   	push   eax
c00156b5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00156bc:	50                   	push   eax
c00156bd:	e8 7e b1 fe ff       	call   c0000840 <strcat>
c00156c2:	58                   	pop    eax
c00156c3:	5a                   	pop    edx
c00156c4:	68 81 41 02 c0       	push   0xc0024181
c00156c9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00156d0:	50                   	push   eax
c00156d1:	e8 6a b1 fe ff       	call   c0000840 <strcat>
c00156d6:	83 c4 10             	add    esp,0x10
c00156d9:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00156de:	0f 84 5d 01 00 00    	je     c0015841 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00156e4:	83 ec 0c             	sub    esp,0xc
c00156e7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00156ee:	50                   	push   eax
c00156ef:	e8 72 a1 ff ff       	call   c000f866 <KePanic(char const*)>
c00156f4:	83 c4 10             	add    esp,0x10
c00156f7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00156fb:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00156ff:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0015704:	83 f8 01             	cmp    eax,0x1
c0015707:	0f 85 8f 00 00 00    	jne    c001579c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c001570d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0015714:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0015718:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001571c:	01 ce                	add    esi,ecx
c001571e:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015726:	0f 94 c0             	sete   al
c0015729:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015731:	0f 94 c2             	sete   dl
c0015734:	09 c2                	or     edx,eax
c0015736:	8b 06                	mov    eax,DWORD PTR [esi]
c0015738:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001573d:	0f b6 d2             	movzx  edx,dl
c0015740:	74 41                	je     c0015783 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0015742:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0015745:	85 d2                	test   edx,edx
c0015747:	75 15                	jne    c001575e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0015749:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001574d:	66 83 f8 0c          	cmp    ax,0xc
c0015751:	76 05                	jbe    c0015758 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0015753:	b8 0c 00 00 00       	mov    eax,0xc
c0015758:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001575c:	76 37                	jbe    c0015795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001575e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015762:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015767:	0f 84 d4 00 00 00    	je     c0015841 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001576d:	83 ec 0c             	sub    esp,0xc
c0015770:	68 fe 40 02 c0       	push   0xc00240fe
c0015775:	e8 ec a0 ff ff       	call   c000f866 <KePanic(char const*)>
c001577a:	83 c4 10             	add    esp,0x10
c001577d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015781:	eb 12                	jmp    c0015795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015783:	01 c1                	add    ecx,eax
c0015785:	85 d2                	test   edx,edx
c0015787:	75 0c                	jne    c0015795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015789:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001578d:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015791:	77 02                	ja     c0015795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015793:	01 d9                	add    ecx,ebx
c0015795:	89 0e                	mov    DWORD PTR [esi],ecx
c0015797:	e9 e2 00 00 00       	jmp    c001587e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001579c:	83 f8 02             	cmp    eax,0x2
c001579f:	75 77                	jne    c0015818 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00157a1:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00157a8:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00157ac:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00157b0:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00157b8:	74 21                	je     c00157db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00157ba:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00157c2:	74 17                	je     c00157db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00157c4:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00157c8:	b8 0a 00 00 00       	mov    eax,0xa
c00157cd:	83 fa 0e             	cmp    edx,0xe
c00157d0:	77 03                	ja     c00157d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00157d2:	8d 42 fc             	lea    eax,[edx-0x4]
c00157d5:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00157d9:	76 17                	jbe    c00157f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00157db:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00157e0:	74 5f                	je     c0015841 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00157e2:	83 ec 0c             	sub    esp,0xc
c00157e5:	68 1a 41 02 c0       	push   0xc002411a
c00157ea:	e8 77 a0 ff ff       	call   c000f866 <KePanic(char const*)>
c00157ef:	83 c4 10             	add    esp,0x10
c00157f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00157f4:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00157f9:	74 13                	je     c001580e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00157fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00157ff:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0015806:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c001580a:	01 d0                	add    eax,edx
c001580c:	eb 04                	jmp    c0015812 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001580e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015812:	01 c3                	add    ebx,eax
c0015814:	89 1e                	mov    DWORD PTR [esi],ebx
c0015816:	eb 66                	jmp    c001587e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015818:	52                   	push   edx
c0015819:	52                   	push   edx
c001581a:	50                   	push   eax
c001581b:	68 36 41 02 c0       	push   0xc0024136
c0015820:	e8 3f 17 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015825:	83 c4 10             	add    esp,0x10
c0015828:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001582d:	74 12                	je     c0015841 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001582f:	83 ec 0c             	sub    esp,0xc
c0015832:	68 41 41 02 c0       	push   0xc0024141
c0015837:	e8 2a a0 ff ff       	call   c000f866 <KePanic(char const*)>
c001583c:	83 c4 10             	add    esp,0x10
c001583f:	eb 3d                	jmp    c001587e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015841:	83 ec 0c             	sub    esp,0xc
c0015844:	55                   	push   ebp
c0015845:	e8 64 29 ff ff       	call   c00081ae <File::close()>
c001584a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001584d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015850:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015853:	59                   	pop    ecx
c0015854:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015858:	e8 d2 9c ff ff       	call   c000f52f <free>
c001585d:	5b                   	pop    ebx
c001585e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015862:	e8 c8 9c ff ff       	call   c000f52f <free>
c0015867:	89 3c 24             	mov    DWORD PTR [esp],edi
c001586a:	e8 c0 9c ff ff       	call   c000f52f <free>
c001586f:	5e                   	pop    esi
c0015870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015874:	e8 b6 9c ff ff       	call   c000f52f <free>
c0015879:	83 c4 10             	add    esp,0x10
c001587c:	eb 21                	jmp    c001589f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001587e:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015882:	e9 7c fd ff ff       	jmp    c0015603 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015887:	83 ec 0c             	sub    esp,0xc
c001588a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001588e:	e8 9c 9c ff ff       	call   c000f52f <free>
c0015893:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015897:	83 c4 10             	add    esp,0x10
c001589a:	e9 f1 fc ff ff       	jmp    c0015590 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c001589f:	31 c0                	xor    eax,eax
c00158a1:	eb 33                	jmp    c00158d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00158a3:	83 ec 0c             	sub    esp,0xc
c00158a6:	55                   	push   ebp
c00158a7:	e8 02 29 ff ff       	call   c00081ae <File::close()>
c00158ac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00158af:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00158b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158b5:	58                   	pop    eax
c00158b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00158ba:	e8 70 9c ff ff       	call   c000f52f <free>
c00158bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00158c2:	e8 68 9c ff ff       	call   c000f52f <free>
c00158c7:	5a                   	pop    edx
c00158c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158cc:	e8 5e 9c ff ff       	call   c000f52f <free>
c00158d1:	83 c4 10             	add    esp,0x10
c00158d4:	b0 01                	mov    al,0x1
c00158d6:	81 c4 5c 03 00 00    	add    esp,0x35c
c00158dc:	5b                   	pop    ebx
c00158dd:	5e                   	pop    esi
c00158de:	5f                   	pop    edi
c00158df:	5d                   	pop    ebp
c00158e0:	c3                   	ret    

c00158e1 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00158e1:	56                   	push   esi
c00158e2:	31 d2                	xor    edx,edx
c00158e4:	53                   	push   ebx
c00158e5:	8b 1d 60 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d260
c00158eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00158ef:	39 d3                	cmp    ebx,edx
c00158f1:	7e 1b                	jle    c001590e <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00158f3:	8b 04 95 80 d4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2b80]
c00158fa:	39 c8                	cmp    eax,ecx
c00158fc:	77 0d                	ja     c001590b <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00158fe:	8b 34 95 80 d2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2d80]
c0015905:	01 c6                	add    esi,eax
c0015907:	39 ce                	cmp    esi,ecx
c0015909:	77 05                	ja     c0015910 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001590b:	42                   	inc    edx
c001590c:	eb e1                	jmp    c00158ef <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001590e:	31 c0                	xor    eax,eax
c0015910:	5b                   	pop    ebx
c0015911:	5e                   	pop    esi
c0015912:	c3                   	ret    

c0015913 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015913:	53                   	push   ebx
c0015914:	31 c0                	xor    eax,eax
c0015916:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001591a:	8b 1d 60 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d260
c0015920:	39 c3                	cmp    ebx,eax
c0015922:	7e 22                	jle    c0015946 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015924:	8b 14 85 80 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b80]
c001592b:	39 ca                	cmp    edx,ecx
c001592d:	77 14                	ja     c0015943 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001592f:	03 14 85 80 d2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2d80]
c0015936:	39 ca                	cmp    edx,ecx
c0015938:	76 09                	jbe    c0015943 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001593a:	8b 04 85 80 d6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2980]
c0015941:	eb 05                	jmp    c0015948 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015943:	40                   	inc    eax
c0015944:	eb da                	jmp    c0015920 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015946:	31 c0                	xor    eax,eax
c0015948:	5b                   	pop    ebx
c0015949:	c3                   	ret    

c001594a <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001594a:	53                   	push   ebx
c001594b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001594f:	53                   	push   ebx
c0015950:	e8 8c ff ff ff       	call   c00158e1 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015955:	5a                   	pop    edx
c0015956:	31 d2                	xor    edx,edx
c0015958:	85 c0                	test   eax,eax
c001595a:	74 04                	je     c0015960 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001595c:	89 da                	mov    edx,ebx
c001595e:	29 c2                	sub    edx,eax
c0015960:	89 d0                	mov    eax,edx
c0015962:	5b                   	pop    ebx
c0015963:	c3                   	ret    

c0015964 <Thr::loadDLL(char const*, bool)>:
c0015964:	55                   	push   ebp
c0015965:	57                   	push   edi
c0015966:	56                   	push   esi
c0015967:	53                   	push   ebx
c0015968:	81 ec 34 01 00 00    	sub    esp,0x134
c001596e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015975:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001597c:	56                   	push   esi
c001597d:	68 59 41 02 c0       	push   0xc0024159
c0015982:	e8 dd 15 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015987:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001598e:	e8 8c 9b ff ff       	call   c000f51f <malloc>
c0015993:	83 c4 0c             	add    esp,0xc
c0015996:	89 c3                	mov    ebx,eax
c0015998:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c001599e:	56                   	push   esi
c001599f:	50                   	push   eax
c00159a0:	e8 8d 27 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00159a5:	83 c4 10             	add    esp,0x10
c00159a8:	85 db                	test   ebx,ebx
c00159aa:	75 3c                	jne    c00159e8 <Thr::loadDLL(char const*, bool)+0x84>
c00159ac:	89 f8                	mov    eax,edi
c00159ae:	84 c0                	test   al,al
c00159b0:	0f 84 f3 01 00 00    	je     c0015ba9 <Thr::loadDLL(char const*, bool)+0x245>
c00159b6:	55                   	push   ebp
c00159b7:	55                   	push   ebp
c00159b8:	68 6a 41 02 c0       	push   0xc002416a
c00159bd:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00159c1:	55                   	push   ebp
c00159c2:	e8 79 ac fe ff       	call   c0000640 <strcpy>
c00159c7:	58                   	pop    eax
c00159c8:	5a                   	pop    edx
c00159c9:	56                   	push   esi
c00159ca:	55                   	push   ebp
c00159cb:	e8 70 ae fe ff       	call   c0000840 <strcat>
c00159d0:	59                   	pop    ecx
c00159d1:	58                   	pop    eax
c00159d2:	68 81 41 02 c0       	push   0xc0024181
c00159d7:	55                   	push   ebp
c00159d8:	e8 63 ae fe ff       	call   c0000840 <strcat>
c00159dd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00159e0:	e8 81 9e ff ff       	call   c000f866 <KePanic(char const*)>
c00159e5:	83 c4 10             	add    esp,0x10
c00159e8:	51                   	push   ecx
c00159e9:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00159ed:	50                   	push   eax
c00159ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c00159f2:	50                   	push   eax
c00159f3:	53                   	push   ebx
c00159f4:	e8 59 2a ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c00159f9:	83 c4 10             	add    esp,0x10
c00159fc:	89 c5                	mov    ebp,eax
c00159fe:	85 db                	test   ebx,ebx
c0015a00:	74 0c                	je     c0015a0e <Thr::loadDLL(char const*, bool)+0xaa>
c0015a02:	83 ec 0c             	sub    esp,0xc
c0015a05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a07:	53                   	push   ebx
c0015a08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a0b:	83 c4 10             	add    esp,0x10
c0015a0e:	83 ec 0c             	sub    esp,0xc
c0015a11:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0015a16:	50                   	push   eax
c0015a17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a1f:	55                   	push   ebp
c0015a20:	68 83 41 02 c0       	push   0xc0024183
c0015a25:	e8 3a 15 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015a2a:	83 c4 20             	add    esp,0x20
c0015a2d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015a32:	75 0a                	jne    c0015a3e <Thr::loadDLL(char const*, bool)+0xda>
c0015a34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a38:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015a3c:	75 3c                	jne    c0015a7a <Thr::loadDLL(char const*, bool)+0x116>
c0015a3e:	89 f8                	mov    eax,edi
c0015a40:	84 c0                	test   al,al
c0015a42:	0f 84 49 01 00 00    	je     c0015b91 <Thr::loadDLL(char const*, bool)+0x22d>
c0015a48:	51                   	push   ecx
c0015a49:	51                   	push   ecx
c0015a4a:	68 a4 41 02 c0       	push   0xc00241a4
c0015a4f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015a53:	53                   	push   ebx
c0015a54:	e8 e7 ab fe ff       	call   c0000640 <strcpy>
c0015a59:	5d                   	pop    ebp
c0015a5a:	58                   	pop    eax
c0015a5b:	56                   	push   esi
c0015a5c:	53                   	push   ebx
c0015a5d:	e8 de ad fe ff       	call   c0000840 <strcat>
c0015a62:	58                   	pop    eax
c0015a63:	5a                   	pop    edx
c0015a64:	68 81 41 02 c0       	push   0xc0024181
c0015a69:	53                   	push   ebx
c0015a6a:	e8 d1 ad fe ff       	call   c0000840 <strcat>
c0015a6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a72:	e8 ef 9d ff ff       	call   c000f866 <KePanic(char const*)>
c0015a77:	83 c4 10             	add    esp,0x10
c0015a7a:	52                   	push   edx
c0015a7b:	6a 03                	push   0x3
c0015a7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a81:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a85:	05 ff 0f 00 00       	add    eax,0xfff
c0015a8a:	83 d2 00             	adc    edx,0x0
c0015a8d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015a91:	50                   	push   eax
c0015a92:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c0015a98:	e8 a3 d9 ff ff       	call   c0013440 <VAS::allocatePages(int, int)>
c0015a9d:	59                   	pop    ecx
c0015a9e:	89 c3                	mov    ebx,eax
c0015aa0:	5d                   	pop    ebp
c0015aa1:	50                   	push   eax
c0015aa2:	68 1e 35 02 c0       	push   0xc002351e
c0015aa7:	e8 b8 14 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015aac:	89 34 24             	mov    DWORD PTR [esp],esi
c0015aaf:	e8 bc aa fe ff       	call   c0000570 <strlen>
c0015ab4:	8b 2d 60 d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d260
c0015aba:	40                   	inc    eax
c0015abb:	89 04 24             	mov    DWORD PTR [esp],eax
c0015abe:	e8 5c 9a ff ff       	call   c000f51f <malloc>
c0015ac3:	89 04 ad 80 d6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd2980],eax
c0015aca:	58                   	pop    eax
c0015acb:	a1 60 d2 02 c0       	mov    eax,ds:0xc002d260
c0015ad0:	5a                   	pop    edx
c0015ad1:	56                   	push   esi
c0015ad2:	ff 34 85 80 d6 02 c0 	push   DWORD PTR [eax*4-0x3ffd2980]
c0015ad9:	e8 62 ab fe ff       	call   c0000640 <strcpy>
c0015ade:	a1 60 d2 02 c0       	mov    eax,ds:0xc002d260
c0015ae3:	8d 50 01             	lea    edx,[eax+0x1]
c0015ae6:	89 1c 85 80 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2b80],ebx
c0015aed:	89 15 60 d2 02 c0    	mov    DWORD PTR ds:0xc002d260,edx
c0015af3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015af7:	83 c4 0c             	add    esp,0xc
c0015afa:	89 14 85 80 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d80],edx
c0015b01:	6a 01                	push   0x1
c0015b03:	53                   	push   ebx
c0015b04:	56                   	push   esi
c0015b05:	e8 9e f6 ff ff       	call   c00151a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015b0a:	83 c4 10             	add    esp,0x10
c0015b0d:	0f b6 c0             	movzx  eax,al
c0015b10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b14:	85 c0                	test   eax,eax
c0015b16:	0f 85 89 00 00 00    	jne    c0015ba5 <Thr::loadDLL(char const*, bool)+0x241>
c0015b1c:	89 f8                	mov    eax,edi
c0015b1e:	84 c0                	test   al,al
c0015b20:	74 73                	je     c0015b95 <Thr::loadDLL(char const*, bool)+0x231>
c0015b22:	83 ec 0c             	sub    esp,0xc
c0015b25:	68 bd 41 02 c0       	push   0xc00241bd
c0015b2a:	e8 37 9d ff ff       	call   c000f866 <KePanic(char const*)>
c0015b2f:	83 c4 10             	add    esp,0x10
c0015b32:	eb 61                	jmp    c0015b95 <Thr::loadDLL(char const*, bool)+0x231>
c0015b34:	50                   	push   eax
c0015b35:	50                   	push   eax
c0015b36:	89 e8                	mov    eax,ebp
c0015b38:	c1 e0 0c             	shl    eax,0xc
c0015b3b:	01 d8                	add    eax,ebx
c0015b3d:	50                   	push   eax
c0015b3e:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c0015b44:	e8 f9 d3 ff ff       	call   c0012f42 <VAS::getPageTableEntry(unsigned long)>
c0015b49:	83 c4 10             	add    esp,0x10
c0015b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4e:	a8 60                	test   al,0x60
c0015b50:	75 11                	jne    c0015b63 <Thr::loadDLL(char const*, bool)+0x1ff>
c0015b52:	83 ec 0c             	sub    esp,0xc
c0015b55:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015b5a:	50                   	push   eax
c0015b5b:	e8 91 9e ff ff       	call   c000f9f1 <Phys::freePage(unsigned long)>
c0015b60:	83 c4 10             	add    esp,0x10
c0015b63:	45                   	inc    ebp
c0015b64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015b6c:	05 ff 0f 00 00       	add    eax,0xfff
c0015b71:	bf 00 00 00 00       	mov    edi,0x0
c0015b76:	83 d2 00             	adc    edx,0x0
c0015b79:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015b7d:	c1 ea 0c             	shr    edx,0xc
c0015b80:	39 c5                	cmp    ebp,eax
c0015b82:	89 d1                	mov    ecx,edx
c0015b84:	89 f8                	mov    eax,edi
c0015b86:	19 c8                	sbb    eax,ecx
c0015b88:	72 aa                	jb     c0015b34 <Thr::loadDLL(char const*, bool)+0x1d0>
c0015b8a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015b8f:	75 18                	jne    c0015ba9 <Thr::loadDLL(char const*, bool)+0x245>
c0015b91:	31 db                	xor    ebx,ebx
c0015b93:	eb 14                	jmp    c0015ba9 <Thr::loadDLL(char const*, bool)+0x245>
c0015b95:	83 ec 0c             	sub    esp,0xc
c0015b98:	68 dc 41 02 c0       	push   0xc00241dc
c0015b9d:	e8 c4 9c ff ff       	call   c000f866 <KePanic(char const*)>
c0015ba2:	83 c4 10             	add    esp,0x10
c0015ba5:	31 ed                	xor    ebp,ebp
c0015ba7:	eb bb                	jmp    c0015b64 <Thr::loadDLL(char const*, bool)+0x200>
c0015ba9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015baf:	89 d8                	mov    eax,ebx
c0015bb1:	5b                   	pop    ebx
c0015bb2:	5e                   	pop    esi
c0015bb3:	5f                   	pop    edi
c0015bb4:	5d                   	pop    ebp
c0015bb5:	c3                   	ret    

c0015bb6 <Thr::executeDLL(unsigned long, void*)>:
c0015bb6:	56                   	push   esi
c0015bb7:	53                   	push   ebx
c0015bb8:	52                   	push   edx
c0015bb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015bbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015bc1:	85 db                	test   ebx,ebx
c0015bc3:	75 10                	jne    c0015bd5 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015bc5:	83 ec 0c             	sub    esp,0xc
c0015bc8:	68 f8 41 02 c0       	push   0xc00241f8
c0015bcd:	e8 94 9c ff ff       	call   c000f866 <KePanic(char const*)>
c0015bd2:	83 c4 10             	add    esp,0x10
c0015bd5:	50                   	push   eax
c0015bd6:	50                   	push   eax
c0015bd7:	53                   	push   ebx
c0015bd8:	68 22 42 02 c0       	push   0xc0024222
c0015bdd:	e8 82 13 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015be2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015be6:	89 d8                	mov    eax,ebx
c0015be8:	83 c4 14             	add    esp,0x14
c0015beb:	5b                   	pop    ebx
c0015bec:	5e                   	pop    esi
c0015bed:	ff e0                	jmp    eax

c0015bef <KeProcessExec(Process*, char const*)>:
c0015bef:	56                   	push   esi
c0015bf0:	53                   	push   ebx
c0015bf1:	83 ec 04             	sub    esp,0x4
c0015bf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015bf8:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0015bfe:	85 f6                	test   esi,esi
c0015c00:	74 16                	je     c0015c18 <KeProcessExec(Process*, char const*)+0x29>
c0015c02:	83 ec 0c             	sub    esp,0xc
c0015c05:	56                   	push   esi
c0015c06:	e8 c9 d5 ff ff       	call   c00131d4 <VAS::~VAS()>
c0015c0b:	58                   	pop    eax
c0015c0c:	5a                   	pop    edx
c0015c0d:	6a 14                	push   0x14
c0015c0f:	56                   	push   esi
c0015c10:	e8 92 6f ff ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c0015c15:	83 c4 10             	add    esp,0x10
c0015c18:	83 ec 0c             	sub    esp,0xc
c0015c1b:	6a 14                	push   0x14
c0015c1d:	e8 fd 98 ff ff       	call   c000f51f <malloc>
c0015c22:	89 c6                	mov    esi,eax
c0015c24:	58                   	pop    eax
c0015c25:	5a                   	pop    edx
c0015c26:	6a 00                	push   0x0
c0015c28:	56                   	push   esi
c0015c29:	e8 46 da ff ff       	call   c0013674 <VAS::VAS(bool)>
c0015c2e:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0015c34:	59                   	pop    ecx
c0015c35:	5e                   	pop    esi
c0015c36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c3a:	50                   	push   eax
c0015c3b:	53                   	push   ebx
c0015c3c:	e8 35 f0 ff ff       	call   c0014c76 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c41:	83 c4 14             	add    esp,0x14
c0015c44:	31 c0                	xor    eax,eax
c0015c46:	5b                   	pop    ebx
c0015c47:	5e                   	pop    esi
c0015c48:	c3                   	ret    
c0015c49:	66 90                	xchg   ax,ax
c0015c4b:	90                   	nop

c0015c4c <userModeEntryPoint(void*)>:
c0015c4c:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0015c54:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0015c59:	85 c0                	test   eax,eax
c0015c5b:	75 03                	jne    c0015c60 <userModeEntryPoint(void*)+0x14>
c0015c5d:	fb                   	sti    
c0015c5e:	66 90                	xchg   ax,ax
c0015c60:	fb                   	sti    
c0015c61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015c69:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015c6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c73:	e9 c7 a5 fe ff       	jmp    c000023f <goToUsermode>

c0015c78 <changeTSS>:
c0015c78:	83 ec 14             	sub    esp,0x14
c0015c7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c80:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015c83:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015c88:	c1 e2 15             	shl    edx,0x15
c0015c8b:	29 d0                	sub    eax,edx
c0015c8d:	50                   	push   eax
c0015c8e:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c0015c93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015c99:	05 68 11 00 00       	add    eax,0x1168
c0015c9e:	50                   	push   eax
c0015c9f:	e8 68 c8 ff ff       	call   c001250c <TSS::setESP(unsigned long)>
c0015ca4:	83 c4 1c             	add    esp,0x1c
c0015ca7:	c3                   	ret    

c0015ca8 <switchToThread(ThreadControlBlock*)>:
c0015ca8:	57                   	push   edi
c0015ca9:	8b 0d 2c da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da2c
c0015caf:	56                   	push   esi
c0015cb0:	85 c9                	test   ecx,ecx
c0015cb2:	53                   	push   ebx
c0015cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015cb7:	0f 85 8b 00 00 00    	jne    c0015d48 <switchToThread(ThreadControlBlock*)+0xa0>
c0015cbd:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015cc1:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015cc7:	74 7b                	je     c0015d44 <switchToThread(ThreadControlBlock*)+0x9c>
c0015cc9:	b8 00 04 00 00       	mov    eax,0x400
c0015cce:	29 d0                	sub    eax,edx
c0015cd0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015cd3:	d1 f8                	sar    eax,1
c0015cd5:	01 d0                	add    eax,edx
c0015cd7:	90                   	nop
c0015cd8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015cdb:	e8 45 38 00 00       	call   c0019525 <HalQueryPerformanceCounter()>
c0015ce0:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0015ce5:	89 15 74 da 02 c0    	mov    DWORD PTR ds:0xc002da74,edx
c0015ceb:	89 c6                	mov    esi,eax
c0015ced:	89 d7                	mov    edi,edx
c0015cef:	2b 35 60 da 02 c0    	sub    esi,DWORD PTR ds:0xc002da60
c0015cf5:	a3 60 da 02 c0       	mov    ds:0xc002da60,eax
c0015cfa:	1b 3d 64 da 02 c0    	sbb    edi,DWORD PTR ds:0xc002da64
c0015d00:	89 35 68 da 02 c0    	mov    DWORD PTR ds:0xc002da68,esi
c0015d06:	89 3d 6c da 02 c0    	mov    DWORD PTR ds:0xc002da6c,edi
c0015d0c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d12:	89 15 64 da 02 c0    	mov    DWORD PTR ds:0xc002da64,edx
c0015d18:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015d1b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015d1e:	01 c6                	add    esi,eax
c0015d20:	11 d7                	adc    edi,edx
c0015d22:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015d25:	83 ec 0c             	sub    esp,0xc
c0015d28:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015d2b:	53                   	push   ebx
c0015d2c:	e8 46 a5 fe ff       	call   c0000277 <switchToThreadASM>
c0015d31:	0f 20 c0             	mov    eax,cr0
c0015d34:	83 c8 08             	or     eax,0x8
c0015d37:	0f 22 c0             	mov    cr0,eax
c0015d3a:	83 c4 10             	add    esp,0x10
c0015d3d:	5b                   	pop    ebx
c0015d3e:	5e                   	pop    esi
c0015d3f:	5f                   	pop    edi
c0015d40:	c3                   	ret    
c0015d41:	8d 76 00             	lea    esi,[esi+0x0]
c0015d44:	31 c0                	xor    eax,eax
c0015d46:	eb 90                	jmp    c0015cd8 <switchToThread(ThreadControlBlock*)+0x30>
c0015d48:	5b                   	pop    ebx
c0015d49:	c7 05 28 da 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x1
c0015d53:	5e                   	pop    esi
c0015d54:	5f                   	pop    edi
c0015d55:	c3                   	ret    
c0015d56:	66 90                	xchg   ax,ax

c0015d58 <Process::addArgs(char**)>:
c0015d58:	57                   	push   edi
c0015d59:	56                   	push   esi
c0015d5a:	53                   	push   ebx
c0015d5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d5f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015d63:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015d6d:	85 ff                	test   edi,edi
c0015d6f:	74 4f                	je     c0015dc0 <Process::addArgs(char**)+0x68>
c0015d71:	8b 07                	mov    eax,DWORD PTR [edi]
c0015d73:	85 c0                	test   eax,eax
c0015d75:	74 49                	je     c0015dc0 <Process::addArgs(char**)+0x68>
c0015d77:	31 db                	xor    ebx,ebx
c0015d79:	8d 76 00             	lea    esi,[esi+0x0]
c0015d7c:	83 ec 0c             	sub    esp,0xc
c0015d7f:	50                   	push   eax
c0015d80:	e8 eb a7 fe ff       	call   c0000570 <strlen>
c0015d85:	83 c0 01             	add    eax,0x1
c0015d88:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d8b:	e8 8f 97 ff ff       	call   c000f51f <malloc>
c0015d90:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015d97:	5a                   	pop    edx
c0015d98:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015d9b:	59                   	pop    ecx
c0015d9c:	83 c3 01             	add    ebx,0x1
c0015d9f:	52                   	push   edx
c0015da0:	50                   	push   eax
c0015da1:	e8 9a a8 fe ff       	call   c0000640 <strcpy>
c0015da6:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015dac:	83 c4 10             	add    esp,0x10
c0015daf:	83 c1 01             	add    ecx,0x1
c0015db2:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015db8:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015dbb:	85 c0                	test   eax,eax
c0015dbd:	75 bd                	jne    c0015d7c <Process::addArgs(char**)+0x24>
c0015dbf:	90                   	nop
c0015dc0:	5b                   	pop    ebx
c0015dc1:	5e                   	pop    esi
c0015dc2:	5f                   	pop    edi
c0015dc3:	c3                   	ret    

c0015dc4 <Process::Process(char const*, Process*, char**)>:
c0015dc4:	56                   	push   esi
c0015dc5:	53                   	push   ebx
c0015dc6:	83 ec 14             	sub    esp,0x14
c0015dc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dcd:	05 0c 02 00 00       	add    eax,0x20c
c0015dd2:	bb 07 00 00 00       	mov    ebx,0x7
c0015dd7:	89 c6                	mov    esi,eax
c0015dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0015ddc:	85 db                	test   ebx,ebx
c0015dde:	78 14                	js     c0015df4 <Process::Process(char const*, Process*, char**)+0x30>
c0015de0:	83 ec 0c             	sub    esp,0xc
c0015de3:	56                   	push   esi
c0015de4:	e8 97 b8 00 00       	call   c0021680 <ThreadControlBlock::ThreadControlBlock()>
c0015de9:	83 c4 10             	add    esp,0x10
c0015dec:	83 c6 5f             	add    esi,0x5f
c0015def:	83 eb 01             	sub    ebx,0x1
c0015df2:	eb e8                	jmp    c0015ddc <Process::Process(char const*, Process*, char**)+0x18>
c0015df4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015df8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015dff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e03:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015e0a:	83 ec 0c             	sub    esp,0xc
c0015e0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e11:	e8 92 82 ff ff       	call   c000e0a8 <KeNewProcessEnv(Process*)>
c0015e16:	83 c4 10             	add    esp,0x10
c0015e19:	89 c2                	mov    edx,eax
c0015e1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e1f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015e25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e29:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015e32:	a1 3c 5b 02 c0       	mov    eax,ds:0xc0025b3c
c0015e37:	8d 50 01             	lea    edx,[eax+0x1]
c0015e3a:	89 15 3c 5b 02 c0    	mov    DWORD PTR ds:0xc0025b3c,edx
c0015e40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e44:	89 02                	mov    DWORD PTR [edx],eax
c0015e46:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015e4e:	83 ec 0c             	sub    esp,0xc
c0015e51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e55:	e8 c5 96 ff ff       	call   c000f51f <malloc>
c0015e5a:	83 c4 10             	add    esp,0x10
c0015e5d:	89 c3                	mov    ebx,eax
c0015e5f:	83 ec 08             	sub    esp,0x8
c0015e62:	6a 00                	push   0x0
c0015e64:	53                   	push   ebx
c0015e65:	e8 0a d8 ff ff       	call   c0013674 <VAS::VAS(bool)>
c0015e6a:	83 c4 10             	add    esp,0x10
c0015e6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e71:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015e77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e7b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015e85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015e8d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015e93:	e8 8f aa ff ff       	call   c0010927 <KeInitSignals()>
c0015e98:	89 c2                	mov    edx,eax
c0015e9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e9e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ea8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015eae:	85 c0                	test   eax,eax
c0015eb0:	74 42                	je     c0015ef4 <Process::Process(char const*, Process*, char**)+0x130>
c0015eb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eb6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ebc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ec6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ed0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ed6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015edc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ee0:	05 0c 01 00 00       	add    eax,0x10c
c0015ee5:	83 ec 08             	sub    esp,0x8
c0015ee8:	52                   	push   edx
c0015ee9:	50                   	push   eax
c0015eea:	e8 51 a7 fe ff       	call   c0000640 <strcpy>
c0015eef:	83 c4 10             	add    esp,0x10
c0015ef2:	eb 7c                	jmp    c0015f70 <Process::Process(char const*, Process*, char**)+0x1ac>
c0015ef4:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015efc:	83 ec 0c             	sub    esp,0xc
c0015eff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f03:	e8 17 96 ff ff       	call   c000f51f <malloc>
c0015f08:	83 c4 10             	add    esp,0x10
c0015f0b:	89 c3                	mov    ebx,eax
c0015f0d:	83 ec 08             	sub    esp,0x8
c0015f10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f14:	53                   	push   ebx
c0015f15:	e8 f2 c2 ff ff       	call   c001220c <VgaText::VgaText(char const*)>
c0015f1a:	83 c4 10             	add    esp,0x10
c0015f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f21:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f2b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f31:	83 ec 0c             	sub    esp,0xc
c0015f34:	50                   	push   eax
c0015f35:	e8 28 bb ff ff       	call   c0011a62 <addToTerminalCycle(VgaText*)>
c0015f3a:	83 c4 10             	add    esp,0x10
c0015f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f41:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f47:	83 ec 0c             	sub    esp,0xc
c0015f4a:	50                   	push   eax
c0015f4b:	e8 83 bd ff ff       	call   c0011cd3 <setActiveTerminal(VgaText*)>
c0015f50:	83 c4 10             	add    esp,0x10
c0015f53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f57:	05 0c 01 00 00       	add    eax,0x10c
c0015f5c:	83 ec 08             	sub    esp,0x8
c0015f5f:	68 41 42 02 c0       	push   0xc0024241
c0015f64:	50                   	push   eax
c0015f65:	e8 d6 a6 fe ff       	call   c0000640 <strcpy>
c0015f6a:	83 c4 10             	add    esp,0x10
c0015f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f74:	83 c0 0c             	add    eax,0xc
c0015f77:	83 ec 08             	sub    esp,0x8
c0015f7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f7e:	50                   	push   eax
c0015f7f:	e8 bc a6 fe ff       	call   c0000640 <strcpy>
c0015f84:	83 c4 10             	add    esp,0x10
c0015f87:	83 ec 08             	sub    esp,0x8
c0015f8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015f8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f92:	e8 c1 fd ff ff       	call   c0015d58 <Process::addArgs(char**)>
c0015f97:	83 c4 10             	add    esp,0x10
c0015f9a:	83 ec 08             	sub    esp,0x8
c0015f9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015fa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015fa5:	e8 cc ec ff ff       	call   c0014c76 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015faa:	83 c4 10             	add    esp,0x10
c0015fad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015fb1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015fb5:	83 f0 01             	xor    eax,0x1
c0015fb8:	88 c2                	mov    dl,al
c0015fba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fbe:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fc8:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fca:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015fcf:	52                   	push   edx
c0015fd0:	50                   	push   eax
c0015fd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015fd5:	68 98 42 02 c0       	push   0xc0024298
c0015fda:	e8 85 0f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015fdf:	83 c4 10             	add    esp,0x10
c0015fe2:	90                   	nop
c0015fe3:	83 c4 14             	add    esp,0x14
c0015fe6:	5b                   	pop    ebx
c0015fe7:	5e                   	pop    esi
c0015fe8:	c3                   	ret    
c0015fe9:	90                   	nop
c0015fea:	66 90                	xchg   ax,ax

c0015fec <Process::Process(bool, char const*, Process*, char**)>:
c0015fec:	56                   	push   esi
c0015fed:	53                   	push   ebx
c0015fee:	83 ec 24             	sub    esp,0x24
c0015ff1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ff5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015ff9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ffd:	05 0c 02 00 00       	add    eax,0x20c
c0016002:	bb 07 00 00 00       	mov    ebx,0x7
c0016007:	89 c6                	mov    esi,eax
c0016009:	8d 76 00             	lea    esi,[esi+0x0]
c001600c:	85 db                	test   ebx,ebx
c001600e:	78 14                	js     c0016024 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016010:	83 ec 0c             	sub    esp,0xc
c0016013:	56                   	push   esi
c0016014:	e8 67 b6 00 00       	call   c0021680 <ThreadControlBlock::ThreadControlBlock()>
c0016019:	83 c4 10             	add    esp,0x10
c001601c:	83 c6 5f             	add    esi,0x5f
c001601f:	83 eb 01             	sub    ebx,0x1
c0016022:	eb e8                	jmp    c001600c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016028:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001602f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016033:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001603a:	83 ec 0c             	sub    esp,0xc
c001603d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016041:	e8 62 80 ff ff       	call   c000e0a8 <KeNewProcessEnv(Process*)>
c0016046:	83 c4 10             	add    esp,0x10
c0016049:	89 c2                	mov    edx,eax
c001604b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001604f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0016055:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016059:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0016062:	a1 3c 5b 02 c0       	mov    eax,ds:0xc0025b3c
c0016067:	8d 50 01             	lea    edx,[eax+0x1]
c001606a:	89 15 3c 5b 02 c0    	mov    DWORD PTR ds:0xc0025b3c,edx
c0016070:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016074:	89 02                	mov    DWORD PTR [edx],eax
c0016076:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001607e:	83 ec 0c             	sub    esp,0xc
c0016081:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016085:	e8 95 94 ff ff       	call   c000f51f <malloc>
c001608a:	83 c4 10             	add    esp,0x10
c001608d:	89 c3                	mov    ebx,eax
c001608f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016094:	83 ec 08             	sub    esp,0x8
c0016097:	50                   	push   eax
c0016098:	53                   	push   ebx
c0016099:	e8 d6 d5 ff ff       	call   c0013674 <VAS::VAS(bool)>
c001609e:	83 c4 10             	add    esp,0x10
c00160a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160a5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00160ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160af:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00160b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160bd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00160c1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00160c7:	e8 5b a8 ff ff       	call   c0010927 <KeInitSignals()>
c00160cc:	89 c2                	mov    edx,eax
c00160ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160d2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00160d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00160e2:	85 c0                	test   eax,eax
c00160e4:	74 42                	je     c0016128 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00160e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160ea:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00160f0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00160f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160fa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0016100:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016104:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001610a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016110:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016114:	05 0c 01 00 00       	add    eax,0x10c
c0016119:	83 ec 08             	sub    esp,0x8
c001611c:	52                   	push   edx
c001611d:	50                   	push   eax
c001611e:	e8 1d a5 fe ff       	call   c0000640 <strcpy>
c0016123:	83 c4 10             	add    esp,0x10
c0016126:	eb 7c                	jmp    c00161a4 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016128:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016130:	83 ec 0c             	sub    esp,0xc
c0016133:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016137:	e8 e3 93 ff ff       	call   c000f51f <malloc>
c001613c:	83 c4 10             	add    esp,0x10
c001613f:	89 c3                	mov    ebx,eax
c0016141:	83 ec 08             	sub    esp,0x8
c0016144:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016148:	53                   	push   ebx
c0016149:	e8 be c0 ff ff       	call   c001220c <VgaText::VgaText(char const*)>
c001614e:	83 c4 10             	add    esp,0x10
c0016151:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016155:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001615b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001615f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016165:	83 ec 0c             	sub    esp,0xc
c0016168:	50                   	push   eax
c0016169:	e8 f4 b8 ff ff       	call   c0011a62 <addToTerminalCycle(VgaText*)>
c001616e:	83 c4 10             	add    esp,0x10
c0016171:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016175:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001617b:	83 ec 0c             	sub    esp,0xc
c001617e:	50                   	push   eax
c001617f:	e8 4f bb ff ff       	call   c0011cd3 <setActiveTerminal(VgaText*)>
c0016184:	83 c4 10             	add    esp,0x10
c0016187:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001618b:	05 0c 01 00 00       	add    eax,0x10c
c0016190:	83 ec 08             	sub    esp,0x8
c0016193:	68 41 42 02 c0       	push   0xc0024241
c0016198:	50                   	push   eax
c0016199:	e8 a2 a4 fe ff       	call   c0000640 <strcpy>
c001619e:	83 c4 10             	add    esp,0x10
c00161a1:	8d 76 00             	lea    esi,[esi+0x0]
c00161a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161a8:	83 c0 0c             	add    eax,0xc
c00161ab:	83 ec 08             	sub    esp,0x8
c00161ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00161b2:	50                   	push   eax
c00161b3:	e8 88 a4 fe ff       	call   c0000640 <strcpy>
c00161b8:	83 c4 10             	add    esp,0x10
c00161bb:	83 ec 08             	sub    esp,0x8
c00161be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00161c6:	e8 8d fb ff ff       	call   c0015d58 <Process::addArgs(char**)>
c00161cb:	83 c4 10             	add    esp,0x10
c00161ce:	90                   	nop
c00161cf:	83 c4 24             	add    esp,0x24
c00161d2:	5b                   	pop    ebx
c00161d3:	5e                   	pop    esi
c00161d4:	c3                   	ret    
c00161d5:	8d 76 00             	lea    esi,[esi+0x0]

c00161d8 <taskStartupFunction>:
c00161d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161dd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00161e0:	c3                   	ret    
c00161e1:	8d 76 00             	lea    esi,[esi+0x0]

c00161e4 <KeDisablePreemption()>:
c00161e4:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c00161e9:	85 c0                	test   eax,eax
c00161eb:	75 13                	jne    c0016200 <KeDisablePreemption()+0x1c>
c00161ed:	8a 15 d4 b0 02 c0    	mov    dl,BYTE PTR ds:0xc002b0d4
c00161f3:	c6 05 d4 b0 02 c0 00 	mov    BYTE PTR ds:0xc002b0d4,0x0
c00161fa:	88 15 08 da 02 c0    	mov    BYTE PTR ds:0xc002da08,dl
c0016200:	83 c0 01             	add    eax,0x1
c0016203:	a3 0c da 02 c0       	mov    ds:0xc002da0c,eax
c0016208:	c3                   	ret    
c0016209:	8d 76 00             	lea    esi,[esi+0x0]

c001620c <KeRestorePreemption()>:
c001620c:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c0016211:	83 e8 01             	sub    eax,0x1
c0016214:	a3 0c da 02 c0       	mov    ds:0xc002da0c,eax
c0016219:	75 0d                	jne    c0016228 <KeRestorePreemption()+0x1c>
c001621b:	a0 08 da 02 c0       	mov    al,ds:0xc002da08
c0016220:	a2 d4 b0 02 c0       	mov    ds:0xc002b0d4,al
c0016225:	8d 76 00             	lea    esi,[esi+0x0]
c0016228:	c3                   	ret    
c0016229:	90                   	nop
c001622a:	66 90                	xchg   ax,ax

c001622c <Process::createThread(void (*)(void*), void*, int)>:
c001622c:	57                   	push   edi
c001622d:	31 c9                	xor    ecx,ecx
c001622f:	56                   	push   esi
c0016230:	53                   	push   ebx
c0016231:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016235:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001623c:	89 f2                	mov    edx,esi
c001623e:	66 90                	xchg   ax,ax
c0016240:	0f b7 c2             	movzx  eax,dx
c0016243:	80 e2 01             	and    dl,0x1
c0016246:	74 14                	je     c001625c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0016248:	d1 f8                	sar    eax,1
c001624a:	83 c1 01             	add    ecx,0x1
c001624d:	89 c2                	mov    edx,eax
c001624f:	83 f9 10             	cmp    ecx,0x10
c0016252:	75 ec                	jne    c0016240 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0016254:	31 db                	xor    ebx,ebx
c0016256:	89 d8                	mov    eax,ebx
c0016258:	5b                   	pop    ebx
c0016259:	5e                   	pop    esi
c001625a:	5f                   	pop    edi
c001625b:	c3                   	ret    
c001625c:	b8 01 00 00 00       	mov    eax,0x1
c0016261:	d3 e0                	shl    eax,cl
c0016263:	09 c6                	or     esi,eax
c0016265:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0016268:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001626f:	01 c0                	add    eax,eax
c0016271:	01 c8                	add    eax,ecx
c0016273:	8d 04 80             	lea    eax,[eax+eax*4]
c0016276:	01 d8                	add    eax,ebx
c0016278:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001627f:	75 0b                	jne    c001628c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0016281:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001628b:	90                   	nop
c001628c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0016292:	83 ec 0c             	sub    esp,0xc
c0016295:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016298:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001629b:	01 c0                	add    eax,eax
c001629d:	01 c8                	add    eax,ecx
c001629f:	8d 3c 80             	lea    edi,[eax+eax*4]
c00162a2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00162a5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00162ab:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00162b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00162b5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00162bb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00162c1:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00162c7:	89 ca                	mov    edx,ecx
c00162c9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00162d0:	c7 80 40 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x240],0x0
c00162da:	f7 da                	neg    edx
c00162dc:	c1 e2 15             	shl    edx,0x15
c00162df:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00162e5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00162eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00162ef:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00162f9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00162ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016303:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0016309:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016313:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001631d:	68 00 01 00 00       	push   0x100
c0016322:	e8 f8 91 ff ff       	call   c000f51f <malloc>
c0016327:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001632a:	58                   	pop    eax
c001632b:	5a                   	pop    edx
c001632c:	53                   	push   ebx
c001632d:	68 4c da 02 c0       	push   0xc002da4c
c0016332:	e8 f5 ae 00 00       	call   c002122c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016337:	83 c4 10             	add    esp,0x10
c001633a:	89 d8                	mov    eax,ebx
c001633c:	5b                   	pop    ebx
c001633d:	5e                   	pop    esi
c001633e:	5f                   	pop    edi
c001633f:	c3                   	ret    

c0016340 <Process::createUserThread()>:
c0016340:	83 ec 0c             	sub    esp,0xc
c0016343:	68 80 00 00 00       	push   0x80
c0016348:	6a 00                	push   0x0
c001634a:	68 4c 5c 01 c0       	push   0xc0015c4c
c001634f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016353:	50                   	push   eax
c0016354:	e8 d3 fe ff ff       	call   c001622c <Process::createThread(void (*)(void*), void*, int)>
c0016359:	83 c4 1c             	add    esp,0x1c
c001635c:	c3                   	ret    
c001635d:	8d 76 00             	lea    esi,[esi+0x0]

c0016360 <setupMultitasking(void (*)())>:
c0016360:	56                   	push   esi
c0016361:	53                   	push   ebx
c0016362:	83 ec 04             	sub    esp,0x4
c0016365:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016369:	eb 11                	jmp    c001637c <setupMultitasking(void (*)())+0x1c>
c001636b:	90                   	nop
c001636c:	83 ec 0c             	sub    esp,0xc
c001636f:	68 4c da 02 c0       	push   0xc002da4c
c0016374:	e8 f7 ad 00 00       	call   c0021170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016379:	83 c4 10             	add    esp,0x10
c001637c:	83 ec 0c             	sub    esp,0xc
c001637f:	68 4c da 02 c0       	push   0xc002da4c
c0016384:	e8 c3 ad 00 00       	call   c002114c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016389:	83 c4 10             	add    esp,0x10
c001638c:	84 c0                	test   al,al
c001638e:	74 dc                	je     c001636c <setupMultitasking(void (*)())+0xc>
c0016390:	83 ec 0c             	sub    esp,0xc
c0016393:	68 24 07 00 00       	push   0x724
c0016398:	e8 82 91 ff ff       	call   c000f51f <malloc>
c001639d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00163a4:	89 c3                	mov    ebx,eax
c00163a6:	6a 00                	push   0x0
c00163a8:	68 45 42 02 c0       	push   0xc0024245
c00163ad:	6a 01                	push   0x1
c00163af:	50                   	push   eax
c00163b0:	e8 37 fc ff ff       	call   c0015fec <Process::Process(bool, char const*, Process*, char**)>
c00163b5:	83 c4 14             	add    esp,0x14
c00163b8:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00163be:	89 1d 58 da 02 c0    	mov    DWORD PTR ds:0xc002da58,ebx
c00163c4:	50                   	push   eax
c00163c5:	e8 09 b9 ff ff       	call   c0011cd3 <setActiveTerminal(VgaText*)>
c00163ca:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00163d1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00163db:	83 c8 01             	or     eax,0x1
c00163de:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00163e5:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00163eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00163ee:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00163f8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00163fe:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016404:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001640e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016418:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016422:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016428:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016432:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016438:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016442:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016449:	e8 d1 90 ff ff       	call   c000f51f <malloc>
c001644e:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016454:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001645a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016460:	5a                   	pop    edx
c0016461:	59                   	pop    ecx
c0016462:	68 41 42 02 c0       	push   0xc0024241
c0016467:	50                   	push   eax
c0016468:	e8 d3 a1 fe ff       	call   c0000640 <strcpy>
c001646d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016474:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016478:	83 c4 14             	add    esp,0x14
c001647b:	5b                   	pop    ebx
c001647c:	5e                   	pop    esi
c001647d:	e9 e7 9d fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016482:	66 90                	xchg   ax,ax

c0016484 <schedule()>:
c0016484:	8b 15 2c da 02 c0    	mov    edx,DWORD PTR ds:0xc002da2c
c001648a:	85 d2                	test   edx,edx
c001648c:	74 0e                	je     c001649c <schedule()+0x18>
c001648e:	c7 05 28 da 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x1
c0016498:	c3                   	ret    
c0016499:	8d 76 00             	lea    esi,[esi+0x0]
c001649c:	53                   	push   ebx
c001649d:	83 ec 14             	sub    esp,0x14
c00164a0:	68 4c da 02 c0       	push   0xc002da4c
c00164a5:	e8 a2 ac 00 00       	call   c002114c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00164aa:	83 c4 10             	add    esp,0x10
c00164ad:	84 c0                	test   al,al
c00164af:	75 3f                	jne    c00164f0 <schedule()+0x6c>
c00164b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00164b9:	83 fa 01             	cmp    edx,0x1
c00164bc:	74 3a                	je     c00164f8 <schedule()+0x74>
c00164be:	66 90                	xchg   ax,ax
c00164c0:	83 ec 0c             	sub    esp,0xc
c00164c3:	68 4c da 02 c0       	push   0xc002da4c
c00164c8:	e8 9b ac 00 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164cd:	c7 04 24 4c da 02 c0 	mov    DWORD PTR [esp],0xc002da4c
c00164d4:	89 c3                	mov    ebx,eax
c00164d6:	e8 95 ac 00 00       	call   c0021170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164db:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00164e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164e5:	e8 be f7 ff ff       	call   c0015ca8 <switchToThread(ThreadControlBlock*)>
c00164ea:	83 c4 10             	add    esp,0x10
c00164ed:	8d 76 00             	lea    esi,[esi+0x0]
c00164f0:	83 c4 08             	add    esp,0x8
c00164f3:	5b                   	pop    ebx
c00164f4:	c3                   	ret    
c00164f5:	8d 76 00             	lea    esi,[esi+0x0]
c00164f8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00164ff:	83 ec 08             	sub    esp,0x8
c0016502:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016507:	50                   	push   eax
c0016508:	68 4c da 02 c0       	push   0xc002da4c
c001650d:	e8 1a ad 00 00       	call   c002122c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016512:	83 c4 10             	add    esp,0x10
c0016515:	eb a9                	jmp    c00164c0 <schedule()+0x3c>
c0016517:	90                   	nop

c0016518 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016518:	83 ec 0c             	sub    esp,0xc
c001651b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016520:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016524:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016527:	e8 58 ff ff ff       	call   c0016484 <schedule()>
c001652c:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016534:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016539:	85 c0                	test   eax,eax
c001653b:	75 03                	jne    c0016540 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c001653d:	fb                   	sti    
c001653e:	66 90                	xchg   ax,ax
c0016540:	83 c4 0c             	add    esp,0xc
c0016543:	c3                   	ret    

c0016544 <blockTask(TaskState)>:
c0016544:	83 ec 0c             	sub    esp,0xc
c0016547:	fa                   	cli    
c0016548:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001654d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016551:	83 c0 01             	add    eax,0x1
c0016554:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0016559:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001655e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016561:	e8 1e ff ff ff       	call   c0016484 <schedule()>
c0016566:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c001656e:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c0016574:	85 d2                	test   edx,edx
c0016576:	75 04                	jne    c001657c <blockTask(TaskState)+0x38>
c0016578:	fb                   	sti    
c0016579:	8d 76 00             	lea    esi,[esi+0x0]
c001657c:	83 c4 0c             	add    esp,0xc
c001657f:	c3                   	ret    

c0016580 <waitTask(int, int*, int)>:
c0016580:	83 ec 18             	sub    esp,0x18
c0016583:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016588:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001658c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001658f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016593:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016598:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001659b:	6a 07                	push   0x7
c001659d:	e8 a2 ff ff ff       	call   c0016544 <blockTask(TaskState)>
c00165a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165a7:	83 c4 10             	add    esp,0x10
c00165aa:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00165ad:	85 d2                	test   edx,edx
c00165af:	74 0b                	je     c00165bc <waitTask(int, int*, int)+0x3c>
c00165b1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00165b4:	89 02                	mov    DWORD PTR [edx],eax
c00165b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165bb:	90                   	nop
c00165bc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00165bf:	83 c4 0c             	add    esp,0xc
c00165c2:	c3                   	ret    
c00165c3:	90                   	nop

c00165c4 <milliTenthSleepUntil(unsigned int)>:
c00165c4:	83 ec 0c             	sub    esp,0xc
c00165c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165cb:	39 05 4c ab 02 c0    	cmp    DWORD PTR ds:0xc002ab4c,eax
c00165d1:	76 05                	jbe    c00165d8 <milliTenthSleepUntil(unsigned int)+0x14>
c00165d3:	90                   	nop
c00165d4:	83 c4 0c             	add    esp,0xc
c00165d7:	c3                   	ret    
c00165d8:	fa                   	cli    
c00165d9:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c00165df:	83 ec 08             	sub    esp,0x8
c00165e2:	83 c1 01             	add    ecx,0x1
c00165e5:	8b 15 2c da 02 c0    	mov    edx,DWORD PTR ds:0xc002da2c
c00165eb:	89 0d 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,ecx
c00165f1:	83 c2 01             	add    edx,0x1
c00165f4:	89 15 2c da 02 c0    	mov    DWORD PTR ds:0xc002da2c,edx
c00165fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016600:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016603:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016609:	51                   	push   ecx
c001660a:	68 40 da 02 c0       	push   0xc002da40
c001660f:	e8 18 ac 00 00       	call   c002122c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016614:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001661b:	e8 24 ff ff ff       	call   c0016544 <blockTask(TaskState)>
c0016620:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c0016625:	83 c4 10             	add    esp,0x10
c0016628:	83 e8 01             	sub    eax,0x1
c001662b:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0016630:	85 c0                	test   eax,eax
c0016632:	75 0c                	jne    c0016640 <milliTenthSleepUntil(unsigned int)+0x7c>
c0016634:	8b 15 28 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da28
c001663a:	85 d2                	test   edx,edx
c001663c:	75 1a                	jne    c0016658 <milliTenthSleepUntil(unsigned int)+0x94>
c001663e:	66 90                	xchg   ax,ax
c0016640:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016648:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001664d:	85 c0                	test   eax,eax
c001664f:	75 83                	jne    c00165d4 <milliTenthSleepUntil(unsigned int)+0x10>
c0016651:	fb                   	sti    
c0016652:	83 c4 0c             	add    esp,0xc
c0016655:	c3                   	ret    
c0016656:	66 90                	xchg   ax,ax
c0016658:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c0016662:	e8 1d fe ff ff       	call   c0016484 <schedule()>
c0016667:	eb d7                	jmp    c0016640 <milliTenthSleepUntil(unsigned int)+0x7c>
c0016669:	8d 76 00             	lea    esi,[esi+0x0]

c001666c <milliTenthSleep(unsigned int)>:
c001666c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016670:	a1 4c ab 02 c0       	mov    eax,ds:0xc002ab4c
c0016675:	01 c2                	add    edx,eax
c0016677:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001667b:	e9 44 ff ff ff       	jmp    c00165c4 <milliTenthSleepUntil(unsigned int)>

c0016680 <sleep(unsigned int)>:
c0016680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016684:	8d 04 80             	lea    eax,[eax+eax*4]
c0016687:	8d 04 80             	lea    eax,[eax+eax*4]
c001668a:	8d 04 80             	lea    eax,[eax+eax*4]
c001668d:	8d 04 80             	lea    eax,[eax+eax*4]
c0016690:	c1 e0 04             	shl    eax,0x4
c0016693:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016697:	eb d3                	jmp    c001666c <milliTenthSleep(unsigned int)>
c0016699:	8d 76 00             	lea    esi,[esi+0x0]

c001669c <taskReturned>:
c001669c:	83 ec 18             	sub    esp,0x18
c001669f:	68 cc 42 02 c0       	push   0xc00242cc
c00166a4:	e8 bd 91 ff ff       	call   c000f866 <KePanic(char const*)>
c00166a9:	83 c4 10             	add    esp,0x10
c00166ac:	83 ec 0c             	sub    esp,0xc
c00166af:	6a 02                	push   0x2
c00166b1:	e8 8e fe ff ff       	call   c0016544 <blockTask(TaskState)>
c00166b6:	fa                   	cli    
c00166b7:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00166bc:	83 c0 01             	add    eax,0x1
c00166bf:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c00166c4:	e8 bb fd ff ff       	call   c0016484 <schedule()>
c00166c9:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c00166d1:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c00166d7:	83 c4 10             	add    esp,0x10
c00166da:	85 d2                	test   edx,edx
c00166dc:	75 ce                	jne    c00166ac <taskReturned+0x10>
c00166de:	fb                   	sti    
c00166df:	eb cb                	jmp    c00166ac <taskReturned+0x10>
c00166e1:	8d 76 00             	lea    esi,[esi+0x0]

c00166e4 <Thr::processFromPID(int)>:
c00166e4:	57                   	push   edi
c00166e5:	56                   	push   esi
c00166e6:	53                   	push   ebx
c00166e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166eb:	fa                   	cli    
c00166ec:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00166f1:	83 ec 0c             	sub    esp,0xc
c00166f4:	83 c0 01             	add    eax,0x1
c00166f7:	68 4c da 02 c0       	push   0xc002da4c
c00166fc:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0016701:	e8 62 aa 00 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016706:	83 c4 10             	add    esp,0x10
c0016709:	89 c7                	mov    edi,eax
c001670b:	eb 17                	jmp    c0016724 <Thr::processFromPID(int)+0x40>
c001670d:	8d 76 00             	lea    esi,[esi+0x0]
c0016710:	83 ec 0c             	sub    esp,0xc
c0016713:	68 4c da 02 c0       	push   0xc002da4c
c0016718:	e8 4b aa 00 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001671d:	83 c4 10             	add    esp,0x10
c0016720:	39 f8                	cmp    eax,edi
c0016722:	74 50                	je     c0016774 <Thr::processFromPID(int)+0x90>
c0016724:	83 ec 0c             	sub    esp,0xc
c0016727:	68 4c da 02 c0       	push   0xc002da4c
c001672c:	e8 37 aa 00 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016731:	c7 04 24 4c da 02 c0 	mov    DWORD PTR [esp],0xc002da4c
c0016738:	89 c3                	mov    ebx,eax
c001673a:	e8 31 aa 00 00       	call   c0021170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001673f:	59                   	pop    ecx
c0016740:	58                   	pop    eax
c0016741:	53                   	push   ebx
c0016742:	68 4c da 02 c0       	push   0xc002da4c
c0016747:	e8 e0 aa 00 00       	call   c002122c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001674c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001674f:	83 c4 10             	add    esp,0x10
c0016752:	39 30                	cmp    DWORD PTR [eax],esi
c0016754:	75 ba                	jne    c0016710 <Thr::processFromPID(int)+0x2c>
c0016756:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c001675e:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c0016764:	85 d2                	test   edx,edx
c0016766:	74 08                	je     c0016770 <Thr::processFromPID(int)+0x8c>
c0016768:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001676b:	5b                   	pop    ebx
c001676c:	5e                   	pop    esi
c001676d:	5f                   	pop    edi
c001676e:	c3                   	ret    
c001676f:	90                   	nop
c0016770:	fb                   	sti    
c0016771:	eb f5                	jmp    c0016768 <Thr::processFromPID(int)+0x84>
c0016773:	90                   	nop
c0016774:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c001677c:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016781:	85 c0                	test   eax,eax
c0016783:	75 07                	jne    c001678c <Thr::processFromPID(int)+0xa8>
c0016785:	fb                   	sti    
c0016786:	31 c0                	xor    eax,eax
c0016788:	5b                   	pop    ebx
c0016789:	5e                   	pop    esi
c001678a:	5f                   	pop    edi
c001678b:	c3                   	ret    
c001678c:	5b                   	pop    ebx
c001678d:	31 c0                	xor    eax,eax
c001678f:	5e                   	pop    esi
c0016790:	5f                   	pop    edi
c0016791:	c3                   	ret    
c0016792:	66 90                	xchg   ax,ax

c0016794 <unblockTask(ThreadControlBlock*)>:
c0016794:	53                   	push   ebx
c0016795:	83 ec 08             	sub    esp,0x8
c0016798:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001679c:	fa                   	cli    
c001679d:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c00167a3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00167a6:	83 c2 01             	add    edx,0x1
c00167a9:	85 c0                	test   eax,eax
c00167ab:	89 15 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,edx
c00167b1:	74 6d                	je     c0016820 <unblockTask(ThreadControlBlock*)+0x8c>
c00167b3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00167b6:	83 f8 01             	cmp    eax,0x1
c00167b9:	74 39                	je     c00167f4 <unblockTask(ThreadControlBlock*)+0x60>
c00167bb:	83 ec 0c             	sub    esp,0xc
c00167be:	68 4c da 02 c0       	push   0xc002da4c
c00167c3:	e8 a0 a9 00 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167c8:	83 c4 10             	add    esp,0x10
c00167cb:	85 c0                	test   eax,eax
c00167cd:	75 1d                	jne    c00167ec <unblockTask(ThreadControlBlock*)+0x58>
c00167cf:	eb 63                	jmp    c0016834 <unblockTask(ThreadControlBlock*)+0xa0>
c00167d1:	8d 76 00             	lea    esi,[esi+0x0]
c00167d4:	83 ec 08             	sub    esp,0x8
c00167d7:	50                   	push   eax
c00167d8:	68 4c da 02 c0       	push   0xc002da4c
c00167dd:	e8 92 ae 00 00       	call   c0021674 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00167e2:	83 c4 10             	add    esp,0x10
c00167e5:	85 c0                	test   eax,eax
c00167e7:	74 4b                	je     c0016834 <unblockTask(ThreadControlBlock*)+0xa0>
c00167e9:	8d 76 00             	lea    esi,[esi+0x0]
c00167ec:	39 c3                	cmp    ebx,eax
c00167ee:	75 e4                	jne    c00167d4 <unblockTask(ThreadControlBlock*)+0x40>
c00167f0:	eb 12                	jmp    c0016804 <unblockTask(ThreadControlBlock*)+0x70>
c00167f2:	66 90                	xchg   ax,ax
c00167f4:	83 ec 0c             	sub    esp,0xc
c00167f7:	68 63 42 02 c0       	push   0xc0024263
c00167fc:	e8 63 07 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016801:	83 c4 10             	add    esp,0x10
c0016804:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c001680c:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016811:	85 c0                	test   eax,eax
c0016813:	75 03                	jne    c0016818 <unblockTask(ThreadControlBlock*)+0x84>
c0016815:	fb                   	sti    
c0016816:	66 90                	xchg   ax,ax
c0016818:	83 c4 08             	add    esp,0x8
c001681b:	5b                   	pop    ebx
c001681c:	c3                   	ret    
c001681d:	8d 76 00             	lea    esi,[esi+0x0]
c0016820:	83 ec 0c             	sub    esp,0xc
c0016823:	68 4c 42 02 c0       	push   0xc002424c
c0016828:	e8 37 07 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001682d:	83 c4 10             	add    esp,0x10
c0016830:	eb d2                	jmp    c0016804 <unblockTask(ThreadControlBlock*)+0x70>
c0016832:	66 90                	xchg   ax,ax
c0016834:	83 ec 08             	sub    esp,0x8
c0016837:	53                   	push   ebx
c0016838:	68 4c da 02 c0       	push   0xc002da4c
c001683d:	e8 ea a9 00 00       	call   c002122c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016842:	83 c4 10             	add    esp,0x10
c0016845:	eb bd                	jmp    c0016804 <unblockTask(ThreadControlBlock*)+0x70>
c0016847:	90                   	nop

c0016848 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016848:	55                   	push   ebp
c0016849:	57                   	push   edi
c001684a:	56                   	push   esi
c001684b:	53                   	push   ebx
c001684c:	83 ec 1c             	sub    esp,0x1c
c001684f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016853:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016856:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001685c:	85 ed                	test   ebp,ebp
c001685e:	7e 28                	jle    c0016888 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016860:	31 f6                	xor    esi,esi
c0016862:	66 90                	xchg   ax,ax
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001686e:	83 c6 01             	add    esi,0x1
c0016871:	57                   	push   edi
c0016872:	e8 b8 8c ff ff       	call   c000f52f <free>
c0016877:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001687a:	83 c4 10             	add    esp,0x10
c001687d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016883:	7f df                	jg     c0016864 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016885:	8d 76 00             	lea    esi,[esi+0x0]
c0016888:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016892:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016897:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001689a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001689d:	d3 c0                	rol    eax,cl
c001689f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00168a6:	21 c8                	and    eax,ecx
c00168a8:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00168af:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00168b2:	89 f7                	mov    edi,esi
c00168b4:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00168bc:	0f 85 72 01 00 00    	jne    c0016a34 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00168c2:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00168c8:	85 ed                	test   ebp,ebp
c00168ca:	74 1c                	je     c00168e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00168cc:	83 ec 0c             	sub    esp,0xc
c00168cf:	55                   	push   ebp
c00168d0:	e8 ef 76 ff ff       	call   c000dfc4 <EnvVarContainer::~EnvVarContainer()>
c00168d5:	59                   	pop    ecx
c00168d6:	5e                   	pop    esi
c00168d7:	6a 0c                	push   0xc
c00168d9:	55                   	push   ebp
c00168da:	e8 c8 62 ff ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c00168df:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00168e2:	83 c4 10             	add    esp,0x10
c00168e5:	89 f7                	mov    edi,esi
c00168e7:	90                   	nop
c00168e8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00168ee:	85 c0                	test   eax,eax
c00168f0:	0f 84 b2 00 00 00    	je     c00169a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00168f6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00168f9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00168fd:	31 c9                	xor    ecx,ecx
c00168ff:	eb 17                	jmp    c0016918 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016901:	8d 76 00             	lea    esi,[esi+0x0]
c0016904:	83 c1 01             	add    ecx,0x1
c0016907:	83 f9 10             	cmp    ecx,0x10
c001690a:	0f 84 98 00 00 00    	je     c00169a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016910:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016916:	66 90                	xchg   ax,ax
c0016918:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001691f:	d3 fa                	sar    edx,cl
c0016921:	80 e2 01             	and    dl,0x1
c0016924:	74 de                	je     c0016904 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016926:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016929:	01 d2                	add    edx,edx
c001692b:	01 ca                	add    edx,ecx
c001692d:	8d 14 92             	lea    edx,[edx+edx*4]
c0016930:	01 d0                	add    eax,edx
c0016932:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016938:	83 fd 07             	cmp    ebp,0x7
c001693b:	75 c7                	jne    c0016904 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001693d:	05 40 02 00 00       	add    eax,0x240
c0016942:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016945:	83 fd ff             	cmp    ebp,0xffffffff
c0016948:	0f 8c ee 00 00 00    	jl     c0016a3c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001694e:	0f 84 ac 01 00 00    	je     c0016b00 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016954:	85 ed                	test   ebp,ebp
c0016956:	0f 84 90 01 00 00    	je     c0016aec <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001695c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001695e:	75 a4                	jne    c0016904 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016960:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016966:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001696a:	01 d0                	add    eax,edx
c001696c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016970:	83 ec 0c             	sub    esp,0xc
c0016973:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016979:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001697c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016982:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016989:	50                   	push   eax
c001698a:	e8 05 fe ff ff       	call   c0016794 <unblockTask(ThreadControlBlock*)>
c001698f:	83 c4 10             	add    esp,0x10
c0016992:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016995:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016999:	89 f7                	mov    edi,esi
c001699b:	83 c1 01             	add    ecx,0x1
c001699e:	83 f9 10             	cmp    ecx,0x10
c00169a1:	0f 85 69 ff ff ff    	jne    c0016910 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00169a7:	90                   	nop
c00169a8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00169ae:	85 c0                	test   eax,eax
c00169b0:	74 62                	je     c0016a14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00169b2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00169b8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00169be:	74 54                	je     c0016a14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00169c0:	83 ec 0c             	sub    esp,0xc
c00169c3:	68 4c da 02 c0       	push   0xc002da4c
c00169c8:	e8 9b a7 00 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169cd:	c7 04 24 4c da 02 c0 	mov    DWORD PTR [esp],0xc002da4c
c00169d4:	89 c7                	mov    edi,eax
c00169d6:	e8 71 a7 00 00       	call   c002114c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169db:	83 c4 10             	add    esp,0x10
c00169de:	84 c0                	test   al,al
c00169e0:	0f 84 ce 00 00 00    	je     c0016ab4 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00169e6:	66 90                	xchg   ax,ax
c00169e8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00169eb:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00169f1:	85 d2                	test   edx,edx
c00169f3:	74 0f                	je     c0016a04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00169f5:	83 ec 0c             	sub    esp,0xc
c00169f8:	8b 02                	mov    eax,DWORD PTR [edx]
c00169fa:	52                   	push   edx
c00169fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169fe:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016a01:	83 c4 10             	add    esp,0x10
c0016a04:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016a0e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016a11:	8d 76 00             	lea    esi,[esi+0x0]
c0016a14:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016a1a:	85 db                	test   ebx,ebx
c0016a1c:	74 16                	je     c0016a34 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016a1e:	83 ec 0c             	sub    esp,0xc
c0016a21:	53                   	push   ebx
c0016a22:	e8 ad c7 ff ff       	call   c00131d4 <VAS::~VAS()>
c0016a27:	58                   	pop    eax
c0016a28:	5a                   	pop    edx
c0016a29:	6a 14                	push   0x14
c0016a2b:	53                   	push   ebx
c0016a2c:	e8 76 61 ff ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c0016a31:	83 c4 10             	add    esp,0x10
c0016a34:	83 c4 1c             	add    esp,0x1c
c0016a37:	5b                   	pop    ebx
c0016a38:	5e                   	pop    esi
c0016a39:	5f                   	pop    edi
c0016a3a:	5d                   	pop    ebp
c0016a3b:	c3                   	ret    
c0016a3c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016a40:	83 ec 0c             	sub    esp,0xc
c0016a43:	68 00 43 02 c0       	push   0xc0024300
c0016a48:	e8 19 8e ff ff       	call   c000f866 <KePanic(char const*)>
c0016a4d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016a50:	83 c4 10             	add    esp,0x10
c0016a53:	89 f7                	mov    edi,esi
c0016a55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016a59:	e9 a6 fe ff ff       	jmp    c0016904 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016a5e:	66 90                	xchg   ax,ax
c0016a60:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a66:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016a6c:	75 1e                	jne    c0016a8c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016a6e:	83 ec 0c             	sub    esp,0xc
c0016a71:	68 68 43 02 c0       	push   0xc0024368
c0016a76:	e8 e9 04 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016a7b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016a82:	e8 bd fa ff ff       	call   c0016544 <blockTask(TaskState)>
c0016a87:	83 c4 10             	add    esp,0x10
c0016a8a:	66 90                	xchg   ax,ax
c0016a8c:	83 ec 08             	sub    esp,0x8
c0016a8f:	56                   	push   esi
c0016a90:	68 4c da 02 c0       	push   0xc002da4c
c0016a95:	e8 92 a7 00 00       	call   c002122c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a9a:	c7 04 24 4c da 02 c0 	mov    DWORD PTR [esp],0xc002da4c
c0016aa1:	e8 c2 a6 00 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016aa6:	83 c4 10             	add    esp,0x10
c0016aa9:	39 f8                	cmp    eax,edi
c0016aab:	0f 84 37 ff ff ff    	je     c00169e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ab4:	83 ec 0c             	sub    esp,0xc
c0016ab7:	68 4c da 02 c0       	push   0xc002da4c
c0016abc:	e8 a7 a6 00 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ac1:	c7 04 24 4c da 02 c0 	mov    DWORD PTR [esp],0xc002da4c
c0016ac8:	89 c6                	mov    esi,eax
c0016aca:	e8 a1 a6 00 00       	call   c0021170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016acf:	83 c4 10             	add    esp,0x10
c0016ad2:	39 f3                	cmp    ebx,esi
c0016ad4:	74 b6                	je     c0016a8c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016ad6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016ad9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016adc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016ae2:	75 a8                	jne    c0016a8c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016ae4:	e9 77 ff ff ff       	jmp    c0016a60 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0016aec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016af0:	83 ec 0c             	sub    esp,0xc
c0016af3:	68 34 43 02 c0       	push   0xc0024334
c0016af8:	e9 4b ff ff ff       	jmp    c0016a48 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016afd:	8d 76 00             	lea    esi,[esi+0x0]
c0016b00:	8b 36                	mov    esi,DWORD PTR [esi]
c0016b02:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016b06:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016b09:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016b0c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016b12:	01 d7                	add    edi,edx
c0016b14:	89 f8                	mov    eax,edi
c0016b16:	e9 51 fe ff ff       	jmp    c001696c <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016b1b:	90                   	nop

c0016b1c <cleanerTaskFunction(void*)>:
c0016b1c:	53                   	push   ebx
c0016b1d:	83 ec 08             	sub    esp,0x8
c0016b20:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016b28:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016b2d:	85 c0                	test   eax,eax
c0016b2f:	75 03                	jne    c0016b34 <cleanerTaskFunction(void*)+0x18>
c0016b31:	fb                   	sti    
c0016b32:	66 90                	xchg   ax,ax
c0016b34:	fa                   	cli    
c0016b35:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016b3a:	83 c0 01             	add    eax,0x1
c0016b3d:	80 3d 14 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da14,0x0
c0016b44:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0016b49:	0f 85 c9 00 00 00    	jne    c0016c18 <cleanerTaskFunction(void*)+0xfc>
c0016b4f:	83 ec 0c             	sub    esp,0xc
c0016b52:	6a 02                	push   0x2
c0016b54:	e8 bf f9 ff ff       	call   c0016518 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016b59:	83 c4 10             	add    esp,0x10
c0016b5c:	c6 05 14 da 02 c0 00 	mov    BYTE PTR ds:0xc002da14,0x0
c0016b63:	fa                   	cli    
c0016b64:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c0016b6a:	8b 1d 2c da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da2c
c0016b70:	83 c1 01             	add    ecx,0x1
c0016b73:	83 c3 01             	add    ebx,0x1
c0016b76:	89 0d 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,ecx
c0016b7c:	89 1d 2c da 02 c0    	mov    DWORD PTR ds:0xc002da2c,ebx
c0016b82:	fa                   	cli    
c0016b83:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016b88:	83 c0 01             	add    eax,0x1
c0016b8b:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0016b90:	eb 2a                	jmp    c0016bbc <cleanerTaskFunction(void*)+0xa0>
c0016b92:	66 90                	xchg   ax,ax
c0016b94:	83 ec 0c             	sub    esp,0xc
c0016b97:	68 34 da 02 c0       	push   0xc002da34
c0016b9c:	e8 c7 a5 00 00       	call   c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ba1:	c7 04 24 34 da 02 c0 	mov    DWORD PTR [esp],0xc002da34
c0016ba8:	89 c3                	mov    ebx,eax
c0016baa:	e8 c1 a5 00 00       	call   c0021170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016baf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bb2:	e8 91 fc ff ff       	call   c0016848 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016bb7:	83 c4 10             	add    esp,0x10
c0016bba:	66 90                	xchg   ax,ax
c0016bbc:	83 ec 0c             	sub    esp,0xc
c0016bbf:	68 34 da 02 c0       	push   0xc002da34
c0016bc4:	e8 83 a5 00 00       	call   c002114c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016bc9:	83 c4 10             	add    esp,0x10
c0016bcc:	84 c0                	test   al,al
c0016bce:	74 c4                	je     c0016b94 <cleanerTaskFunction(void*)+0x78>
c0016bd0:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016bd8:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c0016bde:	85 d2                	test   edx,edx
c0016be0:	75 02                	jne    c0016be4 <cleanerTaskFunction(void*)+0xc8>
c0016be2:	fb                   	sti    
c0016be3:	90                   	nop
c0016be4:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c0016be9:	83 e8 01             	sub    eax,0x1
c0016bec:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0016bf1:	0f 85 29 ff ff ff    	jne    c0016b20 <cleanerTaskFunction(void*)+0x4>
c0016bf7:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c0016bfc:	85 c0                	test   eax,eax
c0016bfe:	0f 84 1c ff ff ff    	je     c0016b20 <cleanerTaskFunction(void*)+0x4>
c0016c04:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c0016c0e:	e8 71 f8 ff ff       	call   c0016484 <schedule()>
c0016c13:	e9 08 ff ff ff       	jmp    c0016b20 <cleanerTaskFunction(void*)+0x4>
c0016c18:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016c20:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016c25:	85 c0                	test   eax,eax
c0016c27:	0f 85 2f ff ff ff    	jne    c0016b5c <cleanerTaskFunction(void*)+0x40>
c0016c2d:	fb                   	sti    
c0016c2e:	e9 29 ff ff ff       	jmp    c0016b5c <cleanerTaskFunction(void*)+0x40>
c0016c33:	90                   	nop

c0016c34 <terminateTask(int)>:
c0016c34:	83 ec 14             	sub    esp,0x14
c0016c37:	fa                   	cli    
c0016c38:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016c3d:	83 c0 01             	add    eax,0x1
c0016c40:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0016c45:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c0016c4a:	83 c0 01             	add    eax,0x1
c0016c4d:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0016c52:	fa                   	cli    
c0016c53:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016c58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c5c:	83 c0 01             	add    eax,0x1
c0016c5f:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0016c64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c69:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016c6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c71:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016c74:	50                   	push   eax
c0016c75:	68 34 da 02 c0       	push   0xc002da34
c0016c7a:	e8 ad a5 00 00       	call   c002122c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c84:	83 c4 10             	add    esp,0x10
c0016c87:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016c8e:	a1 10 da 02 c0       	mov    eax,ds:0xc002da10
c0016c93:	85 c0                	test   eax,eax
c0016c95:	0f 84 81 00 00 00    	je     c0016d1c <terminateTask(int)+0xe8>
c0016c9b:	83 ec 0c             	sub    esp,0xc
c0016c9e:	c6 05 14 da 02 c0 01 	mov    BYTE PTR ds:0xc002da14,0x1
c0016ca5:	50                   	push   eax
c0016ca6:	e8 e9 fa ff ff       	call   c0016794 <unblockTask(ThreadControlBlock*)>
c0016cab:	83 c4 10             	add    esp,0x10
c0016cae:	66 90                	xchg   ax,ax
c0016cb0:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016cb8:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016cbd:	85 c0                	test   eax,eax
c0016cbf:	75 03                	jne    c0016cc4 <terminateTask(int)+0x90>
c0016cc1:	fb                   	sti    
c0016cc2:	66 90                	xchg   ax,ax
c0016cc4:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c0016cc9:	83 e8 01             	sub    eax,0x1
c0016ccc:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c0016cd1:	75 09                	jne    c0016cdc <terminateTask(int)+0xa8>
c0016cd3:	83 3d 28 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da28,0x0
c0016cda:	75 54                	jne    c0016d30 <terminateTask(int)+0xfc>
c0016cdc:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016ce4:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c0016cea:	85 c9                	test   ecx,ecx
c0016cec:	75 06                	jne    c0016cf4 <terminateTask(int)+0xc0>
c0016cee:	66 90                	xchg   ax,ax
c0016cf0:	fb                   	sti    
c0016cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0016cf4:	fa                   	cli    
c0016cf5:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c0016cfa:	83 c0 01             	add    eax,0x1
c0016cfd:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c0016d02:	e8 7d f7 ff ff       	call   c0016484 <schedule()>
c0016d07:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c0016d0f:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c0016d15:	85 d2                	test   edx,edx
c0016d17:	75 db                	jne    c0016cf4 <terminateTask(int)+0xc0>
c0016d19:	eb d5                	jmp    c0016cf0 <terminateTask(int)+0xbc>
c0016d1b:	90                   	nop
c0016d1c:	83 ec 0c             	sub    esp,0xc
c0016d1f:	68 7a 42 02 c0       	push   0xc002427a
c0016d24:	e8 3b 02 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016d29:	83 c4 10             	add    esp,0x10
c0016d2c:	eb 82                	jmp    c0016cb0 <terminateTask(int)+0x7c>
c0016d2e:	66 90                	xchg   ax,ax
c0016d30:	c7 05 28 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da28,0x0
c0016d3a:	e8 45 f7 ff ff       	call   c0016484 <schedule()>
c0016d3f:	eb 9b                	jmp    c0016cdc <terminateTask(int)+0xa8>
c0016d41:	8d 76 00             	lea    esi,[esi+0x0]

c0016d44 <Thr::terminateFromIRQ(int)>:
c0016d44:	83 ec 18             	sub    esp,0x18
c0016d47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d4b:	50                   	push   eax
c0016d4c:	e8 e3 fe ff ff       	call   c0016c34 <terminateTask(int)>
c0016d51:	8d 76 00             	lea    esi,[esi+0x0]

c0016d54 <__static_initialization_and_destruction_0(int, int)>:
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016d5c:	0f 85 8e 00 00 00    	jne    c0016df0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016d62:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016d6a:	0f 85 80 00 00 00    	jne    c0016df0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016d70:	83 ec 0c             	sub    esp,0xc
c0016d73:	68 4c da 02 c0       	push   0xc002da4c
c0016d78:	e8 4f a9 00 00       	call   c00216cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d7d:	83 c4 10             	add    esp,0x10
c0016d80:	83 ec 04             	sub    esp,0x4
c0016d83:	68 84 53 02 c0       	push   0xc0025384
c0016d88:	68 4c da 02 c0       	push   0xc002da4c
c0016d8d:	68 7c 16 02 c0       	push   0xc002167c
c0016d92:	e8 c0 5d ff ff       	call   c000cb57 <__cxa_atexit>
c0016d97:	83 c4 10             	add    esp,0x10
c0016d9a:	83 ec 0c             	sub    esp,0xc
c0016d9d:	68 40 da 02 c0       	push   0xc002da40
c0016da2:	e8 25 a9 00 00       	call   c00216cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016da7:	83 c4 10             	add    esp,0x10
c0016daa:	83 ec 04             	sub    esp,0x4
c0016dad:	68 84 53 02 c0       	push   0xc0025384
c0016db2:	68 40 da 02 c0       	push   0xc002da40
c0016db7:	68 7c 16 02 c0       	push   0xc002167c
c0016dbc:	e8 96 5d ff ff       	call   c000cb57 <__cxa_atexit>
c0016dc1:	83 c4 10             	add    esp,0x10
c0016dc4:	83 ec 0c             	sub    esp,0xc
c0016dc7:	68 34 da 02 c0       	push   0xc002da34
c0016dcc:	e8 fb a8 00 00       	call   c00216cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016dd1:	83 c4 10             	add    esp,0x10
c0016dd4:	83 ec 04             	sub    esp,0x4
c0016dd7:	68 84 53 02 c0       	push   0xc0025384
c0016ddc:	68 34 da 02 c0       	push   0xc002da34
c0016de1:	68 7c 16 02 c0       	push   0xc002167c
c0016de6:	e8 6c 5d ff ff       	call   c000cb57 <__cxa_atexit>
c0016deb:	83 c4 10             	add    esp,0x10
c0016dee:	66 90                	xchg   ax,ax
c0016df0:	90                   	nop
c0016df1:	83 c4 0c             	add    esp,0xc
c0016df4:	c3                   	ret    
c0016df5:	8d 76 00             	lea    esi,[esi+0x0]

c0016df8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016df8:	83 ec 0c             	sub    esp,0xc
c0016dfb:	83 ec 08             	sub    esp,0x8
c0016dfe:	68 ff ff 00 00       	push   0xffff
c0016e03:	6a 01                	push   0x1
c0016e05:	e8 4a ff ff ff       	call   c0016d54 <__static_initialization_and_destruction_0(int, int)>
c0016e0a:	83 c4 10             	add    esp,0x10
c0016e0d:	83 c4 0c             	add    esp,0xc
c0016e10:	c3                   	ret    

c0016e11 <Vm::inbv(unsigned short)>:
c0016e11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016e15:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016e1a:	75 06                	jne    c0016e22 <Vm::inbv(unsigned short)+0x11>
c0016e1c:	a0 90 da 02 c0       	mov    al,ds:0xc002da90
c0016e21:	c3                   	ret    
c0016e22:	ec                   	in     al,dx
c0016e23:	c3                   	ret    

c0016e24 <Vm::outbv(unsigned short, unsigned char)>:
c0016e24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016e28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e2c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016e31:	75 25                	jne    c0016e58 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016e33:	8b 0d 90 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da90
c0016e39:	8d 51 01             	lea    edx,[ecx+0x1]
c0016e3c:	88 81 a0 da 02 c0    	mov    BYTE PTR [ecx-0x3ffd2560],al
c0016e42:	89 15 90 da 02 c0    	mov    DWORD PTR ds:0xc002da90,edx
c0016e48:	83 fa 20             	cmp    edx,0x20
c0016e4b:	75 0c                	jne    c0016e59 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016e4d:	c7 05 90 da 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002da90,0x1f
c0016e57:	c3                   	ret    
c0016e58:	ee                   	out    dx,al
c0016e59:	c3                   	ret    

c0016e5a <Vm::realToLinear(unsigned short, unsigned short)>:
c0016e5a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016e5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016e64:	c1 e0 04             	shl    eax,0x4
c0016e67:	01 d0                	add    eax,edx
c0016e69:	c3                   	ret    

c0016e6a <Vm::getSegment(unsigned int)>:
c0016e6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e6e:	c1 e8 10             	shr    eax,0x10
c0016e71:	c3                   	ret    

c0016e72 <Vm::getOffset(unsigned int)>:
c0016e72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e76:	c3                   	ret    

c0016e77 <Vm::mainloop2()>:
c0016e77:	83 ec 18             	sub    esp,0x18
c0016e7a:	fa                   	cli    
c0016e7b:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0016e81:	6a 02                	push   0x2
c0016e83:	c6 05 89 da 02 c0 01 	mov    BYTE PTR ds:0xc002da89,0x1
c0016e8a:	e8 89 f6 ff ff       	call   c0016518 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e94:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016e98:	52                   	push   edx
c0016e99:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016e9d:	52                   	push   edx
c0016e9e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016ea2:	52                   	push   edx
c0016ea3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016ea7:	50                   	push   eax
c0016ea8:	e8 62 93 fe ff       	call   c000020f <goToVM86>
c0016ead:	83 c4 2c             	add    esp,0x2c
c0016eb0:	c3                   	ret    

c0016eb1 <Vm::mainVm8086Loop(void*)>:
c0016eb1:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0016eb8:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0016ebf:	75 01                	jne    c0016ec2 <Vm::mainVm8086Loop(void*)+0x11>
c0016ec1:	fb                   	sti    
c0016ec2:	eb b3                	jmp    c0016e77 <Vm::mainloop2()>

c0016ec4 <Vm::mainloop3(unsigned long)>:
c0016ec4:	83 ec 18             	sub    esp,0x18
c0016ec7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ecb:	fa                   	cli    
c0016ecc:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0016ed2:	6a 02                	push   0x2
c0016ed4:	c6 05 88 da 02 c0 01 	mov    BYTE PTR ds:0xc002da88,0x1
c0016edb:	a3 84 da 02 c0       	mov    ds:0xc002da84,eax
c0016ee0:	e8 33 f6 ff ff       	call   c0016518 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016ee5:	83 c4 1c             	add    esp,0x1c
c0016ee8:	eb 8d                	jmp    c0016e77 <Vm::mainloop2()>

c0016eea <Vm::initialise8086()>:
c0016eea:	83 ec 0c             	sub    esp,0xc
c0016eed:	68 80 00 00 00       	push   0x80
c0016ef2:	6a 00                	push   0x0
c0016ef4:	68 b1 6e 01 c0       	push   0xc0016eb1
c0016ef9:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0016eff:	e8 28 f3 ff ff       	call   c001622c <Process::createThread(void (*)(void*), void*, int)>
c0016f04:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016f0b:	a3 8c da 02 c0       	mov    ds:0xc002da8c,eax
c0016f10:	68 10 01 00 00       	push   0x110
c0016f15:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0016f1a:	6a 00                	push   0x0
c0016f1c:	6a 00                	push   0x0
c0016f1e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f24:	e8 fd c5 ff ff       	call   c0013526 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016f29:	83 c4 2c             	add    esp,0x2c
c0016f2c:	c3                   	ret    

c0016f2d <Vm::resetConventionalMemory8086()>:
c0016f2d:	c3                   	ret    

c0016f2e <Vm::finish8086()>:
c0016f2e:	53                   	push   ebx
c0016f2f:	83 ec 08             	sub    esp,0x8
c0016f32:	fa                   	cli    
c0016f33:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0016f39:	80 3d 88 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da88,0x0
c0016f40:	75 18                	jne    c0016f5a <Vm::finish8086()+0x2c>
c0016f42:	e8 3d f5 ff ff       	call   c0016484 <schedule()>
c0016f47:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0016f4e:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0016f55:	75 db                	jne    c0016f32 <Vm::finish8086()+0x4>
c0016f57:	fb                   	sti    
c0016f58:	eb d8                	jmp    c0016f32 <Vm::finish8086()+0x4>
c0016f5a:	83 ec 0c             	sub    esp,0xc
c0016f5d:	8b 1d 84 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da84
c0016f63:	ff 35 8c da 02 c0    	push   DWORD PTR ds:0xc002da8c
c0016f69:	c6 05 88 da 02 c0 00 	mov    BYTE PTR ds:0xc002da88,0x0
c0016f70:	e8 1f f8 ff ff       	call   c0016794 <unblockTask(ThreadControlBlock*)>
c0016f75:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0016f7c:	83 c4 10             	add    esp,0x10
c0016f7f:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0016f86:	75 01                	jne    c0016f89 <Vm::finish8086()+0x5b>
c0016f88:	fb                   	sti    
c0016f89:	89 d8                	mov    eax,ebx
c0016f8b:	83 c4 08             	add    esp,0x8
c0016f8e:	5b                   	pop    ebx
c0016f8f:	c3                   	ret    

c0016f90 <Vm::getOutput8086(unsigned char*)>:
c0016f90:	57                   	push   edi
c0016f91:	8b 0d 90 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da90
c0016f97:	56                   	push   esi
c0016f98:	be a0 da 02 c0       	mov    esi,0xc002daa0
c0016f9d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016fa1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fa3:	a1 90 da 02 c0       	mov    eax,ds:0xc002da90
c0016fa8:	5e                   	pop    esi
c0016fa9:	c7 05 90 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da90,0x0
c0016fb3:	5f                   	pop    edi
c0016fb4:	c3                   	ret    

c0016fb5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016fb5:	55                   	push   ebp
c0016fb6:	57                   	push   edi
c0016fb7:	56                   	push   esi
c0016fb8:	53                   	push   ebx
c0016fb9:	83 ec 2c             	sub    esp,0x2c
c0016fbc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0016fc0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016fc4:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016fc8:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0016fcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fd0:	80 3d 80 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da80,0x0
c0016fd7:	75 5d                	jne    c0017036 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016fd9:	83 ec 0c             	sub    esp,0xc
c0016fdc:	68 14 01 00 00       	push   0x114
c0016fe1:	e8 39 85 ff ff       	call   c000f51f <malloc>
c0016fe6:	83 c4 0c             	add    esp,0xc
c0016fe9:	89 c7                	mov    edi,eax
c0016feb:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c0016ff1:	68 90 43 02 c0       	push   0xc0024390
c0016ff6:	50                   	push   eax
c0016ff7:	e8 36 11 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0016ffc:	58                   	pop    eax
c0016ffd:	5a                   	pop    edx
c0016ffe:	6a 12                	push   0x12
c0017000:	57                   	push   edi
c0017001:	e8 4a 11 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0017006:	59                   	pop    ecx
c0017007:	8b 07                	mov    eax,DWORD PTR [edi]
c0017009:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001700d:	51                   	push   ecx
c001700e:	6a 00                	push   0x0
c0017010:	6a 00                	push   0x0
c0017012:	68 00 00 11 00       	push   0x110000
c0017017:	57                   	push   edi
c0017018:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001701b:	83 c4 14             	add    esp,0x14
c001701e:	57                   	push   edi
c001701f:	e8 8a 11 ff ff       	call   c00081ae <File::close()>
c0017024:	8b 07                	mov    eax,DWORD PTR [edi]
c0017026:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017029:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001702c:	c6 05 80 da 02 c0 01 	mov    BYTE PTR ds:0xc002da80,0x1
c0017033:	83 c4 10             	add    esp,0x10
c0017036:	fa                   	cli    
c0017037:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c001703d:	80 3d 89 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da89,0x0
c0017044:	75 18                	jne    c001705e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0017046:	e8 39 f4 ff ff       	call   c0016484 <schedule()>
c001704b:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0017052:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0017059:	75 db                	jne    c0017036 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001705b:	fb                   	sti    
c001705c:	eb d8                	jmp    c0017036 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001705e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017062:	a1 8c da 02 c0       	mov    eax,ds:0xc002da8c
c0017067:	c7 05 90 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da90,0x0
c0017071:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0017075:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0017079:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001707d:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017081:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0017085:	0f b7 f6             	movzx  esi,si
c0017088:	0f b7 db             	movzx  ebx,bx
c001708b:	50                   	push   eax
c001708c:	6a 20                	push   0x20
c001708e:	6a 00                	push   0x0
c0017090:	68 a0 da 02 c0       	push   0xc002daa0
c0017095:	e8 56 94 fe ff       	call   c00004f0 <memset>
c001709a:	5a                   	pop    edx
c001709b:	59                   	pop    ecx
c001709c:	56                   	push   esi
c001709d:	53                   	push   ebx
c001709e:	e8 b7 fd ff ff       	call   c0016e5a <Vm::realToLinear(unsigned short, unsigned short)>
c00170a3:	83 c4 10             	add    esp,0x10
c00170a6:	89 c7                	mov    edi,eax
c00170a8:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170ac:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00170b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00170b2:	c6 05 89 da 02 c0 00 	mov    BYTE PTR ds:0xc002da89,0x0
c00170b9:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c00170c0:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c00170c7:	75 01                	jne    c00170ca <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c00170c9:	fb                   	sti    
c00170ca:	83 ec 0c             	sub    esp,0xc
c00170cd:	ff 35 8c da 02 c0    	push   DWORD PTR ds:0xc002da8c
c00170d3:	e8 bc f6 ff ff       	call   c0016794 <unblockTask(ThreadControlBlock*)>
c00170d8:	83 c4 3c             	add    esp,0x3c
c00170db:	b0 01                	mov    al,0x1
c00170dd:	5b                   	pop    ebx
c00170de:	5e                   	pop    esi
c00170df:	5f                   	pop    edi
c00170e0:	5d                   	pop    ebp
c00170e1:	c3                   	ret    

c00170e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00170e2:	55                   	push   ebp
c00170e3:	57                   	push   edi
c00170e4:	56                   	push   esi
c00170e5:	53                   	push   ebx
c00170e6:	83 ec 2c             	sub    esp,0x2c
c00170e9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170ed:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00170f1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00170f5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00170f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170fd:	80 3d 80 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da80,0x0
c0017104:	75 5d                	jne    c0017163 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017106:	83 ec 0c             	sub    esp,0xc
c0017109:	68 14 01 00 00       	push   0x114
c001710e:	e8 0c 84 ff ff       	call   c000f51f <malloc>
c0017113:	83 c4 0c             	add    esp,0xc
c0017116:	89 c6                	mov    esi,eax
c0017118:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c001711e:	68 90 43 02 c0       	push   0xc0024390
c0017123:	50                   	push   eax
c0017124:	e8 09 10 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017129:	58                   	pop    eax
c001712a:	5a                   	pop    edx
c001712b:	6a 12                	push   0x12
c001712d:	56                   	push   esi
c001712e:	e8 1d 10 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0017133:	59                   	pop    ecx
c0017134:	8b 06                	mov    eax,DWORD PTR [esi]
c0017136:	8d 54 24 24          	lea    edx,[esp+0x24]
c001713a:	52                   	push   edx
c001713b:	6a 00                	push   0x0
c001713d:	6a 00                	push   0x0
c001713f:	68 00 00 11 00       	push   0x110000
c0017144:	56                   	push   esi
c0017145:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017148:	83 c4 14             	add    esp,0x14
c001714b:	56                   	push   esi
c001714c:	e8 5d 10 ff ff       	call   c00081ae <File::close()>
c0017151:	8b 06                	mov    eax,DWORD PTR [esi]
c0017153:	89 34 24             	mov    DWORD PTR [esp],esi
c0017156:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017159:	c6 05 80 da 02 c0 01 	mov    BYTE PTR ds:0xc002da80,0x1
c0017160:	83 c4 10             	add    esp,0x10
c0017163:	50                   	push   eax
c0017164:	50                   	push   eax
c0017165:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017169:	68 ab 43 02 c0       	push   0xc00243ab
c001716e:	e8 f1 fd fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017173:	83 c4 10             	add    esp,0x10
c0017176:	fa                   	cli    
c0017177:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c001717d:	0f b6 35 89 da 02 c0 	movzx  esi,BYTE PTR ds:0xc002da89
c0017184:	89 f0                	mov    eax,esi
c0017186:	84 c0                	test   al,al
c0017188:	75 18                	jne    c00171a2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001718a:	e8 f5 f2 ff ff       	call   c0016484 <schedule()>
c001718f:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0017196:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c001719d:	75 d7                	jne    c0017176 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c001719f:	fb                   	sti    
c00171a0:	eb d4                	jmp    c0017176 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00171a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171a6:	a1 8c da 02 c0       	mov    eax,ds:0xc002da8c
c00171ab:	c7 05 90 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da90,0x0
c00171b5:	66 89 48 5b          	mov    WORD PTR [eax+0x5b],cx
c00171b9:	66 89 58 59          	mov    WORD PTR [eax+0x59],bx
c00171bd:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00171c1:	66 89 68 57          	mov    WORD PTR [eax+0x57],bp
c00171c5:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00171c9:	50                   	push   eax
c00171ca:	6a 20                	push   0x20
c00171cc:	6a 00                	push   0x0
c00171ce:	68 a0 da 02 c0       	push   0xc002daa0
c00171d3:	e8 18 93 fe ff       	call   c00004f0 <memset>
c00171d8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00171df:	e8 3b 83 ff ff       	call   c000f51f <malloc>
c00171e4:	83 c4 0c             	add    esp,0xc
c00171e7:	89 c3                	mov    ebx,eax
c00171e9:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c00171ef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171f3:	50                   	push   eax
c00171f4:	e8 39 0f ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00171f9:	83 c4 10             	add    esp,0x10
c00171fc:	85 db                	test   ebx,ebx
c00171fe:	75 0a                	jne    c001720a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x128>
c0017200:	83 ec 0c             	sub    esp,0xc
c0017203:	68 cd 43 02 c0       	push   0xc00243cd
c0017208:	eb 2b                	jmp    c0017235 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x153>
c001720a:	50                   	push   eax
c001720b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001720f:	50                   	push   eax
c0017210:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017214:	50                   	push   eax
c0017215:	53                   	push   ebx
c0017216:	e8 37 12 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001721b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001721f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017223:	83 c4 10             	add    esp,0x10
c0017226:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001722b:	74 28                	je     c0017255 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x173>
c001722d:	83 ec 0c             	sub    esp,0xc
c0017230:	68 e1 43 02 c0       	push   0xc00243e1
c0017235:	e8 2c 86 ff ff       	call   c000f866 <KePanic(char const*)>
c001723a:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c0017241:	83 c4 10             	add    esp,0x10
c0017244:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c001724b:	75 01                	jne    c001724e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c001724d:	fb                   	sti    
c001724e:	31 f6                	xor    esi,esi
c0017250:	e9 91 00 00 00       	jmp    c00172e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0017255:	51                   	push   ecx
c0017256:	51                   	push   ecx
c0017257:	6a 01                	push   0x1
c0017259:	53                   	push   ebx
c001725a:	e8 f1 0e ff ff       	call   c0008150 <File::open(FileOpenMode)>
c001725f:	83 c4 10             	add    esp,0x10
c0017262:	85 c0                	test   eax,eax
c0017264:	74 27                	je     c001728d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ab>
c0017266:	83 ec 0c             	sub    esp,0xc
c0017269:	68 fa 43 02 c0       	push   0xc00243fa
c001726e:	e8 f3 85 ff ff       	call   c000f866 <KePanic(char const*)>
c0017273:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001727a:	83 c4 10             	add    esp,0x10
c001727d:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c0017284:	75 c8                	jne    c001724e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0017286:	fb                   	sti    
c0017287:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001728b:	eb 59                	jmp    c00172e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c001728d:	0f b7 ff             	movzx  edi,di
c0017290:	50                   	push   eax
c0017291:	50                   	push   eax
c0017292:	0f b7 c5             	movzx  eax,bp
c0017295:	57                   	push   edi
c0017296:	50                   	push   eax
c0017297:	e8 be fb ff ff       	call   c0016e5a <Vm::realToLinear(unsigned short, unsigned short)>
c001729c:	5a                   	pop    edx
c001729d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001729f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00172a3:	51                   	push   ecx
c00172a4:	50                   	push   eax
c00172a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00172a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00172ad:	53                   	push   ebx
c00172ae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00172b1:	83 c4 14             	add    esp,0x14
c00172b4:	53                   	push   ebx
c00172b5:	e8 f4 0e ff ff       	call   c00081ae <File::close()>
c00172ba:	c6 05 89 da 02 c0 00 	mov    BYTE PTR ds:0xc002da89,0x0
c00172c1:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c00172c8:	83 c4 10             	add    esp,0x10
c00172cb:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c00172d2:	75 01                	jne    c00172d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f3>
c00172d4:	fb                   	sti    
c00172d5:	83 ec 0c             	sub    esp,0xc
c00172d8:	ff 35 8c da 02 c0    	push   DWORD PTR ds:0xc002da8c
c00172de:	e8 b1 f4 ff ff       	call   c0016794 <unblockTask(ThreadControlBlock*)>
c00172e3:	83 c4 10             	add    esp,0x10
c00172e6:	83 c4 2c             	add    esp,0x2c
c00172e9:	89 f0                	mov    eax,esi
c00172eb:	5b                   	pop    ebx
c00172ec:	5e                   	pop    esi
c00172ed:	5f                   	pop    edi
c00172ee:	5d                   	pop    ebp
c00172ef:	c3                   	ret    

c00172f0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00172f0:	57                   	push   edi
c00172f1:	56                   	push   esi
c00172f2:	53                   	push   ebx
c00172f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00172f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172fb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00172ff:	83 e8 06             	sub    eax,0x6
c0017302:	0f b7 c0             	movzx  eax,ax
c0017305:	50                   	push   eax
c0017306:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001730b:	50                   	push   eax
c001730c:	e8 49 fb ff ff       	call   c0016e5a <Vm::realToLinear(unsigned short, unsigned short)>
c0017311:	5a                   	pop    edx
c0017312:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017315:	59                   	pop    ecx
c0017316:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017319:	8d 51 fa             	lea    edx,[ecx-0x6]
c001731c:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017322:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017325:	8d 56 02             	lea    edx,[esi+0x2]
c0017328:	66 89 10             	mov    WORD PTR [eax],dx
c001732b:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001732f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017333:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017336:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c001733a:	0f b6 f1             	movzx  esi,cl
c001733d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017341:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017347:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c001734b:	0f b6 d5             	movzx  edx,ch
c001734e:	74 0a                	je     c001735a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0017350:	c1 e2 08             	shl    edx,0x8
c0017353:	09 f2                	or     edx,esi
c0017355:	80 ce 02             	or     dh,0x2
c0017358:	eb 08                	jmp    c0017362 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c001735a:	c1 e2 08             	shl    edx,0x8
c001735d:	09 f2                	or     edx,esi
c001735f:	80 e6 fd             	and    dh,0xfd
c0017362:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017366:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001736b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001736f:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017377:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c001737a:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017382:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017385:	5b                   	pop    ebx
c0017386:	5e                   	pop    esi
c0017387:	5f                   	pop    edi
c0017388:	c3                   	ret    

c0017389 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017389:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001738e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017393:	c1 e0 04             	shl    eax,0x4
c0017396:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017399:	c3                   	ret    

c001739a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001739a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001739f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00173a4:	c1 e0 04             	shl    eax,0x4
c00173a7:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00173ab:	c3                   	ret    

c00173ac <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00173ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00173b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00173b6:	c1 e0 04             	shl    eax,0x4
c00173b9:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00173bc:	c3                   	ret    

c00173bd <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00173bd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00173c2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00173c7:	c1 e0 04             	shl    eax,0x4
c00173ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173ce:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00173d1:	c3                   	ret    

c00173d2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00173d2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00173d7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00173dc:	c1 e0 04             	shl    eax,0x4
c00173df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173e3:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00173e7:	c3                   	ret    

c00173e8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00173e8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00173ed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00173f2:	c1 e0 04             	shl    eax,0x4
c00173f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173f9:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00173fc:	c3                   	ret    

c00173fd <Vm::faultHandler(regs*)>:
c00173fd:	55                   	push   ebp
c00173fe:	57                   	push   edi
c00173ff:	56                   	push   esi
c0017400:	53                   	push   ebx
c0017401:	83 ec 2c             	sub    esp,0x2c
c0017404:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017408:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001740b:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001740f:	0f b7 f8             	movzx  edi,ax
c0017412:	52                   	push   edx
c0017413:	0f b7 c0             	movzx  eax,ax
c0017416:	50                   	push   eax
c0017417:	e8 3e fa ff ff       	call   c0016e5a <Vm::realToLinear(unsigned short, unsigned short)>
c001741c:	5a                   	pop    edx
c001741d:	59                   	pop    ecx
c001741e:	89 c1                	mov    ecx,eax
c0017420:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017427:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001742c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017430:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017433:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017437:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001743c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017440:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017444:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017448:	e8 0d fa ff ff       	call   c0016e5a <Vm::realToLinear(unsigned short, unsigned short)>
c001744d:	5e                   	pop    esi
c001744e:	be 06 00 00 00       	mov    esi,0x6
c0017453:	5d                   	pop    ebp
c0017454:	31 ed                	xor    ebp,ebp
c0017456:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001745b:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001745e:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017464:	0f 84 74 02 00 00    	je     c00176de <Vm::faultHandler(regs*)+0x2e1>
c001746a:	0f 87 94 00 00 00    	ja     c0017504 <Vm::faultHandler(regs*)+0x107>
c0017470:	83 fa 66             	cmp    edx,0x66
c0017473:	0f 84 e2 01 00 00    	je     c001765b <Vm::faultHandler(regs*)+0x25e>
c0017479:	77 47                	ja     c00174c2 <Vm::faultHandler(regs*)+0xc5>
c001747b:	83 fa 36             	cmp    edx,0x36
c001747e:	0f 84 ca 01 00 00    	je     c001764e <Vm::faultHandler(regs*)+0x251>
c0017484:	77 1a                	ja     c00174a0 <Vm::faultHandler(regs*)+0xa3>
c0017486:	83 fa 26             	cmp    edx,0x26
c0017489:	0f 84 98 01 00 00    	je     c0017627 <Vm::faultHandler(regs*)+0x22a>
c001748f:	83 fa 2e             	cmp    edx,0x2e
c0017492:	0f 85 21 06 00 00    	jne    c0017ab9 <Vm::faultHandler(regs*)+0x6bc>
c0017498:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001749b:	31 f6                	xor    esi,esi
c001749d:	41                   	inc    ecx
c001749e:	eb bb                	jmp    c001745b <Vm::faultHandler(regs*)+0x5e>
c00174a0:	83 fa 64             	cmp    edx,0x64
c00174a3:	0f 84 8b 01 00 00    	je     c0017634 <Vm::faultHandler(regs*)+0x237>
c00174a9:	0f 87 92 01 00 00    	ja     c0017641 <Vm::faultHandler(regs*)+0x244>
c00174af:	83 fa 3e             	cmp    edx,0x3e
c00174b2:	0f 85 01 06 00 00    	jne    c0017ab9 <Vm::faultHandler(regs*)+0x6bc>
c00174b8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174bb:	be 01 00 00 00       	mov    esi,0x1
c00174c0:	eb db                	jmp    c001749d <Vm::faultHandler(regs*)+0xa0>
c00174c2:	83 fa 6d             	cmp    edx,0x6d
c00174c5:	0f 84 34 03 00 00    	je     c00177ff <Vm::faultHandler(regs*)+0x402>
c00174cb:	77 17                	ja     c00174e4 <Vm::faultHandler(regs*)+0xe7>
c00174cd:	83 fa 67             	cmp    edx,0x67
c00174d0:	0f 84 92 01 00 00    	je     c0017668 <Vm::faultHandler(regs*)+0x26b>
c00174d6:	83 fa 6c             	cmp    edx,0x6c
c00174d9:	0f 84 b1 02 00 00    	je     c0017790 <Vm::faultHandler(regs*)+0x393>
c00174df:	e9 d5 05 00 00       	jmp    c0017ab9 <Vm::faultHandler(regs*)+0x6bc>
c00174e4:	83 fa 6f             	cmp    edx,0x6f
c00174e7:	0f 84 3d 04 00 00    	je     c001792a <Vm::faultHandler(regs*)+0x52d>
c00174ed:	0f 82 9f 03 00 00    	jb     c0017892 <Vm::faultHandler(regs*)+0x495>
c00174f3:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00174f9:	0f 84 76 01 00 00    	je     c0017675 <Vm::faultHandler(regs*)+0x278>
c00174ff:	e9 b5 05 00 00       	jmp    c0017ab9 <Vm::faultHandler(regs*)+0x6bc>
c0017504:	81 fa ec 00 00 00    	cmp    edx,0xec
c001750a:	0f 84 51 05 00 00    	je     c0017a61 <Vm::faultHandler(regs*)+0x664>
c0017510:	0f 87 a9 00 00 00    	ja     c00175bf <Vm::faultHandler(regs*)+0x1c2>
c0017516:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001751c:	0f 84 d0 04 00 00    	je     c00179f2 <Vm::faultHandler(regs*)+0x5f5>
c0017522:	77 78                	ja     c001759c <Vm::faultHandler(regs*)+0x19f>
c0017524:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001752a:	0f 84 0e 02 00 00    	je     c001773e <Vm::faultHandler(regs*)+0x341>
c0017530:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017536:	0f 85 7d 05 00 00    	jne    c0017ab9 <Vm::faultHandler(regs*)+0x6bc>
c001753c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017540:	89 d1                	mov    ecx,edx
c0017542:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017545:	c1 e1 08             	shl    ecx,0x8
c0017548:	09 ca                	or     edx,ecx
c001754a:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001754d:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017551:	89 d1                	mov    ecx,edx
c0017553:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017557:	c1 e1 08             	shl    ecx,0x8
c001755a:	09 ca                	or     edx,ecx
c001755c:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001755f:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017563:	89 d1                	mov    ecx,edx
c0017565:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017569:	c1 e1 08             	shl    ecx,0x8
c001756c:	09 ca                	or     edx,ecx
c001756e:	81 ca 00 02 02 00    	or     edx,0x20200
c0017574:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017577:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001757b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017581:	d1 e8                	shr    eax,1
c0017583:	83 e0 01             	and    eax,0x1
c0017586:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017589:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001758c:	83 c0 06             	add    eax,0x6
c001758f:	25 ff ff 00 00       	and    eax,0xffff
c0017594:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017597:	e9 19 05 00 00       	jmp    c0017ab5 <Vm::faultHandler(regs*)+0x6b8>
c001759c:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00175a2:	0f 84 8f 04 00 00    	je     c0017a37 <Vm::faultHandler(regs*)+0x63a>
c00175a8:	0f 82 60 04 00 00    	jb     c0017a0e <Vm::faultHandler(regs*)+0x611>
c00175ae:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00175b4:	0f 84 94 04 00 00    	je     c0017a4e <Vm::faultHandler(regs*)+0x651>
c00175ba:	e9 fa 04 00 00       	jmp    c0017ab9 <Vm::faultHandler(regs*)+0x6bc>
c00175bf:	81 fa ef 00 00 00    	cmp    edx,0xef
c00175c5:	0f 84 d7 04 00 00    	je     c0017aa2 <Vm::faultHandler(regs*)+0x6a5>
c00175cb:	77 2e                	ja     c00175fb <Vm::faultHandler(regs*)+0x1fe>
c00175cd:	81 fa ed 00 00 00    	cmp    edx,0xed
c00175d3:	0f 84 a4 04 00 00    	je     c0017a7d <Vm::faultHandler(regs*)+0x680>
c00175d9:	81 fa ee 00 00 00    	cmp    edx,0xee
c00175df:	0f 85 d4 04 00 00    	jne    c0017ab9 <Vm::faultHandler(regs*)+0x6bc>
c00175e5:	50                   	push   eax
c00175e6:	50                   	push   eax
c00175e7:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00175eb:	50                   	push   eax
c00175ec:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00175f0:	50                   	push   eax
c00175f1:	e8 2e f8 ff ff       	call   c0016e24 <Vm::outbv(unsigned short, unsigned char)>
c00175f6:	e9 9f 04 00 00       	jmp    c0017a9a <Vm::faultHandler(regs*)+0x69d>
c00175fb:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017601:	0f 84 6d 01 00 00    	je     c0017774 <Vm::faultHandler(regs*)+0x377>
c0017607:	81 fa fb 00 00 00    	cmp    edx,0xfb
c001760d:	0f 84 6f 01 00 00    	je     c0017782 <Vm::faultHandler(regs*)+0x385>
c0017613:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017619:	0f 85 9a 04 00 00    	jne    c0017ab9 <Vm::faultHandler(regs*)+0x6bc>
c001761f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017622:	e9 76 fe ff ff       	jmp    c001749d <Vm::faultHandler(regs*)+0xa0>
c0017627:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001762a:	be 02 00 00 00       	mov    esi,0x2
c001762f:	e9 69 fe ff ff       	jmp    c001749d <Vm::faultHandler(regs*)+0xa0>
c0017634:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017637:	be 03 00 00 00       	mov    esi,0x3
c001763c:	e9 5c fe ff ff       	jmp    c001749d <Vm::faultHandler(regs*)+0xa0>
c0017641:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017644:	be 04 00 00 00       	mov    esi,0x4
c0017649:	e9 4f fe ff ff       	jmp    c001749d <Vm::faultHandler(regs*)+0xa0>
c001764e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017651:	be 05 00 00 00       	mov    esi,0x5
c0017656:	e9 42 fe ff ff       	jmp    c001749d <Vm::faultHandler(regs*)+0xa0>
c001765b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001765e:	bd 01 00 00 00       	mov    ebp,0x1
c0017663:	e9 35 fe ff ff       	jmp    c001749d <Vm::faultHandler(regs*)+0xa0>
c0017668:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001766b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017670:	e9 28 fe ff ff       	jmp    c001749d <Vm::faultHandler(regs*)+0xa0>
c0017675:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017678:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001767c:	83 e5 01             	and    ebp,0x1
c001767f:	74 30                	je     c00176b1 <Vm::faultHandler(regs*)+0x2b4>
c0017681:	83 e9 04             	sub    ecx,0x4
c0017684:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001768a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017690:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017693:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017696:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001769c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00176a0:	0f 84 0c 04 00 00    	je     c0017ab2 <Vm::faultHandler(regs*)+0x6b5>
c00176a6:	80 ce 02             	or     dh,0x2
c00176a9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00176ac:	e9 01 04 00 00       	jmp    c0017ab2 <Vm::faultHandler(regs*)+0x6b5>
c00176b1:	83 e9 02             	sub    ecx,0x2
c00176b4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00176ba:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00176bd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00176c1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00176c7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00176cb:	74 05                	je     c00176d2 <Vm::faultHandler(regs*)+0x2d5>
c00176cd:	80 ce 02             	or     dh,0x2
c00176d0:	eb 03                	jmp    c00176d5 <Vm::faultHandler(regs*)+0x2d8>
c00176d2:	80 e6 fd             	and    dh,0xfd
c00176d5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00176d9:	e9 d4 03 00 00       	jmp    c0017ab2 <Vm::faultHandler(regs*)+0x6b5>
c00176de:	83 e5 01             	and    ebp,0x1
c00176e1:	74 2a                	je     c001770d <Vm::faultHandler(regs*)+0x310>
c00176e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00176e5:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00176eb:	81 ca 00 02 02 00    	or     edx,0x20200
c00176f1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00176f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00176f6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00176fc:	c1 e8 09             	shr    eax,0x9
c00176ff:	83 e0 01             	and    eax,0x1
c0017702:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017705:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017708:	83 c0 04             	add    eax,0x4
c001770b:	eb 24                	jmp    c0017731 <Vm::faultHandler(regs*)+0x334>
c001770d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017710:	81 ca 00 02 02 00    	or     edx,0x20200
c0017716:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017719:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001771c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017722:	c1 e8 09             	shr    eax,0x9
c0017725:	83 e0 01             	and    eax,0x1
c0017728:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001772b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001772e:	83 c0 02             	add    eax,0x2
c0017731:	25 ff ff 00 00       	and    eax,0xffff
c0017736:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017739:	e9 74 03 00 00       	jmp    c0017ab2 <Vm::faultHandler(regs*)+0x6b5>
c001773e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017742:	3d ee 00 00 00       	cmp    eax,0xee
c0017747:	75 10                	jne    c0017759 <Vm::faultHandler(regs*)+0x35c>
c0017749:	83 ec 0c             	sub    esp,0xc
c001774c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001774f:	e8 70 f7 ff ff       	call   c0016ec4 <Vm::mainloop3(unsigned long)>
c0017754:	e9 44 03 00 00       	jmp    c0017a9d <Vm::faultHandler(regs*)+0x6a0>
c0017759:	83 ec 0c             	sub    esp,0xc
c001775c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017760:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017764:	51                   	push   ecx
c0017765:	50                   	push   eax
c0017766:	53                   	push   ebx
c0017767:	e8 84 fb ff ff       	call   c00172f0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001776c:	83 c4 20             	add    esp,0x20
c001776f:	e9 41 03 00 00       	jmp    c0017ab5 <Vm::faultHandler(regs*)+0x6b8>
c0017774:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017779:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001777d:	e9 30 03 00 00       	jmp    c0017ab2 <Vm::faultHandler(regs*)+0x6b5>
c0017782:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017787:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001778b:	e9 22 03 00 00       	jmp    c0017ab2 <Vm::faultHandler(regs*)+0x6b5>
c0017790:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017793:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017798:	74 2b                	je     c00177c5 <Vm::faultHandler(regs*)+0x3c8>
c001779a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00177a1:	76 22                	jbe    c00177c5 <Vm::faultHandler(regs*)+0x3c8>
c00177a3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177a7:	50                   	push   eax
c00177a8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177ac:	50                   	push   eax
c00177ad:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177b1:	50                   	push   eax
c00177b2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177b6:	50                   	push   eax
c00177b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177bb:	50                   	push   eax
c00177bc:	6a 6c                	push   0x6c
c00177be:	6a 6c                	push   0x6c
c00177c0:	e9 bd 01 00 00       	jmp    c0017982 <Vm::faultHandler(regs*)+0x585>
c00177c5:	83 ec 0c             	sub    esp,0xc
c00177c8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00177cc:	0f b7 f6             	movzx  esi,si
c00177cf:	50                   	push   eax
c00177d0:	e8 3c f6 ff ff       	call   c0016e11 <Vm::inbv(unsigned short)>
c00177d5:	83 c4 0c             	add    esp,0xc
c00177d8:	0f b6 c0             	movzx  eax,al
c00177db:	50                   	push   eax
c00177dc:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00177e0:	50                   	push   eax
c00177e1:	56                   	push   esi
c00177e2:	e8 d6 fb ff ff       	call   c00173bd <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00177e7:	83 c4 10             	add    esp,0x10
c00177ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00177ed:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00177f1:	74 03                	je     c00177f6 <Vm::faultHandler(regs*)+0x3f9>
c00177f3:	48                   	dec    eax
c00177f4:	eb 01                	jmp    c00177f7 <Vm::faultHandler(regs*)+0x3fa>
c00177f6:	40                   	inc    eax
c00177f7:	0f b7 c0             	movzx  eax,ax
c00177fa:	e9 8b 00 00 00       	jmp    c001788a <Vm::faultHandler(regs*)+0x48d>
c00177ff:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017802:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017805:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001780a:	74 29                	je     c0017835 <Vm::faultHandler(regs*)+0x438>
c001780c:	3d ff ff 00 00       	cmp    eax,0xffff
c0017811:	76 22                	jbe    c0017835 <Vm::faultHandler(regs*)+0x438>
c0017813:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017817:	50                   	push   eax
c0017818:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001781c:	50                   	push   eax
c001781d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017821:	50                   	push   eax
c0017822:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017826:	50                   	push   eax
c0017827:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001782b:	50                   	push   eax
c001782c:	6a 6d                	push   0x6d
c001782e:	6a 6d                	push   0x6d
c0017830:	e9 4d 01 00 00       	jmp    c0017982 <Vm::faultHandler(regs*)+0x585>
c0017835:	0f b7 c8             	movzx  ecx,ax
c0017838:	0f b7 f6             	movzx  esi,si
c001783b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001783e:	83 e5 01             	and    ebp,0x1
c0017841:	74 20                	je     c0017863 <Vm::faultHandler(regs*)+0x466>
c0017843:	ed                   	in     eax,dx
c0017844:	55                   	push   ebp
c0017845:	50                   	push   eax
c0017846:	51                   	push   ecx
c0017847:	56                   	push   esi
c0017848:	e8 9b fb ff ff       	call   c00173e8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001784d:	83 c4 10             	add    esp,0x10
c0017850:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017853:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017857:	74 05                	je     c001785e <Vm::faultHandler(regs*)+0x461>
c0017859:	83 e8 04             	sub    eax,0x4
c001785c:	eb 27                	jmp    c0017885 <Vm::faultHandler(regs*)+0x488>
c001785e:	83 c0 04             	add    eax,0x4
c0017861:	eb 22                	jmp    c0017885 <Vm::faultHandler(regs*)+0x488>
c0017863:	66 ed                	in     ax,dx
c0017865:	0f b7 c0             	movzx  eax,ax
c0017868:	57                   	push   edi
c0017869:	50                   	push   eax
c001786a:	51                   	push   ecx
c001786b:	56                   	push   esi
c001786c:	e8 61 fb ff ff       	call   c00173d2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017871:	83 c4 10             	add    esp,0x10
c0017874:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017877:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001787b:	74 05                	je     c0017882 <Vm::faultHandler(regs*)+0x485>
c001787d:	83 e8 02             	sub    eax,0x2
c0017880:	eb 03                	jmp    c0017885 <Vm::faultHandler(regs*)+0x488>
c0017882:	83 c0 02             	add    eax,0x2
c0017885:	25 ff ff 00 00       	and    eax,0xffff
c001788a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001788d:	e9 20 02 00 00       	jmp    c0017ab2 <Vm::faultHandler(regs*)+0x6b5>
c0017892:	8d 46 ff             	lea    eax,[esi-0x1]
c0017895:	0f b6 f0             	movzx  esi,al
c0017898:	83 fe 05             	cmp    esi,0x5
c001789b:	77 23                	ja     c00178c0 <Vm::faultHandler(regs*)+0x4c3>
c001789d:	ff 24 b5 70 44 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdbb90]
c00178a4:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00178a9:	eb 15                	jmp    c00178c0 <Vm::faultHandler(regs*)+0x4c3>
c00178ab:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00178af:	eb 0f                	jmp    c00178c0 <Vm::faultHandler(regs*)+0x4c3>
c00178b1:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00178b5:	eb 09                	jmp    c00178c0 <Vm::faultHandler(regs*)+0x4c3>
c00178b7:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00178bb:	eb 03                	jmp    c00178c0 <Vm::faultHandler(regs*)+0x4c3>
c00178bd:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00178c0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00178c3:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00178c8:	74 29                	je     c00178f3 <Vm::faultHandler(regs*)+0x4f6>
c00178ca:	3d ff ff 00 00       	cmp    eax,0xffff
c00178cf:	76 22                	jbe    c00178f3 <Vm::faultHandler(regs*)+0x4f6>
c00178d1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00178d5:	50                   	push   eax
c00178d6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00178da:	50                   	push   eax
c00178db:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00178df:	50                   	push   eax
c00178e0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00178e4:	50                   	push   eax
c00178e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178e9:	50                   	push   eax
c00178ea:	6a 6e                	push   0x6e
c00178ec:	6a 6e                	push   0x6e
c00178ee:	e9 8f 00 00 00       	jmp    c0017982 <Vm::faultHandler(regs*)+0x585>
c00178f3:	0f b7 c0             	movzx  eax,ax
c00178f6:	52                   	push   edx
c00178f7:	52                   	push   edx
c00178f8:	50                   	push   eax
c00178f9:	57                   	push   edi
c00178fa:	e8 8a fa ff ff       	call   c0017389 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00178ff:	59                   	pop    ecx
c0017900:	0f b6 c0             	movzx  eax,al
c0017903:	5e                   	pop    esi
c0017904:	50                   	push   eax
c0017905:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017909:	50                   	push   eax
c001790a:	e8 15 f5 ff ff       	call   c0016e24 <Vm::outbv(unsigned short, unsigned char)>
c001790f:	83 c4 10             	add    esp,0x10
c0017912:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017915:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017919:	74 03                	je     c001791e <Vm::faultHandler(regs*)+0x521>
c001791b:	48                   	dec    eax
c001791c:	eb 01                	jmp    c001791f <Vm::faultHandler(regs*)+0x522>
c001791e:	40                   	inc    eax
c001791f:	0f b7 c0             	movzx  eax,ax
c0017922:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017925:	e9 88 01 00 00       	jmp    c0017ab2 <Vm::faultHandler(regs*)+0x6b5>
c001792a:	8d 46 ff             	lea    eax,[esi-0x1]
c001792d:	0f b6 f0             	movzx  esi,al
c0017930:	83 fe 05             	cmp    esi,0x5
c0017933:	77 1e                	ja     c0017953 <Vm::faultHandler(regs*)+0x556>
c0017935:	ff 24 b5 88 44 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdbb78]
c001793c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017940:	eb 11                	jmp    c0017953 <Vm::faultHandler(regs*)+0x556>
c0017942:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017945:	eb 0c                	jmp    c0017953 <Vm::faultHandler(regs*)+0x556>
c0017947:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001794a:	eb 07                	jmp    c0017953 <Vm::faultHandler(regs*)+0x556>
c001794c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001794f:	eb 02                	jmp    c0017953 <Vm::faultHandler(regs*)+0x556>
c0017951:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017953:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017956:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001795b:	74 37                	je     c0017994 <Vm::faultHandler(regs*)+0x597>
c001795d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017963:	76 2f                	jbe    c0017994 <Vm::faultHandler(regs*)+0x597>
c0017965:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017969:	50                   	push   eax
c001796a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001796e:	50                   	push   eax
c001796f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017973:	50                   	push   eax
c0017974:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017978:	50                   	push   eax
c0017979:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001797d:	50                   	push   eax
c001797e:	6a 6f                	push   0x6f
c0017980:	6a 6f                	push   0x6f
c0017982:	68 13 44 02 c0       	push   0xc0024413
c0017987:	e8 d8 f5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001798c:	83 c4 20             	add    esp,0x20
c001798f:	e9 83 01 00 00       	jmp    c0017b17 <Vm::faultHandler(regs*)+0x71a>
c0017994:	0f b7 d7             	movzx  edx,di
c0017997:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001799a:	0f b7 c6             	movzx  eax,si
c001799d:	81 e1 00 04 00 00    	and    ecx,0x400
c00179a3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00179a6:	83 e5 01             	and    ebp,0x1
c00179a9:	74 1d                	je     c00179c8 <Vm::faultHandler(regs*)+0x5cb>
c00179ab:	55                   	push   ebp
c00179ac:	55                   	push   ebp
c00179ad:	50                   	push   eax
c00179ae:	52                   	push   edx
c00179af:	e8 f8 f9 ff ff       	call   c00173ac <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00179b4:	83 c4 10             	add    esp,0x10
c00179b7:	89 fa                	mov    edx,edi
c00179b9:	ef                   	out    dx,eax
c00179ba:	85 c9                	test   ecx,ecx
c00179bc:	74 05                	je     c00179c3 <Vm::faultHandler(regs*)+0x5c6>
c00179be:	83 ee 04             	sub    esi,0x4
c00179c1:	eb 21                	jmp    c00179e4 <Vm::faultHandler(regs*)+0x5e7>
c00179c3:	83 c6 04             	add    esi,0x4
c00179c6:	eb 1c                	jmp    c00179e4 <Vm::faultHandler(regs*)+0x5e7>
c00179c8:	55                   	push   ebp
c00179c9:	55                   	push   ebp
c00179ca:	50                   	push   eax
c00179cb:	52                   	push   edx
c00179cc:	e8 c9 f9 ff ff       	call   c001739a <Vm::readWordFromReal(unsigned short, unsigned short)>
c00179d1:	83 c4 10             	add    esp,0x10
c00179d4:	89 fa                	mov    edx,edi
c00179d6:	66 ef                	out    dx,ax
c00179d8:	85 c9                	test   ecx,ecx
c00179da:	74 05                	je     c00179e1 <Vm::faultHandler(regs*)+0x5e4>
c00179dc:	83 ee 02             	sub    esi,0x2
c00179df:	eb 03                	jmp    c00179e4 <Vm::faultHandler(regs*)+0x5e7>
c00179e1:	83 c6 02             	add    esi,0x2
c00179e4:	81 e6 ff ff 00 00    	and    esi,0xffff
c00179ea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00179ed:	e9 c0 00 00 00       	jmp    c0017ab2 <Vm::faultHandler(regs*)+0x6b5>
c00179f2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00179f9:	83 ec 0c             	sub    esp,0xc
c00179fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017a00:	50                   	push   eax
c0017a01:	e8 0b f4 ff ff       	call   c0016e11 <Vm::inbv(unsigned short)>
c0017a06:	0f b6 c0             	movzx  eax,al
c0017a09:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017a0c:	eb 3a                	jmp    c0017a48 <Vm::faultHandler(regs*)+0x64b>
c0017a0e:	83 e5 01             	and    ebp,0x1
c0017a11:	74 07                	je     c0017a1a <Vm::faultHandler(regs*)+0x61d>
c0017a13:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017a17:	ed                   	in     eax,dx
c0017a18:	eb 14                	jmp    c0017a2e <Vm::faultHandler(regs*)+0x631>
c0017a1a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017a1d:	66 31 f6             	xor    si,si
c0017a20:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017a23:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017a27:	66 ed                	in     ax,dx
c0017a29:	0f b7 c0             	movzx  eax,ax
c0017a2c:	09 f0                	or     eax,esi
c0017a2e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017a31:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017a35:	eb 7e                	jmp    c0017ab5 <Vm::faultHandler(regs*)+0x6b8>
c0017a37:	52                   	push   edx
c0017a38:	52                   	push   edx
c0017a39:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017a3d:	50                   	push   eax
c0017a3e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017a42:	50                   	push   eax
c0017a43:	e8 dc f3 ff ff       	call   c0016e24 <Vm::outbv(unsigned short, unsigned char)>
c0017a48:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017a4c:	eb 4f                	jmp    c0017a9d <Vm::faultHandler(regs*)+0x6a0>
c0017a4e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017a51:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017a55:	83 e5 01             	and    ebp,0x1
c0017a58:	74 03                	je     c0017a5d <Vm::faultHandler(regs*)+0x660>
c0017a5a:	ef                   	out    dx,eax
c0017a5b:	eb d4                	jmp    c0017a31 <Vm::faultHandler(regs*)+0x634>
c0017a5d:	66 ef                	out    dx,ax
c0017a5f:	eb d0                	jmp    c0017a31 <Vm::faultHandler(regs*)+0x634>
c0017a61:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017a68:	83 ec 0c             	sub    esp,0xc
c0017a6b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017a6f:	50                   	push   eax
c0017a70:	e8 9c f3 ff ff       	call   c0016e11 <Vm::inbv(unsigned short)>
c0017a75:	0f b6 c0             	movzx  eax,al
c0017a78:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017a7b:	eb 1d                	jmp    c0017a9a <Vm::faultHandler(regs*)+0x69d>
c0017a7d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017a80:	83 e5 01             	and    ebp,0x1
c0017a83:	74 03                	je     c0017a88 <Vm::faultHandler(regs*)+0x68b>
c0017a85:	ed                   	in     eax,dx
c0017a86:	eb 0d                	jmp    c0017a95 <Vm::faultHandler(regs*)+0x698>
c0017a88:	66 ed                	in     ax,dx
c0017a8a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017a8d:	0f b7 c0             	movzx  eax,ax
c0017a90:	66 31 d2             	xor    dx,dx
c0017a93:	09 d0                	or     eax,edx
c0017a95:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017a98:	eb 18                	jmp    c0017ab2 <Vm::faultHandler(regs*)+0x6b5>
c0017a9a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017a9d:	83 c4 10             	add    esp,0x10
c0017aa0:	eb 13                	jmp    c0017ab5 <Vm::faultHandler(regs*)+0x6b8>
c0017aa2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017aa5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017aa8:	83 e5 01             	and    ebp,0x1
c0017aab:	74 03                	je     c0017ab0 <Vm::faultHandler(regs*)+0x6b3>
c0017aad:	ef                   	out    dx,eax
c0017aae:	eb 02                	jmp    c0017ab2 <Vm::faultHandler(regs*)+0x6b5>
c0017ab0:	66 ef                	out    dx,ax
c0017ab2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017ab5:	b0 01                	mov    al,0x1
c0017ab7:	eb 60                	jmp    c0017b19 <Vm::faultHandler(regs*)+0x71c>
c0017ab9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017abd:	50                   	push   eax
c0017abe:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017ac2:	50                   	push   eax
c0017ac3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017ac7:	50                   	push   eax
c0017ac8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017acc:	50                   	push   eax
c0017acd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017ad1:	50                   	push   eax
c0017ad2:	52                   	push   edx
c0017ad3:	52                   	push   edx
c0017ad4:	68 40 44 02 c0       	push   0xc0024440
c0017ad9:	e8 86 f4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017ade:	83 c4 20             	add    esp,0x20
c0017ae1:	83 ec 0c             	sub    esp,0xc
c0017ae4:	6a 60                	push   0x60
c0017ae6:	e8 26 f3 ff ff       	call   c0016e11 <Vm::inbv(unsigned short)>
c0017aeb:	83 c4 10             	add    esp,0x10
c0017aee:	0f b6 d0             	movzx  edx,al
c0017af1:	83 fa 1c             	cmp    edx,0x1c
c0017af4:	74 05                	je     c0017afb <Vm::faultHandler(regs*)+0x6fe>
c0017af6:	83 fa 5a             	cmp    edx,0x5a
c0017af9:	75 e6                	jne    c0017ae1 <Vm::faultHandler(regs*)+0x6e4>
c0017afb:	0f b6 c0             	movzx  eax,al
c0017afe:	83 f8 1c             	cmp    eax,0x1c
c0017b01:	74 05                	je     c0017b08 <Vm::faultHandler(regs*)+0x70b>
c0017b03:	83 f8 5a             	cmp    eax,0x5a
c0017b06:	75 0f                	jne    c0017b17 <Vm::faultHandler(regs*)+0x71a>
c0017b08:	83 ec 0c             	sub    esp,0xc
c0017b0b:	6a 60                	push   0x60
c0017b0d:	e8 ff f2 ff ff       	call   c0016e11 <Vm::inbv(unsigned short)>
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	eb e4                	jmp    c0017afb <Vm::faultHandler(regs*)+0x6fe>
c0017b17:	31 c0                	xor    eax,eax
c0017b19:	83 c4 2c             	add    esp,0x2c
c0017b1c:	5b                   	pop    ebx
c0017b1d:	5e                   	pop    esi
c0017b1e:	5f                   	pop    edi
c0017b1f:	5d                   	pop    ebp
c0017b20:	c3                   	ret    
c0017b21:	90                   	nop

c0017b22 <noCopro(unsigned long)>:
c0017b22:	c3                   	ret    
c0017b23:	90                   	nop

c0017b24 <CPU::close(int, int, void*)>:
c0017b24:	31 c0                	xor    eax,eax
c0017b26:	c3                   	ret    

c0017b27 <x86ReadCMOS(unsigned char)>:
c0017b27:	83 ec 14             	sub    esp,0x14
c0017b2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b2e:	88 04 24             	mov    BYTE PTR [esp],al
c0017b31:	a0 ec da 02 c0       	mov    al,ds:0xc002daec
c0017b36:	0f b6 c0             	movzx  eax,al
c0017b39:	85 c0                	test   eax,eax
c0017b3b:	74 04                	je     c0017b41 <x86ReadCMOS(unsigned char)+0x1a>
c0017b3d:	b2 00                	mov    dl,0x0
c0017b3f:	eb 02                	jmp    c0017b43 <x86ReadCMOS(unsigned char)+0x1c>
c0017b41:	b2 80                	mov    dl,0x80
c0017b43:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017b46:	09 d0                	or     eax,edx
c0017b48:	0f b6 c0             	movzx  eax,al
c0017b4b:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0017b52:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017b56:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017b5a:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017b5f:	ee                   	out    dx,al
c0017b60:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0017b67:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017b6c:	89 c2                	mov    edx,eax
c0017b6e:	ec                   	in     al,dx
c0017b6f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017b73:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017b77:	83 c4 14             	add    esp,0x14
c0017b7a:	c3                   	ret    

c0017b7b <x86WriteCMOS(unsigned char, unsigned char)>:
c0017b7b:	83 ec 18             	sub    esp,0x18
c0017b7e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b86:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0017b8a:	88 04 24             	mov    BYTE PTR [esp],al
c0017b8d:	a0 ec da 02 c0       	mov    al,ds:0xc002daec
c0017b92:	0f b6 c0             	movzx  eax,al
c0017b95:	85 c0                	test   eax,eax
c0017b97:	74 04                	je     c0017b9d <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0017b99:	b2 00                	mov    dl,0x0
c0017b9b:	eb 02                	jmp    c0017b9f <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0017b9d:	b2 80                	mov    dl,0x80
c0017b9f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0017ba3:	09 d0                	or     eax,edx
c0017ba5:	0f b6 c0             	movzx  eax,al
c0017ba8:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0017baf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017bb3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017bb7:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0017bbc:	ee                   	out    dx,al
c0017bbd:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0017bc1:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0017bc8:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0017bcc:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0017bd0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0017bd5:	ee                   	out    dx,al
c0017bd6:	90                   	nop
c0017bd7:	83 c4 18             	add    esp,0x18
c0017bda:	c3                   	ret    

c0017bdb <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0017bdb:	60                   	pusha  
c0017bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017be0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017be4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017be8:	9c                   	pushf  
c0017be9:	fa                   	cli    
c0017bea:	0f 09                	wbinvd 
c0017bec:	0f 30                	wrmsr  
c0017bee:	9d                   	popf   
c0017bef:	89 c2                	mov    edx,eax
c0017bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf5:	89 10                	mov    DWORD PTR [eax],edx
c0017bf7:	61                   	popa   
c0017bf8:	90                   	nop
c0017bf9:	c3                   	ret    

c0017bfa <AMD_K6_read_msr(unsigned int, REGS*)>:
c0017bfa:	60                   	pusha  
c0017bfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bff:	89 c1                	mov    ecx,eax
c0017c01:	9c                   	pushf  
c0017c02:	fa                   	cli    
c0017c03:	0f 09                	wbinvd 
c0017c05:	31 c0                	xor    eax,eax
c0017c07:	31 d2                	xor    edx,edx
c0017c09:	0f 32                	rdmsr  
c0017c0b:	9d                   	popf   
c0017c0c:	89 c2                	mov    edx,eax
c0017c0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c12:	89 10                	mov    DWORD PTR [eax],edx
c0017c14:	61                   	popa   
c0017c15:	90                   	nop
c0017c16:	c3                   	ret    

c0017c17 <AMD_K6_writeback(int, int, int)>:
c0017c17:	83 ec 20             	sub    esp,0x20
c0017c1a:	a1 34 d1 02 c0       	mov    eax,ds:0xc002d134
c0017c1f:	c1 e8 14             	shr    eax,0x14
c0017c22:	c1 e8 02             	shr    eax,0x2
c0017c25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c29:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0017c2e:	0f 85 9e 00 00 00    	jne    c0017cd2 <AMD_K6_writeback(int, int, int)+0xbb>
c0017c34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c3c:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0017c41:	75 19                	jne    c0017c5c <AMD_K6_writeback(int, int, int)+0x45>
c0017c43:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0017c48:	7f 0a                	jg     c0017c54 <AMD_K6_writeback(int, int, int)+0x3d>
c0017c4a:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0017c52:	eb 08                	jmp    c0017c5c <AMD_K6_writeback(int, int, int)+0x45>
c0017c54:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0017c5c:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0017c61:	7c 6e                	jl     c0017cd1 <AMD_K6_writeback(int, int, int)+0xba>
c0017c63:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0017c68:	7e 09                	jle    c0017c73 <AMD_K6_writeback(int, int, int)+0x5c>
c0017c6a:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0017c6f:	74 36                	je     c0017ca7 <AMD_K6_writeback(int, int, int)+0x90>
c0017c71:	eb 5e                	jmp    c0017cd1 <AMD_K6_writeback(int, int, int)+0xba>
c0017c73:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c77:	50                   	push   eax
c0017c78:	68 82 00 00 c0       	push   0xc0000082
c0017c7d:	e8 78 ff ff ff       	call   c0017bfa <AMD_K6_read_msr(unsigned int, REGS*)>
c0017c82:	83 c4 08             	add    esp,0x8
c0017c85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c89:	01 c0                	add    eax,eax
c0017c8b:	83 e0 7f             	and    eax,0x7f
c0017c8e:	89 c2                	mov    edx,eax
c0017c90:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c94:	50                   	push   eax
c0017c95:	6a 00                	push   0x0
c0017c97:	52                   	push   edx
c0017c98:	68 82 00 00 c0       	push   0xc0000082
c0017c9d:	e8 39 ff ff ff       	call   c0017bdb <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017ca2:	83 c4 10             	add    esp,0x10
c0017ca5:	eb 2b                	jmp    c0017cd2 <AMD_K6_writeback(int, int, int)+0xbb>
c0017ca7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017cab:	50                   	push   eax
c0017cac:	68 82 00 00 c0       	push   0xc0000082
c0017cb1:	e8 44 ff ff ff       	call   c0017bfa <AMD_K6_read_msr(unsigned int, REGS*)>
c0017cb6:	83 c4 08             	add    esp,0x8
c0017cb9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017cbd:	50                   	push   eax
c0017cbe:	6a 00                	push   0x0
c0017cc0:	6a 00                	push   0x0
c0017cc2:	68 82 00 00 c0       	push   0xc0000082
c0017cc7:	e8 0f ff ff ff       	call   c0017bdb <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017ccc:	83 c4 10             	add    esp,0x10
c0017ccf:	eb 01                	jmp    c0017cd2 <AMD_K6_writeback(int, int, int)+0xbb>
c0017cd1:	90                   	nop
c0017cd2:	90                   	nop
c0017cd3:	83 c4 20             	add    esp,0x20
c0017cd6:	c3                   	ret    

c0017cd7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017cd7:	56                   	push   esi
c0017cd8:	53                   	push   ebx
c0017cd9:	a1 e0 5d 02 c0       	mov    eax,ds:0xc0025de0
c0017cde:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017ce2:	75 32                	jne    c0017d16 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017ce4:	8b 15 e0 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dae0
c0017cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cee:	89 10                	mov    DWORD PTR [eax],edx
c0017cf0:	8b 15 dc da 02 c0    	mov    edx,DWORD PTR ds:0xc002dadc
c0017cf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cfa:	89 10                	mov    DWORD PTR [eax],edx
c0017cfc:	8b 15 d8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dad8
c0017d02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d06:	89 10                	mov    DWORD PTR [eax],edx
c0017d08:	8b 15 d4 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dad4
c0017d0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d12:	89 10                	mov    DWORD PTR [eax],edx
c0017d14:	eb 5c                	jmp    c0017d72 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0017d16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d1a:	ba 00 00 00 00       	mov    edx,0x0
c0017d1f:	89 d1                	mov    ecx,edx
c0017d21:	0f a2                	cpuid  
c0017d23:	89 c6                	mov    esi,eax
c0017d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d29:	89 30                	mov    DWORD PTR [eax],esi
c0017d2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d2f:	89 18                	mov    DWORD PTR [eax],ebx
c0017d31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d35:	89 08                	mov    DWORD PTR [eax],ecx
c0017d37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d3b:	89 10                	mov    DWORD PTR [eax],edx
c0017d3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d41:	a3 e0 5d 02 c0       	mov    ds:0xc0025de0,eax
c0017d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d4c:	a3 e0 da 02 c0       	mov    ds:0xc002dae0,eax
c0017d51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d55:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d57:	a3 dc da 02 c0       	mov    ds:0xc002dadc,eax
c0017d5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d60:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d62:	a3 d8 da 02 c0       	mov    ds:0xc002dad8,eax
c0017d67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d6d:	a3 d4 da 02 c0       	mov    ds:0xc002dad4,eax
c0017d72:	5b                   	pop    ebx
c0017d73:	5e                   	pop    esi
c0017d74:	c3                   	ret    

c0017d75 <cpuidCheckEDX(unsigned int)>:
c0017d75:	83 ec 10             	sub    esp,0x10
c0017d78:	89 e0                	mov    eax,esp
c0017d7a:	50                   	push   eax
c0017d7b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017d7f:	50                   	push   eax
c0017d80:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017d84:	50                   	push   eax
c0017d85:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017d89:	50                   	push   eax
c0017d8a:	6a 01                	push   0x1
c0017d8c:	e8 46 ff ff ff       	call   c0017cd7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017d91:	83 c4 14             	add    esp,0x14
c0017d94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017d97:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017d9b:	0f 95 c0             	setne  al
c0017d9e:	83 c4 10             	add    esp,0x10
c0017da1:	c3                   	ret    

c0017da2 <cpuidCheckECX(unsigned int)>:
c0017da2:	83 ec 10             	sub    esp,0x10
c0017da5:	89 e0                	mov    eax,esp
c0017da7:	50                   	push   eax
c0017da8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017dac:	50                   	push   eax
c0017dad:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017db1:	50                   	push   eax
c0017db2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017db6:	50                   	push   eax
c0017db7:	6a 01                	push   0x1
c0017db9:	e8 19 ff ff ff       	call   c0017cd7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017dbe:	83 c4 14             	add    esp,0x14
c0017dc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017dc5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017dc9:	0f 95 c0             	setne  al
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	c3                   	ret    

c0017dd0 <cpuidCheckExtendedEBX(unsigned int)>:
c0017dd0:	83 ec 10             	sub    esp,0x10
c0017dd3:	89 e0                	mov    eax,esp
c0017dd5:	50                   	push   eax
c0017dd6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017dda:	50                   	push   eax
c0017ddb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017ddf:	50                   	push   eax
c0017de0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017de4:	50                   	push   eax
c0017de5:	6a 07                	push   0x7
c0017de7:	e8 eb fe ff ff       	call   c0017cd7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017dec:	83 c4 14             	add    esp,0x14
c0017def:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017df3:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017df7:	0f 95 c0             	setne  al
c0017dfa:	83 c4 10             	add    esp,0x10
c0017dfd:	c3                   	ret    

c0017dfe <cpuidCheckExtendedECX(unsigned int)>:
c0017dfe:	83 ec 10             	sub    esp,0x10
c0017e01:	89 e0                	mov    eax,esp
c0017e03:	50                   	push   eax
c0017e04:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e08:	50                   	push   eax
c0017e09:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017e0d:	50                   	push   eax
c0017e0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017e12:	50                   	push   eax
c0017e13:	6a 07                	push   0x7
c0017e15:	e8 bd fe ff ff       	call   c0017cd7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017e1a:	83 c4 14             	add    esp,0x14
c0017e1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e21:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017e25:	0f 95 c0             	setne  al
c0017e28:	83 c4 10             	add    esp,0x10
c0017e2b:	c3                   	ret    

c0017e2c <HalDetectFeatures()>:
c0017e2c:	57                   	push   edi
c0017e2d:	56                   	push   esi
c0017e2e:	53                   	push   ebx
c0017e2f:	81 ec 90 00 00 00    	sub    esp,0x90
c0017e35:	83 ec 04             	sub    esp,0x4
c0017e38:	6a 08                	push   0x8
c0017e3a:	6a 00                	push   0x0
c0017e3c:	68 0c db 02 c0       	push   0xc002db0c
c0017e41:	e8 aa 86 fe ff       	call   c00004f0 <memset>
c0017e46:	83 c4 10             	add    esp,0x10
c0017e49:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017e4e:	83 c8 04             	or     eax,0x4
c0017e51:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017e56:	e8 9e 83 fe ff       	call   c00001f9 <detectCPUID>
c0017e5b:	85 c0                	test   eax,eax
c0017e5d:	0f 95 c0             	setne  al
c0017e60:	83 e0 01             	and    eax,0x1
c0017e63:	83 e0 01             	and    eax,0x1
c0017e66:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017e69:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017e6e:	83 e0 fd             	and    eax,0xfffffffd
c0017e71:	88 c2                	mov    dl,al
c0017e73:	88 c8                	mov    al,cl
c0017e75:	09 d0                	or     eax,edx
c0017e77:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017e7c:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017e81:	83 e0 02             	and    eax,0x2
c0017e84:	0f b6 c0             	movzx  eax,al
c0017e87:	85 c0                	test   eax,eax
c0017e89:	0f 84 7f 02 00 00    	je     c001810e <HalDetectFeatures()+0x2e2>
c0017e8f:	83 ec 0c             	sub    esp,0xc
c0017e92:	6a 20                	push   0x20
c0017e94:	e8 dc fe ff ff       	call   c0017d75 <cpuidCheckEDX(unsigned int)>
c0017e99:	83 c4 10             	add    esp,0x10
c0017e9c:	83 e0 01             	and    eax,0x1
c0017e9f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017ea6:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017eab:	83 e0 f7             	and    eax,0xfffffff7
c0017eae:	88 c2                	mov    dl,al
c0017eb0:	88 c8                	mov    al,cl
c0017eb2:	09 d0                	or     eax,edx
c0017eb4:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017eb9:	83 ec 0c             	sub    esp,0xc
c0017ebc:	68 00 00 00 04       	push   0x4000000
c0017ec1:	e8 af fe ff ff       	call   c0017d75 <cpuidCheckEDX(unsigned int)>
c0017ec6:	83 c4 10             	add    esp,0x10
c0017ec9:	89 c1                	mov    ecx,eax
c0017ecb:	83 e1 01             	and    ecx,0x1
c0017ece:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0017ed3:	83 e0 fe             	and    eax,0xfffffffe
c0017ed6:	88 c2                	mov    dl,al
c0017ed8:	88 c8                	mov    al,cl
c0017eda:	09 d0                	or     eax,edx
c0017edc:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c0017ee1:	83 ec 0c             	sub    esp,0xc
c0017ee4:	68 80 00 00 00       	push   0x80
c0017ee9:	e8 87 fe ff ff       	call   c0017d75 <cpuidCheckEDX(unsigned int)>
c0017eee:	83 c4 10             	add    esp,0x10
c0017ef1:	89 c1                	mov    ecx,eax
c0017ef3:	c1 e1 07             	shl    ecx,0x7
c0017ef6:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0017efb:	83 e0 7f             	and    eax,0x7f
c0017efe:	88 c2                	mov    dl,al
c0017f00:	88 c8                	mov    al,cl
c0017f02:	09 d0                	or     eax,edx
c0017f04:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c0017f09:	83 ec 0c             	sub    esp,0xc
c0017f0c:	68 00 00 80 00       	push   0x800000
c0017f11:	e8 5f fe ff ff       	call   c0017d75 <cpuidCheckEDX(unsigned int)>
c0017f16:	83 c4 10             	add    esp,0x10
c0017f19:	83 e0 01             	and    eax,0x1
c0017f1c:	89 c1                	mov    ecx,eax
c0017f1e:	c1 e1 05             	shl    ecx,0x5
c0017f21:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017f26:	83 e0 df             	and    eax,0xffffffdf
c0017f29:	88 c2                	mov    dl,al
c0017f2b:	88 c8                	mov    al,cl
c0017f2d:	09 d0                	or     eax,edx
c0017f2f:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017f34:	a1 24 d1 02 c0       	mov    eax,ds:0xc002d124
c0017f39:	83 e0 01             	and    eax,0x1
c0017f3c:	75 0c                	jne    c0017f4a <HalDetectFeatures()+0x11e>
c0017f3e:	a1 24 d1 02 c0       	mov    eax,ds:0xc002d124
c0017f43:	25 00 04 00 00       	and    eax,0x400
c0017f48:	74 0f                	je     c0017f59 <HalDetectFeatures()+0x12d>
c0017f4a:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017f4f:	83 e0 fe             	and    eax,0xfffffffe
c0017f52:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017f57:	eb 28                	jmp    c0017f81 <HalDetectFeatures()+0x155>
c0017f59:	83 ec 0c             	sub    esp,0xc
c0017f5c:	68 00 02 00 00       	push   0x200
c0017f61:	e8 0f fe ff ff       	call   c0017d75 <cpuidCheckEDX(unsigned int)>
c0017f66:	83 c4 10             	add    esp,0x10
c0017f69:	89 c1                	mov    ecx,eax
c0017f6b:	83 e1 01             	and    ecx,0x1
c0017f6e:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017f73:	83 e0 fe             	and    eax,0xfffffffe
c0017f76:	88 c2                	mov    dl,al
c0017f78:	88 c8                	mov    al,cl
c0017f7a:	09 d0                	or     eax,edx
c0017f7c:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017f81:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017f86:	83 e0 01             	and    eax,0x1
c0017f89:	0f b6 c0             	movzx  eax,al
c0017f8c:	85 c0                	test   eax,eax
c0017f8e:	74 1c                	je     c0017fac <HalDetectFeatures()+0x180>
c0017f90:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017f95:	83 e0 08             	and    eax,0x8
c0017f98:	0f b6 c0             	movzx  eax,al
c0017f9b:	85 c0                	test   eax,eax
c0017f9d:	75 0d                	jne    c0017fac <HalDetectFeatures()+0x180>
c0017f9f:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017fa4:	83 e0 fe             	and    eax,0xfffffffe
c0017fa7:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017fac:	83 ec 0c             	sub    esp,0xc
c0017faf:	68 a0 44 02 c0       	push   0xc00244a0
c0017fb4:	e8 ab ef fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017fb9:	83 c4 10             	add    esp,0x10
c0017fbc:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0017fc1:	83 e0 fe             	and    eax,0xfffffffe
c0017fc4:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0017fc9:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0017fd1:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0017fd9:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0017fe1:	85 c0                	test   eax,eax
c0017fe3:	0f 84 ab 00 00 00    	je     c0018094 <HalDetectFeatures()+0x268>
c0017fe9:	83 ec 0c             	sub    esp,0xc
c0017fec:	6a 01                	push   0x1
c0017fee:	e8 af fd ff ff       	call   c0017da2 <cpuidCheckECX(unsigned int)>
c0017ff3:	83 c4 10             	add    esp,0x10
c0017ff6:	83 e0 01             	and    eax,0x1
c0017ff9:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017ffc:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0018001:	83 e0 fd             	and    eax,0xfffffffd
c0018004:	88 c2                	mov    dl,al
c0018006:	88 c8                	mov    al,cl
c0018008:	09 d0                	or     eax,edx
c001800a:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c001800f:	83 ec 0c             	sub    esp,0xc
c0018012:	68 00 02 00 00       	push   0x200
c0018017:	e8 86 fd ff ff       	call   c0017da2 <cpuidCheckECX(unsigned int)>
c001801c:	83 c4 10             	add    esp,0x10
c001801f:	83 e0 01             	and    eax,0x1
c0018022:	89 c1                	mov    ecx,eax
c0018024:	c1 e1 04             	shl    ecx,0x4
c0018027:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c001802c:	83 e0 ef             	and    eax,0xffffffef
c001802f:	88 c2                	mov    dl,al
c0018031:	88 c8                	mov    al,cl
c0018033:	09 d0                	or     eax,edx
c0018035:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c001803a:	83 ec 0c             	sub    esp,0xc
c001803d:	68 00 00 08 00       	push   0x80000
c0018042:	e8 5b fd ff ff       	call   c0017da2 <cpuidCheckECX(unsigned int)>
c0018047:	83 c4 10             	add    esp,0x10
c001804a:	83 e0 01             	and    eax,0x1
c001804d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018054:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0018059:	83 e0 fb             	and    eax,0xfffffffb
c001805c:	88 c2                	mov    dl,al
c001805e:	88 c8                	mov    al,cl
c0018060:	09 d0                	or     eax,edx
c0018062:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c0018067:	83 ec 0c             	sub    esp,0xc
c001806a:	68 00 00 10 00       	push   0x100000
c001806f:	e8 2e fd ff ff       	call   c0017da2 <cpuidCheckECX(unsigned int)>
c0018074:	83 c4 10             	add    esp,0x10
c0018077:	83 e0 01             	and    eax,0x1
c001807a:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018081:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0018086:	83 e0 f7             	and    eax,0xfffffff7
c0018089:	88 c2                	mov    dl,al
c001808b:	88 c8                	mov    al,cl
c001808d:	09 d0                	or     eax,edx
c001808f:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c0018094:	83 ec 0c             	sub    esp,0xc
c0018097:	8d 44 24 24          	lea    eax,[esp+0x24]
c001809b:	50                   	push   eax
c001809c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00180a0:	50                   	push   eax
c00180a1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00180a5:	50                   	push   eax
c00180a6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00180aa:	50                   	push   eax
c00180ab:	68 00 00 00 80       	push   0x80000000
c00180b0:	e8 22 fc ff ff       	call   c0017cd7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180b5:	83 c4 20             	add    esp,0x20
c00180b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180bc:	3d 00 00 00 80       	cmp    eax,0x80000000
c00180c1:	76 4b                	jbe    c001810e <HalDetectFeatures()+0x2e2>
c00180c3:	83 ec 0c             	sub    esp,0xc
c00180c6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00180ca:	50                   	push   eax
c00180cb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00180cf:	50                   	push   eax
c00180d0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00180d4:	50                   	push   eax
c00180d5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00180d9:	50                   	push   eax
c00180da:	68 01 00 00 80       	push   0x80000001
c00180df:	e8 f3 fb ff ff       	call   c0017cd7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180e4:	83 c4 20             	add    esp,0x20
c00180e7:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c00180ec:	83 e0 bf             	and    eax,0xffffffbf
c00180ef:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c00180f4:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c00180f9:	83 e0 fd             	and    eax,0xfffffffd
c00180fc:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c0018101:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0018106:	83 e0 fe             	and    eax,0xfffffffe
c0018109:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c001810e:	a1 24 d1 02 c0       	mov    eax,ds:0xc002d124
c0018113:	25 00 04 00 00       	and    eax,0x400
c0018118:	74 0d                	je     c0018127 <HalDetectFeatures()+0x2fb>
c001811a:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c001811f:	83 e0 fb             	and    eax,0xfffffffb
c0018122:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0018127:	c6 05 08 db 02 c0 01 	mov    BYTE PTR ds:0xc002db08,0x1
c001812e:	83 ec 04             	sub    esp,0x4
c0018131:	6a 0d                	push   0xd
c0018133:	6a 00                	push   0x0
c0018135:	68 f0 da 02 c0       	push   0xc002daf0
c001813a:	e8 b1 83 fe ff       	call   c00004f0 <memset>
c001813f:	83 c4 10             	add    esp,0x10
c0018142:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018147:	83 e0 02             	and    eax,0x2
c001814a:	0f b6 c0             	movzx  eax,al
c001814d:	85 c0                	test   eax,eax
c001814f:	0f 84 16 08 00 00    	je     c001896b <HalDetectFeatures()+0xb3f>
c0018155:	83 ec 0c             	sub    esp,0xc
c0018158:	6a 10                	push   0x10
c001815a:	e8 16 fc ff ff       	call   c0017d75 <cpuidCheckEDX(unsigned int)>
c001815f:	83 c4 10             	add    esp,0x10
c0018162:	83 e0 01             	and    eax,0x1
c0018165:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001816c:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0018171:	83 e0 f7             	and    eax,0xfffffff7
c0018174:	88 c2                	mov    dl,al
c0018176:	88 c8                	mov    al,cl
c0018178:	09 d0                	or     eax,edx
c001817a:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c001817f:	83 ec 0c             	sub    esp,0xc
c0018182:	6a 40                	push   0x40
c0018184:	e8 ec fb ff ff       	call   c0017d75 <cpuidCheckEDX(unsigned int)>
c0018189:	83 c4 10             	add    esp,0x10
c001818c:	83 e0 01             	and    eax,0x1
c001818f:	89 c1                	mov    ecx,eax
c0018191:	c1 e1 04             	shl    ecx,0x4
c0018194:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0018199:	83 e0 ef             	and    eax,0xffffffef
c001819c:	88 c2                	mov    dl,al
c001819e:	88 c8                	mov    al,cl
c00181a0:	09 d0                	or     eax,edx
c00181a2:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c00181a7:	83 ec 0c             	sub    esp,0xc
c00181aa:	6a 08                	push   0x8
c00181ac:	e8 c4 fb ff ff       	call   c0017d75 <cpuidCheckEDX(unsigned int)>
c00181b1:	83 c4 10             	add    esp,0x10
c00181b4:	83 e0 01             	and    eax,0x1
c00181b7:	89 c1                	mov    ecx,eax
c00181b9:	c1 e1 05             	shl    ecx,0x5
c00181bc:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c00181c1:	83 e0 df             	and    eax,0xffffffdf
c00181c4:	88 c2                	mov    dl,al
c00181c6:	88 c8                	mov    al,cl
c00181c8:	09 d0                	or     eax,edx
c00181ca:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c00181cf:	83 ec 0c             	sub    esp,0xc
c00181d2:	68 00 20 00 00       	push   0x2000
c00181d7:	e8 99 fb ff ff       	call   c0017d75 <cpuidCheckEDX(unsigned int)>
c00181dc:	83 c4 10             	add    esp,0x10
c00181df:	83 e0 01             	and    eax,0x1
c00181e2:	89 c1                	mov    ecx,eax
c00181e4:	c1 e1 06             	shl    ecx,0x6
c00181e7:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c00181ec:	83 e0 bf             	and    eax,0xffffffbf
c00181ef:	88 c2                	mov    dl,al
c00181f1:	88 c8                	mov    al,cl
c00181f3:	09 d0                	or     eax,edx
c00181f5:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c00181fa:	83 ec 0c             	sub    esp,0xc
c00181fd:	68 00 00 01 00       	push   0x10000
c0018202:	e8 6e fb ff ff       	call   c0017d75 <cpuidCheckEDX(unsigned int)>
c0018207:	83 c4 10             	add    esp,0x10
c001820a:	89 c1                	mov    ecx,eax
c001820c:	c1 e1 07             	shl    ecx,0x7
c001820f:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0018214:	83 e0 7f             	and    eax,0x7f
c0018217:	88 c2                	mov    dl,al
c0018219:	88 c8                	mov    al,cl
c001821b:	09 d0                	or     eax,edx
c001821d:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c0018222:	83 ec 0c             	sub    esp,0xc
c0018225:	6a 01                	push   0x1
c0018227:	e8 49 fb ff ff       	call   c0017d75 <cpuidCheckEDX(unsigned int)>
c001822c:	83 c4 10             	add    esp,0x10
c001822f:	83 e0 01             	and    eax,0x1
c0018232:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018239:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c001823e:	83 e0 f7             	and    eax,0xfffffff7
c0018241:	88 c2                	mov    dl,al
c0018243:	88 c8                	mov    al,cl
c0018245:	09 d0                	or     eax,edx
c0018247:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c001824c:	83 ec 0c             	sub    esp,0xc
c001824f:	68 00 08 00 00       	push   0x800
c0018254:	e8 1c fb ff ff       	call   c0017d75 <cpuidCheckEDX(unsigned int)>
c0018259:	83 c4 10             	add    esp,0x10
c001825c:	89 c1                	mov    ecx,eax
c001825e:	83 e1 01             	and    ecx,0x1
c0018261:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c0018266:	83 e0 fe             	and    eax,0xfffffffe
c0018269:	88 c2                	mov    dl,al
c001826b:	88 c8                	mov    al,cl
c001826d:	09 d0                	or     eax,edx
c001826f:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c0018274:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0018279:	83 e0 40             	and    eax,0x40
c001827c:	0f b6 c0             	movzx  eax,al
c001827f:	85 c0                	test   eax,eax
c0018281:	74 0a                	je     c001828d <HalDetectFeatures()+0x461>
c0018283:	c7 05 e8 da 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002dae8,0x100
c001828d:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c0018292:	83 e0 80             	and    eax,0xffffff80
c0018295:	0f b6 c0             	movzx  eax,al
c0018298:	85 c0                	test   eax,eax
c001829a:	74 0a                	je     c00182a6 <HalDetectFeatures()+0x47a>
c001829c:	c7 05 e4 da 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002dae4,0x80
c00182a6:	83 ec 0c             	sub    esp,0xc
c00182a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00182ad:	50                   	push   eax
c00182ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00182b2:	50                   	push   eax
c00182b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00182b7:	50                   	push   eax
c00182b8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00182bc:	50                   	push   eax
c00182bd:	6a 00                	push   0x0
c00182bf:	e8 13 fa ff ff       	call   c0017cd7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00182c4:	83 c4 20             	add    esp,0x20
c00182c7:	c7 44 24 48 f0 da 02 c0 	mov    DWORD PTR [esp+0x48],0xc002daf0
c00182cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00182d3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00182d7:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c00182df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00182e3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00182e7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00182eb:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00182ef:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00182f3:	89 c6                	mov    esi,eax
c00182f5:	89 d7                	mov    edi,edx
c00182f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00182f9:	89 c8                	mov    eax,ecx
c00182fb:	89 fa                	mov    edx,edi
c00182fd:	89 f3                	mov    ebx,esi
c00182ff:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0018303:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018307:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001830b:	b8 f4 da 02 c0       	mov    eax,0xc002daf4
c0018310:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0018314:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018318:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001831c:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0018324:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0018328:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001832c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0018330:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0018334:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0018338:	89 c6                	mov    esi,eax
c001833a:	89 d7                	mov    edi,edx
c001833c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001833e:	89 c8                	mov    eax,ecx
c0018340:	89 fa                	mov    edx,edi
c0018342:	89 f3                	mov    ebx,esi
c0018344:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0018348:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c001834c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018350:	b8 f8 da 02 c0       	mov    eax,0xc002daf8
c0018355:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c001835c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018360:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0018364:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c001836c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018373:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0018377:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001837b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0018382:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0018386:	89 c6                	mov    esi,eax
c0018388:	89 d7                	mov    edi,edx
c001838a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001838c:	89 c8                	mov    eax,ecx
c001838e:	89 fa                	mov    edx,edi
c0018390:	89 f3                	mov    ebx,esi
c0018392:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0018396:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c001839a:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001839e:	83 ec 08             	sub    esp,0x8
c00183a1:	68 b2 44 02 c0       	push   0xc00244b2
c00183a6:	68 f0 da 02 c0       	push   0xc002daf0
c00183ab:	e8 a0 83 fe ff       	call   c0000750 <strcmp>
c00183b0:	83 c4 10             	add    esp,0x10
c00183b3:	85 c0                	test   eax,eax
c00183b5:	74 19                	je     c00183d0 <HalDetectFeatures()+0x5a4>
c00183b7:	83 ec 08             	sub    esp,0x8
c00183ba:	68 bf 44 02 c0       	push   0xc00244bf
c00183bf:	68 f0 da 02 c0       	push   0xc002daf0
c00183c4:	e8 87 83 fe ff       	call   c0000750 <strcmp>
c00183c9:	83 c4 10             	add    esp,0x10
c00183cc:	85 c0                	test   eax,eax
c00183ce:	75 04                	jne    c00183d4 <HalDetectFeatures()+0x5a8>
c00183d0:	b0 01                	mov    al,0x1
c00183d2:	eb 02                	jmp    c00183d6 <HalDetectFeatures()+0x5aa>
c00183d4:	b0 00                	mov    al,0x0
c00183d6:	0f b6 c0             	movzx  eax,al
c00183d9:	85 c0                	test   eax,eax
c00183db:	74 0f                	je     c00183ec <HalDetectFeatures()+0x5c0>
c00183dd:	c7 05 04 db 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x2
c00183e7:	e9 0d 03 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c00183ec:	83 ec 08             	sub    esp,0x8
c00183ef:	68 cc 44 02 c0       	push   0xc00244cc
c00183f4:	68 f0 da 02 c0       	push   0xc002daf0
c00183f9:	e8 52 83 fe ff       	call   c0000750 <strcmp>
c00183fe:	83 c4 10             	add    esp,0x10
c0018401:	85 c0                	test   eax,eax
c0018403:	74 19                	je     c001841e <HalDetectFeatures()+0x5f2>
c0018405:	83 ec 08             	sub    esp,0x8
c0018408:	68 d9 44 02 c0       	push   0xc00244d9
c001840d:	68 f0 da 02 c0       	push   0xc002daf0
c0018412:	e8 39 83 fe ff       	call   c0000750 <strcmp>
c0018417:	83 c4 10             	add    esp,0x10
c001841a:	85 c0                	test   eax,eax
c001841c:	75 04                	jne    c0018422 <HalDetectFeatures()+0x5f6>
c001841e:	b0 01                	mov    al,0x1
c0018420:	eb 02                	jmp    c0018424 <HalDetectFeatures()+0x5f8>
c0018422:	b0 00                	mov    al,0x0
c0018424:	0f b6 c0             	movzx  eax,al
c0018427:	85 c0                	test   eax,eax
c0018429:	74 0f                	je     c001843a <HalDetectFeatures()+0x60e>
c001842b:	c7 05 04 db 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x4
c0018435:	e9 bf 02 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c001843a:	83 ec 08             	sub    esp,0x8
c001843d:	68 e6 44 02 c0       	push   0xc00244e6
c0018442:	68 f0 da 02 c0       	push   0xc002daf0
c0018447:	e8 04 83 fe ff       	call   c0000750 <strcmp>
c001844c:	83 c4 10             	add    esp,0x10
c001844f:	85 c0                	test   eax,eax
c0018451:	74 19                	je     c001846c <HalDetectFeatures()+0x640>
c0018453:	83 ec 08             	sub    esp,0x8
c0018456:	68 f3 44 02 c0       	push   0xc00244f3
c001845b:	68 f0 da 02 c0       	push   0xc002daf0
c0018460:	e8 eb 82 fe ff       	call   c0000750 <strcmp>
c0018465:	83 c4 10             	add    esp,0x10
c0018468:	85 c0                	test   eax,eax
c001846a:	75 04                	jne    c0018470 <HalDetectFeatures()+0x644>
c001846c:	b0 01                	mov    al,0x1
c001846e:	eb 02                	jmp    c0018472 <HalDetectFeatures()+0x646>
c0018470:	b0 00                	mov    al,0x0
c0018472:	0f b6 c0             	movzx  eax,al
c0018475:	85 c0                	test   eax,eax
c0018477:	74 0f                	je     c0018488 <HalDetectFeatures()+0x65c>
c0018479:	c7 05 04 db 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x5
c0018483:	e9 71 02 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c0018488:	83 ec 08             	sub    esp,0x8
c001848b:	68 00 45 02 c0       	push   0xc0024500
c0018490:	68 f0 da 02 c0       	push   0xc002daf0
c0018495:	e8 b6 82 fe ff       	call   c0000750 <strcmp>
c001849a:	83 c4 10             	add    esp,0x10
c001849d:	85 c0                	test   eax,eax
c001849f:	0f 94 c0             	sete   al
c00184a2:	0f b6 c0             	movzx  eax,al
c00184a5:	85 c0                	test   eax,eax
c00184a7:	74 0f                	je     c00184b8 <HalDetectFeatures()+0x68c>
c00184a9:	c7 05 04 db 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x1
c00184b3:	e9 41 02 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c00184b8:	83 ec 08             	sub    esp,0x8
c00184bb:	68 0d 45 02 c0       	push   0xc002450d
c00184c0:	68 f0 da 02 c0       	push   0xc002daf0
c00184c5:	e8 86 82 fe ff       	call   c0000750 <strcmp>
c00184ca:	83 c4 10             	add    esp,0x10
c00184cd:	85 c0                	test   eax,eax
c00184cf:	0f 94 c0             	sete   al
c00184d2:	0f b6 c0             	movzx  eax,al
c00184d5:	85 c0                	test   eax,eax
c00184d7:	74 0f                	je     c00184e8 <HalDetectFeatures()+0x6bc>
c00184d9:	c7 05 04 db 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x3
c00184e3:	e9 11 02 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c00184e8:	83 ec 08             	sub    esp,0x8
c00184eb:	68 cc 44 02 c0       	push   0xc00244cc
c00184f0:	68 f0 da 02 c0       	push   0xc002daf0
c00184f5:	e8 56 82 fe ff       	call   c0000750 <strcmp>
c00184fa:	83 c4 10             	add    esp,0x10
c00184fd:	85 c0                	test   eax,eax
c00184ff:	0f 94 c0             	sete   al
c0018502:	0f b6 c0             	movzx  eax,al
c0018505:	85 c0                	test   eax,eax
c0018507:	74 0f                	je     c0018518 <HalDetectFeatures()+0x6ec>
c0018509:	c7 05 04 db 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x6
c0018513:	e9 e1 01 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c0018518:	83 ec 08             	sub    esp,0x8
c001851b:	68 1a 45 02 c0       	push   0xc002451a
c0018520:	68 f0 da 02 c0       	push   0xc002daf0
c0018525:	e8 26 82 fe ff       	call   c0000750 <strcmp>
c001852a:	83 c4 10             	add    esp,0x10
c001852d:	85 c0                	test   eax,eax
c001852f:	0f 94 c0             	sete   al
c0018532:	0f b6 c0             	movzx  eax,al
c0018535:	85 c0                	test   eax,eax
c0018537:	74 0f                	je     c0018548 <HalDetectFeatures()+0x71c>
c0018539:	c7 05 04 db 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x7
c0018543:	e9 b1 01 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c0018548:	83 ec 08             	sub    esp,0x8
c001854b:	68 27 45 02 c0       	push   0xc0024527
c0018550:	68 f0 da 02 c0       	push   0xc002daf0
c0018555:	e8 f6 81 fe ff       	call   c0000750 <strcmp>
c001855a:	83 c4 10             	add    esp,0x10
c001855d:	85 c0                	test   eax,eax
c001855f:	0f 94 c0             	sete   al
c0018562:	0f b6 c0             	movzx  eax,al
c0018565:	85 c0                	test   eax,eax
c0018567:	74 0f                	je     c0018578 <HalDetectFeatures()+0x74c>
c0018569:	c7 05 04 db 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x8
c0018573:	e9 81 01 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c0018578:	83 ec 08             	sub    esp,0x8
c001857b:	68 34 45 02 c0       	push   0xc0024534
c0018580:	68 f0 da 02 c0       	push   0xc002daf0
c0018585:	e8 c6 81 fe ff       	call   c0000750 <strcmp>
c001858a:	83 c4 10             	add    esp,0x10
c001858d:	85 c0                	test   eax,eax
c001858f:	0f 94 c0             	sete   al
c0018592:	0f b6 c0             	movzx  eax,al
c0018595:	85 c0                	test   eax,eax
c0018597:	74 0f                	je     c00185a8 <HalDetectFeatures()+0x77c>
c0018599:	c7 05 04 db 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x9
c00185a3:	e9 51 01 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c00185a8:	83 ec 08             	sub    esp,0x8
c00185ab:	68 41 45 02 c0       	push   0xc0024541
c00185b0:	68 f0 da 02 c0       	push   0xc002daf0
c00185b5:	e8 96 81 fe ff       	call   c0000750 <strcmp>
c00185ba:	83 c4 10             	add    esp,0x10
c00185bd:	85 c0                	test   eax,eax
c00185bf:	0f 94 c0             	sete   al
c00185c2:	0f b6 c0             	movzx  eax,al
c00185c5:	85 c0                	test   eax,eax
c00185c7:	74 0f                	je     c00185d8 <HalDetectFeatures()+0x7ac>
c00185c9:	c7 05 04 db 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xa
c00185d3:	e9 21 01 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c00185d8:	83 ec 08             	sub    esp,0x8
c00185db:	68 4e 45 02 c0       	push   0xc002454e
c00185e0:	68 f0 da 02 c0       	push   0xc002daf0
c00185e5:	e8 66 81 fe ff       	call   c0000750 <strcmp>
c00185ea:	83 c4 10             	add    esp,0x10
c00185ed:	85 c0                	test   eax,eax
c00185ef:	0f 94 c0             	sete   al
c00185f2:	0f b6 c0             	movzx  eax,al
c00185f5:	85 c0                	test   eax,eax
c00185f7:	74 0f                	je     c0018608 <HalDetectFeatures()+0x7dc>
c00185f9:	c7 05 04 db 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xb
c0018603:	e9 f1 00 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c0018608:	83 ec 08             	sub    esp,0x8
c001860b:	68 5b 45 02 c0       	push   0xc002455b
c0018610:	68 f0 da 02 c0       	push   0xc002daf0
c0018615:	e8 36 81 fe ff       	call   c0000750 <strcmp>
c001861a:	83 c4 10             	add    esp,0x10
c001861d:	85 c0                	test   eax,eax
c001861f:	0f 94 c0             	sete   al
c0018622:	0f b6 c0             	movzx  eax,al
c0018625:	85 c0                	test   eax,eax
c0018627:	74 0f                	je     c0018638 <HalDetectFeatures()+0x80c>
c0018629:	c7 05 04 db 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xc
c0018633:	e9 c1 00 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c0018638:	83 ec 08             	sub    esp,0x8
c001863b:	68 68 45 02 c0       	push   0xc0024568
c0018640:	68 f0 da 02 c0       	push   0xc002daf0
c0018645:	e8 06 81 fe ff       	call   c0000750 <strcmp>
c001864a:	83 c4 10             	add    esp,0x10
c001864d:	85 c0                	test   eax,eax
c001864f:	0f 94 c0             	sete   al
c0018652:	0f b6 c0             	movzx  eax,al
c0018655:	85 c0                	test   eax,eax
c0018657:	74 0f                	je     c0018668 <HalDetectFeatures()+0x83c>
c0018659:	c7 05 04 db 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xd
c0018663:	e9 91 00 00 00       	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c0018668:	83 ec 08             	sub    esp,0x8
c001866b:	68 75 45 02 c0       	push   0xc0024575
c0018670:	68 f0 da 02 c0       	push   0xc002daf0
c0018675:	e8 d6 80 fe ff       	call   c0000750 <strcmp>
c001867a:	83 c4 10             	add    esp,0x10
c001867d:	85 c0                	test   eax,eax
c001867f:	0f 94 c0             	sete   al
c0018682:	0f b6 c0             	movzx  eax,al
c0018685:	85 c0                	test   eax,eax
c0018687:	74 0c                	je     c0018695 <HalDetectFeatures()+0x869>
c0018689:	c7 05 04 db 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xd
c0018693:	eb 64                	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c0018695:	83 ec 08             	sub    esp,0x8
c0018698:	68 82 45 02 c0       	push   0xc0024582
c001869d:	68 f0 da 02 c0       	push   0xc002daf0
c00186a2:	e8 a9 80 fe ff       	call   c0000750 <strcmp>
c00186a7:	83 c4 10             	add    esp,0x10
c00186aa:	85 c0                	test   eax,eax
c00186ac:	0f 94 c0             	sete   al
c00186af:	0f b6 c0             	movzx  eax,al
c00186b2:	85 c0                	test   eax,eax
c00186b4:	74 0c                	je     c00186c2 <HalDetectFeatures()+0x896>
c00186b6:	c7 05 04 db 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xd
c00186c0:	eb 37                	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c00186c2:	83 ec 08             	sub    esp,0x8
c00186c5:	68 8f 45 02 c0       	push   0xc002458f
c00186ca:	68 f0 da 02 c0       	push   0xc002daf0
c00186cf:	e8 7c 80 fe ff       	call   c0000750 <strcmp>
c00186d4:	83 c4 10             	add    esp,0x10
c00186d7:	85 c0                	test   eax,eax
c00186d9:	0f 94 c0             	sete   al
c00186dc:	0f b6 c0             	movzx  eax,al
c00186df:	85 c0                	test   eax,eax
c00186e1:	74 0c                	je     c00186ef <HalDetectFeatures()+0x8c3>
c00186e3:	c7 05 04 db 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002db04,0xd
c00186ed:	eb 0a                	jmp    c00186f9 <HalDetectFeatures()+0x8cd>
c00186ef:	c7 05 04 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x0
c00186f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186fd:	83 f8 06             	cmp    eax,0x6
c0018700:	0f 86 cc 00 00 00    	jbe    c00187d2 <HalDetectFeatures()+0x9a6>
c0018706:	83 ec 0c             	sub    esp,0xc
c0018709:	68 80 00 00 00       	push   0x80
c001870e:	e8 bd f6 ff ff       	call   c0017dd0 <cpuidCheckExtendedEBX(unsigned int)>
c0018713:	83 c4 10             	add    esp,0x10
c0018716:	89 c1                	mov    ecx,eax
c0018718:	83 e1 01             	and    ecx,0x1
c001871b:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c0018720:	83 e0 fe             	and    eax,0xfffffffe
c0018723:	88 c2                	mov    dl,al
c0018725:	88 c8                	mov    al,cl
c0018727:	09 d0                	or     eax,edx
c0018729:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c001872e:	83 ec 0c             	sub    esp,0xc
c0018731:	68 00 00 10 00       	push   0x100000
c0018736:	e8 95 f6 ff ff       	call   c0017dd0 <cpuidCheckExtendedEBX(unsigned int)>
c001873b:	83 c4 10             	add    esp,0x10
c001873e:	83 e0 01             	and    eax,0x1
c0018741:	89 c1                	mov    ecx,eax
c0018743:	c1 e1 06             	shl    ecx,0x6
c0018746:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c001874b:	83 e0 bf             	and    eax,0xffffffbf
c001874e:	88 c2                	mov    dl,al
c0018750:	88 c8                	mov    al,cl
c0018752:	09 d0                	or     eax,edx
c0018754:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c0018759:	83 ec 0c             	sub    esp,0xc
c001875c:	68 00 00 04 00       	push   0x40000
c0018761:	e8 6a f6 ff ff       	call   c0017dd0 <cpuidCheckExtendedEBX(unsigned int)>
c0018766:	83 c4 10             	add    esp,0x10
c0018769:	83 e0 01             	and    eax,0x1
c001876c:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001876f:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c0018774:	83 e0 fd             	and    eax,0xfffffffd
c0018777:	88 c2                	mov    dl,al
c0018779:	88 c8                	mov    al,cl
c001877b:	09 d0                	or     eax,edx
c001877d:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c0018782:	83 ec 0c             	sub    esp,0xc
c0018785:	6a 04                	push   0x4
c0018787:	e8 72 f6 ff ff       	call   c0017dfe <cpuidCheckExtendedECX(unsigned int)>
c001878c:	83 c4 10             	add    esp,0x10
c001878f:	83 e0 01             	and    eax,0x1
c0018792:	89 c1                	mov    ecx,eax
c0018794:	c1 e1 05             	shl    ecx,0x5
c0018797:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c001879c:	83 e0 df             	and    eax,0xffffffdf
c001879f:	88 c2                	mov    dl,al
c00187a1:	88 c8                	mov    al,cl
c00187a3:	09 d0                	or     eax,edx
c00187a5:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00187aa:	83 ec 0c             	sub    esp,0xc
c00187ad:	6a 20                	push   0x20
c00187af:	e8 4a f6 ff ff       	call   c0017dfe <cpuidCheckExtendedECX(unsigned int)>
c00187b4:	83 c4 10             	add    esp,0x10
c00187b7:	83 e0 01             	and    eax,0x1
c00187ba:	89 c1                	mov    ecx,eax
c00187bc:	c1 e1 04             	shl    ecx,0x4
c00187bf:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c00187c4:	83 e0 ef             	and    eax,0xffffffef
c00187c7:	88 c2                	mov    dl,al
c00187c9:	88 c8                	mov    al,cl
c00187cb:	09 d0                	or     eax,edx
c00187cd:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c00187d2:	83 ec 0c             	sub    esp,0xc
c00187d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00187d9:	50                   	push   eax
c00187da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00187de:	50                   	push   eax
c00187df:	8d 44 24 24          	lea    eax,[esp+0x24]
c00187e3:	50                   	push   eax
c00187e4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00187e8:	50                   	push   eax
c00187e9:	6a 01                	push   0x1
c00187eb:	e8 e7 f4 ff ff       	call   c0017cd7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187f0:	83 c4 20             	add    esp,0x20
c00187f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187f7:	83 e0 0f             	and    eax,0xf
c00187fa:	a2 00 db 02 c0       	mov    ds:0xc002db00,al
c00187ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018803:	c1 e8 04             	shr    eax,0x4
c0018806:	83 e0 0f             	and    eax,0xf
c0018809:	a2 fe da 02 c0       	mov    ds:0xc002dafe,al
c001880e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018812:	c1 e8 08             	shr    eax,0x8
c0018815:	83 e0 0f             	and    eax,0xf
c0018818:	a2 fd da 02 c0       	mov    ds:0xc002dafd,al
c001881d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018821:	c1 e8 0c             	shr    eax,0xc
c0018824:	83 e0 03             	and    eax,0x3
c0018827:	a2 ff da 02 c0       	mov    ds:0xc002daff,al
c001882c:	a0 fd da 02 c0       	mov    al,ds:0xc002dafd
c0018831:	0f b6 c0             	movzx  eax,al
c0018834:	83 f8 06             	cmp    eax,0x6
c0018837:	74 0d                	je     c0018846 <HalDetectFeatures()+0xa1a>
c0018839:	a0 fd da 02 c0       	mov    al,ds:0xc002dafd
c001883e:	0f b6 c0             	movzx  eax,al
c0018841:	83 f8 0f             	cmp    eax,0xf
c0018844:	75 18                	jne    c001885e <HalDetectFeatures()+0xa32>
c0018846:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001884a:	c1 e8 10             	shr    eax,0x10
c001884d:	c1 e0 04             	shl    eax,0x4
c0018850:	88 c2                	mov    dl,al
c0018852:	a0 fe da 02 c0       	mov    al,ds:0xc002dafe
c0018857:	09 d0                	or     eax,edx
c0018859:	a2 fe da 02 c0       	mov    ds:0xc002dafe,al
c001885e:	a0 fd da 02 c0       	mov    al,ds:0xc002dafd
c0018863:	0f b6 c0             	movzx  eax,al
c0018866:	83 f8 0f             	cmp    eax,0xf
c0018869:	75 15                	jne    c0018880 <HalDetectFeatures()+0xa54>
c001886b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001886f:	c1 e8 14             	shr    eax,0x14
c0018872:	88 c2                	mov    dl,al
c0018874:	a0 fd da 02 c0       	mov    al,ds:0xc002dafd
c0018879:	01 d0                	add    eax,edx
c001887b:	a2 fd da 02 c0       	mov    ds:0xc002dafd,al
c0018880:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0018888:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0018890:	85 c0                	test   eax,eax
c0018892:	74 2d                	je     c00188c1 <HalDetectFeatures()+0xa95>
c0018894:	83 ec 0c             	sub    esp,0xc
c0018897:	68 00 00 00 40       	push   0x40000000
c001889c:	e8 01 f5 ff ff       	call   c0017da2 <cpuidCheckECX(unsigned int)>
c00188a1:	83 c4 10             	add    esp,0x10
c00188a4:	83 e0 01             	and    eax,0x1
c00188a7:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00188ae:	a0 0e db 02 c0       	mov    al,ds:0xc002db0e
c00188b3:	83 e0 fb             	and    eax,0xfffffffb
c00188b6:	88 c2                	mov    dl,al
c00188b8:	88 c8                	mov    al,cl
c00188ba:	09 d0                	or     eax,edx
c00188bc:	a2 0e db 02 c0       	mov    ds:0xc002db0e,al
c00188c1:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c00188c6:	83 c8 04             	or     eax,0x4
c00188c9:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00188ce:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c00188d3:	83 c8 08             	or     eax,0x8
c00188d6:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00188db:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c00188e0:	83 c8 10             	or     eax,0x10
c00188e3:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00188e8:	83 ec 0c             	sub    esp,0xc
c00188eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00188ef:	50                   	push   eax
c00188f0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00188f4:	50                   	push   eax
c00188f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00188f9:	50                   	push   eax
c00188fa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00188fe:	50                   	push   eax
c00188ff:	68 00 00 00 80       	push   0x80000000
c0018904:	e8 ce f3 ff ff       	call   c0017cd7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018909:	83 c4 20             	add    esp,0x20
c001890c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018910:	3d 00 00 00 80       	cmp    eax,0x80000000
c0018915:	0f 86 96 01 00 00    	jbe    c0018ab1 <HalDetectFeatures()+0xc85>
c001891b:	83 ec 0c             	sub    esp,0xc
c001891e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018922:	50                   	push   eax
c0018923:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018927:	50                   	push   eax
c0018928:	8d 44 24 24          	lea    eax,[esp+0x24]
c001892c:	50                   	push   eax
c001892d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018931:	50                   	push   eax
c0018932:	68 01 00 00 80       	push   0x80000001
c0018937:	e8 9b f3 ff ff       	call   c0017cd7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001893c:	83 c4 20             	add    esp,0x20
c001893f:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c0018944:	83 e0 7f             	and    eax,0x7f
c0018947:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c001894c:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c0018951:	83 e0 fb             	and    eax,0xfffffffb
c0018954:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c0018959:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c001895e:	83 e0 fd             	and    eax,0xfffffffd
c0018961:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c0018966:	e9 46 01 00 00       	jmp    c0018ab1 <HalDetectFeatures()+0xc85>
c001896b:	83 ec 08             	sub    esp,0x8
c001896e:	68 00 45 02 c0       	push   0xc0024500
c0018973:	68 f0 da 02 c0       	push   0xc002daf0
c0018978:	e8 c3 7c fe ff       	call   c0000640 <strcpy>
c001897d:	83 c4 10             	add    esp,0x10
c0018980:	c7 05 04 db 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002db04,0x1
c001898a:	e8 34 78 fe ff       	call   c00001c3 <is486>
c001898f:	85 c0                	test   eax,eax
c0018991:	0f 95 c0             	setne  al
c0018994:	0f b6 c0             	movzx  eax,al
c0018997:	85 c0                	test   eax,eax
c0018999:	0f 84 8d 00 00 00    	je     c0018a2c <HalDetectFeatures()+0xc00>
c001899f:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c00189a4:	83 c8 04             	or     eax,0x4
c00189a7:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00189ac:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c00189b1:	83 c8 08             	or     eax,0x8
c00189b4:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00189b9:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c00189be:	83 c8 10             	or     eax,0x10
c00189c1:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c00189c6:	0f 20 c0             	mov    eax,cr0
c00189c9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00189cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00189d1:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c00189d8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00189df:	83 e0 04             	and    eax,0x4
c00189e2:	74 1e                	je     c0018a02 <HalDetectFeatures()+0xbd6>
c00189e4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00189eb:	83 e0 10             	and    eax,0x10
c00189ee:	75 12                	jne    c0018a02 <HalDetectFeatures()+0xbd6>
c00189f0:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c00189f5:	83 e0 f7             	and    eax,0xfffffff7
c00189f8:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c00189fd:	e9 af 00 00 00       	jmp    c0018ab1 <HalDetectFeatures()+0xc85>
c0018a02:	e8 97 77 fe ff       	call   c000019e <hasLegacyFPU>
c0018a07:	83 e0 01             	and    eax,0x1
c0018a0a:	83 e0 01             	and    eax,0x1
c0018a0d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018a14:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c0018a19:	83 e0 f7             	and    eax,0xfffffff7
c0018a1c:	88 c2                	mov    dl,al
c0018a1e:	88 c8                	mov    al,cl
c0018a20:	09 d0                	or     eax,edx
c0018a22:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c0018a27:	e9 85 00 00 00       	jmp    c0018ab1 <HalDetectFeatures()+0xc85>
c0018a2c:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c0018a31:	83 e0 fb             	and    eax,0xfffffffb
c0018a34:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c0018a39:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c0018a3e:	83 e0 f7             	and    eax,0xfffffff7
c0018a41:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c0018a46:	a0 0f db 02 c0       	mov    al,ds:0xc002db0f
c0018a4b:	83 e0 ef             	and    eax,0xffffffef
c0018a4e:	a2 0f db 02 c0       	mov    ds:0xc002db0f,al
c0018a53:	0f 20 c0             	mov    eax,cr0
c0018a56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018a5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a5e:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0018a65:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018a6c:	83 e0 04             	and    eax,0x4
c0018a6f:	74 1b                	je     c0018a8c <HalDetectFeatures()+0xc60>
c0018a71:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018a78:	83 e0 10             	and    eax,0x10
c0018a7b:	75 0f                	jne    c0018a8c <HalDetectFeatures()+0xc60>
c0018a7d:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c0018a82:	83 e0 f7             	and    eax,0xfffffff7
c0018a85:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c0018a8a:	eb 25                	jmp    c0018ab1 <HalDetectFeatures()+0xc85>
c0018a8c:	e8 0d 77 fe ff       	call   c000019e <hasLegacyFPU>
c0018a91:	83 e0 01             	and    eax,0x1
c0018a94:	83 e0 01             	and    eax,0x1
c0018a97:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018a9e:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c0018aa3:	83 e0 f7             	and    eax,0xfffffff7
c0018aa6:	88 c2                	mov    dl,al
c0018aa8:	88 c8                	mov    al,cl
c0018aaa:	09 d0                	or     eax,edx
c0018aac:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c0018ab1:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c0018ab6:	83 e0 08             	and    eax,0x8
c0018ab9:	0f b6 c0             	movzx  eax,al
c0018abc:	85 c0                	test   eax,eax
c0018abe:	75 25                	jne    c0018ae5 <HalDetectFeatures()+0xcb9>
c0018ac0:	e8 d9 76 fe ff       	call   c000019e <hasLegacyFPU>
c0018ac5:	83 e0 01             	and    eax,0x1
c0018ac8:	83 e0 01             	and    eax,0x1
c0018acb:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018ad2:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c0018ad7:	83 e0 f7             	and    eax,0xfffffff7
c0018ada:	88 c2                	mov    dl,al
c0018adc:	88 c8                	mov    al,cl
c0018ade:	09 d0                	or     eax,edx
c0018ae0:	a2 10 db 02 c0       	mov    ds:0xc002db10,al
c0018ae5:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c0018aea:	83 e0 08             	and    eax,0x8
c0018aed:	0f b6 c0             	movzx  eax,al
c0018af0:	85 c0                	test   eax,eax
c0018af2:	74 0d                	je     c0018b01 <HalDetectFeatures()+0xcd5>
c0018af4:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018af9:	83 c8 10             	or     eax,0x10
c0018afc:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0018b01:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018b06:	83 e0 10             	and    eax,0x10
c0018b09:	0f b6 c0             	movzx  eax,al
c0018b0c:	85 c0                	test   eax,eax
c0018b0e:	75 23                	jne    c0018b33 <HalDetectFeatures()+0xd07>
c0018b10:	e8 61 7f 00 00       	call   c0020a76 <x87Detect>
c0018b15:	83 e0 01             	and    eax,0x1
c0018b18:	83 e0 01             	and    eax,0x1
c0018b1b:	89 c1                	mov    ecx,eax
c0018b1d:	c1 e1 04             	shl    ecx,0x4
c0018b20:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018b25:	83 e0 ef             	and    eax,0xffffffef
c0018b28:	88 c2                	mov    dl,al
c0018b2a:	88 c8                	mov    al,cl
c0018b2c:	09 d0                	or     eax,edx
c0018b2e:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0018b33:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0018b38:	83 e0 01             	and    eax,0x1
c0018b3b:	0f b6 c0             	movzx  eax,al
c0018b3e:	85 c0                	test   eax,eax
c0018b40:	75 2d                	jne    c0018b6f <HalDetectFeatures()+0xd43>
c0018b42:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0018b47:	83 e0 02             	and    eax,0x2
c0018b4a:	0f b6 c0             	movzx  eax,al
c0018b4d:	85 c0                	test   eax,eax
c0018b4f:	75 1e                	jne    c0018b6f <HalDetectFeatures()+0xd43>
c0018b51:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0018b56:	83 e0 04             	and    eax,0x4
c0018b59:	0f b6 c0             	movzx  eax,al
c0018b5c:	85 c0                	test   eax,eax
c0018b5e:	75 0f                	jne    c0018b6f <HalDetectFeatures()+0xd43>
c0018b60:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0018b65:	83 e0 08             	and    eax,0x8
c0018b68:	0f b6 c0             	movzx  eax,al
c0018b6b:	85 c0                	test   eax,eax
c0018b6d:	74 0d                	je     c0018b7c <HalDetectFeatures()+0xd50>
c0018b6f:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018b74:	83 c8 80             	or     eax,0xffffff80
c0018b77:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0018b7c:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018b81:	83 e0 10             	and    eax,0x10
c0018b84:	0f b6 c0             	movzx  eax,al
c0018b87:	85 c0                	test   eax,eax
c0018b89:	74 2f                	je     c0018bba <HalDetectFeatures()+0xd8e>
c0018b8b:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018b90:	83 e0 80             	and    eax,0xffffff80
c0018b93:	0f b6 c0             	movzx  eax,al
c0018b96:	85 c0                	test   eax,eax
c0018b98:	75 20                	jne    c0018bba <HalDetectFeatures()+0xd8e>
c0018b9a:	e8 91 7e 00 00       	call   c0020a30 <sseDetect>
c0018b9f:	83 e0 01             	and    eax,0x1
c0018ba2:	89 c1                	mov    ecx,eax
c0018ba4:	c1 e1 07             	shl    ecx,0x7
c0018ba7:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018bac:	83 e0 7f             	and    eax,0x7f
c0018baf:	88 c2                	mov    dl,al
c0018bb1:	88 c8                	mov    al,cl
c0018bb3:	09 d0                	or     eax,edx
c0018bb5:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0018bba:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018bbf:	83 e0 80             	and    eax,0xffffff80
c0018bc2:	0f b6 c0             	movzx  eax,al
c0018bc5:	85 c0                	test   eax,eax
c0018bc7:	74 1c                	je     c0018be5 <HalDetectFeatures()+0xdb9>
c0018bc9:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0018bce:	83 e0 20             	and    eax,0x20
c0018bd1:	0f b6 c0             	movzx  eax,al
c0018bd4:	85 c0                	test   eax,eax
c0018bd6:	75 0d                	jne    c0018be5 <HalDetectFeatures()+0xdb9>
c0018bd8:	a0 0d db 02 c0       	mov    al,ds:0xc002db0d
c0018bdd:	83 e0 df             	and    eax,0xffffffdf
c0018be0:	a2 0d db 02 c0       	mov    ds:0xc002db0d,al
c0018be5:	c6 05 08 db 02 c0 00 	mov    BYTE PTR ds:0xc002db08,0x0
c0018bec:	90                   	nop
c0018bed:	81 c4 90 00 00 00    	add    esp,0x90
c0018bf3:	5b                   	pop    ebx
c0018bf4:	5e                   	pop    esi
c0018bf5:	5f                   	pop    edi
c0018bf6:	c3                   	ret    

c0018bf7 <HalEnableNMI()>:
c0018bf7:	c6 05 ec da 02 c0 01 	mov    BYTE PTR ds:0xc002daec,0x1
c0018bfe:	6a 10                	push   0x10
c0018c00:	e8 22 ef ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c0018c05:	83 c4 04             	add    esp,0x4
c0018c08:	90                   	nop
c0018c09:	c3                   	ret    

c0018c0a <HalDisableNMI()>:
c0018c0a:	c6 05 ec da 02 c0 00 	mov    BYTE PTR ds:0xc002daec,0x0
c0018c11:	6a 10                	push   0x10
c0018c13:	e8 0f ef ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c0018c18:	83 c4 04             	add    esp,0x4
c0018c1b:	90                   	nop
c0018c1c:	c3                   	ret    

c0018c1d <HalGetNMIState()>:
c0018c1d:	a0 ec da 02 c0       	mov    al,ds:0xc002daec
c0018c22:	c3                   	ret    

c0018c23 <x86rdmsr(unsigned int)>:
c0018c23:	83 ec 1c             	sub    esp,0x1c
c0018c26:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018c2b:	83 e0 08             	and    eax,0x8
c0018c2e:	0f b6 c0             	movzx  eax,al
c0018c31:	85 c0                	test   eax,eax
c0018c33:	75 10                	jne    c0018c45 <x86rdmsr(unsigned int)+0x22>
c0018c35:	83 ec 0c             	sub    esp,0xc
c0018c38:	68 9b 45 02 c0       	push   0xc002459b
c0018c3d:	e8 24 6c ff ff       	call   c000f866 <KePanic(char const*)>
c0018c42:	83 c4 10             	add    esp,0x10
c0018c45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c49:	89 c1                	mov    ecx,eax
c0018c4b:	0f 32                	rdmsr  
c0018c4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c5d:	83 c4 1c             	add    esp,0x1c
c0018c60:	c3                   	ret    

c0018c61 <x86wrmsr(unsigned int, unsigned long long)>:
c0018c61:	83 ec 1c             	sub    esp,0x1c
c0018c64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c74:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018c79:	83 e0 08             	and    eax,0x8
c0018c7c:	0f b6 c0             	movzx  eax,al
c0018c7f:	85 c0                	test   eax,eax
c0018c81:	75 10                	jne    c0018c93 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0018c83:	83 ec 0c             	sub    esp,0xc
c0018c86:	68 a1 45 02 c0       	push   0xc00245a1
c0018c8b:	e8 d6 6b ff ff       	call   c000f866 <KePanic(char const*)>
c0018c90:	83 c4 10             	add    esp,0x10
c0018c93:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018c97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c9f:	0f 30                	wrmsr  
c0018ca1:	90                   	nop
c0018ca2:	83 c4 1c             	add    esp,0x1c
c0018ca5:	c3                   	ret    

c0018ca6 <HalHandleGeneralProtectionFault(void*, void*)>:
c0018ca6:	83 ec 0c             	sub    esp,0xc
c0018ca9:	83 ec 0c             	sub    esp,0xc
c0018cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cb0:	e8 48 e7 ff ff       	call   c00173fd <Vm::faultHandler(regs*)>
c0018cb5:	83 c4 10             	add    esp,0x10
c0018cb8:	83 c4 0c             	add    esp,0xc
c0018cbb:	c3                   	ret    

c0018cbc <HalFindRSDP()>:
c0018cbc:	83 ec 1c             	sub    esp,0x1c
c0018cbf:	a1 40 d1 02 c0       	mov    eax,ds:0xc002d140
c0018cc4:	3d ff 07 00 00       	cmp    eax,0x7ff
c0018cc9:	7e 0c                	jle    c0018cd7 <HalFindRSDP()+0x1b>
c0018ccb:	a1 24 d1 02 c0       	mov    eax,ds:0xc002d124
c0018cd0:	25 00 04 00 00       	and    eax,0x400
c0018cd5:	74 0d                	je     c0018ce4 <HalFindRSDP()+0x28>
c0018cd7:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018cdc:	83 e0 fb             	and    eax,0xfffffffb
c0018cdf:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0018ce4:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018ce9:	83 e0 04             	and    eax,0x4
c0018cec:	0f b6 c0             	movzx  eax,al
c0018cef:	85 c0                	test   eax,eax
c0018cf1:	75 07                	jne    c0018cfa <HalFindRSDP()+0x3e>
c0018cf3:	b8 00 00 00 00       	mov    eax,0x0
c0018cf8:	eb 53                	jmp    c0018d4d <HalFindRSDP()+0x91>
c0018cfa:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0018d02:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0018d0a:	77 2f                	ja     c0018d3b <HalFindRSDP()+0x7f>
c0018d0c:	83 ec 04             	sub    esp,0x4
c0018d0f:	6a 08                	push   0x8
c0018d11:	68 a7 45 02 c0       	push   0xc00245a7
c0018d16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018d1a:	e8 61 76 fe ff       	call   c0000380 <memcmp>
c0018d1f:	83 c4 10             	add    esp,0x10
c0018d22:	85 c0                	test   eax,eax
c0018d24:	0f 94 c0             	sete   al
c0018d27:	0f b6 c0             	movzx  eax,al
c0018d2a:	85 c0                	test   eax,eax
c0018d2c:	74 06                	je     c0018d34 <HalFindRSDP()+0x78>
c0018d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d32:	eb 19                	jmp    c0018d4d <HalFindRSDP()+0x91>
c0018d34:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0018d39:	eb c7                	jmp    c0018d02 <HalFindRSDP()+0x46>
c0018d3b:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0018d40:	83 e0 fb             	and    eax,0xfffffffb
c0018d43:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c0018d48:	b8 00 00 00 00       	mov    eax,0x0
c0018d4d:	83 c4 1c             	add    esp,0x1c
c0018d50:	c3                   	ret    

c0018d51 <HalHandlePageFault(void*, void*)>:
c0018d51:	83 ec 1c             	sub    esp,0x1c
c0018d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018d5b:	83 ec 08             	sub    esp,0x8
c0018d5e:	50                   	push   eax
c0018d5f:	68 ec 47 02 c0       	push   0xc00247ec
c0018d64:	e8 fb e1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018d69:	83 c4 10             	add    esp,0x10
c0018d6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018d73:	83 ec 08             	sub    esp,0x8
c0018d76:	50                   	push   eax
c0018d77:	68 b0 45 02 c0       	push   0xc00245b0
c0018d7c:	e8 e3 e1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018d81:	83 c4 10             	add    esp,0x10
c0018d84:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018d89:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018d8e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018d94:	0f 20 d2             	mov    edx,cr2
c0018d97:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018d9b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018d9f:	83 ec 08             	sub    esp,0x8
c0018da2:	52                   	push   edx
c0018da3:	50                   	push   eax
c0018da4:	e8 7d ac ff ff       	call   c0013a26 <VAS::tryLoadBackOffDisk(unsigned long)>
c0018da9:	83 c4 10             	add    esp,0x10
c0018dac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018db0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018db4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018db7:	83 ec 08             	sub    esp,0x8
c0018dba:	50                   	push   eax
c0018dbb:	68 c5 45 02 c0       	push   0xc00245c5
c0018dc0:	e8 9f e1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018dc5:	83 c4 10             	add    esp,0x10
c0018dc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018dcc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018dcf:	83 ec 08             	sub    esp,0x8
c0018dd2:	50                   	push   eax
c0018dd3:	68 df 45 02 c0       	push   0xc00245df
c0018dd8:	e8 87 e1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018ddd:	83 c4 10             	add    esp,0x10
c0018de0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018de5:	83 ec 08             	sub    esp,0x8
c0018de8:	50                   	push   eax
c0018de9:	68 f4 45 02 c0       	push   0xc00245f4
c0018dee:	e8 71 e1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018df3:	83 c4 10             	add    esp,0x10
c0018df6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018dfa:	83 c4 1c             	add    esp,0x1c
c0018dfd:	c3                   	ret    

c0018dfe <HalHandleOpcodeFault(void*, void*)>:
c0018dfe:	83 ec 1c             	sub    esp,0x1c
c0018e01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e09:	a0 08 db 02 c0       	mov    al,ds:0xc002db08
c0018e0e:	0f b6 c0             	movzx  eax,al
c0018e11:	85 c0                	test   eax,eax
c0018e13:	74 25                	je     c0018e3a <HalHandleOpcodeFault(void*, void*)+0x3c>
c0018e15:	83 ec 0c             	sub    esp,0xc
c0018e18:	68 20 48 02 c0       	push   0xc0024820
c0018e1d:	e8 42 e1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018e22:	83 c4 10             	add    esp,0x10
c0018e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e29:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018e2c:	8d 50 19             	lea    edx,[eax+0x19]
c0018e2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e33:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018e36:	b0 01                	mov    al,0x1
c0018e38:	eb 02                	jmp    c0018e3c <HalHandleOpcodeFault(void*, void*)+0x3e>
c0018e3a:	b0 00                	mov    al,0x0
c0018e3c:	83 c4 1c             	add    esp,0x1c
c0018e3f:	c3                   	ret    

c0018e40 <HalDisplayDebugInfo(void*)>:
c0018e40:	83 ec 2c             	sub    esp,0x2c
c0018e43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018e47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e4b:	0f 20 c0             	mov    eax,cr0
c0018e4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e52:	0f 20 d0             	mov    eax,cr2
c0018e55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e59:	0f 20 d8             	mov    eax,cr3
c0018e5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018e60:	0f 20 e0             	mov    eax,cr4
c0018e63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e6b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018e6e:	83 ec 08             	sub    esp,0x8
c0018e71:	50                   	push   eax
c0018e72:	68 0f 46 02 c0       	push   0xc002460f
c0018e77:	e8 e8 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018e7c:	83 c4 10             	add    esp,0x10
c0018e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e83:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0018e86:	83 ec 08             	sub    esp,0x8
c0018e89:	50                   	push   eax
c0018e8a:	68 00 46 02 c0       	push   0xc0024600
c0018e8f:	e8 d0 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018e94:	83 c4 10             	add    esp,0x10
c0018e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e9b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018e9e:	83 ec 08             	sub    esp,0x8
c0018ea1:	50                   	push   eax
c0018ea2:	68 0b 46 02 c0       	push   0xc002460b
c0018ea7:	e8 b8 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018eac:	83 c4 10             	add    esp,0x10
c0018eaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018eb3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018eb6:	83 ec 08             	sub    esp,0x8
c0018eb9:	50                   	push   eax
c0018eba:	68 1a 46 02 c0       	push   0xc002461a
c0018ebf:	e8 a0 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018ec4:	83 c4 10             	add    esp,0x10
c0018ec7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ecb:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0018ece:	83 ec 08             	sub    esp,0x8
c0018ed1:	50                   	push   eax
c0018ed2:	68 25 46 02 c0       	push   0xc0024625
c0018ed7:	e8 88 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018edc:	83 c4 10             	add    esp,0x10
c0018edf:	83 ec 08             	sub    esp,0x8
c0018ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ee6:	68 30 46 02 c0       	push   0xc0024630
c0018eeb:	e8 74 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018ef0:	83 c4 10             	add    esp,0x10
c0018ef3:	83 ec 08             	sub    esp,0x8
c0018ef6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018efa:	68 3b 46 02 c0       	push   0xc002463b
c0018eff:	e8 60 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018f04:	83 c4 10             	add    esp,0x10
c0018f07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f0b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0018f0e:	c1 e0 05             	shl    eax,0x5
c0018f11:	8d 90 40 5b 02 c0    	lea    edx,[eax-0x3ffda4c0]
c0018f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f1b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0018f1e:	83 ec 04             	sub    esp,0x4
c0018f21:	52                   	push   edx
c0018f22:	50                   	push   eax
c0018f23:	68 46 46 02 c0       	push   0xc0024646
c0018f28:	e8 37 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018f2d:	83 c4 10             	add    esp,0x10
c0018f30:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018f35:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f3b:	83 ec 0c             	sub    esp,0xc
c0018f3e:	50                   	push   eax
c0018f3f:	e8 8f 8d ff ff       	call   c0011cd3 <setActiveTerminal(VgaText*)>
c0018f44:	83 c4 10             	add    esp,0x10
c0018f47:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018f4c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f52:	83 ec 08             	sub    esp,0x8
c0018f55:	68 55 46 02 c0       	push   0xc0024655
c0018f5a:	50                   	push   eax
c0018f5b:	e8 c0 90 ff ff       	call   c0012020 <VgaText::puts(char const*)>
c0018f60:	83 c4 10             	add    esp,0x10
c0018f63:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018f68:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f72:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0018f75:	83 ec 08             	sub    esp,0x8
c0018f78:	52                   	push   edx
c0018f79:	50                   	push   eax
c0018f7a:	e8 5b 90 ff ff       	call   c0011fda <VgaText::putx(unsigned int)>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018f87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f8d:	83 ec 08             	sub    esp,0x8
c0018f90:	68 63 46 02 c0       	push   0xc0024663
c0018f95:	50                   	push   eax
c0018f96:	e8 85 90 ff ff       	call   c0012020 <VgaText::puts(char const*)>
c0018f9b:	83 c4 10             	add    esp,0x10
c0018f9e:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018fa3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018fa9:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0018fae:	8b 12                	mov    edx,DWORD PTR [edx]
c0018fb0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018fb3:	83 c2 0c             	add    edx,0xc
c0018fb6:	83 ec 08             	sub    esp,0x8
c0018fb9:	52                   	push   edx
c0018fba:	50                   	push   eax
c0018fbb:	e8 60 90 ff ff       	call   c0012020 <VgaText::puts(char const*)>
c0018fc0:	83 c4 10             	add    esp,0x10
c0018fc3:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018fc8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018fce:	83 ec 08             	sub    esp,0x8
c0018fd1:	68 6c 46 02 c0       	push   0xc002466c
c0018fd6:	50                   	push   eax
c0018fd7:	e8 44 90 ff ff       	call   c0012020 <VgaText::puts(char const*)>
c0018fdc:	83 c4 10             	add    esp,0x10
c0018fdf:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0018fe4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018fea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018fee:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0018ff1:	83 ec 08             	sub    esp,0x8
c0018ff4:	52                   	push   edx
c0018ff5:	50                   	push   eax
c0018ff6:	e8 df 8f ff ff       	call   c0011fda <VgaText::putx(unsigned int)>
c0018ffb:	83 c4 10             	add    esp,0x10
c0018ffe:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0019003:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019009:	83 ec 08             	sub    esp,0x8
c001900c:	68 74 46 02 c0       	push   0xc0024674
c0019011:	50                   	push   eax
c0019012:	e8 09 90 ff ff       	call   c0012020 <VgaText::puts(char const*)>
c0019017:	83 c4 10             	add    esp,0x10
c001901a:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001901f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019025:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019029:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001902c:	83 ec 08             	sub    esp,0x8
c001902f:	52                   	push   edx
c0019030:	50                   	push   eax
c0019031:	e8 a4 8f ff ff       	call   c0011fda <VgaText::putx(unsigned int)>
c0019036:	83 c4 10             	add    esp,0x10
c0019039:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001903e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019044:	83 ec 08             	sub    esp,0x8
c0019047:	68 7c 46 02 c0       	push   0xc002467c
c001904c:	50                   	push   eax
c001904d:	e8 ce 8f ff ff       	call   c0012020 <VgaText::puts(char const*)>
c0019052:	83 c4 10             	add    esp,0x10
c0019055:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001905a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019060:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019064:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019067:	83 ec 08             	sub    esp,0x8
c001906a:	52                   	push   edx
c001906b:	50                   	push   eax
c001906c:	e8 69 8f ff ff       	call   c0011fda <VgaText::putx(unsigned int)>
c0019071:	83 c4 10             	add    esp,0x10
c0019074:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0019079:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001907f:	83 ec 08             	sub    esp,0x8
c0019082:	68 84 46 02 c0       	push   0xc0024684
c0019087:	50                   	push   eax
c0019088:	e8 93 8f ff ff       	call   c0012020 <VgaText::puts(char const*)>
c001908d:	83 c4 10             	add    esp,0x10
c0019090:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0019095:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001909b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001909f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00190a2:	83 ec 08             	sub    esp,0x8
c00190a5:	52                   	push   edx
c00190a6:	50                   	push   eax
c00190a7:	e8 2e 8f ff ff       	call   c0011fda <VgaText::putx(unsigned int)>
c00190ac:	83 c4 10             	add    esp,0x10
c00190af:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c00190b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00190ba:	83 ec 08             	sub    esp,0x8
c00190bd:	68 8c 46 02 c0       	push   0xc002468c
c00190c2:	50                   	push   eax
c00190c3:	e8 58 8f ff ff       	call   c0012020 <VgaText::puts(char const*)>
c00190c8:	83 c4 10             	add    esp,0x10
c00190cb:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c00190d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00190d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00190da:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00190dd:	83 ec 08             	sub    esp,0x8
c00190e0:	52                   	push   edx
c00190e1:	50                   	push   eax
c00190e2:	e8 f3 8e ff ff       	call   c0011fda <VgaText::putx(unsigned int)>
c00190e7:	83 c4 10             	add    esp,0x10
c00190ea:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c00190ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00190f5:	83 ec 08             	sub    esp,0x8
c00190f8:	68 94 46 02 c0       	push   0xc0024694
c00190fd:	50                   	push   eax
c00190fe:	e8 1d 8f ff ff       	call   c0012020 <VgaText::puts(char const*)>
c0019103:	83 c4 10             	add    esp,0x10
c0019106:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001910b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019111:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019115:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019118:	83 ec 08             	sub    esp,0x8
c001911b:	52                   	push   edx
c001911c:	50                   	push   eax
c001911d:	e8 b8 8e ff ff       	call   c0011fda <VgaText::putx(unsigned int)>
c0019122:	83 c4 10             	add    esp,0x10
c0019125:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001912a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019130:	83 ec 08             	sub    esp,0x8
c0019133:	68 9c 46 02 c0       	push   0xc002469c
c0019138:	50                   	push   eax
c0019139:	e8 e2 8e ff ff       	call   c0012020 <VgaText::puts(char const*)>
c001913e:	83 c4 10             	add    esp,0x10
c0019141:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0019146:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001914c:	83 ec 08             	sub    esp,0x8
c001914f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019153:	50                   	push   eax
c0019154:	e8 81 8e ff ff       	call   c0011fda <VgaText::putx(unsigned int)>
c0019159:	83 c4 10             	add    esp,0x10
c001915c:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0019161:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019167:	83 ec 08             	sub    esp,0x8
c001916a:	68 a5 46 02 c0       	push   0xc00246a5
c001916f:	50                   	push   eax
c0019170:	e8 ab 8e ff ff       	call   c0012020 <VgaText::puts(char const*)>
c0019175:	83 c4 10             	add    esp,0x10
c0019178:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001917d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019183:	83 ec 08             	sub    esp,0x8
c0019186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001918a:	50                   	push   eax
c001918b:	e8 4a 8e ff ff       	call   c0011fda <VgaText::putx(unsigned int)>
c0019190:	83 c4 10             	add    esp,0x10
c0019193:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0019198:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001919e:	83 ec 08             	sub    esp,0x8
c00191a1:	68 ad 46 02 c0       	push   0xc00246ad
c00191a6:	50                   	push   eax
c00191a7:	e8 74 8e ff ff       	call   c0012020 <VgaText::puts(char const*)>
c00191ac:	83 c4 10             	add    esp,0x10
c00191af:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c00191b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00191ba:	83 ec 08             	sub    esp,0x8
c00191bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00191c1:	50                   	push   eax
c00191c2:	e8 13 8e ff ff       	call   c0011fda <VgaText::putx(unsigned int)>
c00191c7:	83 c4 10             	add    esp,0x10
c00191ca:	fa                   	cli    
c00191cb:	f4                   	hlt    
c00191cc:	eb fe                	jmp    c00191cc <HalDisplayDebugInfo(void*)+0x38c>

c00191ce <HalReceivedNMI()>:
c00191ce:	83 ec 1c             	sub    esp,0x1c
c00191d1:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c00191d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00191dc:	89 c2                	mov    edx,eax
c00191de:	ec                   	in     al,dx
c00191df:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00191e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00191e7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00191eb:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c00191f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00191f6:	89 c2                	mov    edx,eax
c00191f8:	ec                   	in     al,dx
c00191f9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00191fd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019201:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019205:	83 ec 0c             	sub    esp,0xc
c0019208:	68 b5 46 02 c0       	push   0xc00246b5
c001920d:	e8 52 dd fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019212:	83 c4 10             	add    esp,0x10
c0019215:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001921a:	83 e0 10             	and    eax,0x10
c001921d:	74 10                	je     c001922f <HalReceivedNMI()+0x61>
c001921f:	83 ec 0c             	sub    esp,0xc
c0019222:	68 c6 46 02 c0       	push   0xc00246c6
c0019227:	e8 3a 66 ff ff       	call   c000f866 <KePanic(char const*)>
c001922c:	83 c4 10             	add    esp,0x10
c001922f:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019234:	83 e0 40             	and    eax,0x40
c0019237:	74 10                	je     c0019249 <HalReceivedNMI()+0x7b>
c0019239:	83 ec 0c             	sub    esp,0xc
c001923c:	68 d3 46 02 c0       	push   0xc00246d3
c0019241:	e8 20 66 ff ff       	call   c000f866 <KePanic(char const*)>
c0019246:	83 c4 10             	add    esp,0x10
c0019249:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001924d:	0f be c0             	movsx  eax,al
c0019250:	85 c0                	test   eax,eax
c0019252:	79 10                	jns    c0019264 <HalReceivedNMI()+0x96>
c0019254:	83 ec 0c             	sub    esp,0xc
c0019257:	68 dd 46 02 c0       	push   0xc00246dd
c001925c:	e8 05 66 ff ff       	call   c000f866 <KePanic(char const*)>
c0019261:	83 c4 10             	add    esp,0x10
c0019264:	90                   	nop
c0019265:	83 c4 1c             	add    esp,0x1c
c0019268:	c3                   	ret    

c0019269 <HalSystemIdle()>:
c0019269:	56                   	push   esi
c001926a:	53                   	push   ebx
c001926b:	83 ec 14             	sub    esp,0x14
c001926e:	a0 10 db 02 c0       	mov    al,ds:0xc002db10
c0019273:	83 e0 10             	and    eax,0x10
c0019276:	0f b6 c0             	movzx  eax,al
c0019279:	85 c0                	test   eax,eax
c001927b:	74 43                	je     c00192c0 <HalSystemIdle()+0x57>
c001927d:	83 ec 0c             	sub    esp,0xc
c0019280:	68 e1 00 00 00       	push   0xe1
c0019285:	e8 99 f9 ff ff       	call   c0018c23 <x86rdmsr(unsigned int)>
c001928a:	83 c4 10             	add    esp,0x10
c001928d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019291:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019295:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019299:	83 e0 02             	and    eax,0x2
c001929c:	89 c3                	mov    ebx,eax
c001929e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192a2:	83 e0 00             	and    eax,0x0
c00192a5:	89 c6                	mov    esi,eax
c00192a7:	83 ec 04             	sub    esp,0x4
c00192aa:	56                   	push   esi
c00192ab:	53                   	push   ebx
c00192ac:	68 e1 00 00 00       	push   0xe1
c00192b1:	e8 ab f9 ff ff       	call   c0018c61 <x86wrmsr(unsigned int, unsigned long long)>
c00192b6:	83 c4 10             	add    esp,0x10
c00192b9:	e8 d6 6e fe ff       	call   c0000194 <doTPAUSE>
c00192be:	eb 01                	jmp    c00192c1 <HalSystemIdle()+0x58>
c00192c0:	f4                   	hlt    
c00192c1:	90                   	nop
c00192c2:	83 c4 14             	add    esp,0x14
c00192c5:	5b                   	pop    ebx
c00192c6:	5e                   	pop    esi
c00192c7:	c3                   	ret    

c00192c8 <i386SaveCoprocessor(void*)>:
c00192c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192cc:	83 c0 3f             	add    eax,0x3f
c00192cf:	83 e0 c0             	and    eax,0xffffffc0
c00192d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192d6:	ff 25 d0 da 02 c0    	jmp    DWORD PTR ds:0xc002dad0

c00192dc <i386LoadCoprocessor(void*)>:
c00192dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192e0:	83 c0 3f             	add    eax,0x3f
c00192e3:	83 e0 c0             	and    eax,0xffffffc0
c00192e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192ea:	ff 25 cc da 02 c0    	jmp    DWORD PTR ds:0xc002dacc

c00192f0 <x87EmulHandler(regs*, void*)>:
c00192f0:	53                   	push   ebx
c00192f1:	83 ec 08             	sub    esp,0x8
c00192f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192f9:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00192fd:	74 10                	je     c001930f <x87EmulHandler(regs*, void*)+0x1f>
c00192ff:	83 ec 0c             	sub    esp,0xc
c0019302:	68 ea 46 02 c0       	push   0xc00246ea
c0019307:	e8 5a 65 ff ff       	call   c000f866 <KePanic(char const*)>
c001930c:	83 c4 10             	add    esp,0x10
c001930f:	0f 20 c0             	mov    eax,cr0
c0019312:	a8 08                	test   al,0x8
c0019314:	74 59                	je     c001936f <x87EmulHandler(regs*, void*)+0x7f>
c0019316:	0f 06                	clts   
c0019318:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001931d:	85 c0                	test   eax,eax
c001931f:	74 0e                	je     c001932f <x87EmulHandler(regs*, void*)+0x3f>
c0019321:	83 ec 0c             	sub    esp,0xc
c0019324:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019327:	e8 9c ff ff ff       	call   c00192c8 <i386SaveCoprocessor(void*)>
c001932c:	83 c4 10             	add    esp,0x10
c001932f:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019335:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0019339:	75 12                	jne    c001934d <x87EmulHandler(regs*, void*)+0x5d>
c001933b:	83 ec 0c             	sub    esp,0xc
c001933e:	68 40 02 00 00       	push   0x240
c0019343:	e8 d7 61 ff ff       	call   c000f51f <malloc>
c0019348:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001934b:	eb 10                	jmp    c001935d <x87EmulHandler(regs*, void*)+0x6d>
c001934d:	83 ec 0c             	sub    esp,0xc
c0019350:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0019355:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019358:	e8 7f ff ff ff       	call   c00192dc <i386LoadCoprocessor(void*)>
c001935d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019362:	83 c4 10             	add    esp,0x10
c0019365:	a3 c8 da 02 c0       	mov    ds:0xc002dac8,eax
c001936a:	83 c4 08             	add    esp,0x8
c001936d:	5b                   	pop    ebx
c001936e:	c3                   	ret    
c001936f:	83 ec 0c             	sub    esp,0xc
c0019372:	68 fe 46 02 c0       	push   0xc00246fe
c0019377:	e8 e8 db fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001937c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0019384:	83 c4 18             	add    esp,0x18
c0019387:	5b                   	pop    ebx
c0019388:	e9 b7 d9 ff ff       	jmp    c0016d44 <Thr::terminateFromIRQ(int)>

c001938d <HalInitialiseCoprocessor()>:
c001938d:	83 ec 10             	sub    esp,0x10
c0019390:	c7 05 c8 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dac8,0x0
c001939a:	6a 00                	push   0x0
c001939c:	68 f0 92 01 c0       	push   0xc00192f0
c00193a1:	6a 07                	push   0x7
c00193a3:	e8 9d 06 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00193a8:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c00193ad:	83 c4 10             	add    esp,0x10
c00193b0:	a8 80                	test   al,0x80
c00193b2:	74 1c                	je     c00193d0 <HalInitialiseCoprocessor()+0x43>
c00193b4:	c7 05 d0 da 02 c0 48 0a 02 c0 	mov    DWORD PTR ds:0xc002dad0,0xc0020a48
c00193be:	c7 05 cc da 02 c0 50 0a 02 c0 	mov    DWORD PTR ds:0xc002dacc,0xc0020a50
c00193c8:	83 c4 0c             	add    esp,0xc
c00193cb:	e9 88 76 00 00       	jmp    c0020a58 <sseInit>
c00193d0:	a8 10                	test   al,0x10
c00193d2:	74 1c                	je     c00193f0 <HalInitialiseCoprocessor()+0x63>
c00193d4:	c7 05 d0 da 02 c0 97 0a 02 c0 	mov    DWORD PTR ds:0xc002dad0,0xc0020a97
c00193de:	c7 05 cc da 02 c0 9e 0a 02 c0 	mov    DWORD PTR ds:0xc002dacc,0xc0020a9e
c00193e8:	83 c4 0c             	add    esp,0xc
c00193eb:	e9 b5 76 00 00       	jmp    c0020aa5 <x87Init>
c00193f0:	c7 05 d0 da 02 c0 22 7b 01 c0 	mov    DWORD PTR ds:0xc002dad0,0xc0017b22
c00193fa:	c7 05 cc da 02 c0 22 7b 01 c0 	mov    DWORD PTR ds:0xc002dacc,0xc0017b22
c0019404:	0f 20 c0             	mov    eax,cr0
c0019407:	83 c8 04             	or     eax,0x4
c001940a:	0f 22 c0             	mov    cr0,eax
c001940d:	83 c4 0c             	add    esp,0xc
c0019410:	c3                   	ret    

c0019411 <HalPanic(char const*)>:
c0019411:	53                   	push   ebx
c0019412:	83 ec 10             	sub    esp,0x10
c0019415:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019419:	fa                   	cli    
c001941a:	53                   	push   ebx
c001941b:	68 14 47 02 c0       	push   0xc0024714
c0019420:	e8 3f db fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019425:	a1 c4 da 02 c0       	mov    eax,ds:0xc002dac4
c001942a:	83 c4 10             	add    esp,0x10
c001942d:	85 c0                	test   eax,eax
c001942f:	74 09                	je     c001943a <HalPanic(char const*)+0x29>
c0019431:	83 ec 0c             	sub    esp,0xc
c0019434:	53                   	push   ebx
c0019435:	ff d0                	call   eax
c0019437:	83 c4 10             	add    esp,0x10
c001943a:	a1 b4 d1 02 c0       	mov    eax,ds:0xc002d1b4
c001943f:	85 c0                	test   eax,eax
c0019441:	0f 84 dc 00 00 00    	je     c0019523 <HalPanic(char const*)+0x112>
c0019447:	52                   	push   edx
c0019448:	6a 01                	push   0x1
c001944a:	6a 0f                	push   0xf
c001944c:	50                   	push   eax
c001944d:	e8 c0 86 ff ff       	call   c0011b12 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019452:	59                   	pop    ecx
c0019453:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c0019459:	e8 c0 88 ff ff       	call   c0011d1e <VgaText::clearScreen()>
c001945e:	58                   	pop    eax
c001945f:	5a                   	pop    edx
c0019460:	68 b6 37 02 c0       	push   0xc00237b6
c0019465:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c001946b:	e8 da 86 ff ff       	call   c0011b4a <VgaText::setTitle(char*)>
c0019470:	83 c4 0c             	add    esp,0xc
c0019473:	6a 01                	push   0x1
c0019475:	6a 0f                	push   0xf
c0019477:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c001947d:	e8 90 86 ff ff       	call   c0011b12 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019482:	59                   	pop    ecx
c0019483:	58                   	pop    eax
c0019484:	68 2d 47 02 c0       	push   0xc002472d
c0019489:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c001948f:	e8 8c 8b ff ff       	call   c0012020 <VgaText::puts(char const*)>
c0019494:	83 c4 0c             	add    esp,0xc
c0019497:	6a 0f                	push   0xf
c0019499:	6a 01                	push   0x1
c001949b:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c00194a1:	e8 6c 86 ff ff       	call   c0011b12 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00194a6:	58                   	pop    eax
c00194a7:	5a                   	pop    edx
c00194a8:	68 36 47 02 c0       	push   0xc0024736
c00194ad:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c00194b3:	e8 68 8b ff ff       	call   c0012020 <VgaText::puts(char const*)>
c00194b8:	83 c4 0c             	add    esp,0xc
c00194bb:	6a 01                	push   0x1
c00194bd:	6a 0f                	push   0xf
c00194bf:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c00194c5:	e8 48 86 ff ff       	call   c0011b12 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00194ca:	59                   	pop    ecx
c00194cb:	58                   	pop    eax
c00194cc:	68 7a 47 02 c0       	push   0xc002477a
c00194d1:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c00194d7:	e8 44 8b ff ff       	call   c0012020 <VgaText::puts(char const*)>
c00194dc:	58                   	pop    eax
c00194dd:	5a                   	pop    edx
c00194de:	68 43 47 02 c0       	push   0xc0024743
c00194e3:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c00194e9:	e8 32 8b ff ff       	call   c0012020 <VgaText::puts(char const*)>
c00194ee:	59                   	pop    ecx
c00194ef:	58                   	pop    eax
c00194f0:	68 7d 47 02 c0       	push   0xc002477d
c00194f5:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c00194fb:	e8 20 8b ff ff       	call   c0012020 <VgaText::puts(char const*)>
c0019500:	58                   	pop    eax
c0019501:	5a                   	pop    edx
c0019502:	53                   	push   ebx
c0019503:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c0019509:	e8 12 8b ff ff       	call   c0012020 <VgaText::puts(char const*)>
c001950e:	59                   	pop    ecx
c001950f:	5b                   	pop    ebx
c0019510:	68 7a 47 02 c0       	push   0xc002477a
c0019515:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c001951b:	e8 00 8b ff ff       	call   c0012020 <VgaText::puts(char const*)>
c0019520:	83 c4 10             	add    esp,0x10
c0019523:	eb fe                	jmp    c0019523 <HalPanic(char const*)+0x112>

c0019525 <HalQueryPerformanceCounter()>:
c0019525:	31 c0                	xor    eax,eax
c0019527:	31 d2                	xor    edx,edx
c0019529:	f6 05 0e db 02 c0 08 	test   BYTE PTR ds:0xc002db0e,0x8
c0019530:	75 02                	jne    c0019534 <HalQueryPerformanceCounter()+0xf>
c0019532:	0f 31                	rdtsc  
c0019534:	c3                   	ret    

c0019535 <HalInitialise()>:
c0019535:	53                   	push   ebx
c0019536:	83 ec 08             	sub    esp,0x8
c0019539:	c6 05 c0 da 02 c0 00 	mov    BYTE PTR ds:0xc002dac0,0x0
c0019540:	a0 0c db 02 c0       	mov    al,ds:0xc002db0c
c0019545:	83 e0 fe             	and    eax,0xfffffffe
c0019548:	a2 0c db 02 c0       	mov    ds:0xc002db0c,al
c001954d:	e8 d2 07 00 00       	call   c0019d24 <picOpen()>
c0019552:	80 3d c0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dac0,0x0
c0019559:	74 0a                	je     c0019565 <HalInitialise()+0x30>
c001955b:	e8 14 07 00 00       	call   c0019c74 <picDisable()>
c0019560:	e8 bf 6a 00 00       	call   c0020024 <apicOpen()>
c0019565:	bb 0f 00 00 00       	mov    ebx,0xf
c001956a:	50                   	push   eax
c001956b:	6a 00                	push   0x0
c001956d:	68 e0 e4 00 c0       	push   0xc000e4e0
c0019572:	6a 00                	push   0x0
c0019574:	e8 cc 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019579:	83 c4 0c             	add    esp,0xc
c001957c:	6a 00                	push   0x0
c001957e:	68 e0 e4 00 c0       	push   0xc000e4e0
c0019583:	6a 01                	push   0x1
c0019585:	e8 bb 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001958a:	83 c4 0c             	add    esp,0xc
c001958d:	6a 00                	push   0x0
c001958f:	68 d0 e4 00 c0       	push   0xc000e4d0
c0019594:	6a 02                	push   0x2
c0019596:	e8 aa 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001959b:	83 c4 0c             	add    esp,0xc
c001959e:	6a 00                	push   0x0
c00195a0:	68 e0 e4 00 c0       	push   0xc000e4e0
c00195a5:	6a 03                	push   0x3
c00195a7:	e8 99 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00195ac:	83 c4 0c             	add    esp,0xc
c00195af:	6a 00                	push   0x0
c00195b1:	68 e0 e4 00 c0       	push   0xc000e4e0
c00195b6:	6a 04                	push   0x4
c00195b8:	e8 88 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00195bd:	83 c4 0c             	add    esp,0xc
c00195c0:	6a 00                	push   0x0
c00195c2:	68 e0 e4 00 c0       	push   0xc000e4e0
c00195c7:	6a 05                	push   0x5
c00195c9:	e8 77 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00195ce:	83 c4 0c             	add    esp,0xc
c00195d1:	6a 00                	push   0x0
c00195d3:	68 14 e5 00 c0       	push   0xc000e514
c00195d8:	6a 06                	push   0x6
c00195da:	e8 66 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00195df:	83 c4 0c             	add    esp,0xc
c00195e2:	6a 00                	push   0x0
c00195e4:	68 68 e5 00 c0       	push   0xc000e568
c00195e9:	6a 08                	push   0x8
c00195eb:	e8 55 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00195f0:	83 c4 0c             	add    esp,0xc
c00195f3:	6a 00                	push   0x0
c00195f5:	68 e0 e4 00 c0       	push   0xc000e4e0
c00195fa:	6a 09                	push   0x9
c00195fc:	e8 44 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019601:	83 c4 0c             	add    esp,0xc
c0019604:	6a 00                	push   0x0
c0019606:	68 e0 e4 00 c0       	push   0xc000e4e0
c001960b:	6a 0a                	push   0xa
c001960d:	e8 33 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019612:	83 c4 0c             	add    esp,0xc
c0019615:	6a 00                	push   0x0
c0019617:	68 e0 e4 00 c0       	push   0xc000e4e0
c001961c:	6a 0b                	push   0xb
c001961e:	e8 22 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019623:	83 c4 0c             	add    esp,0xc
c0019626:	6a 00                	push   0x0
c0019628:	68 18 e4 00 c0       	push   0xc000e418
c001962d:	6a 0d                	push   0xd
c001962f:	e8 11 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019634:	83 c4 0c             	add    esp,0xc
c0019637:	6a 00                	push   0x0
c0019639:	68 6c e4 00 c0       	push   0xc000e46c
c001963e:	6a 0e                	push   0xe
c0019640:	e8 00 04 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019645:	83 c4 10             	add    esp,0x10
c0019648:	50                   	push   eax
c0019649:	6a 00                	push   0x0
c001964b:	68 e0 e4 00 c0       	push   0xc000e4e0
c0019650:	53                   	push   ebx
c0019651:	43                   	inc    ebx
c0019652:	e8 ee 03 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019657:	83 c4 10             	add    esp,0x10
c001965a:	83 fb 1e             	cmp    ebx,0x1e
c001965d:	75 e9                	jne    c0019648 <HalInitialise()+0x113>
c001965f:	50                   	push   eax
c0019660:	6a 00                	push   0x0
c0019662:	68 ac 19 01 c0       	push   0xc00119ac
c0019667:	6a 60                	push   0x60
c0019669:	e8 d7 03 00 00       	call   c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001966e:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c0019673:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001967d:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0019684:	e8 96 5e ff ff       	call   c000f51f <malloc>
c0019689:	89 04 24             	mov    DWORD PTR [esp],eax
c001968c:	89 c3                	mov    ebx,eax
c001968e:	e8 ff 0d 00 00       	call   c001a492 <RTC::RTC()>
c0019693:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001969d:	5a                   	pop    edx
c001969e:	59                   	pop    ecx
c001969f:	53                   	push   ebx
c00196a0:	ff 35 d0 b0 02 c0    	push   DWORD PTR ds:0xc002b0d0
c00196a6:	e8 05 fc fe ff       	call   c00092b0 <Device::addChild(Device*)>
c00196ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196ad:	6a 00                	push   0x0
c00196af:	6a 00                	push   0x0
c00196b1:	6a 00                	push   0x0
c00196b3:	53                   	push   ebx
c00196b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196b7:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c00196bc:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00196c2:	83 c4 28             	add    esp,0x28
c00196c5:	5b                   	pop    ebx
c00196c6:	c3                   	ret    

c00196c7 <HalMakeBeep(int)>:
c00196c7:	53                   	push   ebx
c00196c8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00196cc:	85 db                	test   ebx,ebx
c00196ce:	75 07                	jne    c00196d7 <HalMakeBeep(int)+0x10>
c00196d0:	e4 61                	in     al,0x61
c00196d2:	83 e0 fc             	and    eax,0xfffffffc
c00196d5:	eb 26                	jmp    c00196fd <HalMakeBeep(int)+0x36>
c00196d7:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00196dc:	99                   	cdq    
c00196dd:	f7 fb                	idiv   ebx
c00196df:	89 c1                	mov    ecx,eax
c00196e1:	b0 b6                	mov    al,0xb6
c00196e3:	e6 43                	out    0x43,al
c00196e5:	88 c8                	mov    al,cl
c00196e7:	e6 42                	out    0x42,al
c00196e9:	89 c8                	mov    eax,ecx
c00196eb:	c1 e8 08             	shr    eax,0x8
c00196ee:	e6 42                	out    0x42,al
c00196f0:	e4 61                	in     al,0x61
c00196f2:	89 c2                	mov    edx,eax
c00196f4:	83 ca 03             	or     edx,0x3
c00196f7:	38 d0                	cmp    al,dl
c00196f9:	74 04                	je     c00196ff <HalMakeBeep(int)+0x38>
c00196fb:	88 d0                	mov    al,dl
c00196fd:	e6 61                	out    0x61,al
c00196ff:	5b                   	pop    ebx
c0019700:	c3                   	ret    

c0019701 <HalGetRand()>:
c0019701:	31 c0                	xor    eax,eax
c0019703:	c3                   	ret    

c0019704 <HalEndOfInterrupt(int)>:
c0019704:	80 3d c0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dac0,0x0
c001970b:	74 1d                	je     c001972a <HalEndOfInterrupt(int)+0x26>
c001970d:	83 ec 18             	sub    esp,0x18
c0019710:	6a 1b                	push   0x1b
c0019712:	e8 0c f5 ff ff       	call   c0018c23 <x86rdmsr(unsigned int)>
c0019717:	25 00 f0 ff ff       	and    eax,0xfffff000
c001971c:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0019726:	83 c4 1c             	add    esp,0x1c
c0019729:	c3                   	ret    
c001972a:	e9 79 07 00 00       	jmp    c0019ea8 <picEOI(int)>

c001972f <HalRestart()>:
c001972f:	c3                   	ret    

c0019730 <HalShutdown()>:
c0019730:	c3                   	ret    

c0019731 <HalSleep()>:
c0019731:	c3                   	ret    

c0019732 <CPU::CPU()>:
c0019732:	83 ec 0c             	sub    esp,0xc
c0019735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019739:	83 ec 08             	sub    esp,0x8
c001973c:	68 ef 44 02 c0       	push   0xc00244ef
c0019741:	50                   	push   eax
c0019742:	e8 cb fc fe ff       	call   c0009412 <Device::Device(char const*)>
c0019747:	83 c4 10             	add    esp,0x10
c001974a:	ba 4c 48 02 c0       	mov    edx,0xc002484c
c001974f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019753:	89 10                	mov    DWORD PTR [eax],edx
c0019755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019759:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0019763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019767:	05 64 01 00 00       	add    eax,0x164
c001976c:	83 ec 0c             	sub    esp,0xc
c001976f:	50                   	push   eax
c0019770:	e8 47 4e ff ff       	call   c000e5bc <GDT::GDT()>
c0019775:	83 c4 10             	add    esp,0x10
c0019778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001977c:	05 68 09 00 00       	add    eax,0x968
c0019781:	83 ec 0c             	sub    esp,0xc
c0019784:	50                   	push   eax
c0019785:	e8 86 50 ff ff       	call   c000e810 <IDT::IDT()>
c001978a:	83 c4 10             	add    esp,0x10
c001978d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019791:	05 68 11 00 00       	add    eax,0x1168
c0019796:	83 ec 0c             	sub    esp,0xc
c0019799:	50                   	push   eax
c001979a:	e8 5d 8d ff ff       	call   c00124fc <TSS::TSS()>
c001979f:	83 c4 10             	add    esp,0x10
c00197a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00197a6:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00197b0:	90                   	nop
c00197b1:	83 c4 0c             	add    esp,0xc
c00197b4:	c3                   	ret    
c00197b5:	90                   	nop

c00197b6 <CPU::setupSMEP()>:
c00197b6:	0f 20 e0             	mov    eax,cr4
c00197b9:	0d 00 00 10 00       	or     eax,0x100000
c00197be:	0f 22 e0             	mov    cr4,eax
c00197c1:	c3                   	ret    

c00197c2 <CPU::setupUMIP()>:
c00197c2:	0f 20 e0             	mov    eax,cr4
c00197c5:	80 cc 08             	or     ah,0x8
c00197c8:	0f 22 e0             	mov    cr4,eax
c00197cb:	c3                   	ret    

c00197cc <CPU::setupTSC()>:
c00197cc:	0f 20 e0             	mov    eax,cr4
c00197cf:	83 c8 04             	or     eax,0x4
c00197d2:	0f 22 e0             	mov    cr4,eax
c00197d5:	c3                   	ret    

c00197d6 <CPU::setupLargePages()>:
c00197d6:	0f 20 e0             	mov    eax,cr4
c00197d9:	83 c8 10             	or     eax,0x10
c00197dc:	0f 22 e0             	mov    cr4,eax
c00197df:	c3                   	ret    

c00197e0 <CPU::setupPAT()>:
c00197e0:	f6 05 0c db 02 c0 08 	test   BYTE PTR ds:0xc002db0c,0x8
c00197e7:	74 28                	je     c0019811 <CPU::setupPAT()+0x31>
c00197e9:	53                   	push   ebx
c00197ea:	83 ec 14             	sub    esp,0x14
c00197ed:	68 77 02 00 00       	push   0x277
c00197f2:	e8 2c f4 ff ff       	call   c0018c23 <x86rdmsr(unsigned int)>
c00197f7:	83 c4 0c             	add    esp,0xc
c00197fa:	83 e2 f8             	and    edx,0xfffffff8
c00197fd:	83 ca 01             	or     edx,0x1
c0019800:	52                   	push   edx
c0019801:	50                   	push   eax
c0019802:	68 77 02 00 00       	push   0x277
c0019807:	e8 55 f4 ff ff       	call   c0018c61 <x86wrmsr(unsigned int, unsigned long long)>
c001980c:	83 c4 18             	add    esp,0x18
c001980f:	5b                   	pop    ebx
c0019810:	c3                   	ret    
c0019811:	c3                   	ret    

c0019812 <CPU::setupMTRR()>:
c0019812:	c3                   	ret    
c0019813:	90                   	nop

c0019814 <CPU::setupGlobalPages()>:
c0019814:	0f 20 e0             	mov    eax,cr4
c0019817:	0c 80                	or     al,0x80
c0019819:	0f 22 e0             	mov    cr4,eax
c001981c:	c3                   	ret    
c001981d:	90                   	nop

c001981e <CPU::allowUsermodeDataAccess()>:
c001981e:	f6 05 0f db 02 c0 40 	test   BYTE PTR ds:0xc002db0f,0x40
c0019825:	74 03                	je     c001982a <CPU::allowUsermodeDataAccess()+0xc>
c0019827:	0f 01 cb             	stac   
c001982a:	c3                   	ret    
c001982b:	90                   	nop

c001982c <CPU::prohibitUsermodeDataAccess()>:
c001982c:	f6 05 0f db 02 c0 40 	test   BYTE PTR ds:0xc002db0f,0x40
c0019833:	74 03                	je     c0019838 <CPU::prohibitUsermodeDataAccess()+0xc>
c0019835:	0f 01 ca             	clac   
c0019838:	c3                   	ret    
c0019839:	90                   	nop

c001983a <CPU::setupSMAP()>:
c001983a:	0f 20 e0             	mov    eax,cr4
c001983d:	0d 00 00 20 00       	or     eax,0x200000
c0019842:	0f 22 e0             	mov    cr4,eax
c0019845:	eb e5                	jmp    c001982c <CPU::prohibitUsermodeDataAccess()>
c0019847:	90                   	nop

c0019848 <CPU::setupFeatures()>:
c0019848:	53                   	push   ebx
c0019849:	83 ec 08             	sub    esp,0x8
c001984c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019850:	f6 05 0f db 02 c0 20 	test   BYTE PTR ds:0xc002db0f,0x20
c0019857:	74 18                	je     c0019871 <CPU::setupFeatures()+0x29>
c0019859:	83 ec 0c             	sub    esp,0xc
c001985c:	68 88 47 02 c0       	push   0xc0024788
c0019861:	e8 fe d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019866:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019869:	e8 54 ff ff ff       	call   c00197c2 <CPU::setupUMIP()>
c001986e:	83 c4 10             	add    esp,0x10
c0019871:	f6 05 0e db 02 c0 08 	test   BYTE PTR ds:0xc002db0e,0x8
c0019878:	74 18                	je     c0019892 <CPU::setupFeatures()+0x4a>
c001987a:	83 ec 0c             	sub    esp,0xc
c001987d:	68 92 47 02 c0       	push   0xc0024792
c0019882:	e8 dd d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019887:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001988a:	e8 3d ff ff ff       	call   c00197cc <CPU::setupTSC()>
c001988f:	83 c4 10             	add    esp,0x10
c0019892:	f6 05 0e db 02 c0 20 	test   BYTE PTR ds:0xc002db0e,0x20
c0019899:	74 18                	je     c00198b3 <CPU::setupFeatures()+0x6b>
c001989b:	83 ec 0c             	sub    esp,0xc
c001989e:	68 9b 47 02 c0       	push   0xc002479b
c00198a3:	e8 bc d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198ab:	e8 26 ff ff ff       	call   c00197d6 <CPU::setupLargePages()>
c00198b0:	83 c4 10             	add    esp,0x10
c00198b3:	f6 05 0e db 02 c0 40 	test   BYTE PTR ds:0xc002db0e,0x40
c00198ba:	74 18                	je     c00198d4 <CPU::setupFeatures()+0x8c>
c00198bc:	83 ec 0c             	sub    esp,0xc
c00198bf:	68 a4 47 02 c0       	push   0xc00247a4
c00198c4:	e8 9b d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198cc:	e8 43 ff ff ff       	call   c0019814 <CPU::setupGlobalPages()>
c00198d1:	83 c4 10             	add    esp,0x10
c00198d4:	f6 05 0e db 02 c0 80 	test   BYTE PTR ds:0xc002db0e,0x80
c00198db:	74 18                	je     c00198f5 <CPU::setupFeatures()+0xad>
c00198dd:	83 ec 0c             	sub    esp,0xc
c00198e0:	68 b6 47 02 c0       	push   0xc00247b6
c00198e5:	e8 7a d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198ed:	e8 ee fe ff ff       	call   c00197e0 <CPU::setupPAT()>
c00198f2:	83 c4 10             	add    esp,0x10
c00198f5:	f6 05 10 db 02 c0 04 	test   BYTE PTR ds:0xc002db10,0x4
c00198fc:	74 11                	je     c001990f <CPU::setupFeatures()+0xc7>
c00198fe:	c7 44 24 10 bf 47 02 c0 	mov    DWORD PTR [esp+0x10],0xc00247bf
c0019906:	83 c4 08             	add    esp,0x8
c0019909:	5b                   	pop    ebx
c001990a:	e9 55 d6 fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c001990f:	83 c4 08             	add    esp,0x8
c0019912:	5b                   	pop    ebx
c0019913:	c3                   	ret    

c0019914 <CPU::open(int, int, void*)>:
c0019914:	55                   	push   ebp
c0019915:	57                   	push   edi
c0019916:	56                   	push   esi
c0019917:	53                   	push   ebx
c0019918:	83 ec 18             	sub    esp,0x18
c001991b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001991f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019923:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019927:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001992d:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c0019933:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c0019939:	50                   	push   eax
c001993a:	e8 df 4c ff ff       	call   c000e61e <GDT::setup()>
c001993f:	83 c4 0c             	add    esp,0xc
c0019942:	6a 00                	push   0x0
c0019944:	68 ef be ad de       	push   0xdeadbeef
c0019949:	55                   	push   ebp
c001994a:	e8 f1 8b ff ff       	call   c0012540 <TSS::setup(unsigned long, unsigned long)>
c001994f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019952:	e8 c9 8b ff ff       	call   c0012520 <TSS::flush()>
c0019957:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001995d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019960:	e8 21 4f ff ff       	call   c000e886 <IDT::setup()>
c0019965:	b8 00 04 00 00       	mov    eax,0x400
c001996a:	0f 23 f8             	mov    dr7,eax
c001996d:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0019977:	e8 de 60 ff ff       	call   c000fa5a <Phys::allocatePage()>
c001997c:	83 c4 10             	add    esp,0x10
c001997f:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0019985:	85 f6                	test   esi,esi
c0019987:	89 38                	mov    DWORD PTR [eax],edi
c0019989:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001998f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019992:	74 10                	je     c00199a4 <CPU::open(int, int, void*)+0x90>
c0019994:	50                   	push   eax
c0019995:	50                   	push   eax
c0019996:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001999c:	56                   	push   esi
c001999d:	e8 58 95 ff ff       	call   c0012efa <VAS::setCPUSpecific(unsigned long)>
c00199a2:	eb 0d                	jmp    c00199b1 <CPU::open(int, int, void*)+0x9d>
c00199a4:	83 ec 0c             	sub    esp,0xc
c00199a7:	68 c9 47 02 c0       	push   0xc00247c9
c00199ac:	e8 b5 5e ff ff       	call   c000f866 <KePanic(char const*)>
c00199b1:	83 c4 10             	add    esp,0x10
c00199b4:	83 ec 0c             	sub    esp,0xc
c00199b7:	68 d7 47 02 c0       	push   0xc00247d7
c00199bc:	e8 26 31 ff ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c00199c1:	e8 6f fb ff ff       	call   c0019535 <HalInitialise()>
c00199c6:	a1 24 d1 02 c0       	mov    eax,ds:0xc002d124
c00199cb:	83 e0 10             	and    eax,0x10
c00199ce:	83 f8 01             	cmp    eax,0x1
c00199d1:	19 c0                	sbb    eax,eax
c00199d3:	83 e0 46             	and    eax,0x46
c00199d6:	83 c0 1e             	add    eax,0x1e
c00199d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00199dc:	e8 68 0f ff ff       	call   c000a949 <setupTimer(int)>
c00199e1:	83 c4 10             	add    esp,0x10
c00199e4:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c00199ea:	f6 05 24 d1 02 c0 20 	test   BYTE PTR ds:0xc002d124,0x20
c00199f1:	74 0c                	je     c00199ff <CPU::open(int, int, void*)+0xeb>
c00199f3:	83 ec 0c             	sub    esp,0xc
c00199f6:	53                   	push   ebx
c00199f7:	e8 4c fe ff ff       	call   c0019848 <CPU::setupFeatures()>
c00199fc:	83 c4 10             	add    esp,0x10
c00199ff:	83 c4 0c             	add    esp,0xc
c0019a02:	31 c0                	xor    eax,eax
c0019a04:	5b                   	pop    ebx
c0019a05:	5e                   	pop    esi
c0019a06:	5f                   	pop    edi
c0019a07:	5d                   	pop    ebp
c0019a08:	c3                   	ret    

c0019a09 <convertLegacyIRQNumber(int)>:
c0019a09:	83 ec 0c             	sub    esp,0xc
c0019a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a10:	f6 05 0c db 02 c0 01 	test   BYTE PTR ds:0xc002db0c,0x1
c0019a17:	74 0c                	je     c0019a25 <convertLegacyIRQNumber(int)+0x1c>
c0019a19:	83 f8 0f             	cmp    eax,0xf
c0019a1c:	7f 0b                	jg     c0019a29 <convertLegacyIRQNumber(int)+0x20>
c0019a1e:	0f b6 80 c8 53 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdac38]
c0019a25:	83 c4 0c             	add    esp,0xc
c0019a28:	c3                   	ret    
c0019a29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019a2d:	83 ec 0c             	sub    esp,0xc
c0019a30:	68 70 48 02 c0       	push   0xc0024870
c0019a35:	e8 2c 5e ff ff       	call   c000f866 <KePanic(char const*)>
c0019a3a:	83 c4 10             	add    esp,0x10
c0019a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a41:	83 c4 0c             	add    esp,0xc
c0019a44:	c3                   	ret    

c0019a45 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0019a45:	56                   	push   esi
c0019a46:	31 c0                	xor    eax,eax
c0019a48:	53                   	push   ebx
c0019a49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019a4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a51:	89 ca                	mov    edx,ecx
c0019a53:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a57:	c1 e2 04             	shl    edx,0x4
c0019a5a:	83 bc 82 e0 c0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd3f20],0x0
c0019a62:	74 17                	je     c0019a7b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0019a64:	83 c0 01             	add    eax,0x1
c0019a67:	83 f8 04             	cmp    eax,0x4
c0019a6a:	75 ee                	jne    c0019a5a <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0019a6c:	c7 44 24 0c d1 48 02 c0 	mov    DWORD PTR [esp+0xc],0xc00248d1
c0019a74:	5b                   	pop    ebx
c0019a75:	5e                   	pop    esi
c0019a76:	e9 eb 5d ff ff       	jmp    c000f866 <KePanic(char const*)>
c0019a7b:	8d 04 88             	lea    eax,[eax+ecx*4]
c0019a7e:	89 1c 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],ebx
c0019a85:	89 34 85 e0 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4f20],esi
c0019a8c:	5b                   	pop    ebx
c0019a8d:	5e                   	pop    esi
c0019a8e:	c3                   	ret    

c0019a8f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0019a8f:	57                   	push   edi
c0019a90:	f6 05 0c db 02 c0 01 	test   BYTE PTR ds:0xc002db0c,0x1
c0019a97:	56                   	push   esi
c0019a98:	53                   	push   ebx
c0019a99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019aa1:	74 54                	je     c0019af7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c0019aa3:	89 c7                	mov    edi,eax
c0019aa5:	84 c0                	test   al,al
c0019aa7:	74 1d                	je     c0019ac6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0019aa9:	83 fe 0f             	cmp    esi,0xf
c0019aac:	0f 8f d5 00 00 00    	jg     c0019b87 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c0019ab2:	0f b6 b6 c8 53 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdac38]
c0019ab9:	0f b7 bc 36 20 ae 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd51e0]
c0019ac1:	d1 ef                	shr    edi,1
c0019ac3:	83 e7 01             	and    edi,0x1
c0019ac6:	83 ec 08             	sub    esp,0x8
c0019ac9:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c0019ace:	31 db                	xor    ebx,ebx
c0019ad0:	50                   	push   eax
c0019ad1:	68 de 48 02 c0       	push   0xc00248de
c0019ad6:	e8 89 d4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019adb:	83 c4 10             	add    esp,0x10
c0019ade:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c0019ae3:	85 c0                	test   eax,eax
c0019ae5:	7f 55                	jg     c0019b3c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0019ae7:	83 ec 0c             	sub    esp,0xc
c0019aea:	68 f5 48 02 c0       	push   0xc00248f5
c0019aef:	e8 72 5d ff ff       	call   c000f866 <KePanic(char const*)>
c0019af4:	83 c4 10             	add    esp,0x10
c0019af7:	8d 7e 20             	lea    edi,[esi+0x20]
c0019afa:	89 f8                	mov    eax,edi
c0019afc:	31 d2                	xor    edx,edx
c0019afe:	c1 e0 04             	shl    eax,0x4
c0019b01:	8b 8c 90 e0 c0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd3f20]
c0019b08:	85 c9                	test   ecx,ecx
c0019b0a:	0f 84 8e 00 00 00    	je     c0019b9e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c0019b10:	83 c2 01             	add    edx,0x1
c0019b13:	83 fa 04             	cmp    edx,0x4
c0019b16:	75 e9                	jne    c0019b01 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0019b18:	83 ec 0c             	sub    esp,0xc
c0019b1b:	68 ac 48 02 c0       	push   0xc00248ac
c0019b20:	e8 41 5d ff ff       	call   c000f866 <KePanic(char const*)>
c0019b25:	83 c4 10             	add    esp,0x10
c0019b28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019b2d:	5b                   	pop    ebx
c0019b2e:	5e                   	pop    esi
c0019b2f:	5f                   	pop    edi
c0019b30:	c3                   	ret    
c0019b31:	83 c3 01             	add    ebx,0x1
c0019b34:	39 1d 60 e4 02 c0    	cmp    DWORD PTR ds:0xc002e460,ebx
c0019b3a:	7e ab                	jle    c0019ae7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c0019b3c:	83 ec 08             	sub    esp,0x8
c0019b3f:	8b 04 9d 80 e4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1b80]
c0019b46:	56                   	push   esi
c0019b47:	50                   	push   eax
c0019b48:	e8 63 66 00 00       	call   c00201b0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0019b4d:	83 c4 10             	add    esp,0x10
c0019b50:	84 c0                	test   al,al
c0019b52:	74 dd                	je     c0019b31 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c0019b54:	83 ec 04             	sub    esp,0x4
c0019b57:	89 f8                	mov    eax,edi
c0019b59:	8b 1c 9d 80 e4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1b80]
c0019b60:	0f b6 f8             	movzx  edi,al
c0019b63:	57                   	push   edi
c0019b64:	8d 7e 20             	lea    edi,[esi+0x20]
c0019b67:	6a 00                	push   0x0
c0019b69:	89 f8                	mov    eax,edi
c0019b6b:	0f b6 c0             	movzx  eax,al
c0019b6e:	50                   	push   eax
c0019b6f:	89 f0                	mov    eax,esi
c0019b71:	6a 00                	push   0x0
c0019b73:	0f b6 c0             	movzx  eax,al
c0019b76:	6a 00                	push   0x0
c0019b78:	50                   	push   eax
c0019b79:	53                   	push   ebx
c0019b7a:	e8 9d 67 00 00       	call   c002031c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0019b7f:	83 c4 20             	add    esp,0x20
c0019b82:	e9 73 ff ff ff       	jmp    c0019afa <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c0019b87:	83 ec 0c             	sub    esp,0xc
c0019b8a:	31 ff                	xor    edi,edi
c0019b8c:	68 70 48 02 c0       	push   0xc0024870
c0019b91:	e8 d0 5c ff ff       	call   c000f866 <KePanic(char const*)>
c0019b96:	83 c4 10             	add    esp,0x10
c0019b99:	e9 28 ff ff ff       	jmp    c0019ac6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0019b9e:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019ba1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019ba5:	89 14 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],edx
c0019bac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bb0:	5b                   	pop    ebx
c0019bb1:	89 14 85 e0 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4f20],edx
c0019bb8:	89 f0                	mov    eax,esi
c0019bba:	5e                   	pop    esi
c0019bbb:	5f                   	pop    edi
c0019bbc:	c3                   	ret    

c0019bbd <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0019bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019bc5:	c1 e0 04             	shl    eax,0x4
c0019bc8:	8d 50 10             	lea    edx,[eax+0x10]
c0019bcb:	39 88 e0 c0 02 c0    	cmp    DWORD PTR [eax-0x3ffd3f20],ecx
c0019bd1:	74 08                	je     c0019bdb <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0019bd3:	83 c0 04             	add    eax,0x4
c0019bd6:	39 d0                	cmp    eax,edx
c0019bd8:	75 f1                	jne    c0019bcb <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0019bda:	c3                   	ret    
c0019bdb:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c0019be5:	c7 80 e0 b0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4f20],0x0
c0019bef:	eb e2                	jmp    c0019bd3 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0019bf1 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0019bf1:	53                   	push   ebx
c0019bf2:	83 ec 08             	sub    esp,0x8
c0019bf5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019bf9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019bfe:	74 09                	je     c0019c09 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0019c00:	f6 05 0c db 02 c0 01 	test   BYTE PTR ds:0xc002db0c,0x1
c0019c07:	75 37                	jne    c0019c40 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c0019c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c0d:	83 c0 20             	add    eax,0x20
c0019c10:	c1 e0 04             	shl    eax,0x4
c0019c13:	8d 50 10             	lea    edx,[eax+0x10]
c0019c16:	39 98 e0 c0 02 c0    	cmp    DWORD PTR [eax-0x3ffd3f20],ebx
c0019c1c:	74 0c                	je     c0019c2a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c0019c1e:	83 c0 04             	add    eax,0x4
c0019c21:	39 d0                	cmp    eax,edx
c0019c23:	75 f1                	jne    c0019c16 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c0019c25:	83 c4 08             	add    esp,0x8
c0019c28:	5b                   	pop    ebx
c0019c29:	c3                   	ret    
c0019c2a:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c0019c34:	c7 80 e0 b0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4f20],0x0
c0019c3e:	eb de                	jmp    c0019c1e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c0019c40:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c0019c45:	7f 11                	jg     c0019c58 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c0019c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c4b:	0f b6 80 c8 53 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdac38]
c0019c52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c56:	eb b1                	jmp    c0019c09 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0019c58:	83 ec 0c             	sub    esp,0xc
c0019c5b:	68 02 49 02 c0       	push   0xc0024902
c0019c60:	e8 01 5c ff ff       	call   c000f866 <KePanic(char const*)>
c0019c65:	83 c4 10             	add    esp,0x10
c0019c68:	eb 9f                	jmp    c0019c09 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0019c6a:	66 90                	xchg   ax,ax

c0019c6c <picIoWait()>:
c0019c6c:	eb 00                	jmp    c0019c6e <picIoWait()+0x2>
c0019c6e:	eb 00                	jmp    c0019c70 <picIoWait()+0x4>
c0019c70:	90                   	nop
c0019c71:	c3                   	ret    
c0019c72:	66 90                	xchg   ax,ax

c0019c74 <picDisable()>:
c0019c74:	83 ec 10             	sub    esp,0x10
c0019c77:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0019c7e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0019c83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019c87:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019c8c:	ee                   	out    dx,al
c0019c8d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0019c94:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0019c99:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019c9d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0019ca2:	ee                   	out    dx,al
c0019ca3:	90                   	nop
c0019ca4:	83 c4 10             	add    esp,0x10
c0019ca7:	c3                   	ret    

c0019ca8 <picGetIRQReg(int)>:
c0019ca8:	83 ec 10             	sub    esp,0x10
c0019cab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019caf:	0f b6 c0             	movzx  eax,al
c0019cb2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0019cb9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0019cbd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019cc1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019cc6:	ee                   	out    dx,al
c0019cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ccb:	0f b6 c0             	movzx  eax,al
c0019cce:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019cd5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019cd9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019cdd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019ce2:	ee                   	out    dx,al
c0019ce3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0019cea:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0019cef:	89 c2                	mov    edx,eax
c0019cf1:	ec                   	in     al,dx
c0019cf2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019cf6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019cfa:	0f b6 c0             	movzx  eax,al
c0019cfd:	c1 e0 08             	shl    eax,0x8
c0019d00:	89 c1                	mov    ecx,eax
c0019d02:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0019d09:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0019d0e:	89 c2                	mov    edx,eax
c0019d10:	ec                   	in     al,dx
c0019d11:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019d15:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019d19:	0f b6 c0             	movzx  eax,al
c0019d1c:	09 c8                	or     eax,ecx
c0019d1e:	83 c4 10             	add    esp,0x10
c0019d21:	c3                   	ret    
c0019d22:	66 90                	xchg   ax,ax

c0019d24 <picOpen()>:
c0019d24:	83 ec 50             	sub    esp,0x50
c0019d27:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0019d2e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0019d33:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019d37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d3b:	ee                   	out    dx,al
c0019d3c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0019d43:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019d48:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0019d4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d50:	ee                   	out    dx,al
c0019d51:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0019d59:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0019d61:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0019d68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019d6c:	89 c2                	mov    edx,eax
c0019d6e:	ec                   	in     al,dx
c0019d6f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0019d73:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0019d77:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0019d7b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0019d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d86:	89 c2                	mov    edx,eax
c0019d88:	ec                   	in     al,dx
c0019d89:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019d8d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019d91:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0019d95:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0019d9c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0019da1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0019da5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019da9:	ee                   	out    dx,al
c0019daa:	e8 bd fe ff ff       	call   c0019c6c <picIoWait()>
c0019daf:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0019db6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0019dbb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0019dbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019dc3:	ee                   	out    dx,al
c0019dc4:	e8 a3 fe ff ff       	call   c0019c6c <picIoWait()>
c0019dc9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019dcd:	0f b6 c0             	movzx  eax,al
c0019dd0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0019dd7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0019ddb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0019ddf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019de3:	ee                   	out    dx,al
c0019de4:	e8 83 fe ff ff       	call   c0019c6c <picIoWait()>
c0019de9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019ded:	0f b6 c0             	movzx  eax,al
c0019df0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0019df7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0019dfb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0019dff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019e03:	ee                   	out    dx,al
c0019e04:	e8 63 fe ff ff       	call   c0019c6c <picIoWait()>
c0019e09:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0019e10:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0019e15:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0019e19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019e1d:	ee                   	out    dx,al
c0019e1e:	e8 49 fe ff ff       	call   c0019c6c <picIoWait()>
c0019e23:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0019e2a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0019e2f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019e33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019e37:	ee                   	out    dx,al
c0019e38:	e8 2f fe ff ff       	call   c0019c6c <picIoWait()>
c0019e3d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0019e44:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0019e49:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0019e4d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019e51:	ee                   	out    dx,al
c0019e52:	e8 15 fe ff ff       	call   c0019c6c <picIoWait()>
c0019e57:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0019e5e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0019e63:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0019e67:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019e6b:	ee                   	out    dx,al
c0019e6c:	e8 fb fd ff ff       	call   c0019c6c <picIoWait()>
c0019e71:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0019e76:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0019e7d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0019e81:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0019e85:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019e89:	ee                   	out    dx,al
c0019e8a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0019e8f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0019e96:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0019e9a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0019e9e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0019ea2:	ee                   	out    dx,al
c0019ea3:	90                   	nop
c0019ea4:	83 c4 50             	add    esp,0x50
c0019ea7:	c3                   	ret    

c0019ea8 <picEOI(int)>:
c0019ea8:	83 ec 10             	sub    esp,0x10
c0019eab:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019eb0:	75 1e                	jne    c0019ed0 <picEOI(int)+0x28>
c0019eb2:	6a 0b                	push   0xb
c0019eb4:	e8 ef fd ff ff       	call   c0019ca8 <picGetIRQReg(int)>
c0019eb9:	83 c4 04             	add    esp,0x4
c0019ebc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0019ec1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0019ec6:	25 80 00 00 00       	and    eax,0x80
c0019ecb:	74 73                	je     c0019f40 <picEOI(int)+0x98>
c0019ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ed0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0019ed5:	75 31                	jne    c0019f08 <picEOI(int)+0x60>
c0019ed7:	6a 0b                	push   0xb
c0019ed9:	e8 ca fd ff ff       	call   c0019ca8 <picGetIRQReg(int)>
c0019ede:	83 c4 04             	add    esp,0x4
c0019ee1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0019ee6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019eea:	98                   	cwde   
c0019eeb:	85 c0                	test   eax,eax
c0019eed:	78 19                	js     c0019f08 <picEOI(int)+0x60>
c0019eef:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0019ef6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0019efb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019eff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019f04:	ee                   	out    dx,al
c0019f05:	eb 3d                	jmp    c0019f44 <picEOI(int)+0x9c>
c0019f07:	90                   	nop
c0019f08:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019f0d:	7e 19                	jle    c0019f28 <picEOI(int)+0x80>
c0019f0f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019f16:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0019f1b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019f1f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019f24:	ee                   	out    dx,al
c0019f25:	8d 76 00             	lea    esi,[esi+0x0]
c0019f28:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0019f2f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0019f34:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019f38:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019f3d:	ee                   	out    dx,al
c0019f3e:	eb 04                	jmp    c0019f44 <picEOI(int)+0x9c>
c0019f40:	90                   	nop
c0019f41:	8d 76 00             	lea    esi,[esi+0x0]
c0019f44:	83 c4 10             	add    esp,0x10
c0019f47:	c3                   	ret    

c0019f48 <RTC::open(int, int, void*)>:
c0019f48:	31 c0                	xor    eax,eax
c0019f4a:	c3                   	ret    
c0019f4b:	90                   	nop

c0019f4c <RTC::close(int, int, void*)>:
c0019f4c:	31 c0                	xor    eax,eax
c0019f4e:	c3                   	ret    
c0019f4f:	90                   	nop

c0019f50 <RTC::timeInSecondsUTC()>:
c0019f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f54:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0019f5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f60:	c3                   	ret    
c0019f61:	90                   	nop

c0019f62 <RTC::timeInDatetimeUTC()>:
c0019f62:	53                   	push   ebx
c0019f63:	83 ec 14             	sub    esp,0x14
c0019f66:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019f6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f70:	50                   	push   eax
c0019f71:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0019f74:	83 c4 0c             	add    esp,0xc
c0019f77:	52                   	push   edx
c0019f78:	50                   	push   eax
c0019f79:	53                   	push   ebx
c0019f7a:	e8 a2 f0 fe ff       	call   c0009021 <KeSecondsToDatetime(unsigned long long)>
c0019f7f:	89 d8                	mov    eax,ebx
c0019f81:	83 c4 14             	add    esp,0x14
c0019f84:	5b                   	pop    ebx
c0019f85:	c2 04 00             	ret    0x4

c0019f88 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0019f88:	56                   	push   esi
c0019f89:	53                   	push   ebx
c0019f8a:	83 ec 14             	sub    esp,0x14
c0019f8d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019f91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f93:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0019f96:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f9a:	52                   	push   edx
c0019f9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019f9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019fa3:	50                   	push   eax
c0019fa4:	e8 78 f0 fe ff       	call   c0009021 <KeSecondsToDatetime(unsigned long long)>
c0019fa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019fad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019fb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019fb5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0019fb9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019fbd:	89 f0                	mov    eax,esi
c0019fbf:	83 c4 20             	add    esp,0x20
c0019fc2:	5b                   	pop    ebx
c0019fc3:	5e                   	pop    esi
c0019fc4:	ff e0                	jmp    eax

c0019fc6 <RTC::~RTC()>:
c0019fc6:	83 ec 0c             	sub    esp,0xc
c0019fc9:	ba 2c 49 02 c0       	mov    edx,0xc002492c
c0019fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fd2:	89 10                	mov    DWORD PTR [eax],edx
c0019fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fd8:	83 ec 0c             	sub    esp,0xc
c0019fdb:	50                   	push   eax
c0019fdc:	e8 a5 ed fe ff       	call   c0008d86 <Clock::~Clock()>
c0019fe1:	83 c4 10             	add    esp,0x10
c0019fe4:	90                   	nop
c0019fe5:	83 c4 0c             	add    esp,0xc
c0019fe8:	c3                   	ret    
c0019fe9:	90                   	nop

c0019fea <RTC::~RTC()>:
c0019fea:	83 ec 0c             	sub    esp,0xc
c0019fed:	83 ec 0c             	sub    esp,0xc
c0019ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ff4:	e8 cd ff ff ff       	call   c0019fc6 <RTC::~RTC()>
c0019ff9:	83 c4 10             	add    esp,0x10
c0019ffc:	83 ec 08             	sub    esp,0x8
c0019fff:	68 60 01 00 00       	push   0x160
c001a004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a008:	e8 9a 2b ff ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c001a00d:	83 c4 10             	add    esp,0x10
c001a010:	83 c4 0c             	add    esp,0xc
c001a013:	c3                   	ret    

c001a014 <RTC::get_update_in_progress_flag()>:
c001a014:	83 ec 18             	sub    esp,0x18
c001a017:	6a 0a                	push   0xa
c001a019:	e8 09 db ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a01e:	83 c4 1c             	add    esp,0x1c
c001a021:	0f b6 c0             	movzx  eax,al
c001a024:	c1 e8 07             	shr    eax,0x7
c001a027:	c3                   	ret    

c001a028 <RTC::completeRTCRefresh()>:
c001a028:	55                   	push   ebp
c001a029:	57                   	push   edi
c001a02a:	56                   	push   esi
c001a02b:	53                   	push   ebx
c001a02c:	83 ec 3c             	sub    esp,0x3c
c001a02f:	8b 1d 4c ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab4c
c001a035:	83 ec 0c             	sub    esp,0xc
c001a038:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a03c:	e8 d3 ff ff ff       	call   c001a014 <RTC::get_update_in_progress_flag()>
c001a041:	83 c4 10             	add    esp,0x10
c001a044:	84 c0                	test   al,al
c001a046:	74 0e                	je     c001a056 <RTC::completeRTCRefresh()+0x2e>
c001a048:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001a04e:	3b 05 4c ab 02 c0    	cmp    eax,DWORD PTR ds:0xc002ab4c
c001a054:	73 df                	jae    c001a035 <RTC::completeRTCRefresh()+0xd>
c001a056:	83 ec 0c             	sub    esp,0xc
c001a059:	6a 00                	push   0x0
c001a05b:	e8 c7 da ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a060:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001a067:	89 c5                	mov    ebp,eax
c001a069:	e8 b9 da ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a06e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001a075:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001a079:	e8 a9 da ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a07e:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001a085:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001a089:	e8 99 da ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a08e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a095:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001a099:	e8 89 da ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a09e:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001a0a5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a0a9:	e8 79 da ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a0ae:	0f b6 c0             	movzx  eax,al
c001a0b1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a0b5:	83 c4 10             	add    esp,0x10
c001a0b8:	8b 1d 4c ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab4c
c001a0be:	83 ec 0c             	sub    esp,0xc
c001a0c1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a0c5:	e8 4a ff ff ff       	call   c001a014 <RTC::get_update_in_progress_flag()>
c001a0ca:	83 c4 10             	add    esp,0x10
c001a0cd:	84 c0                	test   al,al
c001a0cf:	74 0e                	je     c001a0df <RTC::completeRTCRefresh()+0xb7>
c001a0d1:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001a0d7:	3b 05 4c ab 02 c0    	cmp    eax,DWORD PTR ds:0xc002ab4c
c001a0dd:	73 df                	jae    c001a0be <RTC::completeRTCRefresh()+0x96>
c001a0df:	83 ec 0c             	sub    esp,0xc
c001a0e2:	6a 00                	push   0x0
c001a0e4:	e8 3e da ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a0e9:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001a0f0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a0f4:	e8 2e da ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a0f9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001a100:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a104:	e8 1e da ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a109:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001a110:	88 c3                	mov    bl,al
c001a112:	e8 10 da ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a117:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a11e:	89 c6                	mov    esi,eax
c001a120:	e8 02 da ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a125:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001a12c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a130:	e8 f2 d9 ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a135:	89 e9                	mov    ecx,ebp
c001a137:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a13b:	0f b6 f8             	movzx  edi,al
c001a13e:	83 c4 10             	add    esp,0x10
c001a141:	0f b6 eb             	movzx  ebp,bl
c001a144:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001a148:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a14d:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a152:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a156:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a15a:	0f 94 c0             	sete   al
c001a15d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a161:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001a165:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001a16a:	0f 94 c2             	sete   dl
c001a16d:	21 d0                	and    eax,edx
c001a16f:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001a173:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001a177:	0f 94 c2             	sete   dl
c001a17a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a17e:	21 c2                	and    edx,eax
c001a180:	89 f0                	mov    eax,esi
c001a182:	0f b6 c0             	movzx  eax,al
c001a185:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a189:	89 f0                	mov    eax,esi
c001a18b:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001a18f:	0f 94 c0             	sete   al
c001a192:	21 d0                	and    eax,edx
c001a194:	31 d2                	xor    edx,edx
c001a196:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001a19a:	0f 94 c2             	sete   dl
c001a19d:	85 c2                	test   edx,eax
c001a19f:	75 27                	jne    c001a1c8 <RTC::completeRTCRefresh()+0x1a0>
c001a1a1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a1a5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001a1a9:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001a1ad:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001a1b1:	89 f0                	mov    eax,esi
c001a1b3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001a1b7:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001a1bb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a1bf:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a1c3:	e9 f0 fe ff ff       	jmp    c001a0b8 <RTC::completeRTCRefresh()+0x90>
c001a1c8:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001a1cc:	75 d3                	jne    c001a1a1 <RTC::completeRTCRefresh()+0x179>
c001a1ce:	83 ec 0c             	sub    esp,0xc
c001a1d1:	6a 0b                	push   0xb
c001a1d3:	e8 4f d9 ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a1d8:	83 c4 10             	add    esp,0x10
c001a1db:	a8 04                	test   al,0x4
c001a1dd:	75 7a                	jne    c001a259 <RTC::completeRTCRefresh()+0x231>
c001a1df:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a1e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a1e7:	83 e1 0f             	and    ecx,0xf
c001a1ea:	c1 ea 04             	shr    edx,0x4
c001a1ed:	83 e6 0f             	and    esi,0xf
c001a1f0:	6b d2 0a             	imul   edx,edx,0xa
c001a1f3:	c1 ef 04             	shr    edi,0x4
c001a1f6:	01 d1                	add    ecx,edx
c001a1f8:	6b ff 0a             	imul   edi,edi,0xa
c001a1fb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001a1ff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a203:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a207:	c1 ea 04             	shr    edx,0x4
c001a20a:	83 e1 0f             	and    ecx,0xf
c001a20d:	6b d2 0a             	imul   edx,edx,0xa
c001a210:	01 d1                	add    ecx,edx
c001a212:	89 ea                	mov    edx,ebp
c001a214:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001a218:	c1 ea 04             	shr    edx,0x4
c001a21b:	89 d9                	mov    ecx,ebx
c001a21d:	83 e2 07             	and    edx,0x7
c001a220:	83 e1 0f             	and    ecx,0xf
c001a223:	6b d2 0a             	imul   edx,edx,0xa
c001a226:	83 e3 80             	and    ebx,0xffffff80
c001a229:	01 d1                	add    ecx,edx
c001a22b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a22f:	09 cb                	or     ebx,ecx
c001a231:	c1 ea 04             	shr    edx,0x4
c001a234:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a238:	6b d2 0a             	imul   edx,edx,0xa
c001a23b:	83 e1 0f             	and    ecx,0xf
c001a23e:	01 d6                	add    esi,edx
c001a240:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a244:	c1 ea 04             	shr    edx,0x4
c001a247:	6b d2 0a             	imul   edx,edx,0xa
c001a24a:	01 d1                	add    ecx,edx
c001a24c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a250:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001a254:	83 e2 0f             	and    edx,0xf
c001a257:	01 d7                	add    edi,edx
c001a259:	a8 02                	test   al,0x2
c001a25b:	75 15                	jne    c001a272 <RTC::completeRTCRefresh()+0x24a>
c001a25d:	f6 c3 80             	test   bl,0x80
c001a260:	74 10                	je     c001a272 <RTC::completeRTCRefresh()+0x24a>
c001a262:	83 e3 7f             	and    ebx,0x7f
c001a265:	b9 18 00 00 00       	mov    ecx,0x18
c001a26a:	8d 43 0c             	lea    eax,[ebx+0xc]
c001a26d:	99                   	cdq    
c001a26e:	f7 f9                	idiv   ecx
c001a270:	88 d3                	mov    bl,dl
c001a272:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001a278:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001a27e:	77 06                	ja     c001a286 <RTC::completeRTCRefresh()+0x25e>
c001a280:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001a286:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a28b:	31 c9                	xor    ecx,ecx
c001a28d:	c1 e0 10             	shl    eax,0x10
c001a290:	89 cf                	mov    edi,ecx
c001a292:	c1 e5 10             	shl    ebp,0x10
c001a295:	31 d2                	xor    edx,edx
c001a297:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001a29d:	09 c7                	or     edi,eax
c001a29f:	89 f0                	mov    eax,esi
c001a2a1:	89 f9                	mov    ecx,edi
c001a2a3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a2a7:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001a2ab:	88 c2                	mov    dl,al
c001a2ad:	88 d9                	mov    cl,bl
c001a2af:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001a2b3:	0f b7 c2             	movzx  eax,dx
c001a2b6:	09 e8                	or     eax,ebp
c001a2b8:	89 c2                	mov    edx,eax
c001a2ba:	50                   	push   eax
c001a2bb:	50                   	push   eax
c001a2bc:	51                   	push   ecx
c001a2bd:	52                   	push   edx
c001a2be:	e8 b2 eb fe ff       	call   c0008e75 <KeDatetimeToSeconds(datetime_t)>
c001a2c3:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001a2c7:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001a2cd:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001a2d3:	83 c4 4c             	add    esp,0x4c
c001a2d6:	5b                   	pop    ebx
c001a2d7:	5e                   	pop    esi
c001a2d8:	5f                   	pop    edi
c001a2d9:	5d                   	pop    ebp
c001a2da:	c3                   	ret    
c001a2db:	90                   	nop

c001a2dc <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001a2dc:	55                   	push   ebp
c001a2dd:	57                   	push   edi
c001a2de:	56                   	push   esi
c001a2df:	53                   	push   ebx
c001a2e0:	83 ec 34             	sub    esp,0x34
c001a2e3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001a2e7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a2eb:	6a 00                	push   0x0
c001a2ed:	89 fb                	mov    ebx,edi
c001a2ef:	6a 00                	push   0x0
c001a2f1:	e8 85 d8 ff ff       	call   c0017b7b <x86WriteCMOS(unsigned char, unsigned char)>
c001a2f6:	5d                   	pop    ebp
c001a2f7:	58                   	pop    eax
c001a2f8:	6a 00                	push   0x0
c001a2fa:	6a 02                	push   0x2
c001a2fc:	e8 7a d8 ff ff       	call   c0017b7b <x86WriteCMOS(unsigned char, unsigned char)>
c001a301:	31 d2                	xor    edx,edx
c001a303:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001a30a:	89 f9                	mov    ecx,edi
c001a30c:	89 f8                	mov    eax,edi
c001a30e:	c1 e9 10             	shr    ecx,0x10
c001a311:	0f b6 c4             	movzx  eax,ah
c001a314:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001a318:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a31c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a320:	b9 64 00 00 00       	mov    ecx,0x64
c001a325:	89 f0                	mov    eax,esi
c001a327:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a32b:	89 f0                	mov    eax,esi
c001a32d:	0f b6 c4             	movzx  eax,ah
c001a330:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a334:	89 f0                	mov    eax,esi
c001a336:	c1 e8 10             	shr    eax,0x10
c001a339:	f7 f1                	div    ecx
c001a33b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a33f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a343:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a347:	e8 db d7 ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a34c:	83 c4 10             	add    esp,0x10
c001a34f:	89 c5                	mov    ebp,eax
c001a351:	a8 04                	test   al,0x4
c001a353:	75 6e                	jne    c001a3c3 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001a355:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a359:	31 d2                	xor    edx,edx
c001a35b:	0f b6 c1             	movzx  eax,cl
c001a35e:	b9 0a 00 00 00       	mov    ecx,0xa
c001a363:	f7 f1                	div    ecx
c001a365:	c1 e0 04             	shl    eax,0x4
c001a368:	09 d0                	or     eax,edx
c001a36a:	31 d2                	xor    edx,edx
c001a36c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a370:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001a375:	f7 f1                	div    ecx
c001a377:	c1 e0 04             	shl    eax,0x4
c001a37a:	09 d0                	or     eax,edx
c001a37c:	31 d2                	xor    edx,edx
c001a37e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a382:	0f b6 c3             	movzx  eax,bl
c001a385:	f7 f1                	div    ecx
c001a387:	c1 e0 04             	shl    eax,0x4
c001a38a:	09 d0                	or     eax,edx
c001a38c:	31 d2                	xor    edx,edx
c001a38e:	89 c3                	mov    ebx,eax
c001a390:	89 f0                	mov    eax,esi
c001a392:	0f b6 c0             	movzx  eax,al
c001a395:	f7 f1                	div    ecx
c001a397:	c1 e0 04             	shl    eax,0x4
c001a39a:	09 d0                	or     eax,edx
c001a39c:	31 d2                	xor    edx,edx
c001a39e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a3a7:	f7 f1                	div    ecx
c001a3a9:	c1 e0 04             	shl    eax,0x4
c001a3ac:	09 d0                	or     eax,edx
c001a3ae:	31 d2                	xor    edx,edx
c001a3b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a3b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3b8:	f7 f1                	div    ecx
c001a3ba:	c1 e0 04             	shl    eax,0x4
c001a3bd:	09 d0                	or     eax,edx
c001a3bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3c3:	83 e5 02             	and    ebp,0x2
c001a3c6:	75 1e                	jne    c001a3e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a3c8:	0f b6 c3             	movzx  eax,bl
c001a3cb:	83 f8 0b             	cmp    eax,0xb
c001a3ce:	76 10                	jbe    c001a3e0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001a3d0:	8d 53 f4             	lea    edx,[ebx-0xc]
c001a3d3:	88 d3                	mov    bl,dl
c001a3d5:	84 d2                	test   dl,dl
c001a3d7:	75 02                	jne    c001a3db <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001a3d9:	b3 0c                	mov    bl,0xc
c001a3db:	83 cb 80             	or     ebx,0xffffff80
c001a3de:	eb 06                	jmp    c001a3e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a3e0:	85 c0                	test   eax,eax
c001a3e2:	75 02                	jne    c001a3e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a3e4:	b3 0c                	mov    bl,0xc
c001a3e6:	0f b6 db             	movzx  ebx,bl
c001a3e9:	50                   	push   eax
c001a3ea:	50                   	push   eax
c001a3eb:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001a3f0:	52                   	push   edx
c001a3f1:	6a 00                	push   0x0
c001a3f3:	e8 83 d7 ff ff       	call   c0017b7b <x86WriteCMOS(unsigned char, unsigned char)>
c001a3f8:	5a                   	pop    edx
c001a3f9:	59                   	pop    ecx
c001a3fa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a3ff:	50                   	push   eax
c001a400:	6a 02                	push   0x2
c001a402:	e8 74 d7 ff ff       	call   c0017b7b <x86WriteCMOS(unsigned char, unsigned char)>
c001a407:	5e                   	pop    esi
c001a408:	5f                   	pop    edi
c001a409:	53                   	push   ebx
c001a40a:	6a 04                	push   0x4
c001a40c:	e8 6a d7 ff ff       	call   c0017b7b <x86WriteCMOS(unsigned char, unsigned char)>
c001a411:	5d                   	pop    ebp
c001a412:	58                   	pop    eax
c001a413:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001a418:	52                   	push   edx
c001a419:	6a 07                	push   0x7
c001a41b:	e8 5b d7 ff ff       	call   c0017b7b <x86WriteCMOS(unsigned char, unsigned char)>
c001a420:	58                   	pop    eax
c001a421:	5a                   	pop    edx
c001a422:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001a427:	50                   	push   eax
c001a428:	6a 08                	push   0x8
c001a42a:	e8 4c d7 ff ff       	call   c0017b7b <x86WriteCMOS(unsigned char, unsigned char)>
c001a42f:	59                   	pop    ecx
c001a430:	5b                   	pop    ebx
c001a431:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001a436:	55                   	push   ebp
c001a437:	6a 09                	push   0x9
c001a439:	e8 3d d7 ff ff       	call   c0017b7b <x86WriteCMOS(unsigned char, unsigned char)>
c001a43e:	5e                   	pop    esi
c001a43f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a443:	e8 e0 fb ff ff       	call   c001a028 <RTC::completeRTCRefresh()>
c001a448:	83 c4 3c             	add    esp,0x3c
c001a44b:	b0 01                	mov    al,0x1
c001a44d:	5b                   	pop    ebx
c001a44e:	5e                   	pop    esi
c001a44f:	5f                   	pop    edi
c001a450:	5d                   	pop    ebp
c001a451:	c3                   	ret    

c001a452 <rtcIRQHandler(regs*, void*)>:
c001a452:	53                   	push   ebx
c001a453:	83 ec 14             	sub    esp,0x14
c001a456:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a45a:	6a 0c                	push   0xc
c001a45c:	e8 c6 d6 ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a461:	83 c4 10             	add    esp,0x10
c001a464:	a8 80                	test   al,0x80
c001a466:	74 24                	je     c001a48c <rtcIRQHandler(regs*, void*)+0x3a>
c001a468:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001a46f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001a476:	66 ff 05 14 db 02 c0 	inc    WORD PTR ds:0xc002db14
c001a47d:	75 0d                	jne    c001a48c <rtcIRQHandler(regs*, void*)+0x3a>
c001a47f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a483:	83 c4 08             	add    esp,0x8
c001a486:	5b                   	pop    ebx
c001a487:	e9 9c fb ff ff       	jmp    c001a028 <RTC::completeRTCRefresh()>
c001a48c:	83 c4 08             	add    esp,0x8
c001a48f:	5b                   	pop    ebx
c001a490:	c3                   	ret    
c001a491:	90                   	nop

c001a492 <RTC::RTC()>:
c001a492:	83 ec 1c             	sub    esp,0x1c
c001a495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a499:	83 ec 08             	sub    esp,0x8
c001a49c:	68 0f 49 02 c0       	push   0xc002490f
c001a4a1:	50                   	push   eax
c001a4a2:	e8 a9 e8 fe ff       	call   c0008d50 <Clock::Clock(char const*)>
c001a4a7:	83 c4 10             	add    esp,0x10
c001a4aa:	ba 2c 49 02 c0       	mov    edx,0xc002492c
c001a4af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4b3:	89 10                	mov    DWORD PTR [eax],edx
c001a4b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4b9:	83 ec 0c             	sub    esp,0xc
c001a4bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a4c0:	6a 01                	push   0x1
c001a4c2:	68 52 a4 01 c0       	push   0xc001a452
c001a4c7:	6a 08                	push   0x8
c001a4c9:	50                   	push   eax
c001a4ca:	e8 8d ed fe ff       	call   c000925c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a4cf:	83 c4 20             	add    esp,0x20
c001a4d2:	89 c2                	mov    edx,eax
c001a4d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4d8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001a4de:	fa                   	cli    
c001a4df:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001a4e4:	83 c0 01             	add    eax,0x1
c001a4e7:	a3 30 da 02 c0       	mov    ds:0xc002da30,eax
c001a4ec:	83 ec 0c             	sub    esp,0xc
c001a4ef:	6a 0b                	push   0xb
c001a4f1:	e8 31 d6 ff ff       	call   c0017b27 <x86ReadCMOS(unsigned char)>
c001a4f6:	83 c4 10             	add    esp,0x10
c001a4f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a4fd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a501:	83 c8 10             	or     eax,0x10
c001a504:	0f b6 c0             	movzx  eax,al
c001a507:	83 ec 08             	sub    esp,0x8
c001a50a:	50                   	push   eax
c001a50b:	6a 0b                	push   0xb
c001a50d:	e8 69 d6 ff ff       	call   c0017b7b <x86WriteCMOS(unsigned char, unsigned char)>
c001a512:	83 c4 10             	add    esp,0x10
c001a515:	83 ec 0c             	sub    esp,0xc
c001a518:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a51c:	e8 07 fb ff ff       	call   c001a028 <RTC::completeRTCRefresh()>
c001a521:	83 c4 10             	add    esp,0x10
c001a524:	f0 83 2d 30 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da30,0x1
c001a52c:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001a531:	85 c0                	test   eax,eax
c001a533:	75 01                	jne    c001a536 <RTC::RTC()+0xa4>
c001a535:	fb                   	sti    
c001a536:	90                   	nop
c001a537:	83 c4 1c             	add    esp,0x1c
c001a53a:	c3                   	ret    
c001a53b:	90                   	nop

c001a53c <HalConsoleScroll(int, int)>:
c001a53c:	83 ec 10             	sub    esp,0x10
c001a53f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001a547:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001a54f:	90                   	nop
c001a550:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a555:	0f 8f e1 00 00 00    	jg     c001a63c <HalConsoleScroll(int, int)+0x100>
c001a55b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a563:	90                   	nop
c001a564:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001a56c:	0f 8f be 00 00 00    	jg     c001a630 <HalConsoleScroll(int, int)+0xf4>
c001a572:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a576:	89 d0                	mov    eax,edx
c001a578:	c1 e0 02             	shl    eax,0x2
c001a57b:	01 d0                	add    eax,edx
c001a57d:	c1 e0 05             	shl    eax,0x5
c001a580:	89 c2                	mov    edx,eax
c001a582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a586:	01 d0                	add    eax,edx
c001a588:	89 c2                	mov    edx,eax
c001a58a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a58e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a591:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a595:	89 d0                	mov    eax,edx
c001a597:	c1 e0 02             	shl    eax,0x2
c001a59a:	01 d0                	add    eax,edx
c001a59c:	c1 e0 05             	shl    eax,0x5
c001a59f:	89 c2                	mov    edx,eax
c001a5a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5a5:	01 d0                	add    eax,edx
c001a5a7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001a5ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5b1:	01 c2                	add    edx,eax
c001a5b3:	8a 01                	mov    al,BYTE PTR [ecx]
c001a5b5:	88 02                	mov    BYTE PTR [edx],al
c001a5b7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a5bc:	75 66                	jne    c001a624 <HalConsoleScroll(int, int)+0xe8>
c001a5be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5c2:	83 e0 01             	and    eax,0x1
c001a5c5:	74 39                	je     c001a600 <HalConsoleScroll(int, int)+0xc4>
c001a5c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5cb:	83 e0 0f             	and    eax,0xf
c001a5ce:	88 c2                	mov    dl,al
c001a5d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a5d4:	c1 e0 04             	shl    eax,0x4
c001a5d7:	09 d0                	or     eax,edx
c001a5d9:	88 c1                	mov    cl,al
c001a5db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a5df:	89 d0                	mov    eax,edx
c001a5e1:	c1 e0 02             	shl    eax,0x2
c001a5e4:	01 d0                	add    eax,edx
c001a5e6:	c1 e0 05             	shl    eax,0x5
c001a5e9:	89 c2                	mov    edx,eax
c001a5eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5ef:	01 d0                	add    eax,edx
c001a5f1:	89 c2                	mov    edx,eax
c001a5f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5f7:	01 d0                	add    eax,edx
c001a5f9:	88 ca                	mov    dl,cl
c001a5fb:	88 10                	mov    BYTE PTR [eax],dl
c001a5fd:	eb 25                	jmp    c001a624 <HalConsoleScroll(int, int)+0xe8>
c001a5ff:	90                   	nop
c001a600:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a604:	89 d0                	mov    eax,edx
c001a606:	c1 e0 02             	shl    eax,0x2
c001a609:	01 d0                	add    eax,edx
c001a60b:	c1 e0 05             	shl    eax,0x5
c001a60e:	89 c2                	mov    edx,eax
c001a610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a614:	01 d0                	add    eax,edx
c001a616:	89 c2                	mov    edx,eax
c001a618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a61c:	01 d0                	add    eax,edx
c001a61e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001a621:	8d 76 00             	lea    esi,[esi+0x0]
c001a624:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001a629:	e9 36 ff ff ff       	jmp    c001a564 <HalConsoleScroll(int, int)+0x28>
c001a62e:	66 90                	xchg   ax,ax
c001a630:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a635:	e9 16 ff ff ff       	jmp    c001a550 <HalConsoleScroll(int, int)+0x14>
c001a63a:	66 90                	xchg   ax,ax
c001a63c:	90                   	nop
c001a63d:	83 c4 10             	add    esp,0x10
c001a640:	c3                   	ret    
c001a641:	8d 76 00             	lea    esi,[esi+0x0]

c001a644 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001a644:	83 ec 14             	sub    esp,0x14
c001a647:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a64b:	88 04 24             	mov    BYTE PTR [esp],al
c001a64e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a651:	0f b6 c0             	movzx  eax,al
c001a654:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a658:	89 d1                	mov    ecx,edx
c001a65a:	83 e1 0f             	and    ecx,0xf
c001a65d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a661:	c1 e2 04             	shl    edx,0x4
c001a664:	0f b6 d2             	movzx  edx,dl
c001a667:	09 ca                	or     edx,ecx
c001a669:	c1 e2 08             	shl    edx,0x8
c001a66c:	09 d0                	or     eax,edx
c001a66e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001a673:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001a67b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a67f:	89 d0                	mov    eax,edx
c001a681:	c1 e0 02             	shl    eax,0x2
c001a684:	01 d0                	add    eax,edx
c001a686:	c1 e0 04             	shl    eax,0x4
c001a689:	89 c2                	mov    edx,eax
c001a68b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a68f:	01 d0                	add    eax,edx
c001a691:	01 c0                	add    eax,eax
c001a693:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001a697:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a69b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001a6a0:	66 89 02             	mov    WORD PTR [edx],ax
c001a6a3:	90                   	nop
c001a6a4:	83 c4 14             	add    esp,0x14
c001a6a7:	c3                   	ret    

c001a6a8 <HalConsoleCursorUpdate(int, int)>:
c001a6a8:	83 ec 20             	sub    esp,0x20
c001a6ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6af:	89 c2                	mov    edx,eax
c001a6b1:	c1 e2 02             	shl    edx,0x2
c001a6b4:	01 d0                	add    eax,edx
c001a6b6:	c1 e0 04             	shl    eax,0x4
c001a6b9:	89 c2                	mov    edx,eax
c001a6bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a6bf:	01 d0                	add    eax,edx
c001a6c1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001a6c6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001a6cd:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001a6d2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a6d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6da:	ee                   	out    dx,al
c001a6db:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a6e0:	0f b6 c0             	movzx  eax,al
c001a6e3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001a6ea:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a6ee:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a6f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6f6:	ee                   	out    dx,al
c001a6f7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001a6fe:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001a703:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a707:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a70b:	ee                   	out    dx,al
c001a70c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001a711:	c1 e8 08             	shr    eax,0x8
c001a714:	0f b6 c0             	movzx  eax,al
c001a717:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001a71e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a722:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a72a:	ee                   	out    dx,al
c001a72b:	90                   	nop
c001a72c:	83 c4 20             	add    esp,0x20
c001a72f:	c3                   	ret    

c001a730 <FAT::getName()>:
c001a730:	b8 60 49 02 c0       	mov    eax,0xc0024960
c001a735:	c3                   	ret    
c001a736:	66 90                	xchg   ax,ax

c001a738 <FAT::tell(void*, unsigned long long*)>:
c001a738:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a73d:	75 09                	jne    c001a748 <FAT::tell(void*, unsigned long long*)+0x10>
c001a73f:	b8 04 00 00 00       	mov    eax,0x4
c001a744:	c3                   	ret    
c001a745:	8d 76 00             	lea    esi,[esi+0x0]
c001a748:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a74d:	75 09                	jne    c001a758 <FAT::tell(void*, unsigned long long*)+0x20>
c001a74f:	b8 04 00 00 00       	mov    eax,0x4
c001a754:	c3                   	ret    
c001a755:	8d 76 00             	lea    esi,[esi+0x0]
c001a758:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a75c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a75f:	ba 00 00 00 00       	mov    edx,0x0
c001a764:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a768:	89 01                	mov    DWORD PTR [ecx],eax
c001a76a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a76d:	b8 00 00 00 00       	mov    eax,0x0
c001a772:	c3                   	ret    
c001a773:	90                   	nop

c001a774 <FAT::stat(void*, unsigned long long*)>:
c001a774:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a779:	75 09                	jne    c001a784 <FAT::stat(void*, unsigned long long*)+0x10>
c001a77b:	b8 04 00 00 00       	mov    eax,0x4
c001a780:	c3                   	ret    
c001a781:	8d 76 00             	lea    esi,[esi+0x0]
c001a784:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a789:	75 09                	jne    c001a794 <FAT::stat(void*, unsigned long long*)+0x20>
c001a78b:	b8 04 00 00 00       	mov    eax,0x4
c001a790:	c3                   	ret    
c001a791:	8d 76 00             	lea    esi,[esi+0x0]
c001a794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a798:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a79b:	ba 00 00 00 00       	mov    edx,0x0
c001a7a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a7a4:	89 01                	mov    DWORD PTR [ecx],eax
c001a7a6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a7a9:	b8 00 00 00 00       	mov    eax,0x0
c001a7ae:	c3                   	ret    
c001a7af:	90                   	nop

c001a7b0 <FAT::~FAT()>:
c001a7b0:	83 ec 0c             	sub    esp,0xc
c001a7b3:	ba ac 49 02 c0       	mov    edx,0xc00249ac
c001a7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7bc:	89 10                	mov    DWORD PTR [eax],edx
c001a7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7c2:	83 ec 0c             	sub    esp,0xc
c001a7c5:	50                   	push   eax
c001a7c6:	e8 c9 d5 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001a7cb:	83 c4 10             	add    esp,0x10
c001a7ce:	90                   	nop
c001a7cf:	83 c4 0c             	add    esp,0xc
c001a7d2:	c3                   	ret    
c001a7d3:	90                   	nop

c001a7d4 <FAT::~FAT()>:
c001a7d4:	83 ec 0c             	sub    esp,0xc
c001a7d7:	83 ec 0c             	sub    esp,0xc
c001a7da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7de:	e8 cd ff ff ff       	call   c001a7b0 <FAT::~FAT()>
c001a7e3:	83 c4 10             	add    esp,0x10
c001a7e6:	83 ec 08             	sub    esp,0x8
c001a7e9:	6a 08                	push   0x8
c001a7eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7ef:	e8 b3 23 ff ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c001a7f4:	83 c4 10             	add    esp,0x10
c001a7f7:	83 c4 0c             	add    esp,0xc
c001a7fa:	c3                   	ret    
c001a7fb:	90                   	nop

c001a7fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a7fc:	83 ec 1c             	sub    esp,0x1c
c001a7ff:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a806:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a80b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a80f:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001a816:	83 f8 ff             	cmp    eax,0xffffffff
c001a819:	75 35                	jne    c001a850 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a81b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a81f:	88 c2                	mov    dl,al
c001a821:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001a826:	01 d0                	add    eax,edx
c001a828:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a82c:	8b 15 20 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db20
c001a832:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a836:	89 14 85 40 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24c0],edx
c001a83d:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001a842:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a846:	89 14 85 c0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2440],edx
c001a84d:	eb 19                	jmp    c001a868 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a84f:	90                   	nop
c001a850:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a854:	88 c2                	mov    dl,al
c001a856:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a85a:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001a861:	01 d0                	add    eax,edx
c001a863:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a867:	90                   	nop
c001a868:	83 ec 04             	sub    esp,0x4
c001a86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a873:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a877:	50                   	push   eax
c001a878:	e8 3b a9 fe ff       	call   c00051b8 <f_getlabel>
c001a87d:	83 c4 10             	add    esp,0x10
c001a880:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a884:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a889:	75 09                	jne    c001a894 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a88b:	b8 00 00 00 00       	mov    eax,0x0
c001a890:	eb 0a                	jmp    c001a89c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a892:	66 90                	xchg   ax,ax
c001a894:	b8 01 00 00 00       	mov    eax,0x1
c001a899:	8d 76 00             	lea    esi,[esi+0x0]
c001a89c:	83 c4 1c             	add    esp,0x1c
c001a89f:	c3                   	ret    

c001a8a0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a8a0:	57                   	push   edi
c001a8a1:	83 ec 58             	sub    esp,0x58
c001a8a4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a8ac:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a8b0:	b8 00 00 00 00       	mov    eax,0x0
c001a8b5:	b9 0f 00 00 00       	mov    ecx,0xf
c001a8ba:	fc                   	cld    
c001a8bb:	89 d7                	mov    edi,edx
c001a8bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a8bf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a8c3:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001a8ca:	83 f8 ff             	cmp    eax,0xffffffff
c001a8cd:	75 35                	jne    c001a904 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a8cf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a8d3:	88 c2                	mov    dl,al
c001a8d5:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001a8da:	01 d0                	add    eax,edx
c001a8dc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a8e0:	8b 15 20 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db20
c001a8e6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a8ea:	89 14 85 40 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24c0],edx
c001a8f1:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001a8f6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a8fa:	89 14 85 c0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2440],edx
c001a901:	eb 19                	jmp    c001a91c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a903:	90                   	nop
c001a904:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a908:	88 c2                	mov    dl,al
c001a90a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a90e:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001a915:	01 d0                	add    eax,edx
c001a917:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a91b:	90                   	nop
c001a91c:	83 ec 08             	sub    esp,0x8
c001a91f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a923:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a927:	50                   	push   eax
c001a928:	e8 13 5f fe ff       	call   c0000840 <strcat>
c001a92d:	83 c4 10             	add    esp,0x10
c001a930:	83 ec 0c             	sub    esp,0xc
c001a933:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a937:	50                   	push   eax
c001a938:	e8 cc a9 fe ff       	call   c0005309 <f_setlabel>
c001a93d:	83 c4 10             	add    esp,0x10
c001a940:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a944:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a949:	75 09                	jne    c001a954 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a94b:	b8 00 00 00 00       	mov    eax,0x0
c001a950:	eb 0a                	jmp    c001a95c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a952:	66 90                	xchg   ax,ax
c001a954:	b8 01 00 00 00       	mov    eax,0x1
c001a959:	8d 76 00             	lea    esi,[esi+0x0]
c001a95c:	83 c4 58             	add    esp,0x58
c001a95f:	5f                   	pop    edi
c001a960:	c3                   	ret    
c001a961:	90                   	nop
c001a962:	66 90                	xchg   ax,ax

c001a964 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a964:	83 ec 2c             	sub    esp,0x2c
c001a967:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a96f:	83 ec 08             	sub    esp,0x8
c001a972:	68 84 49 02 c0       	push   0xc0024984
c001a977:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a97b:	e8 d0 5d fe ff       	call   c0000750 <strcmp>
c001a980:	83 c4 10             	add    esp,0x10
c001a983:	85 c0                	test   eax,eax
c001a985:	0f 94 c0             	sete   al
c001a988:	0f b6 c0             	movzx  eax,al
c001a98b:	85 c0                	test   eax,eax
c001a98d:	74 0d                	je     c001a99c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a98f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a997:	e9 c0 00 00 00       	jmp    c001aa5c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a99c:	83 ec 08             	sub    esp,0x8
c001a99f:	68 76 49 02 c0       	push   0xc0024976
c001a9a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a9a8:	e8 a3 5d fe ff       	call   c0000750 <strcmp>
c001a9ad:	83 c4 10             	add    esp,0x10
c001a9b0:	85 c0                	test   eax,eax
c001a9b2:	0f 94 c0             	sete   al
c001a9b5:	0f b6 c0             	movzx  eax,al
c001a9b8:	85 c0                	test   eax,eax
c001a9ba:	74 10                	je     c001a9cc <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001a9bc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a9c4:	e9 93 00 00 00       	jmp    c001aa5c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a9c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9cc:	83 ec 08             	sub    esp,0x8
c001a9cf:	68 7c 49 02 c0       	push   0xc002497c
c001a9d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a9d8:	e8 73 5d fe ff       	call   c0000750 <strcmp>
c001a9dd:	83 c4 10             	add    esp,0x10
c001a9e0:	85 c0                	test   eax,eax
c001a9e2:	0f 94 c0             	sete   al
c001a9e5:	0f b6 c0             	movzx  eax,al
c001a9e8:	85 c0                	test   eax,eax
c001a9ea:	74 0c                	je     c001a9f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001a9ec:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a9f4:	eb 66                	jmp    c001aa5c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a9f6:	66 90                	xchg   ax,ax
c001a9f8:	83 ec 08             	sub    esp,0x8
c001a9fb:	68 bc 1b 02 c0       	push   0xc0021bbc
c001aa00:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aa04:	e8 47 5d fe ff       	call   c0000750 <strcmp>
c001aa09:	83 c4 10             	add    esp,0x10
c001aa0c:	85 c0                	test   eax,eax
c001aa0e:	0f 94 c0             	sete   al
c001aa11:	0f b6 c0             	movzx  eax,al
c001aa14:	85 c0                	test   eax,eax
c001aa16:	74 0c                	je     c001aa24 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001aa18:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001aa20:	eb 3a                	jmp    c001aa5c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001aa22:	66 90                	xchg   ax,ax
c001aa24:	83 ec 08             	sub    esp,0x8
c001aa27:	68 82 49 02 c0       	push   0xc0024982
c001aa2c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aa30:	e8 1b 5d fe ff       	call   c0000750 <strcmp>
c001aa35:	83 c4 10             	add    esp,0x10
c001aa38:	85 c0                	test   eax,eax
c001aa3a:	0f 94 c0             	sete   al
c001aa3d:	0f b6 c0             	movzx  eax,al
c001aa40:	85 c0                	test   eax,eax
c001aa42:	74 0c                	je     c001aa50 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001aa44:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001aa4c:	eb 0e                	jmp    c001aa5c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001aa4e:	66 90                	xchg   ax,ax
c001aa50:	b8 08 00 00 00       	mov    eax,0x8
c001aa55:	e9 ea 00 00 00       	jmp    c001ab44 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001aa5a:	66 90                	xchg   ax,ax
c001aa5c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001aa63:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001aa68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa6c:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001aa73:	83 f8 ff             	cmp    eax,0xffffffff
c001aa76:	75 34                	jne    c001aaac <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001aa78:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001aa7c:	88 c2                	mov    dl,al
c001aa7e:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001aa83:	01 d0                	add    eax,edx
c001aa85:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001aa89:	8b 15 20 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db20
c001aa8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa93:	89 14 85 40 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24c0],edx
c001aa9a:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001aa9f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aaa3:	89 14 85 c0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2440],edx
c001aaaa:	eb 18                	jmp    c001aac4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001aaac:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001aab0:	88 c2                	mov    dl,al
c001aab2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aab6:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001aabd:	01 d0                	add    eax,edx
c001aabf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001aac3:	90                   	nop
c001aac4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aac8:	88 04 24             	mov    BYTE PTR [esp],al
c001aacb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001aacf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aad3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001aadb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001aae0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aae8:	83 ec 0c             	sub    esp,0xc
c001aaeb:	68 00 20 00 00       	push   0x2000
c001aaf0:	e8 2a 4a ff ff       	call   c000f51f <malloc>
c001aaf5:	83 c4 10             	add    esp,0x10
c001aaf8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aafc:	68 00 20 00 00       	push   0x2000
c001ab01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab05:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab09:	50                   	push   eax
c001ab0a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ab0e:	50                   	push   eax
c001ab0f:	e8 f2 aa fe ff       	call   c0005606 <f_mkfs>
c001ab14:	83 c4 10             	add    esp,0x10
c001ab17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ab20:	75 0a                	jne    c001ab2c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001ab22:	b8 00 00 00 00       	mov    eax,0x0
c001ab27:	eb 1b                	jmp    c001ab44 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ab29:	8d 76 00             	lea    esi,[esi+0x0]
c001ab2c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ab31:	75 09                	jne    c001ab3c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001ab33:	b8 09 00 00 00       	mov    eax,0x9
c001ab38:	eb 0a                	jmp    c001ab44 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ab3a:	66 90                	xchg   ax,ax
c001ab3c:	b8 01 00 00 00       	mov    eax,0x1
c001ab41:	8d 76 00             	lea    esi,[esi+0x0]
c001ab44:	83 c4 2c             	add    esp,0x2c
c001ab47:	c3                   	ret    

c001ab48 <FAT::tryMount(LogicalDisk*, int)>:
c001ab48:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001ab4e:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001ab53:	83 f8 14             	cmp    eax,0x14
c001ab56:	75 18                	jne    c001ab70 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001ab58:	83 ec 0c             	sub    esp,0xc
c001ab5b:	68 88 49 02 c0       	push   0xc0024988
c001ab60:	e8 01 4d ff ff       	call   c000f866 <KePanic(char const*)>
c001ab65:	83 c4 10             	add    esp,0x10
c001ab68:	b0 00                	mov    al,0x0
c001ab6a:	e9 ed 01 00 00       	jmp    c001ad5c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ab6f:	90                   	nop
c001ab70:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001ab77:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ab7d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ab83:	3d 00 02 00 00       	cmp    eax,0x200
c001ab88:	74 0a                	je     c001ab94 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001ab8a:	b0 00                	mov    al,0x0
c001ab8c:	e9 cb 01 00 00       	jmp    c001ad5c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ab91:	8d 76 00             	lea    esi,[esi+0x0]
c001ab94:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001ab9c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001aba3:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001abaa:	83 f8 ff             	cmp    eax,0xffffffff
c001abad:	74 09                	je     c001abb8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001abaf:	b0 01                	mov    al,0x1
c001abb1:	e9 a6 01 00 00       	jmp    c001ad5c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001abb6:	66 90                	xchg   ax,ax
c001abb8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001abc2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001abca:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001abd1:	88 c2                	mov    dl,al
c001abd3:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001abd8:	01 d0                	add    eax,edx
c001abda:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001abe1:	8b 15 20 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db20
c001abe7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001abee:	89 14 85 40 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24c0],edx
c001abf5:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001abfa:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001ac01:	89 14 85 c0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2440],edx
c001ac08:	83 ec 0c             	sub    esp,0xc
c001ac0b:	68 34 02 00 00       	push   0x234
c001ac10:	e8 0a 49 ff ff       	call   c000f51f <malloc>
c001ac15:	83 c4 10             	add    esp,0x10
c001ac18:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001ac1f:	83 ec 04             	sub    esp,0x4
c001ac22:	6a 00                	push   0x0
c001ac24:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001ac2b:	50                   	push   eax
c001ac2c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001ac33:	e8 a9 91 fe ff       	call   c0003de1 <f_mount>
c001ac38:	83 c4 10             	add    esp,0x10
c001ac3b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001ac42:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001ac4a:	74 1c                	je     c001ac68 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001ac4c:	83 ec 0c             	sub    esp,0xc
c001ac4f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001ac56:	e8 e4 48 ff ff       	call   c000f53f <rfree>
c001ac5b:	83 c4 10             	add    esp,0x10
c001ac5e:	b0 00                	mov    al,0x0
c001ac60:	e9 f7 00 00 00       	jmp    c001ad5c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ac65:	8d 76 00             	lea    esi,[esi+0x0]
c001ac68:	83 ec 04             	sub    esp,0x4
c001ac6b:	68 00 01 00 00       	push   0x100
c001ac70:	6a 00                	push   0x0
c001ac72:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001ac79:	50                   	push   eax
c001ac7a:	e8 71 58 fe ff       	call   c00004f0 <memset>
c001ac7f:	83 c4 10             	add    esp,0x10
c001ac82:	83 ec 08             	sub    esp,0x8
c001ac85:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001ac8c:	50                   	push   eax
c001ac8d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001ac94:	50                   	push   eax
c001ac95:	e8 a6 5b fe ff       	call   c0000840 <strcat>
c001ac9a:	83 c4 10             	add    esp,0x10
c001ac9d:	83 ec 08             	sub    esp,0x8
c001aca0:	68 96 49 02 c0       	push   0xc0024996
c001aca5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001acac:	50                   	push   eax
c001acad:	e8 8e 5b fe ff       	call   c0000840 <strcat>
c001acb2:	83 c4 10             	add    esp,0x10
c001acb5:	83 ec 04             	sub    esp,0x4
c001acb8:	6a 01                	push   0x1
c001acba:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001acc1:	50                   	push   eax
c001acc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acc6:	50                   	push   eax
c001acc7:	e8 77 91 fe ff       	call   c0003e43 <f_open>
c001accc:	83 c4 10             	add    esp,0x10
c001accf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001acd6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001acdd:	85 c0                	test   eax,eax
c001acdf:	74 0b                	je     c001acec <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001ace1:	78 31                	js     c001ad14 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001ace3:	83 e8 04             	sub    eax,0x4
c001ace6:	83 f8 01             	cmp    eax,0x1
c001ace9:	77 29                	ja     c001ad14 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aceb:	90                   	nop
c001acec:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001acf4:	83 ec 0c             	sub    esp,0xc
c001acf7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acfb:	50                   	push   eax
c001acfc:	e8 11 99 fe ff       	call   c0004612 <f_close>
c001ad01:	83 c4 10             	add    esp,0x10
c001ad04:	90                   	nop
c001ad05:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001ad0d:	85 c0                	test   eax,eax
c001ad0f:	74 43                	je     c001ad54 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001ad11:	eb 31                	jmp    c001ad44 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001ad13:	90                   	nop
c001ad14:	83 ec 0c             	sub    esp,0xc
c001ad17:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001ad1e:	e8 1c 48 ff ff       	call   c000f53f <rfree>
c001ad23:	83 c4 10             	add    esp,0x10
c001ad26:	83 ec 04             	sub    esp,0x4
c001ad29:	6a 00                	push   0x0
c001ad2b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001ad32:	50                   	push   eax
c001ad33:	6a 00                	push   0x0
c001ad35:	e8 a7 90 fe ff       	call   c0003de1 <f_mount>
c001ad3a:	83 c4 10             	add    esp,0x10
c001ad3d:	b0 00                	mov    al,0x0
c001ad3f:	eb 1b                	jmp    c001ad5c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ad41:	8d 76 00             	lea    esi,[esi+0x0]
c001ad44:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c001ad49:	83 c0 01             	add    eax,0x1
c001ad4c:	a3 20 db 02 c0       	mov    ds:0xc002db20,eax
c001ad51:	8d 76 00             	lea    esi,[esi+0x0]
c001ad54:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001ad5b:	90                   	nop
c001ad5c:	81 c4 4c 03 00 00    	add    esp,0x34c
c001ad62:	c3                   	ret    
c001ad63:	90                   	nop

c001ad64 <FAT::allocateSwapfile(char const*, int)>:
c001ad64:	55                   	push   ebp
c001ad65:	57                   	push   edi
c001ad66:	56                   	push   esi
c001ad67:	53                   	push   ebx
c001ad68:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001ad6e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ad79:	83 ec 0c             	sub    esp,0xc
c001ad7c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ad83:	e8 97 47 ff ff       	call   c000f51f <malloc>
c001ad88:	83 c4 10             	add    esp,0x10
c001ad8b:	89 c7                	mov    edi,eax
c001ad8d:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001ad92:	83 ec 04             	sub    esp,0x4
c001ad95:	50                   	push   eax
c001ad96:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ad9d:	57                   	push   edi
c001ad9e:	e8 8f d3 fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001ada3:	83 c4 10             	add    esp,0x10
c001ada6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001adad:	83 ec 04             	sub    esp,0x4
c001adb0:	8d 44 24 13          	lea    eax,[esp+0x13]
c001adb4:	50                   	push   eax
c001adb5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001adb9:	50                   	push   eax
c001adba:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001adc1:	e8 8c d6 fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001adc6:	83 c4 10             	add    esp,0x10
c001adc9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001add0:	c1 e0 14             	shl    eax,0x14
c001add3:	89 c7                	mov    edi,eax
c001add5:	89 c5                	mov    ebp,eax
c001add7:	c1 fd 1f             	sar    ebp,0x1f
c001adda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adde:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ade2:	89 f9                	mov    ecx,edi
c001ade4:	31 c1                	xor    ecx,eax
c001ade6:	89 cb                	mov    ebx,ecx
c001ade8:	89 e9                	mov    ecx,ebp
c001adea:	31 d1                	xor    ecx,edx
c001adec:	89 ce                	mov    esi,ecx
c001adee:	89 f0                	mov    eax,esi
c001adf0:	09 d8                	or     eax,ebx
c001adf2:	0f 84 9c 00 00 00    	je     c001ae94 <FAT::allocateSwapfile(char const*, int)+0x130>
c001adf8:	83 ec 0c             	sub    esp,0xc
c001adfb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ae02:	e8 17 d5 fe ff       	call   c000831e <File::unlink()>
c001ae07:	83 c4 10             	add    esp,0x10
c001ae0a:	83 ec 08             	sub    esp,0x8
c001ae0d:	6a 12                	push   0x12
c001ae0f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ae16:	e8 35 d3 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001ae1b:	83 c4 10             	add    esp,0x10
c001ae1e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ae25:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ae2b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ae32:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ae39:	c1 e0 14             	shl    eax,0x14
c001ae3c:	83 ec 04             	sub    esp,0x4
c001ae3f:	6a 01                	push   0x1
c001ae41:	50                   	push   eax
c001ae42:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001ae49:	e8 4b a6 fe ff       	call   c0005499 <f_expand>
c001ae4e:	83 c4 10             	add    esp,0x10
c001ae51:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ae58:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae5a:	83 c0 10             	add    eax,0x10
c001ae5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae5f:	83 ec 0c             	sub    esp,0xc
c001ae62:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae66:	52                   	push   edx
c001ae67:	8d 54 24 30          	lea    edx,[esp+0x30]
c001ae6b:	52                   	push   edx
c001ae6c:	6a 00                	push   0x0
c001ae6e:	68 00 04 00 00       	push   0x400
c001ae73:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ae7a:	ff d0                	call   eax
c001ae7c:	83 c4 20             	add    esp,0x20
c001ae7f:	83 ec 0c             	sub    esp,0xc
c001ae82:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ae89:	e8 20 d3 fe ff       	call   c00081ae <File::close()>
c001ae8e:	83 c4 10             	add    esp,0x10
c001ae91:	8d 76 00             	lea    esi,[esi+0x0]
c001ae94:	83 ec 08             	sub    esp,0x8
c001ae97:	6a 01                	push   0x1
c001ae99:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aea0:	e8 ab d2 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001aea5:	83 c4 10             	add    esp,0x10
c001aea8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aeaf:	8b 00                	mov    eax,DWORD PTR [eax]
c001aeb1:	83 c0 0c             	add    eax,0xc
c001aeb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001aeb6:	83 ec 0c             	sub    esp,0xc
c001aeb9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aebd:	52                   	push   edx
c001aebe:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001aec2:	52                   	push   edx
c001aec3:	6a 00                	push   0x0
c001aec5:	6a 04                	push   0x4
c001aec7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001aece:	ff d0                	call   eax
c001aed0:	83 c4 20             	add    esp,0x20
c001aed3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aeda:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001aee0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001aee7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001aeee:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001aef1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001aef8:	83 ec 0c             	sub    esp,0xc
c001aefb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001af02:	e8 a7 d2 fe ff       	call   c00081ae <File::close()>
c001af07:	83 c4 10             	add    esp,0x10
c001af0a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001af11:	ba 00 00 00 00       	mov    edx,0x0
c001af16:	81 c4 3c 04 00 00    	add    esp,0x43c
c001af1c:	5b                   	pop    ebx
c001af1d:	5e                   	pop    esi
c001af1e:	5f                   	pop    edi
c001af1f:	5d                   	pop    ebp
c001af20:	c3                   	ret    
c001af21:	90                   	nop
c001af22:	66 90                	xchg   ax,ax

c001af24 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001af24:	57                   	push   edi
c001af25:	56                   	push   esi
c001af26:	53                   	push   ebx
c001af27:	81 ec 50 02 00 00    	sub    esp,0x250
c001af2d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001af35:	74 0d                	je     c001af44 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001af37:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001af3f:	75 0f                	jne    c001af50 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001af41:	8d 76 00             	lea    esi,[esi+0x0]
c001af44:	b8 04 00 00 00       	mov    eax,0x4
c001af49:	e9 3a 01 00 00       	jmp    c001b088 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001af4e:	66 90                	xchg   ax,ax
c001af50:	83 ec 08             	sub    esp,0x8
c001af53:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001af5a:	50                   	push   eax
c001af5b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001af62:	e8 78 99 fe ff       	call   c00048df <f_readdir>
c001af67:	83 c4 10             	add    esp,0x10
c001af6a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001af71:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001af78:	83 ec 0c             	sub    esp,0xc
c001af7b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001af82:	83 c0 16             	add    eax,0x16
c001af85:	50                   	push   eax
c001af86:	e8 e5 55 fe ff       	call   c0000570 <strlen>
c001af8b:	83 c4 10             	add    esp,0x10
c001af8e:	ba 00 00 00 00       	mov    edx,0x0
c001af93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af97:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001af9b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001afa2:	0f b6 c0             	movzx  eax,al
c001afa5:	83 e0 10             	and    eax,0x10
c001afa8:	74 0a                	je     c001afb4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001afaa:	b8 02 00 00 00       	mov    eax,0x2
c001afaf:	eb 0b                	jmp    c001afbc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001afb1:	8d 76 00             	lea    esi,[esi+0x0]
c001afb4:	b8 01 00 00 00       	mov    eax,0x1
c001afb9:	8d 76 00             	lea    esi,[esi+0x0]
c001afbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001afc0:	83 ec 08             	sub    esp,0x8
c001afc3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001afca:	83 c0 16             	add    eax,0x16
c001afcd:	50                   	push   eax
c001afce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001afd2:	83 c0 10             	add    eax,0x10
c001afd5:	50                   	push   eax
c001afd6:	e8 65 56 fe ff       	call   c0000640 <strcpy>
c001afdb:	83 c4 10             	add    esp,0x10
c001afde:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001afe5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001afec:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aff0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001aff7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001affe:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b005:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b00c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b013:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b01a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b021:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b028:	89 c6                	mov    esi,eax
c001b02a:	89 d7                	mov    edi,edx
c001b02c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b02e:	89 c8                	mov    eax,ecx
c001b030:	89 fa                	mov    edx,edi
c001b032:	89 f3                	mov    ebx,esi
c001b034:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b03b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b042:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b049:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b050:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b056:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b05d:	0f be c0             	movsx  eax,al
c001b060:	85 c0                	test   eax,eax
c001b062:	75 08                	jne    c001b06c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001b064:	b8 07 00 00 00       	mov    eax,0x7
c001b069:	eb 1d                	jmp    c001b088 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b06b:	90                   	nop
c001b06c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b073:	85 c0                	test   eax,eax
c001b075:	75 09                	jne    c001b080 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001b077:	b8 00 00 00 00       	mov    eax,0x0
c001b07c:	eb 0a                	jmp    c001b088 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b07e:	66 90                	xchg   ax,ax
c001b080:	b8 01 00 00 00       	mov    eax,0x1
c001b085:	8d 76 00             	lea    esi,[esi+0x0]
c001b088:	81 c4 50 02 00 00    	add    esp,0x250
c001b08e:	5b                   	pop    ebx
c001b08f:	5e                   	pop    esi
c001b090:	5f                   	pop    edi
c001b091:	c3                   	ret    
c001b092:	66 90                	xchg   ax,ax

c001b094 <FAT::read(void*, unsigned long, void*, int*)>:
c001b094:	83 ec 1c             	sub    esp,0x1c
c001b097:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b09c:	74 0a                	je     c001b0a8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b09e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b0a3:	75 0b                	jne    c001b0b0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b0a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b0a8:	b8 04 00 00 00       	mov    eax,0x4
c001b0ad:	eb 41                	jmp    c001b0f0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b0af:	90                   	nop
c001b0b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b0b4:	50                   	push   eax
c001b0b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b0bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b0c1:	e8 40 90 fe ff       	call   c0004106 <f_read>
c001b0c6:	83 c4 10             	add    esp,0x10
c001b0c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b0cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0d1:	89 c2                	mov    edx,eax
c001b0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b0d7:	89 10                	mov    DWORD PTR [eax],edx
c001b0d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0dd:	85 c0                	test   eax,eax
c001b0df:	75 07                	jne    c001b0e8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b0e1:	b8 00 00 00 00       	mov    eax,0x0
c001b0e6:	eb 08                	jmp    c001b0f0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b0e8:	b8 01 00 00 00       	mov    eax,0x1
c001b0ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b0f0:	83 c4 1c             	add    esp,0x1c
c001b0f3:	c3                   	ret    

c001b0f4 <FAT::write(void*, unsigned long, void*, int*)>:
c001b0f4:	83 ec 1c             	sub    esp,0x1c
c001b0f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b0fc:	74 0a                	je     c001b108 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b0fe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b103:	75 0b                	jne    c001b110 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b105:	8d 76 00             	lea    esi,[esi+0x0]
c001b108:	b8 04 00 00 00       	mov    eax,0x4
c001b10d:	eb 41                	jmp    c001b150 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b10f:	90                   	nop
c001b110:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b114:	50                   	push   eax
c001b115:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b119:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b11d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b121:	e8 df 91 fe ff       	call   c0004305 <f_write>
c001b126:	83 c4 10             	add    esp,0x10
c001b129:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b12d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b131:	89 c2                	mov    edx,eax
c001b133:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b137:	89 10                	mov    DWORD PTR [eax],edx
c001b139:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b13d:	85 c0                	test   eax,eax
c001b13f:	75 07                	jne    c001b148 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b141:	b8 00 00 00 00       	mov    eax,0x0
c001b146:	eb 08                	jmp    c001b150 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b148:	b8 01 00 00 00       	mov    eax,0x1
c001b14d:	8d 76 00             	lea    esi,[esi+0x0]
c001b150:	83 c4 1c             	add    esp,0x1c
c001b153:	c3                   	ret    

c001b154 <FAT::close(void*)>:
c001b154:	83 ec 1c             	sub    esp,0x1c
c001b157:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b15c:	75 0a                	jne    c001b168 <FAT::close(void*)+0x14>
c001b15e:	b8 04 00 00 00       	mov    eax,0x4
c001b163:	eb 3f                	jmp    c001b1a4 <FAT::close(void*)+0x50>
c001b165:	8d 76 00             	lea    esi,[esi+0x0]
c001b168:	83 ec 0c             	sub    esp,0xc
c001b16b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b16f:	e8 9e 94 fe ff       	call   c0004612 <f_close>
c001b174:	83 c4 10             	add    esp,0x10
c001b177:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b17b:	83 ec 0c             	sub    esp,0xc
c001b17e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b182:	e8 a8 43 ff ff       	call   c000f52f <free>
c001b187:	83 c4 10             	add    esp,0x10
c001b18a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b18e:	85 c0                	test   eax,eax
c001b190:	75 0a                	jne    c001b19c <FAT::close(void*)+0x48>
c001b192:	b8 00 00 00 00       	mov    eax,0x0
c001b197:	eb 0b                	jmp    c001b1a4 <FAT::close(void*)+0x50>
c001b199:	8d 76 00             	lea    esi,[esi+0x0]
c001b19c:	b8 01 00 00 00       	mov    eax,0x1
c001b1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b1a4:	83 c4 1c             	add    esp,0x1c
c001b1a7:	c3                   	ret    

c001b1a8 <FAT::closeDir(void*)>:
c001b1a8:	83 ec 1c             	sub    esp,0x1c
c001b1ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b1b0:	75 0a                	jne    c001b1bc <FAT::closeDir(void*)+0x14>
c001b1b2:	b8 04 00 00 00       	mov    eax,0x4
c001b1b7:	eb 3f                	jmp    c001b1f8 <FAT::closeDir(void*)+0x50>
c001b1b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1bc:	83 ec 0c             	sub    esp,0xc
c001b1bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b1c3:	e8 f5 96 fe ff       	call   c00048bd <f_closedir>
c001b1c8:	83 c4 10             	add    esp,0x10
c001b1cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b1cf:	83 ec 0c             	sub    esp,0xc
c001b1d2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b1d6:	e8 54 43 ff ff       	call   c000f52f <free>
c001b1db:	83 c4 10             	add    esp,0x10
c001b1de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1e2:	85 c0                	test   eax,eax
c001b1e4:	75 0a                	jne    c001b1f0 <FAT::closeDir(void*)+0x48>
c001b1e6:	b8 00 00 00 00       	mov    eax,0x0
c001b1eb:	eb 0b                	jmp    c001b1f8 <FAT::closeDir(void*)+0x50>
c001b1ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b1f0:	b8 01 00 00 00       	mov    eax,0x1
c001b1f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1f8:	83 c4 1c             	add    esp,0x1c
c001b1fb:	c3                   	ret    

c001b1fc <FAT::truncate(void*, unsigned long long)>:
c001b1fc:	83 ec 2c             	sub    esp,0x2c
c001b1ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b203:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b207:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b20b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b20f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b214:	75 0a                	jne    c001b220 <FAT::truncate(void*, unsigned long long)+0x24>
c001b216:	b8 04 00 00 00       	mov    eax,0x4
c001b21b:	eb 47                	jmp    c001b264 <FAT::truncate(void*, unsigned long long)+0x68>
c001b21d:	8d 76 00             	lea    esi,[esi+0x0]
c001b220:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b224:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b227:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b22b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b233:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b237:	83 ec 08             	sub    esp,0x8
c001b23a:	50                   	push   eax
c001b23b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b23f:	e8 fd 93 fe ff       	call   c0004641 <f_lseek>
c001b244:	83 c4 10             	add    esp,0x10
c001b247:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b24b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b24f:	85 c0                	test   eax,eax
c001b251:	75 09                	jne    c001b25c <FAT::truncate(void*, unsigned long long)+0x60>
c001b253:	b8 00 00 00 00       	mov    eax,0x0
c001b258:	eb 0a                	jmp    c001b264 <FAT::truncate(void*, unsigned long long)+0x68>
c001b25a:	66 90                	xchg   ax,ax
c001b25c:	b8 01 00 00 00       	mov    eax,0x1
c001b261:	8d 76 00             	lea    esi,[esi+0x0]
c001b264:	83 c4 2c             	add    esp,0x2c
c001b267:	c3                   	ret    

c001b268 <FAT::seek(void*, unsigned long long)>:
c001b268:	83 ec 2c             	sub    esp,0x2c
c001b26b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b26f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b273:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b277:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b27b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b280:	75 0a                	jne    c001b28c <FAT::seek(void*, unsigned long long)+0x24>
c001b282:	b8 04 00 00 00       	mov    eax,0x4
c001b287:	eb 33                	jmp    c001b2bc <FAT::seek(void*, unsigned long long)+0x54>
c001b289:	8d 76 00             	lea    esi,[esi+0x0]
c001b28c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b290:	83 ec 08             	sub    esp,0x8
c001b293:	50                   	push   eax
c001b294:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b298:	e8 a4 93 fe ff       	call   c0004641 <f_lseek>
c001b29d:	83 c4 10             	add    esp,0x10
c001b2a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b2a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2a8:	85 c0                	test   eax,eax
c001b2aa:	75 08                	jne    c001b2b4 <FAT::seek(void*, unsigned long long)+0x4c>
c001b2ac:	b8 00 00 00 00       	mov    eax,0x0
c001b2b1:	eb 09                	jmp    c001b2bc <FAT::seek(void*, unsigned long long)+0x54>
c001b2b3:	90                   	nop
c001b2b4:	b8 01 00 00 00       	mov    eax,0x1
c001b2b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2bc:	83 c4 2c             	add    esp,0x2c
c001b2bf:	c3                   	ret    

c001b2c0 <fatWrapperReadDisk>:
c001b2c0:	53                   	push   ebx
c001b2c1:	83 ec 18             	sub    esp,0x18
c001b2c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b2cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b2d1:	8b 0c 85 e0 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5520]
c001b2d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b2dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b2e0:	ba 00 00 00 00       	mov    edx,0x0
c001b2e5:	83 ec 0c             	sub    esp,0xc
c001b2e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b2ec:	53                   	push   ebx
c001b2ed:	52                   	push   edx
c001b2ee:	50                   	push   eax
c001b2ef:	51                   	push   ecx
c001b2f0:	e8 0f f0 fe ff       	call   c000a304 <LogicalDisk::read(unsigned long long, int, void*)>
c001b2f5:	83 c4 20             	add    esp,0x20
c001b2f8:	83 c4 18             	add    esp,0x18
c001b2fb:	5b                   	pop    ebx
c001b2fc:	c3                   	ret    
c001b2fd:	8d 76 00             	lea    esi,[esi+0x0]

c001b300 <fatWrapperWriteDisk>:
c001b300:	53                   	push   ebx
c001b301:	83 ec 18             	sub    esp,0x18
c001b304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b308:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b30c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b311:	8b 0c 85 e0 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5520]
c001b318:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b31c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b320:	ba 00 00 00 00       	mov    edx,0x0
c001b325:	83 ec 0c             	sub    esp,0xc
c001b328:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b32c:	53                   	push   ebx
c001b32d:	52                   	push   edx
c001b32e:	50                   	push   eax
c001b32f:	51                   	push   ecx
c001b330:	e8 3b f0 fe ff       	call   c000a370 <LogicalDisk::write(unsigned long long, int, void*)>
c001b335:	83 c4 20             	add    esp,0x20
c001b338:	83 c4 18             	add    esp,0x18
c001b33b:	5b                   	pop    ebx
c001b33c:	c3                   	ret    
c001b33d:	8d 76 00             	lea    esi,[esi+0x0]

c001b340 <fatWrapperIoctl>:
c001b340:	53                   	push   ebx
c001b341:	83 ec 28             	sub    esp,0x28
c001b344:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b348:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b34c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b350:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b354:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b359:	83 f8 02             	cmp    eax,0x2
c001b35c:	75 32                	jne    c001b390 <fatWrapperIoctl+0x50>
c001b35e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b362:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b366:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b36b:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c001b372:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b378:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b37e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b382:	66 89 02             	mov    WORD PTR [edx],ax
c001b385:	b8 00 00 00 00       	mov    eax,0x0
c001b38a:	e9 c5 00 00 00       	jmp    c001b454 <fatWrapperIoctl+0x114>
c001b38f:	90                   	nop
c001b390:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b395:	83 f8 01             	cmp    eax,0x1
c001b398:	75 6a                	jne    c001b404 <fatWrapperIoctl+0xc4>
c001b39a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b39e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b3a2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b3a7:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c001b3ae:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b3b4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b3ba:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b3c0:	89 c8                	mov    eax,ecx
c001b3c2:	89 da                	mov    edx,ebx
c001b3c4:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b3c8:	c1 e0 0a             	shl    eax,0xa
c001b3cb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b3d0:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c001b3d7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b3dd:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b3e3:	89 cb                	mov    ebx,ecx
c001b3e5:	c1 fb 1f             	sar    ebx,0x1f
c001b3e8:	53                   	push   ebx
c001b3e9:	51                   	push   ecx
c001b3ea:	52                   	push   edx
c001b3eb:	50                   	push   eax
c001b3ec:	e8 c3 59 00 00       	call   c0020db4 <__udivdi3>
c001b3f1:	83 c4 10             	add    esp,0x10
c001b3f4:	89 c2                	mov    edx,eax
c001b3f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3fa:	89 10                	mov    DWORD PTR [eax],edx
c001b3fc:	b8 00 00 00 00       	mov    eax,0x0
c001b401:	eb 51                	jmp    c001b454 <fatWrapperIoctl+0x114>
c001b403:	90                   	nop
c001b404:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b409:	85 c0                	test   eax,eax
c001b40b:	75 07                	jne    c001b414 <fatWrapperIoctl+0xd4>
c001b40d:	b8 00 00 00 00       	mov    eax,0x0
c001b412:	eb 40                	jmp    c001b454 <fatWrapperIoctl+0x114>
c001b414:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b419:	83 f8 03             	cmp    eax,0x3
c001b41c:	75 1a                	jne    c001b438 <fatWrapperIoctl+0xf8>
c001b41e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b422:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b426:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b42a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b430:	b8 00 00 00 00       	mov    eax,0x0
c001b435:	eb 1d                	jmp    c001b454 <fatWrapperIoctl+0x114>
c001b437:	90                   	nop
c001b438:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b43d:	83 f8 04             	cmp    eax,0x4
c001b440:	75 0a                	jne    c001b44c <fatWrapperIoctl+0x10c>
c001b442:	b8 00 00 00 00       	mov    eax,0x0
c001b447:	eb 0b                	jmp    c001b454 <fatWrapperIoctl+0x114>
c001b449:	8d 76 00             	lea    esi,[esi+0x0]
c001b44c:	b8 04 00 00 00       	mov    eax,0x4
c001b451:	8d 76 00             	lea    esi,[esi+0x0]
c001b454:	83 c4 28             	add    esp,0x28
c001b457:	5b                   	pop    ebx
c001b458:	c3                   	ret    
c001b459:	90                   	nop
c001b45a:	66 90                	xchg   ax,ax

c001b45c <FAT::FAT()>:
c001b45c:	83 ec 1c             	sub    esp,0x1c
c001b45f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b463:	83 ec 0c             	sub    esp,0xc
c001b466:	50                   	push   eax
c001b467:	e8 04 c9 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001b46c:	83 c4 10             	add    esp,0x10
c001b46f:	ba ac 49 02 c0       	mov    edx,0xc00249ac
c001b474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b478:	89 10                	mov    DWORD PTR [eax],edx
c001b47a:	c7 05 20 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db20,0x0
c001b484:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b48c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b491:	7f 19                	jg     c001b4ac <FAT::FAT()+0x50>
c001b493:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b497:	c7 04 85 40 db 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd24c0],0xffffffff
c001b4a2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b4a7:	eb e3                	jmp    c001b48c <FAT::FAT()+0x30>
c001b4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4ac:	90                   	nop
c001b4ad:	83 c4 1c             	add    esp,0x1c
c001b4b0:	c3                   	ret    
c001b4b1:	90                   	nop
c001b4b2:	66 90                	xchg   ax,ax

c001b4b4 <FAT::fixFilepath(char*)>:
c001b4b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4b8:	8a 00                	mov    al,BYTE PTR [eax]
c001b4ba:	0f be c0             	movsx  eax,al
c001b4bd:	83 f8 40             	cmp    eax,0x40
c001b4c0:	7e 2e                	jle    c001b4f0 <FAT::fixFilepath(char*)+0x3c>
c001b4c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4c6:	8a 00                	mov    al,BYTE PTR [eax]
c001b4c8:	83 e8 41             	sub    eax,0x41
c001b4cb:	88 c2                	mov    dl,al
c001b4cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4d1:	88 10                	mov    BYTE PTR [eax],dl
c001b4d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4d7:	8a 00                	mov    al,BYTE PTR [eax]
c001b4d9:	0f be c0             	movsx  eax,al
c001b4dc:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c001b4e3:	83 c0 30             	add    eax,0x30
c001b4e6:	88 c2                	mov    dl,al
c001b4e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4ec:	88 10                	mov    BYTE PTR [eax],dl
c001b4ee:	66 90                	xchg   ax,ax
c001b4f0:	90                   	nop
c001b4f1:	c3                   	ret    
c001b4f2:	66 90                	xchg   ax,ax

c001b4f4 <FAT::open(char const*, void**, FileOpenMode)>:
c001b4f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b4fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b502:	74 0c                	je     c001b510 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b504:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b50c:	75 0e                	jne    c001b51c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b50e:	66 90                	xchg   ax,ax
c001b510:	b8 04 00 00 00       	mov    eax,0x4
c001b515:	e9 46 01 00 00       	jmp    c001b660 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001b51a:	66 90                	xchg   ax,ax
c001b51c:	83 ec 08             	sub    esp,0x8
c001b51f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b526:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b52a:	50                   	push   eax
c001b52b:	e8 10 51 fe ff       	call   c0000640 <strcpy>
c001b530:	83 c4 10             	add    esp,0x10
c001b533:	83 ec 08             	sub    esp,0x8
c001b536:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b53a:	50                   	push   eax
c001b53b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b542:	e8 6d ff ff ff       	call   c001b4b4 <FAT::fixFilepath(char*)>
c001b547:	83 c4 10             	add    esp,0x10
c001b54a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b552:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b559:	83 e0 01             	and    eax,0x1
c001b55c:	74 12                	je     c001b570 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001b55e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b565:	83 c8 01             	or     eax,0x1
c001b568:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b56f:	90                   	nop
c001b570:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b577:	83 e0 04             	and    eax,0x4
c001b57a:	74 24                	je     c001b5a0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001b57c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b583:	83 c8 30             	or     eax,0x30
c001b586:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b58d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b594:	83 c8 02             	or     eax,0x2
c001b597:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b59e:	66 90                	xchg   ax,ax
c001b5a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b5a7:	83 e0 02             	and    eax,0x2
c001b5aa:	74 14                	je     c001b5c0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b5ac:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b5b3:	83 c8 02             	or     eax,0x2
c001b5b6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b5bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b5c7:	83 e0 08             	and    eax,0x8
c001b5ca:	74 14                	je     c001b5e0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001b5cc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b5d3:	83 c8 04             	or     eax,0x4
c001b5d6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b5dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b5e7:	83 e0 10             	and    eax,0x10
c001b5ea:	74 14                	je     c001b600 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001b5ec:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b5f3:	83 c8 08             	or     eax,0x8
c001b5f6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b5fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b600:	83 ec 0c             	sub    esp,0xc
c001b603:	68 28 02 00 00       	push   0x228
c001b608:	e8 12 3f ff ff       	call   c000f51f <malloc>
c001b60d:	83 c4 10             	add    esp,0x10
c001b610:	89 c2                	mov    edx,eax
c001b612:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b619:	89 10                	mov    DWORD PTR [eax],edx
c001b61b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b623:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b62a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b62c:	83 ec 04             	sub    esp,0x4
c001b62f:	52                   	push   edx
c001b630:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b634:	52                   	push   edx
c001b635:	50                   	push   eax
c001b636:	e8 08 88 fe ff       	call   c0003e43 <f_open>
c001b63b:	83 c4 10             	add    esp,0x10
c001b63e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b645:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b64d:	74 09                	je     c001b658 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001b64f:	b8 01 00 00 00       	mov    eax,0x1
c001b654:	eb 0a                	jmp    c001b660 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001b656:	66 90                	xchg   ax,ax
c001b658:	b8 00 00 00 00       	mov    eax,0x0
c001b65d:	8d 76 00             	lea    esi,[esi+0x0]
c001b660:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b666:	c3                   	ret    
c001b667:	90                   	nop

c001b668 <FAT::openDir(char const*, void**)>:
c001b668:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b66e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b676:	74 0c                	je     c001b684 <FAT::openDir(char const*, void**)+0x1c>
c001b678:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b680:	75 0e                	jne    c001b690 <FAT::openDir(char const*, void**)+0x28>
c001b682:	66 90                	xchg   ax,ax
c001b684:	b8 04 00 00 00       	mov    eax,0x4
c001b689:	e9 82 00 00 00       	jmp    c001b710 <FAT::openDir(char const*, void**)+0xa8>
c001b68e:	66 90                	xchg   ax,ax
c001b690:	83 ec 08             	sub    esp,0x8
c001b693:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b69a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b69e:	50                   	push   eax
c001b69f:	e8 9c 4f fe ff       	call   c0000640 <strcpy>
c001b6a4:	83 c4 10             	add    esp,0x10
c001b6a7:	83 ec 08             	sub    esp,0x8
c001b6aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b6ae:	50                   	push   eax
c001b6af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b6b6:	e8 f9 fd ff ff       	call   c001b4b4 <FAT::fixFilepath(char*)>
c001b6bb:	83 c4 10             	add    esp,0x10
c001b6be:	83 ec 0c             	sub    esp,0xc
c001b6c1:	6a 30                	push   0x30
c001b6c3:	e8 57 3e ff ff       	call   c000f51f <malloc>
c001b6c8:	83 c4 10             	add    esp,0x10
c001b6cb:	89 c2                	mov    edx,eax
c001b6cd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b6d4:	89 10                	mov    DWORD PTR [eax],edx
c001b6d6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b6dd:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6df:	83 ec 08             	sub    esp,0x8
c001b6e2:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b6e6:	52                   	push   edx
c001b6e7:	50                   	push   eax
c001b6e8:	e8 05 91 fe ff       	call   c00047f2 <f_opendir>
c001b6ed:	83 c4 10             	add    esp,0x10
c001b6f0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b6f7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b6ff:	74 07                	je     c001b708 <FAT::openDir(char const*, void**)+0xa0>
c001b701:	b8 01 00 00 00       	mov    eax,0x1
c001b706:	eb 08                	jmp    c001b710 <FAT::openDir(char const*, void**)+0xa8>
c001b708:	b8 00 00 00 00       	mov    eax,0x0
c001b70d:	8d 76 00             	lea    esi,[esi+0x0]
c001b710:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b716:	c3                   	ret    
c001b717:	90                   	nop

c001b718 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b718:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b71e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b726:	75 0c                	jne    c001b734 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b728:	b8 04 00 00 00       	mov    eax,0x4
c001b72d:	e9 d6 00 00 00       	jmp    c001b808 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b732:	66 90                	xchg   ax,ax
c001b734:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b73c:	75 0a                	jne    c001b748 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b73e:	b8 04 00 00 00       	mov    eax,0x4
c001b743:	e9 c0 00 00 00       	jmp    c001b808 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b748:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b750:	75 0a                	jne    c001b75c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b752:	b8 04 00 00 00       	mov    eax,0x4
c001b757:	e9 ac 00 00 00       	jmp    c001b808 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b75c:	83 ec 08             	sub    esp,0x8
c001b75f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b766:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b76d:	50                   	push   eax
c001b76e:	e8 cd 4e fe ff       	call   c0000640 <strcpy>
c001b773:	83 c4 10             	add    esp,0x10
c001b776:	83 ec 08             	sub    esp,0x8
c001b779:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b780:	50                   	push   eax
c001b781:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b788:	e8 27 fd ff ff       	call   c001b4b4 <FAT::fixFilepath(char*)>
c001b78d:	83 c4 10             	add    esp,0x10
c001b790:	83 ec 08             	sub    esp,0x8
c001b793:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b797:	50                   	push   eax
c001b798:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b79f:	50                   	push   eax
c001b7a0:	e8 cc 91 fe ff       	call   c0004971 <f_stat>
c001b7a5:	83 c4 10             	add    esp,0x10
c001b7a8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b7af:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b7b6:	85 c0                	test   eax,eax
c001b7b8:	74 0a                	je     c001b7c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b7ba:	83 f8 04             	cmp    eax,0x4
c001b7bd:	74 39                	je     c001b7f8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001b7bf:	eb 3f                	jmp    c001b800 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001b7c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b7c8:	0f b6 c0             	movzx  eax,al
c001b7cb:	83 e0 10             	and    eax,0x10
c001b7ce:	0f 95 c2             	setne  dl
c001b7d1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b7d8:	88 10                	mov    BYTE PTR [eax],dl
c001b7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7de:	ba 00 00 00 00       	mov    edx,0x0
c001b7e3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b7ea:	89 01                	mov    DWORD PTR [ecx],eax
c001b7ec:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b7ef:	b8 00 00 00 00       	mov    eax,0x0
c001b7f4:	eb 12                	jmp    c001b808 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b7f6:	66 90                	xchg   ax,ax
c001b7f8:	b8 02 00 00 00       	mov    eax,0x2
c001b7fd:	eb 09                	jmp    c001b808 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b7ff:	90                   	nop
c001b800:	b8 01 00 00 00       	mov    eax,0x1
c001b805:	8d 76 00             	lea    esi,[esi+0x0]
c001b808:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b80e:	c3                   	ret    
c001b80f:	90                   	nop

c001b810 <FAT::unlink(char const*)>:
c001b810:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b816:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b81e:	75 08                	jne    c001b828 <FAT::unlink(char const*)+0x18>
c001b820:	b8 04 00 00 00       	mov    eax,0x4
c001b825:	eb 61                	jmp    c001b888 <FAT::unlink(char const*)+0x78>
c001b827:	90                   	nop
c001b828:	83 ec 08             	sub    esp,0x8
c001b82b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b832:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b836:	50                   	push   eax
c001b837:	e8 04 4e fe ff       	call   c0000640 <strcpy>
c001b83c:	83 c4 10             	add    esp,0x10
c001b83f:	83 ec 08             	sub    esp,0x8
c001b842:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b846:	50                   	push   eax
c001b847:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b84e:	e8 61 fc ff ff       	call   c001b4b4 <FAT::fixFilepath(char*)>
c001b853:	83 c4 10             	add    esp,0x10
c001b856:	83 ec 0c             	sub    esp,0xc
c001b859:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b85d:	50                   	push   eax
c001b85e:	e8 80 93 fe ff       	call   c0004be3 <f_unlink>
c001b863:	83 c4 10             	add    esp,0x10
c001b866:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b86d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b874:	85 c0                	test   eax,eax
c001b876:	75 08                	jne    c001b880 <FAT::unlink(char const*)+0x70>
c001b878:	b8 00 00 00 00       	mov    eax,0x0
c001b87d:	eb 09                	jmp    c001b888 <FAT::unlink(char const*)+0x78>
c001b87f:	90                   	nop
c001b880:	b8 01 00 00 00       	mov    eax,0x1
c001b885:	8d 76 00             	lea    esi,[esi+0x0]
c001b888:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b88e:	c3                   	ret    
c001b88f:	90                   	nop

c001b890 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b890:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b896:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b89d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b8a4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b8a8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b8ac:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b8b4:	75 0a                	jne    c001b8c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b8b6:	b8 04 00 00 00       	mov    eax,0x4
c001b8bb:	e9 7c 01 00 00       	jmp    c001ba3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001b8c0:	83 ec 08             	sub    esp,0x8
c001b8c3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b8ca:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b8ce:	50                   	push   eax
c001b8cf:	e8 6c 4d fe ff       	call   c0000640 <strcpy>
c001b8d4:	83 c4 10             	add    esp,0x10
c001b8d7:	83 ec 08             	sub    esp,0x8
c001b8da:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b8de:	50                   	push   eax
c001b8df:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b8e6:	e8 c9 fb ff ff       	call   c001b4b4 <FAT::fixFilepath(char*)>
c001b8eb:	83 c4 10             	add    esp,0x10
c001b8ee:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b8f6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b8fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b903:	83 e0 01             	and    eax,0x1
c001b906:	74 14                	je     c001b91c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001b908:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b90f:	83 c8 01             	or     eax,0x1
c001b912:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b919:	8d 76 00             	lea    esi,[esi+0x0]
c001b91c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b921:	83 e0 02             	and    eax,0x2
c001b924:	74 12                	je     c001b938 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b926:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b92d:	83 c8 20             	or     eax,0x20
c001b930:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b937:	90                   	nop
c001b938:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b93d:	83 e0 04             	and    eax,0x4
c001b940:	74 12                	je     c001b954 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001b942:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b949:	83 c8 04             	or     eax,0x4
c001b94c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b953:	90                   	nop
c001b954:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b959:	83 e0 08             	and    eax,0x8
c001b95c:	74 12                	je     c001b970 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001b95e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b965:	83 c8 02             	or     eax,0x2
c001b968:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b96f:	90                   	nop
c001b970:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b975:	83 e0 01             	and    eax,0x1
c001b978:	74 12                	je     c001b98c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001b97a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b981:	83 c8 01             	or     eax,0x1
c001b984:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b98b:	90                   	nop
c001b98c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b991:	83 e0 02             	and    eax,0x2
c001b994:	74 12                	je     c001b9a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001b996:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b99d:	83 c8 20             	or     eax,0x20
c001b9a0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b9a7:	90                   	nop
c001b9a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b9ad:	83 e0 04             	and    eax,0x4
c001b9b0:	74 12                	je     c001b9c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001b9b2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b9b9:	83 c8 04             	or     eax,0x4
c001b9bc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b9c3:	90                   	nop
c001b9c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b9c9:	83 e0 08             	and    eax,0x8
c001b9cc:	74 12                	je     c001b9e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001b9ce:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b9d5:	83 c8 02             	or     eax,0x2
c001b9d8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b9df:	90                   	nop
c001b9e0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001b9e7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b9ee:	09 d0                	or     eax,edx
c001b9f0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b9f7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b9ff:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ba07:	83 ec 04             	sub    esp,0x4
c001ba0a:	52                   	push   edx
c001ba0b:	50                   	push   eax
c001ba0c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ba10:	50                   	push   eax
c001ba11:	e8 42 96 fe ff       	call   c0005058 <f_chmod>
c001ba16:	83 c4 10             	add    esp,0x10
c001ba19:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ba20:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ba27:	85 c0                	test   eax,eax
c001ba29:	75 09                	jne    c001ba34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001ba2b:	b8 00 00 00 00       	mov    eax,0x0
c001ba30:	eb 0a                	jmp    c001ba3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001ba32:	66 90                	xchg   ax,ax
c001ba34:	b8 01 00 00 00       	mov    eax,0x1
c001ba39:	8d 76 00             	lea    esi,[esi+0x0]
c001ba3c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ba42:	c3                   	ret    
c001ba43:	90                   	nop

c001ba44 <FAT::rename(char const*, char const*)>:
c001ba44:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ba4a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ba52:	74 0c                	je     c001ba60 <FAT::rename(char const*, char const*)+0x1c>
c001ba54:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ba5c:	75 0e                	jne    c001ba6c <FAT::rename(char const*, char const*)+0x28>
c001ba5e:	66 90                	xchg   ax,ax
c001ba60:	b8 04 00 00 00       	mov    eax,0x4
c001ba65:	e9 9e 00 00 00       	jmp    c001bb08 <FAT::rename(char const*, char const*)+0xc4>
c001ba6a:	66 90                	xchg   ax,ax
c001ba6c:	83 ec 08             	sub    esp,0x8
c001ba6f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ba76:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ba7d:	50                   	push   eax
c001ba7e:	e8 bd 4b fe ff       	call   c0000640 <strcpy>
c001ba83:	83 c4 10             	add    esp,0x10
c001ba86:	83 ec 08             	sub    esp,0x8
c001ba89:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ba90:	50                   	push   eax
c001ba91:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ba98:	e8 17 fa ff ff       	call   c001b4b4 <FAT::fixFilepath(char*)>
c001ba9d:	83 c4 10             	add    esp,0x10
c001baa0:	83 ec 08             	sub    esp,0x8
c001baa3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001baaa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001baae:	50                   	push   eax
c001baaf:	e8 8c 4b fe ff       	call   c0000640 <strcpy>
c001bab4:	83 c4 10             	add    esp,0x10
c001bab7:	83 ec 08             	sub    esp,0x8
c001baba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001babe:	50                   	push   eax
c001babf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bac6:	e8 e9 f9 ff ff       	call   c001b4b4 <FAT::fixFilepath(char*)>
c001bacb:	83 c4 10             	add    esp,0x10
c001bace:	83 ec 08             	sub    esp,0x8
c001bad1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bad5:	50                   	push   eax
c001bad6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001badd:	50                   	push   eax
c001bade:	e8 bd 93 fe ff       	call   c0004ea0 <f_rename>
c001bae3:	83 c4 10             	add    esp,0x10
c001bae6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001baed:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001baf4:	85 c0                	test   eax,eax
c001baf6:	75 08                	jne    c001bb00 <FAT::rename(char const*, char const*)+0xbc>
c001baf8:	b8 00 00 00 00       	mov    eax,0x0
c001bafd:	eb 09                	jmp    c001bb08 <FAT::rename(char const*, char const*)+0xc4>
c001baff:	90                   	nop
c001bb00:	b8 01 00 00 00       	mov    eax,0x1
c001bb05:	8d 76 00             	lea    esi,[esi+0x0]
c001bb08:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bb0e:	c3                   	ret    
c001bb0f:	90                   	nop

c001bb10 <FAT::mkdir(char const*)>:
c001bb10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bb16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bb1e:	75 08                	jne    c001bb28 <FAT::mkdir(char const*)+0x18>
c001bb20:	b8 04 00 00 00       	mov    eax,0x4
c001bb25:	eb 61                	jmp    c001bb88 <FAT::mkdir(char const*)+0x78>
c001bb27:	90                   	nop
c001bb28:	83 ec 08             	sub    esp,0x8
c001bb2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bb32:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb36:	50                   	push   eax
c001bb37:	e8 04 4b fe ff       	call   c0000640 <strcpy>
c001bb3c:	83 c4 10             	add    esp,0x10
c001bb3f:	83 ec 08             	sub    esp,0x8
c001bb42:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bb46:	50                   	push   eax
c001bb47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bb4e:	e8 61 f9 ff ff       	call   c001b4b4 <FAT::fixFilepath(char*)>
c001bb53:	83 c4 10             	add    esp,0x10
c001bb56:	83 ec 0c             	sub    esp,0xc
c001bb59:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb5d:	50                   	push   eax
c001bb5e:	e8 a2 91 fe ff       	call   c0004d05 <f_mkdir>
c001bb63:	83 c4 10             	add    esp,0x10
c001bb66:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bb6d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bb74:	85 c0                	test   eax,eax
c001bb76:	75 08                	jne    c001bb80 <FAT::mkdir(char const*)+0x70>
c001bb78:	b8 00 00 00 00       	mov    eax,0x0
c001bb7d:	eb 09                	jmp    c001bb88 <FAT::mkdir(char const*)+0x78>
c001bb7f:	90                   	nop
c001bb80:	b8 01 00 00 00       	mov    eax,0x1
c001bb85:	8d 76 00             	lea    esi,[esi+0x0]
c001bb88:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bb8e:	c3                   	ret    
c001bb8f:	90                   	nop

c001bb90 <FAT::exists(char const*)>:
c001bb90:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bb96:	83 ec 08             	sub    esp,0x8
c001bb99:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bba0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bba4:	50                   	push   eax
c001bba5:	e8 96 4a fe ff       	call   c0000640 <strcpy>
c001bbaa:	83 c4 10             	add    esp,0x10
c001bbad:	83 ec 08             	sub    esp,0x8
c001bbb0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bbb4:	50                   	push   eax
c001bbb5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bbbc:	e8 f3 f8 ff ff       	call   c001b4b4 <FAT::fixFilepath(char*)>
c001bbc1:	83 c4 10             	add    esp,0x10
c001bbc4:	83 ec 08             	sub    esp,0x8
c001bbc7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001bbce:	50                   	push   eax
c001bbcf:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bbd3:	50                   	push   eax
c001bbd4:	e8 98 8d fe ff       	call   c0004971 <f_stat>
c001bbd9:	83 c4 10             	add    esp,0x10
c001bbdc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bbe3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bbea:	85 c0                	test   eax,eax
c001bbec:	75 06                	jne    c001bbf4 <FAT::exists(char const*)+0x64>
c001bbee:	b0 01                	mov    al,0x1
c001bbf0:	eb 06                	jmp    c001bbf8 <FAT::exists(char const*)+0x68>
c001bbf2:	66 90                	xchg   ax,ax
c001bbf4:	b0 00                	mov    al,0x0
c001bbf6:	66 90                	xchg   ax,ax
c001bbf8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bbfe:	c3                   	ret    
c001bbff:	90                   	nop

c001bc00 <isoReadDiscSectorHelper>:
c001bc00:	83 ec 2c             	sub    esp,0x2c
c001bc03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bc07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bc0b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001bc10:	83 e8 41             	sub    eax,0x41
c001bc13:	8b 0c 85 e0 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5520]
c001bc1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bc1e:	ba 00 00 00 00       	mov    edx,0x0
c001bc23:	83 ec 0c             	sub    esp,0xc
c001bc26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bc2a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bc2e:	52                   	push   edx
c001bc2f:	50                   	push   eax
c001bc30:	51                   	push   ecx
c001bc31:	e8 ce e6 fe ff       	call   c000a304 <LogicalDisk::read(unsigned long long, int, void*)>
c001bc36:	83 c4 20             	add    esp,0x20
c001bc39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bc3d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bc42:	74 0c                	je     c001bc50 <isoReadDiscSectorHelper+0x50>
c001bc44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bc48:	c1 e0 0b             	shl    eax,0xb
c001bc4b:	eb 0b                	jmp    c001bc58 <isoReadDiscSectorHelper+0x58>
c001bc4d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc50:	b8 00 00 00 00       	mov    eax,0x0
c001bc55:	8d 76 00             	lea    esi,[esi+0x0]
c001bc58:	83 c4 2c             	add    esp,0x2c
c001bc5b:	c3                   	ret    

c001bc5c <iso_kprintf>:
c001bc5c:	83 ec 0c             	sub    esp,0xc
c001bc5f:	83 ec 08             	sub    esp,0x8
c001bc62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc66:	68 51 46 02 c0       	push   0xc0024651
c001bc6b:	e8 f4 b2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bc70:	83 c4 10             	add    esp,0x10
c001bc73:	90                   	nop
c001bc74:	83 c4 0c             	add    esp,0xc
c001bc77:	c3                   	ret    

c001bc78 <iso_kprintfd>:
c001bc78:	83 ec 0c             	sub    esp,0xc
c001bc7b:	83 ec 08             	sub    esp,0x8
c001bc7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc82:	68 f2 33 02 c0       	push   0xc00233f2
c001bc87:	e8 d8 b2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bc8c:	83 c4 10             	add    esp,0x10
c001bc8f:	90                   	nop
c001bc90:	83 c4 0c             	add    esp,0xc
c001bc93:	c3                   	ret    

c001bc94 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001bc94:	b8 08 00 00 00       	mov    eax,0x8
c001bc99:	c3                   	ret    

c001bc9a <ISO9660::truncate(void*, unsigned long long)>:
c001bc9a:	b8 01 00 00 00       	mov    eax,0x1
c001bc9f:	c3                   	ret    

c001bca0 <ISO9660::getName()>:
c001bca0:	b8 10 4a 02 c0       	mov    eax,0xc0024a10
c001bca5:	c3                   	ret    

c001bca6 <ISO9660::closeDir(void*)>:
c001bca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcaa:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcac:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001bcaf:	90                   	nop

c001bcb0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001bcb0:	b8 01 00 00 00       	mov    eax,0x1
c001bcb5:	c3                   	ret    

c001bcb6 <ISO9660::unlink(char const*)>:
c001bcb6:	b8 01 00 00 00       	mov    eax,0x1
c001bcbb:	c3                   	ret    

c001bcbc <ISO9660::write(void*, unsigned long, void*, int*)>:
c001bcbc:	b8 03 00 00 00       	mov    eax,0x3
c001bcc1:	c3                   	ret    

c001bcc2 <ISO9660::rename(char const*, char const*)>:
c001bcc2:	b8 01 00 00 00       	mov    eax,0x1
c001bcc7:	c3                   	ret    

c001bcc8 <ISO9660::mkdir(char const*)>:
c001bcc8:	b8 01 00 00 00       	mov    eax,0x1
c001bccd:	c3                   	ret    

c001bcce <ISO9660::~ISO9660()>:
c001bcce:	83 ec 0c             	sub    esp,0xc
c001bcd1:	ba 50 4b 02 c0       	mov    edx,0xc0024b50
c001bcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcda:	89 10                	mov    DWORD PTR [eax],edx
c001bcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce0:	83 ec 0c             	sub    esp,0xc
c001bce3:	50                   	push   eax
c001bce4:	e8 ab c0 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001bce9:	83 c4 10             	add    esp,0x10
c001bcec:	90                   	nop
c001bced:	83 c4 0c             	add    esp,0xc
c001bcf0:	c3                   	ret    
c001bcf1:	90                   	nop

c001bcf2 <ISO9660::~ISO9660()>:
c001bcf2:	83 ec 0c             	sub    esp,0xc
c001bcf5:	83 ec 0c             	sub    esp,0xc
c001bcf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bcfc:	e8 cd ff ff ff       	call   c001bcce <ISO9660::~ISO9660()>
c001bd01:	83 c4 10             	add    esp,0x10
c001bd04:	83 ec 08             	sub    esp,0x8
c001bd07:	6a 08                	push   0x8
c001bd09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd0d:	e8 95 0e ff ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c001bd12:	83 c4 10             	add    esp,0x10
c001bd15:	83 c4 0c             	add    esp,0xc
c001bd18:	c3                   	ret    
c001bd19:	90                   	nop

c001bd1a <ISO9660::exists(char const*)>:
c001bd1a:	83 ec 18             	sub    esp,0x18
c001bd1d:	68 2b 4a 02 c0       	push   0xc0024a2b
c001bd22:	e8 3f 3b ff ff       	call   c000f866 <KePanic(char const*)>
c001bd27:	31 c0                	xor    eax,eax
c001bd29:	83 c4 1c             	add    esp,0x1c
c001bd2c:	c3                   	ret    
c001bd2d:	90                   	nop

c001bd2e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001bd2e:	56                   	push   esi
c001bd2f:	53                   	push   ebx
c001bd30:	53                   	push   ebx
c001bd31:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bd35:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001bd39:	85 db                	test   ebx,ebx
c001bd3b:	0f 84 ca 00 00 00    	je     c001be0b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001bd41:	85 f6                	test   esi,esi
c001bd43:	0f 84 c2 00 00 00    	je     c001be0b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001bd49:	b8 03 00 00 00       	mov    eax,0x3
c001bd4e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001bd53:	0f 85 b7 00 00 00    	jne    c001be10 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001bd59:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001bd5b:	0f be 05 20 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dc20
c001bd62:	38 0d 20 dc 02 c0    	cmp    BYTE PTR ds:0xc002dc20,cl
c001bd68:	74 1b                	je     c001bd85 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001bd6a:	85 c0                	test   eax,eax
c001bd6c:	74 10                	je     c001bd7e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001bd6e:	83 ec 0c             	sub    esp,0xc
c001bd71:	68 49 4a 02 c0       	push   0xc0024a49
c001bd76:	e8 eb 3a ff ff       	call   c000f866 <KePanic(char const*)>
c001bd7b:	83 c4 10             	add    esp,0x10
c001bd7e:	8a 03                	mov    al,BYTE PTR [ebx]
c001bd80:	a2 20 dc 02 c0       	mov    ds:0xc002dc20,al
c001bd85:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bd88:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c001bd8f:	85 c0                	test   eax,eax
c001bd91:	74 09                	je     c001bd9c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001bd93:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001bd9a:	74 48                	je     c001bde4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001bd9c:	83 ec 0c             	sub    esp,0xc
c001bd9f:	68 59 4a 02 c0       	push   0xc0024a59
c001bda4:	e8 bb b1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bda9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bdac:	83 c4 10             	add    esp,0x10
c001bdaf:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c001bdb6:	85 c0                	test   eax,eax
c001bdb8:	74 17                	je     c001bdd1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001bdba:	83 ec 0c             	sub    esp,0xc
c001bdbd:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001bdc4:	68 79 4a 02 c0       	push   0xc0024a79
c001bdc9:	e8 96 b1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bdce:	83 c4 10             	add    esp,0x10
c001bdd1:	83 ec 0c             	sub    esp,0xc
c001bdd4:	0f be 05 20 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dc20
c001bddb:	50                   	push   eax
c001bddc:	e8 4d ae fe ff       	call   c0006c2e <init_percd>
c001bde1:	83 c4 10             	add    esp,0x10
c001bde4:	83 c3 03             	add    ebx,0x3
c001bde7:	51                   	push   ecx
c001bde8:	51                   	push   ecx
c001bde9:	6a 00                	push   0x0
c001bdeb:	53                   	push   ebx
c001bdec:	e8 04 a9 fe ff       	call   c00066f5 <iso_open>
c001bdf1:	83 c4 10             	add    esp,0x10
c001bdf4:	89 c2                	mov    edx,eax
c001bdf6:	b8 01 00 00 00       	mov    eax,0x1
c001bdfb:	83 fa ff             	cmp    edx,0xffffffff
c001bdfe:	74 10                	je     c001be10 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001be00:	83 c2 32             	add    edx,0x32
c001be03:	31 c0                	xor    eax,eax
c001be05:	01 d2                	add    edx,edx
c001be07:	89 16                	mov    DWORD PTR [esi],edx
c001be09:	eb 05                	jmp    c001be10 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001be0b:	b8 04 00 00 00       	mov    eax,0x4
c001be10:	5a                   	pop    edx
c001be11:	5b                   	pop    ebx
c001be12:	5e                   	pop    esi
c001be13:	c3                   	ret    

c001be14 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001be14:	53                   	push   ebx
c001be15:	83 ec 08             	sub    esp,0x8
c001be18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be20:	85 c0                	test   eax,eax
c001be22:	74 2d                	je     c001be51 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001be24:	85 db                	test   ebx,ebx
c001be26:	74 29                	je     c001be51 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001be28:	b9 02 00 00 00       	mov    ecx,0x2
c001be2d:	52                   	push   edx
c001be2e:	99                   	cdq    
c001be2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be33:	f7 f9                	idiv   ecx
c001be35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001be39:	83 e8 32             	sub    eax,0x32
c001be3c:	50                   	push   eax
c001be3d:	e8 5b a9 fe ff       	call   c000679d <iso_read>
c001be42:	83 c4 10             	add    esp,0x10
c001be45:	89 03                	mov    DWORD PTR [ebx],eax
c001be47:	09 d0                	or     eax,edx
c001be49:	0f 94 c0             	sete   al
c001be4c:	0f b6 c0             	movzx  eax,al
c001be4f:	eb 05                	jmp    c001be56 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001be51:	b8 04 00 00 00       	mov    eax,0x4
c001be56:	83 c4 08             	add    esp,0x8
c001be59:	5b                   	pop    ebx
c001be5a:	c3                   	ret    
c001be5b:	90                   	nop

c001be5c <ISO9660::seek(void*, unsigned long long)>:
c001be5c:	57                   	push   edi
c001be5d:	56                   	push   esi
c001be5e:	b8 04 00 00 00       	mov    eax,0x4
c001be63:	51                   	push   ecx
c001be64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001be6c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001be70:	85 d2                	test   edx,edx
c001be72:	74 26                	je     c001be9a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001be74:	6a 00                	push   0x0
c001be76:	b9 02 00 00 00       	mov    ecx,0x2
c001be7b:	57                   	push   edi
c001be7c:	89 d0                	mov    eax,edx
c001be7e:	56                   	push   esi
c001be7f:	99                   	cdq    
c001be80:	f7 f9                	idiv   ecx
c001be82:	83 e8 32             	sub    eax,0x32
c001be85:	50                   	push   eax
c001be86:	e8 28 aa fe ff       	call   c00068b3 <iso_seek>
c001be8b:	83 c4 10             	add    esp,0x10
c001be8e:	31 f0                	xor    eax,esi
c001be90:	31 fa                	xor    edx,edi
c001be92:	09 d0                	or     eax,edx
c001be94:	0f 95 c0             	setne  al
c001be97:	0f b6 c0             	movzx  eax,al
c001be9a:	5a                   	pop    edx
c001be9b:	5e                   	pop    esi
c001be9c:	5f                   	pop    edi
c001be9d:	c3                   	ret    

c001be9e <ISO9660::tell(void*, unsigned long long*)>:
c001be9e:	53                   	push   ebx
c001be9f:	83 ec 08             	sub    esp,0x8
c001bea2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bea6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001beaa:	85 c0                	test   eax,eax
c001beac:	74 24                	je     c001bed2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001beae:	85 db                	test   ebx,ebx
c001beb0:	74 20                	je     c001bed2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001beb2:	83 ec 0c             	sub    esp,0xc
c001beb5:	b9 02 00 00 00       	mov    ecx,0x2
c001beba:	99                   	cdq    
c001bebb:	f7 f9                	idiv   ecx
c001bebd:	83 e8 32             	sub    eax,0x32
c001bec0:	50                   	push   eax
c001bec1:	e8 71 aa fe ff       	call   c0006937 <iso_tell>
c001bec6:	83 c4 10             	add    esp,0x10
c001bec9:	89 03                	mov    DWORD PTR [ebx],eax
c001becb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001bece:	31 c0                	xor    eax,eax
c001bed0:	eb 05                	jmp    c001bed7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001bed2:	b8 04 00 00 00       	mov    eax,0x4
c001bed7:	83 c4 08             	add    esp,0x8
c001beda:	5b                   	pop    ebx
c001bedb:	c3                   	ret    

c001bedc <ISO9660::stat(void*, unsigned long long*)>:
c001bedc:	53                   	push   ebx
c001bedd:	83 ec 14             	sub    esp,0x14
c001bee0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001bee4:	68 9d 4a 02 c0       	push   0xc0024a9d
c001bee9:	e8 76 b0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001beee:	83 c4 10             	add    esp,0x10
c001bef1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bef6:	74 2c                	je     c001bf24 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001bef8:	85 db                	test   ebx,ebx
c001befa:	74 28                	je     c001bf24 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001befc:	83 ec 0c             	sub    esp,0xc
c001beff:	b9 02 00 00 00       	mov    ecx,0x2
c001bf04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf08:	99                   	cdq    
c001bf09:	f7 f9                	idiv   ecx
c001bf0b:	83 e8 32             	sub    eax,0x32
c001bf0e:	50                   	push   eax
c001bf0f:	e8 54 aa fe ff       	call   c0006968 <iso_total>
c001bf14:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bf1b:	89 03                	mov    DWORD PTR [ebx],eax
c001bf1d:	83 c4 10             	add    esp,0x10
c001bf20:	31 c0                	xor    eax,eax
c001bf22:	eb 05                	jmp    c001bf29 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001bf24:	b8 04 00 00 00       	mov    eax,0x4
c001bf29:	83 c4 08             	add    esp,0x8
c001bf2c:	5b                   	pop    ebx
c001bf2d:	c3                   	ret    

c001bf2e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001bf2e:	55                   	push   ebp
c001bf2f:	57                   	push   edi
c001bf30:	56                   	push   esi
c001bf31:	53                   	push   ebx
c001bf32:	83 ec 18             	sub    esp,0x18
c001bf35:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bf39:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001bf3d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bf41:	68 a5 4a 02 c0       	push   0xc0024aa5
c001bf46:	e8 19 b0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bf4b:	83 c4 10             	add    esp,0x10
c001bf4e:	85 ff                	test   edi,edi
c001bf50:	0f 94 c0             	sete   al
c001bf53:	85 f6                	test   esi,esi
c001bf55:	0f 94 c2             	sete   dl
c001bf58:	09 d0                	or     eax,edx
c001bf5a:	a8 01                	test   al,0x1
c001bf5c:	0f 85 dd 00 00 00    	jne    c001c03f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001bf62:	85 db                	test   ebx,ebx
c001bf64:	0f 84 d5 00 00 00    	je     c001c03f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001bf6a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bf6d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001bf73:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001bf7a:	0f be 05 20 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dc20
c001bf81:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001bf83:	38 0d 20 dc 02 c0    	cmp    BYTE PTR ds:0xc002dc20,cl
c001bf89:	74 1b                	je     c001bfa6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001bf8b:	85 c0                	test   eax,eax
c001bf8d:	74 10                	je     c001bf9f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001bf8f:	83 ec 0c             	sub    esp,0xc
c001bf92:	68 49 4a 02 c0       	push   0xc0024a49
c001bf97:	e8 ca 38 ff ff       	call   c000f866 <KePanic(char const*)>
c001bf9c:	83 c4 10             	add    esp,0x10
c001bf9f:	8a 03                	mov    al,BYTE PTR [ebx]
c001bfa1:	a2 20 dc 02 c0       	mov    ds:0xc002dc20,al
c001bfa6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bfa9:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c001bfb0:	85 c0                	test   eax,eax
c001bfb2:	74 09                	je     c001bfbd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001bfb4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001bfbb:	74 51                	je     c001c00e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001bfbd:	83 ec 0c             	sub    esp,0xc
c001bfc0:	68 ad 4a 02 c0       	push   0xc0024aad
c001bfc5:	e8 9a af fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bfca:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bfcd:	83 c4 10             	add    esp,0x10
c001bfd0:	83 3c 85 dc a9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd5624],0x0
c001bfd8:	74 21                	je     c001bffb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001bfda:	83 ec 0c             	sub    esp,0xc
c001bfdd:	68 cd 4a 02 c0       	push   0xc0024acd
c001bfe2:	e8 7d af fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bfe7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bfea:	83 c4 10             	add    esp,0x10
c001bfed:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c001bff4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001bffb:	83 ec 0c             	sub    esp,0xc
c001bffe:	0f be 05 20 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dc20
c001c005:	50                   	push   eax
c001c006:	e8 23 ac fe ff       	call   c0006c2e <init_percd>
c001c00b:	83 c4 10             	add    esp,0x10
c001c00e:	83 c3 03             	add    ebx,0x3
c001c011:	52                   	push   edx
c001c012:	52                   	push   edx
c001c013:	6a 00                	push   0x0
c001c015:	53                   	push   ebx
c001c016:	e8 da a6 fe ff       	call   c00066f5 <iso_open>
c001c01b:	83 c4 10             	add    esp,0x10
c001c01e:	89 c5                	mov    ebp,eax
c001c020:	83 f8 ff             	cmp    eax,0xffffffff
c001c023:	75 21                	jne    c001c046 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001c025:	50                   	push   eax
c001c026:	50                   	push   eax
c001c027:	6a 01                	push   0x1
c001c029:	53                   	push   ebx
c001c02a:	e8 c6 a6 fe ff       	call   c00066f5 <iso_open>
c001c02f:	83 c4 10             	add    esp,0x10
c001c032:	ba 02 00 00 00       	mov    edx,0x2
c001c037:	40                   	inc    eax
c001c038:	74 2b                	je     c001c065 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001c03a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001c03d:	eb 24                	jmp    c001c063 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001c03f:	ba 04 00 00 00       	mov    edx,0x4
c001c044:	eb 1f                	jmp    c001c065 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001c046:	83 ec 0c             	sub    esp,0xc
c001c049:	50                   	push   eax
c001c04a:	e8 19 a9 fe ff       	call   c0006968 <iso_total>
c001c04f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001c056:	89 07                	mov    DWORD PTR [edi],eax
c001c058:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c05b:	e8 1f a7 fe ff       	call   c000677f <iso_close>
c001c060:	83 c4 10             	add    esp,0x10
c001c063:	31 d2                	xor    edx,edx
c001c065:	83 c4 0c             	add    esp,0xc
c001c068:	89 d0                	mov    eax,edx
c001c06a:	5b                   	pop    ebx
c001c06b:	5e                   	pop    esi
c001c06c:	5f                   	pop    edi
c001c06d:	5d                   	pop    ebp
c001c06e:	c3                   	ret    
c001c06f:	90                   	nop

c001c070 <ISO9660::close(void*)>:
c001c070:	83 ec 0c             	sub    esp,0xc
c001c073:	b8 04 00 00 00       	mov    eax,0x4
c001c078:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c07c:	85 d2                	test   edx,edx
c001c07e:	74 1b                	je     c001c09b <ISO9660::close(void*)+0x2b>
c001c080:	83 ec 0c             	sub    esp,0xc
c001c083:	b9 02 00 00 00       	mov    ecx,0x2
c001c088:	89 d0                	mov    eax,edx
c001c08a:	99                   	cdq    
c001c08b:	f7 f9                	idiv   ecx
c001c08d:	83 e8 32             	sub    eax,0x32
c001c090:	50                   	push   eax
c001c091:	e8 e9 a6 fe ff       	call   c000677f <iso_close>
c001c096:	83 c4 10             	add    esp,0x10
c001c099:	31 c0                	xor    eax,eax
c001c09b:	83 c4 0c             	add    esp,0xc
c001c09e:	c3                   	ret    
c001c09f:	90                   	nop

c001c0a0 <ISO9660::openDir(char const*, void**)>:
c001c0a0:	56                   	push   esi
c001c0a1:	53                   	push   ebx
c001c0a2:	50                   	push   eax
c001c0a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c0a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c0ab:	85 db                	test   ebx,ebx
c001c0ad:	0f 84 bd 00 00 00    	je     c001c170 <ISO9660::openDir(char const*, void**)+0xd0>
c001c0b3:	85 f6                	test   esi,esi
c001c0b5:	0f 84 b5 00 00 00    	je     c001c170 <ISO9660::openDir(char const*, void**)+0xd0>
c001c0bb:	8a 13                	mov    dl,BYTE PTR [ebx]
c001c0bd:	0f be 05 20 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dc20
c001c0c4:	38 15 20 dc 02 c0    	cmp    BYTE PTR ds:0xc002dc20,dl
c001c0ca:	74 1b                	je     c001c0e7 <ISO9660::openDir(char const*, void**)+0x47>
c001c0cc:	85 c0                	test   eax,eax
c001c0ce:	74 10                	je     c001c0e0 <ISO9660::openDir(char const*, void**)+0x40>
c001c0d0:	83 ec 0c             	sub    esp,0xc
c001c0d3:	68 49 4a 02 c0       	push   0xc0024a49
c001c0d8:	e8 89 37 ff ff       	call   c000f866 <KePanic(char const*)>
c001c0dd:	83 c4 10             	add    esp,0x10
c001c0e0:	8a 03                	mov    al,BYTE PTR [ebx]
c001c0e2:	a2 20 dc 02 c0       	mov    ds:0xc002dc20,al
c001c0e7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c0ea:	8b 04 85 dc a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5624]
c001c0f1:	85 c0                	test   eax,eax
c001c0f3:	74 10                	je     c001c105 <ISO9660::openDir(char const*, void**)+0x65>
c001c0f5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c0fc:	74 1a                	je     c001c118 <ISO9660::openDir(char const*, void**)+0x78>
c001c0fe:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c105:	83 ec 0c             	sub    esp,0xc
c001c108:	0f be 05 20 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dc20
c001c10f:	50                   	push   eax
c001c110:	e8 19 ab fe ff       	call   c0006c2e <init_percd>
c001c115:	83 c4 10             	add    esp,0x10
c001c118:	83 c3 03             	add    ebx,0x3
c001c11b:	50                   	push   eax
c001c11c:	50                   	push   eax
c001c11d:	6a 01                	push   0x1
c001c11f:	53                   	push   ebx
c001c120:	e8 d0 a5 fe ff       	call   c00066f5 <iso_open>
c001c125:	83 c4 10             	add    esp,0x10
c001c128:	89 c3                	mov    ebx,eax
c001c12a:	83 f8 ff             	cmp    eax,0xffffffff
c001c12d:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001c132:	75 1c                	jne    c001c150 <ISO9660::openDir(char const*, void**)+0xb0>
c001c134:	53                   	push   ebx
c001c135:	53                   	push   ebx
c001c136:	68 f1 4a 02 c0       	push   0xc0024af1
c001c13b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c141:	e8 da 5e ff ff       	call   c0012020 <VgaText::puts(char const*)>
c001c146:	83 c4 10             	add    esp,0x10
c001c149:	b8 01 00 00 00       	mov    eax,0x1
c001c14e:	eb 25                	jmp    c001c175 <ISO9660::openDir(char const*, void**)+0xd5>
c001c150:	01 db                	add    ebx,ebx
c001c152:	51                   	push   ecx
c001c153:	83 c3 65             	add    ebx,0x65
c001c156:	51                   	push   ecx
c001c157:	68 04 4b 02 c0       	push   0xc0024b04
c001c15c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c162:	e8 b9 5e ff ff       	call   c0012020 <VgaText::puts(char const*)>
c001c167:	89 1e                	mov    DWORD PTR [esi],ebx
c001c169:	83 c4 10             	add    esp,0x10
c001c16c:	31 c0                	xor    eax,eax
c001c16e:	eb 05                	jmp    c001c175 <ISO9660::openDir(char const*, void**)+0xd5>
c001c170:	b8 04 00 00 00       	mov    eax,0x4
c001c175:	5a                   	pop    edx
c001c176:	5b                   	pop    ebx
c001c177:	5e                   	pop    esi
c001c178:	c3                   	ret    
c001c179:	90                   	nop

c001c17a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c17a:	55                   	push   ebp
c001c17b:	57                   	push   edi
c001c17c:	56                   	push   esi
c001c17d:	53                   	push   ebx
c001c17e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c184:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001c18b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c192:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c19a:	0f 84 e7 00 00 00    	je     c001c287 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001c1a0:	85 db                	test   ebx,ebx
c001c1a2:	0f 84 df 00 00 00    	je     c001c287 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001c1a8:	83 ec 0c             	sub    esp,0xc
c001c1ab:	68 17 4b 02 c0       	push   0xc0024b17
c001c1b0:	e8 af ad fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c1b5:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c1bc:	b9 02 00 00 00       	mov    ecx,0x2
c001c1c1:	99                   	cdq    
c001c1c2:	f7 f9                	idiv   ecx
c001c1c4:	83 e8 32             	sub    eax,0x32
c001c1c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1ca:	e8 eb a7 fe ff       	call   c00069ba <iso_readdir>
c001c1cf:	83 c4 10             	add    esp,0x10
c001c1d2:	89 c6                	mov    esi,eax
c001c1d4:	85 c0                	test   eax,eax
c001c1d6:	75 37                	jne    c001c20f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001c1d8:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001c1dd:	56                   	push   esi
c001c1de:	56                   	push   esi
c001c1df:	68 22 4b 02 c0       	push   0xc0024b22
c001c1e4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c1ea:	e8 31 5e ff ff       	call   c0012020 <VgaText::puts(char const*)>
c001c1ef:	83 c4 0c             	add    esp,0xc
c001c1f2:	68 10 01 00 00       	push   0x110
c001c1f7:	6a 00                	push   0x0
c001c1f9:	57                   	push   edi
c001c1fa:	e8 f1 42 fe ff       	call   c00004f0 <memset>
c001c1ff:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c205:	83 c4 10             	add    esp,0x10
c001c208:	b8 01 00 00 00       	mov    eax,0x1
c001c20d:	eb 7d                	jmp    c001c28c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001c20f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001c215:	8d 68 08             	lea    ebp,[eax+0x8]
c001c218:	83 ec 0c             	sub    esp,0xc
c001c21b:	55                   	push   ebp
c001c21c:	e8 4f 43 fe ff       	call   c0000570 <strlen>
c001c221:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c229:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c22d:	83 c4 10             	add    esp,0x10
c001c230:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001c234:	75 0a                	jne    c001c240 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001c236:	b8 02 00 00 00       	mov    eax,0x2
c001c23b:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001c23e:	74 05                	je     c001c245 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001c240:	b8 01 00 00 00       	mov    eax,0x1
c001c245:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c249:	50                   	push   eax
c001c24a:	50                   	push   eax
c001c24b:	55                   	push   ebp
c001c24c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c250:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c254:	50                   	push   eax
c001c255:	e8 e6 43 fe ff       	call   c0000640 <strcpy>
c001c25a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c261:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c263:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001c269:	5a                   	pop    edx
c001c26a:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c001c26f:	59                   	pop    ecx
c001c270:	68 35 4b 02 c0       	push   0xc0024b35
c001c275:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c27b:	e8 a0 5d ff ff       	call   c0012020 <VgaText::puts(char const*)>
c001c280:	83 c4 10             	add    esp,0x10
c001c283:	31 c0                	xor    eax,eax
c001c285:	eb 05                	jmp    c001c28c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001c287:	b8 04 00 00 00       	mov    eax,0x4
c001c28c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c292:	5b                   	pop    ebx
c001c293:	5e                   	pop    esi
c001c294:	5f                   	pop    edi
c001c295:	5d                   	pop    ebp
c001c296:	c3                   	ret    

c001c297 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c297:	57                   	push   edi
c001c298:	56                   	push   esi
c001c299:	53                   	push   ebx
c001c29a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c29e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c2a2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c2a6:	39 35 24 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc24,esi
c001c2ac:	0f be cb             	movsx  ecx,bl
c001c2af:	75 0b                	jne    c001c2bc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001c2b1:	0f be 05 e4 5d 02 c0 	movsx  eax,BYTE PTR ds:0xc0025de4
c001c2b8:	39 c8                	cmp    eax,ecx
c001c2ba:	74 47                	je     c001c303 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001c2bc:	83 ec 0c             	sub    esp,0xc
c001c2bf:	31 d2                	xor    edx,edx
c001c2c1:	68 40 dc 02 c0       	push   0xc002dc40
c001c2c6:	6a 01                	push   0x1
c001c2c8:	52                   	push   edx
c001c2c9:	56                   	push   esi
c001c2ca:	ff 34 8d dc a9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd5624]
c001c2d1:	e8 2e e0 fe ff       	call   c000a304 <LogicalDisk::read(unsigned long long, int, void*)>
c001c2d6:	83 c4 20             	add    esp,0x20
c001c2d9:	85 c0                	test   eax,eax
c001c2db:	75 0e                	jne    c001c2eb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001c2dd:	89 35 24 dc 02 c0    	mov    DWORD PTR ds:0xc002dc24,esi
c001c2e3:	88 1d e4 5d 02 c0    	mov    BYTE PTR ds:0xc0025de4,bl
c001c2e9:	eb 18                	jmp    c001c303 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001c2eb:	50                   	push   eax
c001c2ec:	68 00 08 00 00       	push   0x800
c001c2f1:	6a 00                	push   0x0
c001c2f3:	57                   	push   edi
c001c2f4:	e8 f7 41 fe ff       	call   c00004f0 <memset>
c001c2f9:	83 c4 10             	add    esp,0x10
c001c2fc:	b8 01 00 00 00       	mov    eax,0x1
c001c301:	eb 0e                	jmp    c001c311 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001c303:	be 40 dc 02 c0       	mov    esi,0xc002dc40
c001c308:	b9 00 08 00 00       	mov    ecx,0x800
c001c30d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c30f:	31 c0                	xor    eax,eax
c001c311:	5b                   	pop    ebx
c001c312:	5e                   	pop    esi
c001c313:	5f                   	pop    edi
c001c314:	c3                   	ret    
c001c315:	90                   	nop

c001c316 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c316:	53                   	push   ebx
c001c317:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001c31d:	c7 05 24 dc 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002dc24,0xdeadbeef
c001c327:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001c32e:	8d 58 41             	lea    ebx,[eax+0x41]
c001c331:	0f be db             	movsx  ebx,bl
c001c334:	53                   	push   ebx
c001c335:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c339:	50                   	push   eax
c001c33a:	6a 10                	push   0x10
c001c33c:	e8 56 ff ff ff       	call   c001c297 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c341:	83 c4 10             	add    esp,0x10
c001c344:	31 d2                	xor    edx,edx
c001c346:	85 c0                	test   eax,eax
c001c348:	75 33                	jne    c001c37d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c34a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c34f:	75 2c                	jne    c001c37d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c351:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c356:	75 25                	jne    c001c37d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c358:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c35d:	75 1e                	jne    c001c37d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c35f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c364:	75 17                	jne    c001c37d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c366:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c36b:	75 10                	jne    c001c37d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c36d:	83 ec 0c             	sub    esp,0xc
c001c370:	53                   	push   ebx
c001c371:	e8 b8 a8 fe ff       	call   c0006c2e <init_percd>
c001c376:	83 c4 10             	add    esp,0x10
c001c379:	40                   	inc    eax
c001c37a:	0f 95 c2             	setne  dl
c001c37d:	88 d0                	mov    al,dl
c001c37f:	81 c4 08 08 00 00    	add    esp,0x808
c001c385:	5b                   	pop    ebx
c001c386:	c3                   	ret    
c001c387:	90                   	nop

c001c388 <ISO9660::ISO9660()>:
c001c388:	83 ec 0c             	sub    esp,0xc
c001c38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38f:	83 ec 0c             	sub    esp,0xc
c001c392:	50                   	push   eax
c001c393:	e8 d8 b9 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001c398:	83 c4 10             	add    esp,0x10
c001c39b:	ba 50 4b 02 c0       	mov    edx,0xc0024b50
c001c3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a4:	89 10                	mov    DWORD PTR [eax],edx
c001c3a6:	e8 95 a9 fe ff       	call   c0006d40 <fs_iso9660_init>
c001c3ab:	90                   	nop
c001c3ac:	83 c4 0c             	add    esp,0xc
c001c3af:	c3                   	ret    

c001c3b0 <SoundCard::beginPlayback()>:
c001c3b0:	c7 44 24 04 b4 4b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024bb4
c001c3b8:	e9 a9 34 ff ff       	jmp    c000f866 <KePanic(char const*)>
c001c3bd:	90                   	nop

c001c3be <SoundCard::stopPlayback()>:
c001c3be:	c7 44 24 04 b4 4b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024bb4
c001c3c6:	e9 9b 34 ff ff       	jmp    c000f866 <KePanic(char const*)>
c001c3cb:	90                   	nop

c001c3cc <SoundCard::SoundCard(char const*)>:
c001c3cc:	83 ec 1c             	sub    esp,0x1c
c001c3cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3d3:	83 ec 08             	sub    esp,0x8
c001c3d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3da:	50                   	push   eax
c001c3db:	e8 32 d0 fe ff       	call   c0009412 <Device::Device(char const*)>
c001c3e0:	83 c4 10             	add    esp,0x10
c001c3e3:	ba 00 4c 02 c0       	mov    edx,0xc0024c00
c001c3e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3ec:	89 10                	mov    DWORD PTR [eax],edx
c001c3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3f2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c3f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3fd:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c40b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c415:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c419:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c427:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c431:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c439:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c43e:	7f 1a                	jg     c001c45a <SoundCard::SoundCard(char const*)+0x8e>
c001c440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c444:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c448:	83 c2 54             	add    edx,0x54
c001c44b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c453:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c458:	eb df                	jmp    c001c439 <SoundCard::SoundCard(char const*)+0x6d>
c001c45a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c45e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c465:	90                   	nop
c001c466:	83 c4 1c             	add    esp,0x1c
c001c469:	c3                   	ret    

c001c46a <SoundCard::~SoundCard()>:
c001c46a:	83 ec 0c             	sub    esp,0xc
c001c46d:	ba 00 4c 02 c0       	mov    edx,0xc0024c00
c001c472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c476:	89 10                	mov    DWORD PTR [eax],edx
c001c478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c47c:	83 ec 0c             	sub    esp,0xc
c001c47f:	50                   	push   eax
c001c480:	e8 2d cd fe ff       	call   c00091b2 <Device::~Device()>
c001c485:	83 c4 10             	add    esp,0x10
c001c488:	90                   	nop
c001c489:	83 c4 0c             	add    esp,0xc
c001c48c:	c3                   	ret    
c001c48d:	90                   	nop

c001c48e <SoundCard::~SoundCard()>:
c001c48e:	83 ec 0c             	sub    esp,0xc
c001c491:	83 ec 0c             	sub    esp,0xc
c001c494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c498:	e8 cd ff ff ff       	call   c001c46a <SoundCard::~SoundCard()>
c001c49d:	83 c4 10             	add    esp,0x10
c001c4a0:	83 ec 08             	sub    esp,0x8
c001c4a3:	68 e8 01 00 00       	push   0x1e8
c001c4a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4ac:	e8 f6 06 ff ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c001c4b1:	83 c4 10             	add    esp,0x10
c001c4b4:	83 c4 0c             	add    esp,0xc
c001c4b7:	c3                   	ret    

c001c4b8 <SoundCard::configureRates(int, int, int)>:
c001c4b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c4bc:	31 c0                	xor    eax,eax
c001c4be:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c4c5:	75 20                	jne    c001c4e7 <SoundCard::configureRates(int, int, int)+0x2f>
c001c4c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4cb:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c4d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4d5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4df:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c4e5:	b0 01                	mov    al,0x1
c001c4e7:	c3                   	ret    

c001c4e8 <SoundCard::getSamples16(int, short*)>:
c001c4e8:	55                   	push   ebp
c001c4e9:	57                   	push   edi
c001c4ea:	31 ff                	xor    edi,edi
c001c4ec:	56                   	push   esi
c001c4ed:	53                   	push   ebx
c001c4ee:	31 db                	xor    ebx,ebx
c001c4f0:	83 ec 10             	sub    esp,0x10
c001c4f3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c4f7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c4fb:	8d 04 36             	lea    eax,[esi+esi*1]
c001c4fe:	50                   	push   eax
c001c4ff:	6a 00                	push   0x0
c001c501:	55                   	push   ebp
c001c502:	e8 e9 3f fe ff       	call   c00004f0 <memset>
c001c507:	83 c4 10             	add    esp,0x10
c001c50a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c50e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001c515:	85 c0                	test   eax,eax
c001c517:	74 1b                	je     c001c534 <SoundCard::getSamples16(int, short*)+0x4c>
c001c519:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c51d:	75 15                	jne    c001c534 <SoundCard::getSamples16(int, short*)+0x4c>
c001c51f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c523:	55                   	push   ebp
c001c524:	56                   	push   esi
c001c525:	50                   	push   eax
c001c526:	e8 8d 03 00 00       	call   c001c8b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c52b:	83 c4 10             	add    esp,0x10
c001c52e:	39 c7                	cmp    edi,eax
c001c530:	7d 02                	jge    c001c534 <SoundCard::getSamples16(int, short*)+0x4c>
c001c532:	89 c7                	mov    edi,eax
c001c534:	43                   	inc    ebx
c001c535:	83 fb 20             	cmp    ebx,0x20
c001c538:	75 d0                	jne    c001c50a <SoundCard::getSamples16(int, short*)+0x22>
c001c53a:	83 c4 0c             	add    esp,0xc
c001c53d:	89 f8                	mov    eax,edi
c001c53f:	5b                   	pop    ebx
c001c540:	5e                   	pop    esi
c001c541:	5f                   	pop    edi
c001c542:	5d                   	pop    ebp
c001c543:	c3                   	ret    

c001c544 <SoundCard::getSamples32(int, int*)>:
c001c544:	55                   	push   ebp
c001c545:	57                   	push   edi
c001c546:	31 ff                	xor    edi,edi
c001c548:	56                   	push   esi
c001c549:	31 f6                	xor    esi,esi
c001c54b:	53                   	push   ebx
c001c54c:	83 ec 10             	sub    esp,0x10
c001c54f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c553:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c557:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c55b:	c1 e0 02             	shl    eax,0x2
c001c55e:	50                   	push   eax
c001c55f:	6a 00                	push   0x0
c001c561:	55                   	push   ebp
c001c562:	e8 89 3f fe ff       	call   c00004f0 <memset>
c001c567:	83 c4 10             	add    esp,0x10
c001c56a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c571:	85 c0                	test   eax,eax
c001c573:	74 1b                	je     c001c590 <SoundCard::getSamples32(int, int*)+0x4c>
c001c575:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c579:	75 15                	jne    c001c590 <SoundCard::getSamples32(int, int*)+0x4c>
c001c57b:	53                   	push   ebx
c001c57c:	55                   	push   ebp
c001c57d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c581:	50                   	push   eax
c001c582:	e8 fd 03 00 00       	call   c001c984 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c587:	83 c4 10             	add    esp,0x10
c001c58a:	39 c6                	cmp    esi,eax
c001c58c:	7d 02                	jge    c001c590 <SoundCard::getSamples32(int, int*)+0x4c>
c001c58e:	89 c6                	mov    esi,eax
c001c590:	47                   	inc    edi
c001c591:	83 ff 20             	cmp    edi,0x20
c001c594:	75 d4                	jne    c001c56a <SoundCard::getSamples32(int, int*)+0x26>
c001c596:	85 f6                	test   esi,esi
c001c598:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001c59f:	75 0f                	jne    c001c5b0 <SoundCard::getSamples32(int, int*)+0x6c>
c001c5a1:	85 c0                	test   eax,eax
c001c5a3:	74 1b                	je     c001c5c0 <SoundCard::getSamples32(int, int*)+0x7c>
c001c5a5:	83 ec 0c             	sub    esp,0xc
c001c5a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5aa:	53                   	push   ebx
c001c5ab:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c5ae:	eb 0d                	jmp    c001c5bd <SoundCard::getSamples32(int, int*)+0x79>
c001c5b0:	85 c0                	test   eax,eax
c001c5b2:	75 0c                	jne    c001c5c0 <SoundCard::getSamples32(int, int*)+0x7c>
c001c5b4:	83 ec 0c             	sub    esp,0xc
c001c5b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5b9:	53                   	push   ebx
c001c5ba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c5bd:	83 c4 10             	add    esp,0x10
c001c5c0:	83 c4 0c             	add    esp,0xc
c001c5c3:	89 f0                	mov    eax,esi
c001c5c5:	5b                   	pop    ebx
c001c5c6:	5e                   	pop    esi
c001c5c7:	5f                   	pop    edi
c001c5c8:	5d                   	pop    ebp
c001c5c9:	c3                   	ret    

c001c5ca <SoundCard::addChannel(SoundPort*)>:
c001c5ca:	83 ec 0c             	sub    esp,0xc
c001c5cd:	31 c0                	xor    eax,eax
c001c5cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c5d3:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001c5db:	74 1b                	je     c001c5f8 <SoundCard::addChannel(SoundPort*)+0x2e>
c001c5dd:	40                   	inc    eax
c001c5de:	83 f8 20             	cmp    eax,0x20
c001c5e1:	75 f0                	jne    c001c5d3 <SoundCard::addChannel(SoundPort*)+0x9>
c001c5e3:	83 ec 0c             	sub    esp,0xc
c001c5e6:	68 d9 4b 02 c0       	push   0xc0024bd9
c001c5eb:	e8 76 32 ff ff       	call   c000f866 <KePanic(char const*)>
c001c5f0:	83 c4 10             	add    esp,0x10
c001c5f3:	83 c8 ff             	or     eax,0xffffffff
c001c5f6:	eb 0b                	jmp    c001c603 <SoundCard::addChannel(SoundPort*)+0x39>
c001c5f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c5fc:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001c603:	83 c4 0c             	add    esp,0xc
c001c606:	c3                   	ret    
c001c607:	90                   	nop

c001c608 <SoundCard::removeChannel(int)>:
c001c608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c60c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c610:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c61b:	c3                   	ret    

c001c61c <SoundPort::SoundPort(int, int, int, int)>:
c001c61c:	83 ec 0c             	sub    esp,0xc
c001c61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c623:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c636:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c63a:	89 10                	mov    DWORD PTR [eax],edx
c001c63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c640:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c644:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c64f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c652:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c657:	75 13                	jne    c001c66c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65d:	8b 00                	mov    eax,DWORD PTR [eax]
c001c65f:	05 a0 0f 00 00       	add    eax,0xfa0
c001c664:	01 c0                	add    eax,eax
c001c666:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c66a:	66 90                	xchg   ax,ax
c001c66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c670:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c674:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c686:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c689:	c1 e0 02             	shl    eax,0x2
c001c68c:	83 ec 0c             	sub    esp,0xc
c001c68f:	50                   	push   eax
c001c690:	e8 8a 2e ff ff       	call   c000f51f <malloc>
c001c695:	83 c4 10             	add    esp,0x10
c001c698:	89 c2                	mov    edx,eax
c001c69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c6a1:	90                   	nop
c001c6a2:	83 c4 0c             	add    esp,0xc
c001c6a5:	c3                   	ret    
c001c6a6:	66 90                	xchg   ax,ax

c001c6a8 <SoundPort::~SoundPort()>:
c001c6a8:	83 ec 0c             	sub    esp,0xc
c001c6ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c6b2:	85 c0                	test   eax,eax
c001c6b4:	74 1e                	je     c001c6d4 <SoundPort::~SoundPort()+0x2c>
c001c6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c6bd:	83 ec 0c             	sub    esp,0xc
c001c6c0:	50                   	push   eax
c001c6c1:	e8 69 2e ff ff       	call   c000f52f <free>
c001c6c6:	83 c4 10             	add    esp,0x10
c001c6c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6cd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c6d4:	90                   	nop
c001c6d5:	83 c4 0c             	add    esp,0xc
c001c6d8:	c3                   	ret    
c001c6d9:	90                   	nop
c001c6da:	66 90                	xchg   ax,ax

c001c6dc <SoundPort::unpause()>:
c001c6dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6e0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c6e4:	c3                   	ret    
c001c6e5:	90                   	nop
c001c6e6:	66 90                	xchg   ax,ax

c001c6e8 <SoundPort::pause()>:
c001c6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6ec:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c6f0:	c3                   	ret    
c001c6f1:	90                   	nop
c001c6f2:	66 90                	xchg   ax,ax

c001c6f4 <SoundPort::getBufferUsed()>:
c001c6f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c6fb:	c3                   	ret    

c001c6fc <SoundPort::getBufferSize()>:
c001c6fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c700:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c703:	c3                   	ret    

c001c704 <SoundPort::buffer8(signed char*, int)>:
c001c704:	55                   	push   ebp
c001c705:	57                   	push   edi
c001c706:	56                   	push   esi
c001c707:	53                   	push   ebx
c001c708:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c70c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001c710:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c713:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c716:	74 70                	je     c001c788 <SoundPort::buffer8(signed char*, int)+0x84>
c001c718:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c71c:	85 c9                	test   ecx,ecx
c001c71e:	7e 68                	jle    c001c788 <SoundPort::buffer8(signed char*, int)+0x84>
c001c720:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001c724:	8d 48 01             	lea    ecx,[eax+0x1]
c001c727:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c72a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c72d:	89 f1                	mov    ecx,esi
c001c72f:	c1 e1 18             	shl    ecx,0x18
c001c732:	29 f1                	sub    ecx,esi
c001c734:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c737:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c73a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c73d:	74 51                	je     c001c790 <SoundPort::buffer8(signed char*, int)+0x8c>
c001c73f:	31 ff                	xor    edi,edi
c001c741:	eb 25                	jmp    c001c768 <SoundPort::buffer8(signed char*, int)+0x64>
c001c743:	90                   	nop
c001c744:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001c749:	8d 59 01             	lea    ebx,[ecx+0x1]
c001c74c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001c74f:	89 f3                	mov    ebx,esi
c001c751:	c1 e3 18             	shl    ebx,0x18
c001c754:	29 f3                	sub    ebx,esi
c001c756:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001c759:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001c75c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c75f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c762:	74 1c                	je     c001c780 <SoundPort::buffer8(signed char*, int)+0x7c>
c001c764:	89 c7                	mov    edi,eax
c001c766:	66 90                	xchg   ax,ax
c001c768:	8d 47 01             	lea    eax,[edi+0x1]
c001c76b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001c76f:	75 d3                	jne    c001c744 <SoundPort::buffer8(signed char*, int)+0x40>
c001c771:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c775:	8d 76 00             	lea    esi,[esi+0x0]
c001c778:	5b                   	pop    ebx
c001c779:	5e                   	pop    esi
c001c77a:	5f                   	pop    edi
c001c77b:	5d                   	pop    ebp
c001c77c:	c3                   	ret    
c001c77d:	8d 76 00             	lea    esi,[esi+0x0]
c001c780:	5b                   	pop    ebx
c001c781:	8d 47 02             	lea    eax,[edi+0x2]
c001c784:	5e                   	pop    esi
c001c785:	5f                   	pop    edi
c001c786:	5d                   	pop    ebp
c001c787:	c3                   	ret    
c001c788:	5b                   	pop    ebx
c001c789:	31 c0                	xor    eax,eax
c001c78b:	5e                   	pop    esi
c001c78c:	5f                   	pop    edi
c001c78d:	5d                   	pop    ebp
c001c78e:	c3                   	ret    
c001c78f:	90                   	nop
c001c790:	b8 01 00 00 00       	mov    eax,0x1
c001c795:	eb e1                	jmp    c001c778 <SoundPort::buffer8(signed char*, int)+0x74>
c001c797:	90                   	nop

c001c798 <SoundPort::buffer16(short*, int)>:
c001c798:	55                   	push   ebp
c001c799:	57                   	push   edi
c001c79a:	56                   	push   esi
c001c79b:	53                   	push   ebx
c001c79c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7a0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001c7a4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c7a7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c7aa:	74 70                	je     c001c81c <SoundPort::buffer16(short*, int)+0x84>
c001c7ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c7b0:	85 c9                	test   ecx,ecx
c001c7b2:	7e 68                	jle    c001c81c <SoundPort::buffer16(short*, int)+0x84>
c001c7b4:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001c7b8:	8d 48 01             	lea    ecx,[eax+0x1]
c001c7bb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c7be:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c7c1:	89 f1                	mov    ecx,esi
c001c7c3:	c1 e1 10             	shl    ecx,0x10
c001c7c6:	29 f1                	sub    ecx,esi
c001c7c8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c7cb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7ce:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c7d1:	74 51                	je     c001c824 <SoundPort::buffer16(short*, int)+0x8c>
c001c7d3:	31 ff                	xor    edi,edi
c001c7d5:	eb 25                	jmp    c001c7fc <SoundPort::buffer16(short*, int)+0x64>
c001c7d7:	90                   	nop
c001c7d8:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001c7dd:	8d 59 01             	lea    ebx,[ecx+0x1]
c001c7e0:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001c7e3:	89 f3                	mov    ebx,esi
c001c7e5:	c1 e3 10             	shl    ebx,0x10
c001c7e8:	29 f3                	sub    ebx,esi
c001c7ea:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001c7ed:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001c7f0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7f3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c7f6:	74 1c                	je     c001c814 <SoundPort::buffer16(short*, int)+0x7c>
c001c7f8:	89 c7                	mov    edi,eax
c001c7fa:	66 90                	xchg   ax,ax
c001c7fc:	8d 47 01             	lea    eax,[edi+0x1]
c001c7ff:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001c803:	75 d3                	jne    c001c7d8 <SoundPort::buffer16(short*, int)+0x40>
c001c805:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c809:	8d 76 00             	lea    esi,[esi+0x0]
c001c80c:	5b                   	pop    ebx
c001c80d:	5e                   	pop    esi
c001c80e:	5f                   	pop    edi
c001c80f:	5d                   	pop    ebp
c001c810:	c3                   	ret    
c001c811:	8d 76 00             	lea    esi,[esi+0x0]
c001c814:	5b                   	pop    ebx
c001c815:	8d 47 02             	lea    eax,[edi+0x2]
c001c818:	5e                   	pop    esi
c001c819:	5f                   	pop    edi
c001c81a:	5d                   	pop    ebp
c001c81b:	c3                   	ret    
c001c81c:	5b                   	pop    ebx
c001c81d:	31 c0                	xor    eax,eax
c001c81f:	5e                   	pop    esi
c001c820:	5f                   	pop    edi
c001c821:	5d                   	pop    ebp
c001c822:	c3                   	ret    
c001c823:	90                   	nop
c001c824:	b8 01 00 00 00       	mov    eax,0x1
c001c829:	eb e1                	jmp    c001c80c <SoundPort::buffer16(short*, int)+0x74>
c001c82b:	90                   	nop

c001c82c <SoundPort::buffer32(int*, int)>:
c001c82c:	55                   	push   ebp
c001c82d:	57                   	push   edi
c001c82e:	56                   	push   esi
c001c82f:	53                   	push   ebx
c001c830:	83 ec 04             	sub    esp,0x4
c001c833:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c83b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c83e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c842:	89 04 24             	mov    DWORD PTR [esp],eax
c001c845:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c848:	74 5a                	je     c001c8a4 <SoundPort::buffer32(int*, int)+0x78>
c001c84a:	85 c0                	test   eax,eax
c001c84c:	7e 56                	jle    c001c8a4 <SoundPort::buffer32(int*, int)+0x78>
c001c84e:	8d 71 01             	lea    esi,[ecx+0x1]
c001c851:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c854:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c857:	8b 37                	mov    esi,DWORD PTR [edi]
c001c859:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c85c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c85f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c862:	74 4c                	je     c001c8b0 <SoundPort::buffer32(int*, int)+0x84>
c001c864:	31 f6                	xor    esi,esi
c001c866:	eb 1c                	jmp    c001c884 <SoundPort::buffer32(int*, int)+0x58>
c001c868:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c86b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c86e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c871:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c874:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c878:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c87b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c87e:	74 18                	je     c001c898 <SoundPort::buffer32(int*, int)+0x6c>
c001c880:	89 de                	mov    esi,ebx
c001c882:	66 90                	xchg   ax,ax
c001c884:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c887:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001c88a:	75 dc                	jne    c001c868 <SoundPort::buffer32(int*, int)+0x3c>
c001c88c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c88f:	90                   	nop
c001c890:	83 c4 04             	add    esp,0x4
c001c893:	5b                   	pop    ebx
c001c894:	5e                   	pop    esi
c001c895:	5f                   	pop    edi
c001c896:	5d                   	pop    ebp
c001c897:	c3                   	ret    
c001c898:	83 c4 04             	add    esp,0x4
c001c89b:	8d 46 02             	lea    eax,[esi+0x2]
c001c89e:	5b                   	pop    ebx
c001c89f:	5e                   	pop    esi
c001c8a0:	5f                   	pop    edi
c001c8a1:	5d                   	pop    ebp
c001c8a2:	c3                   	ret    
c001c8a3:	90                   	nop
c001c8a4:	83 c4 04             	add    esp,0x4
c001c8a7:	31 c0                	xor    eax,eax
c001c8a9:	5b                   	pop    ebx
c001c8aa:	5e                   	pop    esi
c001c8ab:	5f                   	pop    edi
c001c8ac:	5d                   	pop    ebp
c001c8ad:	c3                   	ret    
c001c8ae:	66 90                	xchg   ax,ax
c001c8b0:	b8 01 00 00 00       	mov    eax,0x1
c001c8b5:	eb d9                	jmp    c001c890 <SoundPort::buffer32(int*, int)+0x64>
c001c8b7:	90                   	nop

c001c8b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c8b8:	57                   	push   edi
c001c8b9:	56                   	push   esi
c001c8ba:	53                   	push   ebx
c001c8bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8bf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c8c3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c8c9:	39 03                	cmp    DWORD PTR [ebx],eax
c001c8cb:	74 13                	je     c001c8e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c8cd:	83 ec 0c             	sub    esp,0xc
c001c8d0:	68 2c 4c 02 c0       	push   0xc0024c2c
c001c8d5:	e8 8c 2f ff ff       	call   c000f866 <KePanic(char const*)>
c001c8da:	83 c4 10             	add    esp,0x10
c001c8dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c8e0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c8e6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c8e9:	74 11                	je     c001c8fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c8eb:	83 ec 0c             	sub    esp,0xc
c001c8ee:	68 6b 4c 02 c0       	push   0xc0024c6b
c001c8f3:	e8 6e 2f ff ff       	call   c000f866 <KePanic(char const*)>
c001c8f8:	83 c4 10             	add    esp,0x10
c001c8fb:	90                   	nop
c001c8fc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c902:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c905:	74 11                	je     c001c918 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c907:	83 ec 0c             	sub    esp,0xc
c001c90a:	68 6b 4c 02 c0       	push   0xc0024c6b
c001c90f:	e8 52 2f ff ff       	call   c000f866 <KePanic(char const*)>
c001c914:	83 c4 10             	add    esp,0x10
c001c917:	90                   	nop
c001c918:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001c91b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001c91f:	7e 07                	jle    c001c928 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c921:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c925:	8d 76 00             	lea    esi,[esi+0x0]
c001c928:	85 f6                	test   esi,esi
c001c92a:	7e 2c                	jle    c001c958 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001c92c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c930:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c933:	31 c9                	xor    ecx,ecx
c001c935:	01 d7                	add    edi,edx
c001c937:	90                   	nop
c001c938:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c93b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c93e:	85 c0                	test   eax,eax
c001c940:	79 06                	jns    c001c948 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c942:	05 ff 7f 00 00       	add    eax,0x7fff
c001c947:	90                   	nop
c001c948:	c1 f8 0f             	sar    eax,0xf
c001c94b:	83 c1 04             	add    ecx,0x4
c001c94e:	66 01 02             	add    WORD PTR [edx],ax
c001c951:	83 c2 02             	add    edx,0x2
c001c954:	39 d7                	cmp    edi,edx
c001c956:	75 e0                	jne    c001c938 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c958:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c95b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c95e:	83 ec 04             	sub    esp,0x4
c001c961:	29 f0                	sub    eax,esi
c001c963:	c1 e0 02             	shl    eax,0x2
c001c966:	50                   	push   eax
c001c967:	8d 04 b2             	lea    eax,[edx+esi*4]
c001c96a:	50                   	push   eax
c001c96b:	52                   	push   edx
c001c96c:	e8 5f 3a fe ff       	call   c00003d0 <memmove>
c001c971:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c974:	83 c4 10             	add    esp,0x10
c001c977:	29 f0                	sub    eax,esi
c001c979:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001c97c:	89 f0                	mov    eax,esi
c001c97e:	5b                   	pop    ebx
c001c97f:	5e                   	pop    esi
c001c980:	5f                   	pop    edi
c001c981:	c3                   	ret    
c001c982:	66 90                	xchg   ax,ax

c001c984 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c984:	57                   	push   edi
c001c985:	56                   	push   esi
c001c986:	53                   	push   ebx
c001c987:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c98b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c98f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c993:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001c999:	39 06                	cmp    DWORD PTR [esi],eax
c001c99b:	74 13                	je     c001c9b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001c99d:	83 ec 0c             	sub    esp,0xc
c001c9a0:	68 4c 4c 02 c0       	push   0xc0024c4c
c001c9a5:	e8 bc 2e ff ff       	call   c000f866 <KePanic(char const*)>
c001c9aa:	83 c4 10             	add    esp,0x10
c001c9ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c9b0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001c9b6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001c9b9:	74 11                	je     c001c9cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001c9bb:	83 ec 0c             	sub    esp,0xc
c001c9be:	68 87 4c 02 c0       	push   0xc0024c87
c001c9c3:	e8 9e 2e ff ff       	call   c000f866 <KePanic(char const*)>
c001c9c8:	83 c4 10             	add    esp,0x10
c001c9cb:	90                   	nop
c001c9cc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001c9d2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001c9d5:	74 11                	je     c001c9e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001c9d7:	83 ec 0c             	sub    esp,0xc
c001c9da:	68 87 4c 02 c0       	push   0xc0024c87
c001c9df:	e8 82 2e ff ff       	call   c000f866 <KePanic(char const*)>
c001c9e4:	83 c4 10             	add    esp,0x10
c001c9e7:	90                   	nop
c001c9e8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001c9eb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001c9ef:	7e 07                	jle    c001c9f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001c9f1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c9f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c9f8:	85 ff                	test   edi,edi
c001c9fa:	7e 1c                	jle    c001ca18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001c9fc:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ca03:	31 c0                	xor    eax,eax
c001ca05:	8d 76 00             	lea    esi,[esi+0x0]
c001ca08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ca0b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ca0e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ca11:	83 c0 04             	add    eax,0x4
c001ca14:	39 c1                	cmp    ecx,eax
c001ca16:	75 f0                	jne    c001ca08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ca18:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ca1b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca1e:	83 ec 04             	sub    esp,0x4
c001ca21:	29 f8                	sub    eax,edi
c001ca23:	c1 e0 02             	shl    eax,0x2
c001ca26:	50                   	push   eax
c001ca27:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ca2a:	50                   	push   eax
c001ca2b:	52                   	push   edx
c001ca2c:	e8 9f 39 fe ff       	call   c00003d0 <memmove>
c001ca31:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca34:	83 c4 10             	add    esp,0x10
c001ca37:	29 f8                	sub    eax,edi
c001ca39:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001ca3c:	89 f8                	mov    eax,edi
c001ca3e:	5b                   	pop    ebx
c001ca3f:	5e                   	pop    esi
c001ca40:	5f                   	pop    edi
c001ca41:	c3                   	ret    

c001ca42 <PCI::open(int, int, void*)>:
c001ca42:	83 ec 18             	sub    esp,0x18
c001ca45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ca4d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ca53:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca55:	50                   	push   eax
c001ca56:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ca59:	31 c0                	xor    eax,eax
c001ca5b:	83 c4 1c             	add    esp,0x1c
c001ca5e:	c3                   	ret    
c001ca5f:	90                   	nop

c001ca60 <PCI::close(int, int, void*)>:
c001ca60:	31 c0                	xor    eax,eax
c001ca62:	c3                   	ret    
c001ca63:	90                   	nop

c001ca64 <PCI::PCI()>:
c001ca64:	83 ec 0c             	sub    esp,0xc
c001ca67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca6b:	83 ec 08             	sub    esp,0x8
c001ca6e:	68 a3 4c 02 c0       	push   0xc0024ca3
c001ca73:	50                   	push   eax
c001ca74:	e8 93 be fe ff       	call   c000890c <Bus::Bus(char const*)>
c001ca79:	83 c4 10             	add    esp,0x10
c001ca7c:	ba b0 4d 02 c0       	mov    edx,0xc0024db0
c001ca81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca85:	89 10                	mov    DWORD PTR [eax],edx
c001ca87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca8b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ca95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca99:	a3 40 e4 02 c0       	mov    ds:0xc002e440,eax
c001ca9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001caa8:	0f b6 d0             	movzx  edx,al
c001caab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caaf:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cac0:	0f b6 d0             	movzx  edx,al
c001cac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cad6:	8d 50 01             	lea    edx,[eax+0x1]
c001cad9:	88 d1                	mov    cl,dl
c001cadb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cadf:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001cae5:	0f b6 d0             	movzx  edx,al
c001cae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caec:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001caf0:	83 c9 c0             	or     ecx,0xffffffc0
c001caf3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001caf7:	90                   	nop
c001caf8:	83 c4 0c             	add    esp,0xc
c001cafb:	c3                   	ret    

c001cafc <PCI::readBAR8(unsigned int, int)>:
c001cafc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb04:	f6 c2 01             	test   dl,0x1
c001cb07:	74 07                	je     c001cb10 <PCI::readBAR8(unsigned int, int)+0x14>
c001cb09:	83 e2 fc             	and    edx,0xfffffffc
c001cb0c:	01 c2                	add    edx,eax
c001cb0e:	ec                   	in     al,dx
c001cb0f:	c3                   	ret    
c001cb10:	83 e2 f0             	and    edx,0xfffffff0
c001cb13:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cb16:	c3                   	ret    
c001cb17:	90                   	nop

c001cb18 <PCI::readBAR16(unsigned int, int)>:
c001cb18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb20:	f6 c2 01             	test   dl,0x1
c001cb23:	74 08                	je     c001cb2d <PCI::readBAR16(unsigned int, int)+0x15>
c001cb25:	83 e2 fc             	and    edx,0xfffffffc
c001cb28:	01 c2                	add    edx,eax
c001cb2a:	66 ed                	in     ax,dx
c001cb2c:	c3                   	ret    
c001cb2d:	83 e2 f0             	and    edx,0xfffffff0
c001cb30:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cb34:	c3                   	ret    
c001cb35:	90                   	nop

c001cb36 <PCI::readBAR32(unsigned int, int)>:
c001cb36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb3e:	f6 c2 01             	test   dl,0x1
c001cb41:	74 07                	je     c001cb4a <PCI::readBAR32(unsigned int, int)+0x14>
c001cb43:	83 e2 fc             	and    edx,0xfffffffc
c001cb46:	01 c2                	add    edx,eax
c001cb48:	ed                   	in     eax,dx
c001cb49:	c3                   	ret    
c001cb4a:	83 e2 f0             	and    edx,0xfffffff0
c001cb4d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cb50:	c3                   	ret    
c001cb51:	90                   	nop

c001cb52 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cb52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb5a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb5e:	f6 c2 01             	test   dl,0x1
c001cb61:	74 07                	je     c001cb6a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cb63:	83 e2 fc             	and    edx,0xfffffffc
c001cb66:	01 ca                	add    edx,ecx
c001cb68:	ee                   	out    dx,al
c001cb69:	c3                   	ret    
c001cb6a:	83 e2 f0             	and    edx,0xfffffff0
c001cb6d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cb70:	c3                   	ret    
c001cb71:	90                   	nop

c001cb72 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cb72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb7e:	f6 c2 01             	test   dl,0x1
c001cb81:	74 08                	je     c001cb8b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cb83:	83 e2 fc             	and    edx,0xfffffffc
c001cb86:	01 ca                	add    edx,ecx
c001cb88:	66 ef                	out    dx,ax
c001cb8a:	c3                   	ret    
c001cb8b:	83 e2 f0             	and    edx,0xfffffff0
c001cb8e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cb92:	c3                   	ret    
c001cb93:	90                   	nop

c001cb94 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cb94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cba0:	f6 c2 01             	test   dl,0x1
c001cba3:	74 07                	je     c001cbac <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cba5:	83 e2 fc             	and    edx,0xfffffffc
c001cba8:	01 ca                	add    edx,ecx
c001cbaa:	ef                   	out    dx,eax
c001cbab:	c3                   	ret    
c001cbac:	83 e2 f0             	and    edx,0xfffffff0
c001cbaf:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cbb2:	c3                   	ret    
c001cbb3:	90                   	nop

c001cbb4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cbb4:	55                   	push   ebp
c001cbb5:	57                   	push   edi
c001cbb6:	56                   	push   esi
c001cbb7:	53                   	push   ebx
c001cbb8:	83 ec 0c             	sub    esp,0xc
c001cbbb:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001cbc0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cbc4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cbc8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cbcc:	83 fe 07             	cmp    esi,0x7
c001cbcf:	76 10                	jbe    c001cbe1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cbd1:	83 ec 0c             	sub    esp,0xc
c001cbd4:	68 ab 4c 02 c0       	push   0xc0024cab
c001cbd9:	e8 88 2c ff ff       	call   c000f866 <KePanic(char const*)>
c001cbde:	83 c4 10             	add    esp,0x10
c001cbe1:	0f b6 db             	movzx  ebx,bl
c001cbe4:	83 fb 0f             	cmp    ebx,0xf
c001cbe7:	76 10                	jbe    c001cbf9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001cbe9:	83 ec 0c             	sub    esp,0xc
c001cbec:	68 db 4c 02 c0       	push   0xc0024cdb
c001cbf1:	e8 70 2c ff ff       	call   c000f866 <KePanic(char const*)>
c001cbf6:	83 c4 10             	add    esp,0x10
c001cbf9:	8d 04 36             	lea    eax,[esi+esi*1]
c001cbfc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cc01:	83 c8 f0             	or     eax,0xfffffff0
c001cc04:	ee                   	out    dx,al
c001cc05:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cc0a:	89 e8                	mov    eax,ebp
c001cc0c:	ee                   	out    dx,al
c001cc0d:	83 c4 0c             	add    esp,0xc
c001cc10:	89 d8                	mov    eax,ebx
c001cc12:	89 f9                	mov    ecx,edi
c001cc14:	c1 e0 08             	shl    eax,0x8
c001cc17:	0f b6 d9             	movzx  ebx,cl
c001cc1a:	83 e3 fc             	and    ebx,0xfffffffc
c001cc1d:	09 d8                	or     eax,ebx
c001cc1f:	5b                   	pop    ebx
c001cc20:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001cc25:	5e                   	pop    esi
c001cc26:	5f                   	pop    edi
c001cc27:	5d                   	pop    ebp
c001cc28:	c3                   	ret    
c001cc29:	90                   	nop

c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cc2a:	57                   	push   edi
c001cc2b:	56                   	push   esi
c001cc2c:	53                   	push   ebx
c001cc2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc35:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cc3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cc3f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc43:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cc47:	83 ff 01             	cmp    edi,0x1
c001cc4a:	75 3f                	jne    c001cc8b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001cc4c:	89 de                	mov    esi,ebx
c001cc4e:	0f b6 c0             	movzx  eax,al
c001cc51:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cc57:	c1 e0 10             	shl    eax,0x10
c001cc5a:	0f b6 c9             	movzx  ecx,cl
c001cc5d:	09 f0                	or     eax,esi
c001cc5f:	c1 e1 08             	shl    ecx,0x8
c001cc62:	0f b6 d2             	movzx  edx,dl
c001cc65:	09 c8                	or     eax,ecx
c001cc67:	c1 e2 0b             	shl    edx,0xb
c001cc6a:	09 d0                	or     eax,edx
c001cc6c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cc71:	0d 00 00 00 80       	or     eax,0x80000000
c001cc76:	ef                   	out    dx,eax
c001cc77:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cc7c:	ed                   	in     eax,dx
c001cc7d:	83 e3 02             	and    ebx,0x2
c001cc80:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001cc87:	d3 e8                	shr    eax,cl
c001cc89:	eb 44                	jmp    c001cccf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001cc8b:	83 ff 02             	cmp    edi,0x2
c001cc8e:	75 2d                	jne    c001ccbd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001cc90:	83 ec 0c             	sub    esp,0xc
c001cc93:	0f b6 c9             	movzx  ecx,cl
c001cc96:	0f b6 d2             	movzx  edx,dl
c001cc99:	0f b6 fb             	movzx  edi,bl
c001cc9c:	0f b6 c0             	movzx  eax,al
c001cc9f:	57                   	push   edi
c001cca0:	51                   	push   ecx
c001cca1:	52                   	push   edx
c001cca2:	50                   	push   eax
c001cca3:	56                   	push   esi
c001cca4:	e8 0b ff ff ff       	call   c001cbb4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cca9:	89 c2                	mov    edx,eax
c001ccab:	ed                   	in     eax,dx
c001ccac:	83 e3 02             	and    ebx,0x2
c001ccaf:	83 c4 20             	add    esp,0x20
c001ccb2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ccb9:	d3 e8                	shr    eax,cl
c001ccbb:	eb 12                	jmp    c001cccf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ccbd:	83 ec 0c             	sub    esp,0xc
c001ccc0:	68 0b 4d 02 c0       	push   0xc0024d0b
c001ccc5:	e8 9c 2b ff ff       	call   c000f866 <KePanic(char const*)>
c001ccca:	83 c4 10             	add    esp,0x10
c001cccd:	31 c0                	xor    eax,eax
c001cccf:	5b                   	pop    ebx
c001ccd0:	5e                   	pop    esi
c001ccd1:	5f                   	pop    edi
c001ccd2:	c3                   	ret    
c001ccd3:	90                   	nop

c001ccd4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ccd4:	83 ec 18             	sub    esp,0x18
c001ccd7:	6a 00                	push   0x0
c001ccd9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccde:	50                   	push   eax
c001ccdf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cce4:	50                   	push   eax
c001cce5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccea:	50                   	push   eax
c001cceb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccef:	e8 36 ff ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccf4:	83 c4 2c             	add    esp,0x2c
c001ccf7:	c3                   	ret    

c001ccf8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ccf8:	83 ec 18             	sub    esp,0x18
c001ccfb:	6a 0e                	push   0xe
c001ccfd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd02:	50                   	push   eax
c001cd03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd08:	50                   	push   eax
c001cd09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd0e:	50                   	push   eax
c001cd0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd13:	e8 12 ff ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd18:	83 c4 2c             	add    esp,0x2c
c001cd1b:	0f b6 c0             	movzx  eax,al
c001cd1e:	c3                   	ret    
c001cd1f:	90                   	nop

c001cd20 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cd20:	55                   	push   ebp
c001cd21:	57                   	push   edi
c001cd22:	56                   	push   esi
c001cd23:	53                   	push   ebx
c001cd24:	83 ec 18             	sub    esp,0x18
c001cd27:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cd2c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cd31:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cd36:	6a 0a                	push   0xa
c001cd38:	56                   	push   esi
c001cd39:	55                   	push   ebp
c001cd3a:	57                   	push   edi
c001cd3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd3f:	e8 e6 fe ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd44:	83 c4 14             	add    esp,0x14
c001cd47:	89 c3                	mov    ebx,eax
c001cd49:	6a 0a                	push   0xa
c001cd4b:	0f b6 db             	movzx  ebx,bl
c001cd4e:	56                   	push   esi
c001cd4f:	55                   	push   ebp
c001cd50:	57                   	push   edi
c001cd51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd55:	e8 d0 fe ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd5a:	83 c4 2c             	add    esp,0x2c
c001cd5d:	25 00 ff 00 00       	and    eax,0xff00
c001cd62:	09 d8                	or     eax,ebx
c001cd64:	5b                   	pop    ebx
c001cd65:	5e                   	pop    esi
c001cd66:	5f                   	pop    edi
c001cd67:	5d                   	pop    ebp
c001cd68:	c3                   	ret    
c001cd69:	90                   	nop

c001cd6a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cd6a:	83 ec 18             	sub    esp,0x18
c001cd6d:	6a 08                	push   0x8
c001cd6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd74:	50                   	push   eax
c001cd75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd7a:	50                   	push   eax
c001cd7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd80:	50                   	push   eax
c001cd81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd85:	e8 a0 fe ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd8a:	83 c4 2c             	add    esp,0x2c
c001cd8d:	0f b6 c4             	movzx  eax,ah
c001cd90:	c3                   	ret    
c001cd91:	90                   	nop

c001cd92 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001cd92:	83 ec 18             	sub    esp,0x18
c001cd95:	6a 08                	push   0x8
c001cd97:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd9c:	50                   	push   eax
c001cd9d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cda2:	50                   	push   eax
c001cda3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cda8:	50                   	push   eax
c001cda9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdad:	e8 78 fe ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdb2:	83 c4 2c             	add    esp,0x2c
c001cdb5:	c3                   	ret    

c001cdb6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001cdb6:	83 ec 18             	sub    esp,0x18
c001cdb9:	6a 3c                	push   0x3c
c001cdbb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdc0:	50                   	push   eax
c001cdc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdc6:	50                   	push   eax
c001cdc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdcc:	50                   	push   eax
c001cdcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdd1:	e8 54 fe ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdd6:	83 c4 2c             	add    esp,0x2c
c001cdd9:	c3                   	ret    

c001cdda <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001cdda:	83 ec 18             	sub    esp,0x18
c001cddd:	6a 18                	push   0x18
c001cddf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cde4:	50                   	push   eax
c001cde5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdea:	50                   	push   eax
c001cdeb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdf0:	50                   	push   eax
c001cdf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdf5:	e8 30 fe ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdfa:	83 c4 2c             	add    esp,0x2c
c001cdfd:	0f b6 c4             	movzx  eax,ah
c001ce00:	c3                   	ret    
c001ce01:	90                   	nop

c001ce02 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ce02:	55                   	push   ebp
c001ce03:	57                   	push   edi
c001ce04:	56                   	push   esi
c001ce05:	53                   	push   ebx
c001ce06:	83 ec 28             	sub    esp,0x28
c001ce09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ce0d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001ce12:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001ce17:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001ce1c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ce23:	8d 43 12             	lea    eax,[ebx+0x12]
c001ce26:	83 c3 10             	add    ebx,0x10
c001ce29:	0f b6 c0             	movzx  eax,al
c001ce2c:	0f b6 db             	movzx  ebx,bl
c001ce2f:	50                   	push   eax
c001ce30:	51                   	push   ecx
c001ce31:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001ce35:	57                   	push   edi
c001ce36:	55                   	push   ebp
c001ce37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ce3b:	e8 ea fd ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce40:	83 c4 14             	add    esp,0x14
c001ce43:	89 c6                	mov    esi,eax
c001ce45:	53                   	push   ebx
c001ce46:	c1 e6 10             	shl    esi,0x10
c001ce49:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce4d:	51                   	push   ecx
c001ce4e:	57                   	push   edi
c001ce4f:	55                   	push   ebp
c001ce50:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ce54:	e8 d1 fd ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce59:	83 c4 3c             	add    esp,0x3c
c001ce5c:	0f b7 c0             	movzx  eax,ax
c001ce5f:	5b                   	pop    ebx
c001ce60:	09 f0                	or     eax,esi
c001ce62:	5e                   	pop    esi
c001ce63:	5f                   	pop    edi
c001ce64:	5d                   	pop    ebp
c001ce65:	c3                   	ret    

c001ce66 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001ce66:	55                   	push   ebp
c001ce67:	57                   	push   edi
c001ce68:	56                   	push   esi
c001ce69:	53                   	push   ebx
c001ce6a:	83 ec 0c             	sub    esp,0xc
c001ce6d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ce71:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ce75:	89 f5                	mov    ebp,esi
c001ce77:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001ce7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ce85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ce89:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ce8d:	83 f9 01             	cmp    ecx,0x1
c001ce90:	75 5d                	jne    c001ceef <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001ce92:	0f b6 c8             	movzx  ecx,al
c001ce95:	0f b6 d2             	movzx  edx,dl
c001ce98:	c1 e1 10             	shl    ecx,0x10
c001ce9b:	c1 e2 0b             	shl    edx,0xb
c001ce9e:	89 f0                	mov    eax,esi
c001cea0:	25 fc 00 00 00       	and    eax,0xfc
c001cea5:	09 c1                	or     ecx,eax
c001cea7:	89 e8                	mov    eax,ebp
c001cea9:	0f b6 c0             	movzx  eax,al
c001ceac:	c1 e0 08             	shl    eax,0x8
c001ceaf:	09 c1                	or     ecx,eax
c001ceb1:	09 d1                	or     ecx,edx
c001ceb3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ceb8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cebe:	89 c8                	mov    eax,ecx
c001cec0:	ef                   	out    dx,eax
c001cec1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cec6:	ed                   	in     eax,dx
c001cec7:	0f b7 db             	movzx  ebx,bx
c001ceca:	83 e6 02             	and    esi,0x2
c001cecd:	74 0a                	je     c001ced9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cecf:	0f b7 d0             	movzx  edx,ax
c001ced2:	c1 e3 10             	shl    ebx,0x10
c001ced5:	09 d3                	or     ebx,edx
c001ced7:	eb 05                	jmp    c001cede <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001ced9:	66 31 c0             	xor    ax,ax
c001cedc:	09 c3                	or     ebx,eax
c001cede:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cee3:	89 c8                	mov    eax,ecx
c001cee5:	ef                   	out    dx,eax
c001cee6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ceeb:	89 d8                	mov    eax,ebx
c001ceed:	eb 41                	jmp    c001cf30 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001ceef:	83 f9 02             	cmp    ecx,0x2
c001cef2:	75 45                	jne    c001cf39 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cef4:	83 ec 0c             	sub    esp,0xc
c001cef7:	0f b6 d2             	movzx  edx,dl
c001cefa:	89 f1                	mov    ecx,esi
c001cefc:	0f b6 c0             	movzx  eax,al
c001ceff:	0f b6 f1             	movzx  esi,cl
c001cf02:	89 e9                	mov    ecx,ebp
c001cf04:	56                   	push   esi
c001cf05:	0f b6 c9             	movzx  ecx,cl
c001cf08:	51                   	push   ecx
c001cf09:	52                   	push   edx
c001cf0a:	50                   	push   eax
c001cf0b:	57                   	push   edi
c001cf0c:	e8 a3 fc ff ff       	call   c001cbb4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf11:	89 c2                	mov    edx,eax
c001cf13:	ed                   	in     eax,dx
c001cf14:	83 c4 20             	add    esp,0x20
c001cf17:	0f b7 db             	movzx  ebx,bx
c001cf1a:	f6 c2 02             	test   dl,0x2
c001cf1d:	74 0c                	je     c001cf2b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001cf1f:	0f b7 c8             	movzx  ecx,ax
c001cf22:	89 d8                	mov    eax,ebx
c001cf24:	c1 e0 10             	shl    eax,0x10
c001cf27:	09 c8                	or     eax,ecx
c001cf29:	eb 05                	jmp    c001cf30 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cf2b:	66 31 c0             	xor    ax,ax
c001cf2e:	09 d8                	or     eax,ebx
c001cf30:	ef                   	out    dx,eax
c001cf31:	83 c4 0c             	add    esp,0xc
c001cf34:	5b                   	pop    ebx
c001cf35:	5e                   	pop    esi
c001cf36:	5f                   	pop    edi
c001cf37:	5d                   	pop    ebp
c001cf38:	c3                   	ret    
c001cf39:	c7 44 24 20 0b 4d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024d0b
c001cf41:	83 c4 0c             	add    esp,0xc
c001cf44:	5b                   	pop    ebx
c001cf45:	5e                   	pop    esi
c001cf46:	5f                   	pop    edi
c001cf47:	5d                   	pop    ebp
c001cf48:	e9 19 29 ff ff       	jmp    c000f866 <KePanic(char const*)>
c001cf4d:	90                   	nop

c001cf4e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cf4e:	55                   	push   ebp
c001cf4f:	57                   	push   edi
c001cf50:	56                   	push   esi
c001cf51:	53                   	push   ebx
c001cf52:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001cf58:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001cf5f:	80 3d 4c e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e44c,0x0
c001cf66:	0f 85 bd 00 00 00    	jne    c001d029 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001cf6c:	83 ec 0c             	sub    esp,0xc
c001cf6f:	68 14 01 00 00       	push   0x114
c001cf74:	e8 a6 25 ff ff       	call   c000f51f <malloc>
c001cf79:	83 c4 0c             	add    esp,0xc
c001cf7c:	89 c3                	mov    ebx,eax
c001cf7e:	ff 35 58 da 02 c0    	push   DWORD PTR ds:0xc002da58
c001cf84:	68 11 4d 02 c0       	push   0xc0024d11
c001cf89:	50                   	push   eax
c001cf8a:	e8 a3 b1 fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001cf8f:	83 c4 10             	add    esp,0x10
c001cf92:	85 db                	test   ebx,ebx
c001cf94:	0f 84 67 02 00 00    	je     c001d201 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001cf9a:	56                   	push   esi
c001cf9b:	56                   	push   esi
c001cf9c:	6a 01                	push   0x1
c001cf9e:	53                   	push   ebx
c001cf9f:	e8 ac b1 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001cfa4:	83 c4 10             	add    esp,0x10
c001cfa7:	85 c0                	test   eax,eax
c001cfa9:	0f 85 52 02 00 00    	jne    c001d201 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001cfaf:	52                   	push   edx
c001cfb0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001cfb4:	50                   	push   eax
c001cfb5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001cfb9:	50                   	push   eax
c001cfba:	53                   	push   ebx
c001cfbb:	e8 92 b4 fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001cfc0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cfc4:	40                   	inc    eax
c001cfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c001cfc8:	e8 52 25 ff ff       	call   c000f51f <malloc>
c001cfcd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001cfd1:	a3 48 e4 02 c0       	mov    ds:0xc002e448,eax
c001cfd6:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001cfda:	59                   	pop    ecx
c001cfdb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001cfdd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001cfe1:	51                   	push   ecx
c001cfe2:	50                   	push   eax
c001cfe3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001cfe7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001cfeb:	53                   	push   ebx
c001cfec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cfef:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001cff3:	83 c4 20             	add    esp,0x20
c001cff6:	89 c8                	mov    eax,ecx
c001cff8:	99                   	cdq    
c001cff9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001cffd:	0f 85 fe 01 00 00    	jne    c001d201 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001d003:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001d007:	0f 85 f4 01 00 00    	jne    c001d201 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001d00d:	83 ec 0c             	sub    esp,0xc
c001d010:	53                   	push   ebx
c001d011:	e8 98 b1 fe ff       	call   c00081ae <File::close()>
c001d016:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d01a:	c6 05 4c e4 02 c0 01 	mov    BYTE PTR ds:0xc002e44c,0x1
c001d021:	a3 44 e4 02 c0       	mov    ds:0xc002e444,eax
c001d026:	83 c4 10             	add    esp,0x10
c001d029:	a1 44 e4 02 c0       	mov    eax,ds:0xc002e444
c001d02e:	8b 1d 48 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e448
c001d034:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d038:	31 f6                	xor    esi,esi
c001d03a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d042:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001d049:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001d04e:	31 c9                	xor    ecx,ecx
c001d050:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001d058:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001d05d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d069:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001d071:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d075:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001d079:	0f 8e 82 01 00 00    	jle    c001d201 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001d07f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001d082:	d4 40                	aam    0x40
c001d084:	d5 39                	aad    0x39
c001d086:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d08a:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001d08e:	d4 40                	aam    0x40
c001d090:	d5 39                	aad    0x39
c001d092:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d096:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001d09a:	d4 40                	aam    0x40
c001d09c:	d5 39                	aad    0x39
c001d09e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001d0a2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001d0a6:	d4 40                	aam    0x40
c001d0a8:	d5 39                	aad    0x39
c001d0aa:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d0ae:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001d0b2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d0b6:	3c 56                	cmp    al,0x56
c001d0b8:	74 43                	je     c001d0fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001d0ba:	d4 40                	aam    0x40
c001d0bc:	d5 39                	aad    0x39
c001d0be:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d0c1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001d0c5:	0f b6 c9             	movzx  ecx,cl
c001d0c8:	c1 e1 04             	shl    ecx,0x4
c001d0cb:	d4 40                	aam    0x40
c001d0cd:	d5 39                	aad    0x39
c001d0cf:	83 e8 30             	sub    eax,0x30
c001d0d2:	0f b6 c0             	movzx  eax,al
c001d0d5:	09 c1                	or     ecx,eax
c001d0d7:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001d0db:	c1 e1 04             	shl    ecx,0x4
c001d0de:	d4 40                	aam    0x40
c001d0e0:	d5 39                	aad    0x39
c001d0e2:	83 e8 30             	sub    eax,0x30
c001d0e5:	0f b6 c0             	movzx  eax,al
c001d0e8:	09 c1                	or     ecx,eax
c001d0ea:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001d0ee:	c1 e1 04             	shl    ecx,0x4
c001d0f1:	d4 40                	aam    0x40
c001d0f3:	d5 39                	aad    0x39
c001d0f5:	83 e8 30             	sub    eax,0x30
c001d0f8:	0f b6 c0             	movzx  eax,al
c001d0fb:	09 c1                	or     ecx,eax
c001d0fd:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001d101:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d105:	3c 58                	cmp    al,0x58
c001d107:	74 47                	je     c001d150 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001d109:	d4 40                	aam    0x40
c001d10b:	d5 39                	aad    0x39
c001d10d:	8d 50 d0             	lea    edx,[eax-0x30]
c001d110:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001d114:	0f b6 d2             	movzx  edx,dl
c001d117:	c1 e2 04             	shl    edx,0x4
c001d11a:	d4 40                	aam    0x40
c001d11c:	d5 39                	aad    0x39
c001d11e:	83 e8 30             	sub    eax,0x30
c001d121:	0f b6 c0             	movzx  eax,al
c001d124:	09 c2                	or     edx,eax
c001d126:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001d12a:	c1 e2 04             	shl    edx,0x4
c001d12d:	d4 40                	aam    0x40
c001d12f:	d5 39                	aad    0x39
c001d131:	83 e8 30             	sub    eax,0x30
c001d134:	0f b6 c0             	movzx  eax,al
c001d137:	09 c2                	or     edx,eax
c001d139:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001d13d:	c1 e2 04             	shl    edx,0x4
c001d140:	d4 40                	aam    0x40
c001d142:	d5 39                	aad    0x39
c001d144:	83 e8 30             	sub    eax,0x30
c001d147:	0f b6 c0             	movzx  eax,al
c001d14a:	09 c2                	or     edx,eax
c001d14c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d150:	83 c6 10             	add    esi,0x10
c001d153:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001d157:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001d15b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d15f:	83 fa 0a             	cmp    edx,0xa
c001d162:	74 0b                	je     c001d16f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001d164:	47                   	inc    edi
c001d165:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001d169:	75 19                	jne    c001d184 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001d16b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001d16f:	31 c0                	xor    eax,eax
c001d171:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001d176:	0f 94 c0             	sete   al
c001d179:	01 c6                	add    esi,eax
c001d17b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001d180:	75 0b                	jne    c001d18d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001d182:	eb 14                	jmp    c001d198 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001d184:	46                   	inc    esi
c001d185:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001d188:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d18b:	eb ca                	jmp    c001d157 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001d18d:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001d192:	0f 85 dd fe ff ff    	jne    c001d075 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001d198:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001d19d:	74 10                	je     c001d1af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001d19f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001d1a4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001d1a9:	0f 85 c6 fe ff ff    	jne    c001d075 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001d1af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1b3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d1b7:	83 e8 30             	sub    eax,0x30
c001d1ba:	83 ef 30             	sub    edi,0x30
c001d1bd:	c1 e0 04             	shl    eax,0x4
c001d1c0:	09 f8                	or     eax,edi
c001d1c2:	0f b6 c0             	movzx  eax,al
c001d1c5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001d1c9:	0f 85 a6 fe ff ff    	jne    c001d075 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001d1cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1d3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001d1d7:	83 e8 30             	sub    eax,0x30
c001d1da:	83 ef 30             	sub    edi,0x30
c001d1dd:	c1 e0 04             	shl    eax,0x4
c001d1e0:	09 f8                	or     eax,edi
c001d1e2:	0f b6 c0             	movzx  eax,al
c001d1e5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001d1e9:	0f 85 86 fe ff ff    	jne    c001d075 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001d1ef:	50                   	push   eax
c001d1f0:	50                   	push   eax
c001d1f1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001d1f5:	50                   	push   eax
c001d1f6:	55                   	push   ebp
c001d1f7:	e8 44 34 fe ff       	call   c0000640 <strcpy>
c001d1fc:	83 c4 10             	add    esp,0x10
c001d1ff:	eb 06                	jmp    c001d207 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001d201:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d205:	31 ed                	xor    ebp,ebp
c001d207:	81 c4 4c 01 00 00    	add    esp,0x14c
c001d20d:	89 e8                	mov    eax,ebp
c001d20f:	5b                   	pop    ebx
c001d210:	5e                   	pop    esi
c001d211:	5f                   	pop    edi
c001d212:	5d                   	pop    ebp
c001d213:	c3                   	ret    

c001d214 <PCI::checkBus(unsigned char)>:
c001d214:	56                   	push   esi
c001d215:	53                   	push   ebx
c001d216:	31 db                	xor    ebx,ebx
c001d218:	51                   	push   ecx
c001d219:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d21e:	52                   	push   edx
c001d21f:	53                   	push   ebx
c001d220:	43                   	inc    ebx
c001d221:	56                   	push   esi
c001d222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d226:	e8 6f 03 00 00       	call   c001d59a <PCI::checkDevice(unsigned char, unsigned char)>
c001d22b:	83 c4 10             	add    esp,0x10
c001d22e:	83 fb 20             	cmp    ebx,0x20
c001d231:	75 eb                	jne    c001d21e <PCI::checkBus(unsigned char)+0xa>
c001d233:	58                   	pop    eax
c001d234:	5b                   	pop    ebx
c001d235:	5e                   	pop    esi
c001d236:	c3                   	ret    
c001d237:	90                   	nop

c001d238 <PCI::foundDevice(PCIDeviceInfo)>:
c001d238:	55                   	push   ebp
c001d239:	57                   	push   edi
c001d23a:	56                   	push   esi
c001d23b:	53                   	push   ebx
c001d23c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001d242:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001d24a:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001d251:	3d ff ff 00 00       	cmp    eax,0xffff
c001d256:	0f 84 b7 01 00 00    	je     c001d413 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001d25c:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001d264:	66 81 fb 06 04       	cmp    bx,0x406
c001d269:	75 32                	jne    c001d29d <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001d26b:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001d273:	50                   	push   eax
c001d274:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001d27c:	50                   	push   eax
c001d27d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001d285:	50                   	push   eax
c001d286:	55                   	push   ebp
c001d287:	e8 4e fb ff ff       	call   c001cdda <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d28c:	59                   	pop    ecx
c001d28d:	0f b6 c0             	movzx  eax,al
c001d290:	5b                   	pop    ebx
c001d291:	50                   	push   eax
c001d292:	55                   	push   ebp
c001d293:	e8 7c ff ff ff       	call   c001d214 <PCI::checkBus(unsigned char)>
c001d298:	e9 16 01 00 00       	jmp    c001d3b3 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001d29d:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001d2a4:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001d2aa:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001d2ae:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001d2b5:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001d2bd:	85 c0                	test   eax,eax
c001d2bf:	74 36                	je     c001d2f7 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001d2c1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d2c4:	85 d2                	test   edx,edx
c001d2c6:	74 2b                	je     c001d2f3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001d2c8:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001d2ce:	31 f9                	xor    ecx,edi
c001d2d0:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001d2d6:	75 1b                	jne    c001d2f3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001d2d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2dc:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001d2e2:	75 0f                	jne    c001d2f3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001d2e4:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001d2eb:	39 f2                	cmp    edx,esi
c001d2ed:	0f 84 20 01 00 00    	je     c001d413 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001d2f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2f5:	eb c6                	jmp    c001d2bd <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001d2f7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001d2fb:	be 44 4d 02 c0       	mov    esi,0xc0024d44
c001d300:	b9 07 00 00 00       	mov    ecx,0x7
c001d305:	fc                   	cld    
c001d306:	31 d2                	xor    edx,edx
c001d308:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d30a:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001d311:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001d315:	b9 12 00 00 00       	mov    ecx,0x12
c001d31a:	83 ec 0c             	sub    esp,0xc
c001d31d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d31f:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001d327:	b9 0a 00 00 00       	mov    ecx,0xa
c001d32c:	f7 f1                	div    ecx
c001d32e:	83 c0 30             	add    eax,0x30
c001d331:	83 c2 30             	add    edx,0x30
c001d334:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001d338:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001d33c:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001d344:	31 d2                	xor    edx,edx
c001d346:	f7 f1                	div    ecx
c001d348:	83 c0 30             	add    eax,0x30
c001d34b:	83 c2 30             	add    edx,0x30
c001d34e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001d352:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001d356:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d35a:	50                   	push   eax
c001d35b:	e8 87 f7 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001d360:	83 c4 10             	add    esp,0x10
c001d363:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001d369:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001d370:	75 46                	jne    c001d3b8 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001d372:	83 ec 0c             	sub    esp,0xc
c001d375:	68 64 01 00 00       	push   0x164
c001d37a:	e8 a0 21 ff ff       	call   c000f51f <malloc>
c001d37f:	89 c3                	mov    ebx,eax
c001d381:	89 04 24             	mov    DWORD PTR [esp],eax
c001d384:	e8 39 11 00 00       	call   c001e4c2 <SATABus::SATABus()>
c001d389:	58                   	pop    eax
c001d38a:	5a                   	pop    edx
c001d38b:	53                   	push   ebx
c001d38c:	55                   	push   ebp
c001d38d:	e8 1e bf fe ff       	call   c00092b0 <Device::addChild(Device*)>
c001d392:	83 ec 1c             	sub    esp,0x1c
c001d395:	b9 09 00 00 00       	mov    ecx,0x9
c001d39a:	89 e7                	mov    edi,esp
c001d39c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d39e:	53                   	push   ebx
c001d39f:	e8 52 be fe ff       	call   c00091f6 <Device::preOpenPCI(PCIDeviceInfo)>
c001d3a4:	83 c4 30             	add    esp,0x30
c001d3a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3a9:	6a 00                	push   0x0
c001d3ab:	6a 00                	push   0x0
c001d3ad:	6a 00                	push   0x0
c001d3af:	53                   	push   ebx
c001d3b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d3b3:	83 c4 10             	add    esp,0x10
c001d3b6:	eb 5b                	jmp    c001d413 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001d3b8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d3be:	75 19                	jne    c001d3d9 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001d3c0:	83 ec 0c             	sub    esp,0xc
c001d3c3:	68 70 02 00 00       	push   0x270
c001d3c8:	e8 52 21 ff ff       	call   c000f51f <malloc>
c001d3cd:	89 c3                	mov    ebx,eax
c001d3cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3d2:	e8 93 02 00 00       	call   c001d66a <IDE::IDE()>
c001d3d7:	eb b0                	jmp    c001d389 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001d3d9:	83 ec 0c             	sub    esp,0xc
c001d3dc:	68 58 01 00 00       	push   0x158
c001d3e1:	e8 39 21 ff ff       	call   c000f51f <malloc>
c001d3e6:	89 c3                	mov    ebx,eax
c001d3e8:	58                   	pop    eax
c001d3e9:	5a                   	pop    edx
c001d3ea:	68 2a 4d 02 c0       	push   0xc0024d2a
c001d3ef:	53                   	push   ebx
c001d3f0:	e8 6f c1 fe ff       	call   c0009564 <DriverlessDevice::DriverlessDevice(char const*)>
c001d3f5:	59                   	pop    ecx
c001d3f6:	5f                   	pop    edi
c001d3f7:	53                   	push   ebx
c001d3f8:	55                   	push   ebp
c001d3f9:	e8 b2 be fe ff       	call   c00092b0 <Device::addChild(Device*)>
c001d3fe:	83 ec 1c             	sub    esp,0x1c
c001d401:	b9 09 00 00 00       	mov    ecx,0x9
c001d406:	89 e7                	mov    edi,esp
c001d408:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d40a:	53                   	push   ebx
c001d40b:	e8 e6 bd fe ff       	call   c00091f6 <Device::preOpenPCI(PCIDeviceInfo)>
c001d410:	83 c4 30             	add    esp,0x30
c001d413:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d419:	5b                   	pop    ebx
c001d41a:	5e                   	pop    esi
c001d41b:	5f                   	pop    edi
c001d41c:	5d                   	pop    ebp
c001d41d:	c3                   	ret    

c001d41e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d41e:	55                   	push   ebp
c001d41f:	57                   	push   edi
c001d420:	56                   	push   esi
c001d421:	53                   	push   ebx
c001d422:	83 ec 68             	sub    esp,0x68
c001d425:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d429:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d430:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d434:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d43b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001d440:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d444:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d44b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001d450:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d454:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001d459:	6a 0c                	push   0xc
c001d45b:	57                   	push   edi
c001d45c:	53                   	push   ebx
c001d45d:	56                   	push   esi
c001d45e:	55                   	push   ebp
c001d45f:	e8 c6 f7 ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d464:	83 c4 20             	add    esp,0x20
c001d467:	57                   	push   edi
c001d468:	53                   	push   ebx
c001d469:	56                   	push   esi
c001d46a:	55                   	push   ebp
c001d46b:	e8 b0 f8 ff ff       	call   c001cd20 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d470:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001d475:	57                   	push   edi
c001d476:	53                   	push   ebx
c001d477:	56                   	push   esi
c001d478:	55                   	push   ebp
c001d479:	e8 38 f9 ff ff       	call   c001cdb6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d47e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d482:	83 c4 14             	add    esp,0x14
c001d485:	6a 3c                	push   0x3c
c001d487:	57                   	push   edi
c001d488:	53                   	push   ebx
c001d489:	56                   	push   esi
c001d48a:	55                   	push   ebp
c001d48b:	e8 9a f7 ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d490:	0f b6 c4             	movzx  eax,ah
c001d493:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d497:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d49b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d49f:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c001d4a4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001d4aa:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001d4b0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d4b4:	83 c4 20             	add    esp,0x20
c001d4b7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d4bc:	74 30                	je     c001d4ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001d4be:	31 c0                	xor    eax,eax
c001d4c0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d4c4:	7e 28                	jle    c001d4ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001d4c6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001d4ce:	39 cb                	cmp    ebx,ecx
c001d4d0:	75 19                	jne    c001d4eb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001d4d2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001d4da:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001d4de:	75 0b                	jne    c001d4eb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001d4e0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001d4e7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001d4eb:	40                   	inc    eax
c001d4ec:	eb d2                	jmp    c001d4c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001d4ee:	31 d2                	xor    edx,edx
c001d4f0:	83 ec 0c             	sub    esp,0xc
c001d4f3:	57                   	push   edi
c001d4f4:	53                   	push   ebx
c001d4f5:	56                   	push   esi
c001d4f6:	52                   	push   edx
c001d4f7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d4fb:	55                   	push   ebp
c001d4fc:	e8 01 f9 ff ff       	call   c001ce02 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d501:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d505:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d509:	42                   	inc    edx
c001d50a:	83 c4 20             	add    esp,0x20
c001d50d:	83 fa 06             	cmp    edx,0x6
c001d510:	75 de                	jne    c001d4f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001d512:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d516:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d51a:	c1 e2 08             	shl    edx,0x8
c001d51d:	83 ec 0c             	sub    esp,0xc
c001d520:	0f b6 c4             	movzx  eax,ah
c001d523:	09 d0                	or     eax,edx
c001d525:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d52a:	6a 02                	push   0x2
c001d52c:	57                   	push   edi
c001d52d:	53                   	push   ebx
c001d52e:	56                   	push   esi
c001d52f:	55                   	push   ebp
c001d530:	e8 f5 f6 ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d535:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d53a:	83 c4 20             	add    esp,0x20
c001d53d:	57                   	push   edi
c001d53e:	53                   	push   ebx
c001d53f:	56                   	push   esi
c001d540:	55                   	push   ebp
c001d541:	e8 24 f8 ff ff       	call   c001cd6a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d546:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d54a:	57                   	push   edi
c001d54b:	53                   	push   ebx
c001d54c:	56                   	push   esi
c001d54d:	55                   	push   ebp
c001d54e:	e8 81 f7 ff ff       	call   c001ccd4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d553:	b9 09 00 00 00       	mov    ecx,0x9
c001d558:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d55d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001d561:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d565:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d569:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d56d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001d571:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d575:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001d579:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d57d:	83 ec 0c             	sub    esp,0xc
c001d580:	fc                   	cld    
c001d581:	89 e7                	mov    edi,esp
c001d583:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d587:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d589:	55                   	push   ebp
c001d58a:	e8 a9 fc ff ff       	call   c001d238 <PCI::foundDevice(PCIDeviceInfo)>
c001d58f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d595:	5b                   	pop    ebx
c001d596:	5e                   	pop    esi
c001d597:	5f                   	pop    edi
c001d598:	5d                   	pop    ebp
c001d599:	c3                   	ret    

c001d59a <PCI::checkDevice(unsigned char, unsigned char)>:
c001d59a:	55                   	push   ebp
c001d59b:	57                   	push   edi
c001d59c:	56                   	push   esi
c001d59d:	53                   	push   ebx
c001d59e:	83 ec 0c             	sub    esp,0xc
c001d5a1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d5a5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d5aa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d5af:	6a 00                	push   0x0
c001d5b1:	56                   	push   esi
c001d5b2:	57                   	push   edi
c001d5b3:	55                   	push   ebp
c001d5b4:	e8 1b f7 ff ff       	call   c001ccd4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5b9:	6a 00                	push   0x0
c001d5bb:	56                   	push   esi
c001d5bc:	57                   	push   edi
c001d5bd:	55                   	push   ebp
c001d5be:	e8 5b fe ff ff       	call   c001d41e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d5c3:	83 c4 20             	add    esp,0x20
c001d5c6:	6a 00                	push   0x0
c001d5c8:	56                   	push   esi
c001d5c9:	57                   	push   edi
c001d5ca:	55                   	push   ebp
c001d5cb:	e8 28 f7 ff ff       	call   c001ccf8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d5d0:	83 c4 10             	add    esp,0x10
c001d5d3:	a8 80                	test   al,0x80
c001d5d5:	74 2d                	je     c001d604 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001d5d7:	bb 01 00 00 00       	mov    ebx,0x1
c001d5dc:	53                   	push   ebx
c001d5dd:	56                   	push   esi
c001d5de:	57                   	push   edi
c001d5df:	55                   	push   ebp
c001d5e0:	e8 ef f6 ff ff       	call   c001ccd4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5e5:	83 c4 10             	add    esp,0x10
c001d5e8:	0f b7 c0             	movzx  eax,ax
c001d5eb:	3d ff ff 00 00       	cmp    eax,0xffff
c001d5f0:	74 0c                	je     c001d5fe <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d5f2:	53                   	push   ebx
c001d5f3:	56                   	push   esi
c001d5f4:	57                   	push   edi
c001d5f5:	55                   	push   ebp
c001d5f6:	e8 23 fe ff ff       	call   c001d41e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d5fb:	83 c4 10             	add    esp,0x10
c001d5fe:	43                   	inc    ebx
c001d5ff:	83 fb 08             	cmp    ebx,0x8
c001d602:	75 d8                	jne    c001d5dc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d604:	83 c4 0c             	add    esp,0xc
c001d607:	5b                   	pop    ebx
c001d608:	5e                   	pop    esi
c001d609:	5f                   	pop    edi
c001d60a:	5d                   	pop    ebp
c001d60b:	c3                   	ret    

c001d60c <PCI::detect()>:
c001d60c:	56                   	push   esi
c001d60d:	53                   	push   ebx
c001d60e:	53                   	push   ebx
c001d60f:	31 db                	xor    ebx,ebx
c001d611:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d615:	6a 00                	push   0x0
c001d617:	6a 00                	push   0x0
c001d619:	6a 00                	push   0x0
c001d61b:	56                   	push   esi
c001d61c:	e8 d7 f6 ff ff       	call   c001ccf8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d621:	83 c4 10             	add    esp,0x10
c001d624:	a8 80                	test   al,0x80
c001d626:	75 21                	jne    c001d649 <PCI::detect()+0x3d>
c001d628:	51                   	push   ecx
c001d629:	51                   	push   ecx
c001d62a:	6a 00                	push   0x0
c001d62c:	56                   	push   esi
c001d62d:	e8 e2 fb ff ff       	call   c001d214 <PCI::checkBus(unsigned char)>
c001d632:	83 c4 10             	add    esp,0x10
c001d635:	eb 2a                	jmp    c001d661 <PCI::detect()+0x55>
c001d637:	52                   	push   edx
c001d638:	52                   	push   edx
c001d639:	53                   	push   ebx
c001d63a:	43                   	inc    ebx
c001d63b:	56                   	push   esi
c001d63c:	e8 d3 fb ff ff       	call   c001d214 <PCI::checkBus(unsigned char)>
c001d641:	83 c4 10             	add    esp,0x10
c001d644:	83 fb 08             	cmp    ebx,0x8
c001d647:	74 18                	je     c001d661 <PCI::detect()+0x55>
c001d649:	53                   	push   ebx
c001d64a:	6a 00                	push   0x0
c001d64c:	6a 00                	push   0x0
c001d64e:	56                   	push   esi
c001d64f:	e8 80 f6 ff ff       	call   c001ccd4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d654:	83 c4 10             	add    esp,0x10
c001d657:	0f b7 c0             	movzx  eax,ax
c001d65a:	3d ff ff 00 00       	cmp    eax,0xffff
c001d65f:	74 d6                	je     c001d637 <PCI::detect()+0x2b>
c001d661:	58                   	pop    eax
c001d662:	5b                   	pop    ebx
c001d663:	5e                   	pop    esi
c001d664:	c3                   	ret    
c001d665:	90                   	nop

c001d666 <IDE::close(int, int, void*)>:
c001d666:	83 c8 ff             	or     eax,0xffffffff
c001d669:	c3                   	ret    

c001d66a <IDE::IDE()>:
c001d66a:	83 ec 0c             	sub    esp,0xc
c001d66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d671:	83 ec 08             	sub    esp,0x8
c001d674:	68 d4 4d 02 c0       	push   0xc0024dd4
c001d679:	50                   	push   eax
c001d67a:	e8 89 bf fe ff       	call   c0009608 <HardDiskController::HardDiskController(char const*)>
c001d67f:	83 c4 10             	add    esp,0x10
c001d682:	ba 00 4f 02 c0       	mov    edx,0xc0024f00
c001d687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d68b:	89 10                	mov    DWORD PTR [eax],edx
c001d68d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d691:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d698:	90                   	nop
c001d699:	83 c4 0c             	add    esp,0xc
c001d69c:	c3                   	ret    
c001d69d:	90                   	nop

c001d69e <IDE::prepareInterrupt(unsigned char)>:
c001d69e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d6a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d6a7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d6af:	c3                   	ret    

c001d6b0 <selectDrive(unsigned char, unsigned char)>:
c001d6b0:	c3                   	ret    
c001d6b1:	90                   	nop

c001d6b2 <IDE::getBase(unsigned char)>:
c001d6b2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d6b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6bb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d6c3:	c3                   	ret    

c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d6c4:	55                   	push   ebp
c001d6c5:	57                   	push   edi
c001d6c6:	56                   	push   esi
c001d6c7:	53                   	push   ebx
c001d6c8:	83 ec 1c             	sub    esp,0x1c
c001d6cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d6cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d6d3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d6d6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d6da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d6de:	80 f9 03             	cmp    cl,0x3
c001d6e1:	77 4f                	ja     c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001d6e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6e7:	0f b6 fa             	movzx  edi,dl
c001d6ea:	0f b6 db             	movzx  ebx,bl
c001d6ed:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001d6f0:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001d6f5:	80 ca 80             	or     dl,0x80
c001d6f8:	52                   	push   edx
c001d6f9:	6a 0c                	push   0xc
c001d6fb:	57                   	push   edi
c001d6fc:	56                   	push   esi
c001d6fd:	e8 c2 ff ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d702:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001d707:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d70b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d70f:	ee                   	out    dx,al
c001d710:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d715:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001d719:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d71d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d721:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d729:	83 c4 2c             	add    esp,0x2c
c001d72c:	5b                   	pop    ebx
c001d72d:	5e                   	pop    esi
c001d72e:	5f                   	pop    edi
c001d72f:	5d                   	pop    ebp
c001d730:	eb 92                	jmp    c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d732:	0f b6 cb             	movzx  ecx,bl
c001d735:	83 f9 07             	cmp    ecx,0x7
c001d738:	77 12                	ja     c001d74c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001d73a:	0f b6 d2             	movzx  edx,dl
c001d73d:	0f b6 db             	movzx  ebx,bl
c001d740:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001d748:	01 da                	add    edx,ebx
c001d74a:	eb 2f                	jmp    c001d77b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d74c:	83 f9 0d             	cmp    ecx,0xd
c001d74f:	77 13                	ja     c001d764 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001d751:	0f b6 d2             	movzx  edx,dl
c001d754:	0f b6 db             	movzx  ebx,bl
c001d757:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001d75e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d762:	eb 17                	jmp    c001d77b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d764:	83 f9 15             	cmp    ecx,0x15
c001d767:	77 13                	ja     c001d77c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001d769:	0f b6 d2             	movzx  edx,dl
c001d76c:	0f b6 db             	movzx  ebx,bl
c001d76f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001d777:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d77b:	ee                   	out    dx,al
c001d77c:	83 c4 1c             	add    esp,0x1c
c001d77f:	5b                   	pop    ebx
c001d780:	5e                   	pop    esi
c001d781:	5f                   	pop    edi
c001d782:	5d                   	pop    ebp
c001d783:	c3                   	ret    

c001d784 <IDE::read(unsigned char, unsigned char)>:
c001d784:	55                   	push   ebp
c001d785:	57                   	push   edi
c001d786:	56                   	push   esi
c001d787:	53                   	push   ebx
c001d788:	83 ec 1c             	sub    esp,0x1c
c001d78b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d78f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d793:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d796:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d79a:	3c 03                	cmp    al,0x3
c001d79c:	77 40                	ja     c001d7de <IDE::read(unsigned char, unsigned char)+0x5a>
c001d79e:	0f b6 f9             	movzx  edi,cl
c001d7a1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001d7a4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d7a9:	0c 80                	or     al,0x80
c001d7ab:	50                   	push   eax
c001d7ac:	6a 0c                	push   0xc
c001d7ae:	57                   	push   edi
c001d7af:	56                   	push   esi
c001d7b0:	e8 0f ff ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7b5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001d7ba:	0f b6 d3             	movzx  edx,bl
c001d7bd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001d7c1:	ec                   	in     al,dx
c001d7c2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d7c6:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001d7cb:	52                   	push   edx
c001d7cc:	6a 0c                	push   0xc
c001d7ce:	57                   	push   edi
c001d7cf:	56                   	push   esi
c001d7d0:	e8 ef fe ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7d5:	83 c4 20             	add    esp,0x20
c001d7d8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d7dc:	eb 4c                	jmp    c001d82a <IDE::read(unsigned char, unsigned char)+0xa6>
c001d7de:	0f b6 d3             	movzx  edx,bl
c001d7e1:	83 fa 07             	cmp    edx,0x7
c001d7e4:	77 12                	ja     c001d7f8 <IDE::read(unsigned char, unsigned char)+0x74>
c001d7e6:	0f b6 c9             	movzx  ecx,cl
c001d7e9:	0f b6 d3             	movzx  edx,bl
c001d7ec:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001d7f4:	01 c2                	add    edx,eax
c001d7f6:	eb 31                	jmp    c001d829 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d7f8:	83 fa 0d             	cmp    edx,0xd
c001d7fb:	77 13                	ja     c001d810 <IDE::read(unsigned char, unsigned char)+0x8c>
c001d7fd:	0f b6 c9             	movzx  ecx,cl
c001d800:	0f b6 d3             	movzx  edx,bl
c001d803:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001d80a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d80e:	eb 19                	jmp    c001d829 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d810:	31 c0                	xor    eax,eax
c001d812:	83 fa 15             	cmp    edx,0x15
c001d815:	77 13                	ja     c001d82a <IDE::read(unsigned char, unsigned char)+0xa6>
c001d817:	0f b6 c9             	movzx  ecx,cl
c001d81a:	0f b6 d3             	movzx  edx,bl
c001d81d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001d825:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d829:	ec                   	in     al,dx
c001d82a:	83 c4 1c             	add    esp,0x1c
c001d82d:	5b                   	pop    ebx
c001d82e:	5e                   	pop    esi
c001d82f:	5f                   	pop    edi
c001d830:	5d                   	pop    ebp
c001d831:	c3                   	ret    

c001d832 <IDE::waitInterrupt(unsigned char)>:
c001d832:	55                   	push   ebp
c001d833:	57                   	push   edi
c001d834:	56                   	push   esi
c001d835:	53                   	push   ebx
c001d836:	31 db                	xor    ebx,ebx
c001d838:	83 ec 0c             	sub    esp,0xc
c001d83b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d83f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d844:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d84c:	89 e8                	mov    eax,ebp
c001d84e:	84 c0                	test   al,al
c001d850:	75 30                	jne    c001d882 <IDE::waitInterrupt(unsigned char)+0x50>
c001d852:	50                   	push   eax
c001d853:	6a 0c                	push   0xc
c001d855:	56                   	push   esi
c001d856:	57                   	push   edi
c001d857:	e8 28 ff ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001d85c:	83 c4 10             	add    esp,0x10
c001d85f:	a8 01                	test   al,0x1
c001d861:	75 27                	jne    c001d88a <IDE::waitInterrupt(unsigned char)+0x58>
c001d863:	f6 c3 04             	test   bl,0x4
c001d866:	75 12                	jne    c001d87a <IDE::waitInterrupt(unsigned char)+0x48>
c001d868:	83 fb 32             	cmp    ebx,0x32
c001d86b:	7e 0d                	jle    c001d87a <IDE::waitInterrupt(unsigned char)+0x48>
c001d86d:	83 ec 0c             	sub    esp,0xc
c001d870:	6a 64                	push   0x64
c001d872:	e8 f5 8d ff ff       	call   c001666c <milliTenthSleep(unsigned int)>
c001d877:	83 c4 10             	add    esp,0x10
c001d87a:	83 fb 3c             	cmp    ebx,0x3c
c001d87d:	74 0b                	je     c001d88a <IDE::waitInterrupt(unsigned char)+0x58>
c001d87f:	43                   	inc    ebx
c001d880:	eb c2                	jmp    c001d844 <IDE::waitInterrupt(unsigned char)+0x12>
c001d882:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d88a:	83 c4 0c             	add    esp,0xc
c001d88d:	89 e8                	mov    eax,ebp
c001d88f:	5b                   	pop    ebx
c001d890:	5e                   	pop    esi
c001d891:	5f                   	pop    edi
c001d892:	5d                   	pop    ebp
c001d893:	c3                   	ret    

c001d894 <ideChannel0IRQHandler(regs*, void*)>:
c001d894:	83 ec 10             	sub    esp,0x10
c001d897:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d89b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d8a2:	6a 07                	push   0x7
c001d8a4:	6a 00                	push   0x0
c001d8a6:	50                   	push   eax
c001d8a7:	e8 d8 fe ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001d8ac:	83 c4 1c             	add    esp,0x1c
c001d8af:	c3                   	ret    

c001d8b0 <ideChannel1IRQHandler(regs*, void*)>:
c001d8b0:	83 ec 10             	sub    esp,0x10
c001d8b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8b7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d8be:	6a 07                	push   0x7
c001d8c0:	6a 01                	push   0x1
c001d8c2:	50                   	push   eax
c001d8c3:	e8 bc fe ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001d8c8:	83 c4 1c             	add    esp,0x1c
c001d8cb:	c3                   	ret    

c001d8cc <IDE::enableIRQs(unsigned char, bool)>:
c001d8cc:	57                   	push   edi
c001d8cd:	b8 02 00 00 00       	mov    eax,0x2
c001d8d2:	56                   	push   esi
c001d8d3:	53                   	push   ebx
c001d8d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d8dc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d8e1:	74 02                	je     c001d8e5 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001d8e3:	31 c0                	xor    eax,eax
c001d8e5:	0f b6 db             	movzx  ebx,bl
c001d8e8:	bf 04 00 00 00       	mov    edi,0x4
c001d8ed:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001d8f4:	50                   	push   eax
c001d8f5:	6a 0c                	push   0xc
c001d8f7:	53                   	push   ebx
c001d8f8:	56                   	push   esi
c001d8f9:	e8 c6 fd ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8fe:	83 c4 10             	add    esp,0x10
c001d901:	50                   	push   eax
c001d902:	6a 0c                	push   0xc
c001d904:	53                   	push   ebx
c001d905:	56                   	push   esi
c001d906:	e8 79 fe ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001d90b:	83 c4 10             	add    esp,0x10
c001d90e:	4f                   	dec    edi
c001d90f:	75 f0                	jne    c001d901 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001d911:	5b                   	pop    ebx
c001d912:	5e                   	pop    esi
c001d913:	5f                   	pop    edi
c001d914:	c3                   	ret    
c001d915:	90                   	nop

c001d916 <IDE::open(int, int, void*)>:
c001d916:	57                   	push   edi
c001d917:	56                   	push   esi
c001d918:	53                   	push   ebx
c001d919:	83 ec 10             	sub    esp,0x10
c001d91c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d920:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d929:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d932:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d939:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d940:	0f 85 84 02 00 00    	jne    c001dbca <IDE::open(int, int, void*)+0x2b4>
c001d946:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d94c:	a8 70                	test   al,0x70
c001d94e:	75 44                	jne    c001d994 <IDE::open(int, int, void*)+0x7e>
c001d950:	ba 20 84 00 00       	mov    edx,0x8420
c001d955:	0f a3 c2             	bt     edx,eax
c001d958:	73 3a                	jae    c001d994 <IDE::open(int, int, void*)+0x7e>
c001d95a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d960:	83 ec 0c             	sub    esp,0xc
c001d963:	83 e0 fc             	and    eax,0xfffffffc
c001d966:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d96d:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d973:	83 e0 fc             	and    eax,0xfffffffc
c001d976:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d97d:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d983:	83 e0 fc             	and    eax,0xfffffffc
c001d986:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d98d:	68 75 26 02 c0       	push   0xc0022675
c001d992:	eb 60                	jmp    c001d9f4 <IDE::open(int, int, void*)+0xde>
c001d994:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d99e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d9a8:	be 64 00 00 00       	mov    esi,0x64
c001d9ad:	57                   	push   edi
c001d9ae:	57                   	push   edi
c001d9af:	68 ec 4d 02 c0       	push   0xc0024dec
c001d9b4:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001d9b8:	57                   	push   edi
c001d9b9:	e8 82 2c fe ff       	call   c0000640 <strcpy>
c001d9be:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001d9c5:	31 d2                	xor    edx,edx
c001d9c7:	89 c8                	mov    eax,ecx
c001d9c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d9cc:	f7 f6                	div    esi
c001d9ce:	be 0a 00 00 00       	mov    esi,0xa
c001d9d3:	83 c0 30             	add    eax,0x30
c001d9d6:	31 d2                	xor    edx,edx
c001d9d8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d9dc:	89 c8                	mov    eax,ecx
c001d9de:	f7 f6                	div    esi
c001d9e0:	89 d1                	mov    ecx,edx
c001d9e2:	31 d2                	xor    edx,edx
c001d9e4:	83 c1 30             	add    ecx,0x30
c001d9e7:	f7 f6                	div    esi
c001d9e9:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001d9ed:	83 c2 30             	add    edx,0x30
c001d9f0:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001d9f4:	e8 ee f0 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001d9f9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d9fe:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001da05:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001da0c:	c1 e1 10             	shl    ecx,0x10
c001da0f:	c1 e0 0b             	shl    eax,0xb
c001da12:	83 c4 10             	add    esp,0x10
c001da15:	09 c1                	or     ecx,eax
c001da17:	89 fa                	mov    edx,edi
c001da19:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001da20:	c1 e0 08             	shl    eax,0x8
c001da23:	09 c1                	or     ecx,eax
c001da25:	89 c8                	mov    eax,ecx
c001da27:	0d 08 00 00 80       	or     eax,0x80000008
c001da2c:	ef                   	out    dx,eax
c001da2d:	be fc 0c 00 00       	mov    esi,0xcfc
c001da32:	89 f2                	mov    edx,esi
c001da34:	ed                   	in     eax,dx
c001da35:	c1 e8 10             	shr    eax,0x10
c001da38:	3d ff ff 00 00       	cmp    eax,0xffff
c001da3d:	0f 84 e5 00 00 00    	je     c001db28 <IDE::open(int, int, void*)+0x212>
c001da43:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001da49:	89 fa                	mov    edx,edi
c001da4b:	89 c8                	mov    eax,ecx
c001da4d:	ef                   	out    dx,eax
c001da4e:	b0 fe                	mov    al,0xfe
c001da50:	89 f2                	mov    edx,esi
c001da52:	ee                   	out    dx,al
c001da53:	89 c8                	mov    eax,ecx
c001da55:	89 fa                	mov    edx,edi
c001da57:	ef                   	out    dx,eax
c001da58:	89 f2                	mov    edx,esi
c001da5a:	ed                   	in     eax,dx
c001da5b:	3c fe                	cmp    al,0xfe
c001da5d:	0f 85 85 00 00 00    	jne    c001dae8 <IDE::open(int, int, void*)+0x1d2>
c001da63:	83 ec 0c             	sub    esp,0xc
c001da66:	68 ab 26 02 c0       	push   0xc00226ab
c001da6b:	e8 77 f0 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001da70:	c7 04 24 f2 4d 02 c0 	mov    DWORD PTR [esp],0xc0024df2
c001da77:	e8 e8 94 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001da7c:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001da86:	c7 04 24 ec 28 02 c0 	mov    DWORD PTR [esp],0xc00228ec
c001da8d:	e8 55 f0 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001da92:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001da99:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001daa0:	c1 e1 10             	shl    ecx,0x10
c001daa3:	c1 e0 08             	shl    eax,0x8
c001daa6:	89 fa                	mov    edx,edi
c001daa8:	09 c1                	or     ecx,eax
c001daaa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001dab1:	c1 e0 0b             	shl    eax,0xb
c001dab4:	09 c1                	or     ecx,eax
c001dab6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001dabc:	89 c8                	mov    eax,ecx
c001dabe:	ef                   	out    dx,eax
c001dabf:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001dac5:	89 f2                	mov    edx,esi
c001dac7:	ee                   	out    dx,al
c001dac8:	89 c8                	mov    eax,ecx
c001daca:	89 fa                	mov    edx,edi
c001dacc:	ef                   	out    dx,eax
c001dacd:	89 f2                	mov    edx,esi
c001dacf:	ed                   	in     eax,dx
c001dad0:	0f b6 c0             	movzx  eax,al
c001dad3:	83 c4 10             	add    esp,0x10
c001dad6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001dadc:	74 5a                	je     c001db38 <IDE::open(int, int, void*)+0x222>
c001dade:	83 ec 0c             	sub    esp,0xc
c001dae1:	68 07 4e 02 c0       	push   0xc0024e07
c001dae6:	eb 48                	jmp    c001db30 <IDE::open(int, int, void*)+0x21a>
c001dae8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001daf1:	75 2b                	jne    c001db1e <IDE::open(int, int, void*)+0x208>
c001daf3:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001dafa:	3d 80 00 00 00       	cmp    eax,0x80
c001daff:	74 07                	je     c001db08 <IDE::open(int, int, void*)+0x1f2>
c001db01:	3d 8a 00 00 00       	cmp    eax,0x8a
c001db06:	75 16                	jne    c001db1e <IDE::open(int, int, void*)+0x208>
c001db08:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001db0f:	83 ec 0c             	sub    esp,0xc
c001db12:	68 9e 21 02 c0       	push   0xc002219e
c001db17:	e8 cb ef fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001db1c:	eb 17                	jmp    c001db35 <IDE::open(int, int, void*)+0x21f>
c001db1e:	83 ec 0c             	sub    esp,0xc
c001db21:	68 0f 4e 02 c0       	push   0xc0024e0f
c001db26:	eb 08                	jmp    c001db30 <IDE::open(int, int, void*)+0x21a>
c001db28:	83 ec 0c             	sub    esp,0xc
c001db2b:	68 40 4e 02 c0       	push   0xc0024e40
c001db30:	e8 31 1d ff ff       	call   c000f866 <KePanic(char const*)>
c001db35:	83 c4 10             	add    esp,0x10
c001db38:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001db3f:	0f 84 bf 00 00 00    	je     c001dc04 <IDE::open(int, int, void*)+0x2ee>
c001db45:	83 ec 0c             	sub    esp,0xc
c001db48:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001db4e:	83 e0 fc             	and    eax,0xfffffffc
c001db51:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001db58:	83 c0 08             	add    eax,0x8
c001db5b:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001db62:	68 6a 4e 02 c0       	push   0xc0024e6a
c001db67:	e8 f8 93 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001db6c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001db73:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001db7a:	50                   	push   eax
c001db7b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001db82:	50                   	push   eax
c001db83:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001db8a:	50                   	push   eax
c001db8b:	ff 35 40 e4 02 c0    	push   DWORD PTR ds:0xc002e440
c001db91:	e8 94 f0 ff ff       	call   c001cc2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001db96:	83 c4 18             	add    esp,0x18
c001db99:	83 c8 07             	or     eax,0x7
c001db9c:	0f b7 c0             	movzx  eax,ax
c001db9f:	50                   	push   eax
c001dba0:	6a 04                	push   0x4
c001dba2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001dba9:	50                   	push   eax
c001dbaa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001dbb1:	50                   	push   eax
c001dbb2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001dbb9:	50                   	push   eax
c001dbba:	ff 35 40 e4 02 c0    	push   DWORD PTR ds:0xc002e440
c001dbc0:	e8 a1 f2 ff ff       	call   c001ce66 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001dbc5:	83 c4 20             	add    esp,0x20
c001dbc8:	eb 3a                	jmp    c001dc04 <IDE::open(int, int, void*)+0x2ee>
c001dbca:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dbd0:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dbd7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dbde:	05 06 02 00 00       	add    eax,0x206
c001dbe3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dbea:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dbf1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dbf8:	05 06 02 00 00       	add    eax,0x206
c001dbfd:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dc04:	83 ec 0c             	sub    esp,0xc
c001dc07:	68 43 2e 02 c0       	push   0xc0022e43
c001dc0c:	e8 d6 ee fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001dc11:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001dc17:	83 c4 10             	add    esp,0x10
c001dc1a:	89 c2                	mov    edx,eax
c001dc1c:	83 e2 0f             	and    edx,0xf
c001dc1f:	83 fa 08             	cmp    edx,0x8
c001dc22:	75 0a                	jne    c001dc2e <IDE::open(int, int, void*)+0x318>
c001dc24:	83 e8 02             	sub    eax,0x2
c001dc27:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dc2e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001dc34:	89 c2                	mov    edx,eax
c001dc36:	83 e2 0f             	and    edx,0xf
c001dc39:	83 fa 08             	cmp    edx,0x8
c001dc3c:	75 0a                	jne    c001dc48 <IDE::open(int, int, void*)+0x332>
c001dc3e:	83 e8 02             	sub    eax,0x2
c001dc41:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dc48:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001dc4f:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001dc56:	89 d0                	mov    eax,edx
c001dc58:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dc5b:	8d 7a 01             	lea    edi,[edx+0x1]
c001dc5e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dc62:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001dc66:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001dc6a:	83 e1 3f             	and    ecx,0x3f
c001dc6d:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001dc71:	89 f9                	mov    ecx,edi
c001dc73:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001dc7a:	0f b6 c9             	movzx  ecx,cl
c001dc7d:	8d 78 02             	lea    edi,[eax+0x2]
c001dc80:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dc83:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dc87:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001dc8b:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001dc8f:	83 e2 3f             	and    edx,0x3f
c001dc92:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001dc96:	89 f9                	mov    ecx,edi
c001dc98:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001dc9e:	0f b6 d1             	movzx  edx,cl
c001dca1:	8d 78 03             	lea    edi,[eax+0x3]
c001dca4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dca7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dcab:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001dcaf:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001dcb3:	83 e1 3f             	and    ecx,0x3f
c001dcb6:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001dcba:	89 fa                	mov    edx,edi
c001dcbc:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001dcc2:	0f b6 ca             	movzx  ecx,dl
c001dcc5:	8d 78 04             	lea    edi,[eax+0x4]
c001dcc8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dccb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dccf:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001dcd3:	89 fa                	mov    edx,edi
c001dcd5:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001dcdb:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001dcdf:	83 e2 3f             	and    edx,0x3f
c001dce2:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001dce6:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001dced:	66 85 f6             	test   si,si
c001dcf0:	74 24                	je     c001dd16 <IDE::open(int, int, void*)+0x400>
c001dcf2:	89 f9                	mov    ecx,edi
c001dcf4:	83 c0 05             	add    eax,0x5
c001dcf7:	0f b6 d1             	movzx  edx,cl
c001dcfa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dcfd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dd01:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dd05:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dd0b:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001dd0f:	83 e0 3f             	and    eax,0x3f
c001dd12:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001dd16:	83 ec 0c             	sub    esp,0xc
c001dd19:	68 82 4e 02 c0       	push   0xc0024e82
c001dd1e:	e8 c4 ed fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001dd23:	58                   	pop    eax
c001dd24:	5a                   	pop    edx
c001dd25:	6a 00                	push   0x0
c001dd27:	53                   	push   ebx
c001dd28:	e8 71 f9 ff ff       	call   c001d69e <IDE::prepareInterrupt(unsigned char)>
c001dd2d:	59                   	pop    ecx
c001dd2e:	5e                   	pop    esi
c001dd2f:	6a 01                	push   0x1
c001dd31:	53                   	push   ebx
c001dd32:	e8 67 f9 ff ff       	call   c001d69e <IDE::prepareInterrupt(unsigned char)>
c001dd37:	c7 04 24 d1 46 02 c0 	mov    DWORD PTR [esp],0xc00246d1
c001dd3e:	e8 a4 ed fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001dd43:	83 c4 0c             	add    esp,0xc
c001dd46:	6a 00                	push   0x0
c001dd48:	6a 00                	push   0x0
c001dd4a:	53                   	push   ebx
c001dd4b:	e8 7c fb ff ff       	call   c001d8cc <IDE::enableIRQs(unsigned char, bool)>
c001dd50:	83 c4 0c             	add    esp,0xc
c001dd53:	6a 00                	push   0x0
c001dd55:	6a 01                	push   0x1
c001dd57:	53                   	push   ebx
c001dd58:	e8 6f fb ff ff       	call   c001d8cc <IDE::enableIRQs(unsigned char, bool)>
c001dd5d:	c7 04 24 84 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e84
c001dd64:	e8 7e ed fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001dd69:	83 c4 10             	add    esp,0x10
c001dd6c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dd73:	74 3c                	je     c001ddb1 <IDE::open(int, int, void*)+0x49b>
c001dd75:	83 ec 0c             	sub    esp,0xc
c001dd78:	53                   	push   ebx
c001dd79:	6a 01                	push   0x1
c001dd7b:	68 94 d8 01 c0       	push   0xc001d894
c001dd80:	6a 0e                	push   0xe
c001dd82:	53                   	push   ebx
c001dd83:	e8 d4 b4 fe ff       	call   c000925c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd88:	83 c4 14             	add    esp,0x14
c001dd8b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dd91:	53                   	push   ebx
c001dd92:	6a 01                	push   0x1
c001dd94:	68 b0 d8 01 c0       	push   0xc001d8b0
c001dd99:	6a 0f                	push   0xf
c001dd9b:	53                   	push   ebx
c001dd9c:	e8 bb b4 fe ff       	call   c000925c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dda1:	83 c4 14             	add    esp,0x14
c001dda4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ddaa:	68 f2 2a 02 c0       	push   0xc0022af2
c001ddaf:	eb 40                	jmp    c001ddf1 <IDE::open(int, int, void*)+0x4db>
c001ddb1:	83 ec 0c             	sub    esp,0xc
c001ddb4:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ddbe:	53                   	push   ebx
c001ddbf:	6a 00                	push   0x0
c001ddc1:	68 94 d8 01 c0       	push   0xc001d894
c001ddc6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ddcc:	53                   	push   ebx
c001ddcd:	e8 8a b4 fe ff       	call   c000925c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ddd2:	83 c4 14             	add    esp,0x14
c001ddd5:	53                   	push   ebx
c001ddd6:	6a 00                	push   0x0
c001ddd8:	68 b0 d8 01 c0       	push   0xc001d8b0
c001dddd:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dde3:	53                   	push   ebx
c001dde4:	e8 73 b4 fe ff       	call   c000925c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dde9:	83 c4 14             	add    esp,0x14
c001ddec:	68 8c 37 02 c0       	push   0xc002378c
c001ddf1:	e8 f1 ec fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001ddf6:	83 c4 10             	add    esp,0x10
c001ddf9:	83 ec 0c             	sub    esp,0xc
c001ddfc:	68 86 4e 02 c0       	push   0xc0024e86
c001de01:	e8 e1 ec fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001de06:	8b 03                	mov    eax,DWORD PTR [ebx]
c001de08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001de0b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001de0e:	c7 04 24 95 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e95
c001de15:	e8 cd ec fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001de1a:	83 c4 0c             	add    esp,0xc
c001de1d:	6a 07                	push   0x7
c001de1f:	6a 00                	push   0x0
c001de21:	53                   	push   ebx
c001de22:	e8 5d f9 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001de27:	83 c4 0c             	add    esp,0xc
c001de2a:	6a 07                	push   0x7
c001de2c:	6a 01                	push   0x1
c001de2e:	53                   	push   ebx
c001de2f:	e8 50 f9 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001de34:	c7 04 24 8c 35 02 c0 	mov    DWORD PTR [esp],0xc002358c
c001de3b:	e8 a7 ec fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001de40:	83 c4 0c             	add    esp,0xc
c001de43:	6a 01                	push   0x1
c001de45:	6a 00                	push   0x0
c001de47:	53                   	push   ebx
c001de48:	e8 7f fa ff ff       	call   c001d8cc <IDE::enableIRQs(unsigned char, bool)>
c001de4d:	83 c4 0c             	add    esp,0xc
c001de50:	6a 01                	push   0x1
c001de52:	6a 01                	push   0x1
c001de54:	53                   	push   ebx
c001de55:	e8 72 fa ff ff       	call   c001d8cc <IDE::enableIRQs(unsigned char, bool)>
c001de5a:	c7 04 24 89 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e89
c001de61:	e8 81 ec fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001de66:	83 c4 20             	add    esp,0x20
c001de69:	31 c0                	xor    eax,eax
c001de6b:	5b                   	pop    ebx
c001de6c:	5e                   	pop    esi
c001de6d:	5f                   	pop    edi
c001de6e:	c3                   	ret    
c001de6f:	90                   	nop

c001de70 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001de70:	55                   	push   ebp
c001de71:	57                   	push   edi
c001de72:	56                   	push   esi
c001de73:	53                   	push   ebx
c001de74:	83 ec 1c             	sub    esp,0x1c
c001de77:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001de7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001de7f:	8d 42 f8             	lea    eax,[edx-0x8]
c001de82:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001de86:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001de8a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001de8e:	3c 03                	cmp    al,0x3
c001de90:	77 5a                	ja     c001deec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001de92:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de96:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001de9a:	0f b6 db             	movzx  ebx,bl
c001de9d:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dea0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dea5:	0c 80                	or     al,0x80
c001dea7:	50                   	push   eax
c001dea8:	6a 0c                	push   0xc
c001deaa:	53                   	push   ebx
c001deab:	56                   	push   esi
c001deac:	e8 13 f8 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001deb1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001deb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001deba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001debe:	0f b6 d2             	movzx  edx,dl
c001dec1:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001dec5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dec7:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001decc:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ded0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ded4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ded8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dee0:	83 c4 2c             	add    esp,0x2c
c001dee3:	5b                   	pop    ebx
c001dee4:	5e                   	pop    esi
c001dee5:	5f                   	pop    edi
c001dee6:	5d                   	pop    ebp
c001dee7:	e9 d8 f7 ff ff       	jmp    c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001deec:	0f b6 c2             	movzx  eax,dl
c001deef:	83 f8 07             	cmp    eax,0x7
c001def2:	77 12                	ja     c001df06 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001def4:	0f b6 c2             	movzx  eax,dl
c001def7:	0f b6 db             	movzx  ebx,bl
c001defa:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001df02:	01 c2                	add    edx,eax
c001df04:	eb 2f                	jmp    c001df35 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001df06:	83 f8 0d             	cmp    eax,0xd
c001df09:	77 13                	ja     c001df1e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001df0b:	0f b6 db             	movzx  ebx,bl
c001df0e:	0f b6 d2             	movzx  edx,dl
c001df11:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001df18:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001df1c:	eb 17                	jmp    c001df35 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001df1e:	83 f8 15             	cmp    eax,0x15
c001df21:	77 14                	ja     c001df37 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001df23:	0f b6 db             	movzx  ebx,bl
c001df26:	0f b6 d2             	movzx  edx,dl
c001df29:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001df31:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001df35:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001df37:	83 c4 1c             	add    esp,0x1c
c001df3a:	5b                   	pop    ebx
c001df3b:	5e                   	pop    esi
c001df3c:	5f                   	pop    edi
c001df3d:	5d                   	pop    ebp
c001df3e:	c3                   	ret    
c001df3f:	90                   	nop

c001df40 <IDE::detect()>:
c001df40:	55                   	push   ebp
c001df41:	57                   	push   edi
c001df42:	56                   	push   esi
c001df43:	53                   	push   ebx
c001df44:	81 ec 28 02 00 00    	sub    esp,0x228
c001df4a:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001df51:	68 8b 4e 02 c0       	push   0xc0024e8b
c001df56:	e8 8c eb fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001df5b:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001df61:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001df65:	83 c4 10             	add    esp,0x10
c001df68:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001df6d:	0f 85 2f 04 00 00    	jne    c001e3a2 <IDE::detect()+0x462>
c001df73:	83 ec 0c             	sub    esp,0xc
c001df76:	31 f6                	xor    esi,esi
c001df78:	68 8e 4e 02 c0       	push   0xc0024e8e
c001df7d:	31 ff                	xor    edi,edi
c001df7f:	e8 63 eb fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001df84:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001df8b:	83 c4 10             	add    esp,0x10
c001df8e:	83 ec 0c             	sub    esp,0xc
c001df91:	68 91 4e 02 c0       	push   0xc0024e91
c001df96:	e8 4c eb fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001df9b:	83 c4 10             	add    esp,0x10
c001df9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dfa5:	83 ec 0c             	sub    esp,0xc
c001dfa8:	31 ed                	xor    ebp,ebp
c001dfaa:	68 94 4e 02 c0       	push   0xc0024e94
c001dfaf:	e8 33 eb fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001dfb4:	89 f8                	mov    eax,edi
c001dfb6:	c1 e0 06             	shl    eax,0x6
c001dfb9:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001dfc1:	c7 04 24 97 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e97
c001dfc8:	e8 1a eb fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001dfcd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dfd1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001dfd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfd9:	c1 e0 04             	shl    eax,0x4
c001dfdc:	83 c8 a0             	or     eax,0xffffffa0
c001dfdf:	0f b6 c0             	movzx  eax,al
c001dfe2:	50                   	push   eax
c001dfe3:	6a 06                	push   0x6
c001dfe5:	56                   	push   esi
c001dfe6:	53                   	push   ebx
c001dfe7:	e8 d8 f6 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dfec:	83 c4 1c             	add    esp,0x1c
c001dfef:	6a 0c                	push   0xc
c001dff1:	56                   	push   esi
c001dff2:	53                   	push   ebx
c001dff3:	e8 8c f7 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001dff8:	83 c4 0c             	add    esp,0xc
c001dffb:	6a 0c                	push   0xc
c001dffd:	56                   	push   esi
c001dffe:	53                   	push   ebx
c001dfff:	e8 80 f7 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e004:	83 c4 0c             	add    esp,0xc
c001e007:	6a 0c                	push   0xc
c001e009:	56                   	push   esi
c001e00a:	53                   	push   ebx
c001e00b:	e8 74 f7 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e010:	83 c4 0c             	add    esp,0xc
c001e013:	6a 0c                	push   0xc
c001e015:	56                   	push   esi
c001e016:	53                   	push   ebx
c001e017:	e8 68 f7 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e01c:	c7 04 24 9a 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e9a
c001e023:	e8 bf ea fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e028:	68 ec 00 00 00       	push   0xec
c001e02d:	6a 07                	push   0x7
c001e02f:	56                   	push   esi
c001e030:	53                   	push   ebx
c001e031:	e8 8e f6 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e036:	83 c4 1c             	add    esp,0x1c
c001e039:	6a 0c                	push   0xc
c001e03b:	56                   	push   esi
c001e03c:	53                   	push   ebx
c001e03d:	e8 42 f7 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e042:	83 c4 0c             	add    esp,0xc
c001e045:	6a 0c                	push   0xc
c001e047:	56                   	push   esi
c001e048:	53                   	push   ebx
c001e049:	e8 36 f7 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e04e:	83 c4 0c             	add    esp,0xc
c001e051:	6a 0c                	push   0xc
c001e053:	56                   	push   esi
c001e054:	53                   	push   ebx
c001e055:	e8 2a f7 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e05a:	83 c4 0c             	add    esp,0xc
c001e05d:	6a 0c                	push   0xc
c001e05f:	56                   	push   esi
c001e060:	53                   	push   ebx
c001e061:	e8 1e f7 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e066:	c7 04 24 9d 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e9d
c001e06d:	e8 75 ea fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e072:	83 c4 0c             	add    esp,0xc
c001e075:	6a 0c                	push   0xc
c001e077:	56                   	push   esi
c001e078:	53                   	push   ebx
c001e079:	e8 06 f7 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e07e:	83 c4 10             	add    esp,0x10
c001e081:	84 c0                	test   al,al
c001e083:	75 1f                	jne    c001e0a4 <IDE::detect()+0x164>
c001e085:	83 ec 0c             	sub    esp,0xc
c001e088:	68 a0 4e 02 c0       	push   0xc0024ea0
c001e08d:	e8 55 ea fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e092:	e9 e9 02 00 00       	jmp    c001e380 <IDE::detect()+0x440>
c001e097:	a8 80                	test   al,0x80
c001e099:	74 21                	je     c001e0bc <IDE::detect()+0x17c>
c001e09b:	45                   	inc    ebp
c001e09c:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001e0a2:	7f 1e                	jg     c001e0c2 <IDE::detect()+0x182>
c001e0a4:	50                   	push   eax
c001e0a5:	6a 0c                	push   0xc
c001e0a7:	56                   	push   esi
c001e0a8:	53                   	push   ebx
c001e0a9:	e8 d6 f6 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e0ae:	83 c4 10             	add    esp,0x10
c001e0b1:	a8 01                	test   al,0x1
c001e0b3:	74 e2                	je     c001e097 <IDE::detect()+0x157>
c001e0b5:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001e0ba:	eb 22                	jmp    c001e0de <IDE::detect()+0x19e>
c001e0bc:	a8 08                	test   al,0x8
c001e0be:	74 db                	je     c001e09b <IDE::detect()+0x15b>
c001e0c0:	eb 17                	jmp    c001e0d9 <IDE::detect()+0x199>
c001e0c2:	83 ec 0c             	sub    esp,0xc
c001e0c5:	6a 32                	push   0x32
c001e0c7:	e8 a0 85 ff ff       	call   c001666c <milliTenthSleep(unsigned int)>
c001e0cc:	83 c4 10             	add    esp,0x10
c001e0cf:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001e0d5:	75 cd                	jne    c001e0a4 <IDE::detect()+0x164>
c001e0d7:	eb dc                	jmp    c001e0b5 <IDE::detect()+0x175>
c001e0d9:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001e0de:	83 ec 0c             	sub    esp,0xc
c001e0e1:	68 a3 4e 02 c0       	push   0xc0024ea3
c001e0e6:	e8 fc e9 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e0eb:	83 c4 10             	add    esp,0x10
c001e0ee:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001e0f3:	74 60                	je     c001e155 <IDE::detect()+0x215>
c001e0f5:	50                   	push   eax
c001e0f6:	6a 04                	push   0x4
c001e0f8:	56                   	push   esi
c001e0f9:	53                   	push   ebx
c001e0fa:	e8 85 f6 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e0ff:	83 c4 0c             	add    esp,0xc
c001e102:	89 c5                	mov    ebp,eax
c001e104:	6a 05                	push   0x5
c001e106:	56                   	push   esi
c001e107:	53                   	push   ebx
c001e108:	e8 77 f6 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e10d:	83 c4 10             	add    esp,0x10
c001e110:	89 e9                	mov    ecx,ebp
c001e112:	0f b6 c0             	movzx  eax,al
c001e115:	0f b6 e9             	movzx  ebp,cl
c001e118:	83 fd 14             	cmp    ebp,0x14
c001e11b:	75 07                	jne    c001e124 <IDE::detect()+0x1e4>
c001e11d:	3d eb 00 00 00       	cmp    eax,0xeb
c001e122:	eb 0e                	jmp    c001e132 <IDE::detect()+0x1f2>
c001e124:	3d 96 00 00 00       	cmp    eax,0x96
c001e129:	0f 85 54 02 00 00    	jne    c001e383 <IDE::detect()+0x443>
c001e12f:	83 fd 69             	cmp    ebp,0x69
c001e132:	0f 85 4b 02 00 00    	jne    c001e383 <IDE::detect()+0x443>
c001e138:	68 a1 00 00 00       	push   0xa1
c001e13d:	6a 07                	push   0x7
c001e13f:	56                   	push   esi
c001e140:	53                   	push   ebx
c001e141:	e8 7e f5 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e146:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e14d:	e8 1a 85 ff ff       	call   c001666c <milliTenthSleep(unsigned int)>
c001e152:	83 c4 10             	add    esp,0x10
c001e155:	83 ec 0c             	sub    esp,0xc
c001e158:	89 fd                	mov    ebp,edi
c001e15a:	68 a6 4e 02 c0       	push   0xc0024ea6
c001e15f:	c1 e5 06             	shl    ebp,0x6
c001e162:	e8 80 e9 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e167:	01 dd                	add    ebp,ebx
c001e169:	8d 54 24 20          	lea    edx,[esp+0x20]
c001e16d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001e174:	52                   	push   edx
c001e175:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e179:	6a 00                	push   0x0
c001e17b:	56                   	push   esi
c001e17c:	53                   	push   ebx
c001e17d:	e8 ee fc ff ff       	call   c001de70 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001e182:	83 c4 14             	add    esp,0x14
c001e185:	68 aa 4e 02 c0       	push   0xc0024eaa
c001e18a:	e8 58 e9 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e18f:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001e194:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001e19b:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001e1a2:	89 f0                	mov    eax,esi
c001e1a4:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001e1aa:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e1ae:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001e1b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1b8:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001e1bf:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001e1c7:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001e1ce:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001e1d6:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001e1dc:	c7 04 24 ae 4e 02 c0 	mov    DWORD PTR [esp],0xc0024eae
c001e1e3:	e8 ff e8 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e1e8:	83 c4 10             	add    esp,0x10
c001e1eb:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001e1f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e1f6:	74 09                	je     c001e201 <IDE::detect()+0x2c1>
c001e1f8:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001e1ff:	eb 07                	jmp    c001e208 <IDE::detect()+0x2c8>
c001e201:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001e208:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e20c:	89 f8                	mov    eax,edi
c001e20e:	83 ec 0c             	sub    esp,0xc
c001e211:	c1 e0 06             	shl    eax,0x6
c001e214:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001e217:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001e21d:	68 b2 4e 02 c0       	push   0xc0024eb2
c001e222:	e8 c0 e8 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e227:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e22b:	89 e8                	mov    eax,ebp
c001e22d:	83 c4 10             	add    esp,0x10
c001e230:	8d 6a 28             	lea    ebp,[edx+0x28]
c001e233:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001e236:	83 c0 02             	add    eax,0x2
c001e239:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001e23f:	83 c2 02             	add    edx,0x2
c001e242:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001e245:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001e24b:	39 d5                	cmp    ebp,edx
c001e24d:	75 e4                	jne    c001e233 <IDE::detect()+0x2f3>
c001e24f:	89 f8                	mov    eax,edi
c001e251:	c1 e0 06             	shl    eax,0x6
c001e254:	01 d8                	add    eax,ebx
c001e256:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001e25d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e264:	c1 ea 09             	shr    edx,0x9
c001e267:	83 e2 01             	and    edx,0x1
c001e26a:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001e271:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e277:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001e27b:	74 0c                	je     c001e289 <IDE::detect()+0x349>
c001e27d:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001e286:	0f 95 c2             	setne  dl
c001e289:	83 ec 0c             	sub    esp,0xc
c001e28c:	89 fd                	mov    ebp,edi
c001e28e:	c1 e5 06             	shl    ebp,0x6
c001e291:	01 dd                	add    ebp,ebx
c001e293:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001e299:	68 b6 4e 02 c0       	push   0xc0024eb6
c001e29e:	e8 44 e8 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e2a3:	83 c4 10             	add    esp,0x10
c001e2a6:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001e2ab:	75 66                	jne    c001e313 <IDE::detect()+0x3d3>
c001e2ad:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001e2b4:	0f 84 b8 00 00 00    	je     c001e372 <IDE::detect()+0x432>
c001e2ba:	83 ec 0c             	sub    esp,0xc
c001e2bd:	68 ba 4e 02 c0       	push   0xc0024eba
c001e2c2:	e8 20 e8 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e2c7:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001e2ce:	e8 4c 12 ff ff       	call   c000f51f <malloc>
c001e2d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2d6:	89 c5                	mov    ebp,eax
c001e2d8:	e8 43 05 00 00       	call   c001e820 <ATA::ATA()>
c001e2dd:	c7 04 24 be 4e 02 c0 	mov    DWORD PTR [esp],0xc0024ebe
c001e2e4:	e8 fe e7 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e2e9:	59                   	pop    ecx
c001e2ea:	58                   	pop    eax
c001e2eb:	55                   	push   ebp
c001e2ec:	53                   	push   ebx
c001e2ed:	e8 be af fe ff       	call   c00092b0 <Device::addChild(Device*)>
c001e2f2:	c7 04 24 c3 4e 02 c0 	mov    DWORD PTR [esp],0xc0024ec3
c001e2f9:	e8 e9 e7 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e2fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e301:	53                   	push   ebx
c001e302:	57                   	push   edi
c001e303:	6a 00                	push   0x0
c001e305:	55                   	push   ebp
c001e306:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e309:	83 c4 14             	add    esp,0x14
c001e30c:	68 c8 4e 02 c0       	push   0xc0024ec8
c001e311:	eb 57                	jmp    c001e36a <IDE::detect()+0x42a>
c001e313:	83 ec 0c             	sub    esp,0xc
c001e316:	68 cd 4e 02 c0       	push   0xc0024ecd
c001e31b:	e8 c7 e7 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e320:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001e327:	e8 f3 11 ff ff       	call   c000f51f <malloc>
c001e32c:	89 04 24             	mov    DWORD PTR [esp],eax
c001e32f:	89 c5                	mov    ebp,eax
c001e331:	e8 98 0c 00 00       	call   c001efce <ATAPI::ATAPI()>
c001e336:	c7 04 24 d3 4e 02 c0 	mov    DWORD PTR [esp],0xc0024ed3
c001e33d:	e8 a5 e7 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e342:	58                   	pop    eax
c001e343:	5a                   	pop    edx
c001e344:	55                   	push   ebp
c001e345:	53                   	push   ebx
c001e346:	e8 65 af fe ff       	call   c00092b0 <Device::addChild(Device*)>
c001e34b:	c7 04 24 da 4e 02 c0 	mov    DWORD PTR [esp],0xc0024eda
c001e352:	e8 90 e7 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e357:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e35a:	53                   	push   ebx
c001e35b:	57                   	push   edi
c001e35c:	6a 00                	push   0x0
c001e35e:	55                   	push   ebp
c001e35f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e362:	83 c4 14             	add    esp,0x14
c001e365:	68 e1 4e 02 c0       	push   0xc0024ee1
c001e36a:	e8 78 e7 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e36f:	83 c4 10             	add    esp,0x10
c001e372:	83 ec 0c             	sub    esp,0xc
c001e375:	47                   	inc    edi
c001e376:	68 e8 4e 02 c0       	push   0xc0024ee8
c001e37b:	e8 67 e7 fe ff       	call   c000cae7 <KeSetBootMessage(char const*)>
c001e380:	83 c4 10             	add    esp,0x10
c001e383:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001e387:	74 0c                	je     c001e395 <IDE::detect()+0x455>
c001e389:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001e390:	e9 10 fc ff ff       	jmp    c001dfa5 <IDE::detect()+0x65>
c001e395:	4e                   	dec    esi
c001e396:	74 0a                	je     c001e3a2 <IDE::detect()+0x462>
c001e398:	be 01 00 00 00       	mov    esi,0x1
c001e39d:	e9 ec fb ff ff       	jmp    c001df8e <IDE::detect()+0x4e>
c001e3a2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e3a8:	5b                   	pop    ebx
c001e3a9:	5e                   	pop    esi
c001e3aa:	5f                   	pop    edi
c001e3ab:	5d                   	pop    ebp
c001e3ac:	c3                   	ret    
c001e3ad:	90                   	nop

c001e3ae <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e3ae:	55                   	push   ebp
c001e3af:	57                   	push   edi
c001e3b0:	56                   	push   esi
c001e3b1:	53                   	push   ebx
c001e3b2:	83 ec 1c             	sub    esp,0x1c
c001e3b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e3b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e3bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001e3c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e3c9:	88 c3                	mov    bl,al
c001e3cb:	25 ff 00 00 00       	and    eax,0xff
c001e3d0:	0f 84 88 00 00 00    	je     c001e45e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e3d6:	83 ec 0c             	sub    esp,0xc
c001e3d9:	89 c7                	mov    edi,eax
c001e3db:	68 ec 4e 02 c0       	push   0xc0024eec
c001e3e0:	e8 7f 8b fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e3e5:	83 c4 10             	add    esp,0x10
c001e3e8:	83 ff 01             	cmp    edi,0x1
c001e3eb:	74 6b                	je     c001e458 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001e3ed:	83 ff 02             	cmp    edi,0x2
c001e3f0:	75 58                	jne    c001e44a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001e3f2:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001e3f7:	01 ff                	add    edi,edi
c001e3f9:	50                   	push   eax
c001e3fa:	09 fe                	or     esi,edi
c001e3fc:	6a 01                	push   0x1
c001e3fe:	89 f0                	mov    eax,esi
c001e400:	0f b6 f0             	movzx  esi,al
c001e403:	c1 e6 06             	shl    esi,0x6
c001e406:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001e40e:	50                   	push   eax
c001e40f:	55                   	push   ebp
c001e410:	e8 6f f3 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e415:	83 c4 10             	add    esp,0x10
c001e418:	a8 01                	test   al,0x1
c001e41a:	74 02                	je     c001e41e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001e41c:	b3 07                	mov    bl,0x7
c001e41e:	a8 02                	test   al,0x2
c001e420:	74 02                	je     c001e424 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001e422:	b3 03                	mov    bl,0x3
c001e424:	a8 04                	test   al,0x4
c001e426:	74 02                	je     c001e42a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001e428:	b3 14                	mov    bl,0x14
c001e42a:	a8 08                	test   al,0x8
c001e42c:	74 02                	je     c001e430 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001e42e:	b3 03                	mov    bl,0x3
c001e430:	a8 10                	test   al,0x10
c001e432:	74 02                	je     c001e436 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001e434:	b3 15                	mov    bl,0x15
c001e436:	a8 20                	test   al,0x20
c001e438:	74 02                	je     c001e43c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001e43a:	b3 03                	mov    bl,0x3
c001e43c:	a8 40                	test   al,0x40
c001e43e:	74 02                	je     c001e442 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e440:	b3 16                	mov    bl,0x16
c001e442:	a8 80                	test   al,0x80
c001e444:	74 18                	je     c001e45e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e446:	b3 0d                	mov    bl,0xd
c001e448:	eb 14                	jmp    c001e45e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e44a:	83 ff 03             	cmp    edi,0x3
c001e44d:	74 0d                	je     c001e45c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001e44f:	83 ff 04             	cmp    edi,0x4
c001e452:	75 0a                	jne    c001e45e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e454:	b3 08                	mov    bl,0x8
c001e456:	eb 06                	jmp    c001e45e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e458:	b3 13                	mov    bl,0x13
c001e45a:	eb 02                	jmp    c001e45e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e45c:	b3 17                	mov    bl,0x17
c001e45e:	83 c4 1c             	add    esp,0x1c
c001e461:	88 d8                	mov    al,bl
c001e463:	5b                   	pop    ebx
c001e464:	5e                   	pop    esi
c001e465:	5f                   	pop    edi
c001e466:	5d                   	pop    ebp
c001e467:	c3                   	ret    

c001e468 <IDE::polling(unsigned char, unsigned int)>:
c001e468:	57                   	push   edi
c001e469:	56                   	push   esi
c001e46a:	53                   	push   ebx
c001e46b:	bb 04 00 00 00       	mov    ebx,0x4
c001e470:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e474:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e479:	52                   	push   edx
c001e47a:	6a 0c                	push   0xc
c001e47c:	56                   	push   esi
c001e47d:	57                   	push   edi
c001e47e:	e8 01 f3 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e483:	83 c4 10             	add    esp,0x10
c001e486:	4b                   	dec    ebx
c001e487:	75 f0                	jne    c001e479 <IDE::polling(unsigned char, unsigned int)+0x11>
c001e489:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e48e:	50                   	push   eax
c001e48f:	6a 0c                	push   0xc
c001e491:	56                   	push   esi
c001e492:	57                   	push   edi
c001e493:	e8 ec f2 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e498:	83 c4 10             	add    esp,0x10
c001e49b:	a8 01                	test   al,0x1
c001e49d:	75 17                	jne    c001e4b6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e49f:	a8 20                	test   al,0x20
c001e4a1:	75 0f                	jne    c001e4b2 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e4a3:	4b                   	dec    ebx
c001e4a4:	74 10                	je     c001e4b6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e4a6:	a8 80                	test   al,0x80
c001e4a8:	75 e4                	jne    c001e48e <IDE::polling(unsigned char, unsigned int)+0x26>
c001e4aa:	a8 08                	test   al,0x8
c001e4ac:	74 e0                	je     c001e48e <IDE::polling(unsigned char, unsigned int)+0x26>
c001e4ae:	31 c0                	xor    eax,eax
c001e4b0:	eb 06                	jmp    c001e4b8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e4b2:	b0 01                	mov    al,0x1
c001e4b4:	eb 02                	jmp    c001e4b8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e4b6:	b0 02                	mov    al,0x2
c001e4b8:	5b                   	pop    ebx
c001e4b9:	5e                   	pop    esi
c001e4ba:	5f                   	pop    edi
c001e4bb:	c3                   	ret    

c001e4bc <SATABus::close(int, int, void*)>:
c001e4bc:	31 c0                	xor    eax,eax
c001e4be:	c3                   	ret    
c001e4bf:	90                   	nop

c001e4c0 <SATABus::detect()>:
c001e4c0:	c3                   	ret    
c001e4c1:	90                   	nop

c001e4c2 <SATABus::SATABus()>:
c001e4c2:	83 ec 0c             	sub    esp,0xc
c001e4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4c9:	83 ec 08             	sub    esp,0x8
c001e4cc:	68 24 4f 02 c0       	push   0xc0024f24
c001e4d1:	50                   	push   eax
c001e4d2:	e8 31 b1 fe ff       	call   c0009608 <HardDiskController::HardDiskController(char const*)>
c001e4d7:	83 c4 10             	add    esp,0x10
c001e4da:	ba 50 4f 02 c0       	mov    edx,0xc0024f50
c001e4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e3:	89 10                	mov    DWORD PTR [eax],edx
c001e4e5:	83 ec 0c             	sub    esp,0xc
c001e4e8:	6a 50                	push   0x50
c001e4ea:	e8 49 16 ff ff       	call   c000fb38 <Phys::allocateContiguousPages(int)>
c001e4ef:	83 c4 10             	add    esp,0x10
c001e4f2:	89 c2                	mov    edx,eax
c001e4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e4fe:	83 ec 0c             	sub    esp,0xc
c001e501:	6a 50                	push   0x50
c001e503:	e8 51 47 ff ff       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c001e508:	83 c4 10             	add    esp,0x10
c001e50b:	89 c2                	mov    edx,eax
c001e50d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e511:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e517:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c001e51c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e520:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e52a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e530:	83 ec 0c             	sub    esp,0xc
c001e533:	6a 03                	push   0x3
c001e535:	6a 50                	push   0x50
c001e537:	51                   	push   ecx
c001e538:	52                   	push   edx
c001e539:	50                   	push   eax
c001e53a:	e8 e7 4f ff ff       	call   c0013526 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e53f:	83 c4 20             	add    esp,0x20
c001e542:	90                   	nop
c001e543:	83 c4 0c             	add    esp,0xc
c001e546:	c3                   	ret    
c001e547:	90                   	nop

c001e548 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e548:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e54c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e54f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e552:	09 c2                	or     edx,eax
c001e554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e558:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e55e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e560:	31 c0                	xor    eax,eax
c001e562:	c1 e9 08             	shr    ecx,0x8
c001e565:	83 e1 0f             	and    ecx,0xf
c001e568:	39 c8                	cmp    eax,ecx
c001e56a:	74 0a                	je     c001e576 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001e56c:	f6 c2 01             	test   dl,0x1
c001e56f:	74 08                	je     c001e579 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e571:	d1 ea                	shr    edx,1
c001e573:	40                   	inc    eax
c001e574:	eb f2                	jmp    c001e568 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001e576:	83 c8 ff             	or     eax,0xffffffff
c001e579:	c3                   	ret    

c001e57a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e57a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e57e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e581:	89 c2                	mov    edx,eax
c001e583:	c1 ea 08             	shr    edx,0x8
c001e586:	83 e2 0f             	and    edx,0xf
c001e589:	4a                   	dec    edx
c001e58a:	75 32                	jne    c001e5be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e58c:	83 e0 0f             	and    eax,0xf
c001e58f:	83 f8 03             	cmp    eax,0x3
c001e592:	75 2a                	jne    c001e5be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e594:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e597:	b8 02 00 00 00       	mov    eax,0x2
c001e59c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e5a2:	74 1c                	je     c001e5c0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e5a4:	b8 04 00 00 00       	mov    eax,0x4
c001e5a9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e5af:	74 0f                	je     c001e5c0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e5b1:	31 c0                	xor    eax,eax
c001e5b3:	83 fa 03             	cmp    edx,0x3
c001e5b6:	0f 94 c0             	sete   al
c001e5b9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e5bd:	c3                   	ret    
c001e5be:	31 c0                	xor    eax,eax
c001e5c0:	c3                   	ret    
c001e5c1:	90                   	nop

c001e5c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e5c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e5c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e5c9:	0f ba e2 0f          	bt     edx,0xf
c001e5cd:	72 f7                	jb     c001e5c6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e5cf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e5d2:	83 ca 10             	or     edx,0x10
c001e5d5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e5d8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e5db:	83 ca 01             	or     edx,0x1
c001e5de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e5e1:	c3                   	ret    

c001e5e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e5e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e5e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e5e9:	83 e2 fe             	and    edx,0xfffffffe
c001e5ec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e5ef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e5f2:	83 e2 ef             	and    edx,0xffffffef
c001e5f5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e5f8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e5fb:	0f ba e2 0e          	bt     edx,0xe
c001e5ff:	72 f7                	jb     c001e5f8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e601:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e604:	0f ba e2 0f          	bt     edx,0xf
c001e608:	72 ee                	jb     c001e5f8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e60a:	c3                   	ret    
c001e60b:	90                   	nop

c001e60c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e60c:	55                   	push   ebp
c001e60d:	57                   	push   edi
c001e60e:	56                   	push   esi
c001e60f:	53                   	push   ebx
c001e610:	83 ec 1c             	sub    esp,0x1c
c001e613:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e617:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e61b:	53                   	push   ebx
c001e61c:	56                   	push   esi
c001e61d:	e8 c0 ff ff ff       	call   c001e5e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e622:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001e626:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e62c:	83 ec 0c             	sub    esp,0xc
c001e62f:	c1 e5 0a             	shl    ebp,0xa
c001e632:	01 e8                	add    eax,ebp
c001e634:	89 03                	mov    DWORD PTR [ebx],eax
c001e636:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e638:	68 00 04 00 00       	push   0x400
c001e63d:	6a 00                	push   0x0
c001e63f:	50                   	push   eax
c001e640:	e8 ab 1e fe ff       	call   c00004f0 <memset>
c001e645:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e64b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e64f:	01 e8                	add    eax,ebp
c001e651:	83 c4 1c             	add    esp,0x1c
c001e654:	89 03                	mov    DWORD PTR [ebx],eax
c001e656:	c1 e2 08             	shl    edx,0x8
c001e659:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e660:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001e666:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e66c:	01 f8                	add    eax,edi
c001e66e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e671:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e674:	68 00 01 00 00       	push   0x100
c001e679:	6a 00                	push   0x0
c001e67b:	50                   	push   eax
c001e67c:	e8 6f 1e fe ff       	call   c00004f0 <memset>
c001e681:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001e687:	01 fa                	add    edx,edi
c001e689:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e68d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e690:	c1 e7 0d             	shl    edi,0xd
c001e693:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e69a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e6a0:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e6a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e6aa:	31 ff                	xor    edi,edi
c001e6ac:	83 c4 10             	add    esp,0x10
c001e6af:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e6b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e6b9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e6bf:	83 c5 20             	add    ebp,0x20
c001e6c2:	01 f8                	add    eax,edi
c001e6c4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e6c7:	52                   	push   edx
c001e6c8:	68 00 01 00 00       	push   0x100
c001e6cd:	6a 00                	push   0x0
c001e6cf:	50                   	push   eax
c001e6d0:	e8 1b 1e fe ff       	call   c00004f0 <memset>
c001e6d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e6d9:	83 c4 10             	add    esp,0x10
c001e6dc:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e6e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e6e9:	01 f8                	add    eax,edi
c001e6eb:	81 c7 00 01 00 00    	add    edi,0x100
c001e6f1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e6f4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e6fa:	75 b3                	jne    c001e6af <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001e6fc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001e703:	50                   	push   eax
c001e704:	50                   	push   eax
c001e705:	53                   	push   ebx
c001e706:	56                   	push   esi
c001e707:	e8 b6 fe ff ff       	call   c001e5c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e70c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001e713:	83 c4 2c             	add    esp,0x2c
c001e716:	5b                   	pop    ebx
c001e717:	5e                   	pop    esi
c001e718:	5f                   	pop    edi
c001e719:	5d                   	pop    ebp
c001e71a:	c3                   	ret    
c001e71b:	90                   	nop

c001e71c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e71c:	55                   	push   ebp
c001e71d:	57                   	push   edi
c001e71e:	56                   	push   esi
c001e71f:	53                   	push   ebx
c001e720:	31 db                	xor    ebx,ebx
c001e722:	83 ec 0c             	sub    esp,0xc
c001e725:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e729:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e72d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e730:	f7 c7 01 00 00 00    	test   edi,0x1
c001e736:	74 7a                	je     c001e7b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e738:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e73c:	89 d8                	mov    eax,ebx
c001e73e:	c1 e0 07             	shl    eax,0x7
c001e741:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e748:	55                   	push   ebp
c001e749:	56                   	push   esi
c001e74a:	e8 2b fe ff ff       	call   c001e57a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e74f:	5a                   	pop    edx
c001e750:	83 f8 01             	cmp    eax,0x1
c001e753:	59                   	pop    ecx
c001e754:	75 21                	jne    c001e777 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e756:	50                   	push   eax
c001e757:	53                   	push   ebx
c001e758:	55                   	push   ebp
c001e759:	56                   	push   esi
c001e75a:	e8 ad fe ff ff       	call   c001e60c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e75f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e766:	e8 b4 0d ff ff       	call   c000f51f <malloc>
c001e76b:	89 c5                	mov    ebp,eax
c001e76d:	89 04 24             	mov    DWORD PTR [esp],eax
c001e770:	e8 25 0f 00 00       	call   c001f69a <SATA::SATA()>
c001e775:	eb 24                	jmp    c001e79b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e777:	83 f8 04             	cmp    eax,0x4
c001e77a:	75 36                	jne    c001e7b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e77c:	51                   	push   ecx
c001e77d:	53                   	push   ebx
c001e77e:	55                   	push   ebp
c001e77f:	56                   	push   esi
c001e780:	e8 87 fe ff ff       	call   c001e60c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e785:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001e78c:	e8 8e 0d ff ff       	call   c000f51f <malloc>
c001e791:	89 c5                	mov    ebp,eax
c001e793:	89 04 24             	mov    DWORD PTR [esp],eax
c001e796:	e8 97 12 00 00       	call   c001fa32 <SATAPI::SATAPI()>
c001e79b:	58                   	pop    eax
c001e79c:	5a                   	pop    edx
c001e79d:	55                   	push   ebp
c001e79e:	56                   	push   esi
c001e79f:	e8 0c ab fe ff       	call   c00092b0 <Device::addChild(Device*)>
c001e7a4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e7a7:	56                   	push   esi
c001e7a8:	6a 00                	push   0x0
c001e7aa:	53                   	push   ebx
c001e7ab:	55                   	push   ebp
c001e7ac:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e7af:	83 c4 20             	add    esp,0x20
c001e7b2:	d1 ef                	shr    edi,1
c001e7b4:	43                   	inc    ebx
c001e7b5:	83 fb 20             	cmp    ebx,0x20
c001e7b8:	0f 85 72 ff ff ff    	jne    c001e730 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e7be:	83 c4 0c             	add    esp,0xc
c001e7c1:	5b                   	pop    ebx
c001e7c2:	5e                   	pop    esi
c001e7c3:	5f                   	pop    edi
c001e7c4:	5d                   	pop    ebp
c001e7c5:	c3                   	ret    

c001e7c6 <SATABus::open(int, int, void*)>:
c001e7c6:	53                   	push   ebx
c001e7c7:	83 ec 08             	sub    esp,0x8
c001e7ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e7ce:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001e7d4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001e7da:	e8 05 7a ff ff       	call   c00161e4 <KeDisablePreemption()>
c001e7df:	52                   	push   edx
c001e7e0:	52                   	push   edx
c001e7e1:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001e7e7:	53                   	push   ebx
c001e7e8:	e8 2f ff ff ff       	call   c001e71c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e7ed:	e8 1a 7a ff ff       	call   c001620c <KeRestorePreemption()>
c001e7f2:	31 c0                	xor    eax,eax
c001e7f4:	83 c4 18             	add    esp,0x18
c001e7f7:	5b                   	pop    ebx
c001e7f8:	c3                   	ret    
c001e7f9:	90                   	nop

c001e7fa <ATA::close(int, int, void*)>:
c001e7fa:	83 ec 0c             	sub    esp,0xc
c001e7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e801:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e807:	85 c0                	test   eax,eax
c001e809:	74 0c                	je     c001e817 <ATA::close(int, int, void*)+0x1d>
c001e80b:	83 ec 0c             	sub    esp,0xc
c001e80e:	8b 10                	mov    edx,DWORD PTR [eax]
c001e810:	50                   	push   eax
c001e811:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e814:	83 c4 10             	add    esp,0x10
c001e817:	31 c0                	xor    eax,eax
c001e819:	83 c4 0c             	add    esp,0xc
c001e81c:	c3                   	ret    
c001e81d:	90                   	nop

c001e81e <ATA::powerSaving(PowerSavingLevel)>:
c001e81e:	c3                   	ret    
c001e81f:	90                   	nop

c001e820 <ATA::ATA()>:
c001e820:	83 ec 0c             	sub    esp,0xc
c001e823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e827:	83 ec 04             	sub    esp,0x4
c001e82a:	68 00 02 00 00       	push   0x200
c001e82f:	68 d1 50 02 c0       	push   0xc00250d1
c001e834:	50                   	push   eax
c001e835:	e8 58 ae fe ff       	call   c0009692 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e83a:	83 c4 10             	add    esp,0x10
c001e83d:	ba 38 50 02 c0       	mov    edx,0xc0025038
c001e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e846:	89 10                	mov    DWORD PTR [eax],edx
c001e848:	90                   	nop
c001e849:	83 c4 0c             	add    esp,0xc
c001e84c:	c3                   	ret    
c001e84d:	90                   	nop

c001e84e <ATA::flush(bool)>:
c001e84e:	53                   	push   ebx
c001e84f:	83 ec 08             	sub    esp,0x8
c001e852:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e856:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001e85b:	83 f8 01             	cmp    eax,0x1
c001e85e:	19 c0                	sbb    eax,eax
c001e860:	83 e0 fd             	and    eax,0xfffffffd
c001e863:	05 ea 00 00 00       	add    eax,0xea
c001e868:	50                   	push   eax
c001e869:	6a 07                	push   0x7
c001e86b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e872:	50                   	push   eax
c001e873:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e879:	e8 46 ee ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e87e:	83 c4 0c             	add    esp,0xc
c001e881:	6a 00                	push   0x0
c001e883:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e88a:	50                   	push   eax
c001e88b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e891:	e8 d2 fb ff ff       	call   c001e468 <IDE::polling(unsigned char, unsigned int)>
c001e896:	83 c4 18             	add    esp,0x18
c001e899:	5b                   	pop    ebx
c001e89a:	c3                   	ret    
c001e89b:	90                   	nop

c001e89c <ATA::readyForCommand()>:
c001e89c:	56                   	push   esi
c001e89d:	53                   	push   ebx
c001e89e:	53                   	push   ebx
c001e89f:	31 db                	xor    ebx,ebx
c001e8a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e8a5:	51                   	push   ecx
c001e8a6:	6a 0c                	push   0xc
c001e8a8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e8af:	50                   	push   eax
c001e8b0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e8b6:	e8 c9 ee ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001e8bb:	83 c4 10             	add    esp,0x10
c001e8be:	a8 88                	test   al,0x88
c001e8c0:	74 1f                	je     c001e8e1 <ATA::readyForCommand()+0x45>
c001e8c2:	43                   	inc    ebx
c001e8c3:	83 fb 63             	cmp    ebx,0x63
c001e8c6:	7e dd                	jle    c001e8a5 <ATA::readyForCommand()+0x9>
c001e8c8:	83 ec 0c             	sub    esp,0xc
c001e8cb:	6a 0a                	push   0xa
c001e8cd:	e8 9a 7d ff ff       	call   c001666c <milliTenthSleep(unsigned int)>
c001e8d2:	83 c4 10             	add    esp,0x10
c001e8d5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e8db:	75 c8                	jne    c001e8a5 <ATA::readyForCommand()+0x9>
c001e8dd:	31 c0                	xor    eax,eax
c001e8df:	eb 02                	jmp    c001e8e3 <ATA::readyForCommand()+0x47>
c001e8e1:	b0 01                	mov    al,0x1
c001e8e3:	5a                   	pop    edx
c001e8e4:	5b                   	pop    ebx
c001e8e5:	5e                   	pop    esi
c001e8e6:	c3                   	ret    
c001e8e7:	90                   	nop

c001e8e8 <ATA::access(unsigned long long, int, void*, bool)>:
c001e8e8:	55                   	push   ebp
c001e8e9:	57                   	push   edi
c001e8ea:	56                   	push   esi
c001e8eb:	53                   	push   ebx
c001e8ec:	83 ec 2c             	sub    esp,0x2c
c001e8ef:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e8f3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e8f7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e8fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e8ff:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e903:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e907:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e90b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e911:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e915:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e91b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e91f:	c1 e0 06             	shl    eax,0x6
c001e922:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e92a:	74 5d                	je     c001e989 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001e92c:	89 fa                	mov    edx,edi
c001e92e:	89 f0                	mov    eax,esi
c001e930:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e934:	c1 ea 1c             	shr    edx,0x1c
c001e937:	89 d1                	mov    ecx,edx
c001e939:	09 c1                	or     ecx,eax
c001e93b:	74 25                	je     c001e962 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001e93d:	31 ed                	xor    ebp,ebp
c001e93f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e946:	89 fa                	mov    edx,edi
c001e948:	89 f0                	mov    eax,esi
c001e94a:	0f ad d0             	shrd   eax,edx,cl
c001e94d:	d3 ea                	shr    edx,cl
c001e94f:	f6 c1 20             	test   cl,0x20
c001e952:	74 02                	je     c001e956 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001e954:	89 d0                	mov    eax,edx
c001e956:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e95a:	45                   	inc    ebp
c001e95b:	83 fd 06             	cmp    ebp,0x6
c001e95e:	75 df                	jne    c001e93f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001e960:	eb 76                	jmp    c001e9d8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001e962:	89 f0                	mov    eax,esi
c001e964:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e969:	89 fa                	mov    edx,edi
c001e96b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e972:	0f ac d0 10          	shrd   eax,edx,0x10
c001e976:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e97b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e97f:	c1 ee 18             	shr    esi,0x18
c001e982:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e987:	eb 56                	jmp    c001e9df <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001e989:	6a 00                	push   0x0
c001e98b:	6a 3f                	push   0x3f
c001e98d:	57                   	push   edi
c001e98e:	56                   	push   esi
c001e98f:	e8 20 25 00 00       	call   c0020eb4 <__umoddi3>
c001e994:	83 c4 10             	add    esp,0x10
c001e997:	40                   	inc    eax
c001e998:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e99c:	6a 00                	push   0x0
c001e99e:	68 f0 03 00 00       	push   0x3f0
c001e9a3:	57                   	push   edi
c001e9a4:	56                   	push   esi
c001e9a5:	e8 0a 24 00 00       	call   c0020db4 <__udivdi3>
c001e9aa:	83 c4 10             	add    esp,0x10
c001e9ad:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e9b2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e9b9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e9be:	6a 00                	push   0x0
c001e9c0:	6a 3f                	push   0x3f
c001e9c2:	57                   	push   edi
c001e9c3:	56                   	push   esi
c001e9c4:	e8 eb 23 00 00       	call   c0020db4 <__udivdi3>
c001e9c9:	83 c4 10             	add    esp,0x10
c001e9cc:	83 e0 0f             	and    eax,0xf
c001e9cf:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e9d4:	89 c6                	mov    esi,eax
c001e9d6:	eb 07                	jmp    c001e9df <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001e9d8:	31 f6                	xor    esi,esi
c001e9da:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e9df:	55                   	push   ebp
c001e9e0:	6a 00                	push   0x0
c001e9e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e9e9:	50                   	push   eax
c001e9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e9ee:	e8 d9 ee ff ff       	call   c001d8cc <IDE::enableIRQs(unsigned char, bool)>
c001e9f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e9f6:	e8 a1 fe ff ff       	call   c001e89c <ATA::readyForCommand()>
c001e9fb:	83 c4 10             	add    esp,0x10
c001e9fe:	84 c0                	test   al,al
c001ea00:	75 0a                	jne    c001ea0c <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001ea02:	be 01 00 00 00       	mov    esi,0x1
c001ea07:	e9 c2 02 00 00       	jmp    c001ecce <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001ea0c:	fa                   	cli    
c001ea0d:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c001ea13:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ea19:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001ea1e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ea24:	75 0a                	jne    c001ea30 <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001ea26:	c1 e0 04             	shl    eax,0x4
c001ea29:	09 c6                	or     esi,eax
c001ea2b:	83 ce a0             	or     esi,0xffffffa0
c001ea2e:	eb 08                	jmp    c001ea38 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001ea30:	c1 e0 04             	shl    eax,0x4
c001ea33:	09 c6                	or     esi,eax
c001ea35:	83 ce e0             	or     esi,0xffffffe0
c001ea38:	89 f0                	mov    eax,esi
c001ea3a:	0f b6 d2             	movzx  edx,dl
c001ea3d:	0f b6 f0             	movzx  esi,al
c001ea40:	56                   	push   esi
c001ea41:	6a 06                	push   0x6
c001ea43:	52                   	push   edx
c001ea44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ea4a:	e8 75 ec ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea4f:	83 c4 10             	add    esp,0x10
c001ea52:	6a 00                	push   0x0
c001ea54:	6a 01                	push   0x1
c001ea56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea5d:	50                   	push   eax
c001ea5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ea64:	e8 5b ec ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea69:	83 c4 10             	add    esp,0x10
c001ea6c:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ea71:	83 f8 02             	cmp    eax,0x2
c001ea74:	75 6e                	jne    c001eae4 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001ea76:	6a 00                	push   0x0
c001ea78:	6a 08                	push   0x8
c001ea7a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea81:	50                   	push   eax
c001ea82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ea88:	e8 37 ec ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea8d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ea92:	50                   	push   eax
c001ea93:	6a 09                	push   0x9
c001ea95:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea9c:	50                   	push   eax
c001ea9d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eaa3:	e8 1c ec ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eaa8:	83 c4 20             	add    esp,0x20
c001eaab:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001eab0:	50                   	push   eax
c001eab1:	6a 0a                	push   0xa
c001eab3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eaba:	50                   	push   eax
c001eabb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eac1:	e8 fe eb ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eac6:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001eacb:	50                   	push   eax
c001eacc:	6a 0b                	push   0xb
c001eace:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ead5:	50                   	push   eax
c001ead6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eadc:	e8 e3 eb ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eae1:	83 c4 20             	add    esp,0x20
c001eae4:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001eae9:	50                   	push   eax
c001eaea:	6a 02                	push   0x2
c001eaec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eaf3:	50                   	push   eax
c001eaf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eafa:	e8 c5 eb ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eaff:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001eb04:	50                   	push   eax
c001eb05:	6a 03                	push   0x3
c001eb07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb0e:	50                   	push   eax
c001eb0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb15:	e8 aa eb ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb1a:	83 c4 20             	add    esp,0x20
c001eb1d:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001eb22:	50                   	push   eax
c001eb23:	6a 04                	push   0x4
c001eb25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb2c:	50                   	push   eax
c001eb2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb33:	e8 8c eb ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb38:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001eb3d:	50                   	push   eax
c001eb3e:	6a 05                	push   0x5
c001eb40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb47:	50                   	push   eax
c001eb48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb4e:	e8 71 eb ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb53:	83 c4 20             	add    esp,0x20
c001eb56:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001eb5b:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001eb60:	74 13                	je     c001eb75 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001eb62:	83 f8 02             	cmp    eax,0x2
c001eb65:	74 20                	je     c001eb87 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001eb67:	48                   	dec    eax
c001eb68:	0f 85 94 fe ff ff    	jne    c001ea02 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001eb6e:	b8 30 00 00 00       	mov    eax,0x30
c001eb73:	eb 1e                	jmp    c001eb93 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001eb75:	83 f8 02             	cmp    eax,0x2
c001eb78:	74 14                	je     c001eb8e <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001eb7a:	48                   	dec    eax
c001eb7b:	b8 20 00 00 00       	mov    eax,0x20
c001eb80:	74 11                	je     c001eb93 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001eb82:	e9 7b fe ff ff       	jmp    c001ea02 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001eb87:	b8 34 00 00 00       	mov    eax,0x34
c001eb8c:	eb 05                	jmp    c001eb93 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001eb8e:	b8 24 00 00 00       	mov    eax,0x24
c001eb93:	50                   	push   eax
c001eb94:	6a 07                	push   0x7
c001eb96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb9d:	50                   	push   eax
c001eb9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eba4:	e8 1b eb ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eba9:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001ebb0:	83 c4 10             	add    esp,0x10
c001ebb3:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c001ebba:	75 01                	jne    c001ebbd <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001ebbc:	fb                   	sti    
c001ebbd:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ebc1:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ebc6:	85 f6                	test   esi,esi
c001ebc8:	0f 84 dd 00 00 00    	je     c001ecab <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001ebce:	57                   	push   edi
c001ebcf:	6a 01                	push   0x1
c001ebd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebd8:	50                   	push   eax
c001ebd9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ebdf:	e8 84 f8 ff ff       	call   c001e468 <IDE::polling(unsigned char, unsigned int)>
c001ebe4:	83 c4 10             	add    esp,0x10
c001ebe7:	0f b6 c0             	movzx  eax,al
c001ebea:	85 c0                	test   eax,eax
c001ebec:	74 23                	je     c001ec11 <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001ebee:	50                   	push   eax
c001ebef:	89 c6                	mov    esi,eax
c001ebf1:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ebf8:	50                   	push   eax
c001ebf9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ec00:	50                   	push   eax
c001ec01:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ec07:	e8 a2 f7 ff ff       	call   c001e3ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ec0c:	e9 ba 00 00 00       	jmp    c001eccb <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001ec11:	85 ed                	test   ebp,ebp
c001ec13:	74 49                	je     c001ec5e <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001ec15:	fa                   	cli    
c001ec16:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c001ec1c:	31 c9                	xor    ecx,ecx
c001ec1e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ec22:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ec26:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001ec2a:	51                   	push   ecx
c001ec2b:	51                   	push   ecx
c001ec2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ec33:	50                   	push   eax
c001ec34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ec3a:	e8 73 ea ff ff       	call   c001d6b2 <IDE::getBase(unsigned char)>
c001ec3f:	89 c2                	mov    edx,eax
c001ec41:	89 f8                	mov    eax,edi
c001ec43:	66 ef                	out    dx,ax
c001ec45:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ec49:	83 c4 10             	add    esp,0x10
c001ec4c:	41                   	inc    ecx
c001ec4d:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001ec53:	75 c9                	jne    c001ec1e <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001ec55:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001ec5c:	eb 35                	jmp    c001ec93 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001ec5e:	fa                   	cli    
c001ec5f:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c001ec65:	52                   	push   edx
c001ec66:	52                   	push   edx
c001ec67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ec6e:	50                   	push   eax
c001ec6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ec75:	e8 38 ea ff ff       	call   c001d6b2 <IDE::getBase(unsigned char)>
c001ec7a:	b9 00 01 00 00       	mov    ecx,0x100
c001ec7f:	89 c2                	mov    edx,eax
c001ec81:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ec85:	fc                   	cld    
c001ec86:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ec89:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001ec90:	83 c4 10             	add    esp,0x10
c001ec93:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c001ec9a:	75 01                	jne    c001ec9d <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001ec9c:	fb                   	sti    
c001ec9d:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001eca5:	4e                   	dec    esi
c001eca6:	e9 1b ff ff ff       	jmp    c001ebc6 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001ecab:	31 f6                	xor    esi,esi
c001ecad:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ecb2:	74 1a                	je     c001ecce <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001ecb4:	50                   	push   eax
c001ecb5:	50                   	push   eax
c001ecb6:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001ecbb:	83 f8 02             	cmp    eax,0x2
c001ecbe:	0f 94 c0             	sete   al
c001ecc1:	0f b6 c0             	movzx  eax,al
c001ecc4:	50                   	push   eax
c001ecc5:	53                   	push   ebx
c001ecc6:	e8 83 fb ff ff       	call   c001e84e <ATA::flush(bool)>
c001eccb:	83 c4 10             	add    esp,0x10
c001ecce:	83 c4 2c             	add    esp,0x2c
c001ecd1:	89 f0                	mov    eax,esi
c001ecd3:	5b                   	pop    ebx
c001ecd4:	5e                   	pop    esi
c001ecd5:	5f                   	pop    edi
c001ecd6:	5d                   	pop    ebp
c001ecd7:	c3                   	ret    

c001ecd8 <ATA::read(unsigned long long, int, void*)>:
c001ecd8:	57                   	push   edi
c001ecd9:	b8 04 00 00 00       	mov    eax,0x4
c001ecde:	56                   	push   esi
c001ecdf:	53                   	push   ebx
c001ece0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ece4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ece8:	8d 7a ff             	lea    edi,[edx-0x1]
c001eceb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ecef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ecf3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ecf9:	77 25                	ja     c001ed20 <ATA::read(unsigned long long, int, void*)+0x48>
c001ecfb:	b8 06 00 00 00       	mov    eax,0x6
c001ed00:	85 f6                	test   esi,esi
c001ed02:	74 1c                	je     c001ed20 <ATA::read(unsigned long long, int, void*)+0x48>
c001ed04:	50                   	push   eax
c001ed05:	50                   	push   eax
c001ed06:	6a 00                	push   0x0
c001ed08:	56                   	push   esi
c001ed09:	52                   	push   edx
c001ed0a:	53                   	push   ebx
c001ed0b:	51                   	push   ecx
c001ed0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ed10:	e8 d3 fb ff ff       	call   c001e8e8 <ATA::access(unsigned long long, int, void*, bool)>
c001ed15:	83 c4 20             	add    esp,0x20
c001ed18:	85 c0                	test   eax,eax
c001ed1a:	0f 95 c0             	setne  al
c001ed1d:	0f b6 c0             	movzx  eax,al
c001ed20:	5b                   	pop    ebx
c001ed21:	5e                   	pop    esi
c001ed22:	5f                   	pop    edi
c001ed23:	c3                   	ret    

c001ed24 <ATA::write(unsigned long long, int, void*)>:
c001ed24:	57                   	push   edi
c001ed25:	b8 04 00 00 00       	mov    eax,0x4
c001ed2a:	56                   	push   esi
c001ed2b:	53                   	push   ebx
c001ed2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ed30:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ed34:	8d 7a ff             	lea    edi,[edx-0x1]
c001ed37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ed3b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ed3f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ed45:	77 25                	ja     c001ed6c <ATA::write(unsigned long long, int, void*)+0x48>
c001ed47:	b8 06 00 00 00       	mov    eax,0x6
c001ed4c:	85 f6                	test   esi,esi
c001ed4e:	74 1c                	je     c001ed6c <ATA::write(unsigned long long, int, void*)+0x48>
c001ed50:	50                   	push   eax
c001ed51:	50                   	push   eax
c001ed52:	6a 01                	push   0x1
c001ed54:	56                   	push   esi
c001ed55:	52                   	push   edx
c001ed56:	53                   	push   ebx
c001ed57:	51                   	push   ecx
c001ed58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ed5c:	e8 87 fb ff ff       	call   c001e8e8 <ATA::access(unsigned long long, int, void*, bool)>
c001ed61:	83 c4 20             	add    esp,0x20
c001ed64:	85 c0                	test   eax,eax
c001ed66:	0f 95 c0             	setne  al
c001ed69:	0f b6 c0             	movzx  eax,al
c001ed6c:	5b                   	pop    ebx
c001ed6d:	5e                   	pop    esi
c001ed6e:	5f                   	pop    edi
c001ed6f:	c3                   	ret    

c001ed70 <ATA::detectCHS()>:
c001ed70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ed74:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ed7a:	c1 e0 06             	shl    eax,0x6
c001ed7d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ed83:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ed8d:	c7 44 24 04 74 4f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024f74
c001ed95:	e9 cc 0a ff ff       	jmp    c000f866 <KePanic(char const*)>

c001ed9a <ATA::open(int, int, void*)>:
c001ed9a:	53                   	push   ebx
c001ed9b:	83 ec 08             	sub    esp,0x8
c001ed9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eda2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eda6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001edaa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001edb0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001edb6:	c1 e0 06             	shl    eax,0x6
c001edb9:	01 d0                	add    eax,edx
c001edbb:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001edc2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001edc8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001edcf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001edd9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eddf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ede6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eded:	75 0c                	jne    c001edfb <ATA::open(int, int, void*)+0x61>
c001edef:	83 ec 0c             	sub    esp,0xc
c001edf2:	53                   	push   ebx
c001edf3:	e8 78 ff ff ff       	call   c001ed70 <ATA::detectCHS()>
c001edf8:	83 c4 10             	add    esp,0x10
c001edfb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ee01:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ee07:	c1 e0 06             	shl    eax,0x6
c001ee0a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ee11:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ee1b:	d1 e8                	shr    eax,1
c001ee1d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ee23:	6a 04                	push   0x4
c001ee25:	6a 0c                	push   0xc
c001ee27:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee2e:	50                   	push   eax
c001ee2f:	52                   	push   edx
c001ee30:	e8 8f e8 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee35:	90                   	nop
c001ee36:	90                   	nop
c001ee37:	6a 00                	push   0x0
c001ee39:	6a 0c                	push   0xc
c001ee3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee42:	50                   	push   eax
c001ee43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee49:	e8 76 e8 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee4e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ee54:	83 c4 20             	add    esp,0x20
c001ee57:	c1 e0 06             	shl    eax,0x6
c001ee5a:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001ee60:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001ee67:	0f 84 00 01 00 00    	je     c001ef6d <ATA::open(int, int, void*)+0x1d3>
c001ee6d:	83 ec 0c             	sub    esp,0xc
c001ee70:	6a 08                	push   0x8
c001ee72:	e8 c1 0c ff ff       	call   c000fb38 <Phys::allocateContiguousPages(int)>
c001ee77:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ee7d:	c7 04 24 86 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f86
c001ee84:	e8 db 80 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ee89:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ee90:	e8 c4 3d ff ff       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c001ee95:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ee9b:	6a 03                	push   0x3
c001ee9d:	50                   	push   eax
c001ee9e:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001eea4:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c001eeaa:	e8 8d 44 ff ff       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c001eeaf:	83 c4 20             	add    esp,0x20
c001eeb2:	e8 a3 0b ff ff       	call   c000fa5a <Phys::allocatePage()>
c001eeb7:	83 ec 0c             	sub    esp,0xc
c001eeba:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001eec0:	6a 01                	push   0x1
c001eec2:	e8 92 3d ff ff       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c001eec7:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001eecd:	6a 03                	push   0x3
c001eecf:	50                   	push   eax
c001eed0:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001eed6:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c001eedc:	e8 5b 44 ff ff       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c001eee1:	83 c4 14             	add    esp,0x14
c001eee4:	68 bf 4f 02 c0       	push   0xc0024fbf
c001eee9:	e8 76 80 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001eeee:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001eef5:	50                   	push   eax
c001eef6:	6a 12                	push   0x12
c001eef8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eeff:	50                   	push   eax
c001ef00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ef06:	e8 b9 e7 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef0b:	83 c4 20             	add    esp,0x20
c001ef0e:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001ef14:	0f b6 c4             	movzx  eax,ah
c001ef17:	50                   	push   eax
c001ef18:	6a 13                	push   0x13
c001ef1a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ef21:	50                   	push   eax
c001ef22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ef28:	e8 97 e7 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef2d:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001ef34:	50                   	push   eax
c001ef35:	6a 14                	push   0x14
c001ef37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ef3e:	50                   	push   eax
c001ef3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ef45:	e8 7a e7 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef4a:	83 c4 20             	add    esp,0x20
c001ef4d:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001ef54:	50                   	push   eax
c001ef55:	6a 15                	push   0x15
c001ef57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ef5e:	50                   	push   eax
c001ef5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ef65:	e8 5a e7 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef6a:	83 c4 10             	add    esp,0x10
c001ef6d:	83 ec 0c             	sub    esp,0xc
c001ef70:	53                   	push   ebx
c001ef71:	e8 84 a7 fe ff       	call   c00096fa <PhysicalDisk::startCache()>
c001ef76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef79:	e8 1c b6 fe ff       	call   c000a59a <createPartitionsForDisk(PhysicalDisk*)>
c001ef7e:	31 c0                	xor    eax,eax
c001ef80:	83 c4 18             	add    esp,0x18
c001ef83:	5b                   	pop    ebx
c001ef84:	c3                   	ret    

c001ef85 <combineCharAndColour(char, unsigned char)>:
c001ef85:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ef8a:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001ef90:	c1 e0 08             	shl    eax,0x8
c001ef93:	09 d0                	or     eax,edx
c001ef95:	c3                   	ret    

c001ef96 <combineColours(unsigned char, unsigned char)>:
c001ef96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ef9b:	c1 e0 04             	shl    eax,0x4
c001ef9e:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001efa2:	c3                   	ret    
c001efa3:	90                   	nop

c001efa4 <ATAPI::write(unsigned long long, int, void*)>:
c001efa4:	b8 03 00 00 00       	mov    eax,0x3
c001efa9:	c3                   	ret    

c001efaa <ATAPI::close(int, int, void*)>:
c001efaa:	83 ec 0c             	sub    esp,0xc
c001efad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001efb7:	85 c0                	test   eax,eax
c001efb9:	74 0c                	je     c001efc7 <ATAPI::close(int, int, void*)+0x1d>
c001efbb:	83 ec 0c             	sub    esp,0xc
c001efbe:	8b 10                	mov    edx,DWORD PTR [eax]
c001efc0:	50                   	push   eax
c001efc1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001efc4:	83 c4 10             	add    esp,0x10
c001efc7:	31 c0                	xor    eax,eax
c001efc9:	83 c4 0c             	add    esp,0xc
c001efcc:	c3                   	ret    
c001efcd:	90                   	nop

c001efce <ATAPI::ATAPI()>:
c001efce:	83 ec 0c             	sub    esp,0xc
c001efd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd5:	83 ec 04             	sub    esp,0x4
c001efd8:	68 00 08 00 00       	push   0x800
c001efdd:	68 71 51 02 c0       	push   0xc0025171
c001efe2:	50                   	push   eax
c001efe3:	e8 aa a6 fe ff       	call   c0009692 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001efe8:	83 c4 10             	add    esp,0x10
c001efeb:	ba 80 50 02 c0       	mov    edx,0xc0025080
c001eff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff4:	89 10                	mov    DWORD PTR [eax],edx
c001eff6:	90                   	nop
c001eff7:	83 c4 0c             	add    esp,0xc
c001effa:	c3                   	ret    
c001effb:	90                   	nop

c001effc <ATAPI::readyForCommand()>:
c001effc:	56                   	push   esi
c001effd:	53                   	push   ebx
c001effe:	53                   	push   ebx
c001efff:	31 db                	xor    ebx,ebx
c001f001:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f005:	51                   	push   ecx
c001f006:	6a 0c                	push   0xc
c001f008:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f00f:	50                   	push   eax
c001f010:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f016:	e8 69 e7 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001f01b:	83 c4 10             	add    esp,0x10
c001f01e:	a8 88                	test   al,0x88
c001f020:	74 25                	je     c001f047 <ATAPI::readyForCommand()+0x4b>
c001f022:	43                   	inc    ebx
c001f023:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001f029:	7e da                	jle    c001f005 <ATAPI::readyForCommand()+0x9>
c001f02b:	83 ec 0c             	sub    esp,0xc
c001f02e:	68 5e 01 00 00       	push   0x15e
c001f033:	e8 34 76 ff ff       	call   c001666c <milliTenthSleep(unsigned int)>
c001f038:	83 c4 10             	add    esp,0x10
c001f03b:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001f041:	75 c2                	jne    c001f005 <ATAPI::readyForCommand()+0x9>
c001f043:	31 c0                	xor    eax,eax
c001f045:	eb 02                	jmp    c001f049 <ATAPI::readyForCommand()+0x4d>
c001f047:	b0 01                	mov    al,0x1
c001f049:	5a                   	pop    edx
c001f04a:	5b                   	pop    ebx
c001f04b:	5e                   	pop    esi
c001f04c:	c3                   	ret    
c001f04d:	90                   	nop

c001f04e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001f04e:	55                   	push   ebp
c001f04f:	57                   	push   edi
c001f050:	56                   	push   esi
c001f051:	53                   	push   ebx
c001f052:	83 ec 20             	sub    esp,0x20
c001f055:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f059:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001f05d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001f061:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f065:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f069:	6a 01                	push   0x1
c001f06b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f072:	50                   	push   eax
c001f073:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f079:	e8 4e e8 ff ff       	call   c001d8cc <IDE::enableIRQs(unsigned char, bool)>
c001f07e:	5e                   	pop    esi
c001f07f:	58                   	pop    eax
c001f080:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f087:	50                   	push   eax
c001f088:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f08e:	e8 0b e6 ff ff       	call   c001d69e <IDE::prepareInterrupt(unsigned char)>
c001f093:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f096:	e8 61 ff ff ff       	call   c001effc <ATAPI::readyForCommand()>
c001f09b:	83 c4 10             	add    esp,0x10
c001f09e:	84 c0                	test   al,al
c001f0a0:	75 0a                	jne    c001f0ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001f0a2:	bb 01 00 00 00       	mov    ebx,0x1
c001f0a7:	e9 60 02 00 00       	jmp    c001f30c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001f0ac:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001f0b2:	c1 e0 04             	shl    eax,0x4
c001f0b5:	0f b6 c0             	movzx  eax,al
c001f0b8:	50                   	push   eax
c001f0b9:	6a 06                	push   0x6
c001f0bb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f0c2:	50                   	push   eax
c001f0c3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f0c9:	e8 f6 e5 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0ce:	6a 00                	push   0x0
c001f0d0:	6a 01                	push   0x1
c001f0d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f0d9:	50                   	push   eax
c001f0da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f0e0:	e8 df e5 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0e5:	83 c4 20             	add    esp,0x20
c001f0e8:	0f b6 c3             	movzx  eax,bl
c001f0eb:	0f b6 df             	movzx  ebx,bh
c001f0ee:	50                   	push   eax
c001f0ef:	6a 04                	push   0x4
c001f0f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f0f8:	50                   	push   eax
c001f0f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f0ff:	e8 c0 e5 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f104:	53                   	push   ebx
c001f105:	6a 05                	push   0x5
c001f107:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f10e:	50                   	push   eax
c001f10f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f115:	e8 aa e5 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f11a:	83 c4 20             	add    esp,0x20
c001f11d:	68 a0 00 00 00       	push   0xa0
c001f122:	6a 07                	push   0x7
c001f124:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f12b:	50                   	push   eax
c001f12c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f132:	e8 8d e5 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f137:	83 c4 0c             	add    esp,0xc
c001f13a:	6a 01                	push   0x1
c001f13c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f143:	50                   	push   eax
c001f144:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f14a:	e8 19 f3 ff ff       	call   c001e468 <IDE::polling(unsigned char, unsigned int)>
c001f14f:	83 c4 10             	add    esp,0x10
c001f152:	0f b6 d8             	movzx  ebx,al
c001f155:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001f15b:	85 db                	test   ebx,ebx
c001f15d:	74 20                	je     c001f17f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001f15f:	53                   	push   ebx
c001f160:	0f b6 c0             	movzx  eax,al
c001f163:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001f16a:	52                   	push   edx
c001f16b:	50                   	push   eax
c001f16c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f172:	e8 37 f2 ff ff       	call   c001e3ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f177:	83 c4 10             	add    esp,0x10
c001f17a:	e9 8d 01 00 00       	jmp    c001f30c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001f17f:	0f b6 c0             	movzx  eax,al
c001f182:	53                   	push   ebx
c001f183:	53                   	push   ebx
c001f184:	50                   	push   eax
c001f185:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f18b:	e8 22 e5 ff ff       	call   c001d6b2 <IDE::getBase(unsigned char)>
c001f190:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f194:	b9 06 00 00 00       	mov    ecx,0x6
c001f199:	89 c2                	mov    edx,eax
c001f19b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001f19e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001f1a2:	83 c4 10             	add    esp,0x10
c001f1a5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001f1aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f1ae:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f1b4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f1bb:	85 db                	test   ebx,ebx
c001f1bd:	0f 84 ec 00 00 00    	je     c001f2af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001f1c3:	51                   	push   ecx
c001f1c4:	51                   	push   ecx
c001f1c5:	52                   	push   edx
c001f1c6:	50                   	push   eax
c001f1c7:	e8 66 e6 ff ff       	call   c001d832 <IDE::waitInterrupt(unsigned char)>
c001f1cc:	83 c4 10             	add    esp,0x10
c001f1cf:	84 c0                	test   al,al
c001f1d1:	0f 84 cb fe ff ff    	je     c001f0a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f1d7:	56                   	push   esi
c001f1d8:	56                   	push   esi
c001f1d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f1e0:	50                   	push   eax
c001f1e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f1e7:	e8 b2 e4 ff ff       	call   c001d69e <IDE::prepareInterrupt(unsigned char)>
c001f1ec:	83 c4 0c             	add    esp,0xc
c001f1ef:	6a 04                	push   0x4
c001f1f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f1f8:	50                   	push   eax
c001f1f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f1ff:	e8 80 e5 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001f204:	83 c4 0c             	add    esp,0xc
c001f207:	89 c6                	mov    esi,eax
c001f209:	6a 05                	push   0x5
c001f20b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f212:	50                   	push   eax
c001f213:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f219:	e8 66 e5 ff ff       	call   c001d784 <IDE::read(unsigned char, unsigned char)>
c001f21e:	89 f1                	mov    ecx,esi
c001f220:	0f b6 c0             	movzx  eax,al
c001f223:	0f b6 f1             	movzx  esi,cl
c001f226:	c1 e0 08             	shl    eax,0x8
c001f229:	09 c6                	or     esi,eax
c001f22b:	d1 fe                	sar    esi,1
c001f22d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001f231:	83 c4 10             	add    esp,0x10
c001f234:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f239:	74 41                	je     c001f27c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001f23b:	31 c9                	xor    ecx,ecx
c001f23d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f243:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f24a:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001f24e:	75 0a                	jne    c001f25a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001f250:	01 c9                	add    ecx,ecx
c001f252:	01 cd                	add    ebp,ecx
c001f254:	4b                   	dec    ebx
c001f255:	e9 54 ff ff ff       	jmp    c001f1ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001f25a:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001f25f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f263:	51                   	push   ecx
c001f264:	51                   	push   ecx
c001f265:	52                   	push   edx
c001f266:	50                   	push   eax
c001f267:	e8 46 e4 ff ff       	call   c001d6b2 <IDE::getBase(unsigned char)>
c001f26c:	89 c2                	mov    edx,eax
c001f26e:	89 f0                	mov    eax,esi
c001f270:	66 ef                	out    dx,ax
c001f272:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f276:	83 c4 10             	add    esp,0x10
c001f279:	41                   	inc    ecx
c001f27a:	eb c1                	jmp    c001f23d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001f27c:	31 f6                	xor    esi,esi
c001f27e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f284:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f28b:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001f28f:	75 06                	jne    c001f297 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001f291:	01 f6                	add    esi,esi
c001f293:	01 f5                	add    ebp,esi
c001f295:	eb bd                	jmp    c001f254 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001f297:	51                   	push   ecx
c001f298:	51                   	push   ecx
c001f299:	52                   	push   edx
c001f29a:	50                   	push   eax
c001f29b:	e8 12 e4 ff ff       	call   c001d6b2 <IDE::getBase(unsigned char)>
c001f2a0:	89 c2                	mov    edx,eax
c001f2a2:	66 ed                	in     ax,dx
c001f2a4:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001f2a9:	83 c4 10             	add    esp,0x10
c001f2ac:	46                   	inc    esi
c001f2ad:	eb cf                	jmp    c001f27e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001f2af:	51                   	push   ecx
c001f2b0:	51                   	push   ecx
c001f2b1:	52                   	push   edx
c001f2b2:	50                   	push   eax
c001f2b3:	e8 7a e5 ff ff       	call   c001d832 <IDE::waitInterrupt(unsigned char)>
c001f2b8:	83 c4 10             	add    esp,0x10
c001f2bb:	84 c0                	test   al,al
c001f2bd:	0f 84 df fd ff ff    	je     c001f0a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f2c3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f2c8:	52                   	push   edx
c001f2c9:	52                   	push   edx
c001f2ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f2d1:	50                   	push   eax
c001f2d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f2d8:	e8 c1 e3 ff ff       	call   c001d69e <IDE::prepareInterrupt(unsigned char)>
c001f2dd:	83 c4 10             	add    esp,0x10
c001f2e0:	50                   	push   eax
c001f2e1:	50                   	push   eax
c001f2e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f2e9:	50                   	push   eax
c001f2ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f2f0:	e8 bd e3 ff ff       	call   c001d6b2 <IDE::getBase(unsigned char)>
c001f2f5:	8d 50 07             	lea    edx,[eax+0x7]
c001f2f8:	ec                   	in     al,dx
c001f2f9:	83 c4 10             	add    esp,0x10
c001f2fc:	a8 88                	test   al,0x88
c001f2fe:	74 0a                	je     c001f30a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001f300:	4b                   	dec    ebx
c001f301:	75 dd                	jne    c001f2e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001f303:	bb 02 00 00 00       	mov    ebx,0x2
c001f308:	eb 02                	jmp    c001f30c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001f30a:	31 db                	xor    ebx,ebx
c001f30c:	83 c4 1c             	add    esp,0x1c
c001f30f:	89 d8                	mov    eax,ebx
c001f311:	5b                   	pop    ebx
c001f312:	5e                   	pop    esi
c001f313:	5f                   	pop    edi
c001f314:	5d                   	pop    ebp
c001f315:	c3                   	ret    

c001f316 <ATAPI::diskRemoved()>:
c001f316:	53                   	push   ebx
c001f317:	83 ec 14             	sub    esp,0x14
c001f31a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f31e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f325:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001f32b:	e8 5a af fe ff       	call   c000a28a <LogicalDisk::unmount()>
c001f330:	58                   	pop    eax
c001f331:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f337:	e8 00 b9 fe ff       	call   c000ac3c <VCache::writeWriteBuffer()>
c001f33c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001f342:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f346:	83 c4 18             	add    esp,0x18
c001f349:	5b                   	pop    ebx
c001f34a:	e9 dd b8 fe ff       	jmp    c000ac2c <VCache::invalidateReadBuffer()>
c001f34f:	90                   	nop

c001f350 <ATAPI::eject()>:
c001f350:	57                   	push   edi
c001f351:	b9 03 00 00 00       	mov    ecx,0x3
c001f356:	53                   	push   ebx
c001f357:	83 ec 14             	sub    esp,0x14
c001f35a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f35e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f362:	fc                   	cld    
c001f363:	31 c0                	xor    eax,eax
c001f365:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f367:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f36c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f371:	50                   	push   eax
c001f372:	50                   	push   eax
c001f373:	6a 00                	push   0x0
c001f375:	6a 00                	push   0x0
c001f377:	6a 00                	push   0x0
c001f379:	6a 02                	push   0x2
c001f37b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f37f:	50                   	push   eax
c001f380:	53                   	push   ebx
c001f381:	e8 c8 fc ff ff       	call   c001f04e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f386:	83 c4 14             	add    esp,0x14
c001f389:	53                   	push   ebx
c001f38a:	e8 87 ff ff ff       	call   c001f316 <ATAPI::diskRemoved()>
c001f38f:	83 c4 24             	add    esp,0x24
c001f392:	31 c0                	xor    eax,eax
c001f394:	5b                   	pop    ebx
c001f395:	5f                   	pop    edi
c001f396:	c3                   	ret    
c001f397:	90                   	nop

c001f398 <ATAPI::diskInserted()>:
c001f398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f39c:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001f3a3:	c3                   	ret    

c001f3a4 <ATAPI::detectMedia()>:
c001f3a4:	56                   	push   esi
c001f3a5:	53                   	push   ebx
c001f3a6:	83 ec 28             	sub    esp,0x28
c001f3a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f3ad:	6a 0c                	push   0xc
c001f3af:	6a 00                	push   0x0
c001f3b1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f3b5:	56                   	push   esi
c001f3b6:	e8 35 11 fe ff       	call   c00004f0 <memset>
c001f3bb:	58                   	pop    eax
c001f3bc:	5a                   	pop    edx
c001f3bd:	6a 00                	push   0x0
c001f3bf:	6a 00                	push   0x0
c001f3c1:	6a 00                	push   0x0
c001f3c3:	6a 00                	push   0x0
c001f3c5:	56                   	push   esi
c001f3c6:	53                   	push   ebx
c001f3c7:	e8 82 fc ff ff       	call   c001f04e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f3cc:	83 c4 1c             	add    esp,0x1c
c001f3cf:	6a 0c                	push   0xc
c001f3d1:	6a 00                	push   0x0
c001f3d3:	56                   	push   esi
c001f3d4:	e8 17 11 fe ff       	call   c00004f0 <memset>
c001f3d9:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f3de:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f3e3:	59                   	pop    ecx
c001f3e4:	58                   	pop    eax
c001f3e5:	6a 01                	push   0x1
c001f3e7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f3eb:	50                   	push   eax
c001f3ec:	6a 00                	push   0x0
c001f3ee:	6a 12                	push   0x12
c001f3f0:	56                   	push   esi
c001f3f1:	53                   	push   ebx
c001f3f2:	e8 57 fc ff ff       	call   c001f04e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f3f7:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f3fb:	83 c4 20             	add    esp,0x20
c001f3fe:	83 e0 7f             	and    eax,0x7f
c001f401:	83 f8 70             	cmp    eax,0x70
c001f404:	74 15                	je     c001f41b <ATAPI::detectMedia()+0x77>
c001f406:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f40d:	75 0c                	jne    c001f41b <ATAPI::detectMedia()+0x77>
c001f40f:	83 ec 0c             	sub    esp,0xc
c001f412:	53                   	push   ebx
c001f413:	e8 80 ff ff ff       	call   c001f398 <ATAPI::diskInserted()>
c001f418:	83 c4 10             	add    esp,0x10
c001f41b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f41f:	83 e0 0f             	and    eax,0xf
c001f422:	83 f8 02             	cmp    eax,0x2
c001f425:	75 1b                	jne    c001f442 <ATAPI::detectMedia()+0x9e>
c001f427:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f42c:	75 2d                	jne    c001f45b <ATAPI::detectMedia()+0xb7>
c001f42e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f435:	74 24                	je     c001f45b <ATAPI::detectMedia()+0xb7>
c001f437:	83 ec 0c             	sub    esp,0xc
c001f43a:	53                   	push   ebx
c001f43b:	e8 d6 fe ff ff       	call   c001f316 <ATAPI::diskRemoved()>
c001f440:	eb 16                	jmp    c001f458 <ATAPI::detectMedia()+0xb4>
c001f442:	85 c0                	test   eax,eax
c001f444:	75 15                	jne    c001f45b <ATAPI::detectMedia()+0xb7>
c001f446:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f44d:	75 0c                	jne    c001f45b <ATAPI::detectMedia()+0xb7>
c001f44f:	83 ec 0c             	sub    esp,0xc
c001f452:	53                   	push   ebx
c001f453:	e8 40 ff ff ff       	call   c001f398 <ATAPI::diskInserted()>
c001f458:	83 c4 10             	add    esp,0x10
c001f45b:	83 c4 24             	add    esp,0x24
c001f45e:	5b                   	pop    ebx
c001f45f:	5e                   	pop    esi
c001f460:	c3                   	ret    
c001f461:	90                   	nop

c001f462 <ATAPI::open(int, int, void*)>:
c001f462:	56                   	push   esi
c001f463:	53                   	push   ebx
c001f464:	50                   	push   eax
c001f465:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f469:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f46d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f471:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f477:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f47d:	c1 e0 06             	shl    eax,0x6
c001f480:	01 d0                	add    eax,edx
c001f482:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f489:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f48f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f496:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f4a0:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f4a6:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f4ad:	6a 04                	push   0x4
c001f4af:	6a 0c                	push   0xc
c001f4b1:	51                   	push   ecx
c001f4b2:	52                   	push   edx
c001f4b3:	e8 0c e2 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4b8:	90                   	nop
c001f4b9:	90                   	nop
c001f4ba:	6a 00                	push   0x0
c001f4bc:	6a 0c                	push   0xc
c001f4be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4c5:	50                   	push   eax
c001f4c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4cc:	e8 f3 e1 ff ff       	call   c001d6c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4d1:	83 c4 14             	add    esp,0x14
c001f4d4:	68 78 01 00 00       	push   0x178
c001f4d9:	e8 41 00 ff ff       	call   c000f51f <malloc>
c001f4de:	83 c4 0c             	add    esp,0xc
c001f4e1:	89 c6                	mov    esi,eax
c001f4e3:	6a 00                	push   0x0
c001f4e5:	68 ff ff ff 7f       	push   0x7fffffff
c001f4ea:	6a 00                	push   0x0
c001f4ec:	6a 00                	push   0x0
c001f4ee:	53                   	push   ebx
c001f4ef:	68 23 52 02 c0       	push   0xc0025223
c001f4f4:	50                   	push   eax
c001f4f5:	e8 ce ab fe ff       	call   c000a0c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f4fa:	83 c4 14             	add    esp,0x14
c001f4fd:	56                   	push   esi
c001f4fe:	e8 85 ac fe ff       	call   c000a188 <LogicalDisk::assignDriveLetter()>
c001f503:	5a                   	pop    edx
c001f504:	0f be c0             	movsx  eax,al
c001f507:	59                   	pop    ecx
c001f508:	50                   	push   eax
c001f509:	68 68 50 02 c0       	push   0xc0025068
c001f50e:	e8 51 7a fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f513:	58                   	pop    eax
c001f514:	5a                   	pop    edx
c001f515:	56                   	push   esi
c001f516:	53                   	push   ebx
c001f517:	e8 94 9d fe ff       	call   c00092b0 <Device::addChild(Device*)>
c001f51c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001f522:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f525:	e8 d0 a1 fe ff       	call   c00096fa <PhysicalDisk::startCache()>
c001f52a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f531:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f534:	e8 6b fe ff ff       	call   c001f3a4 <ATAPI::detectMedia()>
c001f539:	83 c4 14             	add    esp,0x14
c001f53c:	31 c0                	xor    eax,eax
c001f53e:	5b                   	pop    ebx
c001f53f:	5e                   	pop    esi
c001f540:	c3                   	ret    
c001f541:	90                   	nop

c001f542 <ATAPI::read(unsigned long long, int, void*)>:
c001f542:	55                   	push   ebp
c001f543:	57                   	push   edi
c001f544:	56                   	push   esi
c001f545:	53                   	push   ebx
c001f546:	83 ec 1c             	sub    esp,0x1c
c001f549:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f54d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f551:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f555:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f55c:	74 3c                	je     c001f59a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001f55e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f562:	b9 03 00 00 00       	mov    ecx,0x3
c001f567:	fc                   	cld    
c001f568:	31 c0                	xor    eax,eax
c001f56a:	0f ce                	bswap  esi
c001f56c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f56e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f573:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001f577:	89 e8                	mov    eax,ebp
c001f579:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f57d:	50                   	push   eax
c001f57e:	50                   	push   eax
c001f57f:	55                   	push   ebp
c001f580:	c1 e5 0b             	shl    ebp,0xb
c001f583:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f587:	6a 00                	push   0x0
c001f589:	55                   	push   ebp
c001f58a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f58e:	50                   	push   eax
c001f58f:	53                   	push   ebx
c001f590:	e8 b9 fa ff ff       	call   c001f04e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f595:	83 c4 20             	add    esp,0x20
c001f598:	eb 1a                	jmp    c001f5b4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001f59a:	83 ec 0c             	sub    esp,0xc
c001f59d:	53                   	push   ebx
c001f59e:	e8 01 fe ff ff       	call   c001f3a4 <ATAPI::detectMedia()>
c001f5a3:	83 c4 10             	add    esp,0x10
c001f5a6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f5ad:	75 af                	jne    c001f55e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f5af:	b8 02 00 00 00       	mov    eax,0x2
c001f5b4:	83 c4 1c             	add    esp,0x1c
c001f5b7:	5b                   	pop    ebx
c001f5b8:	5e                   	pop    esi
c001f5b9:	5f                   	pop    edi
c001f5ba:	5d                   	pop    ebp
c001f5bb:	c3                   	ret    

c001f5bc <SATA::close(int, int, void*)>:
c001f5bc:	83 ec 0c             	sub    esp,0xc
c001f5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f5c9:	85 c0                	test   eax,eax
c001f5cb:	74 0c                	je     c001f5d9 <SATA::close(int, int, void*)+0x1d>
c001f5cd:	83 ec 0c             	sub    esp,0xc
c001f5d0:	8b 10                	mov    edx,DWORD PTR [eax]
c001f5d2:	50                   	push   eax
c001f5d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f5d6:	83 c4 10             	add    esp,0x10
c001f5d9:	31 c0                	xor    eax,eax
c001f5db:	83 c4 0c             	add    esp,0xc
c001f5de:	c3                   	ret    
c001f5df:	90                   	nop

c001f5e0 <SATA::powerSaving(PowerSavingLevel)>:
c001f5e0:	c3                   	ret    
c001f5e1:	90                   	nop

c001f5e2 <SATA::open(int, int, void*)>:
c001f5e2:	56                   	push   esi
c001f5e3:	53                   	push   ebx
c001f5e4:	83 ec 10             	sub    esp,0x10
c001f5e7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f5eb:	68 b0 50 02 c0       	push   0xc00250b0
c001f5f0:	e8 6f 79 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f5f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f5f9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f603:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f609:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f613:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f617:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f621:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f627:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f62e:	e8 27 04 ff ff       	call   c000fa5a <Phys::allocatePage()>
c001f633:	89 c6                	mov    esi,eax
c001f635:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f63b:	81 c6 00 10 00 00    	add    esi,0x1000
c001f641:	e8 14 04 ff ff       	call   c000fa5a <Phys::allocatePage()>
c001f646:	83 c4 10             	add    esp,0x10
c001f649:	39 c6                	cmp    esi,eax
c001f64b:	74 10                	je     c001f65d <SATA::open(int, int, void*)+0x7b>
c001f64d:	83 ec 0c             	sub    esp,0xc
c001f650:	68 bc 50 02 c0       	push   0xc00250bc
c001f655:	e8 0c 02 ff ff       	call   c000f866 <KePanic(char const*)>
c001f65a:	83 c4 10             	add    esp,0x10
c001f65d:	83 ec 0c             	sub    esp,0xc
c001f660:	6a 02                	push   0x2
c001f662:	e8 f2 35 ff ff       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c001f667:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f66d:	6a 03                	push   0x3
c001f66f:	50                   	push   eax
c001f670:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f676:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c001f67c:	e8 bb 3c ff ff       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c001f681:	83 c4 14             	add    esp,0x14
c001f684:	53                   	push   ebx
c001f685:	e8 70 a0 fe ff       	call   c00096fa <PhysicalDisk::startCache()>
c001f68a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f68d:	e8 08 af fe ff       	call   c000a59a <createPartitionsForDisk(PhysicalDisk*)>
c001f692:	83 c4 14             	add    esp,0x14
c001f695:	31 c0                	xor    eax,eax
c001f697:	5b                   	pop    ebx
c001f698:	5e                   	pop    esi
c001f699:	c3                   	ret    

c001f69a <SATA::SATA()>:
c001f69a:	83 ec 0c             	sub    esp,0xc
c001f69d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a1:	83 ec 04             	sub    esp,0x4
c001f6a4:	68 00 02 00 00       	push   0x200
c001f6a9:	68 d0 50 02 c0       	push   0xc00250d0
c001f6ae:	50                   	push   eax
c001f6af:	e8 de 9f fe ff       	call   c0009692 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f6b4:	83 c4 10             	add    esp,0x10
c001f6b7:	ba 40 51 02 c0       	mov    edx,0xc0025140
c001f6bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c0:	89 10                	mov    DWORD PTR [eax],edx
c001f6c2:	90                   	nop
c001f6c3:	83 c4 0c             	add    esp,0xc
c001f6c6:	c3                   	ret    
c001f6c7:	90                   	nop

c001f6c8 <SATA::access(unsigned long long, int, void*, bool)>:
c001f6c8:	55                   	push   ebp
c001f6c9:	57                   	push   edi
c001f6ca:	56                   	push   esi
c001f6cb:	53                   	push   ebx
c001f6cc:	83 ec 2c             	sub    esp,0x2c
c001f6cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f6d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f6d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f6db:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f6df:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f6e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6e7:	fa                   	cli    
c001f6e8:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c001f6ee:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f6f3:	7e 10                	jle    c001f705 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c001f6f5:	83 ec 0c             	sub    esp,0xc
c001f6f8:	68 e0 50 02 c0       	push   0xc00250e0
c001f6fd:	e8 64 01 ff ff       	call   c000f866 <KePanic(char const*)>
c001f702:	83 c4 10             	add    esp,0x10
c001f705:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f70b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f711:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f717:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f71b:	89 d0                	mov    eax,edx
c001f71d:	c1 e0 07             	shl    eax,0x7
c001f720:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f724:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f72e:	51                   	push   ecx
c001f72f:	8d 42 02             	lea    eax,[edx+0x2]
c001f732:	51                   	push   ecx
c001f733:	c1 e0 07             	shl    eax,0x7
c001f736:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f73a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f73e:	50                   	push   eax
c001f73f:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f745:	e8 fe ed ff ff       	call   c001e548 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f74a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f74e:	83 c4 10             	add    esp,0x10
c001f751:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f756:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f75a:	0f 84 a4 01 00 00    	je     c001f904 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c001f760:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f764:	c1 e0 09             	shl    eax,0x9
c001f767:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f76c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f770:	74 0e                	je     c001f780 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c001f772:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f778:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f77c:	89 c1                	mov    ecx,eax
c001f77e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f780:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f786:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f78a:	8d 42 02             	lea    eax,[edx+0x2]
c001f78d:	c1 e0 07             	shl    eax,0x7
c001f790:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f794:	8b 00                	mov    eax,DWORD PTR [eax]
c001f796:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f79c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f7a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f7a6:	c1 e1 05             	shl    ecx,0x5
c001f7a9:	01 c8                	add    eax,ecx
c001f7ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7af:	83 e1 01             	and    ecx,0x1
c001f7b2:	89 ce                	mov    esi,ecx
c001f7b4:	8a 08                	mov    cl,BYTE PTR [eax]
c001f7b6:	c1 e6 06             	shl    esi,0x6
c001f7b9:	83 e1 bf             	and    ecx,0xffffffbf
c001f7bc:	09 f1                	or     ecx,esi
c001f7be:	88 08                	mov    BYTE PTR [eax],cl
c001f7c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f7c2:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f7c8:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f7ce:	89 08                	mov    DWORD PTR [eax],ecx
c001f7d0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f7d6:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f7dc:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f7e2:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f7e5:	50                   	push   eax
c001f7e6:	68 90 00 00 00       	push   0x90
c001f7eb:	6a 00                	push   0x0
c001f7ed:	56                   	push   esi
c001f7ee:	e8 fd 0c fe ff       	call   c00004f0 <memset>
c001f7f3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f7f9:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f7ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f803:	83 c4 10             	add    esp,0x10
c001f806:	48                   	dec    eax
c001f807:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f80c:	89 c1                	mov    ecx,eax
c001f80e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f814:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f819:	09 c8                	or     eax,ecx
c001f81b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f821:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001f827:	83 c8 80             	or     eax,0xffffff80
c001f82a:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001f830:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f833:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f837:	25 00 7f 00 00       	and    eax,0x7f00
c001f83c:	0d 27 80 ff ff       	or     eax,0xffff8027
c001f841:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f846:	66 89 06             	mov    WORD PTR [esi],ax
c001f849:	b0 35                	mov    al,0x35
c001f84b:	75 02                	jne    c001f84f <SATA::access(unsigned long long, int, void*, bool)+0x187>
c001f84d:	b0 25                	mov    al,0x25
c001f84f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f852:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f856:	89 e8                	mov    eax,ebp
c001f858:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f85c:	c1 e8 10             	shr    eax,0x10
c001f85f:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f862:	89 e8                	mov    eax,ebp
c001f864:	c1 e8 18             	shr    eax,0x18
c001f867:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f86a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f86e:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f875:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f878:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f87c:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f880:	89 d6                	mov    esi,edx
c001f882:	31 c0                	xor    eax,eax
c001f884:	c1 e6 07             	shl    esi,0x7
c001f887:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f88b:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f891:	80 e1 88             	and    cl,0x88
c001f894:	74 0a                	je     c001f8a0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001f896:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f89b:	74 0a                	je     c001f8a7 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f89d:	40                   	inc    eax
c001f89e:	eb eb                	jmp    c001f88b <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001f8a0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f8a5:	75 0a                	jne    c001f8b1 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001f8a7:	83 ec 0c             	sub    esp,0xc
c001f8aa:	68 19 51 02 c0       	push   0xc0025119
c001f8af:	eb 36                	jmp    c001f8e7 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001f8b1:	b8 01 00 00 00       	mov    eax,0x1
c001f8b6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f8ba:	c1 e2 07             	shl    edx,0x7
c001f8bd:	d3 e0                	shl    eax,cl
c001f8bf:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f8c3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f8c9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f8cf:	85 c8                	test   eax,ecx
c001f8d1:	74 25                	je     c001f8f8 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c001f8d3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f8d9:	0f ba e1 1e          	bt     ecx,0x1e
c001f8dd:	73 ea                	jae    c001f8c9 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c001f8df:	83 ec 0c             	sub    esp,0xc
c001f8e2:	68 27 51 02 c0       	push   0xc0025127
c001f8e7:	e8 78 76 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f8ec:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001f8f3:	83 c4 10             	add    esp,0x10
c001f8f6:	eb 13                	jmp    c001f90b <SATA::access(unsigned long long, int, void*, bool)+0x243>
c001f8f8:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f8fe:	0f ba e0 1e          	bt     eax,0x1e
c001f902:	73 18                	jae    c001f91c <SATA::access(unsigned long long, int, void*, bool)+0x254>
c001f904:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001f90b:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c001f912:	75 01                	jne    c001f915 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c001f914:	fb                   	sti    
c001f915:	b8 01 00 00 00       	mov    eax,0x1
c001f91a:	eb 2c                	jmp    c001f948 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001f91c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f921:	75 10                	jne    c001f933 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c001f923:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f929:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f92d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f931:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f933:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c001f93a:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001f93f:	85 c0                	test   eax,eax
c001f941:	75 03                	jne    c001f946 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001f943:	fb                   	sti    
c001f944:	eb 02                	jmp    c001f948 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001f946:	31 c0                	xor    eax,eax
c001f948:	83 c4 2c             	add    esp,0x2c
c001f94b:	5b                   	pop    ebx
c001f94c:	5e                   	pop    esi
c001f94d:	5f                   	pop    edi
c001f94e:	5d                   	pop    ebp
c001f94f:	c3                   	ret    

c001f950 <SATA::read(unsigned long long, int, void*)>:
c001f950:	57                   	push   edi
c001f951:	b8 04 00 00 00       	mov    eax,0x4
c001f956:	56                   	push   esi
c001f957:	53                   	push   ebx
c001f958:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f95c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f960:	8d 7a ff             	lea    edi,[edx-0x1]
c001f963:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f967:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f96b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f971:	77 25                	ja     c001f998 <SATA::read(unsigned long long, int, void*)+0x48>
c001f973:	b8 06 00 00 00       	mov    eax,0x6
c001f978:	85 f6                	test   esi,esi
c001f97a:	74 1c                	je     c001f998 <SATA::read(unsigned long long, int, void*)+0x48>
c001f97c:	50                   	push   eax
c001f97d:	50                   	push   eax
c001f97e:	6a 00                	push   0x0
c001f980:	56                   	push   esi
c001f981:	52                   	push   edx
c001f982:	53                   	push   ebx
c001f983:	51                   	push   ecx
c001f984:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f988:	e8 3b fd ff ff       	call   c001f6c8 <SATA::access(unsigned long long, int, void*, bool)>
c001f98d:	83 c4 20             	add    esp,0x20
c001f990:	85 c0                	test   eax,eax
c001f992:	0f 95 c0             	setne  al
c001f995:	0f b6 c0             	movzx  eax,al
c001f998:	5b                   	pop    ebx
c001f999:	5e                   	pop    esi
c001f99a:	5f                   	pop    edi
c001f99b:	c3                   	ret    

c001f99c <SATA::write(unsigned long long, int, void*)>:
c001f99c:	55                   	push   ebp
c001f99d:	b8 04 00 00 00       	mov    eax,0x4
c001f9a2:	57                   	push   edi
c001f9a3:	56                   	push   esi
c001f9a4:	53                   	push   ebx
c001f9a5:	83 ec 0c             	sub    esp,0xc
c001f9a8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f9ac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f9b0:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f9b3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f9b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f9bb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f9c1:	77 3d                	ja     c001fa00 <SATA::write(unsigned long long, int, void*)+0x64>
c001f9c3:	b8 06 00 00 00       	mov    eax,0x6
c001f9c8:	85 ed                	test   ebp,ebp
c001f9ca:	74 34                	je     c001fa00 <SATA::write(unsigned long long, int, void*)+0x64>
c001f9cc:	c1 e3 09             	shl    ebx,0x9
c001f9cf:	01 eb                	add    ebx,ebp
c001f9d1:	89 d6                	mov    esi,edx
c001f9d3:	89 cf                	mov    edi,ecx
c001f9d5:	83 c6 01             	add    esi,0x1
c001f9d8:	83 d7 00             	adc    edi,0x0
c001f9db:	50                   	push   eax
c001f9dc:	50                   	push   eax
c001f9dd:	6a 01                	push   0x1
c001f9df:	55                   	push   ebp
c001f9e0:	81 c5 00 02 00 00    	add    ebp,0x200
c001f9e6:	6a 01                	push   0x1
c001f9e8:	51                   	push   ecx
c001f9e9:	52                   	push   edx
c001f9ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f9ee:	e8 d5 fc ff ff       	call   c001f6c8 <SATA::access(unsigned long long, int, void*, bool)>
c001f9f3:	83 c4 20             	add    esp,0x20
c001f9f6:	89 f2                	mov    edx,esi
c001f9f8:	89 f9                	mov    ecx,edi
c001f9fa:	39 dd                	cmp    ebp,ebx
c001f9fc:	75 d3                	jne    c001f9d1 <SATA::write(unsigned long long, int, void*)+0x35>
c001f9fe:	31 c0                	xor    eax,eax
c001fa00:	83 c4 0c             	add    esp,0xc
c001fa03:	5b                   	pop    ebx
c001fa04:	5e                   	pop    esi
c001fa05:	5f                   	pop    edi
c001fa06:	5d                   	pop    ebp
c001fa07:	c3                   	ret    

c001fa08 <SATAPI::write(unsigned long long, int, void*)>:
c001fa08:	b8 03 00 00 00       	mov    eax,0x3
c001fa0d:	c3                   	ret    

c001fa0e <SATAPI::close(int, int, void*)>:
c001fa0e:	83 ec 0c             	sub    esp,0xc
c001fa11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa15:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fa1b:	85 c0                	test   eax,eax
c001fa1d:	74 0c                	je     c001fa2b <SATAPI::close(int, int, void*)+0x1d>
c001fa1f:	83 ec 0c             	sub    esp,0xc
c001fa22:	8b 10                	mov    edx,DWORD PTR [eax]
c001fa24:	50                   	push   eax
c001fa25:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fa28:	83 c4 10             	add    esp,0x10
c001fa2b:	31 c0                	xor    eax,eax
c001fa2d:	83 c4 0c             	add    esp,0xc
c001fa30:	c3                   	ret    
c001fa31:	90                   	nop

c001fa32 <SATAPI::SATAPI()>:
c001fa32:	83 ec 0c             	sub    esp,0xc
c001fa35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa39:	83 ec 04             	sub    esp,0x4
c001fa3c:	68 00 08 00 00       	push   0x800
c001fa41:	68 70 51 02 c0       	push   0xc0025170
c001fa46:	50                   	push   eax
c001fa47:	e8 46 9c fe ff       	call   c0009692 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fa4c:	83 c4 10             	add    esp,0x10
c001fa4f:	ba 64 52 02 c0       	mov    edx,0xc0025264
c001fa54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa58:	89 10                	mov    DWORD PTR [eax],edx
c001fa5a:	90                   	nop
c001fa5b:	83 c4 0c             	add    esp,0xc
c001fa5e:	c3                   	ret    
c001fa5f:	90                   	nop

c001fa60 <SATAPI::diskRemoved()>:
c001fa60:	c3                   	ret    
c001fa61:	90                   	nop

c001fa62 <SATAPI::diskInserted()>:
c001fa62:	83 ec 18             	sub    esp,0x18
c001fa65:	68 7c 51 02 c0       	push   0xc002517c
c001fa6a:	e8 f5 74 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fa6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa73:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001fa7a:	83 c4 1c             	add    esp,0x1c
c001fa7d:	c3                   	ret    

c001fa7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001fa7e:	55                   	push   ebp
c001fa7f:	57                   	push   edi
c001fa80:	56                   	push   esi
c001fa81:	53                   	push   ebx
c001fa82:	83 ec 34             	sub    esp,0x34
c001fa85:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001fa89:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fa8d:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001fa91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fa95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001fa99:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001fa9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001faa5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001faa9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001faaf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fab3:	83 c0 02             	add    eax,0x2
c001fab6:	c1 e0 07             	shl    eax,0x7
c001fab9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fabd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fac1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fac5:	c1 e0 07             	shl    eax,0x7
c001fac8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001facc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fad0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001fada:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001fade:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001fae4:	e8 5f ea ff ff       	call   c001e548 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001fae9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001faed:	83 c4 10             	add    esp,0x10
c001faf0:	b8 01 00 00 00       	mov    eax,0x1
c001faf5:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001fafa:	0f 84 53 02 00 00    	je     c001fd53 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001fb00:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001fb06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb0a:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb0c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001fb12:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001fb18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fb1c:	c1 e1 05             	shl    ecx,0x5
c001fb1f:	01 c8                	add    eax,ecx
c001fb21:	8b 08                	mov    ecx,DWORD PTR [eax]
c001fb23:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001fb29:	81 c9 25 00 01 00    	or     ecx,0x10025
c001fb2f:	89 08                	mov    DWORD PTR [eax],ecx
c001fb31:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001fb37:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001fb3d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001fb43:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001fb46:	8d 7b 40             	lea    edi,[ebx+0x40]
c001fb49:	50                   	push   eax
c001fb4a:	68 90 00 00 00       	push   0x90
c001fb4f:	6a 00                	push   0x0
c001fb51:	53                   	push   ebx
c001fb52:	e8 99 09 fe ff       	call   c00004f0 <memset>
c001fb57:	b9 0c 00 00 00       	mov    ecx,0xc
c001fb5c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001fb60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fb62:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001fb68:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001fb6c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001fb72:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001fb76:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fb7a:	48                   	dec    eax
c001fb7b:	25 ff ff 3f 00       	and    eax,0x3fffff
c001fb80:	89 c1                	mov    ecx,eax
c001fb82:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001fb88:	25 00 00 c0 ff       	and    eax,0xffc00000
c001fb8d:	09 c8                	or     eax,ecx
c001fb8f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001fb95:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001fb9b:	83 c8 80             	or     eax,0xffffff80
c001fb9e:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001fba4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001fba7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fbab:	25 00 7f 00 00       	and    eax,0x7f00
c001fbb0:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001fbb4:	0d 27 80 ff ff       	or     eax,0xffff8027
c001fbb9:	66 89 03             	mov    WORD PTR [ebx],ax
c001fbbc:	89 d0                	mov    eax,edx
c001fbbe:	c1 ea 18             	shr    edx,0x18
c001fbc1:	c1 e8 10             	shr    eax,0x10
c001fbc4:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001fbc7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001fbca:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001fbce:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001fbd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fbd5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001fbd8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fbdc:	83 c4 10             	add    esp,0x10
c001fbdf:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001fbe3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbe7:	31 c0                	xor    eax,eax
c001fbe9:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001fbef:	80 e1 88             	and    cl,0x88
c001fbf2:	74 0a                	je     c001fbfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001fbf4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001fbf9:	74 0a                	je     c001fc05 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001fbfb:	40                   	inc    eax
c001fbfc:	eb eb                	jmp    c001fbe9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001fbfe:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001fc03:	75 43                	jne    c001fc48 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001fc05:	83 ec 0c             	sub    esp,0xc
c001fc08:	68 94 51 02 c0       	push   0xc0025194
c001fc0d:	e8 52 73 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fc12:	58                   	pop    eax
c001fc13:	5a                   	pop    edx
c001fc14:	68 a9 51 02 c0       	push   0xc00251a9
c001fc19:	ff 35 b4 d1 02 c0    	push   DWORD PTR ds:0xc002d1b4
c001fc1f:	e8 fc 23 ff ff       	call   c0012020 <VgaText::puts(char const*)>
c001fc24:	59                   	pop    ecx
c001fc25:	5b                   	pop    ebx
c001fc26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001fc2a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001fc30:	e8 ad e9 ff ff       	call   c001e5e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fc35:	5e                   	pop    esi
c001fc36:	5f                   	pop    edi
c001fc37:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001fc3b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001fc41:	e8 7c e9 ff ff       	call   c001e5c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001fc46:	eb 48                	jmp    c001fc90 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001fc48:	be 01 00 00 00       	mov    esi,0x1
c001fc4d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001fc51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fc55:	d3 e6                	shl    esi,cl
c001fc57:	c1 e7 07             	shl    edi,0x7
c001fc5a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001fc60:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001fc65:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001fc69:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001fc6f:	85 c6                	test   esi,eax
c001fc71:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001fc77:	0f 84 a3 00 00 00    	je     c001fd20 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001fc7d:	0f ba e0 1e          	bt     eax,0x1e
c001fc81:	73 1a                	jae    c001fc9d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001fc83:	83 ec 0c             	sub    esp,0xc
c001fc86:	68 bb 51 02 c0       	push   0xc00251bb
c001fc8b:	e8 d4 72 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fc90:	83 c4 10             	add    esp,0x10
c001fc93:	b8 01 00 00 00       	mov    eax,0x1
c001fc98:	e9 b6 00 00 00       	jmp    c001fd53 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001fc9d:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001fca3:	83 f8 0d             	cmp    eax,0xd
c001fca6:	77 0a                	ja     c001fcb2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001fca8:	83 ec 0c             	sub    esp,0xc
c001fcab:	68 c8 00 00 00       	push   0xc8
c001fcb0:	eb 28                	jmp    c001fcda <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001fcb2:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001fcb8:	83 f8 0d             	cmp    eax,0xd
c001fcbb:	77 0a                	ja     c001fcc7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001fcbd:	83 ec 0c             	sub    esp,0xc
c001fcc0:	68 58 02 00 00       	push   0x258
c001fcc5:	eb 13                	jmp    c001fcda <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001fcc7:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001fccd:	83 f8 06             	cmp    eax,0x6
c001fcd0:	77 10                	ja     c001fce2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001fcd2:	83 ec 0c             	sub    esp,0xc
c001fcd5:	68 dc 05 00 00       	push   0x5dc
c001fcda:	e8 8d 69 ff ff       	call   c001666c <milliTenthSleep(unsigned int)>
c001fcdf:	83 c4 10             	add    esp,0x10
c001fce2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001fce6:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001fce9:	75 06                	jne    c001fcf1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001fceb:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001fcef:	74 15                	je     c001fd06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001fcf1:	83 fb 06             	cmp    ebx,0x6
c001fcf4:	77 10                	ja     c001fd06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001fcf6:	83 ec 0c             	sub    esp,0xc
c001fcf9:	68 c4 09 00 00       	push   0x9c4
c001fcfe:	e8 69 69 ff ff       	call   c001666c <milliTenthSleep(unsigned int)>
c001fd03:	83 c4 10             	add    esp,0x10
c001fd06:	43                   	inc    ebx
c001fd07:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001fd0d:	0f 85 56 ff ff ff    	jne    c001fc69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001fd13:	83 ec 0c             	sub    esp,0xc
c001fd16:	68 ce 51 02 c0       	push   0xc00251ce
c001fd1b:	e9 6b ff ff ff       	jmp    c001fc8b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001fd20:	0f ba e0 1e          	bt     eax,0x1e
c001fd24:	73 0d                	jae    c001fd33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001fd26:	83 ec 0c             	sub    esp,0xc
c001fd29:	68 e2 51 02 c0       	push   0xc00251e2
c001fd2e:	e9 58 ff ff ff       	jmp    c001fc8b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001fd33:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001fd38:	74 17                	je     c001fd51 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001fd3a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001fd3f:	74 10                	je     c001fd51 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001fd41:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001fd47:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fd4b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001fd4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fd51:	31 c0                	xor    eax,eax
c001fd53:	83 c4 2c             	add    esp,0x2c
c001fd56:	5b                   	pop    ebx
c001fd57:	5e                   	pop    esi
c001fd58:	5f                   	pop    edi
c001fd59:	5d                   	pop    ebp
c001fd5a:	c3                   	ret    
c001fd5b:	90                   	nop

c001fd5c <SATAPI::eject()>:
c001fd5c:	57                   	push   edi
c001fd5d:	b9 03 00 00 00       	mov    ecx,0x3
c001fd62:	83 ec 18             	sub    esp,0x18
c001fd65:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fd69:	fc                   	cld    
c001fd6a:	31 c0                	xor    eax,eax
c001fd6c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fd6e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fd73:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fd78:	50                   	push   eax
c001fd79:	6a 00                	push   0x0
c001fd7b:	6a 00                	push   0x0
c001fd7d:	6a 00                	push   0x0
c001fd7f:	6a 00                	push   0x0
c001fd81:	6a 02                	push   0x2
c001fd83:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fd87:	50                   	push   eax
c001fd88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fd8c:	e8 ed fc ff ff       	call   c001fa7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fd91:	31 c0                	xor    eax,eax
c001fd93:	83 c4 38             	add    esp,0x38
c001fd96:	5f                   	pop    edi
c001fd97:	c3                   	ret    

c001fd98 <SATAPI::detectMedia()>:
c001fd98:	53                   	push   ebx
c001fd99:	83 ec 14             	sub    esp,0x14
c001fd9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fda0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fda6:	e8 91 ae fe ff       	call   c000ac3c <VCache::writeWriteBuffer()>
c001fdab:	59                   	pop    ecx
c001fdac:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fdb2:	e8 75 ae fe ff       	call   c000ac2c <VCache::invalidateReadBuffer()>
c001fdb7:	c7 04 24 f7 51 02 c0 	mov    DWORD PTR [esp],0xc00251f7
c001fdbe:	e8 a1 71 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fdc3:	83 c4 10             	add    esp,0x10
c001fdc6:	31 c0                	xor    eax,eax
c001fdc8:	8b 14 85 e0 aa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5520]
c001fdcf:	85 d2                	test   edx,edx
c001fdd1:	74 0f                	je     c001fde2 <SATAPI::detectMedia()+0x4a>
c001fdd3:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001fdd9:	75 07                	jne    c001fde2 <SATAPI::detectMedia()+0x4a>
c001fddb:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001fde2:	40                   	inc    eax
c001fde3:	83 f8 1a             	cmp    eax,0x1a
c001fde6:	75 e0                	jne    c001fdc8 <SATAPI::detectMedia()+0x30>
c001fde8:	83 c4 08             	add    esp,0x8
c001fdeb:	5b                   	pop    ebx
c001fdec:	c3                   	ret    
c001fded:	90                   	nop

c001fdee <SATAPI::open(int, int, void*)>:
c001fdee:	56                   	push   esi
c001fdef:	53                   	push   ebx
c001fdf0:	51                   	push   ecx
c001fdf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fdf5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fdf9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001fe03:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001fe09:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fe13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fe17:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fe21:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fe27:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001fe2e:	e8 27 fc fe ff       	call   c000fa5a <Phys::allocatePage()>
c001fe33:	89 c6                	mov    esi,eax
c001fe35:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001fe3b:	81 c6 00 10 00 00    	add    esi,0x1000
c001fe41:	e8 14 fc fe ff       	call   c000fa5a <Phys::allocatePage()>
c001fe46:	39 c6                	cmp    esi,eax
c001fe48:	74 10                	je     c001fe5a <SATAPI::open(int, int, void*)+0x6c>
c001fe4a:	83 ec 0c             	sub    esp,0xc
c001fe4d:	68 0c 52 02 c0       	push   0xc002520c
c001fe52:	e8 0f fa fe ff       	call   c000f866 <KePanic(char const*)>
c001fe57:	83 c4 10             	add    esp,0x10
c001fe5a:	83 ec 0c             	sub    esp,0xc
c001fe5d:	6a 02                	push   0x2
c001fe5f:	e8 f5 2d ff ff       	call   c0012c59 <Virt::allocateKernelVirtualPages(int)>
c001fe64:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001fe6a:	6a 03                	push   0x3
c001fe6c:	50                   	push   eax
c001fe6d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001fe73:	ff 35 50 d2 02 c0    	push   DWORD PTR ds:0xc002d250
c001fe79:	e8 be 34 ff ff       	call   c001333c <VAS::mapPage(unsigned long, unsigned long, int)>
c001fe7e:	83 c4 14             	add    esp,0x14
c001fe81:	68 78 01 00 00       	push   0x178
c001fe86:	e8 94 f6 fe ff       	call   c000f51f <malloc>
c001fe8b:	83 c4 0c             	add    esp,0xc
c001fe8e:	89 c6                	mov    esi,eax
c001fe90:	6a 00                	push   0x0
c001fe92:	68 ff ff ff 7f       	push   0x7fffffff
c001fe97:	6a 00                	push   0x0
c001fe99:	6a 00                	push   0x0
c001fe9b:	53                   	push   ebx
c001fe9c:	68 22 52 02 c0       	push   0xc0025222
c001fea1:	50                   	push   eax
c001fea2:	e8 21 a2 fe ff       	call   c000a0c8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001fea7:	83 c4 14             	add    esp,0x14
c001feaa:	56                   	push   esi
c001feab:	e8 d8 a2 fe ff       	call   c000a188 <LogicalDisk::assignDriveLetter()>
c001feb0:	5a                   	pop    edx
c001feb1:	0f be c0             	movsx  eax,al
c001feb4:	59                   	pop    ecx
c001feb5:	50                   	push   eax
c001feb6:	68 68 50 02 c0       	push   0xc0025068
c001febb:	e8 a4 70 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fec0:	58                   	pop    eax
c001fec1:	5a                   	pop    edx
c001fec2:	56                   	push   esi
c001fec3:	53                   	push   ebx
c001fec4:	e8 e7 93 fe ff       	call   c00092b0 <Device::addChild(Device*)>
c001fec9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001fecf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fed2:	e8 23 98 fe ff       	call   c00096fa <PhysicalDisk::startCache()>
c001fed7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001fede:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fee1:	e8 b2 fe ff ff       	call   c001fd98 <SATAPI::detectMedia()>
c001fee6:	83 c4 14             	add    esp,0x14
c001fee9:	31 c0                	xor    eax,eax
c001feeb:	5b                   	pop    ebx
c001feec:	5e                   	pop    esi
c001feed:	c3                   	ret    

c001feee <SATAPI::read(unsigned long long, int, void*)>:
c001feee:	57                   	push   edi
c001feef:	56                   	push   esi
c001fef0:	53                   	push   ebx
c001fef1:	83 ec 30             	sub    esp,0x30
c001fef4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001fef8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001fefc:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ff00:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ff04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ff08:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ff0c:	83 fe 04             	cmp    esi,0x4
c001ff0f:	7e 10                	jle    c001ff21 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001ff11:	83 ec 0c             	sub    esp,0xc
c001ff14:	68 30 52 02 c0       	push   0xc0025230
c001ff19:	e8 48 f9 fe ff       	call   c000f866 <KePanic(char const*)>
c001ff1e:	83 c4 10             	add    esp,0x10
c001ff21:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ff27:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ff2d:	51                   	push   ecx
c001ff2e:	50                   	push   eax
c001ff2f:	83 c0 02             	add    eax,0x2
c001ff32:	c1 e0 07             	shl    eax,0x7
c001ff35:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ff3b:	50                   	push   eax
c001ff3c:	52                   	push   edx
c001ff3d:	e8 ca e6 ff ff       	call   c001e60c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ff42:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ff46:	b9 03 00 00 00       	mov    ecx,0x3
c001ff4b:	fc                   	cld    
c001ff4c:	31 c0                	xor    eax,eax
c001ff4e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff50:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ff55:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ff5a:	83 c4 0c             	add    esp,0xc
c001ff5d:	6a 00                	push   0x0
c001ff5f:	6a 00                	push   0x0
c001ff61:	6a 00                	push   0x0
c001ff63:	6a 00                	push   0x0
c001ff65:	6a 02                	push   0x2
c001ff67:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ff6b:	50                   	push   eax
c001ff6c:	53                   	push   ebx
c001ff6d:	e8 0c fb ff ff       	call   c001fa7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ff72:	83 c4 20             	add    esp,0x20
c001ff75:	85 c0                	test   eax,eax
c001ff77:	75 44                	jne    c001ffbd <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001ff79:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ff7d:	b9 03 00 00 00       	mov    ecx,0x3
c001ff82:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff88:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ff8d:	0f c8                	bswap  eax
c001ff8f:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ff93:	89 f0                	mov    eax,esi
c001ff95:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ff99:	50                   	push   eax
c001ff9a:	56                   	push   esi
c001ff9b:	c1 e6 0b             	shl    esi,0xb
c001ff9e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ffa2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ffa6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ffaa:	56                   	push   esi
c001ffab:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ffaf:	50                   	push   eax
c001ffb0:	53                   	push   ebx
c001ffb1:	e8 c8 fa ff ff       	call   c001fa7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ffb6:	83 c4 20             	add    esp,0x20
c001ffb9:	85 c0                	test   eax,eax
c001ffbb:	74 14                	je     c001ffd1 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001ffbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ffc1:	83 ec 0c             	sub    esp,0xc
c001ffc4:	53                   	push   ebx
c001ffc5:	e8 ce fd ff ff       	call   c001fd98 <SATAPI::detectMedia()>
c001ffca:	83 c4 10             	add    esp,0x10
c001ffcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffd1:	83 c4 30             	add    esp,0x30
c001ffd4:	5b                   	pop    ebx
c001ffd5:	5e                   	pop    esi
c001ffd6:	5f                   	pop    edi
c001ffd7:	c3                   	ret    

c001ffd8 <IOAPIC::close(int, int, void*)>:
c001ffd8:	b8 00 00 00 00       	mov    eax,0x0
c001ffdd:	c3                   	ret    

c001ffde <apicGetBase()>:
c001ffde:	55                   	push   ebp
c001ffdf:	89 e5                	mov    ebp,esp
c001ffe1:	83 ec 08             	sub    esp,0x8
c001ffe4:	83 ec 0c             	sub    esp,0xc
c001ffe7:	68 94 52 02 c0       	push   0xc0025294
c001ffec:	e8 75 f8 fe ff       	call   c000f866 <KePanic(char const*)>
c001fff1:	83 c4 10             	add    esp,0x10
c001fff4:	b8 00 00 00 00       	mov    eax,0x0
c001fff9:	c9                   	leave  
c001fffa:	c3                   	ret    
c001fffb:	90                   	nop

c001fffc <IOAPIC::IOAPIC()>:
c001fffc:	83 ec 0c             	sub    esp,0xc
c001ffff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020003:	83 ec 08             	sub    esp,0x8
c0020006:	68 a3 52 02 c0       	push   0xc00252a3
c002000b:	50                   	push   eax
c002000c:	e8 01 94 fe ff       	call   c0009412 <Device::Device(char const*)>
c0020011:	83 c4 10             	add    esp,0x10
c0020014:	ba c4 52 02 c0       	mov    edx,0xc00252c4
c0020019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002001d:	89 10                	mov    DWORD PTR [eax],edx
c002001f:	90                   	nop
c0020020:	83 c4 0c             	add    esp,0xc
c0020023:	c3                   	ret    

c0020024 <apicOpen()>:
c0020024:	55                   	push   ebp
c0020025:	89 e5                	mov    ebp,esp
c0020027:	53                   	push   ebx
c0020028:	83 ec 34             	sub    esp,0x34
c002002b:	83 ec 0c             	sub    esp,0xc
c002002e:	68 ab 52 02 c0       	push   0xc00252ab
c0020033:	e8 2c 6f fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020038:	83 c4 10             	add    esp,0x10
c002003b:	a0 a0 e4 02 c0       	mov    al,ds:0xc002e4a0
c0020040:	83 f0 01             	xor    eax,0x1
c0020043:	0f b6 c0             	movzx  eax,al
c0020046:	85 c0                	test   eax,eax
c0020048:	0f 84 a3 00 00 00    	je     c00200f1 <apicOpen()+0xcd>
c002004e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0020052:	a0 40 ae 02 c0       	mov    al,ds:0xc002ae40
c0020057:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002005b:	0f b6 c0             	movzx  eax,al
c002005e:	39 c2                	cmp    edx,eax
c0020060:	0f 83 84 00 00 00    	jae    c00200ea <apicOpen()+0xc6>
c0020066:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002006d:	83 ec 0c             	sub    esp,0xc
c0020070:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020073:	e8 a7 f4 fe ff       	call   c000f51f <malloc>
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	89 c3                	mov    ebx,eax
c002007d:	83 ec 0c             	sub    esp,0xc
c0020080:	53                   	push   ebx
c0020081:	e8 76 ff ff ff       	call   c001fffc <IOAPIC::IOAPIC()>
c0020086:	83 c4 10             	add    esp,0x10
c0020089:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002008c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0020090:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020093:	89 14 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],edx
c002009a:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c002009f:	83 c0 01             	add    eax,0x1
c00200a2:	a3 60 e4 02 c0       	mov    ds:0xc002e460,eax
c00200a7:	a1 d0 b0 02 c0       	mov    eax,ds:0xc002b0d0
c00200ac:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00200b2:	83 ec 08             	sub    esp,0x8
c00200b5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00200b8:	50                   	push   eax
c00200b9:	e8 f2 91 fe ff       	call   c00092b0 <Device::addChild(Device*)>
c00200be:	83 c4 10             	add    esp,0x10
c00200c1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00200c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00200c6:	83 c0 08             	add    eax,0x8
c00200c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00200cb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00200cf:	6a 00                	push   0x0
c00200d1:	6a 00                	push   0x0
c00200d3:	52                   	push   edx
c00200d4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00200d7:	ff d0                	call   eax
c00200d9:	83 c4 10             	add    esp,0x10
c00200dc:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c00200df:	83 c0 01             	add    eax,0x1
c00200e2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c00200e5:	e9 68 ff ff ff       	jmp    c0020052 <apicOpen()+0x2e>
c00200ea:	c6 05 a0 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4a0,0x1
c00200f1:	e8 e8 fe ff ff       	call   c001ffde <apicGetBase()>
c00200f6:	05 f0 00 00 00       	add    eax,0xf0
c00200fb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00200fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020101:	8b 00                	mov    eax,DWORD PTR [eax]
c0020103:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0020106:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002010d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0020114:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020117:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002011a:	89 10                	mov    DWORD PTR [eax],edx
c002011c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0020123:	a1 8c ad 02 c0       	mov    eax,ds:0xc002ad8c
c0020128:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002012b:	7d 7c                	jge    c00201a9 <apicOpen()+0x185>
c002012d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020130:	8b 04 85 a0 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5260]
c0020137:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002013a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002013d:	8b 04 85 a0 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5260]
c0020144:	c1 e8 08             	shr    eax,0x8
c0020147:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002014b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002014e:	8b 04 85 a0 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5260]
c0020155:	c1 e8 18             	shr    eax,0x18
c0020158:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002015b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002015f:	3d ff 00 00 00       	cmp    eax,0xff
c0020164:	75 3a                	jne    c00201a0 <apicOpen()+0x17c>
c0020166:	e8 73 fe ff ff       	call   c001ffde <apicGetBase()>
c002016b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002016f:	83 fa 01             	cmp    edx,0x1
c0020172:	75 07                	jne    c002017b <apicOpen()+0x157>
c0020174:	ba 60 03 00 00       	mov    edx,0x360
c0020179:	eb 05                	jmp    c0020180 <apicOpen()+0x15c>
c002017b:	ba 50 03 00 00       	mov    edx,0x350
c0020180:	01 d0                	add    eax,edx
c0020182:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020185:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020188:	8b 00                	mov    eax,DWORD PTR [eax]
c002018a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002018d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020194:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0020198:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002019b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002019e:	89 10                	mov    DWORD PTR [eax],edx
c00201a0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c00201a4:	e9 7a ff ff ff       	jmp    c0020123 <apicOpen()+0xff>
c00201a9:	90                   	nop
c00201aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00201ad:	c9                   	leave  
c00201ae:	c3                   	ret    
c00201af:	90                   	nop

c00201b0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00201b0:	55                   	push   ebp
c00201b1:	89 e5                	mov    ebp,esp
c00201b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00201b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00201bc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00201bf:	72 1d                	jb     c00201de <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00201c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00201c4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00201ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00201cd:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00201d3:	01 d0                	add    eax,edx
c00201d5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00201d8:	73 04                	jae    c00201de <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00201da:	b0 01                	mov    al,0x1
c00201dc:	eb 02                	jmp    c00201e0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00201de:	b0 00                	mov    al,0x0
c00201e0:	5d                   	pop    ebp
c00201e1:	c3                   	ret    

c00201e2 <IOAPIC::read(int)>:
c00201e2:	55                   	push   ebp
c00201e3:	89 e5                	mov    ebp,esp
c00201e5:	83 ec 10             	sub    esp,0x10
c00201e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00201eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00201f1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00201f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201f7:	0f b6 d0             	movzx  edx,al
c00201fa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00201fd:	89 10                	mov    DWORD PTR [eax],edx
c00201ff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020202:	83 c0 10             	add    eax,0x10
c0020205:	8b 00                	mov    eax,DWORD PTR [eax]
c0020207:	c9                   	leave  
c0020208:	c3                   	ret    
c0020209:	90                   	nop

c002020a <IOAPIC::open(int, int, void*)>:
c002020a:	55                   	push   ebp
c002020b:	89 e5                	mov    ebp,esp
c002020d:	57                   	push   edi
c002020e:	56                   	push   esi
c002020f:	53                   	push   ebx
c0020210:	83 ec 04             	sub    esp,0x4
c0020213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020216:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020219:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002021f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020222:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020228:	8b 14 85 80 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5180]
c002022f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020232:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002023b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020241:	8b 14 85 00 af 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5100]
c0020248:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002024b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020254:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002025a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002025d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020263:	0f b6 f0             	movzx  esi,al
c0020266:	89 d0                	mov    eax,edx
c0020268:	ba 00 00 00 00       	mov    edx,0x0
c002026d:	89 c7                	mov    edi,eax
c002026f:	83 e7 ff             	and    edi,0xffffffff
c0020272:	89 f9                	mov    ecx,edi
c0020274:	0f b6 da             	movzx  ebx,dl
c0020277:	89 c8                	mov    eax,ecx
c0020279:	89 da                	mov    edx,ebx
c002027b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002027e:	8d 5e 08             	lea    ebx,[esi+0x8]
c0020281:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020285:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020289:	83 e0 00             	and    eax,0x0
c002028c:	09 d0                	or     eax,edx
c002028e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020292:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020295:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002029b:	8d 50 01             	lea    edx,[eax+0x1]
c002029e:	88 d1                	mov    cl,dl
c00202a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00202a3:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c00202a9:	0f b6 d0             	movzx  edx,al
c00202ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00202af:	83 c2 08             	add    edx,0x8
c00202b2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00202b6:	0f b6 c9             	movzx  ecx,cl
c00202b9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00202bf:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00202c3:	6a 01                	push   0x1
c00202c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00202c8:	e8 15 ff ff ff       	call   c00201e2 <IOAPIC::read(int)>
c00202cd:	83 c4 08             	add    esp,0x8
c00202d0:	c1 f8 10             	sar    eax,0x10
c00202d3:	0f b6 c0             	movzx  eax,al
c00202d6:	8d 50 01             	lea    edx,[eax+0x1]
c00202d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00202dc:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00202e2:	b8 00 00 00 00       	mov    eax,0x0
c00202e7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00202ea:	5b                   	pop    ebx
c00202eb:	5e                   	pop    esi
c00202ec:	5f                   	pop    edi
c00202ed:	5d                   	pop    ebp
c00202ee:	c3                   	ret    
c00202ef:	90                   	nop

c00202f0 <IOAPIC::write(int, int)>:
c00202f0:	55                   	push   ebp
c00202f1:	89 e5                	mov    ebp,esp
c00202f3:	83 ec 10             	sub    esp,0x10
c00202f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00202f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00202ff:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020302:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020305:	0f b6 d0             	movzx  edx,al
c0020308:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002030b:	89 10                	mov    DWORD PTR [eax],edx
c002030d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020310:	8d 50 10             	lea    edx,[eax+0x10]
c0020313:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020316:	89 02                	mov    DWORD PTR [edx],eax
c0020318:	90                   	nop
c0020319:	c9                   	leave  
c002031a:	c3                   	ret    
c002031b:	90                   	nop

c002031c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002031c:	55                   	push   ebp
c002031d:	89 e5                	mov    ebp,esp
c002031f:	53                   	push   ebx
c0020320:	83 ec 2c             	sub    esp,0x2c
c0020323:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020326:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020329:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002032c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002032f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020332:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020335:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020338:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002033b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002033e:	88 d8                	mov    al,bl
c0020340:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020343:	88 c8                	mov    al,cl
c0020345:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020348:	88 d0                	mov    al,dl
c002034a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002034d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020351:	83 c0 08             	add    eax,0x8
c0020354:	01 c0                	add    eax,eax
c0020356:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020359:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002035d:	83 c0 08             	add    eax,0x8
c0020360:	01 c0                	add    eax,eax
c0020362:	83 c0 01             	add    eax,0x1
c0020365:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020368:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002036b:	50                   	push   eax
c002036c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002036f:	e8 6e fe ff ff       	call   c00201e2 <IOAPIC::read(int)>
c0020374:	83 c4 08             	add    esp,0x8
c0020377:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002037a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020381:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020384:	c1 e0 18             	shl    eax,0x18
c0020387:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002038a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002038d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020390:	52                   	push   edx
c0020391:	50                   	push   eax
c0020392:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020395:	e8 56 ff ff ff       	call   c00202f0 <IOAPIC::write(int, int)>
c002039a:	83 c4 0c             	add    esp,0xc
c002039d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00203a0:	50                   	push   eax
c00203a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00203a4:	e8 39 fe ff ff       	call   c00201e2 <IOAPIC::read(int)>
c00203a9:	83 c4 08             	add    esp,0x8
c00203ac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00203af:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00203b6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00203bd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00203c4:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c00203c8:	85 c0                	test   eax,eax
c00203ca:	74 09                	je     c00203d5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c00203cc:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00203d3:	eb 07                	jmp    c00203dc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c00203d5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00203dc:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c00203e0:	85 c0                	test   eax,eax
c00203e2:	74 09                	je     c00203ed <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c00203e4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00203eb:	eb 07                	jmp    c00203f4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c00203ed:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00203f4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00203fb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00203ff:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020402:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020405:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020408:	52                   	push   edx
c0020409:	50                   	push   eax
c002040a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002040d:	e8 de fe ff ff       	call   c00202f0 <IOAPIC::write(int, int)>
c0020412:	83 c4 0c             	add    esp,0xc
c0020415:	90                   	nop
c0020416:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020419:	c9                   	leave  
c002041a:	c3                   	ret    
c002041b:	90                   	nop

c002041c <APICTimer::close(int, int, void*)>:
c002041c:	b8 00 00 00 00       	mov    eax,0x0
c0020421:	c3                   	ret    
c0020422:	66 90                	xchg   ax,ax

c0020424 <apicTimerHandler(regs*, void*)>:
c0020424:	83 ec 0c             	sub    esp,0xc
c0020427:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002042b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002042d:	b8 10 27 00 00       	mov    eax,0x2710
c0020432:	ba 00 00 00 00       	mov    edx,0x0
c0020437:	f7 f1                	div    ecx
c0020439:	83 ec 0c             	sub    esp,0xc
c002043c:	50                   	push   eax
c002043d:	e8 42 a5 fe ff       	call   c000a984 <timerHandler(unsigned int)>
c0020442:	83 c4 10             	add    esp,0x10
c0020445:	90                   	nop
c0020446:	83 c4 0c             	add    esp,0xc
c0020449:	c3                   	ret    
c002044a:	66 90                	xchg   ax,ax

c002044c <APICTimer::open(int, int, void*)>:
c002044c:	83 ec 0c             	sub    esp,0xc
c002044f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020453:	8b 00                	mov    eax,DWORD PTR [eax]
c0020455:	83 c0 24             	add    eax,0x24
c0020458:	8b 00                	mov    eax,DWORD PTR [eax]
c002045a:	83 ec 08             	sub    esp,0x8
c002045d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020461:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020465:	ff d0                	call   eax
c0020467:	83 c4 10             	add    esp,0x10
c002046a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020472:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002047c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020480:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020486:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002048a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020490:	83 ec 0c             	sub    esp,0xc
c0020493:	51                   	push   ecx
c0020494:	6a 01                	push   0x1
c0020496:	68 24 04 02 c0       	push   0xc0020424
c002049b:	52                   	push   edx
c002049c:	50                   	push   eax
c002049d:	e8 ba 8d fe ff       	call   c000925c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00204a2:	83 c4 20             	add    esp,0x20
c00204a5:	89 c2                	mov    edx,eax
c00204a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00204b1:	b8 00 00 00 00       	mov    eax,0x0
c00204b6:	83 c4 0c             	add    esp,0xc
c00204b9:	c3                   	ret    
c00204ba:	66 90                	xchg   ax,ax

c00204bc <APICTimer::write(int)>:
c00204bc:	83 ec 0c             	sub    esp,0xc
c00204bf:	83 ec 0c             	sub    esp,0xc
c00204c2:	68 e8 52 02 c0       	push   0xc00252e8
c00204c7:	e8 9a f3 fe ff       	call   c000f866 <KePanic(char const*)>
c00204cc:	83 c4 10             	add    esp,0x10
c00204cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00204d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00204dd:	90                   	nop
c00204de:	83 c4 0c             	add    esp,0xc
c00204e1:	c3                   	ret    
c00204e2:	66 90                	xchg   ax,ax

c00204e4 <APICTimer::APICTimer()>:
c00204e4:	83 ec 0c             	sub    esp,0xc
c00204e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204eb:	83 ec 08             	sub    esp,0x8
c00204ee:	68 f8 52 02 c0       	push   0xc00252f8
c00204f3:	50                   	push   eax
c00204f4:	e8 bf a3 fe ff       	call   c000a8b8 <Timer::Timer(char const*)>
c00204f9:	83 c4 10             	add    esp,0x10
c00204fc:	ba 0c 53 02 c0       	mov    edx,0xc002530c
c0020501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020505:	89 10                	mov    DWORD PTR [eax],edx
c0020507:	90                   	nop
c0020508:	83 c4 0c             	add    esp,0xc
c002050b:	c3                   	ret    

c002050c <PIT::write(int)>:
c002050c:	83 ec 10             	sub    esp,0x10
c002050f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020513:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020517:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002051d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020521:	a3 a4 e4 02 c0       	mov    ds:0xc002e4a4,eax
c0020526:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002052b:	89 c2                	mov    edx,eax
c002052d:	c1 fa 1f             	sar    edx,0x1f
c0020530:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020538:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002053f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020544:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020548:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002054d:	ee                   	out    dx,al
c002054e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020552:	0f b6 c0             	movzx  eax,al
c0020555:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002055c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020560:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020564:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020569:	ee                   	out    dx,al
c002056a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002056e:	c1 f8 08             	sar    eax,0x8
c0020571:	0f b6 c0             	movzx  eax,al
c0020574:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002057b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002057f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020583:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020588:	ee                   	out    dx,al
c0020589:	90                   	nop
c002058a:	83 c4 10             	add    esp,0x10
c002058d:	c3                   	ret    
c002058e:	66 90                	xchg   ax,ax

c0020590 <pitHandler(regs*, void*)>:
c0020590:	83 ec 0c             	sub    esp,0xc
c0020593:	8b 0d a4 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e4a4
c0020599:	b8 10 27 00 00       	mov    eax,0x2710
c002059e:	89 c2                	mov    edx,eax
c00205a0:	c1 fa 1f             	sar    edx,0x1f
c00205a3:	f7 f9                	idiv   ecx
c00205a5:	83 ec 0c             	sub    esp,0xc
c00205a8:	50                   	push   eax
c00205a9:	e8 d6 a3 fe ff       	call   c000a984 <timerHandler(unsigned int)>
c00205ae:	83 c4 10             	add    esp,0x10
c00205b1:	90                   	nop
c00205b2:	83 c4 0c             	add    esp,0xc
c00205b5:	c3                   	ret    
c00205b6:	66 90                	xchg   ax,ax

c00205b8 <PIT::open(int, int, void*)>:
c00205b8:	83 ec 0c             	sub    esp,0xc
c00205bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00205c1:	83 c0 24             	add    eax,0x24
c00205c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00205c6:	83 ec 08             	sub    esp,0x8
c00205c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205d1:	ff d0                	call   eax
c00205d3:	83 c4 10             	add    esp,0x10
c00205d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205da:	83 ec 0c             	sub    esp,0xc
c00205dd:	6a 00                	push   0x0
c00205df:	6a 01                	push   0x1
c00205e1:	68 90 05 02 c0       	push   0xc0020590
c00205e6:	6a 00                	push   0x0
c00205e8:	50                   	push   eax
c00205e9:	e8 6e 8c fe ff       	call   c000925c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00205ee:	83 c4 20             	add    esp,0x20
c00205f1:	89 c2                	mov    edx,eax
c00205f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205f7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00205fd:	b8 00 00 00 00       	mov    eax,0x0
c0020602:	83 c4 0c             	add    esp,0xc
c0020605:	c3                   	ret    
c0020606:	66 90                	xchg   ax,ax

c0020608 <PIT::close(int, int, void*)>:
c0020608:	83 ec 0c             	sub    esp,0xc
c002060b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002060f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002061d:	6a 01                	push   0x1
c002061f:	68 90 05 02 c0       	push   0xc0020590
c0020624:	6a 00                	push   0x0
c0020626:	50                   	push   eax
c0020627:	e8 66 8c fe ff       	call   c0009292 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002062c:	83 c4 10             	add    esp,0x10
c002062f:	b8 00 00 00 00       	mov    eax,0x0
c0020634:	83 c4 0c             	add    esp,0xc
c0020637:	c3                   	ret    

c0020638 <PIT::PIT()>:
c0020638:	83 ec 0c             	sub    esp,0xc
c002063b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002063f:	83 ec 08             	sub    esp,0x8
c0020642:	68 34 53 02 c0       	push   0xc0025334
c0020647:	50                   	push   eax
c0020648:	e8 6b a2 fe ff       	call   c000a8b8 <Timer::Timer(char const*)>
c002064d:	83 c4 10             	add    esp,0x10
c0020650:	ba 5c 53 02 c0       	mov    edx,0xc002535c
c0020655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020659:	89 10                	mov    DWORD PTR [eax],edx
c002065b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002065f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020665:	0f b6 d0             	movzx  edx,al
c0020668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002066c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020677:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002067d:	0f b6 d0             	movzx  edx,al
c0020680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020684:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002068d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020693:	8d 50 01             	lea    edx,[eax+0x1]
c0020696:	88 d1                	mov    cl,dl
c0020698:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002069c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00206a2:	0f b6 d0             	movzx  edx,al
c00206a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206a9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00206ad:	83 e1 3f             	and    ecx,0x3f
c00206b0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00206b4:	90                   	nop
c00206b5:	83 c4 0c             	add    esp,0xc
c00206b8:	c3                   	ret    
c00206b9:	66 90                	xchg   ax,ax
c00206bb:	66 90                	xchg   ax,ax
c00206bd:	66 90                	xchg   ax,ax
c00206bf:	90                   	nop

c00206c0 <avxDetect>:
c00206c0:	b8 01 00 00 00       	mov    eax,0x1
c00206c5:	0f a2                	cpuid  
c00206c7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00206cd:	74 15                	je     c00206e4 <avxDetect.noAVX>
c00206cf:	b8 01 00 00 00       	mov    eax,0x1
c00206d4:	0f a2                	cpuid  
c00206d6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00206dc:	74 06                	je     c00206e4 <avxDetect.noAVX>
c00206de:	b8 01 00 00 00       	mov    eax,0x1
c00206e3:	c3                   	ret    

c00206e4 <avxDetect.noAVX>:
c00206e4:	b8 00 00 00 00       	mov    eax,0x0
c00206e9:	c3                   	ret    

c00206ea <avxSave>:
c00206ea:	53                   	push   ebx
c00206eb:	52                   	push   edx
c00206ec:	31 c0                	xor    eax,eax
c00206ee:	48                   	dec    eax
c00206ef:	89 c2                	mov    edx,eax
c00206f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00206f5:	0f ae 23             	xsave  [ebx]
c00206f8:	5a                   	pop    edx
c00206f9:	5b                   	pop    ebx
c00206fa:	c3                   	ret    

c00206fb <avxLoad>:
c00206fb:	53                   	push   ebx
c00206fc:	52                   	push   edx
c00206fd:	31 c0                	xor    eax,eax
c00206ff:	48                   	dec    eax
c0020700:	89 c2                	mov    edx,eax
c0020702:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020706:	0f ae 2b             	xrstor [ebx]
c0020709:	5a                   	pop    edx
c002070a:	5b                   	pop    ebx
c002070b:	c3                   	ret    

c002070c <avxInit>:
c002070c:	e8 47 03 00 00       	call   c0020a58 <sseInit>
c0020711:	50                   	push   eax
c0020712:	51                   	push   ecx
c0020713:	0f 20 e0             	mov    eax,cr4
c0020716:	0d 00 00 04 00       	or     eax,0x40000
c002071b:	0f 22 e0             	mov    cr4,eax
c002071e:	31 c9                	xor    ecx,ecx
c0020720:	0f 01 d0             	xgetbv 
c0020723:	0d 07 00 00 00       	or     eax,0x7
c0020728:	0f 01 d1             	xsetbv 
c002072b:	59                   	pop    ecx
c002072c:	58                   	pop    eax
c002072d:	c3                   	ret    

c002072e <avxClose>:
c002072e:	c3                   	ret    
c002072f:	90                   	nop

c0020730 <isr0>:
c0020730:	fa                   	cli    
c0020731:	68 00 00 00 00       	push   0x0
c0020736:	68 00 00 00 00       	push   0x0
c002073b:	e9 56 01 00 00       	jmp    c0020896 <int_common_stub>

c0020740 <isr1>:
c0020740:	fa                   	cli    
c0020741:	6a 00                	push   0x0
c0020743:	6a 01                	push   0x1
c0020745:	e9 4c 01 00 00       	jmp    c0020896 <int_common_stub>

c002074a <isr2>:
c002074a:	fa                   	cli    
c002074b:	6a 00                	push   0x0
c002074d:	6a 02                	push   0x2
c002074f:	e9 42 01 00 00       	jmp    c0020896 <int_common_stub>

c0020754 <isr3>:
c0020754:	fa                   	cli    
c0020755:	6a 00                	push   0x0
c0020757:	6a 03                	push   0x3
c0020759:	e9 38 01 00 00       	jmp    c0020896 <int_common_stub>

c002075e <isr4>:
c002075e:	fa                   	cli    
c002075f:	6a 00                	push   0x0
c0020761:	6a 04                	push   0x4
c0020763:	e9 2e 01 00 00       	jmp    c0020896 <int_common_stub>

c0020768 <isr5>:
c0020768:	fa                   	cli    
c0020769:	6a 00                	push   0x0
c002076b:	6a 05                	push   0x5
c002076d:	e9 24 01 00 00       	jmp    c0020896 <int_common_stub>

c0020772 <isr6>:
c0020772:	fa                   	cli    
c0020773:	6a 00                	push   0x0
c0020775:	6a 06                	push   0x6
c0020777:	e9 1a 01 00 00       	jmp    c0020896 <int_common_stub>

c002077c <isr7>:
c002077c:	fa                   	cli    
c002077d:	6a 00                	push   0x0
c002077f:	6a 07                	push   0x7
c0020781:	e9 10 01 00 00       	jmp    c0020896 <int_common_stub>

c0020786 <isr8>:
c0020786:	fa                   	cli    
c0020787:	6a 08                	push   0x8
c0020789:	e9 08 01 00 00       	jmp    c0020896 <int_common_stub>

c002078e <isr9>:
c002078e:	fa                   	cli    
c002078f:	6a 00                	push   0x0
c0020791:	6a 09                	push   0x9
c0020793:	e9 fe 00 00 00       	jmp    c0020896 <int_common_stub>

c0020798 <isr10>:
c0020798:	fa                   	cli    
c0020799:	6a 0a                	push   0xa
c002079b:	e9 f6 00 00 00       	jmp    c0020896 <int_common_stub>

c00207a0 <isr11>:
c00207a0:	fa                   	cli    
c00207a1:	6a 0b                	push   0xb
c00207a3:	e9 ee 00 00 00       	jmp    c0020896 <int_common_stub>

c00207a8 <isr12>:
c00207a8:	fa                   	cli    
c00207a9:	6a 0c                	push   0xc
c00207ab:	e9 e6 00 00 00       	jmp    c0020896 <int_common_stub>

c00207b0 <isr13>:
c00207b0:	fa                   	cli    
c00207b1:	6a 0d                	push   0xd
c00207b3:	53                   	push   ebx
c00207b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00207b8:	81 fb 86 09 02 c0    	cmp    ebx,0xc0020986
c00207be:	5b                   	pop    ebx
c00207bf:	0f 84 c3 01 00 00    	je     c0020988 <finishSignal2>
c00207c5:	e9 cc 00 00 00       	jmp    c0020896 <int_common_stub>

c00207ca <isr14>:
c00207ca:	fa                   	cli    
c00207cb:	6a 0e                	push   0xe
c00207cd:	e9 c4 00 00 00       	jmp    c0020896 <int_common_stub>

c00207d2 <isr15>:
c00207d2:	fa                   	cli    
c00207d3:	6a 00                	push   0x0
c00207d5:	6a 0f                	push   0xf
c00207d7:	e9 ba 00 00 00       	jmp    c0020896 <int_common_stub>

c00207dc <isr16>:
c00207dc:	fa                   	cli    
c00207dd:	6a 00                	push   0x0
c00207df:	6a 10                	push   0x10
c00207e1:	e9 b0 00 00 00       	jmp    c0020896 <int_common_stub>

c00207e6 <isr17>:
c00207e6:	fa                   	cli    
c00207e7:	6a 00                	push   0x0
c00207e9:	6a 11                	push   0x11
c00207eb:	e9 a6 00 00 00       	jmp    c0020896 <int_common_stub>

c00207f0 <isr18>:
c00207f0:	fa                   	cli    
c00207f1:	6a 00                	push   0x0
c00207f3:	6a 12                	push   0x12
c00207f5:	e9 9c 00 00 00       	jmp    c0020896 <int_common_stub>

c00207fa <irq3>:
c00207fa:	fa                   	cli    
c00207fb:	6a 00                	push   0x0
c00207fd:	6a 23                	push   0x23
c00207ff:	e9 92 00 00 00       	jmp    c0020896 <int_common_stub>

c0020804 <irq4>:
c0020804:	fa                   	cli    
c0020805:	6a 00                	push   0x0
c0020807:	6a 24                	push   0x24
c0020809:	e9 88 00 00 00       	jmp    c0020896 <int_common_stub>

c002080e <irq5>:
c002080e:	fa                   	cli    
c002080f:	6a 00                	push   0x0
c0020811:	6a 25                	push   0x25
c0020813:	e9 7e 00 00 00       	jmp    c0020896 <int_common_stub>

c0020818 <irq6>:
c0020818:	fa                   	cli    
c0020819:	6a 00                	push   0x0
c002081b:	6a 26                	push   0x26
c002081d:	e9 74 00 00 00       	jmp    c0020896 <int_common_stub>

c0020822 <irq7>:
c0020822:	fa                   	cli    
c0020823:	6a 00                	push   0x0
c0020825:	6a 27                	push   0x27
c0020827:	e9 6a 00 00 00       	jmp    c0020896 <int_common_stub>

c002082c <irq8>:
c002082c:	fa                   	cli    
c002082d:	6a 00                	push   0x0
c002082f:	6a 28                	push   0x28
c0020831:	e9 60 00 00 00       	jmp    c0020896 <int_common_stub>

c0020836 <irq9>:
c0020836:	fa                   	cli    
c0020837:	6a 00                	push   0x0
c0020839:	6a 29                	push   0x29
c002083b:	e9 56 00 00 00       	jmp    c0020896 <int_common_stub>

c0020840 <irq10>:
c0020840:	fa                   	cli    
c0020841:	6a 00                	push   0x0
c0020843:	6a 2a                	push   0x2a
c0020845:	e9 4c 00 00 00       	jmp    c0020896 <int_common_stub>

c002084a <irq11>:
c002084a:	fa                   	cli    
c002084b:	6a 00                	push   0x0
c002084d:	6a 2b                	push   0x2b
c002084f:	e9 42 00 00 00       	jmp    c0020896 <int_common_stub>

c0020854 <irq12>:
c0020854:	fa                   	cli    
c0020855:	6a 00                	push   0x0
c0020857:	6a 2c                	push   0x2c
c0020859:	e9 38 00 00 00       	jmp    c0020896 <int_common_stub>

c002085e <irq13>:
c002085e:	fa                   	cli    
c002085f:	6a 00                	push   0x0
c0020861:	6a 2d                	push   0x2d
c0020863:	e9 2e 00 00 00       	jmp    c0020896 <int_common_stub>

c0020868 <irq14>:
c0020868:	fa                   	cli    
c0020869:	6a 00                	push   0x0
c002086b:	6a 2e                	push   0x2e
c002086d:	e9 24 00 00 00       	jmp    c0020896 <int_common_stub>

c0020872 <irq15>:
c0020872:	fa                   	cli    
c0020873:	6a 00                	push   0x0
c0020875:	6a 2f                	push   0x2f
c0020877:	e9 1a 00 00 00       	jmp    c0020896 <int_common_stub>

c002087c <irq1>:
c002087c:	fa                   	cli    
c002087d:	6a 00                	push   0x0
c002087f:	6a 21                	push   0x21
c0020881:	eb 13                	jmp    c0020896 <int_common_stub>

c0020883 <irq2>:
c0020883:	fa                   	cli    
c0020884:	6a 00                	push   0x0
c0020886:	6a 22                	push   0x22
c0020888:	eb 0c                	jmp    c0020896 <int_common_stub>

c002088a <isr96>:
c002088a:	6a 00                	push   0x0
c002088c:	6a 60                	push   0x60
c002088e:	fb                   	sti    
c002088f:	eb 37                	jmp    c00208c8 <syscall_common_stub>

c0020891 <irq0>:
c0020891:	fa                   	cli    
c0020892:	6a 00                	push   0x0
c0020894:	6a 20                	push   0x20

c0020896 <int_common_stub>:
c0020896:	60                   	pusha  
c0020897:	1e                   	push   ds
c0020898:	06                   	push   es
c0020899:	0f a0                	push   fs
c002089b:	0f a8                	push   gs
c002089d:	66 b8 10 00          	mov    ax,0x10
c00208a1:	66 8e d8             	mov    ds,ax
c00208a4:	66 8e c0             	mov    es,ax
c00208a7:	66 8e e0             	mov    fs,ax
c00208aa:	66 8e e8             	mov    gs,ax
c00208ad:	54                   	push   esp
c00208ae:	fc                   	cld    
c00208af:	e8 e4 d9 fe ff       	call   c000e298 <int_handler>
c00208b4:	81 c4 04 00 00 00    	add    esp,0x4
c00208ba:	0f a9                	pop    gs
c00208bc:	0f a1                	pop    fs
c00208be:	07                   	pop    es
c00208bf:	1f                   	pop    ds
c00208c0:	61                   	popa   
c00208c1:	81 c4 08 00 00 00    	add    esp,0x8
c00208c7:	cf                   	iret   

c00208c8 <syscall_common_stub>:
c00208c8:	60                   	pusha  
c00208c9:	1e                   	push   ds
c00208ca:	06                   	push   es
c00208cb:	0f a0                	push   fs
c00208cd:	0f a8                	push   gs
c00208cf:	66 b8 10 00          	mov    ax,0x10
c00208d3:	66 8e d8             	mov    ds,ax
c00208d6:	66 8e c0             	mov    es,ax
c00208d9:	66 8e e0             	mov    fs,ax
c00208dc:	66 8e e8             	mov    gs,ax
c00208df:	54                   	push   esp
c00208e0:	fc                   	cld    
c00208e1:	e8 b2 d9 fe ff       	call   c000e298 <int_handler>
c00208e6:	81 c4 04 00 00 00    	add    esp,0x4
c00208ec:	0f a9                	pop    gs
c00208ee:	0f a1                	pop    fs
c00208f0:	07                   	pop    es
c00208f1:	1f                   	pop    ds
c00208f2:	e8 2c 02 ff ff       	call   c0010b23 <KiCheckSignalZ>
c00208f7:	3d 00 00 00 00       	cmp    eax,0x0
c00208fc:	0f 84 c0 00 00 00    	je     c00209c2 <skipSignals>
c0020902:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0020907:	61                   	popa   
c0020908:	53                   	push   ebx
c0020909:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002090f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0020912:	5b                   	pop    ebx
c0020913:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0020918:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002091b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002091e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0020921:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0020924:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0020927:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002092a:	81 c4 08 00 00 00    	add    esp,0x8
c0020930:	5e                   	pop    esi
c0020931:	5b                   	pop    ebx
c0020932:	59                   	pop    ecx
c0020933:	5a                   	pop    edx
c0020934:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0020937:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002093a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002093d:	52                   	push   edx
c002093e:	51                   	push   ecx
c002093f:	53                   	push   ebx
c0020940:	56                   	push   esi
c0020941:	81 ec 08 00 00 00    	sub    esp,0x8
c0020947:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002094a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002094d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0020950:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020953:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020956:	60                   	pusha  
c0020957:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002095d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0020960:	89 e3                	mov    ebx,esp
c0020962:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0020965:	52                   	push   edx
c0020966:	68 86 09 02 c0       	push   0xc0020986
c002096b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002096e:	89 dc                	mov    esp,ebx
c0020970:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0020973:	68 23 00 00 00       	push   0x23
c0020978:	51                   	push   ecx
c0020979:	68 02 02 00 00       	push   0x202
c002097e:	68 1b 00 00 00       	push   0x1b
c0020983:	ff 36                	push   DWORD PTR [esi]
c0020985:	cf                   	iret   

c0020986 <finishSignal>:
c0020986:	cd 0f                	int    0xf

c0020988 <finishSignal2>:
c0020988:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002098e:	e8 0d 02 ff ff       	call   c0010ba0 <KiFinishSignalZ>
c0020993:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0020999:	68 23 00 00 00       	push   0x23
c002099e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00209a1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00209a4:	68 1b 00 00 00       	push   0x1b
c00209a9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c00209ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00209af:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00209b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00209b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00209b8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c00209bb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00209be:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c00209c1:	cf                   	iret   

c00209c2 <skipSignals>:
c00209c2:	61                   	popa   
c00209c3:	81 c4 08 00 00 00    	add    esp,0x8
c00209c9:	cf                   	iret   
c00209ca:	90                   	nop
c00209cb:	90                   	nop

c00209cc <irq16>:
c00209cc:	fa                   	cli    
c00209cd:	6a 00                	push   0x0
c00209cf:	6a 30                	push   0x30
c00209d1:	e9 c0 fe ff ff       	jmp    c0020896 <int_common_stub>

c00209d6 <irq17>:
c00209d6:	fa                   	cli    
c00209d7:	6a 00                	push   0x0
c00209d9:	6a 31                	push   0x31
c00209db:	e9 b6 fe ff ff       	jmp    c0020896 <int_common_stub>

c00209e0 <irq18>:
c00209e0:	fa                   	cli    
c00209e1:	6a 00                	push   0x0
c00209e3:	6a 32                	push   0x32
c00209e5:	e9 ac fe ff ff       	jmp    c0020896 <int_common_stub>

c00209ea <irq19>:
c00209ea:	fa                   	cli    
c00209eb:	6a 00                	push   0x0
c00209ed:	6a 33                	push   0x33
c00209ef:	e9 a2 fe ff ff       	jmp    c0020896 <int_common_stub>

c00209f4 <irq20>:
c00209f4:	fa                   	cli    
c00209f5:	6a 00                	push   0x0
c00209f7:	6a 34                	push   0x34
c00209f9:	e9 98 fe ff ff       	jmp    c0020896 <int_common_stub>

c00209fe <irq21>:
c00209fe:	fa                   	cli    
c00209ff:	6a 00                	push   0x0
c0020a01:	6a 35                	push   0x35
c0020a03:	e9 8e fe ff ff       	jmp    c0020896 <int_common_stub>

c0020a08 <irq22>:
c0020a08:	fa                   	cli    
c0020a09:	6a 00                	push   0x0
c0020a0b:	6a 36                	push   0x36
c0020a0d:	e9 84 fe ff ff       	jmp    c0020896 <int_common_stub>

c0020a12 <irq23>:
c0020a12:	fa                   	cli    
c0020a13:	6a 00                	push   0x0
c0020a15:	6a 37                	push   0x37
c0020a17:	e9 7a fe ff ff       	jmp    c0020896 <int_common_stub>
c0020a1c:	66 90                	xchg   ax,ax
c0020a1e:	66 90                	xchg   ax,ax

c0020a20 <i386GetRDRAND>:
c0020a20:	b9 64 00 00 00       	mov    ecx,0x64

c0020a25 <retry>:
c0020a25:	0f c7 f0             	rdrand eax
c0020a28:	72 05                	jb     c0020a2f <retry.done>
c0020a2a:	e2 f9                	loop   c0020a25 <retry>

c0020a2c <retry.fail>:
c0020a2c:	31 c0                	xor    eax,eax
c0020a2e:	c3                   	ret    

c0020a2f <retry.done>:
c0020a2f:	c3                   	ret    

c0020a30 <sseDetect>:
c0020a30:	b8 01 00 00 00       	mov    eax,0x1
c0020a35:	0f a2                	cpuid  
c0020a37:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020a3d:	74 06                	je     c0020a45 <sseDetect.noSSE>
c0020a3f:	b8 01 00 00 00       	mov    eax,0x1
c0020a44:	c3                   	ret    

c0020a45 <sseDetect.noSSE>:
c0020a45:	31 c0                	xor    eax,eax
c0020a47:	c3                   	ret    

c0020a48 <sseSave>:
c0020a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a4c:	0f ae 00             	fxsave [eax]
c0020a4f:	c3                   	ret    

c0020a50 <sseLoad>:
c0020a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a54:	0f ae 08             	fxrstor [eax]
c0020a57:	c3                   	ret    

c0020a58 <sseInit>:
c0020a58:	e8 48 00 00 00       	call   c0020aa5 <x87Init>
c0020a5d:	0f 20 e0             	mov    eax,cr4
c0020a60:	66 0d 00 06          	or     ax,0x600
c0020a64:	0f 22 e0             	mov    cr4,eax
c0020a67:	c3                   	ret    

c0020a68 <sseClose>:
c0020a68:	c3                   	ret    
c0020a69:	66 90                	xchg   ax,ax
c0020a6b:	66 90                	xchg   ax,ax
c0020a6d:	66 90                	xchg   ax,ax
c0020a6f:	90                   	nop

c0020a70 <value_37F>:
c0020a70:	7f 03                	jg     c0020a75 <value_37A+0x1>

c0020a72 <value_37E>:
c0020a72:	7e 03                	jle    c0020a77 <x87Detect+0x1>

c0020a74 <value_37A>:
c0020a74:	7a 03                	jp     c0020a79 <x87Detect+0x3>

c0020a76 <x87Detect>:
c0020a76:	53                   	push   ebx
c0020a77:	51                   	push   ecx
c0020a78:	52                   	push   edx
c0020a79:	b8 01 00 00 00       	mov    eax,0x1
c0020a7e:	0f a2                	cpuid  
c0020a80:	f7 c2 01 00 00 00    	test   edx,0x1
c0020a86:	74 06                	je     c0020a8e <x87Detect.nox87>
c0020a88:	b8 01 00 00 00       	mov    eax,0x1
c0020a8d:	c3                   	ret    

c0020a8e <x87Detect.nox87>:
c0020a8e:	b8 00 00 00 00       	mov    eax,0x0
c0020a93:	5a                   	pop    edx
c0020a94:	59                   	pop    ecx
c0020a95:	5b                   	pop    ebx
c0020a96:	c3                   	ret    

c0020a97 <x87Save>:
c0020a97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a9b:	dd 30                	fnsave [eax]
c0020a9d:	c3                   	ret    

c0020a9e <x87Load>:
c0020a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020aa2:	dd 20                	frstor [eax]
c0020aa4:	c3                   	ret    

c0020aa5 <x87Init>:
c0020aa5:	0f 20 c0             	mov    eax,cr0
c0020aa8:	66 25 fb ff          	and    ax,0xfffb
c0020aac:	66 0d 22 00          	or     ax,0x22
c0020ab0:	0f 22 c0             	mov    cr0,eax
c0020ab3:	db e3                	fninit 
c0020ab5:	0f 06                	clts   
c0020ab7:	d9 2d 74 0a 02 c0    	fldcw  WORD PTR ds:0xc0020a74
c0020abd:	c3                   	ret    

c0020abe <x87Close>:
c0020abe:	c3                   	ret    
c0020abf:	90                   	nop

c0020ac0 <__do_global_ctors_aux>:
c0020ac0:	a1 74 1a 02 c0       	mov    eax,ds:0xc0021a74
c0020ac5:	83 f8 ff             	cmp    eax,0xffffffff
c0020ac8:	74 1a                	je     c0020ae4 <__do_global_ctors_aux+0x24>
c0020aca:	55                   	push   ebp
c0020acb:	89 e5                	mov    ebp,esp
c0020acd:	53                   	push   ebx
c0020ace:	52                   	push   edx
c0020acf:	bb 74 1a 02 c0       	mov    ebx,0xc0021a74
c0020ad4:	ff d0                	call   eax
c0020ad6:	83 eb 04             	sub    ebx,0x4
c0020ad9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020adb:	83 f8 ff             	cmp    eax,0xffffffff
c0020ade:	75 f4                	jne    c0020ad4 <__do_global_ctors_aux+0x14>
c0020ae0:	58                   	pop    eax
c0020ae1:	5b                   	pop    ebx
c0020ae2:	5d                   	pop    ebp
c0020ae3:	c3                   	ret    
c0020ae4:	c3                   	ret    
c0020ae5:	66 90                	xchg   ax,ax
c0020ae7:	90                   	nop

c0020ae8 <__divdi3>:
c0020ae8:	55                   	push   ebp
c0020ae9:	57                   	push   edi
c0020aea:	56                   	push   esi
c0020aeb:	53                   	push   ebx
c0020aec:	83 ec 1c             	sub    esp,0x1c
c0020aef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020af3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020af7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020afa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020afe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020b02:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020b06:	85 db                	test   ebx,ebx
c0020b08:	0f 88 8e 00 00 00    	js     c0020b9c <__divdi3+0xb4>
c0020b0e:	89 dd                	mov    ebp,ebx
c0020b10:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020b18:	89 d3                	mov    ebx,edx
c0020b1a:	85 d2                	test   edx,edx
c0020b1c:	79 0d                	jns    c0020b2b <__divdi3+0x43>
c0020b1e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020b22:	f7 d8                	neg    eax
c0020b24:	83 d2 00             	adc    edx,0x0
c0020b27:	f7 da                	neg    edx
c0020b29:	89 d3                	mov    ebx,edx
c0020b2b:	89 c7                	mov    edi,eax
c0020b2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b30:	85 db                	test   ebx,ebx
c0020b32:	75 48                	jne    c0020b7c <__divdi3+0x94>
c0020b34:	39 ef                	cmp    edi,ebp
c0020b36:	76 24                	jbe    c0020b5c <__divdi3+0x74>
c0020b38:	89 ea                	mov    edx,ebp
c0020b3a:	f7 f7                	div    edi
c0020b3c:	89 c1                	mov    ecx,eax
c0020b3e:	31 f6                	xor    esi,esi
c0020b40:	89 c8                	mov    eax,ecx
c0020b42:	89 f2                	mov    edx,esi
c0020b44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020b48:	85 c9                	test   ecx,ecx
c0020b4a:	74 07                	je     c0020b53 <__divdi3+0x6b>
c0020b4c:	f7 d8                	neg    eax
c0020b4e:	83 d2 00             	adc    edx,0x0
c0020b51:	f7 da                	neg    edx
c0020b53:	83 c4 1c             	add    esp,0x1c
c0020b56:	5b                   	pop    ebx
c0020b57:	5e                   	pop    esi
c0020b58:	5f                   	pop    edi
c0020b59:	5d                   	pop    ebp
c0020b5a:	c3                   	ret    
c0020b5b:	90                   	nop
c0020b5c:	85 ff                	test   edi,edi
c0020b5e:	75 0b                	jne    c0020b6b <__divdi3+0x83>
c0020b60:	b8 01 00 00 00       	mov    eax,0x1
c0020b65:	31 d2                	xor    edx,edx
c0020b67:	f7 f3                	div    ebx
c0020b69:	89 c7                	mov    edi,eax
c0020b6b:	31 d2                	xor    edx,edx
c0020b6d:	89 e8                	mov    eax,ebp
c0020b6f:	f7 f7                	div    edi
c0020b71:	89 c6                	mov    esi,eax
c0020b73:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b76:	f7 f7                	div    edi
c0020b78:	89 c1                	mov    ecx,eax
c0020b7a:	eb c4                	jmp    c0020b40 <__divdi3+0x58>
c0020b7c:	39 eb                	cmp    ebx,ebp
c0020b7e:	77 3c                	ja     c0020bbc <__divdi3+0xd4>
c0020b80:	0f bd f3             	bsr    esi,ebx
c0020b83:	83 f6 1f             	xor    esi,0x1f
c0020b86:	75 40                	jne    c0020bc8 <__divdi3+0xe0>
c0020b88:	39 eb                	cmp    ebx,ebp
c0020b8a:	72 09                	jb     c0020b95 <__divdi3+0xad>
c0020b8c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020b8f:	0f 87 97 00 00 00    	ja     c0020c2c <__divdi3+0x144>
c0020b95:	b9 01 00 00 00       	mov    ecx,0x1
c0020b9a:	eb a4                	jmp    c0020b40 <__divdi3+0x58>
c0020b9c:	f7 d9                	neg    ecx
c0020b9e:	83 d3 00             	adc    ebx,0x0
c0020ba1:	f7 db                	neg    ebx
c0020ba3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020ba6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020baa:	89 dd                	mov    ebp,ebx
c0020bac:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020bb4:	e9 5f ff ff ff       	jmp    c0020b18 <__divdi3+0x30>
c0020bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0020bbc:	31 f6                	xor    esi,esi
c0020bbe:	31 c9                	xor    ecx,ecx
c0020bc0:	e9 7b ff ff ff       	jmp    c0020b40 <__divdi3+0x58>
c0020bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0020bc8:	b8 20 00 00 00       	mov    eax,0x20
c0020bcd:	29 f0                	sub    eax,esi
c0020bcf:	89 f1                	mov    ecx,esi
c0020bd1:	d3 e3                	shl    ebx,cl
c0020bd3:	89 fa                	mov    edx,edi
c0020bd5:	88 c1                	mov    cl,al
c0020bd7:	d3 ea                	shr    edx,cl
c0020bd9:	09 da                	or     edx,ebx
c0020bdb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020bdf:	89 f1                	mov    ecx,esi
c0020be1:	d3 e7                	shl    edi,cl
c0020be3:	89 eb                	mov    ebx,ebp
c0020be5:	88 c1                	mov    cl,al
c0020be7:	d3 eb                	shr    ebx,cl
c0020be9:	89 f1                	mov    ecx,esi
c0020beb:	d3 e5                	shl    ebp,cl
c0020bed:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020bf0:	88 c1                	mov    cl,al
c0020bf2:	d3 ea                	shr    edx,cl
c0020bf4:	09 d5                	or     ebp,edx
c0020bf6:	89 e8                	mov    eax,ebp
c0020bf8:	89 da                	mov    edx,ebx
c0020bfa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020bfe:	89 d3                	mov    ebx,edx
c0020c00:	89 c5                	mov    ebp,eax
c0020c02:	f7 e7                	mul    edi
c0020c04:	39 d3                	cmp    ebx,edx
c0020c06:	72 18                	jb     c0020c20 <__divdi3+0x138>
c0020c08:	74 0a                	je     c0020c14 <__divdi3+0x12c>
c0020c0a:	89 e9                	mov    ecx,ebp
c0020c0c:	31 f6                	xor    esi,esi
c0020c0e:	e9 2d ff ff ff       	jmp    c0020b40 <__divdi3+0x58>
c0020c13:	90                   	nop
c0020c14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020c17:	89 f1                	mov    ecx,esi
c0020c19:	d3 e7                	shl    edi,cl
c0020c1b:	39 c7                	cmp    edi,eax
c0020c1d:	73 eb                	jae    c0020c0a <__divdi3+0x122>
c0020c1f:	90                   	nop
c0020c20:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020c23:	31 f6                	xor    esi,esi
c0020c25:	e9 16 ff ff ff       	jmp    c0020b40 <__divdi3+0x58>
c0020c2a:	66 90                	xchg   ax,ax
c0020c2c:	31 c9                	xor    ecx,ecx
c0020c2e:	e9 0d ff ff ff       	jmp    c0020b40 <__divdi3+0x58>
c0020c33:	90                   	nop

c0020c34 <__moddi3>:
c0020c34:	55                   	push   ebp
c0020c35:	57                   	push   edi
c0020c36:	56                   	push   esi
c0020c37:	53                   	push   ebx
c0020c38:	83 ec 2c             	sub    esp,0x2c
c0020c3b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020c3f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020c43:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020c47:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020c4b:	85 db                	test   ebx,ebx
c0020c4d:	0f 88 85 00 00 00    	js     c0020cd8 <__moddi3+0xa4>
c0020c53:	89 de                	mov    esi,ebx
c0020c55:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020c5d:	89 d7                	mov    edi,edx
c0020c5f:	85 d2                	test   edx,edx
c0020c61:	79 09                	jns    c0020c6c <__moddi3+0x38>
c0020c63:	f7 d8                	neg    eax
c0020c65:	83 d2 00             	adc    edx,0x0
c0020c68:	f7 da                	neg    edx
c0020c6a:	89 d7                	mov    edi,edx
c0020c6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c70:	89 cd                	mov    ebp,ecx
c0020c72:	85 ff                	test   edi,edi
c0020c74:	75 52                	jne    c0020cc8 <__moddi3+0x94>
c0020c76:	89 c3                	mov    ebx,eax
c0020c78:	39 f0                	cmp    eax,esi
c0020c7a:	76 24                	jbe    c0020ca0 <__moddi3+0x6c>
c0020c7c:	89 c8                	mov    eax,ecx
c0020c7e:	89 f2                	mov    edx,esi
c0020c80:	f7 f3                	div    ebx
c0020c82:	89 d6                	mov    esi,edx
c0020c84:	89 f0                	mov    eax,esi
c0020c86:	31 d2                	xor    edx,edx
c0020c88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020c8c:	85 c9                	test   ecx,ecx
c0020c8e:	74 07                	je     c0020c97 <__moddi3+0x63>
c0020c90:	f7 d8                	neg    eax
c0020c92:	83 d2 00             	adc    edx,0x0
c0020c95:	f7 da                	neg    edx
c0020c97:	83 c4 2c             	add    esp,0x2c
c0020c9a:	5b                   	pop    ebx
c0020c9b:	5e                   	pop    esi
c0020c9c:	5f                   	pop    edi
c0020c9d:	5d                   	pop    ebp
c0020c9e:	c3                   	ret    
c0020c9f:	90                   	nop
c0020ca0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020ca4:	85 db                	test   ebx,ebx
c0020ca6:	75 0d                	jne    c0020cb5 <__moddi3+0x81>
c0020ca8:	b8 01 00 00 00       	mov    eax,0x1
c0020cad:	31 d2                	xor    edx,edx
c0020caf:	f7 f7                	div    edi
c0020cb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cb5:	89 f0                	mov    eax,esi
c0020cb7:	31 d2                	xor    edx,edx
c0020cb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020cbd:	f7 f7                	div    edi
c0020cbf:	89 e8                	mov    eax,ebp
c0020cc1:	f7 f7                	div    edi
c0020cc3:	89 d6                	mov    esi,edx
c0020cc5:	eb bd                	jmp    c0020c84 <__moddi3+0x50>
c0020cc7:	90                   	nop
c0020cc8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020ccc:	39 f7                	cmp    edi,esi
c0020cce:	76 20                	jbe    c0020cf0 <__moddi3+0xbc>
c0020cd0:	89 c8                	mov    eax,ecx
c0020cd2:	89 f2                	mov    edx,esi
c0020cd4:	eb b2                	jmp    c0020c88 <__moddi3+0x54>
c0020cd6:	66 90                	xchg   ax,ax
c0020cd8:	f7 d9                	neg    ecx
c0020cda:	83 d3 00             	adc    ebx,0x0
c0020cdd:	f7 db                	neg    ebx
c0020cdf:	89 de                	mov    esi,ebx
c0020ce1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020ce9:	e9 6f ff ff ff       	jmp    c0020c5d <__moddi3+0x29>
c0020cee:	66 90                	xchg   ax,ax
c0020cf0:	0f bd c7             	bsr    eax,edi
c0020cf3:	83 f0 1f             	xor    eax,0x1f
c0020cf6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020cfa:	75 24                	jne    c0020d20 <__moddi3+0xec>
c0020cfc:	39 f7                	cmp    edi,esi
c0020cfe:	72 06                	jb     c0020d06 <__moddi3+0xd2>
c0020d00:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020d04:	77 0c                	ja     c0020d12 <__moddi3+0xde>
c0020d06:	89 e9                	mov    ecx,ebp
c0020d08:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020d0c:	19 fe                	sbb    esi,edi
c0020d0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020d12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d16:	89 f2                	mov    edx,esi
c0020d18:	e9 6b ff ff ff       	jmp    c0020c88 <__moddi3+0x54>
c0020d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0020d20:	b8 20 00 00 00       	mov    eax,0x20
c0020d25:	89 c2                	mov    edx,eax
c0020d27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020d2b:	29 da                	sub    edx,ebx
c0020d2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020d31:	88 d9                	mov    cl,bl
c0020d33:	d3 e7                	shl    edi,cl
c0020d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d39:	88 d1                	mov    cl,dl
c0020d3b:	d3 e8                	shr    eax,cl
c0020d3d:	09 c7                	or     edi,eax
c0020d3f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020d43:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020d47:	89 d8                	mov    eax,ebx
c0020d49:	88 d9                	mov    cl,bl
c0020d4b:	d3 e7                	shl    edi,cl
c0020d4d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020d51:	89 f3                	mov    ebx,esi
c0020d53:	88 d1                	mov    cl,dl
c0020d55:	d3 eb                	shr    ebx,cl
c0020d57:	89 c7                	mov    edi,eax
c0020d59:	88 c1                	mov    cl,al
c0020d5b:	d3 e6                	shl    esi,cl
c0020d5d:	89 e8                	mov    eax,ebp
c0020d5f:	88 d1                	mov    cl,dl
c0020d61:	d3 e8                	shr    eax,cl
c0020d63:	09 f0                	or     eax,esi
c0020d65:	89 f9                	mov    ecx,edi
c0020d67:	d3 e5                	shl    ebp,cl
c0020d69:	89 da                	mov    edx,ebx
c0020d6b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020d6f:	89 d3                	mov    ebx,edx
c0020d71:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020d75:	89 c6                	mov    esi,eax
c0020d77:	89 d1                	mov    ecx,edx
c0020d79:	39 d3                	cmp    ebx,edx
c0020d7b:	72 27                	jb     c0020da4 <__moddi3+0x170>
c0020d7d:	74 21                	je     c0020da0 <__moddi3+0x16c>
c0020d7f:	29 f5                	sub    ebp,esi
c0020d81:	19 cb                	sbb    ebx,ecx
c0020d83:	89 de                	mov    esi,ebx
c0020d85:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020d89:	d3 e6                	shl    esi,cl
c0020d8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020d8f:	89 f9                	mov    ecx,edi
c0020d91:	d3 ed                	shr    ebp,cl
c0020d93:	09 ee                	or     esi,ebp
c0020d95:	89 f0                	mov    eax,esi
c0020d97:	d3 eb                	shr    ebx,cl
c0020d99:	89 da                	mov    edx,ebx
c0020d9b:	e9 e8 fe ff ff       	jmp    c0020c88 <__moddi3+0x54>
c0020da0:	39 c5                	cmp    ebp,eax
c0020da2:	73 db                	jae    c0020d7f <__moddi3+0x14b>
c0020da4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020da8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020dac:	89 d1                	mov    ecx,edx
c0020dae:	89 c6                	mov    esi,eax
c0020db0:	eb cd                	jmp    c0020d7f <__moddi3+0x14b>
c0020db2:	66 90                	xchg   ax,ax

c0020db4 <__udivdi3>:
c0020db4:	55                   	push   ebp
c0020db5:	57                   	push   edi
c0020db6:	56                   	push   esi
c0020db7:	53                   	push   ebx
c0020db8:	83 ec 1c             	sub    esp,0x1c
c0020dbb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020dbf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020dc3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020dc7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020dcb:	85 d2                	test   edx,edx
c0020dcd:	75 41                	jne    c0020e10 <__udivdi3+0x5c>
c0020dcf:	39 f7                	cmp    edi,esi
c0020dd1:	76 15                	jbe    c0020de8 <__udivdi3+0x34>
c0020dd3:	89 e8                	mov    eax,ebp
c0020dd5:	89 f2                	mov    edx,esi
c0020dd7:	f7 f7                	div    edi
c0020dd9:	31 db                	xor    ebx,ebx
c0020ddb:	89 da                	mov    edx,ebx
c0020ddd:	83 c4 1c             	add    esp,0x1c
c0020de0:	5b                   	pop    ebx
c0020de1:	5e                   	pop    esi
c0020de2:	5f                   	pop    edi
c0020de3:	5d                   	pop    ebp
c0020de4:	c3                   	ret    
c0020de5:	8d 76 00             	lea    esi,[esi+0x0]
c0020de8:	89 f9                	mov    ecx,edi
c0020dea:	85 ff                	test   edi,edi
c0020dec:	75 0b                	jne    c0020df9 <__udivdi3+0x45>
c0020dee:	b8 01 00 00 00       	mov    eax,0x1
c0020df3:	31 d2                	xor    edx,edx
c0020df5:	f7 f7                	div    edi
c0020df7:	89 c1                	mov    ecx,eax
c0020df9:	31 d2                	xor    edx,edx
c0020dfb:	89 f0                	mov    eax,esi
c0020dfd:	f7 f1                	div    ecx
c0020dff:	89 c3                	mov    ebx,eax
c0020e01:	89 e8                	mov    eax,ebp
c0020e03:	f7 f1                	div    ecx
c0020e05:	89 da                	mov    edx,ebx
c0020e07:	83 c4 1c             	add    esp,0x1c
c0020e0a:	5b                   	pop    ebx
c0020e0b:	5e                   	pop    esi
c0020e0c:	5f                   	pop    edi
c0020e0d:	5d                   	pop    ebp
c0020e0e:	c3                   	ret    
c0020e0f:	90                   	nop
c0020e10:	39 f2                	cmp    edx,esi
c0020e12:	77 1c                	ja     c0020e30 <__udivdi3+0x7c>
c0020e14:	0f bd da             	bsr    ebx,edx
c0020e17:	83 f3 1f             	xor    ebx,0x1f
c0020e1a:	75 24                	jne    c0020e40 <__udivdi3+0x8c>
c0020e1c:	39 f2                	cmp    edx,esi
c0020e1e:	72 08                	jb     c0020e28 <__udivdi3+0x74>
c0020e20:	39 ef                	cmp    edi,ebp
c0020e22:	0f 87 84 00 00 00    	ja     c0020eac <__udivdi3+0xf8>
c0020e28:	b8 01 00 00 00       	mov    eax,0x1
c0020e2d:	eb ac                	jmp    c0020ddb <__udivdi3+0x27>
c0020e2f:	90                   	nop
c0020e30:	31 db                	xor    ebx,ebx
c0020e32:	31 c0                	xor    eax,eax
c0020e34:	89 da                	mov    edx,ebx
c0020e36:	83 c4 1c             	add    esp,0x1c
c0020e39:	5b                   	pop    ebx
c0020e3a:	5e                   	pop    esi
c0020e3b:	5f                   	pop    edi
c0020e3c:	5d                   	pop    ebp
c0020e3d:	c3                   	ret    
c0020e3e:	66 90                	xchg   ax,ax
c0020e40:	b8 20 00 00 00       	mov    eax,0x20
c0020e45:	29 d8                	sub    eax,ebx
c0020e47:	88 d9                	mov    cl,bl
c0020e49:	d3 e2                	shl    edx,cl
c0020e4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020e4f:	89 fa                	mov    edx,edi
c0020e51:	88 c1                	mov    cl,al
c0020e53:	d3 ea                	shr    edx,cl
c0020e55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020e59:	09 d1                	or     ecx,edx
c0020e5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020e5f:	88 d9                	mov    cl,bl
c0020e61:	d3 e7                	shl    edi,cl
c0020e63:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020e67:	89 f7                	mov    edi,esi
c0020e69:	88 c1                	mov    cl,al
c0020e6b:	d3 ef                	shr    edi,cl
c0020e6d:	88 d9                	mov    cl,bl
c0020e6f:	d3 e6                	shl    esi,cl
c0020e71:	89 ea                	mov    edx,ebp
c0020e73:	88 c1                	mov    cl,al
c0020e75:	d3 ea                	shr    edx,cl
c0020e77:	09 d6                	or     esi,edx
c0020e79:	89 f0                	mov    eax,esi
c0020e7b:	89 fa                	mov    edx,edi
c0020e7d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020e81:	89 d7                	mov    edi,edx
c0020e83:	89 c6                	mov    esi,eax
c0020e85:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020e89:	39 d7                	cmp    edi,edx
c0020e8b:	72 13                	jb     c0020ea0 <__udivdi3+0xec>
c0020e8d:	74 09                	je     c0020e98 <__udivdi3+0xe4>
c0020e8f:	89 f0                	mov    eax,esi
c0020e91:	31 db                	xor    ebx,ebx
c0020e93:	e9 43 ff ff ff       	jmp    c0020ddb <__udivdi3+0x27>
c0020e98:	88 d9                	mov    cl,bl
c0020e9a:	d3 e5                	shl    ebp,cl
c0020e9c:	39 c5                	cmp    ebp,eax
c0020e9e:	73 ef                	jae    c0020e8f <__udivdi3+0xdb>
c0020ea0:	8d 46 ff             	lea    eax,[esi-0x1]
c0020ea3:	31 db                	xor    ebx,ebx
c0020ea5:	e9 31 ff ff ff       	jmp    c0020ddb <__udivdi3+0x27>
c0020eaa:	66 90                	xchg   ax,ax
c0020eac:	31 c0                	xor    eax,eax
c0020eae:	e9 28 ff ff ff       	jmp    c0020ddb <__udivdi3+0x27>
c0020eb3:	90                   	nop

c0020eb4 <__umoddi3>:
c0020eb4:	55                   	push   ebp
c0020eb5:	57                   	push   edi
c0020eb6:	56                   	push   esi
c0020eb7:	53                   	push   ebx
c0020eb8:	83 ec 1c             	sub    esp,0x1c
c0020ebb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020ebf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020ec3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020ec7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020ecb:	89 da                	mov    edx,ebx
c0020ecd:	85 c0                	test   eax,eax
c0020ecf:	75 37                	jne    c0020f08 <__umoddi3+0x54>
c0020ed1:	39 df                	cmp    edi,ebx
c0020ed3:	76 13                	jbe    c0020ee8 <__umoddi3+0x34>
c0020ed5:	89 f0                	mov    eax,esi
c0020ed7:	f7 f7                	div    edi
c0020ed9:	89 d0                	mov    eax,edx
c0020edb:	31 d2                	xor    edx,edx
c0020edd:	83 c4 1c             	add    esp,0x1c
c0020ee0:	5b                   	pop    ebx
c0020ee1:	5e                   	pop    esi
c0020ee2:	5f                   	pop    edi
c0020ee3:	5d                   	pop    ebp
c0020ee4:	c3                   	ret    
c0020ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0020ee8:	89 fd                	mov    ebp,edi
c0020eea:	85 ff                	test   edi,edi
c0020eec:	75 0b                	jne    c0020ef9 <__umoddi3+0x45>
c0020eee:	b8 01 00 00 00       	mov    eax,0x1
c0020ef3:	31 d2                	xor    edx,edx
c0020ef5:	f7 f7                	div    edi
c0020ef7:	89 c5                	mov    ebp,eax
c0020ef9:	89 d8                	mov    eax,ebx
c0020efb:	31 d2                	xor    edx,edx
c0020efd:	f7 f5                	div    ebp
c0020eff:	89 f0                	mov    eax,esi
c0020f01:	f7 f5                	div    ebp
c0020f03:	89 d0                	mov    eax,edx
c0020f05:	eb d4                	jmp    c0020edb <__umoddi3+0x27>
c0020f07:	90                   	nop
c0020f08:	89 f1                	mov    ecx,esi
c0020f0a:	39 d8                	cmp    eax,ebx
c0020f0c:	76 0a                	jbe    c0020f18 <__umoddi3+0x64>
c0020f0e:	89 f0                	mov    eax,esi
c0020f10:	83 c4 1c             	add    esp,0x1c
c0020f13:	5b                   	pop    ebx
c0020f14:	5e                   	pop    esi
c0020f15:	5f                   	pop    edi
c0020f16:	5d                   	pop    ebp
c0020f17:	c3                   	ret    
c0020f18:	0f bd e8             	bsr    ebp,eax
c0020f1b:	83 f5 1f             	xor    ebp,0x1f
c0020f1e:	75 1c                	jne    c0020f3c <__umoddi3+0x88>
c0020f20:	39 d8                	cmp    eax,ebx
c0020f22:	72 04                	jb     c0020f28 <__umoddi3+0x74>
c0020f24:	39 f7                	cmp    edi,esi
c0020f26:	77 08                	ja     c0020f30 <__umoddi3+0x7c>
c0020f28:	89 da                	mov    edx,ebx
c0020f2a:	29 fe                	sub    esi,edi
c0020f2c:	19 c2                	sbb    edx,eax
c0020f2e:	89 f1                	mov    ecx,esi
c0020f30:	89 c8                	mov    eax,ecx
c0020f32:	83 c4 1c             	add    esp,0x1c
c0020f35:	5b                   	pop    ebx
c0020f36:	5e                   	pop    esi
c0020f37:	5f                   	pop    edi
c0020f38:	5d                   	pop    ebp
c0020f39:	c3                   	ret    
c0020f3a:	66 90                	xchg   ax,ax
c0020f3c:	ba 20 00 00 00       	mov    edx,0x20
c0020f41:	29 ea                	sub    edx,ebp
c0020f43:	89 e9                	mov    ecx,ebp
c0020f45:	d3 e0                	shl    eax,cl
c0020f47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f4b:	89 f8                	mov    eax,edi
c0020f4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020f51:	88 d1                	mov    cl,dl
c0020f53:	d3 e8                	shr    eax,cl
c0020f55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020f59:	09 c1                	or     ecx,eax
c0020f5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020f5f:	89 e9                	mov    ecx,ebp
c0020f61:	d3 e7                	shl    edi,cl
c0020f63:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020f67:	89 d8                	mov    eax,ebx
c0020f69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020f6d:	88 d1                	mov    cl,dl
c0020f6f:	d3 e8                	shr    eax,cl
c0020f71:	89 c7                	mov    edi,eax
c0020f73:	89 e9                	mov    ecx,ebp
c0020f75:	d3 e3                	shl    ebx,cl
c0020f77:	89 f0                	mov    eax,esi
c0020f79:	88 d1                	mov    cl,dl
c0020f7b:	d3 e8                	shr    eax,cl
c0020f7d:	09 d8                	or     eax,ebx
c0020f7f:	89 e9                	mov    ecx,ebp
c0020f81:	d3 e6                	shl    esi,cl
c0020f83:	89 f3                	mov    ebx,esi
c0020f85:	89 fa                	mov    edx,edi
c0020f87:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020f8b:	89 d1                	mov    ecx,edx
c0020f8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020f91:	89 c6                	mov    esi,eax
c0020f93:	89 d7                	mov    edi,edx
c0020f95:	39 d1                	cmp    ecx,edx
c0020f97:	72 27                	jb     c0020fc0 <__umoddi3+0x10c>
c0020f99:	74 21                	je     c0020fbc <__umoddi3+0x108>
c0020f9b:	89 ca                	mov    edx,ecx
c0020f9d:	29 f3                	sub    ebx,esi
c0020f9f:	19 fa                	sbb    edx,edi
c0020fa1:	89 d0                	mov    eax,edx
c0020fa3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0020fa7:	d3 e0                	shl    eax,cl
c0020fa9:	89 e9                	mov    ecx,ebp
c0020fab:	d3 eb                	shr    ebx,cl
c0020fad:	09 d8                	or     eax,ebx
c0020faf:	d3 ea                	shr    edx,cl
c0020fb1:	83 c4 1c             	add    esp,0x1c
c0020fb4:	5b                   	pop    ebx
c0020fb5:	5e                   	pop    esi
c0020fb6:	5f                   	pop    edi
c0020fb7:	5d                   	pop    ebp
c0020fb8:	c3                   	ret    
c0020fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0020fbc:	39 c3                	cmp    ebx,eax
c0020fbe:	73 db                	jae    c0020f9b <__umoddi3+0xe7>
c0020fc0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020fc4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0020fc8:	89 d7                	mov    edi,edx
c0020fca:	89 c6                	mov    esi,eax
c0020fcc:	eb cd                	jmp    c0020f9b <__umoddi3+0xe7>

Disassembly of section .init:

c0020fce <_init>:
c0020fce:	55                   	push   ebp
c0020fcf:	89 e5                	mov    ebp,esp
c0020fd1:	e8 1e f1 fd ff       	call   c00000f4 <frame_dummy>
c0020fd6:	e8 e5 fa ff ff       	call   c0020ac0 <__do_global_ctors_aux>
c0020fdb:	5d                   	pop    ebp
c0020fdc:	c3                   	ret    

Disassembly of section .fini:

c0020fdd <_fini>:
c0020fdd:	55                   	push   ebp
c0020fde:	89 e5                	mov    ebp,esp
c0020fe0:	e8 9f f0 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0020fe5:	5d                   	pop    ebp
c0020fe6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0020fe8 <DriverlessDevice::~DriverlessDevice()>:
c0020fe8:	ba a0 29 02 c0       	mov    edx,0xc00229a0
c0020fed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ff1:	89 10                	mov    DWORD PTR [eax],edx
c0020ff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ff7:	50                   	push   eax
c0020ff8:	e8 b5 81 fe ff       	call   c00091b2 <Device::~Device()>
c0020ffd:	83 c4 04             	add    esp,0x4
c0021000:	90                   	nop
c0021001:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021002 <DriverlessDevice::~DriverlessDevice()>:
c0021002:	83 ec 0c             	sub    esp,0xc
c0021005:	83 ec 0c             	sub    esp,0xc
c0021008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002100c:	e8 d7 ff ff ff       	call   c0020fe8 <DriverlessDevice::~DriverlessDevice()>
c0021011:	83 c4 10             	add    esp,0x10
c0021014:	83 ec 08             	sub    esp,0x8
c0021017:	68 58 01 00 00       	push   0x158
c002101c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021020:	e8 82 bb fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c0021025:	83 c4 10             	add    esp,0x10
c0021028:	83 c4 0c             	add    esp,0xc
c002102b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002102c <LinkedList<Device>::addElement(Device*)>:
c002102c:	83 ec 0c             	sub    esp,0xc
c002102f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021034:	75 10                	jne    c0021046 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021036:	83 ec 0c             	sub    esp,0xc
c0021039:	68 34 29 02 c0       	push   0xc0022934
c002103e:	e8 23 e8 fe ff       	call   c000f866 <KePanic(char const*)>
c0021043:	83 c4 10             	add    esp,0x10
c0021046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002104a:	8b 00                	mov    eax,DWORD PTR [eax]
c002104c:	85 c0                	test   eax,eax
c002104e:	74 3a                	je     c002108a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021057:	85 c0                	test   eax,eax
c0021059:	74 2f                	je     c002108a <LinkedList<Device>::addElement(Device*)+0x5e>
c002105b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002105f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021062:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021066:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002106c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021070:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021074:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002107b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002107e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021088:	eb 68                	jmp    c00210f2 <LinkedList<Device>::addElement(Device*)+0xc6>
c002108a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002108e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021090:	85 c0                	test   eax,eax
c0021092:	75 4e                	jne    c00210e2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002109b:	85 c0                	test   eax,eax
c002109d:	75 43                	jne    c00210e2 <LinkedList<Device>::addElement(Device*)+0xb6>
c002109f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210a7:	89 10                	mov    DWORD PTR [eax],edx
c00210a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00210b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00210bb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00210c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00210cc:	85 c0                	test   eax,eax
c00210ce:	74 22                	je     c00210f2 <LinkedList<Device>::addElement(Device*)+0xc6>
c00210d0:	83 ec 0c             	sub    esp,0xc
c00210d3:	68 56 29 02 c0       	push   0xc0022956
c00210d8:	e8 89 e7 fe ff       	call   c000f866 <KePanic(char const*)>
c00210dd:	83 c4 10             	add    esp,0x10
c00210e0:	eb 10                	jmp    c00210f2 <LinkedList<Device>::addElement(Device*)+0xc6>
c00210e2:	83 ec 0c             	sub    esp,0xc
c00210e5:	68 60 29 02 c0       	push   0xc0022960
c00210ea:	e8 77 e7 fe ff       	call   c000f866 <KePanic(char const*)>
c00210ef:	83 c4 10             	add    esp,0x10
c00210f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210f6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00210f9:	8d 50 01             	lea    edx,[eax+0x1]
c00210fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021100:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021103:	90                   	nop
c0021104:	83 c4 0c             	add    esp,0xc
c0021107:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021108 <LinkedList<Device>::LinkedList()>:
c0021108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002110c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021116:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002111d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021121:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002112c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021136:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002113d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021141:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021148:	90                   	nop
c0021149:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002114c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002114c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021150:	8b 00                	mov    eax,DWORD PTR [eax]
c0021152:	85 c0                	test   eax,eax
c0021154:	75 0e                	jne    c0021164 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002115a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002115d:	85 c0                	test   eax,eax
c002115f:	75 03                	jne    c0021164 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021161:	b0 01                	mov    al,0x1
c0021163:	c3                   	ret    
c0021164:	b0 00                	mov    al,0x0
c0021166:	90                   	nop
c0021167:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021168 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002116c:	8b 00                	mov    eax,DWORD PTR [eax]
c002116e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021170 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021170:	83 ec 0c             	sub    esp,0xc
c0021173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021177:	8b 00                	mov    eax,DWORD PTR [eax]
c0021179:	85 c0                	test   eax,eax
c002117b:	75 17                	jne    c0021194 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002117d:	83 ec 0c             	sub    esp,0xc
c0021180:	68 d0 2b 02 c0       	push   0xc0022bd0
c0021185:	e8 dc e6 fe ff       	call   c000f866 <KePanic(char const*)>
c002118a:	83 c4 10             	add    esp,0x10
c002118d:	e9 96 00 00 00       	jmp    c0021228 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021192:	66 90                	xchg   ax,ax
c0021194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021198:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002119b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002119e:	85 c0                	test   eax,eax
c00211a0:	0f 95 c0             	setne  al
c00211a3:	0f b6 c0             	movzx  eax,al
c00211a6:	85 c0                	test   eax,eax
c00211a8:	74 12                	je     c00211bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c00211aa:	83 ec 0c             	sub    esp,0xc
c00211ad:	68 1b 2c 02 c0       	push   0xc0022c1b
c00211b2:	e8 af e6 fe ff       	call   c000f866 <KePanic(char const*)>
c00211b7:	83 c4 10             	add    esp,0x10
c00211ba:	66 90                	xchg   ax,ax
c00211bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00211c2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00211c5:	85 c0                	test   eax,eax
c00211c7:	0f 94 c0             	sete   al
c00211ca:	0f b6 c0             	movzx  eax,al
c00211cd:	85 c0                	test   eax,eax
c00211cf:	74 33                	je     c0021204 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c00211d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00211ed:	83 f8 01             	cmp    eax,0x1
c00211f0:	74 22                	je     c0021214 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00211f2:	83 ec 0c             	sub    esp,0xc
c00211f5:	68 f4 2b 02 c0       	push   0xc0022bf4
c00211fa:	e8 67 e6 fe ff       	call   c000f866 <KePanic(char const*)>
c00211ff:	83 c4 10             	add    esp,0x10
c0021202:	eb 10                	jmp    c0021214 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021208:	8b 00                	mov    eax,DWORD PTR [eax]
c002120a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002120d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021211:	89 10                	mov    DWORD PTR [eax],edx
c0021213:	90                   	nop
c0021214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021218:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002121b:	8d 50 ff             	lea    edx,[eax-0x1]
c002121e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021222:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021225:	8d 76 00             	lea    esi,[esi+0x0]
c0021228:	83 c4 0c             	add    esp,0xc
c002122b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002122c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002122c:	83 ec 0c             	sub    esp,0xc
c002122f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021234:	75 12                	jne    c0021248 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021236:	83 ec 0c             	sub    esp,0xc
c0021239:	68 34 29 02 c0       	push   0xc0022934
c002123e:	e8 23 e6 fe ff       	call   c000f866 <KePanic(char const*)>
c0021243:	83 c4 10             	add    esp,0x10
c0021246:	66 90                	xchg   ax,ax
c0021248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002124c:	8b 00                	mov    eax,DWORD PTR [eax]
c002124e:	85 c0                	test   eax,eax
c0021250:	74 36                	je     c0021288 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021259:	85 c0                	test   eax,eax
c002125b:	74 2b                	je     c0021288 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002125d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021261:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021264:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021268:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002126b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002126f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021273:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002127a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002127d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021284:	eb 6a                	jmp    c00212f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021286:	66 90                	xchg   ax,ax
c0021288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002128c:	8b 00                	mov    eax,DWORD PTR [eax]
c002128e:	85 c0                	test   eax,eax
c0021290:	75 4e                	jne    c00212e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021296:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021299:	85 c0                	test   eax,eax
c002129b:	75 43                	jne    c00212e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002129d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212a5:	89 10                	mov    DWORD PTR [eax],edx
c00212a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00212b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212b9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00212c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212c7:	85 c0                	test   eax,eax
c00212c9:	74 25                	je     c00212f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00212cb:	83 ec 0c             	sub    esp,0xc
c00212ce:	68 56 29 02 c0       	push   0xc0022956
c00212d3:	e8 8e e5 fe ff       	call   c000f866 <KePanic(char const*)>
c00212d8:	83 c4 10             	add    esp,0x10
c00212db:	eb 13                	jmp    c00212f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00212dd:	8d 76 00             	lea    esi,[esi+0x0]
c00212e0:	83 ec 0c             	sub    esp,0xc
c00212e3:	68 60 29 02 c0       	push   0xc0022960
c00212e8:	e8 79 e5 fe ff       	call   c000f866 <KePanic(char const*)>
c00212ed:	83 c4 10             	add    esp,0x10
c00212f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212f7:	8d 50 01             	lea    edx,[eax+0x1]
c00212fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021301:	90                   	nop
c0021302:	83 c4 0c             	add    esp,0xc
c0021305:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021308 <ACPI::~ACPI()>:
c0021308:	83 ec 0c             	sub    esp,0xc
c002130b:	ba cc 2f 02 c0       	mov    edx,0xc0022fcc
c0021310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021314:	89 10                	mov    DWORD PTR [eax],edx
c0021316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002131a:	83 ec 0c             	sub    esp,0xc
c002131d:	50                   	push   eax
c002131e:	e8 8f 7e fe ff       	call   c00091b2 <Device::~Device()>
c0021323:	83 c4 10             	add    esp,0x10
c0021326:	90                   	nop
c0021327:	83 c4 0c             	add    esp,0xc
c002132a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002132c <ACPI::~ACPI()>:
c002132c:	83 ec 0c             	sub    esp,0xc
c002132f:	83 ec 0c             	sub    esp,0xc
c0021332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021336:	e8 cd ff ff ff       	call   c0021308 <ACPI::~ACPI()>
c002133b:	83 c4 10             	add    esp,0x10
c002133e:	83 ec 08             	sub    esp,0x8
c0021341:	68 64 12 00 00       	push   0x1264
c0021346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002134a:	e8 58 b8 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c002134f:	83 c4 10             	add    esp,0x10
c0021352:	83 c4 0c             	add    esp,0xc
c0021355:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021358 <LinkedList<Device>::~LinkedList()>:
c0021358:	90                   	nop
c0021359:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002135c <LinkedList<Device>::isEmpty()>:
c002135c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021360:	8b 00                	mov    eax,DWORD PTR [eax]
c0021362:	85 c0                	test   eax,eax
c0021364:	75 0e                	jne    c0021374 <LinkedList<Device>::isEmpty()+0x18>
c0021366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002136a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002136d:	85 c0                	test   eax,eax
c002136f:	75 03                	jne    c0021374 <LinkedList<Device>::isEmpty()+0x18>
c0021371:	b0 01                	mov    al,0x1
c0021373:	c3                   	ret    
c0021374:	b0 00                	mov    al,0x0
c0021376:	90                   	nop
c0021377:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021378 <LinkedList<Device>::getFirstElement()>:
c0021378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002137c:	8b 00                	mov    eax,DWORD PTR [eax]
c002137e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021380 <LinkedList<Device>::removeFirst()>:
c0021380:	83 ec 0c             	sub    esp,0xc
c0021383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021387:	8b 00                	mov    eax,DWORD PTR [eax]
c0021389:	85 c0                	test   eax,eax
c002138b:	75 17                	jne    c00213a4 <LinkedList<Device>::removeFirst()+0x24>
c002138d:	83 ec 0c             	sub    esp,0xc
c0021390:	68 d0 2b 02 c0       	push   0xc0022bd0
c0021395:	e8 cc e4 fe ff       	call   c000f866 <KePanic(char const*)>
c002139a:	83 c4 10             	add    esp,0x10
c002139d:	e9 92 00 00 00       	jmp    c0021434 <LinkedList<Device>::removeFirst()+0xb4>
c00213a2:	66 90                	xchg   ax,ax
c00213a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213ab:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00213b1:	85 c0                	test   eax,eax
c00213b3:	74 13                	je     c00213c8 <LinkedList<Device>::removeFirst()+0x48>
c00213b5:	83 ec 0c             	sub    esp,0xc
c00213b8:	68 1b 2c 02 c0       	push   0xc0022c1b
c00213bd:	e8 a4 e4 fe ff       	call   c000f866 <KePanic(char const*)>
c00213c2:	83 c4 10             	add    esp,0x10
c00213c5:	8d 76 00             	lea    esi,[esi+0x0]
c00213c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00213ce:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00213d4:	85 c0                	test   eax,eax
c00213d6:	75 34                	jne    c002140c <LinkedList<Device>::removeFirst()+0x8c>
c00213d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00213e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213f4:	83 f8 01             	cmp    eax,0x1
c00213f7:	74 27                	je     c0021420 <LinkedList<Device>::removeFirst()+0xa0>
c00213f9:	83 ec 0c             	sub    esp,0xc
c00213fc:	68 f4 2b 02 c0       	push   0xc0022bf4
c0021401:	e8 60 e4 fe ff       	call   c000f866 <KePanic(char const*)>
c0021406:	83 c4 10             	add    esp,0x10
c0021409:	eb 15                	jmp    c0021420 <LinkedList<Device>::removeFirst()+0xa0>
c002140b:	90                   	nop
c002140c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021410:	8b 00                	mov    eax,DWORD PTR [eax]
c0021412:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002141c:	89 10                	mov    DWORD PTR [eax],edx
c002141e:	66 90                	xchg   ax,ax
c0021420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021424:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021427:	8d 50 ff             	lea    edx,[eax-0x1]
c002142a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002142e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021431:	8d 76 00             	lea    esi,[esi+0x0]
c0021434:	83 c4 0c             	add    esp,0xc
c0021437:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021438 <Computer::~Computer()>:
c0021438:	83 ec 0c             	sub    esp,0xc
c002143b:	ba 7c 32 02 c0       	mov    edx,0xc002327c
c0021440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021444:	89 10                	mov    DWORD PTR [eax],edx
c0021446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002144a:	83 ec 0c             	sub    esp,0xc
c002144d:	50                   	push   eax
c002144e:	e8 5f 7d fe ff       	call   c00091b2 <Device::~Device()>
c0021453:	83 c4 10             	add    esp,0x10
c0021456:	90                   	nop
c0021457:	83 c4 0c             	add    esp,0xc
c002145a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002145c <Computer::~Computer()>:
c002145c:	83 ec 0c             	sub    esp,0xc
c002145f:	83 ec 0c             	sub    esp,0xc
c0021462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021466:	e8 cd ff ff ff       	call   c0021438 <Computer::~Computer()>
c002146b:	83 c4 10             	add    esp,0x10
c002146e:	83 ec 08             	sub    esp,0x8
c0021471:	68 6c 01 00 00       	push   0x16c
c0021476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002147a:	e8 28 b7 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c002147f:	83 c4 10             	add    esp,0x10
c0021482:	83 c4 0c             	add    esp,0xc
c0021485:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021486 <idleCommon()>:
c0021486:	83 ec 0c             	sub    esp,0xc
c0021489:	fa                   	cli    
c002148a:	ff 05 30 da 02 c0    	inc    DWORD PTR ds:0xc002da30
c0021490:	e8 ef 4f ff ff       	call   c0016484 <schedule()>
c0021495:	f0 ff 0d 30 da 02 c0 	lock dec DWORD PTR ds:0xc002da30
c002149c:	83 3d 30 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da30,0x0
c00214a3:	75 01                	jne    c00214a6 <idleCommon()+0x20>
c00214a5:	fb                   	sti    
c00214a6:	83 c4 0c             	add    esp,0xc
c00214a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00214aa <LinkedList<UnixFile>::~LinkedList()>:
c00214aa:	90                   	nop
c00214ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00214ac <LinkedList<UnixFile>::LinkedList()>:
c00214ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00214cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00214ec:	90                   	nop
c00214ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00214ee <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00214ee:	83 ec 0c             	sub    esp,0xc
c00214f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00214f6:	75 10                	jne    c0021508 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00214f8:	83 ec 0c             	sub    esp,0xc
c00214fb:	68 34 29 02 c0       	push   0xc0022934
c0021500:	e8 61 e3 fe ff       	call   c000f866 <KePanic(char const*)>
c0021505:	83 c4 10             	add    esp,0x10
c0021508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002150c:	8b 00                	mov    eax,DWORD PTR [eax]
c002150e:	85 c0                	test   eax,eax
c0021510:	74 34                	je     c0021546 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021516:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021519:	85 c0                	test   eax,eax
c002151b:	74 29                	je     c0021546 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002151d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021521:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021524:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021528:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002152b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002152f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021533:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002153a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002153d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021544:	eb 65                	jmp    c00215ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002154a:	8b 00                	mov    eax,DWORD PTR [eax]
c002154c:	85 c0                	test   eax,eax
c002154e:	75 4b                	jne    c002159b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021557:	85 c0                	test   eax,eax
c0021559:	75 40                	jne    c002159b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002155b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002155f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021563:	89 10                	mov    DWORD PTR [eax],edx
c0021565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021569:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002156d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021577:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002157e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021582:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021585:	85 c0                	test   eax,eax
c0021587:	74 22                	je     c00215ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021589:	83 ec 0c             	sub    esp,0xc
c002158c:	68 56 29 02 c0       	push   0xc0022956
c0021591:	e8 d0 e2 fe ff       	call   c000f866 <KePanic(char const*)>
c0021596:	83 c4 10             	add    esp,0x10
c0021599:	eb 10                	jmp    c00215ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002159b:	83 ec 0c             	sub    esp,0xc
c002159e:	68 60 29 02 c0       	push   0xc0022960
c00215a3:	e8 be e2 fe ff       	call   c000f866 <KePanic(char const*)>
c00215a8:	83 c4 10             	add    esp,0x10
c00215ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00215b2:	8d 50 01             	lea    edx,[eax+0x1]
c00215b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215b9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00215bc:	90                   	nop
c00215bd:	83 c4 0c             	add    esp,0xc
c00215c0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00215c2 <LinkedList<UnixFile>::getFirstElement()>:
c00215c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00215c8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00215ca <LinkedList<UnixFile>::removeFirst()>:
c00215ca:	83 ec 0c             	sub    esp,0xc
c00215cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00215d3:	85 c0                	test   eax,eax
c00215d5:	75 12                	jne    c00215e9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00215d7:	83 ec 0c             	sub    esp,0xc
c00215da:	68 d0 2b 02 c0       	push   0xc0022bd0
c00215df:	e8 82 e2 fe ff       	call   c000f866 <KePanic(char const*)>
c00215e4:	83 c4 10             	add    esp,0x10
c00215e7:	eb 7e                	jmp    c0021667 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00215e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00215f3:	85 c0                	test   eax,eax
c00215f5:	74 10                	je     c0021607 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00215f7:	83 ec 0c             	sub    esp,0xc
c00215fa:	68 1b 2c 02 c0       	push   0xc0022c1b
c00215ff:	e8 62 e2 fe ff       	call   c000f866 <KePanic(char const*)>
c0021604:	83 c4 10             	add    esp,0x10
c0021607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002160b:	8b 00                	mov    eax,DWORD PTR [eax]
c002160d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021610:	85 c0                	test   eax,eax
c0021612:	75 33                	jne    c0021647 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021618:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002161e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021622:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002162d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021630:	83 f8 01             	cmp    eax,0x1
c0021633:	74 21                	je     c0021656 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021635:	83 ec 0c             	sub    esp,0xc
c0021638:	68 f4 2b 02 c0       	push   0xc0022bf4
c002163d:	e8 24 e2 fe ff       	call   c000f866 <KePanic(char const*)>
c0021642:	83 c4 10             	add    esp,0x10
c0021645:	eb 0f                	jmp    c0021656 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002164b:	8b 00                	mov    eax,DWORD PTR [eax]
c002164d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0021650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021654:	89 10                	mov    DWORD PTR [eax],edx
c0021656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002165a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002165d:	8d 50 ff             	lea    edx,[eax-0x1]
c0021660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021664:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021667:	83 c4 0c             	add    esp,0xc
c002166a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002166c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002166c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021670:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021673:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021674 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021674:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021678:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002167b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002167c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002167c:	90                   	nop
c002167d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021680 <ThreadControlBlock::ThreadControlBlock()>:
c0021680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021684:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002168b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002168f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002169a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00216a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216a5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00216ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216b0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00216b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216bb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00216bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216c3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00216c7:	90                   	nop
c00216c8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00216cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00216cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00216d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00216e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00216ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00216f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021701:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021705:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002170c:	90                   	nop
c002170d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002170e <CPU::~CPU()>:
c002170e:	83 ec 0c             	sub    esp,0xc
c0021711:	ba 4c 48 02 c0       	mov    edx,0xc002484c
c0021716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002171a:	89 10                	mov    DWORD PTR [eax],edx
c002171c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021720:	83 ec 0c             	sub    esp,0xc
c0021723:	50                   	push   eax
c0021724:	e8 89 7a fe ff       	call   c00091b2 <Device::~Device()>
c0021729:	83 c4 10             	add    esp,0x10
c002172c:	90                   	nop
c002172d:	83 c4 0c             	add    esp,0xc
c0021730:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021732 <CPU::~CPU()>:
c0021732:	83 ec 0c             	sub    esp,0xc
c0021735:	83 ec 0c             	sub    esp,0xc
c0021738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002173c:	e8 cd ff ff ff       	call   c002170e <CPU::~CPU()>
c0021741:	83 c4 10             	add    esp,0x10
c0021744:	83 ec 08             	sub    esp,0x8
c0021747:	68 78 11 00 00       	push   0x1178
c002174c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021750:	e8 52 b4 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c0021755:	83 c4 10             	add    esp,0x10
c0021758:	83 c4 0c             	add    esp,0xc
c002175b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002175c <PCI::~PCI()>:
c002175c:	83 ec 0c             	sub    esp,0xc
c002175f:	ba b0 4d 02 c0       	mov    edx,0xc0024db0
c0021764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021768:	89 10                	mov    DWORD PTR [eax],edx
c002176a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002176e:	83 ec 0c             	sub    esp,0xc
c0021771:	50                   	push   eax
c0021772:	e8 cd 71 fe ff       	call   c0008944 <Bus::~Bus()>
c0021777:	83 c4 10             	add    esp,0x10
c002177a:	90                   	nop
c002177b:	83 c4 0c             	add    esp,0xc
c002177e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0021780 <PCI::~PCI()>:
c0021780:	83 ec 0c             	sub    esp,0xc
c0021783:	83 ec 0c             	sub    esp,0xc
c0021786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002178a:	e8 cd ff ff ff       	call   c002175c <PCI::~PCI()>
c002178f:	83 c4 10             	add    esp,0x10
c0021792:	83 ec 08             	sub    esp,0x8
c0021795:	68 5c 01 00 00       	push   0x15c
c002179a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002179e:	e8 04 b4 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c00217a3:	83 c4 10             	add    esp,0x10
c00217a6:	83 c4 0c             	add    esp,0xc
c00217a9:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00217aa <IDE::~IDE()>:
c00217aa:	83 ec 0c             	sub    esp,0xc
c00217ad:	ba 00 4f 02 c0       	mov    edx,0xc0024f00
c00217b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217b6:	89 10                	mov    DWORD PTR [eax],edx
c00217b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217bc:	83 ec 0c             	sub    esp,0xc
c00217bf:	50                   	push   eax
c00217c0:	e8 7b 7e fe ff       	call   c0009640 <HardDiskController::~HardDiskController()>
c00217c5:	83 c4 10             	add    esp,0x10
c00217c8:	90                   	nop
c00217c9:	83 c4 0c             	add    esp,0xc
c00217cc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00217ce <IDE::~IDE()>:
c00217ce:	83 ec 0c             	sub    esp,0xc
c00217d1:	83 ec 0c             	sub    esp,0xc
c00217d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217d8:	e8 cd ff ff ff       	call   c00217aa <IDE::~IDE()>
c00217dd:	83 c4 10             	add    esp,0x10
c00217e0:	83 ec 08             	sub    esp,0x8
c00217e3:	68 70 02 00 00       	push   0x270
c00217e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217ec:	e8 b6 b3 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c00217f1:	83 c4 10             	add    esp,0x10
c00217f4:	83 c4 0c             	add    esp,0xc
c00217f7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00217f8 <SATABus::~SATABus()>:
c00217f8:	83 ec 0c             	sub    esp,0xc
c00217fb:	ba 50 4f 02 c0       	mov    edx,0xc0024f50
c0021800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021804:	89 10                	mov    DWORD PTR [eax],edx
c0021806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002180a:	83 ec 0c             	sub    esp,0xc
c002180d:	50                   	push   eax
c002180e:	e8 2d 7e fe ff       	call   c0009640 <HardDiskController::~HardDiskController()>
c0021813:	83 c4 10             	add    esp,0x10
c0021816:	90                   	nop
c0021817:	83 c4 0c             	add    esp,0xc
c002181a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002181c <SATABus::~SATABus()>:
c002181c:	83 ec 0c             	sub    esp,0xc
c002181f:	83 ec 0c             	sub    esp,0xc
c0021822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021826:	e8 cd ff ff ff       	call   c00217f8 <SATABus::~SATABus()>
c002182b:	83 c4 10             	add    esp,0x10
c002182e:	83 ec 08             	sub    esp,0x8
c0021831:	68 64 01 00 00       	push   0x164
c0021836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002183a:	e8 68 b3 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c002183f:	83 c4 10             	add    esp,0x10
c0021842:	83 c4 0c             	add    esp,0xc
c0021845:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021846 <ATA::~ATA()>:
c0021846:	83 ec 0c             	sub    esp,0xc
c0021849:	ba 38 50 02 c0       	mov    edx,0xc0025038
c002184e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021852:	89 10                	mov    DWORD PTR [eax],edx
c0021854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021858:	83 ec 0c             	sub    esp,0xc
c002185b:	50                   	push   eax
c002185c:	e8 c1 7e fe ff       	call   c0009722 <PhysicalDisk::~PhysicalDisk()>
c0021861:	83 c4 10             	add    esp,0x10
c0021864:	90                   	nop
c0021865:	83 c4 0c             	add    esp,0xc
c0021868:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002186a <ATA::~ATA()>:
c002186a:	83 ec 0c             	sub    esp,0xc
c002186d:	83 ec 0c             	sub    esp,0xc
c0021870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021874:	e8 cd ff ff ff       	call   c0021846 <ATA::~ATA()>
c0021879:	83 c4 10             	add    esp,0x10
c002187c:	83 ec 08             	sub    esp,0x8
c002187f:	68 8c 01 00 00       	push   0x18c
c0021884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021888:	e8 1a b3 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c002188d:	83 c4 10             	add    esp,0x10
c0021890:	83 c4 0c             	add    esp,0xc
c0021893:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021894 <ATAPI::~ATAPI()>:
c0021894:	83 ec 0c             	sub    esp,0xc
c0021897:	ba 80 50 02 c0       	mov    edx,0xc0025080
c002189c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a0:	89 10                	mov    DWORD PTR [eax],edx
c00218a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a6:	83 ec 0c             	sub    esp,0xc
c00218a9:	50                   	push   eax
c00218aa:	e8 73 7e fe ff       	call   c0009722 <PhysicalDisk::~PhysicalDisk()>
c00218af:	83 c4 10             	add    esp,0x10
c00218b2:	90                   	nop
c00218b3:	83 c4 0c             	add    esp,0xc
c00218b6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00218b8 <ATAPI::~ATAPI()>:
c00218b8:	83 ec 0c             	sub    esp,0xc
c00218bb:	83 ec 0c             	sub    esp,0xc
c00218be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218c2:	e8 cd ff ff ff       	call   c0021894 <ATAPI::~ATAPI()>
c00218c7:	83 c4 10             	add    esp,0x10
c00218ca:	83 ec 08             	sub    esp,0x8
c00218cd:	68 84 01 00 00       	push   0x184
c00218d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218d6:	e8 cc b2 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c00218db:	83 c4 10             	add    esp,0x10
c00218de:	83 c4 0c             	add    esp,0xc
c00218e1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00218e2 <SATA::~SATA()>:
c00218e2:	83 ec 0c             	sub    esp,0xc
c00218e5:	ba 40 51 02 c0       	mov    edx,0xc0025140
c00218ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218ee:	89 10                	mov    DWORD PTR [eax],edx
c00218f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f4:	83 ec 0c             	sub    esp,0xc
c00218f7:	50                   	push   eax
c00218f8:	e8 25 7e fe ff       	call   c0009722 <PhysicalDisk::~PhysicalDisk()>
c00218fd:	83 c4 10             	add    esp,0x10
c0021900:	90                   	nop
c0021901:	83 c4 0c             	add    esp,0xc
c0021904:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021906 <SATA::~SATA()>:
c0021906:	83 ec 0c             	sub    esp,0xc
c0021909:	83 ec 0c             	sub    esp,0xc
c002190c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021910:	e8 cd ff ff ff       	call   c00218e2 <SATA::~SATA()>
c0021915:	83 c4 10             	add    esp,0x10
c0021918:	83 ec 08             	sub    esp,0x8
c002191b:	68 7c 01 00 00       	push   0x17c
c0021920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021924:	e8 7e b2 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c0021929:	83 c4 10             	add    esp,0x10
c002192c:	83 c4 0c             	add    esp,0xc
c002192f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021930 <SATAPI::~SATAPI()>:
c0021930:	83 ec 0c             	sub    esp,0xc
c0021933:	ba 64 52 02 c0       	mov    edx,0xc0025264
c0021938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002193c:	89 10                	mov    DWORD PTR [eax],edx
c002193e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021942:	83 ec 0c             	sub    esp,0xc
c0021945:	50                   	push   eax
c0021946:	e8 d7 7d fe ff       	call   c0009722 <PhysicalDisk::~PhysicalDisk()>
c002194b:	83 c4 10             	add    esp,0x10
c002194e:	90                   	nop
c002194f:	83 c4 0c             	add    esp,0xc
c0021952:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021954 <SATAPI::~SATAPI()>:
c0021954:	83 ec 0c             	sub    esp,0xc
c0021957:	83 ec 0c             	sub    esp,0xc
c002195a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002195e:	e8 cd ff ff ff       	call   c0021930 <SATAPI::~SATAPI()>
c0021963:	83 c4 10             	add    esp,0x10
c0021966:	83 ec 08             	sub    esp,0x8
c0021969:	68 84 01 00 00       	push   0x184
c002196e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021972:	e8 30 b2 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c0021977:	83 c4 10             	add    esp,0x10
c002197a:	83 c4 0c             	add    esp,0xc
c002197d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002197e <IOAPIC::~IOAPIC()>:
c002197e:	83 ec 0c             	sub    esp,0xc
c0021981:	ba c4 52 02 c0       	mov    edx,0xc00252c4
c0021986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002198a:	89 10                	mov    DWORD PTR [eax],edx
c002198c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021990:	83 ec 0c             	sub    esp,0xc
c0021993:	50                   	push   eax
c0021994:	e8 19 78 fe ff       	call   c00091b2 <Device::~Device()>
c0021999:	83 c4 10             	add    esp,0x10
c002199c:	90                   	nop
c002199d:	83 c4 0c             	add    esp,0xc
c00219a0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00219a2 <IOAPIC::~IOAPIC()>:
c00219a2:	83 ec 0c             	sub    esp,0xc
c00219a5:	83 ec 0c             	sub    esp,0xc
c00219a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219ac:	e8 cd ff ff ff       	call   c002197e <IOAPIC::~IOAPIC()>
c00219b1:	83 c4 10             	add    esp,0x10
c00219b4:	83 ec 08             	sub    esp,0x8
c00219b7:	68 68 01 00 00       	push   0x168
c00219bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219c0:	e8 e2 b1 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c00219c5:	83 c4 10             	add    esp,0x10
c00219c8:	83 c4 0c             	add    esp,0xc
c00219cb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00219cc <APICTimer::~APICTimer()>:
c00219cc:	83 ec 0c             	sub    esp,0xc
c00219cf:	ba 0c 53 02 c0       	mov    edx,0xc002530c
c00219d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d8:	89 10                	mov    DWORD PTR [eax],edx
c00219da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219de:	83 ec 0c             	sub    esp,0xc
c00219e1:	50                   	push   eax
c00219e2:	e8 09 8f fe ff       	call   c000a8f0 <Timer::~Timer()>
c00219e7:	83 c4 10             	add    esp,0x10
c00219ea:	90                   	nop
c00219eb:	83 c4 0c             	add    esp,0xc
c00219ee:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00219f0 <APICTimer::~APICTimer()>:
c00219f0:	83 ec 0c             	sub    esp,0xc
c00219f3:	83 ec 0c             	sub    esp,0xc
c00219f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219fa:	e8 cd ff ff ff       	call   c00219cc <APICTimer::~APICTimer()>
c00219ff:	83 c4 10             	add    esp,0x10
c0021a02:	83 ec 08             	sub    esp,0x8
c0021a05:	68 60 01 00 00       	push   0x160
c0021a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a0e:	e8 94 b1 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c0021a13:	83 c4 10             	add    esp,0x10
c0021a16:	83 c4 0c             	add    esp,0xc
c0021a19:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021a1c <PIT::~PIT()>:
c0021a1c:	83 ec 0c             	sub    esp,0xc
c0021a1f:	ba 5c 53 02 c0       	mov    edx,0xc002535c
c0021a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a28:	89 10                	mov    DWORD PTR [eax],edx
c0021a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a2e:	83 ec 0c             	sub    esp,0xc
c0021a31:	50                   	push   eax
c0021a32:	e8 b9 8e fe ff       	call   c000a8f0 <Timer::~Timer()>
c0021a37:	83 c4 10             	add    esp,0x10
c0021a3a:	90                   	nop
c0021a3b:	83 c4 0c             	add    esp,0xc
c0021a3e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021a40 <PIT::~PIT()>:
c0021a40:	83 ec 0c             	sub    esp,0xc
c0021a43:	83 ec 0c             	sub    esp,0xc
c0021a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a4a:	e8 cd ff ff ff       	call   c0021a1c <PIT::~PIT()>
c0021a4f:	83 c4 10             	add    esp,0x10
c0021a52:	83 ec 08             	sub    esp,0x8
c0021a55:	68 5c 01 00 00       	push   0x15c
c0021a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a5e:	e8 44 b1 fe ff       	call   c000cba7 <operator delete(void*, unsigned long)>
c0021a63:	83 c4 10             	add    esp,0x10
c0021a66:	83 c4 0c             	add    esp,0xc
c0021a69:	c3                   	ret    

Disassembly of section userkernel:

c0026000 <KiDefaultSignalHandlerAbort(int)>:
c0026000:	57                   	push   edi
c0026001:	b9 07 00 00 00       	mov    ecx,0x7
c0026006:	56                   	push   esi
c0026007:	be 5f 36 02 c0       	mov    esi,0xc002365f
c002600c:	83 ec 24             	sub    esp,0x24
c002600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0026013:	fc                   	cld    
c0026014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002601a:	50                   	push   eax
c002601b:	6a 00                	push   0x0
c002601d:	6a 38                	push   0x38
c002601f:	6a 01                	push   0x1
c0026021:	e8 2c 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0026026:	83 c4 34             	add    esp,0x34
c0026029:	5e                   	pop    esi
c002602a:	5f                   	pop    edi
c002602b:	c3                   	ret    

c002602c <KiDefaultSignalHandlerTerminate(int)>:
c002602c:	57                   	push   edi
c002602d:	b9 08 00 00 00       	mov    ecx,0x8
c0026032:	56                   	push   esi
c0026033:	be 7b 36 02 c0       	mov    esi,0xc002367b
c0026038:	83 ec 24             	sub    esp,0x24
c002603b:	89 e7                	mov    edi,esp
c002603d:	fc                   	cld    
c002603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026040:	54                   	push   esp
c0026041:	6a 00                	push   0x0
c0026043:	6a 37                	push   0x37
c0026045:	6a 01                	push   0x1
c0026047:	e8 06 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002604c:	83 c4 34             	add    esp,0x34
c002604f:	5e                   	pop    esi
c0026050:	5f                   	pop    edi
c0026051:	c3                   	ret    

c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0026052:	53                   	push   ebx
c0026053:	83 ec 10             	sub    esp,0x10
c0026056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0026062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0026066:	cd 60                	int    0x60
c0026068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026078:	83 c4 10             	add    esp,0x10
c002607b:	5b                   	pop    ebx
c002607c:	c3                   	ret    

Disassembly of section align_previous:

c0027000 <DO_NOT_DELETE()>:
c0027000:	c3                   	ret    
