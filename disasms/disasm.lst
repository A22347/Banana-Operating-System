
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 77 fb 00 00       	call   c000fb97 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c0 b8 02 c0       	mov    eax,0xc002b8c0
c0000025:	3d c0 b8 02 c0       	cmp    eax,0xc002b8c0
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c0 b8 02 c0       	push   0xc002b8c0
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c0 b8 02 c0       	mov    eax,0xc002b8c0
c0000051:	2d c0 b8 02 c0       	sub    eax,0xc002b8c0
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c0 b8 02 c0       	push   0xc002b8c0
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 18 64 02 c0       	mov    ebx,0xc0026418
c0000097:	81 eb 14 64 02 c0    	sub    ebx,0xc0026414
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 14 64 02 c0       	mov    esi,0xc0026414
c00000a6:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c0 b8 02 c0       	push   0xc002b8c0
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 d0 02 c0       	push   0xc002d0c8
c0000108:	68 c0 b8 02 c0       	push   0xc002b8c0
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 f3 5c 01 00       	call   c0015fa0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 5d 41 01 00       	call   c0014422 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 d1 5c 01 00       	call   c0015fa0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 32 62 01 00       	call   c0016520 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 ad 67 01 00       	call   c0016aa4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 11 03 c0 	lgdtd  ds:0xc0031118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 36 ec 00 00       	jmp    c000efb5 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 d0 02 c0       	mov    ds:0xc002d0e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 d0 02 c0    	mov    DWORD PTR ds:0xc002d0e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 20 64 02 c0 02 	test   BYTE PTR [edx-0x3ffd9be0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 20 64 02 c0 01 	test   BYTE PTR [edx-0x3ffd9be0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 20 64 02 c0 08 	test   BYTE PTR [edx-0x3ffd9be0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 20 64 02 c0 04 	test   BYTE PTR [ecx-0x3ffd9be0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 20 64 02 c0 01 	test   BYTE PTR [edx-0x3ffd9be0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 d1 02 c0    	mov    DWORD PTR ds:0xc002d100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 d1 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd2efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 d1 02 c0    	mov    DWORD PTR ds:0xc002d100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c d1 02 c0    	cmp    DWORD PTR ds:0xc002d12c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d13c
c0000df7:	c7 42 0c 34 d1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c d1 02 c0    	mov    DWORD PTR ds:0xc002d13c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c d1 02 c0    	mov    DWORD PTR ds:0xc002d12c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 d1 02 c0 02 	test   BYTE PTR ds:0xc002d100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 d4 02 c0    	dec    DWORD PTR ds:0xc002d450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 d4 02 c0    	sub    DWORD PTR ds:0xc002d464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 81 e9 00 00       	call   c000f7e1 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 8e e8 00 00       	call   c000f783 <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 6d e7 00 00       	call   c000f74d <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 68 e7 00 00       	call   c000f783 <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 14 e6 00 00       	call   c000f74d <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 fa e5 00 00       	call   c000f74d <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 d0 e5 00 00       	call   c000f74d <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 d1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 d1 02 c0 	lea    edx,[eax*8-0x3ffd2ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d140
c00012e5:	81 fb 34 d1 02 c0    	cmp    ebx,0xc002d134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 d1 02 c0       	cmp    eax,0xc002d134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 d1 02 c0    	cmp    DWORD PTR ds:0xc002d130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c d1 02 c0       	mov    ds:0xc002d13c,eax
c0001321:	a3 40 d1 02 c0       	mov    ds:0xc002d140,eax
c0001326:	a3 30 d1 02 c0       	mov    ds:0xc002d130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 d1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d134
c0001334:	c7 40 0c 34 d1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 d1 02 c0       	mov    ds:0xc002d140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 d1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 d0 02 c0 	lea    ebp,[edx*4-0x3ffd2f08]
c0001385:	8b 14 95 00 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 d1 02 c0 	lea    ecx,[edx*4-0x3ffd2f00]
c00013a0:	8b 14 95 00 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 d4 02 c0 	or     DWORD PTR [edi*4-0x3ffd2bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 d1 02 c0 	lea    eax,[eax*8-0x3ffd2ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c d1 02 c0    	mov    DWORD PTR ds:0xc002d13c,ecx
c000145a:	89 0d 40 d1 02 c0    	mov    DWORD PTR ds:0xc002d140,ecx
c0001460:	c7 41 08 34 d1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d134
c0001467:	c7 41 0c 34 d1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c d1 02 c0 	lea    edx,[ecx*8-0x3ffd2ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 d4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 d4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c d1 02 c0 	lea    edx,[eax*4-0x3ffd2ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 d4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c d1 02 c0    	mov    DWORD PTR ds:0xc002d13c,edi
c000152d:	89 3d 40 d1 02 c0    	mov    DWORD PTR ds:0xc002d140,edi
c0001533:	c7 47 08 34 d1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d134
c000153a:	c7 47 0c 34 d1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 d1 02 c0    	mov    DWORD PTR ds:0xc002d130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c d1 02 c0       	mov    eax,ds:0xc002d12c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c d1 02 c0    	mov    DWORD PTR ds:0xc002d12c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 d1 02 c0       	mov    edx,0xc002d100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 d4 02 c0    	mov    DWORD PTR ds:0xc002d454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c d1 02 c0    	cmp    DWORD PTR ds:0xc002d12c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c d1 02 c0    	mov    DWORD PTR ds:0xc002d12c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c d4 02 c0    	push   DWORD PTR ds:0xc002d45c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c d4 02 c0       	mov    eax,ds:0xc002d45c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d12c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c d1 02 c0       	mov    eax,ds:0xc002d12c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 d1 02 c0       	mov    eax,0xc002d134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c d4 02 c0       	cmp    eax,0xc002d42c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 d4 02 c0       	mov    eax,ds:0xc002d468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 24 65 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9adc]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 d1 02 c0       	mov    eax,ds:0xc002d100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 d1 02 c0       	mov    ds:0xc002d100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 d4 02 c0    	mov    DWORD PTR ds:0xc002d444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 d4 02 c0    	mov    DWORD PTR ds:0xc002d448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c d4 02 c0    	mov    DWORD PTR ds:0xc002d44c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 d4 02 c0    	mov    DWORD PTR ds:0xc002d454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 20 35 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffccae0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 65 a8 01 00       	jmp    c001c7f0 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 20 35 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffccae0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 8f a8 01 00       	jmp    c001c830 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 20 35 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffccae0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 b0 a8 01 00       	jmp    c001c870 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 80 66 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd9980]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 80 66 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9980]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 04 95 02 c0       	mov    edx,0xc0029504
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 3c 65 02 c0       	mov    edx,0xc002653c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 d4 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd2b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 d4 02 c0    	mov    ax,ds:0xc002d480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 d4 02 c0    	mov    ds:0xc002d480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 42 65 02 c0       	mov    eax,0xc0026542
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 00 66 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd9a00]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 4b 65 02 c0       	mov    eax,0xc002654b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 80 66 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9980]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 d4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 d4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 d0 65 02 c0       	mov    eax,0xc00265d0
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb c0 65 02 c0       	mov    ebx,0xc00265c0
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 a0 65 02 c0       	mov    eax,0xc00265a0
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 b0 65 02 c0       	mov    eax,0xc00265b0
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 52 65 02 c0       	mov    edx,0xc0026552
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 5e 65 02 c0       	mov    edx,0xc002655e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 72 65 02 c0       	mov    edx,0xc0026572
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 4c 9a 00 00       	call   c000f863 <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 44 9a 00 00       	call   c000f873 <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c a0 69 02 c0 	mov    DWORD PTR [esp+0xc],0xc00269a0
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 a0 69 02 c0 	mov    DWORD PTR [esp+0x10],0xc00269a0
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 a0 67 02 c0       	mov    eax,0xc00267a0
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 e0 66 02 c0       	mov    eax,0xc00266e0
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 a0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9960]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 a0 6a 02 c0       	push   0xc0026aa0
c0006303:	e8 84 6e 01 00       	call   c001d18c <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 d0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 d0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 ae 6a 02 c0       	push   0xc0026aae
c000633b:	e8 4c 6e 01 00       	call   c001d18c <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 d5 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd2a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 d0 02 c0 	movsx  eax,BYTE PTR ds:0xc002d060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 b5 6d 01 00       	call   c001d130 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 d0 02 c0       	mov    eax,0xc002d080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 d0 02 c0       	mov    eax,0xc002d020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 de 02 c0 00 	cmp    DWORD PTR ds:0xc002deb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 de 02 c0    	mov    ebp,DWORD PTR ds:0xc002deb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 bd 6a 02 c0       	push   0xc0026abd
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 de 02 c0       	mov    ecx,0xc002de80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 d5 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd2ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 d5 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd2ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 d5 02 c0    	mov    DWORD PTR [edi-0x3ffd2abc],esi
c0006746:	89 87 40 d5 02 c0    	mov    DWORD PTR [edi-0x3ffd2ac0],eax
c000674c:	c7 87 48 d5 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd2ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 d5 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd2a30],0x0
c0006768:	89 87 4c d5 02 c0    	mov    DWORD PTR [edi-0x3ffd2ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 d5 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 d5 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd2ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 d5 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd2a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 d5 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd2ab8]
c00067e1:	8b 8d 4c d5 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd2ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 d5 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd2ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 d0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 d5 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd2ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 d5 02 c0    	add    DWORD PTR [ebp-0x3ffd2ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 d5 02 c0    	lea    ecx,[ebp-0x3ffd2ac0]
c00068d9:	83 bd 40 d5 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd2ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c d5 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd2ab4]
c0006917:	05 40 d5 02 c0       	add    eax,0xc002d540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 d5 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd2ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 d5 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd2ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 d5 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd2a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 d5 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd2ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 d5 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd2ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 d5 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd2a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c d5 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd2ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 d5 02 c0    	lea    edi,[eax-0x3ffd2ac0]
c00069d6:	83 b8 40 d5 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd2ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 c0 6a 02 c0       	push   0xc0026ac0
c00069fa:	e8 8d 67 01 00       	call   c001d18c <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 a1 67 01 00       	call   c001d1a8 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 c5 6a 02 c0 	mov    DWORD PTR [esp],0xc0026ac5
c0006a14:	e8 73 67 01 00       	call   c001d18c <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 d5 02 c0    	push   DWORD PTR [ebx-0x3ffd2ac0]
c0006a20:	e8 83 67 01 00       	call   c001d1a8 <iso_kprintfd>
c0006a25:	c7 04 24 cb 6a 02 c0 	mov    DWORD PTR [esp],0xc0026acb
c0006a2c:	e8 5b 67 01 00       	call   c001d18c <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 d5 02 c0    	push   DWORD PTR [ebx-0x3ffd2abc]
c0006a38:	e8 6b 67 01 00       	call   c001d1a8 <iso_kprintfd>
c0006a3d:	c7 04 24 d1 6a 02 c0 	mov    DWORD PTR [esp],0xc0026ad1
c0006a44:	e8 43 67 01 00       	call   c001d18c <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 d5 02 c0    	push   DWORD PTR [ebx-0x3ffd2a30]
c0006a50:	e8 53 67 01 00       	call   c001d1a8 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 d0 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd2f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 d5 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd2ab8]
c0006ab6:	81 c2 40 d5 02 c0    	add    edx,0xc002d540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 d0 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd2f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 d5 02 c0    	lea    ebp,[eax-0x3ffd2aa8]
c0006b12:	83 3d b4 de 02 c0 00 	cmp    DWORD PTR ds:0xc002deb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 d5 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd2aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 bd 6a 02 c0       	push   0xc0026abd
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 d5 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd2aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 d5 02 c0    	mov    DWORD PTR [ebx-0x3ffd2ab0],eax
c0006bee:	89 93 54 d5 02 c0    	mov    DWORD PTR [ebx-0x3ffd2aac],edx
c0006bf4:	81 c3 40 d5 02 c0    	add    ebx,0xc002d540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 d5 02 c0       	add    eax,0xc002d550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 da 6a 02 c0       	push   0xc0026ada
c0006c19:	e8 6e 65 01 00       	call   c001d18c <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 d0 02 c0       	mov    ds:0xc002d060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002deb4,0x0
c0006c4e:	a1 ac de 02 c0       	mov    eax,ds:0xc002deac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 e5 6a 02 c0       	push   0xc0026ae5
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 d0 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd2f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 de 02 c0       	mov    ds:0xc002deb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 de 02 c0 00 	cmp    DWORD PTR ds:0xc002deb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac de 02 c0       	mov    eax,ds:0xc002deac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 d0 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd2f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 ec 6a 02 c0       	push   0xc0026aec
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 d0 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd2f80]
c0006cec:	bf 80 de 02 c0       	mov    edi,0xc002de80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 de 02 c0       	mov    eax,0xc002de82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 de 02 c0       	mov    ds:0xc002dea8,eax
c0006d0f:	b8 8a de 02 c0       	mov    eax,0xc002de8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 de 02 c0       	mov    ds:0xc002dea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 f3 6a 02 c0       	push   0xc0026af3
c0006d30:	e8 57 64 01 00       	call   c001d18c <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 fe 6a 02 c0       	push   0xc0026afe
c0006d4b:	e8 3c 64 01 00       	call   c001d18c <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 d5 02 c0       	push   0xc002d540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 d5 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc002d540,0xffffffff
c0006d75:	e8 e9 8a 00 00       	call   c000f863 <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 de 02 c0       	mov    ds:0xc002deb0,eax
c0006d86:	e8 d8 8a 00 00       	call   c000f863 <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 d5 02 c0       	mov    ds:0xc002d520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 c3 8a 00 00       	call   c000f863 <malloc>
c0006da0:	89 04 9d 80 d0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 aa 8a 00 00       	call   c000f863 <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 d0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd2f80]
c0006de6:	e8 88 8a 00 00       	call   c000f873 <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd2fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 7a 8a 00 00       	call   c000f873 <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 de 02 c0       	mov    eax,ds:0xc002deb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 60 8a 00 00       	call   c000f873 <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 d5 02 c0       	mov    eax,ds:0xc002d520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 4b 8a 00 00       	call   c000f873 <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 d5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d520,0x0
c0006e35:	c7 05 b0 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002deb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 10 6b 02 c0       	mov    esi,0xc0026b10
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 0f 6b 02 c0       	mov    al,ds:0xc0026b0f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	53                   	push   ebx
c0006ee7:	83 ec 14             	sub    esp,0x14
c0006eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006eee:	6a 10                	push   0x10
c0006ef0:	e8 8f 63 00 00       	call   c000d284 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006ef5:	83 c4 10             	add    esp,0x10
c0006ef8:	84 c0                	test   al,al
c0006efa:	75 12                	jne    c0006f0e <Dbg::logc(char)+0x28>
c0006efc:	ba fd 03 00 00       	mov    edx,0x3fd
c0006f01:	ec                   	in     al,dx
c0006f02:	a8 20                	test   al,0x20
c0006f04:	74 fb                	je     c0006f01 <Dbg::logc(char)+0x1b>
c0006f06:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f0b:	88 d8                	mov    al,bl
c0006f0d:	ee                   	out    dx,al
c0006f0e:	83 c4 08             	add    esp,0x8
c0006f11:	5b                   	pop    ebx
c0006f12:	c3                   	ret    

c0006f13 <Dbg::logs(char*)>:
c0006f13:	53                   	push   ebx
c0006f14:	83 ec 08             	sub    esp,0x8
c0006f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	74 16                	je     c0006f38 <Dbg::logs(char*)+0x25>
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	83 c3 01             	add    ebx,0x1
c0006f28:	50                   	push   eax
c0006f29:	e8 b8 ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f2e:	83 c4 10             	add    esp,0x10
c0006f31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f34:	85 c0                	test   eax,eax
c0006f36:	75 ea                	jne    c0006f22 <Dbg::logs(char*)+0xf>
c0006f38:	83 c4 08             	add    esp,0x8
c0006f3b:	5b                   	pop    ebx
c0006f3c:	c3                   	ret    

c0006f3d <Dbg::logWriteInt(unsigned int)>:
c0006f3d:	83 ec 1c             	sub    esp,0x1c
c0006f40:	6a 0a                	push   0xa
c0006f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f46:	50                   	push   eax
c0006f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f4b:	50                   	push   eax
c0006f4c:	e8 f5 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f51:	50                   	push   eax
c0006f52:	e8 bc ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f57:	83 c4 2c             	add    esp,0x2c
c0006f5a:	c3                   	ret    

c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f5b:	83 ec 1c             	sub    esp,0x1c
c0006f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f62:	50                   	push   eax
c0006f63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f67:	50                   	push   eax
c0006f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f6c:	52                   	push   edx
c0006f6d:	e8 d4 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f72:	50                   	push   eax
c0006f73:	e8 9b ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f78:	83 c4 2c             	add    esp,0x2c
c0006f7b:	c3                   	ret    

c0006f7c <Dbg::kprintf(char const*, ...)>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 1c             	sub    esp,0x1c
c0006f83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f87:	85 db                	test   ebx,ebx
c0006f89:	0f 84 4c 01 00 00    	je     c00070db <Dbg::kprintf(char const*, ...)+0x15f>
c0006f8f:	83 ec 0c             	sub    esp,0xc
c0006f92:	6a 10                	push   0x10
c0006f94:	e8 eb 62 00 00       	call   c000d284 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f99:	83 c4 10             	add    esp,0x10
c0006f9c:	84 c0                	test   al,al
c0006f9e:	74 08                	je     c0006fa8 <Dbg::kprintf(char const*, ...)+0x2c>
c0006fa0:	83 c4 1c             	add    esp,0x1c
c0006fa3:	5b                   	pop    ebx
c0006fa4:	5e                   	pop    esi
c0006fa5:	5f                   	pop    edi
c0006fa6:	5d                   	pop    ebp
c0006fa7:	c3                   	ret    
c0006fa8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006fac:	31 ff                	xor    edi,edi
c0006fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fb5:	85 c0                	test   eax,eax
c0006fb7:	74 e7                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0006fb9:	8d 77 01             	lea    esi,[edi+0x1]
c0006fbc:	83 f8 25             	cmp    eax,0x25
c0006fbf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fc2:	75 4c                	jne    c0007010 <Dbg::kprintf(char const*, ...)+0x94>
c0006fc4:	83 c7 02             	add    edi,0x2
c0006fc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fca:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fcd:	83 e8 25             	sub    eax,0x25
c0006fd0:	0f b6 c0             	movzx  eax,al
c0006fd3:	83 f8 53             	cmp    eax,0x53
c0006fd6:	0f 87 e1 00 00 00    	ja     c00070bd <Dbg::kprintf(char const*, ...)+0x141>
c0006fdc:	ff 24 85 58 6b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd94a8]
c0006fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fe7:	83 ec 0c             	sub    esp,0xc
c0006fea:	89 c8                	mov    eax,ecx
c0006fec:	83 c1 04             	add    ecx,0x4
c0006fef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ff5:	50                   	push   eax
c0006ff6:	e8 42 ff ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0006ffb:	83 c4 10             	add    esp,0x10
c0006ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007001:	85 c0                	test   eax,eax
c0007003:	74 9b                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0007005:	8d 77 01             	lea    esi,[edi+0x1]
c0007008:	83 f8 25             	cmp    eax,0x25
c000700b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000700e:	74 b4                	je     c0006fc4 <Dbg::kprintf(char const*, ...)+0x48>
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 f7                	mov    edi,esi
c0007015:	50                   	push   eax
c0007016:	89 ee                	mov    esi,ebp
c0007018:	e8 c9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	eb dc                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c0007022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007026:	83 ec 0c             	sub    esp,0xc
c0007029:	89 c8                	mov    eax,ecx
c000702b:	83 c1 04             	add    ecx,0x4
c000702e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007030:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007034:	55                   	push   ebp
c0007035:	e8 d9 fe ff ff       	call   c0006f13 <Dbg::logs(char*)>
c000703a:	83 c4 10             	add    esp,0x10
c000703d:	eb bf                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	89 d0                	mov    eax,edx
c0007048:	83 c2 04             	add    edx,0x4
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007051:	51                   	push   ecx
c0007052:	e8 e6 fe ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	eb a2                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000705c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007060:	83 ec 0c             	sub    esp,0xc
c0007063:	89 d0                	mov    eax,edx
c0007065:	83 c2 04             	add    edx,0x4
c0007068:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000706b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000706f:	50                   	push   eax
c0007070:	e8 71 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007075:	83 c4 10             	add    esp,0x10
c0007078:	eb 84                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000707a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707e:	89 c8                	mov    eax,ecx
c0007080:	83 c1 04             	add    ecx,0x4
c0007083:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	6a 10                	push   0x10
c000708c:	8b 10                	mov    edx,DWORD PTR [eax]
c000708e:	52                   	push   edx
c000708f:	e8 c7 fe ff ff       	call   c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	e9 62 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000709c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070a0:	89 d0                	mov    eax,edx
c00070a2:	83 c2 08             	add    edx,0x8
c00070a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a9:	eb dc                	jmp    c0007087 <Dbg::kprintf(char const*, ...)+0x10b>
c00070ab:	83 ec 0c             	sub    esp,0xc
c00070ae:	6a 25                	push   0x25
c00070b0:	e8 31 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b5:	83 c4 10             	add    esp,0x10
c00070b8:	e9 41 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 25                	push   0x25
c00070c2:	e8 1f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ce:	e8 13 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	e9 23 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070db:	83 ec 0c             	sub    esp,0xc
c00070de:	68 20 6b 02 c0       	push   0xc0026b20
c00070e3:	e8 94 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00070e8:	83 c4 10             	add    esp,0x10
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	5b                   	pop    ebx
c00070ef:	5e                   	pop    esi
c00070f0:	5f                   	pop    edi
c00070f1:	5d                   	pop    ebp
c00070f2:	c3                   	ret    
c00070f3:	90                   	nop

c00070f4 <KiUbsanPrintDetails(char const*, void*)>:
c00070f4:	83 ec 1c             	sub    esp,0x1c
c00070f7:	83 ec 08             	sub    esp,0x8
c00070fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070fe:	68 a8 6c 02 c0       	push   0xc0026ca8
c0007103:	e8 74 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007108:	83 c4 10             	add    esp,0x10
c000710b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000710f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007117:	8b 00                	mov    eax,DWORD PTR [eax]
c0007119:	83 ec 08             	sub    esp,0x8
c000711c:	50                   	push   eax
c000711d:	68 bc 6c 02 c0       	push   0xc0026cbc
c0007122:	e8 55 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007131:	83 ec 08             	sub    esp,0x8
c0007134:	50                   	push   eax
c0007135:	68 c6 6c 02 c0       	push   0xc0026cc6
c000713a:	e8 3d fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000713f:	83 c4 10             	add    esp,0x10
c0007142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007149:	83 ec 08             	sub    esp,0x8
c000714c:	50                   	push   eax
c000714d:	68 d0 6c 02 c0       	push   0xc0026cd0
c0007152:	e8 25 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007157:	83 c4 10             	add    esp,0x10
c000715a:	90                   	nop
c000715b:	83 c4 1c             	add    esp,0x1c
c000715e:	c3                   	ret    
c000715f:	90                   	nop

c0007160 <__ubsan_handle_type_mismatch_v1>:
c0007160:	83 ec 0c             	sub    esp,0xc
c0007163:	83 ec 08             	sub    esp,0x8
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	68 14 6e 02 c0       	push   0xc0026e14
c000716f:	e8 80 ff ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007174:	83 c4 10             	add    esp,0x10
c0007177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000717c:	75 16                	jne    c0007194 <__ubsan_handle_type_mismatch_v1+0x34>
c000717e:	83 ec 0c             	sub    esp,0xc
c0007181:	68 da 6c 02 c0       	push   0xc0026cda
c0007186:	e8 f1 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000718b:	83 c4 10             	add    esp,0x10
c000718e:	e9 91 00 00 00       	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007193:	90                   	nop
c0007194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000719b:	85 c0                	test   eax,eax
c000719d:	74 29                	je     c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c000719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00071a6:	83 e8 01             	sub    eax,0x1
c00071a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00071ad:	75 19                	jne    c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00071af:	83 ec 08             	sub    esp,0x8
c00071b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071b6:	68 34 6e 02 c0       	push   0xc0026e34
c00071bb:	e8 bc fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071c0:	83 c4 10             	add    esp,0x10
c00071c3:	eb 5f                	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071c5:	8d 76 00             	lea    esi,[esi+0x0]
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	68 ef 6c 02 c0       	push   0xc0026cef
c00071d0:	e8 a7 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071df:	0f b6 c0             	movzx  eax,al
c00071e2:	83 ec 08             	sub    esp,0x8
c00071e5:	50                   	push   eax
c00071e6:	68 09 6d 02 c0       	push   0xc0026d09
c00071eb:	e8 8c fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007208:	0f b6 c0             	movzx  eax,al
c000720b:	8b 04 85 e0 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5220]
c0007212:	51                   	push   ecx
c0007213:	52                   	push   edx
c0007214:	50                   	push   eax
c0007215:	68 5c 6e 02 c0       	push   0xc0026e5c
c000721a:	e8 5d fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	66 90                	xchg   ax,ax
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	68 14 6e 02 c0       	push   0xc0026e14
c000722c:	e8 87 8a 00 00       	call   c000fcb8 <KePanic(char const*)>
c0007231:	83 c4 10             	add    esp,0x10
c0007234:	90                   	nop
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	c3                   	ret    
c0007239:	8d 76 00             	lea    esi,[esi+0x0]

c000723c <__ubsan_handle_pointer_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 a4 6e 02 c0       	push   0xc0026ea4
c000724b:	e8 a4 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 a4 6e 02 c0       	push   0xc0026ea4
c000725b:	e8 58 8a 00 00       	call   c000fcb8 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_out_of_bounds>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 14 6d 02 c0       	push   0xc0026d14
c0007277:	e8 78 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 14 6d 02 c0       	push   0xc0026d14
c0007287:	e8 2c 8a 00 00       	call   c000fcb8 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_add_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 31 6d 02 c0       	push   0xc0026d31
c00072a3:	e8 4c fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 31 6d 02 c0       	push   0xc0026d31
c00072b3:	e8 00 8a 00 00       	call   c000fcb8 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_load_invalid_value>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 c4 6e 02 c0       	push   0xc0026ec4
c00072cf:	e8 20 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 c4 6e 02 c0       	push   0xc0026ec4
c00072df:	e8 d4 89 00 00       	call   c000fcb8 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_divrem_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 e8 6e 02 c0       	push   0xc0026ee8
c00072fb:	e8 f4 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 e8 6e 02 c0       	push   0xc0026ee8
c000730b:	e8 a8 89 00 00       	call   c000fcb8 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_mul_overflow>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 4d 6d 02 c0       	push   0xc0026d4d
c0007327:	e8 c8 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 4d 6d 02 c0       	push   0xc0026d4d
c0007337:	e8 7c 89 00 00       	call   c000fcb8 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_sub_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 69 6d 02 c0       	push   0xc0026d69
c0007353:	e8 9c fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 69 6d 02 c0       	push   0xc0026d69
c0007363:	e8 50 89 00 00       	call   c000fcb8 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <__ubsan_handle_shift_out_of_bounds>:
c0007370:	83 ec 0c             	sub    esp,0xc
c0007373:	83 ec 08             	sub    esp,0x8
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	68 08 6f 02 c0       	push   0xc0026f08
c000737f:	e8 70 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007384:	83 c4 10             	add    esp,0x10
c0007387:	83 ec 0c             	sub    esp,0xc
c000738a:	68 08 6f 02 c0       	push   0xc0026f08
c000738f:	e8 24 89 00 00       	call   c000fcb8 <KePanic(char const*)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	90                   	nop
c0007398:	83 c4 0c             	add    esp,0xc
c000739b:	c3                   	ret    

c000739c <__ubsan_handle_negate_overflow>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	83 ec 08             	sub    esp,0x8
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	68 2c 6f 02 c0       	push   0xc0026f2c
c00073ab:	e8 44 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00073b0:	83 c4 10             	add    esp,0x10
c00073b3:	83 ec 0c             	sub    esp,0xc
c00073b6:	68 2c 6f 02 c0       	push   0xc0026f2c
c00073bb:	e8 f8 88 00 00       	call   c000fcb8 <KePanic(char const*)>
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	90                   	nop
c00073c4:	83 c4 0c             	add    esp,0xc
c00073c7:	c3                   	ret    

c00073c8 <KiIsHashInTable(unsigned short)>:
c00073c8:	0f b7 d0             	movzx  edx,ax
c00073cb:	83 e0 07             	and    eax,0x7
c00073ce:	c1 fa 03             	sar    edx,0x3
c00073d1:	88 c1                	mov    cl,al
c00073d3:	0f b6 92 00 e3 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd1d00]
c00073da:	d3 fa                	sar    edx,cl
c00073dc:	89 d0                	mov    eax,edx
c00073de:	83 e0 01             	and    eax,0x1
c00073e1:	c3                   	ret    

c00073e2 <KiSetHashInTable(unsigned short, bool)>:
c00073e2:	56                   	push   esi
c00073e3:	53                   	push   ebx
c00073e4:	0f b7 d8             	movzx  ebx,ax
c00073e7:	83 e0 07             	and    eax,0x7
c00073ea:	c1 fb 03             	sar    ebx,0x3
c00073ed:	89 c1                	mov    ecx,eax
c00073ef:	0f b6 b3 00 e3 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd1d00]
c00073f6:	b8 01 00 00 00       	mov    eax,0x1
c00073fb:	d3 e0                	shl    eax,cl
c00073fd:	84 d2                	test   dl,dl
c00073ff:	74 04                	je     c0007405 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007401:	09 f0                	or     eax,esi
c0007403:	eb 04                	jmp    c0007409 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007405:	f7 d0                	not    eax
c0007407:	21 f0                	and    eax,esi
c0007409:	88 83 00 e3 02 c0    	mov    BYTE PTR [ebx-0x3ffd1d00],al
c000740f:	5b                   	pop    ebx
c0007410:	5e                   	pop    esi
c0007411:	c3                   	ret    

c0007412 <KiFlushSymlinkChanges()>:
c0007412:	57                   	push   edi
c0007413:	56                   	push   esi
c0007414:	53                   	push   ebx
c0007415:	83 ec 1c             	sub    esp,0x1c
c0007418:	68 14 01 00 00       	push   0x114
c000741d:	e8 41 84 00 00       	call   c000f863 <malloc>
c0007422:	83 c4 0c             	add    esp,0xc
c0007425:	89 c3                	mov    ebx,eax
c0007427:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c000742d:	68 4b 6f 02 c0       	push   0xc0026f4b
c0007432:	50                   	push   eax
c0007433:	e8 52 0d 00 00       	call   c000818a <File::File(char const*, Process*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	85 db                	test   ebx,ebx
c000743d:	75 10                	jne    c000744f <KiFlushSymlinkChanges()+0x3d>
c000743f:	83 ec 0c             	sub    esp,0xc
c0007442:	68 69 6f 02 c0       	push   0xc0026f69
c0007447:	e8 6c 88 00 00       	call   c000fcb8 <KePanic(char const*)>
c000744c:	83 c4 10             	add    esp,0x10
c000744f:	50                   	push   eax
c0007450:	50                   	push   eax
c0007451:	6a 06                	push   0x6
c0007453:	53                   	push   ebx
c0007454:	e8 4f 0d 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	85 c0                	test   eax,eax
c000745e:	74 10                	je     c0007470 <KiFlushSymlinkChanges()+0x5e>
c0007460:	83 ec 0c             	sub    esp,0xc
c0007463:	68 83 6f 02 c0       	push   0xc0026f83
c0007468:	e8 4b 88 00 00       	call   c000fcb8 <KePanic(char const*)>
c000746d:	83 c4 10             	add    esp,0x10
c0007470:	31 f6                	xor    esi,esi
c0007472:	39 35 c0 de 02 c0    	cmp    DWORD PTR ds:0xc002dec0,esi
c0007478:	7e 70                	jle    c00074ea <KiFlushSymlinkChanges()+0xd8>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000747f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007483:	89 f0                	mov    eax,esi
c0007485:	57                   	push   edi
c0007486:	c1 e0 08             	shl    eax,0x8
c0007489:	05 00 df 02 c0       	add    eax,0xc002df00
c000748e:	50                   	push   eax
c000748f:	6a 00                	push   0x0
c0007491:	68 00 01 00 00       	push   0x100
c0007496:	53                   	push   ebx
c0007497:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000749a:	83 c4 20             	add    esp,0x20
c000749d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00074a5:	74 10                	je     c00074b7 <KiFlushSymlinkChanges()+0xa5>
c00074a7:	83 ec 0c             	sub    esp,0xc
c00074aa:	68 9d 6f 02 c0       	push   0xc0026f9d
c00074af:	e8 04 88 00 00       	call   c000fcb8 <KePanic(char const*)>
c00074b4:	83 c4 10             	add    esp,0x10
c00074b7:	83 ec 0c             	sub    esp,0xc
c00074ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074bc:	8d 14 f5 e0 de 02 c0 	lea    edx,[esi*8-0x3ffd2120]
c00074c3:	57                   	push   edi
c00074c4:	52                   	push   edx
c00074c5:	6a 00                	push   0x0
c00074c7:	6a 08                	push   0x8
c00074c9:	53                   	push   ebx
c00074ca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074cd:	83 c4 20             	add    esp,0x20
c00074d0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074d5:	74 10                	je     c00074e7 <KiFlushSymlinkChanges()+0xd5>
c00074d7:	83 ec 0c             	sub    esp,0xc
c00074da:	68 b7 6f 02 c0       	push   0xc0026fb7
c00074df:	e8 d4 87 00 00       	call   c000fcb8 <KePanic(char const*)>
c00074e4:	83 c4 10             	add    esp,0x10
c00074e7:	46                   	inc    esi
c00074e8:	eb 88                	jmp    c0007472 <KiFlushSymlinkChanges()+0x60>
c00074ea:	83 ec 0c             	sub    esp,0xc
c00074ed:	53                   	push   ebx
c00074ee:	e8 13 0d 00 00       	call   c0008206 <File::close()>
c00074f3:	83 c4 10             	add    esp,0x10
c00074f6:	85 db                	test   ebx,ebx
c00074f8:	74 0c                	je     c0007506 <KiFlushSymlinkChanges()+0xf4>
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074ff:	53                   	push   ebx
c0007500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007503:	83 c4 10             	add    esp,0x10
c0007506:	c7 05 c0 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dec0,0x0
c0007510:	83 c4 10             	add    esp,0x10
c0007513:	5b                   	pop    ebx
c0007514:	5e                   	pop    esi
c0007515:	5f                   	pop    edi
c0007516:	c3                   	ret    

c0007517 <KiDeinitialiseSymlinks(void*)>:
c0007517:	e9 f6 fe ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>

c000751c <KiGetSymlinkHash(char const*)>:
c000751c:	53                   	push   ebx
c000751d:	89 c3                	mov    ebx,eax
c000751f:	83 ec 14             	sub    esp,0x14
c0007522:	50                   	push   eax
c0007523:	e8 48 90 ff ff       	call   c0000570 <strlen>
c0007528:	5a                   	pop    edx
c0007529:	59                   	pop    ecx
c000752a:	50                   	push   eax
c000752b:	53                   	push   ebx
c000752c:	e8 04 6c 00 00       	call   c000e135 <KeCalculateCRC32(unsigned char*, int)>
c0007531:	83 c4 18             	add    esp,0x18
c0007534:	89 c2                	mov    edx,eax
c0007536:	5b                   	pop    ebx
c0007537:	c1 ea 10             	shr    edx,0x10
c000753a:	31 d0                	xor    eax,edx
c000753c:	c3                   	ret    

c000753d <KiCreateSymlinkID()>:
c000753d:	55                   	push   ebp
c000753e:	57                   	push   edi
c000753f:	56                   	push   esi
c0007540:	53                   	push   ebx
c0007541:	31 db                	xor    ebx,ebx
c0007543:	83 ec 1c             	sub    esp,0x1c
c0007546:	e8 4d 91 00 00       	call   c0010698 <KeRand()>
c000754b:	43                   	inc    ebx
c000754c:	8b 2d 00 03 03 c0    	mov    ebp,DWORD PTR ds:0xc0030300
c0007552:	31 d2                	xor    edx,edx
c0007554:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007557:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000755b:	89 0d 00 03 03 c0    	mov    DWORD PTR ds:0xc0030300,ecx
c0007561:	c1 e0 1f             	shl    eax,0x1f
c0007564:	89 d7                	mov    edi,edx
c0007566:	89 c6                	mov    esi,eax
c0007568:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000756c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007574:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000757a:	75 10                	jne    c000758c <KiCreateSymlinkID()+0x4f>
c000757c:	83 ec 0c             	sub    esp,0xc
c000757f:	68 d1 6f 02 c0       	push   0xc0026fd1
c0007584:	e8 2f 87 00 00       	call   c000fcb8 <KePanic(char const*)>
c0007589:	83 c4 10             	add    esp,0x10
c000758c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007590:	75 04                	jne    c0007596 <KiCreateSymlinkID()+0x59>
c0007592:	39 f5                	cmp    ebp,esi
c0007594:	74 b0                	je     c0007546 <KiCreateSymlinkID()+0x9>
c0007596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000759e:	31 f0                	xor    eax,esi
c00075a0:	83 c4 1c             	add    esp,0x1c
c00075a3:	31 fa                	xor    edx,edi
c00075a5:	5b                   	pop    ebx
c00075a6:	5e                   	pop    esi
c00075a7:	5f                   	pop    edi
c00075a8:	5d                   	pop    ebp
c00075a9:	c3                   	ret    

c00075aa <KeRegisterSymlink(char const*, unsigned long long)>:
c00075aa:	53                   	push   ebx
c00075ab:	83 ec 0c             	sub    esp,0xc
c00075ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00075b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075ba:	a1 c0 de 02 c0       	mov    eax,ds:0xc002dec0
c00075bf:	68 00 01 00 00       	push   0x100
c00075c4:	89 0c c5 e4 de 02 c0 	mov    DWORD PTR [eax*8-0x3ffd211c],ecx
c00075cb:	6a 00                	push   0x0
c00075cd:	89 14 c5 e0 de 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2120],edx
c00075d4:	c1 e0 08             	shl    eax,0x8
c00075d7:	05 00 df 02 c0       	add    eax,0xc002df00
c00075dc:	50                   	push   eax
c00075dd:	e8 0e 8f ff ff       	call   c00004f0 <memset>
c00075e2:	58                   	pop    eax
c00075e3:	a1 c0 de 02 c0       	mov    eax,ds:0xc002dec0
c00075e8:	5a                   	pop    edx
c00075e9:	c1 e0 08             	shl    eax,0x8
c00075ec:	53                   	push   ebx
c00075ed:	05 00 df 02 c0       	add    eax,0xc002df00
c00075f2:	50                   	push   eax
c00075f3:	e8 48 90 ff ff       	call   c0000640 <strcpy>
c00075f8:	89 d8                	mov    eax,ebx
c00075fa:	e8 1d ff ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00075ff:	ba 01 00 00 00       	mov    edx,0x1
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	e8 d6 fd ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000760c:	a1 c0 de 02 c0       	mov    eax,ds:0xc002dec0
c0007611:	83 c4 10             	add    esp,0x10
c0007614:	40                   	inc    eax
c0007615:	a3 c0 de 02 c0       	mov    ds:0xc002dec0,eax
c000761a:	83 f8 03             	cmp    eax,0x3
c000761d:	7e 09                	jle    c0007628 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000761f:	83 c4 08             	add    esp,0x8
c0007622:	5b                   	pop    ebx
c0007623:	e9 ea fd ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>
c0007628:	83 c4 08             	add    esp,0x8
c000762b:	5b                   	pop    ebx
c000762c:	c3                   	ret    

c000762d <KeInitialiseSymlinks()>:
c000762d:	57                   	push   edi
c000762e:	56                   	push   esi
c000762f:	53                   	push   ebx
c0007630:	81 ec 14 01 00 00    	sub    esp,0x114
c0007636:	c7 05 00 03 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030300,0x0
c0007640:	68 00 20 00 00       	push   0x2000
c0007645:	c7 05 c0 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dec0,0x0
c000764f:	6a 00                	push   0x0
c0007651:	68 00 e3 02 c0       	push   0xc002e300
c0007656:	e8 95 8e ff ff       	call   c00004f0 <memset>
c000765b:	59                   	pop    ecx
c000765c:	5b                   	pop    ebx
c000765d:	6a 00                	push   0x0
c000765f:	68 17 75 00 c0       	push   0xc0007517
c0007664:	e8 ab 5b 00 00       	call   c000d214 <KeRegisterAtexit(void (*)(void*), void*)>
c0007669:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007670:	e8 ee 81 00 00       	call   c000f863 <malloc>
c0007675:	83 c4 0c             	add    esp,0xc
c0007678:	89 c3                	mov    ebx,eax
c000767a:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0007680:	68 4b 6f 02 c0       	push   0xc0026f4b
c0007685:	50                   	push   eax
c0007686:	e8 ff 0a 00 00       	call   c000818a <File::File(char const*, Process*)>
c000768b:	83 c4 10             	add    esp,0x10
c000768e:	85 db                	test   ebx,ebx
c0007690:	75 10                	jne    c00076a2 <KeInitialiseSymlinks()+0x75>
c0007692:	83 ec 0c             	sub    esp,0xc
c0007695:	68 da 6f 02 c0       	push   0xc0026fda
c000769a:	e8 19 86 00 00       	call   c000fcb8 <KePanic(char const*)>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	83 ec 0c             	sub    esp,0xc
c00076a5:	53                   	push   ebx
c00076a6:	e8 c1 0d 00 00       	call   c000846c <File::exists()>
c00076ab:	83 c4 10             	add    esp,0x10
c00076ae:	84 c0                	test   al,al
c00076b0:	75 3a                	jne    c00076ec <KeInitialiseSymlinks()+0xbf>
c00076b2:	52                   	push   edx
c00076b3:	52                   	push   edx
c00076b4:	6a 12                	push   0x12
c00076b6:	53                   	push   ebx
c00076b7:	e8 ec 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076bc:	83 c4 10             	add    esp,0x10
c00076bf:	85 c0                	test   eax,eax
c00076c1:	74 10                	je     c00076d3 <KeInitialiseSymlinks()+0xa6>
c00076c3:	83 ec 0c             	sub    esp,0xc
c00076c6:	68 f7 6f 02 c0       	push   0xc0026ff7
c00076cb:	e8 e8 85 00 00       	call   c000fcb8 <KePanic(char const*)>
c00076d0:	83 c4 10             	add    esp,0x10
c00076d3:	83 ec 0c             	sub    esp,0xc
c00076d6:	53                   	push   ebx
c00076d7:	e8 2a 0b 00 00       	call   c0008206 <File::close()>
c00076dc:	83 c4 10             	add    esp,0x10
c00076df:	85 db                	test   ebx,ebx
c00076e1:	0f 84 9e 00 00 00    	je     c0007785 <KeInitialiseSymlinks()+0x158>
c00076e7:	e9 8d 00 00 00       	jmp    c0007779 <KeInitialiseSymlinks()+0x14c>
c00076ec:	50                   	push   eax
c00076ed:	50                   	push   eax
c00076ee:	6a 01                	push   0x1
c00076f0:	53                   	push   ebx
c00076f1:	e8 b2 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076f6:	83 c4 10             	add    esp,0x10
c00076f9:	85 c0                	test   eax,eax
c00076fb:	74 10                	je     c000770d <KeInitialiseSymlinks()+0xe0>
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	68 14 70 02 c0       	push   0xc0027014
c0007705:	e8 ae 85 00 00       	call   c000fcb8 <KePanic(char const*)>
c000770a:	83 c4 10             	add    esp,0x10
c000770d:	83 ec 0c             	sub    esp,0xc
c0007710:	ff 05 00 03 03 c0    	inc    DWORD PTR ds:0xc0030300
c0007716:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000771a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000771c:	57                   	push   edi
c000771d:	8d 74 24 20          	lea    esi,[esp+0x20]
c0007721:	56                   	push   esi
c0007722:	6a 00                	push   0x0
c0007724:	68 00 01 00 00       	push   0x100
c0007729:	53                   	push   ebx
c000772a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000772d:	83 c4 20             	add    esp,0x20
c0007730:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007738:	75 33                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c000773a:	83 ec 0c             	sub    esp,0xc
c000773d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000773f:	57                   	push   edi
c0007740:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007744:	52                   	push   edx
c0007745:	6a 00                	push   0x0
c0007747:	6a 08                	push   0x8
c0007749:	53                   	push   ebx
c000774a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000774d:	83 c4 20             	add    esp,0x20
c0007750:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007755:	75 16                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c0007757:	89 f0                	mov    eax,esi
c0007759:	e8 be fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c000775e:	ba 01 00 00 00       	mov    edx,0x1
c0007763:	0f b7 c0             	movzx  eax,ax
c0007766:	e8 77 fc ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000776b:	eb a0                	jmp    c000770d <KeInitialiseSymlinks()+0xe0>
c000776d:	83 ec 0c             	sub    esp,0xc
c0007770:	53                   	push   ebx
c0007771:	e8 90 0a 00 00       	call   c0008206 <File::close()>
c0007776:	83 c4 10             	add    esp,0x10
c0007779:	83 ec 0c             	sub    esp,0xc
c000777c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000777e:	53                   	push   ebx
c000777f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	81 c4 10 01 00 00    	add    esp,0x110
c000778b:	5b                   	pop    ebx
c000778c:	5e                   	pop    esi
c000778d:	5f                   	pop    edi
c000778e:	c3                   	ret    

c000778f <KiIsSymlinkRegistered(char const*)>:
c000778f:	55                   	push   ebp
c0007790:	57                   	push   edi
c0007791:	56                   	push   esi
c0007792:	53                   	push   ebx
c0007793:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007799:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00077a0:	89 f0                	mov    eax,esi
c00077a2:	e8 75 fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00077a7:	0f b7 c0             	movzx  eax,ax
c00077aa:	e8 19 fc ff ff       	call   c00073c8 <KiIsHashInTable(unsigned short)>
c00077af:	31 d2                	xor    edx,edx
c00077b1:	88 c1                	mov    cl,al
c00077b3:	31 c0                	xor    eax,eax
c00077b5:	84 c9                	test   cl,cl
c00077b7:	0f 84 31 01 00 00    	je     c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077bd:	31 db                	xor    ebx,ebx
c00077bf:	39 1d c0 de 02 c0    	cmp    DWORD PTR ds:0xc002dec0,ebx
c00077c5:	7e 30                	jle    c00077f7 <KiIsSymlinkRegistered(char const*)+0x68>
c00077c7:	89 d8                	mov    eax,ebx
c00077c9:	51                   	push   ecx
c00077ca:	c1 e0 08             	shl    eax,0x8
c00077cd:	51                   	push   ecx
c00077ce:	05 00 df 02 c0       	add    eax,0xc002df00
c00077d3:	50                   	push   eax
c00077d4:	56                   	push   esi
c00077d5:	e8 76 8f ff ff       	call   c0000750 <strcmp>
c00077da:	83 c4 10             	add    esp,0x10
c00077dd:	85 c0                	test   eax,eax
c00077df:	75 13                	jne    c00077f4 <KiIsSymlinkRegistered(char const*)+0x65>
c00077e1:	8b 04 dd e0 de 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd2120]
c00077e8:	8b 14 dd e4 de 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd211c]
c00077ef:	e9 fa 00 00 00       	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077f4:	43                   	inc    ebx
c00077f5:	eb c8                	jmp    c00077bf <KiIsSymlinkRegistered(char const*)+0x30>
c00077f7:	83 ec 0c             	sub    esp,0xc
c00077fa:	68 14 01 00 00       	push   0x114
c00077ff:	e8 5f 80 00 00       	call   c000f863 <malloc>
c0007804:	83 c4 0c             	add    esp,0xc
c0007807:	89 c3                	mov    ebx,eax
c0007809:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c000780f:	68 4b 6f 02 c0       	push   0xc0026f4b
c0007814:	50                   	push   eax
c0007815:	e8 70 09 00 00       	call   c000818a <File::File(char const*, Process*)>
c000781a:	83 c4 10             	add    esp,0x10
c000781d:	85 db                	test   ebx,ebx
c000781f:	75 12                	jne    c0007833 <KiIsSymlinkRegistered(char const*)+0xa4>
c0007821:	83 ec 0c             	sub    esp,0xc
c0007824:	68 2f 70 02 c0       	push   0xc002702f
c0007829:	e8 8a 84 00 00       	call   c000fcb8 <KePanic(char const*)>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	eb 10                	jmp    c0007843 <KiIsSymlinkRegistered(char const*)+0xb4>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	53                   	push   ebx
c0007837:	e8 30 0c 00 00       	call   c000846c <File::exists()>
c000783c:	83 c4 10             	add    esp,0x10
c000783f:	84 c0                	test   al,al
c0007841:	74 de                	je     c0007821 <KiIsSymlinkRegistered(char const*)+0x92>
c0007843:	52                   	push   edx
c0007844:	52                   	push   edx
c0007845:	6a 01                	push   0x1
c0007847:	53                   	push   ebx
c0007848:	e8 5b 09 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c000784d:	83 c4 10             	add    esp,0x10
c0007850:	85 c0                	test   eax,eax
c0007852:	74 10                	je     c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007854:	83 ec 0c             	sub    esp,0xc
c0007857:	68 4a 70 02 c0       	push   0xc002704a
c000785c:	e8 57 84 00 00       	call   c000fcb8 <KePanic(char const*)>
c0007861:	83 c4 10             	add    esp,0x10
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007869:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000786d:	55                   	push   ebp
c000786e:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007872:	57                   	push   edi
c0007873:	6a 00                	push   0x0
c0007875:	68 00 01 00 00       	push   0x100
c000787a:	53                   	push   ebx
c000787b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000787e:	83 c4 20             	add    esp,0x20
c0007881:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007889:	75 4b                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c000788b:	83 ec 0c             	sub    esp,0xc
c000788e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007890:	55                   	push   ebp
c0007891:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007895:	52                   	push   edx
c0007896:	6a 00                	push   0x0
c0007898:	6a 08                	push   0x8
c000789a:	53                   	push   ebx
c000789b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000789e:	83 c4 20             	add    esp,0x20
c00078a1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00078a6:	75 2e                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c00078a8:	50                   	push   eax
c00078a9:	50                   	push   eax
c00078aa:	57                   	push   edi
c00078ab:	56                   	push   esi
c00078ac:	e8 9f 8e ff ff       	call   c0000750 <strcmp>
c00078b1:	83 c4 10             	add    esp,0x10
c00078b4:	85 c0                	test   eax,eax
c00078b6:	75 ac                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c00078b8:	83 ec 0c             	sub    esp,0xc
c00078bb:	53                   	push   ebx
c00078bc:	e8 45 09 00 00       	call   c0008206 <File::close()>
c00078c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	eb 18                	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00078d6:	83 ec 0c             	sub    esp,0xc
c00078d9:	53                   	push   ebx
c00078da:	e8 27 09 00 00       	call   c0008206 <File::close()>
c00078df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078e7:	83 c4 10             	add    esp,0x10
c00078ea:	31 c0                	xor    eax,eax
c00078ec:	31 d2                	xor    edx,edx
c00078ee:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078f4:	5b                   	pop    ebx
c00078f5:	5e                   	pop    esi
c00078f6:	5f                   	pop    edi
c00078f7:	5d                   	pop    ebp
c00078f8:	c3                   	ret    

c00078f9 <KeDereferenceSymlink(char const*, char*)>:
c00078f9:	55                   	push   ebp
c00078fa:	57                   	push   edi
c00078fb:	56                   	push   esi
c00078fc:	53                   	push   ebx
c00078fd:	83 ec 48             	sub    esp,0x48
c0007900:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007904:	56                   	push   esi
c0007905:	e8 85 fe ff ff       	call   c000778f <KiIsSymlinkRegistered(char const*)>
c000790a:	83 c4 10             	add    esp,0x10
c000790d:	89 c7                	mov    edi,eax
c000790f:	89 d0                	mov    eax,edx
c0007911:	09 f8                	or     eax,edi
c0007913:	75 07                	jne    c000791c <KeDereferenceSymlink(char const*, char*)+0x23>
c0007915:	31 c0                	xor    eax,eax
c0007917:	e9 7c 01 00 00       	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000791c:	83 ec 0c             	sub    esp,0xc
c000791f:	89 d5                	mov    ebp,edx
c0007921:	68 14 01 00 00       	push   0x114
c0007926:	e8 38 7f 00 00       	call   c000f863 <malloc>
c000792b:	83 c4 0c             	add    esp,0xc
c000792e:	89 c3                	mov    ebx,eax
c0007930:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0007936:	56                   	push   esi
c0007937:	50                   	push   eax
c0007938:	e8 4d 08 00 00       	call   c000818a <File::File(char const*, Process*)>
c000793d:	83 c4 10             	add    esp,0x10
c0007940:	85 db                	test   ebx,ebx
c0007942:	0f 84 32 01 00 00    	je     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007948:	56                   	push   esi
c0007949:	56                   	push   esi
c000794a:	6a 01                	push   0x1
c000794c:	53                   	push   ebx
c000794d:	e8 56 08 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007952:	83 c4 10             	add    esp,0x10
c0007955:	85 c0                	test   eax,eax
c0007957:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007959:	74 09                	je     c0007964 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000795b:	83 ec 0c             	sub    esp,0xc
c000795e:	53                   	push   ebx
c000795f:	e9 10 01 00 00       	jmp    c0007a74 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0007964:	83 ec 0c             	sub    esp,0xc
c0007967:	8d 74 24 18          	lea    esi,[esp+0x18]
c000796b:	56                   	push   esi
c000796c:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007970:	52                   	push   edx
c0007971:	6a 00                	push   0x0
c0007973:	6a 08                	push   0x8
c0007975:	53                   	push   ebx
c0007976:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 e2 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007984:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007989:	0f 85 d7 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007994:	56                   	push   esi
c0007995:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007999:	52                   	push   edx
c000799a:	6a 00                	push   0x0
c000799c:	6a 08                	push   0x8
c000799e:	53                   	push   ebx
c000799f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079a2:	83 c4 20             	add    esp,0x20
c00079a5:	85 c0                	test   eax,eax
c00079a7:	0f 85 b9 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ad:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00079b2:	0f 85 ae 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b8:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079bc:	0f 85 53 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079c2:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079c6:	0f 85 49 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079d4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079dc:	51                   	push   ecx
c00079dd:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079e1:	50                   	push   eax
c00079e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079e6:	50                   	push   eax
c00079e7:	53                   	push   ebx
c00079e8:	e8 bd 0a 00 00       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00079ed:	83 c4 10             	add    esp,0x10
c00079f0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079f5:	75 6f                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f7:	31 c9                	xor    ecx,ecx
c00079f9:	bf 0f 00 00 00       	mov    edi,0xf
c00079fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a06:	39 c7                	cmp    edi,eax
c0007a08:	89 cf                	mov    edi,ecx
c0007a0a:	19 d7                	sbb    edi,edx
c0007a0c:	73 58                	jae    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a0e:	83 c0 f0             	add    eax,0xfffffff0
c0007a11:	bf ff 00 00 00       	mov    edi,0xff
c0007a16:	83 d2 ff             	adc    edx,0xffffffff
c0007a19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a1d:	39 c7                	cmp    edi,eax
c0007a1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a23:	19 d1                	sbb    ecx,edx
c0007a25:	72 53                	jb     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a27:	40                   	inc    eax
c0007a28:	52                   	push   edx
c0007a29:	50                   	push   eax
c0007a2a:	6a 00                	push   0x0
c0007a2c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a30:	e8 bb 8a ff ff       	call   c00004f0 <memset>
c0007a35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a37:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a3a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a46:	53                   	push   ebx
c0007a47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a4a:	83 c4 20             	add    esp,0x20
c0007a4d:	85 c0                	test   eax,eax
c0007a4f:	75 15                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a55:	89 c7                	mov    edi,eax
c0007a57:	c1 ff 1f             	sar    edi,0x1f
c0007a5a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a5e:	75 06                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a60:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a64:	74 19                	je     c0007a7f <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a66:	83 ec 0c             	sub    esp,0xc
c0007a69:	53                   	push   ebx
c0007a6a:	e8 97 07 00 00       	call   c0008206 <File::close()>
c0007a6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a77:	83 c4 10             	add    esp,0x10
c0007a7a:	83 c8 ff             	or     eax,0xffffffff
c0007a7d:	eb 19                	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a7f:	83 ec 0c             	sub    esp,0xc
c0007a82:	53                   	push   ebx
c0007a83:	e8 7e 07 00 00       	call   c0008206 <File::close()>
c0007a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a90:	83 c4 10             	add    esp,0x10
c0007a93:	b8 01 00 00 00       	mov    eax,0x1
c0007a98:	83 c4 3c             	add    esp,0x3c
c0007a9b:	5b                   	pop    ebx
c0007a9c:	5e                   	pop    esi
c0007a9d:	5f                   	pop    edi
c0007a9e:	5d                   	pop    ebp
c0007a9f:	c3                   	ret    

c0007aa0 <KeCreateSymlink(char const*, char const*)>:
c0007aa0:	55                   	push   ebp
c0007aa1:	57                   	push   edi
c0007aa2:	56                   	push   esi
c0007aa3:	53                   	push   ebx
c0007aa4:	83 ec 38             	sub    esp,0x38
c0007aa7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007aab:	68 14 01 00 00       	push   0x114
c0007ab0:	e8 ae 7d 00 00       	call   c000f863 <malloc>
c0007ab5:	6a 00                	push   0x0
c0007ab7:	89 c3                	mov    ebx,eax
c0007ab9:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0007abf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007ac3:	50                   	push   eax
c0007ac4:	e8 c3 05 00 00       	call   c000808c <File::File(char const*, Process*, bool)>
c0007ac9:	83 c4 20             	add    esp,0x20
c0007acc:	b8 01 00 00 00       	mov    eax,0x1
c0007ad1:	85 db                	test   ebx,ebx
c0007ad3:	0f 84 fb 00 00 00    	je     c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007ad9:	52                   	push   edx
c0007ada:	52                   	push   edx
c0007adb:	6a 12                	push   0x12
c0007add:	53                   	push   ebx
c0007ade:	e8 c5 06 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007ae3:	83 c4 10             	add    esp,0x10
c0007ae6:	85 c0                	test   eax,eax
c0007ae8:	74 0b                	je     c0007af5 <KeCreateSymlink(char const*, char const*)+0x55>
c0007aea:	83 ec 0c             	sub    esp,0xc
c0007aed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aef:	53                   	push   ebx
c0007af0:	e9 d4 00 00 00       	jmp    c0007bc9 <KeCreateSymlink(char const*, char const*)+0x129>
c0007af5:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007af9:	be 65 70 02 c0       	mov    esi,0xc0027065
c0007afe:	b9 09 00 00 00       	mov    ecx,0x9
c0007b03:	fc                   	cld    
c0007b04:	83 ec 0c             	sub    esp,0xc
c0007b07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007b09:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007b0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0f:	56                   	push   esi
c0007b10:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007b14:	52                   	push   edx
c0007b15:	6a 00                	push   0x0
c0007b17:	6a 08                	push   0x8
c0007b19:	53                   	push   ebx
c0007b1a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b1d:	83 c4 20             	add    esp,0x20
c0007b20:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b25:	0f 85 90 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b2b:	85 c0                	test   eax,eax
c0007b2d:	0f 85 88 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b33:	e8 05 fa ff ff       	call   c000753d <KiCreateSymlinkID()>
c0007b38:	83 ec 0c             	sub    esp,0xc
c0007b3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b3f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b45:	56                   	push   esi
c0007b46:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b4a:	52                   	push   edx
c0007b4b:	6a 00                	push   0x0
c0007b4d:	6a 08                	push   0x8
c0007b4f:	53                   	push   ebx
c0007b50:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b53:	83 c4 20             	add    esp,0x20
c0007b56:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b5b:	75 5e                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b5d:	85 c0                	test   eax,eax
c0007b5f:	75 5a                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b61:	83 ec 0c             	sub    esp,0xc
c0007b64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b66:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b69:	55                   	push   ebp
c0007b6a:	e8 01 8a ff ff       	call   c0000570 <strlen>
c0007b6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b72:	31 d2                	xor    edx,edx
c0007b74:	55                   	push   ebp
c0007b75:	52                   	push   edx
c0007b76:	50                   	push   eax
c0007b77:	53                   	push   ebx
c0007b78:	ff d7                	call   edi
c0007b7a:	83 c4 14             	add    esp,0x14
c0007b7d:	89 c6                	mov    esi,eax
c0007b7f:	55                   	push   ebp
c0007b80:	e8 eb 89 ff ff       	call   c0000570 <strlen>
c0007b85:	83 c4 10             	add    esp,0x10
c0007b88:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b8c:	75 2d                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b8e:	85 f6                	test   esi,esi
c0007b90:	75 29                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b92:	50                   	push   eax
c0007b93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b9b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b9f:	e8 06 fa ff ff       	call   c00075aa <KeRegisterSymlink(char const*, unsigned long long)>
c0007ba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ba7:	e8 5a 06 00 00       	call   c0008206 <File::close()>
c0007bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb4:	83 c4 10             	add    esp,0x10
c0007bb7:	31 c0                	xor    eax,eax
c0007bb9:	eb 19                	jmp    c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007bbb:	83 ec 0c             	sub    esp,0xc
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 42 06 00 00       	call   c0008206 <File::close()>
c0007bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bcc:	83 c4 10             	add    esp,0x10
c0007bcf:	b8 01 00 00 00       	mov    eax,0x1
c0007bd4:	83 c4 2c             	add    esp,0x2c
c0007bd7:	5b                   	pop    ebx
c0007bd8:	5e                   	pop    esi
c0007bd9:	5f                   	pop    edi
c0007bda:	5d                   	pop    ebp
c0007bdb:	c3                   	ret    

c0007bdc <File::read(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::read(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::read(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <File::write(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <File::write(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <File::write(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::read(unsigned long long, void*, int*)>:
c0007c8c:	53                   	push   ebx
c0007c8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c95:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c9c:	83 f8 19             	cmp    eax,0x19
c0007c9f:	77 35                	ja     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca1:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0007ca8:	85 c0                	test   eax,eax
c0007caa:	74 2a                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007cb2:	85 c0                	test   eax,eax
c0007cb4:	74 20                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007cba:	74 21                	je     c0007cdd <Directory::read(unsigned long long, void*, int*)+0x51>
c0007cbc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007cbe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cc2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ccc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cd0:	5b                   	pop    ebx
c0007cd1:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cd4:	ff e0                	jmp    eax
c0007cd6:	b8 0b 00 00 00       	mov    eax,0xb
c0007cdb:	eb 05                	jmp    c0007ce2 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cdd:	b8 05 00 00 00       	mov    eax,0x5
c0007ce2:	5b                   	pop    ebx
c0007ce3:	c3                   	ret    

c0007ce4 <Directory::write(unsigned long long, void*, int*)>:
c0007ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ce8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cef:	b8 0b 00 00 00       	mov    eax,0xb
c0007cf4:	83 fa 19             	cmp    edx,0x19
c0007cf7:	77 18                	ja     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cf9:	8b 14 95 e0 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf520]
c0007d00:	85 d2                	test   edx,edx
c0007d02:	74 0d                	je     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007d04:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007d0b:	19 c0                	sbb    eax,eax
c0007d0d:	83 e0 0a             	and    eax,0xa
c0007d10:	40                   	inc    eax
c0007d11:	c3                   	ret    

c0007d12 <File::isAtty()>:
c0007d12:	31 c0                	xor    eax,eax
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <Directory::isAtty()>:
c0007d16:	31 c0                	xor    eax,eax
c0007d18:	c3                   	ret    
c0007d19:	90                   	nop

c0007d1a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d1a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d1f:	c3                   	ret    

c0007d20 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d20:	b8 0a 00 00 00       	mov    eax,0xa
c0007d25:	c3                   	ret    

c0007d26 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d26:	31 c0                	xor    eax,eax
c0007d28:	31 d2                	xor    edx,edx
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <File::~File()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	ba 3c 71 02 c0       	mov    edx,0xc002713c
c0007d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d38:	89 10                	mov    DWORD PTR [eax],edx
c0007d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d3e:	83 ec 0c             	sub    esp,0xc
c0007d41:	50                   	push   eax
c0007d42:	e8 9b b2 00 00       	call   c0012fe2 <UnixFile::~UnixFile()>
c0007d47:	83 c4 10             	add    esp,0x10
c0007d4a:	90                   	nop
c0007d4b:	83 c4 0c             	add    esp,0xc
c0007d4e:	c3                   	ret    
c0007d4f:	90                   	nop

c0007d50 <File::~File()>:
c0007d50:	83 ec 0c             	sub    esp,0xc
c0007d53:	83 ec 0c             	sub    esp,0xc
c0007d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d5a:	e8 cd ff ff ff       	call   c0007d2c <File::~File()>
c0007d5f:	83 c4 10             	add    esp,0x10
c0007d62:	83 ec 08             	sub    esp,0x8
c0007d65:	68 14 01 00 00       	push   0x114
c0007d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d6e:	e8 09 56 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c0007d73:	83 c4 10             	add    esp,0x10
c0007d76:	83 c4 0c             	add    esp,0xc
c0007d79:	c3                   	ret    

c0007d7a <Directory::~Directory()>:
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	ba 58 71 02 c0       	mov    edx,0xc0027158
c0007d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d86:	89 10                	mov    DWORD PTR [eax],edx
c0007d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	50                   	push   eax
c0007d90:	e8 4d b2 00 00       	call   c0012fe2 <UnixFile::~UnixFile()>
c0007d95:	83 c4 10             	add    esp,0x10
c0007d98:	90                   	nop
c0007d99:	83 c4 0c             	add    esp,0xc
c0007d9c:	c3                   	ret    
c0007d9d:	90                   	nop

c0007d9e <Directory::~Directory()>:
c0007d9e:	83 ec 0c             	sub    esp,0xc
c0007da1:	83 ec 0c             	sub    esp,0xc
c0007da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da8:	e8 cd ff ff ff       	call   c0007d7a <Directory::~Directory()>
c0007dad:	83 c4 10             	add    esp,0x10
c0007db0:	83 ec 08             	sub    esp,0x8
c0007db3:	68 14 01 00 00       	push   0x114
c0007db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dbc:	e8 bb 55 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	83 c4 0c             	add    esp,0xc
c0007dc7:	c3                   	ret    

c0007dc8 <Filesystem::Filesystem()>:
c0007dc8:	ba d0 70 02 c0       	mov    edx,0xc00270d0
c0007dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dd1:	89 10                	mov    DWORD PTR [eax],edx
c0007dd3:	8b 15 04 03 03 c0    	mov    edx,DWORD PTR ds:0xc0030304
c0007dd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007de4:	a3 04 03 03 c0       	mov    ds:0xc0030304,eax
c0007de9:	90                   	nop
c0007dea:	c3                   	ret    
c0007deb:	90                   	nop

c0007dec <Filesystem::~Filesystem()>:
c0007dec:	ba d0 70 02 c0       	mov    edx,0xc00270d0
c0007df1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007df5:	89 10                	mov    DWORD PTR [eax],edx
c0007df7:	90                   	nop
c0007df8:	c3                   	ret    
c0007df9:	90                   	nop

c0007dfa <Filesystem::~Filesystem()>:
c0007dfa:	83 ec 0c             	sub    esp,0xc
c0007dfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007e01:	e8 e6 ff ff ff       	call   c0007dec <Filesystem::~Filesystem()>
c0007e06:	83 c4 04             	add    esp,0x4
c0007e09:	83 ec 08             	sub    esp,0x8
c0007e0c:	6a 08                	push   0x8
c0007e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e12:	e8 65 55 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c0007e17:	83 c4 10             	add    esp,0x10
c0007e1a:	83 c4 0c             	add    esp,0xc
c0007e1d:	c3                   	ret    

c0007e1e <Fs::getcwd(Process*, char*, int)>:
c0007e1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e22:	31 c0                	xor    eax,eax
c0007e24:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e27:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e2b:	7d 15                	jge    c0007e42 <Fs::getcwd(Process*, char*, int)+0x24>
c0007e2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e31:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e38:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e3b:	84 c9                	test   cl,cl
c0007e3d:	74 06                	je     c0007e45 <Fs::getcwd(Process*, char*, int)+0x27>
c0007e3f:	40                   	inc    eax
c0007e40:	eb e2                	jmp    c0007e24 <Fs::getcwd(Process*, char*, int)+0x6>
c0007e42:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e45:	31 c0                	xor    eax,eax
c0007e47:	c3                   	ret    

c0007e48 <Fs::initVFS()>:
c0007e48:	83 ec 18             	sub    esp,0x18
c0007e4b:	6a 08                	push   0x8
c0007e4d:	e8 11 7a 00 00       	call   c000f863 <malloc>
c0007e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e55:	e8 32 4b 01 00       	call   c001c98c <FAT::FAT()>
c0007e5a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e61:	e8 fd 79 00 00       	call   c000f863 <malloc>
c0007e66:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e69:	e8 4a 5a 01 00       	call   c001d8b8 <ISO9660::ISO9660()>
c0007e6e:	83 c4 1c             	add    esp,0x1c
c0007e71:	c3                   	ret    

c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e72:	55                   	push   ebp
c0007e73:	57                   	push   edi
c0007e74:	56                   	push   esi
c0007e75:	53                   	push   ebx
c0007e76:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e7c:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e83:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e8a:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e92:	68 00 04 00 00       	push   0x400
c0007e97:	6a 00                	push   0x0
c0007e99:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e9d:	57                   	push   edi
c0007e9e:	e8 4d 86 ff ff       	call   c00004f0 <memset>
c0007ea3:	83 c4 10             	add    esp,0x10
c0007ea6:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007eaa:	75 0b                	jne    c0007eb7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007eac:	50                   	push   eax
c0007ead:	50                   	push   eax
c0007eae:	55                   	push   ebp
c0007eaf:	57                   	push   edi
c0007eb0:	e8 8b 87 ff ff       	call   c0000640 <strcpy>
c0007eb5:	eb 51                	jmp    c0007f08 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007eb7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007ebb:	83 f8 5c             	cmp    eax,0x5c
c0007ebe:	74 05                	je     c0007ec5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007ec0:	83 f8 2f             	cmp    eax,0x2f
c0007ec3:	75 1e                	jne    c0007ee3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007ec5:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0007ece:	3c 60                	cmp    al,0x60
c0007ed0:	7e 03                	jle    c0007ed5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007ed2:	83 e8 20             	sub    eax,0x20
c0007ed5:	88 04 24             	mov    BYTE PTR [esp],al
c0007ed8:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007edf:	50                   	push   eax
c0007ee0:	50                   	push   eax
c0007ee1:	eb 1e                	jmp    c0007f01 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007ee3:	50                   	push   eax
c0007ee4:	50                   	push   eax
c0007ee5:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007eec:	57                   	push   edi
c0007eed:	e8 4e 87 ff ff       	call   c0000640 <strcpy>
c0007ef2:	58                   	pop    eax
c0007ef3:	5a                   	pop    edx
c0007ef4:	68 5e 8a 02 c0       	push   0xc0028a5e
c0007ef9:	57                   	push   edi
c0007efa:	e8 41 89 ff ff       	call   c0000840 <strcat>
c0007eff:	59                   	pop    ecx
c0007f00:	58                   	pop    eax
c0007f01:	55                   	push   ebp
c0007f02:	57                   	push   edi
c0007f03:	e8 38 89 ff ff       	call   c0000840 <strcat>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007f0e:	3c 60                	cmp    al,0x60
c0007f10:	7e 03                	jle    c0007f15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007f12:	83 e8 20             	sub    eax,0x20
c0007f15:	88 04 24             	mov    BYTE PTR [esp],al
c0007f18:	88 06                	mov    BYTE PTR [esi],al
c0007f1a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007f21:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007f27:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007f2b:	bf 03 00 00 00       	mov    edi,0x3
c0007f30:	b8 03 00 00 00       	mov    eax,0x3
c0007f35:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007f39:	89 e9                	mov    ecx,ebp
c0007f3b:	85 ed                	test   ebp,ebp
c0007f3d:	0f 84 97 00 00 00    	je     c0007fda <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007f43:	8d 57 01             	lea    edx,[edi+0x1]
c0007f46:	83 fd 5c             	cmp    ebp,0x5c
c0007f49:	74 05                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007f4b:	83 fd 2f             	cmp    ebp,0x2f
c0007f4e:	75 12                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f50:	89 c5                	mov    ebp,eax
c0007f52:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007f57:	74 09                	je     c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f59:	40                   	inc    eax
c0007f5a:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f5e:	89 d7                	mov    edi,edx
c0007f60:	eb d3                	jmp    c0007f35 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f62:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f67:	0f be e9             	movsx  ebp,cl
c0007f6a:	75 5e                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f6c:	83 fd 2e             	cmp    ebp,0x2e
c0007f6f:	75 59                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f71:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f75:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f7a:	74 18                	je     c0007f94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f7c:	83 fd 2e             	cmp    ebp,0x2e
c0007f7f:	74 53                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f81:	89 fa                	mov    edx,edi
c0007f83:	42                   	inc    edx
c0007f84:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f88:	83 f9 2f             	cmp    ecx,0x2f
c0007f8b:	74 f6                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f8d:	83 f9 5c             	cmp    ecx,0x5c
c0007f90:	74 f1                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f92:	eb ca                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f94:	83 fd 2e             	cmp    ebp,0x2e
c0007f97:	74 3b                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f99:	83 f8 03             	cmp    eax,0x3
c0007f9c:	74 c0                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f9e:	42                   	inc    edx
c0007f9f:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007fa3:	83 f9 5c             	cmp    ecx,0x5c
c0007fa6:	74 f6                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fa8:	83 f9 2f             	cmp    ecx,0x2f
c0007fab:	74 f1                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fad:	48                   	dec    eax
c0007fae:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fb2:	75 06                	jne    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fb4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007fba:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fbe:	74 07                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007fc0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fc4:	48                   	dec    eax
c0007fc5:	eb f3                	jmp    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fc7:	40                   	inc    eax
c0007fc8:	eb 94                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fca:	83 fd 5c             	cmp    ebp,0x5c
c0007fcd:	74 8f                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fcf:	83 fd 2f             	cmp    ebp,0x2f
c0007fd2:	74 8a                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fd4:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007fd7:	40                   	inc    eax
c0007fd8:	eb 84                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fda:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	56                   	push   esi
c0007fe2:	e8 89 85 ff ff       	call   c0000570 <strlen>
c0007fe7:	83 c4 10             	add    esp,0x10
c0007fea:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007fef:	74 17                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007ff1:	83 ec 0c             	sub    esp,0xc
c0007ff4:	56                   	push   esi
c0007ff5:	e8 76 85 ff ff       	call   c0000570 <strlen>
c0007ffa:	83 c4 10             	add    esp,0x10
c0007ffd:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0008002:	74 04                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008004:	31 ff                	xor    edi,edi
c0008006:	eb 5c                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008008:	83 ec 0c             	sub    esp,0xc
c000800b:	56                   	push   esi
c000800c:	e8 5f 85 ff ff       	call   c0000570 <strlen>
c0008011:	83 c4 10             	add    esp,0x10
c0008014:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0008019:	74 e9                	je     c0008004 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000801b:	83 ec 0c             	sub    esp,0xc
c000801e:	56                   	push   esi
c000801f:	e8 4c 85 ff ff       	call   c0000570 <strlen>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000802c:	eb b0                	jmp    c0007fde <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000802e:	52                   	push   edx
c000802f:	52                   	push   edx
c0008030:	56                   	push   esi
c0008031:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0008035:	55                   	push   ebp
c0008036:	e8 05 86 ff ff       	call   c0000640 <strcpy>
c000803b:	59                   	pop    ecx
c000803c:	58                   	pop    eax
c000803d:	56                   	push   esi
c000803e:	55                   	push   ebp
c000803f:	e8 b5 f8 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0008044:	83 c4 10             	add    esp,0x10
c0008047:	48                   	dec    eax
c0008048:	75 37                	jne    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000804a:	50                   	push   eax
c000804b:	56                   	push   esi
c000804c:	55                   	push   ebp
c000804d:	68 6e 70 02 c0       	push   0xc002706e
c0008052:	e8 25 ef ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	8d 47 01             	lea    eax,[edi+0x1]
c000805d:	83 ff 14             	cmp    edi,0x14
c0008060:	74 08                	je     c000806a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c0008062:	89 c7                	mov    edi,eax
c0008064:	85 db                	test   ebx,ebx
c0008066:	75 c6                	jne    c000802e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008068:	eb 17                	jmp    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000806a:	83 ec 0c             	sub    esp,0xc
c000806d:	bf 15 00 00 00       	mov    edi,0x15
c0008072:	68 89 70 02 c0       	push   0xc0027089
c0008077:	e8 3c 7c 00 00       	call   c000fcb8 <KePanic(char const*)>
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	eb e3                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008081:	81 c4 0c 04 00 00    	add    esp,0x40c
c0008087:	5b                   	pop    ebx
c0008088:	5e                   	pop    esi
c0008089:	5f                   	pop    edi
c000808a:	5d                   	pop    ebp
c000808b:	c3                   	ret    

c000808c <File::File(char const*, Process*, bool)>:
c000808c:	83 ec 1c             	sub    esp,0x1c
c000808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008093:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809b:	83 ec 08             	sub    esp,0x8
c000809e:	6a 00                	push   0x0
c00080a0:	50                   	push   eax
c00080a1:	e8 56 ad 00 00       	call   c0012dfc <UnixFile::UnixFile(int)>
c00080a6:	83 c4 10             	add    esp,0x10
c00080a9:	ba 3c 71 02 c0       	mov    edx,0xc002713c
c00080ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b2:	89 10                	mov    DWORD PTR [eax],edx
c00080b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b9:	85 c0                	test   eax,eax
c00080bb:	74 0f                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080bd:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c00080c2:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c6:	74 04                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080c8:	b0 01                	mov    al,0x1
c00080ca:	eb 02                	jmp    c00080ce <File::File(char const*, Process*, bool)+0x42>
c00080cc:	b0 00                	mov    al,0x0
c00080ce:	0f b6 c0             	movzx  eax,al
c00080d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d5:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080df:	83 c2 0d             	add    edx,0xd
c00080e2:	50                   	push   eax
c00080e3:	51                   	push   ecx
c00080e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e8:	52                   	push   edx
c00080e9:	e8 84 fd ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ee:	83 c4 10             	add    esp,0x10
c00080f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fc:	83 c2 0d             	add    edx,0xd
c00080ff:	83 ec 04             	sub    esp,0x4
c0008102:	50                   	push   eax
c0008103:	52                   	push   edx
c0008104:	68 af 70 02 c0       	push   0xc00270af
c0008109:	e8 6e ee ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000810e:	83 c4 10             	add    esp,0x10
c0008111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008115:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008118:	83 e8 41             	sub    eax,0x41
c000811b:	88 c2                	mov    dl,al
c000811d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008121:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000812b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008133:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008139:	0f b6 c0             	movzx  eax,al
c000813c:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0008143:	85 c0                	test   eax,eax
c0008145:	74 3e                	je     c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000814b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008151:	0f b6 c0             	movzx  eax,al
c0008154:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c000815b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008161:	85 c0                	test   eax,eax
c0008163:	75 20                	jne    c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008169:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816f:	0f b6 c0             	movzx  eax,al
c0008172:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0008179:	83 ec 0c             	sub    esp,0xc
c000817c:	50                   	push   eax
c000817d:	e8 2e 28 00 00       	call   c000a9b0 <LogicalDisk::mount()>
c0008182:	83 c4 10             	add    esp,0x10
c0008185:	90                   	nop
c0008186:	83 c4 1c             	add    esp,0x1c
c0008189:	c3                   	ret    

c000818a <File::File(char const*, Process*)>:
c000818a:	83 ec 0c             	sub    esp,0xc
c000818d:	6a 01                	push   0x1
c000818f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000819b:	e8 ec fe ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00081a0:	83 c4 10             	add    esp,0x10
c00081a3:	90                   	nop
c00081a4:	83 c4 0c             	add    esp,0xc
c00081a7:	c3                   	ret    

c00081a8 <File::open(FileOpenMode)>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081bc:	83 fa 19             	cmp    edx,0x19
c00081bf:	77 40                	ja     c0008201 <File::open(FileOpenMode)+0x59>
c00081c1:	8b 14 95 e0 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf520]
c00081c8:	85 d2                	test   edx,edx
c00081ca:	74 35                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081cc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d2:	85 d2                	test   edx,edx
c00081d4:	74 2b                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081d6:	b8 06 00 00 00       	mov    eax,0x6
c00081db:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081df:	75 20                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081ed:	51                   	push   ecx
c00081ee:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081f1:	51                   	push   ecx
c00081f2:	52                   	push   edx
c00081f3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f6:	83 c4 10             	add    esp,0x10
c00081f9:	85 c0                	test   eax,eax
c00081fb:	75 04                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081fd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008201:	83 c4 08             	add    esp,0x8
c0008204:	5b                   	pop    ebx
c0008205:	c3                   	ret    

c0008206 <File::close()>:
c0008206:	53                   	push   ebx
c0008207:	b8 0b 00 00 00       	mov    eax,0xb
c000820c:	83 ec 08             	sub    esp,0x8
c000820f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008213:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000821a:	83 f9 19             	cmp    ecx,0x19
c000821d:	77 41                	ja     c0008260 <File::close()+0x5a>
c000821f:	8b 1c 8d e0 0a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffcf520]
c0008226:	85 db                	test   ebx,ebx
c0008228:	74 36                	je     c0008260 <File::close()+0x5a>
c000822a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008231:	74 2d                	je     c0008260 <File::close()+0x5a>
c0008233:	b8 05 00 00 00       	mov    eax,0x5
c0008238:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000823c:	74 22                	je     c0008260 <File::close()+0x5a>
c000823e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008242:	8b 04 8d e0 0a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffcf520]
c0008249:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824f:	53                   	push   ebx
c0008250:	53                   	push   ebx
c0008251:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008253:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008259:	50                   	push   eax
c000825a:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825d:	83 c4 10             	add    esp,0x10
c0008260:	83 c4 08             	add    esp,0x8
c0008263:	5b                   	pop    ebx
c0008264:	c3                   	ret    
c0008265:	90                   	nop

c0008266 <File::seek(unsigned long long)>:
c0008266:	56                   	push   esi
c0008267:	53                   	push   ebx
c0008268:	b8 0b 00 00 00       	mov    eax,0xb
c000826d:	51                   	push   ecx
c000826e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008272:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008276:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008281:	83 fa 19             	cmp    edx,0x19
c0008284:	77 31                	ja     c00082b7 <File::seek(unsigned long long)+0x51>
c0008286:	8b 14 95 e0 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf520]
c000828d:	85 d2                	test   edx,edx
c000828f:	74 26                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c0008291:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008297:	85 d2                	test   edx,edx
c0008299:	74 1c                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c000829b:	b8 05 00 00 00       	mov    eax,0x5
c00082a0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a4:	74 11                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c00082a6:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a8:	53                   	push   ebx
c00082a9:	51                   	push   ecx
c00082aa:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082b0:	52                   	push   edx
c00082b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b4:	83 c4 10             	add    esp,0x10
c00082b7:	5a                   	pop    edx
c00082b8:	5b                   	pop    ebx
c00082b9:	5e                   	pop    esi
c00082ba:	c3                   	ret    
c00082bb:	90                   	nop

c00082bc <File::truncate(unsigned long long)>:
c00082bc:	56                   	push   esi
c00082bd:	53                   	push   ebx
c00082be:	b8 0b 00 00 00       	mov    eax,0xb
c00082c3:	51                   	push   ecx
c00082c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082cc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082d7:	83 fa 19             	cmp    edx,0x19
c00082da:	77 31                	ja     c000830d <File::truncate(unsigned long long)+0x51>
c00082dc:	8b 14 95 e0 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf520]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 26                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082e7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082ed:	85 d2                	test   edx,edx
c00082ef:	74 1c                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082f1:	b8 05 00 00 00       	mov    eax,0x5
c00082f6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082fa:	74 11                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fe:	53                   	push   ebx
c00082ff:	51                   	push   ecx
c0008300:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008306:	52                   	push   edx
c0008307:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000830a:	83 c4 10             	add    esp,0x10
c000830d:	5a                   	pop    edx
c000830e:	5b                   	pop    ebx
c000830f:	5e                   	pop    esi
c0008310:	c3                   	ret    
c0008311:	90                   	nop

c0008312 <File::tell(unsigned long long*)>:
c0008312:	83 ec 0c             	sub    esp,0xc
c0008315:	b8 0b 00 00 00       	mov    eax,0xb
c000831a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008325:	83 fa 19             	cmp    edx,0x19
c0008328:	77 34                	ja     c000835e <File::tell(unsigned long long*)+0x4c>
c000832a:	8b 14 95 e0 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf520]
c0008331:	85 d2                	test   edx,edx
c0008333:	74 29                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c0008335:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000833b:	85 d2                	test   edx,edx
c000833d:	74 1f                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000833f:	b8 05 00 00 00       	mov    eax,0x5
c0008344:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008348:	74 14                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000834a:	50                   	push   eax
c000834b:	8b 02                	mov    eax,DWORD PTR [edx]
c000834d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008351:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008357:	52                   	push   edx
c0008358:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000835b:	83 c4 10             	add    esp,0x10
c000835e:	83 c4 0c             	add    esp,0xc
c0008361:	c3                   	ret    

c0008362 <File::rewind()>:
c0008362:	83 ec 10             	sub    esp,0x10
c0008365:	6a 00                	push   0x0
c0008367:	6a 00                	push   0x0
c0008369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836d:	e8 f4 fe ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0008372:	83 c4 1c             	add    esp,0x1c
c0008375:	c3                   	ret    

c0008376 <File::unlink()>:
c0008376:	83 ec 0c             	sub    esp,0xc
c0008379:	b8 0b 00 00 00       	mov    eax,0xb
c000837e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008382:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008389:	83 f9 19             	cmp    ecx,0x19
c000838c:	77 2f                	ja     c00083bd <File::unlink()+0x47>
c000838e:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c0008395:	85 c9                	test   ecx,ecx
c0008397:	74 24                	je     c00083bd <File::unlink()+0x47>
c0008399:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839f:	85 c9                	test   ecx,ecx
c00083a1:	74 1a                	je     c00083bd <File::unlink()+0x47>
c00083a3:	b8 06 00 00 00       	mov    eax,0x6
c00083a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083ac:	75 0f                	jne    c00083bd <File::unlink()+0x47>
c00083ae:	83 c2 0d             	add    edx,0xd
c00083b1:	50                   	push   eax
c00083b2:	50                   	push   eax
c00083b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b5:	52                   	push   edx
c00083b6:	51                   	push   ecx
c00083b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083ba:	83 c4 10             	add    esp,0x10
c00083bd:	83 c4 0c             	add    esp,0xc
c00083c0:	c3                   	ret    
c00083c1:	90                   	nop

c00083c2 <File::rename(char const*)>:
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	b8 0b 00 00 00       	mov    eax,0xb
c00083ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d5:	83 f9 19             	cmp    ecx,0x19
c00083d8:	77 32                	ja     c000840c <File::rename(char const*)+0x4a>
c00083da:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c00083e1:	85 c9                	test   ecx,ecx
c00083e3:	74 27                	je     c000840c <File::rename(char const*)+0x4a>
c00083e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083eb:	85 c9                	test   ecx,ecx
c00083ed:	74 1d                	je     c000840c <File::rename(char const*)+0x4a>
c00083ef:	b8 06 00 00 00       	mov    eax,0x6
c00083f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f8:	75 12                	jne    c000840c <File::rename(char const*)+0x4a>
c00083fa:	83 c2 0d             	add    edx,0xd
c00083fd:	50                   	push   eax
c00083fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008404:	52                   	push   edx
c0008405:	51                   	push   ecx
c0008406:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008409:	83 c4 10             	add    esp,0x10
c000840c:	83 c4 0c             	add    esp,0xc
c000840f:	c3                   	ret    

c0008410 <File::chfatattr(unsigned char, unsigned char)>:
c0008410:	57                   	push   edi
c0008411:	b8 0b 00 00 00       	mov    eax,0xb
c0008416:	56                   	push   esi
c0008417:	53                   	push   ebx
c0008418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008420:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008427:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000842b:	83 f9 19             	cmp    ecx,0x19
c000842e:	77 37                	ja     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008430:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c0008437:	85 c9                	test   ecx,ecx
c0008439:	74 2c                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000843b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008441:	85 c9                	test   ecx,ecx
c0008443:	74 22                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008445:	b8 06 00 00 00       	mov    eax,0x6
c000844a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000844e:	75 17                	jne    c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	89 f0                	mov    eax,esi
c0008454:	83 c2 0d             	add    edx,0xd
c0008457:	0f b6 f0             	movzx  esi,al
c000845a:	0f b6 db             	movzx  ebx,bl
c000845d:	56                   	push   esi
c000845e:	53                   	push   ebx
c000845f:	52                   	push   edx
c0008460:	51                   	push   ecx
c0008461:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008464:	83 c4 10             	add    esp,0x10
c0008467:	5b                   	pop    ebx
c0008468:	5e                   	pop    esi
c0008469:	5f                   	pop    edi
c000846a:	c3                   	ret    
c000846b:	90                   	nop

c000846c <File::exists()>:
c000846c:	83 ec 0c             	sub    esp,0xc
c000846f:	31 c0                	xor    eax,eax
c0008471:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008475:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847c:	83 f9 19             	cmp    ecx,0x19
c000847f:	77 24                	ja     c00084a5 <File::exists()+0x39>
c0008481:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c0008488:	85 c9                	test   ecx,ecx
c000848a:	74 19                	je     c00084a5 <File::exists()+0x39>
c000848c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008492:	85 c9                	test   ecx,ecx
c0008494:	74 0f                	je     c00084a5 <File::exists()+0x39>
c0008496:	83 c2 0d             	add    edx,0xd
c0008499:	50                   	push   eax
c000849a:	50                   	push   eax
c000849b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849d:	52                   	push   edx
c000849e:	51                   	push   ecx
c000849f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a2:	83 c4 10             	add    esp,0x10
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <File::stat(unsigned long long*, bool*)>:
c00084aa:	56                   	push   esi
c00084ab:	53                   	push   ebx
c00084ac:	50                   	push   eax
c00084ad:	b8 0b 00 00 00       	mov    eax,0xb
c00084b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084c5:	83 f9 19             	cmp    ecx,0x19
c00084c8:	77 3d                	ja     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084ca:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c00084d1:	85 c9                	test   ecx,ecx
c00084d3:	74 32                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084db:	85 c9                	test   ecx,ecx
c00084dd:	74 28                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e5:	74 13                	je     c00084fa <File::stat(unsigned long long*, bool*)+0x50>
c00084e7:	83 ec 04             	sub    esp,0x4
c00084ea:	56                   	push   esi
c00084eb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084f1:	51                   	push   ecx
c00084f2:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f8:	eb 0a                	jmp    c0008504 <File::stat(unsigned long long*, bool*)+0x5a>
c00084fa:	53                   	push   ebx
c00084fb:	83 c2 0d             	add    edx,0xd
c00084fe:	56                   	push   esi
c00084ff:	52                   	push   edx
c0008500:	51                   	push   ecx
c0008501:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008504:	83 c4 10             	add    esp,0x10
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	c3                   	ret    

c000850b <Fs::setcwd(Process*, char*)>:
c000850b:	55                   	push   ebp
c000850c:	57                   	push   edi
c000850d:	56                   	push   esi
c000850e:	53                   	push   ebx
c000850f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008515:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851c:	6a 00                	push   0x0
c000851e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008524:	57                   	push   edi
c0008525:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008530:	56                   	push   esi
c0008531:	e8 3c f9 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008536:	89 34 24             	mov    DWORD PTR [esp],esi
c0008539:	e8 32 80 ff ff       	call   c0000570 <strlen>
c000853e:	83 c4 10             	add    esp,0x10
c0008541:	83 f8 02             	cmp    eax,0x2
c0008544:	77 15                	ja     c000855b <Fs::setcwd(Process*, char*)+0x50>
c0008546:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000854b:	83 eb 41             	sub    ebx,0x41
c000854e:	8b 04 9d e0 0a 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcf520]
c0008555:	85 c0                	test   eax,eax
c0008557:	75 1c                	jne    c0008575 <Fs::setcwd(Process*, char*)+0x6a>
c0008559:	eb 2f                	jmp    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000855b:	83 ec 0c             	sub    esp,0xc
c000855e:	56                   	push   esi
c000855f:	e8 0c 80 ff ff       	call   c0000570 <strlen>
c0008564:	83 c4 10             	add    esp,0x10
c0008567:	83 f8 03             	cmp    eax,0x3
c000856a:	75 57                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c000856c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008571:	75 50                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c0008573:	eb d1                	jmp    c0008546 <Fs::setcwd(Process*, char*)+0x3b>
c0008575:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857c:	75 0c                	jne    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000857e:	83 ec 0c             	sub    esp,0xc
c0008581:	50                   	push   eax
c0008582:	e8 29 24 00 00       	call   c000a9b0 <LogicalDisk::mount()>
c0008587:	83 c4 10             	add    esp,0x10
c000858a:	b8 03 00 00 00       	mov    eax,0x3
c000858f:	83 fb 19             	cmp    ebx,0x19
c0008592:	0f 87 c6 00 00 00    	ja     c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008598:	8b 14 9d e0 0a 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffcf520]
c000859f:	b8 05 00 00 00       	mov    eax,0x5
c00085a4:	85 d2                	test   edx,edx
c00085a6:	0f 84 b2 00 00 00    	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085ac:	b8 06 00 00 00       	mov    eax,0x6
c00085b1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b8:	0f 85 92 00 00 00    	jne    c0008650 <Fs::setcwd(Process*, char*)+0x145>
c00085be:	e9 9b 00 00 00       	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085c3:	83 ec 0c             	sub    esp,0xc
c00085c6:	68 14 01 00 00       	push   0x114
c00085cb:	e8 93 72 00 00       	call   c000f863 <malloc>
c00085d0:	83 c4 0c             	add    esp,0xc
c00085d3:	89 c3                	mov    ebx,eax
c00085d5:	55                   	push   ebp
c00085d6:	56                   	push   esi
c00085d7:	50                   	push   eax
c00085d8:	e8 ad fb ff ff       	call   c000818a <File::File(char const*, Process*)>
c00085dd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e2:	83 c4 0c             	add    esp,0xc
c00085e5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e9:	50                   	push   eax
c00085ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ee:	50                   	push   eax
c00085ef:	53                   	push   ebx
c00085f0:	e8 b5 fe ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	83 f8 02             	cmp    eax,0x2
c00085fb:	74 27                	je     c0008624 <Fs::setcwd(Process*, char*)+0x119>
c00085fd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008602:	75 1c                	jne    c0008620 <Fs::setcwd(Process*, char*)+0x115>
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	85 db                	test   ebx,ebx
c000860b:	74 51                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008612:	53                   	push   ebx
c0008613:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008616:	83 c4 10             	add    esp,0x10
c0008619:	b8 02 00 00 00       	mov    eax,0x2
c000861e:	eb 3e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008620:	85 c0                	test   eax,eax
c0008622:	74 1c                	je     c0008640 <Fs::setcwd(Process*, char*)+0x135>
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	85 db                	test   ebx,ebx
c000862b:	74 31                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008632:	53                   	push   ebx
c0008633:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008636:	83 c4 10             	add    esp,0x10
c0008639:	b8 01 00 00 00       	mov    eax,0x1
c000863e:	eb 1e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008640:	85 db                	test   ebx,ebx
c0008642:	74 0c                	je     c0008650 <Fs::setcwd(Process*, char*)+0x145>
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008649:	53                   	push   ebx
c000864a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864d:	83 c4 10             	add    esp,0x10
c0008650:	50                   	push   eax
c0008651:	50                   	push   eax
c0008652:	56                   	push   esi
c0008653:	57                   	push   edi
c0008654:	e8 e7 7f ff ff       	call   c0000640 <strcpy>
c0008659:	83 c4 10             	add    esp,0x10
c000865c:	31 c0                	xor    eax,eax
c000865e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008664:	5b                   	pop    ebx
c0008665:	5e                   	pop    esi
c0008666:	5f                   	pop    edi
c0008667:	5d                   	pop    ebp
c0008668:	c3                   	ret    
c0008669:	90                   	nop

c000866a <Directory::Directory(char const*, Process*)>:
c000866a:	83 ec 0c             	sub    esp,0xc
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	83 ec 08             	sub    esp,0x8
c0008674:	6a 00                	push   0x0
c0008676:	50                   	push   eax
c0008677:	e8 80 a7 00 00       	call   c0012dfc <UnixFile::UnixFile(int)>
c000867c:	83 c4 10             	add    esp,0x10
c000867f:	ba 58 71 02 c0       	mov    edx,0xc0027158
c0008684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008688:	89 10                	mov    DWORD PTR [eax],edx
c000868a:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000868f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008693:	0f 95 c0             	setne  al
c0008696:	0f b6 c0             	movzx  eax,al
c0008699:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a7:	83 c2 0d             	add    edx,0xd
c00086aa:	50                   	push   eax
c00086ab:	51                   	push   ecx
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	52                   	push   edx
c00086b1:	e8 bc f7 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b6:	83 c4 10             	add    esp,0x10
c00086b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086c0:	83 e8 41             	sub    eax,0x41
c00086c3:	88 c2                	mov    dl,al
c00086c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086e1:	0f b6 c0             	movzx  eax,al
c00086e4:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c00086eb:	85 c0                	test   eax,eax
c00086ed:	74 3e                	je     c000872d <Directory::Directory(char const*, Process*)+0xc3>
c00086ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f9:	0f b6 c0             	movzx  eax,al
c00086fc:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0008703:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008709:	85 c0                	test   eax,eax
c000870b:	75 20                	jne    c000872d <Directory::Directory(char const*, Process*)+0xc3>
c000870d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008711:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008717:	0f b6 c0             	movzx  eax,al
c000871a:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0008721:	83 ec 0c             	sub    esp,0xc
c0008724:	50                   	push   eax
c0008725:	e8 86 22 00 00       	call   c000a9b0 <LogicalDisk::mount()>
c000872a:	83 c4 10             	add    esp,0x10
c000872d:	90                   	nop
c000872e:	83 c4 0c             	add    esp,0xc
c0008731:	c3                   	ret    

c0008732 <Directory::open()>:
c0008732:	53                   	push   ebx
c0008733:	b8 0b 00 00 00       	mov    eax,0xb
c0008738:	83 ec 08             	sub    esp,0x8
c000873b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008746:	83 fa 19             	cmp    edx,0x19
c0008749:	77 3d                	ja     c0008788 <Directory::open()+0x56>
c000874b:	8b 14 95 e0 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf520]
c0008752:	85 d2                	test   edx,edx
c0008754:	74 32                	je     c0008788 <Directory::open()+0x56>
c0008756:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875c:	85 d2                	test   edx,edx
c000875e:	74 28                	je     c0008788 <Directory::open()+0x56>
c0008760:	b8 06 00 00 00       	mov    eax,0x6
c0008765:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008769:	75 1d                	jne    c0008788 <Directory::open()+0x56>
c000876b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008771:	50                   	push   eax
c0008772:	8b 02                	mov    eax,DWORD PTR [edx]
c0008774:	51                   	push   ecx
c0008775:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008778:	51                   	push   ecx
c0008779:	52                   	push   edx
c000877a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	75 04                	jne    c0008788 <Directory::open()+0x56>
c0008784:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008788:	83 c4 08             	add    esp,0x8
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <Directory::close()>:
c000878e:	53                   	push   ebx
c000878f:	b8 0b 00 00 00       	mov    eax,0xb
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a2:	83 f9 19             	cmp    ecx,0x19
c00087a5:	77 41                	ja     c00087e8 <Directory::close()+0x5a>
c00087a7:	8b 1c 8d e0 0a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffcf520]
c00087ae:	85 db                	test   ebx,ebx
c00087b0:	74 36                	je     c00087e8 <Directory::close()+0x5a>
c00087b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b9:	74 2d                	je     c00087e8 <Directory::close()+0x5a>
c00087bb:	b8 05 00 00 00       	mov    eax,0x5
c00087c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c4:	74 22                	je     c00087e8 <Directory::close()+0x5a>
c00087c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087ca:	8b 04 8d e0 0a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffcf520]
c00087d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d7:	53                   	push   ebx
c00087d8:	53                   	push   ebx
c00087d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087e1:	50                   	push   eax
c00087e2:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	83 c4 08             	add    esp,0x8
c00087eb:	5b                   	pop    ebx
c00087ec:	c3                   	ret    
c00087ed:	90                   	nop

c00087ee <Directory::unlink()>:
c00087ee:	83 ec 0c             	sub    esp,0xc
c00087f1:	b8 0b 00 00 00       	mov    eax,0xb
c00087f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008801:	83 f9 19             	cmp    ecx,0x19
c0008804:	77 2f                	ja     c0008835 <Directory::unlink()+0x47>
c0008806:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c000880d:	85 c9                	test   ecx,ecx
c000880f:	74 24                	je     c0008835 <Directory::unlink()+0x47>
c0008811:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008817:	85 c9                	test   ecx,ecx
c0008819:	74 1a                	je     c0008835 <Directory::unlink()+0x47>
c000881b:	b8 06 00 00 00       	mov    eax,0x6
c0008820:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008824:	75 0f                	jne    c0008835 <Directory::unlink()+0x47>
c0008826:	83 c2 0d             	add    edx,0xd
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882d:	52                   	push   edx
c000882e:	51                   	push   ecx
c000882f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	83 c4 0c             	add    esp,0xc
c0008838:	c3                   	ret    
c0008839:	90                   	nop

c000883a <Directory::rename(char const*)>:
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	b8 0b 00 00 00       	mov    eax,0xb
c0008842:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008846:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884d:	83 f9 19             	cmp    ecx,0x19
c0008850:	77 32                	ja     c0008884 <Directory::rename(char const*)+0x4a>
c0008852:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c0008859:	85 c9                	test   ecx,ecx
c000885b:	74 27                	je     c0008884 <Directory::rename(char const*)+0x4a>
c000885d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008863:	85 c9                	test   ecx,ecx
c0008865:	74 1d                	je     c0008884 <Directory::rename(char const*)+0x4a>
c0008867:	b8 06 00 00 00       	mov    eax,0x6
c000886c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008870:	75 12                	jne    c0008884 <Directory::rename(char const*)+0x4a>
c0008872:	83 c2 0d             	add    edx,0xd
c0008875:	50                   	push   eax
c0008876:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008878:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887c:	52                   	push   edx
c000887d:	51                   	push   ecx
c000887e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008881:	83 c4 10             	add    esp,0x10
c0008884:	83 c4 0c             	add    esp,0xc
c0008887:	c3                   	ret    

c0008888 <Directory::exists()>:
c0008888:	83 ec 0c             	sub    esp,0xc
c000888b:	31 c0                	xor    eax,eax
c000888d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008891:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008898:	83 f9 19             	cmp    ecx,0x19
c000889b:	77 24                	ja     c00088c1 <Directory::exists()+0x39>
c000889d:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c00088a4:	85 c9                	test   ecx,ecx
c00088a6:	74 19                	je     c00088c1 <Directory::exists()+0x39>
c00088a8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ae:	85 c9                	test   ecx,ecx
c00088b0:	74 0f                	je     c00088c1 <Directory::exists()+0x39>
c00088b2:	83 c2 0d             	add    edx,0xd
c00088b5:	50                   	push   eax
c00088b6:	50                   	push   eax
c00088b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b9:	52                   	push   edx
c00088ba:	51                   	push   ecx
c00088bb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088be:	83 c4 10             	add    esp,0x10
c00088c1:	83 c4 0c             	add    esp,0xc
c00088c4:	c3                   	ret    
c00088c5:	90                   	nop

c00088c6 <Directory::read(dirent*)>:
c00088c6:	83 ec 1c             	sub    esp,0x1c
c00088c9:	b8 0b 00 00 00       	mov    eax,0xb
c00088ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d9:	83 f9 19             	cmp    ecx,0x19
c00088dc:	77 30                	ja     c000890e <Directory::read(dirent*)+0x48>
c00088de:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c00088e5:	85 c9                	test   ecx,ecx
c00088e7:	74 25                	je     c000890e <Directory::read(dirent*)+0x48>
c00088e9:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088f0:	74 1c                	je     c000890e <Directory::read(dirent*)+0x48>
c00088f2:	83 ec 0c             	sub    esp,0xc
c00088f5:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088fb:	51                   	push   ecx
c00088fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008900:	6a 00                	push   0x0
c0008902:	68 10 01 00 00       	push   0x110
c0008907:	52                   	push   edx
c0008908:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000890b:	83 c4 20             	add    esp,0x20
c000890e:	83 c4 1c             	add    esp,0x1c
c0008911:	c3                   	ret    

c0008912 <Directory::create()>:
c0008912:	83 ec 0c             	sub    esp,0xc
c0008915:	b8 0b 00 00 00       	mov    eax,0xb
c000891a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008925:	83 f9 19             	cmp    ecx,0x19
c0008928:	77 2f                	ja     c0008959 <Directory::create()+0x47>
c000892a:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c0008931:	85 c9                	test   ecx,ecx
c0008933:	74 24                	je     c0008959 <Directory::create()+0x47>
c0008935:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000893b:	85 c9                	test   ecx,ecx
c000893d:	74 1a                	je     c0008959 <Directory::create()+0x47>
c000893f:	b8 06 00 00 00       	mov    eax,0x6
c0008944:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008948:	75 0f                	jne    c0008959 <Directory::create()+0x47>
c000894a:	83 c2 0d             	add    edx,0xd
c000894d:	50                   	push   eax
c000894e:	50                   	push   eax
c000894f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008951:	52                   	push   edx
c0008952:	51                   	push   ecx
c0008953:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008956:	83 c4 10             	add    esp,0x10
c0008959:	83 c4 0c             	add    esp,0xc
c000895c:	c3                   	ret    
c000895d:	90                   	nop

c000895e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895e:	b8 0a 00 00 00       	mov    eax,0xa
c0008963:	c3                   	ret    

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 3e 12 00 00       	call   c0009bb6 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba 74 71 02 c0       	mov    edx,0xc0027174
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba 74 71 02 c0       	mov    edx,0xc0027174
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 9f 0f 00 00       	call   c0009956 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 99 49 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c00089f8:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 25 e0 00 00       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 f1 20 01 00       	call   c001ab0c <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 d5 de 00 00       	jmp    c0016900 <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 cb 20 01 00       	call   c001ab0c <HalMakeBeep(int)>
c0008a41:	83 c4 10             	add    esp,0x10
c0008a44:	89 f0                	mov    eax,esi
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 dd df 00 00       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 a3 20 01 00       	jmp    c001ab0c <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0008a7a:	e8 f5 da 00 00       	call   c0016574 <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 03 03 c0 01 	mov    BYTE PTR ds:0xc0030320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 bd 6d 00 00       	call   c000f863 <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 a0 71 02 c0       	push   0xc00271a0
c0008ab9:	53                   	push   ebx
c0008aba:	e8 cb f6 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 bf 71 02 c0       	push   0xc00271bf
c0008ad3:	e8 e0 71 00 00       	call   c000fcb8 <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 c0 f6 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 ac f9 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 d5 71 02 c0       	push   0xc00271d5
c0008b10:	e8 67 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 39 6d 00 00       	call   c000f863 <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 e5 71 02 c0       	push   0xc00271e5
c0008b77:	e8 00 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7c f6 ff ff       	call   c0008206 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 9a 6c 00 00       	call   c000f863 <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfcc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 ee 71 02 c0       	push   0xc00271ee
c0008bea:	50                   	push   eax
c0008beb:	e8 50 7a ff ff       	call   c0000640 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 2a 79 ff ff       	call   c0000570 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 ee 71 02 c0       	push   0xc00271ee
c0008c6c:	50                   	push   eax
c0008c6d:	e8 ce 7b ff ff       	call   c0000840 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 d7 78 ff ff       	call   c0000570 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 ee 71 02 c0       	push   0xc00271ee
c0008cbb:	50                   	push   eax
c0008cbc:	e8 7f 7b ff ff       	call   c0000840 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 03 03 c0       	mov    ds:0xc0030324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 f0 71 02 c0       	push   0xc00271f0
c0008cf7:	e8 80 e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 03 03 c0       	mov    eax,ds:0xc0030324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 05 72 02 c0       	push   0xc0027205
c0008d0d:	e8 6a e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 3c 78 ff ff       	call   c0000570 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 e5 7a ff ff       	call   c0000840 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 fa 77 ff ff       	call   c0000570 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 09 72 02 c0       	push   0xc0027209
c0008d9c:	50                   	push   eax
c0008d9d:	e8 9e 7a ff ff       	call   c0000840 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 03 03 c0       	mov    eax,ds:0xc0030324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 03 03 c0       	mov    eax,ds:0xc0030324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 03 03 c0       	mov    eax,ds:0xc0030324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 0e 72 02 c0       	push   0xc002720e
c0008de3:	e8 94 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 1c 72 02 c0       	push   0xc002721c
c0008e01:	e8 76 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 25 72 02 c0       	push   0xc0027225
c0008e26:	e8 51 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 03 03 c0       	mov    al,ds:0xc0030320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 43 72 02 c0       	push   0xc0027243
c0008e4a:	e8 2d e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 03 03 c0       	mov    eax,ds:0xc0030324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 54 72 02 c0       	push   0xc0027254
c0008e63:	e8 14 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 03 03 c0       	mov    eax,ds:0xc0030324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 67 72 02 c0       	push   0xc0027267
c0008e9b:	e8 dc e0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 06 03 c0 00 	mov    BYTE PTR ds:0xc0030660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 06 03 c0       	mov    ds:0xc0030661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 06 03 c0       	mov    ds:0xc0030664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 06 03 c0    	mov    edx,DWORD PTR ds:0xc0030664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	01 c0                	add    eax,eax
c0008f57:	a3 64 06 03 c0       	mov    ds:0xc0030664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 06 03 c0       	mov    eax,ds:0xc0030664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 06 03 c0       	mov    ds:0xc0030664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 06 03 c0       	mov    eax,ds:0xc0030664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 06 03 c0       	mov    ds:0xc0030664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 06 03 c0 00 	mov    BYTE PTR ds:0xc0030660,0x0
c0008f98:	c6 05 61 06 03 c0 00 	mov    BYTE PTR ds:0xc0030661,0x0
c0008f9f:	c7 05 64 06 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 74 72 02 c0       	push   0xc0027274
c0008fba:	e8 11 44 00 00       	call   c000d3d0 <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 99 72 02 c0       	push   0xc0027299
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 fb 4f 00 00       	call   c000dfd0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 bb 48 00 00       	call   c000d8a2 <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 f9 44 00 00       	call   c000d4ee <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 74 72 02 c0       	push   0xc0027274
c0009054:	e8 77 43 00 00       	call   c000d3d0 <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 99 72 02 c0       	push   0xc0027299
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 61 4f 00 00       	call   c000dfd0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 b0 44 00 00       	call   c000d540 <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 50 44 00 00       	call   c000d4ee <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 ec 0a 00 00       	call   c0009bb6 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba f8 72 02 c0       	mov    edx,0xc00272f8
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba f8 72 02 c0       	mov    edx,0xc00272f8
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 4f 08 00 00       	call   c0009956 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 49 42 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 06 03 c0       	mov    al,ds:0xc0030660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 06 03 c0       	mov    eax,ds:0xc0030664
c0009167:	01 c2                	add    edx,eax
c0009169:	89 d0                	mov    eax,edx
c000916b:	01 c0                	add    eax,eax
c000916d:	01 d0                	add    eax,edx
c000916f:	01 c0                	add    eax,eax
c0009171:	01 d0                	add    eax,edx
c0009173:	c1 e0 05             	shl    eax,0x5
c0009176:	01 d0                	add    eax,edx
c0009178:	c1 e0 04             	shl    eax,0x4
c000917b:	89 c2                	mov    edx,eax
c000917d:	c1 fa 1f             	sar    edx,0x1f
c0009180:	01 c1                	add    ecx,eax
c0009182:	11 d3                	adc    ebx,edx
c0009184:	a0 61 06 03 c0       	mov    al,ds:0xc0030661
c0009189:	0f b6 c0             	movzx  eax,al
c000918c:	85 c0                	test   eax,eax
c000918e:	74 0c                	je     c000919c <Clock::timeInSecondsLocal()+0x62>
c0009190:	b8 08 07 00 00       	mov    eax,0x708
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	eb 0a                	jmp    c00091a6 <Clock::timeInSecondsLocal()+0x6c>
c000919c:	b8 00 00 00 00       	mov    eax,0x0
c00091a1:	ba 00 00 00 00       	mov    edx,0x0
c00091a6:	01 c8                	add    eax,ecx
c00091a8:	11 da                	adc    edx,ebx
c00091aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091ad:	c9                   	leave  
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091b0:	55                   	push   ebp
c00091b1:	89 e5                	mov    ebp,esp
c00091b3:	56                   	push   esi
c00091b4:	53                   	push   ebx
c00091b5:	83 ec 10             	sub    esp,0x10
c00091b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00091c9:	83 c0 2c             	add    eax,0x2c
c00091cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00091ce:	a0 60 06 03 c0       	mov    al,ds:0xc0030660
c00091d3:	0f b6 d0             	movzx  edx,al
c00091d6:	a1 64 06 03 c0       	mov    eax,ds:0xc0030664
c00091db:	01 c2                	add    edx,eax
c00091dd:	89 d0                	mov    eax,edx
c00091df:	01 c0                	add    eax,eax
c00091e1:	01 d0                	add    eax,edx
c00091e3:	01 c0                	add    eax,eax
c00091e5:	01 d0                	add    eax,edx
c00091e7:	c1 e0 05             	shl    eax,0x5
c00091ea:	01 d0                	add    eax,edx
c00091ec:	c1 e0 04             	shl    eax,0x4
c00091ef:	89 c2                	mov    edx,eax
c00091f1:	c1 fa 1f             	sar    edx,0x1f
c00091f4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091f7:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091fa:	29 c1                	sub    ecx,eax
c00091fc:	19 d3                	sbb    ebx,edx
c00091fe:	a0 61 06 03 c0       	mov    al,ds:0xc0030661
c0009203:	0f b6 c0             	movzx  eax,al
c0009206:	85 c0                	test   eax,eax
c0009208:	74 0c                	je     c0009216 <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c000920a:	b8 08 07 00 00       	mov    eax,0x708
c000920f:	ba 00 00 00 00       	mov    edx,0x0
c0009214:	eb 0a                	jmp    c0009220 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c0009216:	b8 00 00 00 00       	mov    eax,0x0
c000921b:	ba 00 00 00 00       	mov    edx,0x0
c0009220:	29 c1                	sub    ecx,eax
c0009222:	19 d3                	sbb    ebx,edx
c0009224:	89 c8                	mov    eax,ecx
c0009226:	89 da                	mov    edx,ebx
c0009228:	83 ec 04             	sub    esp,0x4
c000922b:	52                   	push   edx
c000922c:	50                   	push   eax
c000922d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009230:	ff d6                	call   esi
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009238:	5b                   	pop    ebx
c0009239:	5e                   	pop    esi
c000923a:	5d                   	pop    ebp
c000923b:	c3                   	ret    

c000923c <KeDatetimeToSeconds(datetime_t)>:
c000923c:	55                   	push   ebp
c000923d:	89 e5                	mov    ebp,esp
c000923f:	53                   	push   ebx
c0009240:	83 ec 24             	sub    esp,0x24
c0009243:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009247:	2d 6c 07 00 00       	sub    eax,0x76c
c000924c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009250:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009253:	83 e8 01             	sub    eax,0x1
c0009256:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009259:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009260:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009267:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000926e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009275:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009278:	0f b6 c8             	movzx  ecx,al
c000927b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000927e:	0f b6 d0             	movzx  edx,al
c0009281:	89 d0                	mov    eax,edx
c0009283:	01 c0                	add    eax,eax
c0009285:	01 d0                	add    eax,edx
c0009287:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000928e:	01 d0                	add    eax,edx
c0009290:	c1 e0 02             	shl    eax,0x2
c0009293:	01 c1                	add    ecx,eax
c0009295:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009298:	0f b6 d0             	movzx  edx,al
c000929b:	89 d0                	mov    eax,edx
c000929d:	01 c0                	add    eax,eax
c000929f:	01 d0                	add    eax,edx
c00092a1:	01 c0                	add    eax,eax
c00092a3:	01 d0                	add    eax,edx
c00092a5:	c1 e0 05             	shl    eax,0x5
c00092a8:	01 d0                	add    eax,edx
c00092aa:	c1 e0 04             	shl    eax,0x4
c00092ad:	01 c8                	add    eax,ecx
c00092af:	89 c2                	mov    edx,eax
c00092b1:	c1 fa 1f             	sar    edx,0x1f
c00092b4:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c00092b7:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c00092ba:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c00092bd:	0f b6 c0             	movzx  eax,al
c00092c0:	83 e8 01             	sub    eax,0x1
c00092c3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092c6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092c9:	0f b6 c0             	movzx  eax,al
c00092cc:	8b 04 85 c0 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8d40]
c00092d3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092d6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092d9:	0f b6 c0             	movzx  eax,al
c00092dc:	83 f8 01             	cmp    eax,0x1
c00092df:	76 7c                	jbe    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092e1:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092e5:	0f b7 c0             	movzx  eax,ax
c00092e8:	83 e0 03             	and    eax,0x3
c00092eb:	85 c0                	test   eax,eax
c00092ed:	75 6e                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092ef:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f3:	0f b7 c8             	movzx  ecx,ax
c00092f6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092fb:	89 c8                	mov    eax,ecx
c00092fd:	f7 e2                	mul    edx
c00092ff:	c1 ea 05             	shr    edx,0x5
c0009302:	89 d0                	mov    eax,edx
c0009304:	c1 e0 02             	shl    eax,0x2
c0009307:	01 d0                	add    eax,edx
c0009309:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009310:	01 d0                	add    eax,edx
c0009312:	c1 e0 02             	shl    eax,0x2
c0009315:	29 c1                	sub    ecx,eax
c0009317:	89 c8                	mov    eax,ecx
c0009319:	0f b7 c0             	movzx  eax,ax
c000931c:	85 c0                	test   eax,eax
c000931e:	75 39                	jne    c0009359 <KeDatetimeToSeconds(datetime_t)+0x11d>
c0009320:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009324:	0f b7 c0             	movzx  eax,ax
c0009327:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000932d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009332:	f7 e9                	imul   ecx
c0009334:	c1 fa 07             	sar    edx,0x7
c0009337:	89 c8                	mov    eax,ecx
c0009339:	c1 f8 1f             	sar    eax,0x1f
c000933c:	29 c2                	sub    edx,eax
c000933e:	89 d0                	mov    eax,edx
c0009340:	c1 e0 02             	shl    eax,0x2
c0009343:	01 d0                	add    eax,edx
c0009345:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000934c:	01 d0                	add    eax,edx
c000934e:	c1 e0 04             	shl    eax,0x4
c0009351:	29 c1                	sub    ecx,eax
c0009353:	89 ca                	mov    edx,ecx
c0009355:	85 d2                	test   edx,edx
c0009357:	75 04                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c0009359:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000935d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009361:	0f b7 c0             	movzx  eax,ax
c0009364:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009367:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936a:	83 f8 46             	cmp    eax,0x46
c000936d:	0f 9f c0             	setg   al
c0009370:	0f b6 c0             	movzx  eax,al
c0009373:	85 c0                	test   eax,eax
c0009375:	0f 84 a4 00 00 00    	je     c000941f <KeDatetimeToSeconds(datetime_t)+0x1e3>
c000937b:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009382:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009386:	0f b7 d0             	movzx  edx,ax
c0009389:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000938c:	39 c2                	cmp    edx,eax
c000938e:	0f 8e b8 01 00 00    	jle    c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c0009394:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009397:	83 e0 03             	and    eax,0x3
c000939a:	85 c0                	test   eax,eax
c000939c:	75 6b                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c000939e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093a1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093a6:	f7 e9                	imul   ecx
c00093a8:	c1 fa 05             	sar    edx,0x5
c00093ab:	89 c8                	mov    eax,ecx
c00093ad:	c1 f8 1f             	sar    eax,0x1f
c00093b0:	29 c2                	sub    edx,eax
c00093b2:	89 d0                	mov    eax,edx
c00093b4:	c1 e0 02             	shl    eax,0x2
c00093b7:	01 d0                	add    eax,edx
c00093b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093c0:	01 d0                	add    eax,edx
c00093c2:	c1 e0 02             	shl    eax,0x2
c00093c5:	29 c1                	sub    ecx,eax
c00093c7:	89 ca                	mov    edx,ecx
c00093c9:	85 d2                	test   edx,edx
c00093cb:	75 35                	jne    c0009402 <KeDatetimeToSeconds(datetime_t)+0x1c6>
c00093cd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093d0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093d6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093db:	f7 e9                	imul   ecx
c00093dd:	c1 fa 07             	sar    edx,0x7
c00093e0:	89 c8                	mov    eax,ecx
c00093e2:	c1 f8 1f             	sar    eax,0x1f
c00093e5:	29 c2                	sub    edx,eax
c00093e7:	89 d0                	mov    eax,edx
c00093e9:	c1 e0 02             	shl    eax,0x2
c00093ec:	01 d0                	add    eax,edx
c00093ee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093f5:	01 d0                	add    eax,edx
c00093f7:	c1 e0 04             	shl    eax,0x4
c00093fa:	29 c1                	sub    ecx,eax
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	85 d2                	test   edx,edx
c0009400:	75 07                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009402:	b8 6e 01 00 00       	mov    eax,0x16e
c0009407:	eb 05                	jmp    c000940e <KeDatetimeToSeconds(datetime_t)+0x1d2>
c0009409:	b8 6d 01 00 00       	mov    eax,0x16d
c000940e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009411:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009414:	83 c0 01             	add    eax,0x1
c0009417:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000941a:	e9 63 ff ff ff       	jmp    c0009382 <KeDatetimeToSeconds(datetime_t)+0x146>
c000941f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009422:	83 f8 45             	cmp    eax,0x45
c0009425:	0f 8f 21 01 00 00    	jg     c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c000942b:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009432:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009436:	0f b7 d0             	movzx  edx,ax
c0009439:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000943c:	39 c2                	cmp    edx,eax
c000943e:	0f 8d 8b 00 00 00    	jge    c00094cf <KeDatetimeToSeconds(datetime_t)+0x293>
c0009444:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009447:	83 e0 03             	and    eax,0x3
c000944a:	85 c0                	test   eax,eax
c000944c:	75 6b                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000944e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009451:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009456:	f7 e9                	imul   ecx
c0009458:	c1 fa 05             	sar    edx,0x5
c000945b:	89 c8                	mov    eax,ecx
c000945d:	c1 f8 1f             	sar    eax,0x1f
c0009460:	29 c2                	sub    edx,eax
c0009462:	89 d0                	mov    eax,edx
c0009464:	c1 e0 02             	shl    eax,0x2
c0009467:	01 d0                	add    eax,edx
c0009469:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009470:	01 d0                	add    eax,edx
c0009472:	c1 e0 02             	shl    eax,0x2
c0009475:	29 c1                	sub    ecx,eax
c0009477:	89 ca                	mov    edx,ecx
c0009479:	85 d2                	test   edx,edx
c000947b:	75 35                	jne    c00094b2 <KeDatetimeToSeconds(datetime_t)+0x276>
c000947d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009480:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009486:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000948b:	f7 e9                	imul   ecx
c000948d:	c1 fa 07             	sar    edx,0x7
c0009490:	89 c8                	mov    eax,ecx
c0009492:	c1 f8 1f             	sar    eax,0x1f
c0009495:	29 c2                	sub    edx,eax
c0009497:	89 d0                	mov    eax,edx
c0009499:	c1 e0 02             	shl    eax,0x2
c000949c:	01 d0                	add    eax,edx
c000949e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a5:	01 d0                	add    eax,edx
c00094a7:	c1 e0 04             	shl    eax,0x4
c00094aa:	29 c1                	sub    ecx,eax
c00094ac:	89 ca                	mov    edx,ecx
c00094ae:	85 d2                	test   edx,edx
c00094b0:	75 07                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c00094b2:	b8 6e 01 00 00       	mov    eax,0x16e
c00094b7:	eb 05                	jmp    c00094be <KeDatetimeToSeconds(datetime_t)+0x282>
c00094b9:	b8 6d 01 00 00       	mov    eax,0x16d
c00094be:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094c4:	83 e8 01             	sub    eax,0x1
c00094c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00094ca:	e9 63 ff ff ff       	jmp    c0009432 <KeDatetimeToSeconds(datetime_t)+0x1f6>
c00094cf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094d2:	83 e0 03             	and    eax,0x3
c00094d5:	85 c0                	test   eax,eax
c00094d7:	75 6b                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c00094d9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094dc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094e1:	f7 e9                	imul   ecx
c00094e3:	c1 fa 05             	sar    edx,0x5
c00094e6:	89 c8                	mov    eax,ecx
c00094e8:	c1 f8 1f             	sar    eax,0x1f
c00094eb:	29 c2                	sub    edx,eax
c00094ed:	89 d0                	mov    eax,edx
c00094ef:	c1 e0 02             	shl    eax,0x2
c00094f2:	01 d0                	add    eax,edx
c00094f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094fb:	01 d0                	add    eax,edx
c00094fd:	c1 e0 02             	shl    eax,0x2
c0009500:	29 c1                	sub    ecx,eax
c0009502:	89 ca                	mov    edx,ecx
c0009504:	85 d2                	test   edx,edx
c0009506:	75 35                	jne    c000953d <KeDatetimeToSeconds(datetime_t)+0x301>
c0009508:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000950b:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009511:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009516:	f7 e9                	imul   ecx
c0009518:	c1 fa 07             	sar    edx,0x7
c000951b:	89 c8                	mov    eax,ecx
c000951d:	c1 f8 1f             	sar    eax,0x1f
c0009520:	29 c2                	sub    edx,eax
c0009522:	89 d0                	mov    eax,edx
c0009524:	c1 e0 02             	shl    eax,0x2
c0009527:	01 d0                	add    eax,edx
c0009529:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009530:	01 d0                	add    eax,edx
c0009532:	c1 e0 04             	shl    eax,0x4
c0009535:	29 c1                	sub    ecx,eax
c0009537:	89 ca                	mov    edx,ecx
c0009539:	85 d2                	test   edx,edx
c000953b:	75 07                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c000953d:	b8 6e 01 00 00       	mov    eax,0x16e
c0009542:	eb 05                	jmp    c0009549 <KeDatetimeToSeconds(datetime_t)+0x30d>
c0009544:	b8 6d 01 00 00       	mov    eax,0x16d
c0009549:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000954c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000954f:	89 c2                	mov    edx,eax
c0009551:	c1 fa 1f             	sar    edx,0x1f
c0009554:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000955a:	6b c8 00             	imul   ecx,eax,0x0
c000955d:	01 d9                	add    ecx,ebx
c000955f:	bb 80 51 01 00       	mov    ebx,0x15180
c0009564:	f7 e3                	mul    ebx
c0009566:	01 d1                	add    ecx,edx
c0009568:	89 ca                	mov    edx,ecx
c000956a:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000956d:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009570:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009573:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009576:	83 c4 24             	add    esp,0x24
c0009579:	5b                   	pop    ebx
c000957a:	5d                   	pop    ebp
c000957b:	c3                   	ret    

c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000957c:	55                   	push   ebp
c000957d:	89 e5                	mov    ebp,esp
c000957f:	56                   	push   esi
c0009580:	53                   	push   ebx
c0009581:	83 ec 20             	sub    esp,0x20
c0009584:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009587:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000958a:	e8 ad fc ff ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c000958f:	83 c4 08             	add    esp,0x8
c0009592:	89 c3                	mov    ebx,eax
c0009594:	89 d6                	mov    esi,edx
c0009596:	a0 60 06 03 c0       	mov    al,ds:0xc0030660
c000959b:	0f b6 d0             	movzx  edx,al
c000959e:	a1 64 06 03 c0       	mov    eax,ds:0xc0030664
c00095a3:	01 c2                	add    edx,eax
c00095a5:	89 d0                	mov    eax,edx
c00095a7:	01 c0                	add    eax,eax
c00095a9:	01 d0                	add    eax,edx
c00095ab:	01 c0                	add    eax,eax
c00095ad:	01 d0                	add    eax,edx
c00095af:	c1 e0 05             	shl    eax,0x5
c00095b2:	01 d0                	add    eax,edx
c00095b4:	c1 e0 04             	shl    eax,0x4
c00095b7:	89 c2                	mov    edx,eax
c00095b9:	c1 fa 1f             	sar    edx,0x1f
c00095bc:	29 c3                	sub    ebx,eax
c00095be:	19 d6                	sbb    esi,edx
c00095c0:	a0 61 06 03 c0       	mov    al,ds:0xc0030661
c00095c5:	0f b6 c0             	movzx  eax,al
c00095c8:	85 c0                	test   eax,eax
c00095ca:	74 0c                	je     c00095d8 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c00095cc:	b8 08 07 00 00       	mov    eax,0x708
c00095d1:	ba 00 00 00 00       	mov    edx,0x0
c00095d6:	eb 0a                	jmp    c00095e2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c00095d8:	b8 00 00 00 00       	mov    eax,0x0
c00095dd:	ba 00 00 00 00       	mov    edx,0x0
c00095e2:	29 c3                	sub    ebx,eax
c00095e4:	19 d6                	sbb    esi,edx
c00095e6:	89 d8                	mov    eax,ebx
c00095e8:	89 f2                	mov    edx,esi
c00095ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095ed:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095f6:	89 d0                	mov    eax,edx
c00095f8:	31 d2                	xor    edx,edx
c00095fa:	89 c3                	mov    ebx,eax
c00095fc:	89 d6                	mov    esi,edx
c00095fe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009601:	80 e5 ff             	and    ch,0xff
c0009604:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009607:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000960a:	83 e1 00             	and    ecx,0x0
c000960d:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0009610:	83 ec 0c             	sub    esp,0xc
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009618:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000961b:	68 ae 72 02 c0       	push   0xc00272ae
c0009620:	e8 57 d9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009625:	83 c4 20             	add    esp,0x20
c0009628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000962b:	8b 00                	mov    eax,DWORD PTR [eax]
c000962d:	83 c0 2c             	add    eax,0x2c
c0009630:	8b 00                	mov    eax,DWORD PTR [eax]
c0009632:	83 ec 04             	sub    esp,0x4
c0009635:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009638:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000963b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000963e:	ff d0                	call   eax
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009646:	5b                   	pop    ebx
c0009647:	5e                   	pop    esi
c0009648:	5d                   	pop    ebp
c0009649:	c3                   	ret    

c000964a <KeSecondsToDatetime(unsigned long long)>:
c000964a:	55                   	push   ebp
c000964b:	89 e5                	mov    ebp,esp
c000964d:	83 ec 48             	sub    esp,0x48
c0009650:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009653:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009656:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009659:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c000965c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000965f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009662:	6a 00                	push   0x0
c0009664:	68 80 51 01 00       	push   0x15180
c0009669:	52                   	push   edx
c000966a:	50                   	push   eax
c000966b:	e8 04 88 01 00       	call   c0021e74 <__udivdi3>
c0009670:	83 c4 10             	add    esp,0x10
c0009673:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009678:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000967b:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000967e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009681:	6a 00                	push   0x0
c0009683:	68 80 51 01 00       	push   0x15180
c0009688:	52                   	push   edx
c0009689:	50                   	push   eax
c000968a:	e8 e5 88 01 00       	call   c0021f74 <__umoddi3>
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009695:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009699:	79 0b                	jns    c00096a6 <KeSecondsToDatetime(unsigned long long)+0x5c>
c000969b:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c00096a2:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c00096a6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096a9:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096ae:	89 c8                	mov    eax,ecx
c00096b0:	f7 ea                	imul   edx
c00096b2:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b5:	c1 f8 0b             	sar    eax,0xb
c00096b8:	89 c2                	mov    edx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	c1 f8 1f             	sar    eax,0x1f
c00096bf:	29 c2                	sub    edx,eax
c00096c1:	89 d0                	mov    eax,edx
c00096c3:	88 c2                	mov    dl,al
c00096c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c8:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00096cb:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096ce:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	f7 ea                	imul   edx
c00096d7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096da:	c1 f8 0b             	sar    eax,0xb
c00096dd:	89 c2                	mov    edx,eax
c00096df:	89 c8                	mov    eax,ecx
c00096e1:	c1 f8 1f             	sar    eax,0x1f
c00096e4:	29 c2                	sub    edx,eax
c00096e6:	89 d0                	mov    eax,edx
c00096e8:	01 c0                	add    eax,eax
c00096ea:	01 d0                	add    eax,edx
c00096ec:	01 c0                	add    eax,eax
c00096ee:	01 d0                	add    eax,edx
c00096f0:	c1 e0 05             	shl    eax,0x5
c00096f3:	01 d0                	add    eax,edx
c00096f5:	c1 e0 04             	shl    eax,0x4
c00096f8:	29 c1                	sub    ecx,eax
c00096fa:	89 c8                	mov    eax,ecx
c00096fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096ff:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009702:	ba 89 88 88 88       	mov    edx,0x88888889
c0009707:	89 c8                	mov    eax,ecx
c0009709:	f7 ea                	imul   edx
c000970b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000970e:	c1 f8 05             	sar    eax,0x5
c0009711:	89 c2                	mov    edx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	c1 f8 1f             	sar    eax,0x1f
c0009718:	29 c2                	sub    edx,eax
c000971a:	89 d0                	mov    eax,edx
c000971c:	88 c2                	mov    dl,al
c000971e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009721:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009724:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009727:	ba 89 88 88 88       	mov    edx,0x88888889
c000972c:	89 c8                	mov    eax,ecx
c000972e:	f7 ea                	imul   edx
c0009730:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009733:	c1 f8 05             	sar    eax,0x5
c0009736:	89 c2                	mov    edx,eax
c0009738:	89 c8                	mov    eax,ecx
c000973a:	c1 f8 1f             	sar    eax,0x1f
c000973d:	29 c2                	sub    edx,eax
c000973f:	89 d0                	mov    eax,edx
c0009741:	01 c0                	add    eax,eax
c0009743:	01 d0                	add    eax,edx
c0009745:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000974c:	01 d0                	add    eax,edx
c000974e:	c1 e0 02             	shl    eax,0x2
c0009751:	29 c1                	sub    ecx,eax
c0009753:	89 ca                	mov    edx,ecx
c0009755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009758:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c000975b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000975f:	79 20                	jns    c0009781 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009764:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c000976a:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000976f:	89 c8                	mov    eax,ecx
c0009771:	f7 ea                	imul   edx
c0009773:	c1 fa 0f             	sar    edx,0xf
c0009776:	89 c8                	mov    eax,ecx
c0009778:	c1 f8 1f             	sar    eax,0x1f
c000977b:	29 c2                	sub    edx,eax
c000977d:	89 d0                	mov    eax,edx
c000977f:	eb 18                	jmp    c0009799 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009781:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009784:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009789:	89 c8                	mov    eax,ecx
c000978b:	f7 ea                	imul   edx
c000978d:	c1 fa 0f             	sar    edx,0xf
c0009790:	89 c8                	mov    eax,ecx
c0009792:	c1 f8 1f             	sar    eax,0x1f
c0009795:	29 c2                	sub    edx,eax
c0009797:	89 d0                	mov    eax,edx
c0009799:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000979c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000979f:	89 d0                	mov    eax,edx
c00097a1:	c1 e0 03             	shl    eax,0x3
c00097a4:	01 d0                	add    eax,edx
c00097a6:	c1 e0 04             	shl    eax,0x4
c00097a9:	01 d0                	add    eax,edx
c00097ab:	c1 e0 04             	shl    eax,0x4
c00097ae:	29 d0                	sub    eax,edx
c00097b0:	89 c2                	mov    edx,eax
c00097b2:	c1 e2 06             	shl    edx,0x6
c00097b5:	29 c2                	sub    edx,eax
c00097b7:	89 d0                	mov    eax,edx
c00097b9:	f7 d8                	neg    eax
c00097bb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00097be:	01 d0                	add    eax,edx
c00097c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00097c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097c6:	c1 e8 02             	shr    eax,0x2
c00097c9:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c00097ce:	f7 e2                	mul    edx
c00097d0:	c1 ea 07             	shr    edx,0x7
c00097d3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097d6:	29 d0                	sub    eax,edx
c00097d8:	89 c1                	mov    ecx,eax
c00097da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097dd:	c1 e8 02             	shr    eax,0x2
c00097e0:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c00097e5:	f7 e2                	mul    edx
c00097e7:	89 d0                	mov    eax,edx
c00097e9:	c1 e8 0b             	shr    eax,0xb
c00097ec:	01 c1                	add    ecx,eax
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	c1 e8 04             	shr    eax,0x4
c00097f4:	ba 41 d6 72 00       	mov    edx,0x72d641
c00097f9:	f7 e2                	mul    edx
c00097fb:	89 d0                	mov    eax,edx
c00097fd:	c1 e8 04             	shr    eax,0x4
c0009800:	29 c1                	sub    ecx,eax
c0009802:	ba 61 f3 19 67       	mov    edx,0x6719f361
c0009807:	89 c8                	mov    eax,ecx
c0009809:	f7 e2                	mul    edx
c000980b:	89 c8                	mov    eax,ecx
c000980d:	29 d0                	sub    eax,edx
c000980f:	d1 e8                	shr    eax,1
c0009811:	01 d0                	add    eax,edx
c0009813:	c1 e8 08             	shr    eax,0x8
c0009816:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0009819:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000981c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009821:	f7 e2                	mul    edx
c0009823:	89 d1                	mov    ecx,edx
c0009825:	c1 e9 05             	shr    ecx,0x5
c0009828:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000982b:	89 d0                	mov    eax,edx
c000982d:	c1 e0 03             	shl    eax,0x3
c0009830:	01 d0                	add    eax,edx
c0009832:	c1 e0 03             	shl    eax,0x3
c0009835:	01 d0                	add    eax,edx
c0009837:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000983e:	01 c2                	add    edx,eax
c0009840:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009843:	c1 e8 02             	shr    eax,0x2
c0009846:	01 d0                	add    eax,edx
c0009848:	29 c1                	sub    ecx,eax
c000984a:	89 ca                	mov    edx,ecx
c000984c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000984f:	01 d0                	add    eax,edx
c0009851:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009854:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0009857:	89 d0                	mov    eax,edx
c0009859:	c1 e0 02             	shl    eax,0x2
c000985c:	01 d0                	add    eax,edx
c000985e:	83 c0 02             	add    eax,0x2
c0009861:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009866:	f7 e2                	mul    edx
c0009868:	89 d0                	mov    eax,edx
c000986a:	c1 e8 07             	shr    eax,0x7
c000986d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009870:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009873:	89 d0                	mov    eax,edx
c0009875:	c1 e0 03             	shl    eax,0x3
c0009878:	01 d0                	add    eax,edx
c000987a:	01 c0                	add    eax,eax
c000987c:	01 d0                	add    eax,edx
c000987e:	c1 e0 03             	shl    eax,0x3
c0009881:	01 d0                	add    eax,edx
c0009883:	83 c0 02             	add    eax,0x2
c0009886:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000988b:	f7 e2                	mul    edx
c000988d:	c1 ea 02             	shr    edx,0x2
c0009890:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009893:	29 d0                	sub    eax,edx
c0009895:	83 c0 01             	add    eax,0x1
c0009898:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000989b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000989f:	77 07                	ja     c00098a8 <KeSecondsToDatetime(unsigned long long)+0x25e>
c00098a1:	b8 02 00 00 00       	mov    eax,0x2
c00098a6:	eb 05                	jmp    c00098ad <KeSecondsToDatetime(unsigned long long)+0x263>
c00098a8:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c00098ad:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c00098b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00098b3:	89 d0                	mov    eax,edx
c00098b5:	c1 e0 02             	shl    eax,0x2
c00098b8:	01 d0                	add    eax,edx
c00098ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00098c1:	01 d0                	add    eax,edx
c00098c3:	c1 e0 04             	shl    eax,0x4
c00098c6:	89 c2                	mov    edx,eax
c00098c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00098cb:	01 c2                	add    edx,eax
c00098cd:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c00098d1:	0f 96 c0             	setbe  al
c00098d4:	0f b6 c0             	movzx  eax,al
c00098d7:	01 d0                	add    eax,edx
c00098d9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00098dc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00098df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00098e2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00098e6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00098e9:	83 c0 01             	add    eax,0x1
c00098ec:	88 c2                	mov    dl,al
c00098ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098f1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00098f4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00098f7:	88 c2                	mov    dl,al
c00098f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098fc:	88 10                	mov    BYTE PTR [eax],dl
c00098fe:	90                   	nop
c00098ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009902:	c9                   	leave  
c0009903:	c2 04 00             	ret    0x4

c0009906 <Clock::timeInDatetimeLocal()>:
c0009906:	55                   	push   ebp
c0009907:	89 e5                	mov    ebp,esp
c0009909:	83 ec 08             	sub    esp,0x8
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009912:	e8 23 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0009917:	83 c4 10             	add    esp,0x10
c000991a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000991d:	83 ec 04             	sub    esp,0x4
c0009920:	52                   	push   edx
c0009921:	50                   	push   eax
c0009922:	51                   	push   ecx
c0009923:	e8 22 fd ff ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c0009928:	83 c4 0c             	add    esp,0xc
c000992b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000992e:	c9                   	leave  
c000992f:	c2 04 00             	ret    0x4

c0009932 <Device::hibernate()>:
c0009932:	c3                   	ret    
c0009933:	90                   	nop

c0009934 <Device::wake()>:
c0009934:	c3                   	ret    
c0009935:	90                   	nop

c0009936 <Device::detect()>:
c0009936:	c3                   	ret    
c0009937:	90                   	nop

c0009938 <Device::disableLegacy()>:
c0009938:	c3                   	ret    
c0009939:	90                   	nop

c000993a <Device::powerSaving(PowerSavingLevel)>:
c000993a:	c3                   	ret    
c000993b:	90                   	nop

c000993c <DriverlessDevice::close(int, int, void*)>:
c000993c:	31 c0                	xor    eax,eax
c000993e:	c3                   	ret    
c000993f:	90                   	nop

c0009940 <DriverlessDevice::detect()>:
c0009940:	c3                   	ret    
c0009941:	90                   	nop

c0009942 <DriverlessDevice::open(int, int, void*)>:
c0009942:	83 ec 18             	sub    esp,0x18
c0009945:	68 2c 73 02 c0       	push   0xc002732c
c000994a:	e8 69 63 00 00       	call   c000fcb8 <KePanic(char const*)>
c000994f:	83 c8 ff             	or     eax,0xffffffff
c0009952:	83 c4 1c             	add    esp,0x1c
c0009955:	c3                   	ret    

c0009956 <Device::~Device()>:
c0009956:	ba d0 73 02 c0       	mov    edx,0xc00273d0
c000995b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000995f:	89 10                	mov    DWORD PTR [eax],edx
c0009961:	90                   	nop
c0009962:	c3                   	ret    
c0009963:	90                   	nop

c0009964 <Device::~Device()>:
c0009964:	83 ec 0c             	sub    esp,0xc
c0009967:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000996b:	e8 e6 ff ff ff       	call   c0009956 <Device::~Device()>
c0009970:	83 c4 04             	add    esp,0x4
c0009973:	83 ec 08             	sub    esp,0x8
c0009976:	68 58 01 00 00       	push   0x158
c000997b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997f:	e8 f8 39 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c0009984:	83 c4 10             	add    esp,0x10
c0009987:	83 c4 0c             	add    esp,0xc
c000998a:	c3                   	ret    
c000998b:	90                   	nop

c000998c <Device::findAndLoadDriver()>:
c000998c:	c7 44 24 04 4a 73 02 c0 	mov    DWORD PTR [esp+0x4],0xc002734a
c0009994:	e9 e3 d5 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c0009999:	90                   	nop

c000999a <Device::preOpenPCI(PCIDeviceInfo)>:
c000999a:	57                   	push   edi
c000999b:	b9 09 00 00 00       	mov    ecx,0x9
c00099a0:	56                   	push   esi
c00099a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00099a5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00099a9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00099b3:	81 c7 18 01 00 00    	add    edi,0x118
c00099b9:	fc                   	cld    
c00099ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00099bc:	5e                   	pop    esi
c00099bd:	5f                   	pop    edi
c00099be:	c3                   	ret    
c00099bf:	90                   	nop

c00099c0 <Device::preOpenACPI(void*, char*, char*)>:
c00099c0:	57                   	push   edi
c00099c1:	b9 1e 00 00 00       	mov    ecx,0x1e
c00099c6:	56                   	push   esi
c00099c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099cf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00099d9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00099df:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00099e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00099e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099eb:	b9 0e 00 00 00       	mov    ecx,0xe
c00099f0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00099f6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099fc:	5e                   	pop    esi
c00099fd:	5f                   	pop    edi
c00099fe:	c3                   	ret    
c00099ff:	90                   	nop

c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009a00:	53                   	push   ebx
c0009a01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009a09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009a11:	0f b6 c0             	movzx  eax,al
c0009a14:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009a18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a24:	5b                   	pop    ebx
c0009a25:	e9 95 15 01 00       	jmp    c001afbf <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009a2a <Device::getParent()>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009a34:	c3                   	ret    
c0009a35:	90                   	nop

c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009a36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a3e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009a43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a4f:	e9 cd 16 01 00       	jmp    c001b121 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009a54 <Device::addChild(Device*)>:
c0009a54:	53                   	push   ebx
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a60:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a66:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a6c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a6e:	85 d2                	test   edx,edx
c0009a70:	74 04                	je     c0009a76 <Device::addChild(Device*)+0x22>
c0009a72:	89 d3                	mov    ebx,edx
c0009a74:	eb f6                	jmp    c0009a6c <Device::addChild(Device*)+0x18>
c0009a76:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a79:	83 ec 0c             	sub    esp,0xc
c0009a7c:	6a 08                	push   0x8
c0009a7e:	e8 e0 5d 00 00       	call   c000f863 <malloc>
c0009a83:	89 03                	mov    DWORD PTR [ebx],eax
c0009a85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a92:	83 c4 18             	add    esp,0x18
c0009a95:	5b                   	pop    ebx
c0009a96:	c3                   	ret    
c0009a97:	90                   	nop

c0009a98 <Device::removeAllChildren()>:
c0009a98:	56                   	push   esi
c0009a99:	53                   	push   ebx
c0009a9a:	52                   	push   edx
c0009a9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a9f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009aa5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aa8:	74 17                	je     c0009ac1 <Device::removeAllChildren()+0x29>
c0009aaa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009aad:	85 c0                	test   eax,eax
c0009aaf:	74 0c                	je     c0009abd <Device::removeAllChildren()+0x25>
c0009ab1:	83 ec 0c             	sub    esp,0xc
c0009ab4:	8b 10                	mov    edx,DWORD PTR [eax]
c0009ab6:	50                   	push   eax
c0009ab7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009aba:	83 c4 10             	add    esp,0x10
c0009abd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009abf:	eb e4                	jmp    c0009aa5 <Device::removeAllChildren()+0xd>
c0009ac1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ac7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009acd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ad3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ada:	58                   	pop    eax
c0009adb:	5b                   	pop    ebx
c0009adc:	5e                   	pop    esi
c0009add:	c3                   	ret    

c0009ade <Device::hibernateAll()>:
c0009ade:	53                   	push   ebx
c0009adf:	83 ec 14             	sub    esp,0x14
c0009ae2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ae8:	53                   	push   ebx
c0009ae9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009aec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af2:	83 c4 10             	add    esp,0x10
c0009af5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009af8:	74 0f                	je     c0009b09 <Device::hibernateAll()+0x2b>
c0009afa:	83 ec 0c             	sub    esp,0xc
c0009afd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b00:	e8 d9 ff ff ff       	call   c0009ade <Device::hibernateAll()>
c0009b05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b07:	eb e9                	jmp    c0009af2 <Device::hibernateAll()+0x14>
c0009b09:	83 c4 08             	add    esp,0x8
c0009b0c:	5b                   	pop    ebx
c0009b0d:	c3                   	ret    

c0009b0e <Device::wakeAll()>:
c0009b0e:	53                   	push   ebx
c0009b0f:	83 ec 14             	sub    esp,0x14
c0009b12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b18:	53                   	push   ebx
c0009b19:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009b1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b28:	74 0f                	je     c0009b39 <Device::wakeAll()+0x2b>
c0009b2a:	83 ec 0c             	sub    esp,0xc
c0009b2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b30:	e8 d9 ff ff ff       	call   c0009b0e <Device::wakeAll()>
c0009b35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b37:	eb e9                	jmp    c0009b22 <Device::wakeAll()+0x14>
c0009b39:	83 c4 08             	add    esp,0x8
c0009b3c:	5b                   	pop    ebx
c0009b3d:	c3                   	ret    

c0009b3e <Device::detectAll()>:
c0009b3e:	53                   	push   ebx
c0009b3f:	83 ec 14             	sub    esp,0x14
c0009b42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b48:	53                   	push   ebx
c0009b49:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009b4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b52:	83 c4 10             	add    esp,0x10
c0009b55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b58:	74 0f                	je     c0009b69 <Device::detectAll()+0x2b>
c0009b5a:	83 ec 0c             	sub    esp,0xc
c0009b5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b60:	e8 d9 ff ff ff       	call   c0009b3e <Device::detectAll()>
c0009b65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b67:	eb e9                	jmp    c0009b52 <Device::detectAll()+0x14>
c0009b69:	83 c4 08             	add    esp,0x8
c0009b6c:	5b                   	pop    ebx
c0009b6d:	c3                   	ret    

c0009b6e <Device::disableLegacyAll()>:
c0009b6e:	c3                   	ret    
c0009b6f:	90                   	nop

c0009b70 <Device::loadDriversForAll()>:
c0009b70:	c3                   	ret    
c0009b71:	90                   	nop

c0009b72 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b72:	56                   	push   esi
c0009b73:	53                   	push   ebx
c0009b74:	83 ec 0c             	sub    esp,0xc
c0009b77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b7b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b81:	56                   	push   esi
c0009b82:	53                   	push   ebx
c0009b83:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b92:	74 0f                	je     c0009ba3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b94:	52                   	push   edx
c0009b95:	52                   	push   edx
c0009b96:	56                   	push   esi
c0009b97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b9a:	e8 d3 ff ff ff       	call   c0009b72 <Device::powerSavingAll(PowerSavingLevel)>
c0009b9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ba1:	eb e9                	jmp    c0009b8c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009ba3:	58                   	pop    eax
c0009ba4:	5b                   	pop    ebx
c0009ba5:	5e                   	pop    esi
c0009ba6:	c3                   	ret    
c0009ba7:	90                   	nop

c0009ba8 <Device::setName(char const*)>:
c0009ba8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009bb0:	e9 8b 6a ff ff       	jmp    c0000640 <strcpy>
c0009bb5:	90                   	nop

c0009bb6 <Device::Device(char const*)>:
c0009bb6:	83 ec 1c             	sub    esp,0x1c
c0009bb9:	ba d0 73 02 c0       	mov    edx,0xc00273d0
c0009bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc2:	89 10                	mov    DWORD PTR [eax],edx
c0009bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009bfc:	83 ec 08             	sub    esp,0x8
c0009bff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c07:	e8 9c ff ff ff       	call   c0009ba8 <Device::setName(char const*)>
c0009c0c:	83 c4 10             	add    esp,0x10
c0009c0f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009c17:	83 ec 0c             	sub    esp,0xc
c0009c1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c1e:	e8 40 5c 00 00       	call   c000f863 <malloc>
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c37:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c41:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c51:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c62:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c6d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c78:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c86:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c94:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ca2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009cac:	90                   	nop
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	c3                   	ret    
c0009cb1:	90                   	nop

c0009cb2 <Device::getName()>:
c0009cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cb6:	05 d0 00 00 00       	add    eax,0xd0
c0009cbb:	c3                   	ret    

c0009cbc <Device::closeAll()>:
c0009cbc:	53                   	push   ebx
c0009cbd:	83 ec 08             	sub    esp,0x8
c0009cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009cc4:	53                   	push   ebx
c0009cc5:	e8 e8 ff ff ff       	call   c0009cb2 <Device::getName()>
c0009cca:	52                   	push   edx
c0009ccb:	50                   	push   eax
c0009ccc:	68 84 73 02 c0       	push   0xc0027384
c0009cd1:	e8 a6 d2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009cd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009cd8:	6a 00                	push   0x0
c0009cda:	6a 00                	push   0x0
c0009cdc:	6a 00                	push   0x0
c0009cde:	53                   	push   ebx
c0009cdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009ce2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ce8:	83 c4 20             	add    esp,0x20
c0009ceb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009cee:	74 12                	je     c0009d02 <Device::closeAll()+0x46>
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cf6:	e8 c1 ff ff ff       	call   c0009cbc <Device::closeAll()>
c0009cfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	eb e9                	jmp    c0009ceb <Device::closeAll()+0x2f>
c0009d02:	83 c4 08             	add    esp,0x8
c0009d05:	5b                   	pop    ebx
c0009d06:	c3                   	ret    
c0009d07:	90                   	nop

c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009d08:	83 ec 0c             	sub    esp,0xc
c0009d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d0f:	83 ec 08             	sub    esp,0x8
c0009d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d16:	50                   	push   eax
c0009d17:	e8 9a fe ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009d1c:	83 c4 10             	add    esp,0x10
c0009d1f:	ba fc 73 02 c0       	mov    edx,0xc00273fc
c0009d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d28:	89 10                	mov    DWORD PTR [eax],edx
c0009d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009d38:	90                   	nop
c0009d39:	83 c4 0c             	add    esp,0xc
c0009d3c:	c3                   	ret    
c0009d3d:	90                   	nop

c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009d3e:	57                   	push   edi
c0009d3f:	56                   	push   esi
c0009d40:	53                   	push   ebx
c0009d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009d49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009d4d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009d53:	75 0c                	jne    c0009d61 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	53                   	push   ebx
c0009d58:	56                   	push   esi
c0009d59:	e8 68 bc 01 00       	call   c00259c6 <LinkedList<Device>::addElement(Device*)>
c0009d5e:	83 c4 10             	add    esp,0x10
c0009d61:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d6a:	74 12                	je     c0009d7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d6c:	50                   	push   eax
c0009d6d:	57                   	push   edi
c0009d6e:	56                   	push   esi
c0009d6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d72:	e8 c7 ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d79:	83 c4 10             	add    esp,0x10
c0009d7c:	eb e9                	jmp    c0009d67 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d7e:	5b                   	pop    ebx
c0009d7f:	5e                   	pop    esi
c0009d80:	5f                   	pop    edi
c0009d81:	c3                   	ret    

c0009d82 <getDevicesOfType(DeviceType)>:
c0009d82:	53                   	push   ebx
c0009d83:	83 ec 14             	sub    esp,0x14
c0009d86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d8a:	53                   	push   ebx
c0009d8b:	e8 12 bd 01 00       	call   c0025aa2 <LinkedList<Device>::LinkedList()>
c0009d90:	83 c4 0c             	add    esp,0xc
c0009d93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d97:	53                   	push   ebx
c0009d98:	ff 35 08 11 03 c0    	push   DWORD PTR ds:0xc0031108
c0009d9e:	e8 9b ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009da3:	89 d8                	mov    eax,ebx
c0009da5:	83 c4 18             	add    esp,0x18
c0009da8:	5b                   	pop    ebx
c0009da9:	c2 04 00             	ret    0x4

c0009dac <HardDiskController::HardDiskController(char const*)>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009db3:	83 ec 08             	sub    esp,0x8
c0009db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dba:	50                   	push   eax
c0009dbb:	e8 f6 fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	ba 28 74 02 c0       	mov    edx,0xc0027428
c0009dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dcc:	89 10                	mov    DWORD PTR [eax],edx
c0009dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009ddc:	90                   	nop
c0009ddd:	83 c4 0c             	add    esp,0xc
c0009de0:	c3                   	ret    
c0009de1:	90                   	nop
c0009de2:	66 90                	xchg   ax,ax

c0009de4 <HardDiskController::~HardDiskController()>:
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	ba 28 74 02 c0       	mov    edx,0xc0027428
c0009dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df0:	89 10                	mov    DWORD PTR [eax],edx
c0009df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df6:	83 ec 0c             	sub    esp,0xc
c0009df9:	50                   	push   eax
c0009dfa:	e8 57 fb ff ff       	call   c0009956 <Device::~Device()>
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	90                   	nop
c0009e03:	83 c4 0c             	add    esp,0xc
c0009e06:	c3                   	ret    
c0009e07:	90                   	nop

c0009e08 <HardDiskController::~HardDiskController()>:
c0009e08:	83 ec 0c             	sub    esp,0xc
c0009e0b:	83 ec 0c             	sub    esp,0xc
c0009e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e12:	e8 cd ff ff ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0009e17:	83 c4 10             	add    esp,0x10
c0009e1a:	83 ec 08             	sub    esp,0x8
c0009e1d:	68 58 01 00 00       	push   0x158
c0009e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e26:	e8 51 35 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c0009e2b:	83 c4 10             	add    esp,0x10
c0009e2e:	83 c4 0c             	add    esp,0xc
c0009e31:	c3                   	ret    

c0009e32 <PhysicalDisk::eject()>:
c0009e32:	83 c8 ff             	or     eax,0xffffffff
c0009e35:	c3                   	ret    

c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009e36:	83 ec 0c             	sub    esp,0xc
c0009e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e3d:	83 ec 08             	sub    esp,0x8
c0009e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e44:	50                   	push   eax
c0009e45:	e8 6c fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009e4a:	83 c4 10             	add    esp,0x10
c0009e4d:	ba 54 74 02 c0       	mov    edx,0xc0027454
c0009e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e56:	89 10                	mov    DWORD PTR [eax],edx
c0009e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e5c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e67:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e72:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e84:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e98:	90                   	nop
c0009e99:	83 c4 0c             	add    esp,0xc
c0009e9c:	c3                   	ret    
c0009e9d:	90                   	nop

c0009e9e <PhysicalDisk::startCache()>:
c0009e9e:	56                   	push   esi
c0009e9f:	53                   	push   ebx
c0009ea0:	83 ec 10             	sub    esp,0x10
c0009ea3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ea7:	6a 44                	push   0x44
c0009ea9:	e8 b5 59 00 00       	call   c000f863 <malloc>
c0009eae:	89 c6                	mov    esi,eax
c0009eb0:	58                   	pop    eax
c0009eb1:	5a                   	pop    edx
c0009eb2:	53                   	push   ebx
c0009eb3:	56                   	push   esi
c0009eb4:	e8 b7 13 00 00       	call   c000b270 <VCache::VCache(PhysicalDisk*)>
c0009eb9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009ebf:	83 c4 14             	add    esp,0x14
c0009ec2:	5b                   	pop    ebx
c0009ec3:	5e                   	pop    esi
c0009ec4:	c3                   	ret    
c0009ec5:	90                   	nop

c0009ec6 <PhysicalDisk::~PhysicalDisk()>:
c0009ec6:	83 ec 0c             	sub    esp,0xc
c0009ec9:	ba 54 74 02 c0       	mov    edx,0xc0027454
c0009ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed2:	89 10                	mov    DWORD PTR [eax],edx
c0009ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed8:	83 ec 0c             	sub    esp,0xc
c0009edb:	50                   	push   eax
c0009edc:	e8 75 fa ff ff       	call   c0009956 <Device::~Device()>
c0009ee1:	83 c4 10             	add    esp,0x10
c0009ee4:	90                   	nop
c0009ee5:	83 c4 0c             	add    esp,0xc
c0009ee8:	c3                   	ret    
c0009ee9:	90                   	nop

c0009eea <PhysicalDisk::~PhysicalDisk()>:
c0009eea:	83 ec 0c             	sub    esp,0xc
c0009eed:	83 ec 0c             	sub    esp,0xc
c0009ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef4:	e8 cd ff ff ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0009ef9:	83 c4 10             	add    esp,0x10
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	68 6c 01 00 00       	push   0x16c
c0009f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f08:	e8 6f 34 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	83 c4 0c             	add    esp,0xc
c0009f13:	c3                   	ret    

c0009f14 <startGUI(void*)>:
c0009f14:	55                   	push   ebp
c0009f15:	89 e5                	mov    ebp,esp
c0009f17:	83 ec 08             	sub    esp,0x8
c0009f1a:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0009f22:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0009f27:	85 c0                	test   eax,eax
c0009f29:	75 01                	jne    c0009f2c <startGUI(void*)+0x18>
c0009f2b:	fb                   	sti    
c0009f2c:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0009f31:	83 ec 04             	sub    esp,0x4
c0009f34:	6a 00                	push   0x0
c0009f36:	50                   	push   eax
c0009f37:	68 84 74 02 c0       	push   0xc0027484
c0009f3c:	e8 63 bf 00 00       	call   c0015ea4 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009f41:	83 c4 10             	add    esp,0x10
c0009f44:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0009f49:	83 ec 04             	sub    esp,0x4
c0009f4c:	6a 00                	push   0x0
c0009f4e:	50                   	push   eax
c0009f4f:	68 9e 74 02 c0       	push   0xc002749e
c0009f54:	e8 4b bf 00 00       	call   c0015ea4 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	eb fe                	jmp    c0009f5c <startGUI(void*)+0x48>

c0009f5e <startGUIVESA(void*)>:
c0009f5e:	55                   	push   ebp
c0009f5f:	89 e5                	mov    ebp,esp
c0009f61:	83 ec 08             	sub    esp,0x8
c0009f64:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0009f6c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0009f71:	85 c0                	test   eax,eax
c0009f73:	75 01                	jne    c0009f76 <startGUIVESA(void*)+0x18>
c0009f75:	fb                   	sti    
c0009f76:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0009f7b:	83 ec 04             	sub    esp,0x4
c0009f7e:	6a 00                	push   0x0
c0009f80:	50                   	push   eax
c0009f81:	68 bc 74 02 c0       	push   0xc00274bc
c0009f86:	e8 19 bf 00 00       	call   c0015ea4 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009f8b:	83 c4 10             	add    esp,0x10
c0009f8e:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0009f93:	83 ec 04             	sub    esp,0x4
c0009f96:	6a 00                	push   0x0
c0009f98:	50                   	push   eax
c0009f99:	68 9e 74 02 c0       	push   0xc002749e
c0009f9e:	e8 01 bf 00 00       	call   c0015ea4 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	eb fe                	jmp    c0009fa6 <startGUIVESA(void*)+0x48>

c0009fa8 <sendKeyToTerminal(unsigned char)>:
c0009fa8:	55                   	push   ebp
c0009fa9:	89 e5                	mov    ebp,esp
c0009fab:	83 ec 28             	sub    esp,0x28
c0009fae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009fb1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009fb4:	a1 f4 11 03 c0       	mov    eax,ds:0xc00311f4
c0009fb9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009fbd:	83 ec 08             	sub    esp,0x8
c0009fc0:	52                   	push   edx
c0009fc1:	50                   	push   eax
c0009fc2:	e8 a9 89 00 00       	call   c0012970 <VgaText::receiveKey(unsigned char)>
c0009fc7:	83 c4 10             	add    esp,0x10
c0009fca:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fce:	83 f8 0a             	cmp    eax,0xa
c0009fd1:	74 16                	je     c0009fe9 <sendKeyToTerminal(unsigned char)+0x41>
c0009fd3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fd7:	83 f8 03             	cmp    eax,0x3
c0009fda:	74 0d                	je     c0009fe9 <sendKeyToTerminal(unsigned char)+0x41>
c0009fdc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fe0:	83 f8 1c             	cmp    eax,0x1c
c0009fe3:	0f 85 92 00 00 00    	jne    c000a07b <sendKeyToTerminal(unsigned char)+0xd3>
c0009fe9:	fa                   	cli    
c0009fea:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0009fef:	83 c0 01             	add    eax,0x1
c0009ff2:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0009ff7:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0009ffc:	83 c0 01             	add    eax,0x1
c0009fff:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c000a004:	a1 80 06 03 c0       	mov    eax,ds:0xc0030680
c000a009:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a00c:	c7 05 80 06 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030680,0x0
c000a016:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a01a:	74 1f                	je     c000a03b <sendKeyToTerminal(unsigned char)+0x93>
c000a01c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a01f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a022:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a025:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a028:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a02b:	83 ec 0c             	sub    esp,0xc
c000a02e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a031:	e8 66 cb 00 00       	call   c0016b9c <unblockTask(ThreadControlBlock*)>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	eb db                	jmp    c000a016 <sendKeyToTerminal(unsigned char)+0x6e>
c000a03b:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c000a040:	83 e8 01             	sub    eax,0x1
c000a043:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c000a048:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c000a04d:	85 c0                	test   eax,eax
c000a04f:	75 18                	jne    c000a069 <sendKeyToTerminal(unsigned char)+0xc1>
c000a051:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c000a056:	85 c0                	test   eax,eax
c000a058:	74 0f                	je     c000a069 <sendKeyToTerminal(unsigned char)+0xc1>
c000a05a:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c000a064:	e8 d7 c7 00 00       	call   c0016840 <schedule()>
c000a069:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000a071:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000a076:	85 c0                	test   eax,eax
c000a078:	75 01                	jne    c000a07b <sendKeyToTerminal(unsigned char)+0xd3>
c000a07a:	fb                   	sti    
c000a07b:	90                   	nop
c000a07c:	c9                   	leave  
c000a07d:	c3                   	ret    

c000a07e <sendKeyboardToken(KeyboardToken)>:
c000a07e:	55                   	push   ebp
c000a07f:	89 e5                	mov    ebp,esp
c000a081:	83 ec 18             	sub    esp,0x18
c000a084:	e8 b4 64 00 00       	call   c001053d <KeUserIOReceived()>
c000a089:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a08f:	0f b7 c0             	movzx  eax,ax
c000a092:	83 f2 01             	xor    edx,0x1
c000a095:	88 90 a0 06 03 c0    	mov    BYTE PTR [eax-0x3ffcf960],dl
c000a09b:	a1 88 06 03 c0       	mov    eax,ds:0xc0030688
c000a0a0:	85 c0                	test   eax,eax
c000a0a2:	74 24                	je     c000a0c8 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a0a4:	8b 0d 88 06 03 c0    	mov    ecx,DWORD PTR ds:0xc0030688
c000a0aa:	83 ec 04             	sub    esp,0x4
c000a0ad:	68 a0 06 03 c0       	push   0xc00306a0
c000a0b2:	83 ec 08             	sub    esp,0x8
c000a0b5:	89 e2                	mov    edx,esp
c000a0b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ba:	89 02                	mov    DWORD PTR [edx],eax
c000a0bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a0bf:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0c3:	ff d1                	call   ecx
c000a0c5:	83 c4 10             	add    esp,0x10
c000a0c8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a0cc:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a0cf:	0f b6 c0             	movzx  eax,al
c000a0d2:	85 c0                	test   eax,eax
c000a0d4:	0f 84 da 00 00 00    	je     c000a1b4 <sendKeyboardToken(KeyboardToken)+0x136>
c000a0da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0dd:	0f b7 c0             	movzx  eax,ax
c000a0e0:	3d 18 03 00 00       	cmp    eax,0x318
c000a0e5:	75 06                	jne    c000a0ed <sendKeyboardToken(KeyboardToken)+0x6f>
c000a0e7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	0f b7 c0             	movzx  eax,ax
c000a0f3:	3d 19 03 00 00       	cmp    eax,0x319
c000a0f8:	75 06                	jne    c000a100 <sendKeyboardToken(KeyboardToken)+0x82>
c000a0fa:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a103:	0f b7 c0             	movzx  eax,ax
c000a106:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a10b:	75 06                	jne    c000a113 <sendKeyboardToken(KeyboardToken)+0x95>
c000a10d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a116:	0f b7 c0             	movzx  eax,ax
c000a119:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a11e:	75 06                	jne    c000a126 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a120:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a129:	0f b7 c0             	movzx  eax,ax
c000a12c:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a131:	75 06                	jne    c000a139 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a133:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a13c:	0f b7 c0             	movzx  eax,ax
c000a13f:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a144:	75 06                	jne    c000a14c <sendKeyboardToken(KeyboardToken)+0xce>
c000a146:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a14c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14f:	0f b7 c0             	movzx  eax,ax
c000a152:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a157:	75 06                	jne    c000a15f <sendKeyboardToken(KeyboardToken)+0xe1>
c000a159:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a162:	0f b7 c0             	movzx  eax,ax
c000a165:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a16a:	75 06                	jne    c000a172 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a16c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a175:	0f b7 c0             	movzx  eax,ax
c000a178:	3d 20 03 00 00       	cmp    eax,0x320
c000a17d:	75 06                	jne    c000a185 <sendKeyboardToken(KeyboardToken)+0x107>
c000a17f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a188:	0f b7 c0             	movzx  eax,ax
c000a18b:	3d 21 03 00 00       	cmp    eax,0x321
c000a190:	75 06                	jne    c000a198 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a192:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a19b:	0f b7 c0             	movzx  eax,ax
c000a19e:	3d 22 03 00 00       	cmp    eax,0x322
c000a1a3:	0f 85 f1 00 00 00    	jne    c000a29a <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1a9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a1af:	e9 e6 00 00 00       	jmp    c000a29a <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1b7:	0f b7 c0             	movzx  eax,ax
c000a1ba:	3d 18 03 00 00       	cmp    eax,0x318
c000a1bf:	75 0a                	jne    c000a1cb <sendKeyboardToken(KeyboardToken)+0x14d>
c000a1c1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ce:	0f b7 c0             	movzx  eax,ax
c000a1d1:	3d 19 03 00 00       	cmp    eax,0x319
c000a1d6:	75 0a                	jne    c000a1e2 <sendKeyboardToken(KeyboardToken)+0x164>
c000a1d8:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a1de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1e5:	0f b7 c0             	movzx  eax,ax
c000a1e8:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a1ed:	75 0a                	jne    c000a1f9 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a1ef:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a1f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1fc:	0f b7 c0             	movzx  eax,ax
c000a1ff:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a204:	75 0a                	jne    c000a210 <sendKeyboardToken(KeyboardToken)+0x192>
c000a206:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a20c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a213:	0f b7 c0             	movzx  eax,ax
c000a216:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a21b:	75 0a                	jne    c000a227 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a21d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a223:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a22a:	0f b7 c0             	movzx  eax,ax
c000a22d:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a232:	75 0a                	jne    c000a23e <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a234:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a23a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a23e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a241:	0f b7 c0             	movzx  eax,ax
c000a244:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a249:	75 0a                	jne    c000a255 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a24b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a251:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a258:	0f b7 c0             	movzx  eax,ax
c000a25b:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a260:	75 0a                	jne    c000a26c <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a262:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a268:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a26c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a26f:	0f b7 c0             	movzx  eax,ax
c000a272:	3d 20 03 00 00       	cmp    eax,0x320
c000a277:	75 0a                	jne    c000a283 <sendKeyboardToken(KeyboardToken)+0x205>
c000a279:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a27f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a286:	0f b7 c0             	movzx  eax,ax
c000a289:	3d 21 03 00 00       	cmp    eax,0x321
c000a28e:	75 0a                	jne    c000a29a <sendKeyboardToken(KeyboardToken)+0x21c>
c000a290:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a296:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a29a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a29d:	0f b7 c0             	movzx  eax,ax
c000a2a0:	3d 00 02 00 00       	cmp    eax,0x200
c000a2a5:	75 2f                	jne    c000a2d6 <sendKeyboardToken(KeyboardToken)+0x258>
c000a2a7:	a0 a0 0a 03 c0       	mov    al,ds:0xc0030aa0
c000a2ac:	83 f0 01             	xor    eax,0x1
c000a2af:	0f b6 c0             	movzx  eax,al
c000a2b2:	85 c0                	test   eax,eax
c000a2b4:	74 20                	je     c000a2d6 <sendKeyboardToken(KeyboardToken)+0x258>
c000a2b6:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000a2bb:	6a 01                	push   0x1
c000a2bd:	6a 00                	push   0x0
c000a2bf:	68 14 9f 00 c0       	push   0xc0009f14
c000a2c4:	50                   	push   eax
c000a2c5:	e8 aa c2 00 00       	call   c0016574 <Process::createThread(void (*)(void*), void*, int)>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	c6 05 a0 0a 03 c0 01 	mov    BYTE PTR ds:0xc0030aa0,0x1
c000a2d4:	eb 3a                	jmp    c000a310 <sendKeyboardToken(KeyboardToken)+0x292>
c000a2d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2d9:	0f b7 c0             	movzx  eax,ax
c000a2dc:	3d 01 02 00 00       	cmp    eax,0x201
c000a2e1:	75 2d                	jne    c000a310 <sendKeyboardToken(KeyboardToken)+0x292>
c000a2e3:	a0 a0 0a 03 c0       	mov    al,ds:0xc0030aa0
c000a2e8:	83 f0 01             	xor    eax,0x1
c000a2eb:	0f b6 c0             	movzx  eax,al
c000a2ee:	85 c0                	test   eax,eax
c000a2f0:	74 1e                	je     c000a310 <sendKeyboardToken(KeyboardToken)+0x292>
c000a2f2:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000a2f7:	6a 01                	push   0x1
c000a2f9:	6a 00                	push   0x0
c000a2fb:	68 5e 9f 00 c0       	push   0xc0009f5e
c000a300:	50                   	push   eax
c000a301:	e8 6e c2 00 00       	call   c0016574 <Process::createThread(void (*)(void*), void*, int)>
c000a306:	83 c4 10             	add    esp,0x10
c000a309:	c6 05 a0 0a 03 c0 01 	mov    BYTE PTR ds:0xc0030aa0,0x1
c000a310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a313:	0f b7 c0             	movzx  eax,ax
c000a316:	3d 25 03 00 00       	cmp    eax,0x325
c000a31b:	75 06                	jne    c000a323 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a31d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a326:	0f b7 c0             	movzx  eax,ax
c000a329:	3d 24 03 00 00       	cmp    eax,0x324
c000a32e:	75 06                	jne    c000a336 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a330:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a339:	0f b7 c0             	movzx  eax,ax
c000a33c:	3d 23 03 00 00       	cmp    eax,0x323
c000a341:	75 06                	jne    c000a349 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a343:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a34c:	0f b7 c0             	movzx  eax,ax
c000a34f:	3d 26 03 00 00       	cmp    eax,0x326
c000a354:	75 06                	jne    c000a35c <sendKeyboardToken(KeyboardToken)+0x2de>
c000a356:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a35c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a35f:	0f b7 c0             	movzx  eax,ax
c000a362:	3d 27 03 00 00       	cmp    eax,0x327
c000a367:	75 06                	jne    c000a36f <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a369:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a36f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a372:	0f b7 c0             	movzx  eax,ax
c000a375:	3d 22 03 00 00       	cmp    eax,0x322
c000a37a:	75 06                	jne    c000a382 <sendKeyboardToken(KeyboardToken)+0x304>
c000a37c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a382:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a386:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a389:	83 f0 01             	xor    eax,0x1
c000a38c:	0f b6 c0             	movzx  eax,al
c000a38f:	85 c0                	test   eax,eax
c000a391:	74 7c                	je     c000a40f <sendKeyboardToken(KeyboardToken)+0x391>
c000a393:	a0 a1 07 03 c0       	mov    al,ds:0xc00307a1
c000a398:	0f b6 c0             	movzx  eax,al
c000a39b:	85 c0                	test   eax,eax
c000a39d:	74 43                	je     c000a3e2 <sendKeyboardToken(KeyboardToken)+0x364>
c000a39f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3a3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a3a7:	85 c0                	test   eax,eax
c000a3a9:	74 2b                	je     c000a3d6 <sendKeyboardToken(KeyboardToken)+0x358>
c000a3ab:	8b 15 a4 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030aa4
c000a3b1:	89 d0                	mov    eax,edx
c000a3b3:	c1 e0 02             	shl    eax,0x2
c000a3b6:	01 d0                	add    eax,edx
c000a3b8:	01 c0                	add    eax,eax
c000a3ba:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c000a3bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3c2:	0f b7 c0             	movzx  eax,ax
c000a3c5:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3c8:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c000a3cd:	01 d0                	add    eax,edx
c000a3cf:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c000a3d4:	eb 71                	jmp    c000a447 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3d6:	c7 05 a4 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa4,0x0
c000a3e0:	eb 65                	jmp    c000a447 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3e2:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c000a3e7:	85 c0                	test   eax,eax
c000a3e9:	74 18                	je     c000a403 <sendKeyboardToken(KeyboardToken)+0x385>
c000a3eb:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c000a3f0:	0f b6 c0             	movzx  eax,al
c000a3f3:	83 ec 0c             	sub    esp,0xc
c000a3f6:	50                   	push   eax
c000a3f7:	e8 ac fb ff ff       	call   c0009fa8 <sendKeyToTerminal(unsigned char)>
c000a3fc:	83 c4 10             	add    esp,0x10
c000a3ff:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a403:	c7 05 a4 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa4,0x0
c000a40d:	eb 38                	jmp    c000a447 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a40f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a412:	0f b7 c0             	movzx  eax,ax
c000a415:	3d 01 01 00 00       	cmp    eax,0x101
c000a41a:	75 2b                	jne    c000a447 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a41c:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c000a421:	85 c0                	test   eax,eax
c000a423:	74 18                	je     c000a43d <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a425:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c000a42a:	0f b6 c0             	movzx  eax,al
c000a42d:	83 ec 0c             	sub    esp,0xc
c000a430:	50                   	push   eax
c000a431:	e8 72 fb ff ff       	call   c0009fa8 <sendKeyToTerminal(unsigned char)>
c000a436:	83 c4 10             	add    esp,0x10
c000a439:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a43d:	c7 05 a4 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa4,0x0
c000a447:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a44a:	83 f0 01             	xor    eax,0x1
c000a44d:	0f b6 c0             	movzx  eax,al
c000a450:	85 c0                	test   eax,eax
c000a452:	74 5a                	je     c000a4ae <sendKeyboardToken(KeyboardToken)+0x430>
c000a454:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a457:	83 f0 01             	xor    eax,0x1
c000a45a:	0f b6 c0             	movzx  eax,al
c000a45d:	85 c0                	test   eax,eax
c000a45f:	74 4d                	je     c000a4ae <sendKeyboardToken(KeyboardToken)+0x430>
c000a461:	a0 a0 07 03 c0       	mov    al,ds:0xc00307a0
c000a466:	83 f0 01             	xor    eax,0x1
c000a469:	0f b6 c0             	movzx  eax,al
c000a46c:	85 c0                	test   eax,eax
c000a46e:	74 3e                	je     c000a4ae <sendKeyboardToken(KeyboardToken)+0x430>
c000a470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a473:	0f b7 c0             	movzx  eax,ax
c000a476:	83 f8 1f             	cmp    eax,0x1f
c000a479:	76 0b                	jbe    c000a486 <sendKeyboardToken(KeyboardToken)+0x408>
c000a47b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a47e:	0f b7 c0             	movzx  eax,ax
c000a481:	83 f8 7e             	cmp    eax,0x7e
c000a484:	76 16                	jbe    c000a49c <sendKeyboardToken(KeyboardToken)+0x41e>
c000a486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a489:	0f b7 c0             	movzx  eax,ax
c000a48c:	83 f8 0a             	cmp    eax,0xa
c000a48f:	74 0b                	je     c000a49c <sendKeyboardToken(KeyboardToken)+0x41e>
c000a491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a494:	0f b7 c0             	movzx  eax,ax
c000a497:	83 f8 08             	cmp    eax,0x8
c000a49a:	75 12                	jne    c000a4ae <sendKeyboardToken(KeyboardToken)+0x430>
c000a49c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a49f:	0f b6 c0             	movzx  eax,al
c000a4a2:	83 ec 0c             	sub    esp,0xc
c000a4a5:	50                   	push   eax
c000a4a6:	e8 fd fa ff ff       	call   c0009fa8 <sendKeyToTerminal(unsigned char)>
c000a4ab:	83 c4 10             	add    esp,0x10
c000a4ae:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a4b1:	83 f0 01             	xor    eax,0x1
c000a4b4:	0f b6 c0             	movzx  eax,al
c000a4b7:	85 c0                	test   eax,eax
c000a4b9:	74 5d                	je     c000a518 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4bb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4be:	83 f0 01             	xor    eax,0x1
c000a4c1:	0f b6 c0             	movzx  eax,al
c000a4c4:	85 c0                	test   eax,eax
c000a4c6:	74 50                	je     c000a518 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4c8:	a0 a0 07 03 c0       	mov    al,ds:0xc00307a0
c000a4cd:	0f b6 c0             	movzx  eax,al
c000a4d0:	85 c0                	test   eax,eax
c000a4d2:	74 44                	je     c000a518 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d7:	0f b7 c0             	movzx  eax,ax
c000a4da:	83 f8 3f             	cmp    eax,0x3f
c000a4dd:	76 39                	jbe    c000a518 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4e2:	0f b7 c0             	movzx  eax,ax
c000a4e5:	83 f8 7f             	cmp    eax,0x7f
c000a4e8:	77 2e                	ja     c000a518 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4ed:	88 c2                	mov    dl,al
c000a4ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4f2:	0f b7 c0             	movzx  eax,ax
c000a4f5:	83 f8 5f             	cmp    eax,0x5f
c000a4f8:	76 04                	jbe    c000a4fe <sendKeyboardToken(KeyboardToken)+0x480>
c000a4fa:	b0 20                	mov    al,0x20
c000a4fc:	eb 02                	jmp    c000a500 <sendKeyboardToken(KeyboardToken)+0x482>
c000a4fe:	b0 00                	mov    al,0x0
c000a500:	89 d1                	mov    ecx,edx
c000a502:	29 c1                	sub    ecx,eax
c000a504:	89 c8                	mov    eax,ecx
c000a506:	83 e8 40             	sub    eax,0x40
c000a509:	0f b6 c0             	movzx  eax,al
c000a50c:	83 ec 0c             	sub    esp,0xc
c000a50f:	50                   	push   eax
c000a510:	e8 93 fa ff ff       	call   c0009fa8 <sendKeyToTerminal(unsigned char)>
c000a515:	83 c4 10             	add    esp,0x10
c000a518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a51b:	0f b7 c0             	movzx  eax,ax
c000a51e:	3d 00 03 00 00       	cmp    eax,0x300
c000a523:	75 12                	jne    c000a537 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a525:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a528:	83 f0 01             	xor    eax,0x1
c000a52b:	0f b6 c0             	movzx  eax,al
c000a52e:	85 c0                	test   eax,eax
c000a530:	74 05                	je     c000a537 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a532:	e8 2e 7b 00 00       	call   c0012065 <doTerminalCycle()>
c000a537:	90                   	nop
c000a538:	c9                   	leave  
c000a539:	c3                   	ret    

c000a53a <clearInternalKeybuffer(VgaText*)>:
c000a53a:	55                   	push   ebp
c000a53b:	89 e5                	mov    ebp,esp
c000a53d:	83 ec 08             	sub    esp,0x8
c000a540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a543:	05 02 01 00 00       	add    eax,0x102
c000a548:	83 ec 0c             	sub    esp,0xc
c000a54b:	50                   	push   eax
c000a54c:	e8 1f 60 ff ff       	call   c0000570 <strlen>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a557:	81 c2 02 01 00 00    	add    edx,0x102
c000a55d:	83 ec 04             	sub    esp,0x4
c000a560:	50                   	push   eax
c000a561:	6a 00                	push   0x0
c000a563:	52                   	push   edx
c000a564:	e8 87 5f ff ff       	call   c00004f0 <memset>
c000a569:	83 c4 10             	add    esp,0x10
c000a56c:	90                   	nop
c000a56d:	c9                   	leave  
c000a56e:	c3                   	ret    

c000a56f <readKeyboard(VgaText*, char*, unsigned long)>:
c000a56f:	55                   	push   ebp
c000a570:	89 e5                	mov    ebp,esp
c000a572:	83 ec 18             	sub    esp,0x18
c000a575:	a1 88 06 03 c0       	mov    eax,ds:0xc0030688
c000a57a:	85 c0                	test   eax,eax
c000a57c:	74 2a                	je     c000a5a8 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a57e:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a584:	8b 0d 88 06 03 c0    	mov    ecx,DWORD PTR ds:0xc0030688
c000a58a:	83 ec 04             	sub    esp,0x4
c000a58d:	68 a0 06 03 c0       	push   0xc00306a0
c000a592:	83 ec 08             	sub    esp,0x8
c000a595:	89 e2                	mov    edx,esp
c000a597:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a59a:	89 02                	mov    DWORD PTR [edx],eax
c000a59c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a59f:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a5a3:	ff d1                	call   ecx
c000a5a5:	83 c4 10             	add    esp,0x10
c000a5a8:	fb                   	sti    
c000a5a9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a5b0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a5b4:	0f 84 08 01 00 00    	je     c000a6c2 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a5ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5bd:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5c3:	0f be c0             	movsx  eax,al
c000a5c6:	85 c0                	test   eax,eax
c000a5c8:	75 27                	jne    c000a5f1 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a5ca:	fa                   	cli    
c000a5cb:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000a5d0:	83 c0 01             	add    eax,0x1
c000a5d3:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c000a5d8:	e8 63 c2 00 00       	call   c0016840 <schedule()>
c000a5dd:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000a5e5:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000a5ea:	85 c0                	test   eax,eax
c000a5ec:	75 cc                	jne    c000a5ba <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5ee:	fb                   	sti    
c000a5ef:	eb c9                	jmp    c000a5ba <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a5f4:	8d 50 01             	lea    edx,[eax+0x1]
c000a5f7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a5fa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5fd:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a603:	88 10                	mov    BYTE PTR [eax],dl
c000a605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a608:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a60e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a611:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a615:	83 f8 03             	cmp    eax,0x3
c000a618:	75 1e                	jne    c000a638 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a61a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a61f:	8b 00                	mov    eax,DWORD PTR [eax]
c000a621:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a624:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a62a:	83 ec 08             	sub    esp,0x8
c000a62d:	6a 02                	push   0x2
c000a62f:	50                   	push   eax
c000a630:	e8 9e 68 00 00       	call   c0010ed3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a635:	83 c4 10             	add    esp,0x10
c000a638:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a63c:	83 f8 1c             	cmp    eax,0x1c
c000a63f:	75 1e                	jne    c000a65f <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a641:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a646:	8b 00                	mov    eax,DWORD PTR [eax]
c000a648:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a64b:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a651:	83 ec 08             	sub    esp,0x8
c000a654:	6a 09                	push   0x9
c000a656:	50                   	push   eax
c000a657:	e8 77 68 00 00       	call   c0010ed3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a65c:	83 c4 10             	add    esp,0x10
c000a65f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a662:	05 02 01 00 00       	add    eax,0x102
c000a667:	83 ec 0c             	sub    esp,0xc
c000a66a:	50                   	push   eax
c000a66b:	e8 00 5f ff ff       	call   c0000570 <strlen>
c000a670:	83 c4 10             	add    esp,0x10
c000a673:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a676:	81 c2 02 01 00 00    	add    edx,0x102
c000a67c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a67f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a682:	81 c2 02 01 00 00    	add    edx,0x102
c000a688:	83 ec 04             	sub    esp,0x4
c000a68b:	50                   	push   eax
c000a68c:	51                   	push   ecx
c000a68d:	52                   	push   edx
c000a68e:	e8 3d 5d ff ff       	call   c00003d0 <memmove>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a69a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a69e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6a2:	83 f8 0a             	cmp    eax,0xa
c000a6a5:	74 16                	je     c000a6bd <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6a7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6ab:	83 f8 03             	cmp    eax,0x3
c000a6ae:	74 0d                	je     c000a6bd <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6b0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6b4:	83 f8 1c             	cmp    eax,0x1c
c000a6b7:	0f 85 f3 fe ff ff    	jne    c000a5b0 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a6bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6c0:	eb 03                	jmp    c000a6c5 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6c5:	c9                   	leave  
c000a6c6:	c3                   	ret    
c000a6c7:	90                   	nop

c000a6c8 <Keyboard::Keyboard(char const*)>:
c000a6c8:	83 ec 0c             	sub    esp,0xc
c000a6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6cf:	83 ec 08             	sub    esp,0x8
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	50                   	push   eax
c000a6d7:	e8 da f4 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a6dc:	83 c4 10             	add    esp,0x10
c000a6df:	ba e0 74 02 c0       	mov    edx,0xc00274e0
c000a6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e8:	89 10                	mov    DWORD PTR [eax],edx
c000a6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ee:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a6f8:	c6 05 84 06 03 c0 01 	mov    BYTE PTR ds:0xc0030684,0x1
c000a6ff:	90                   	nop
c000a700:	83 c4 0c             	add    esp,0xc
c000a703:	c3                   	ret    

c000a704 <Keyboard::~Keyboard()>:
c000a704:	83 ec 0c             	sub    esp,0xc
c000a707:	ba e0 74 02 c0       	mov    edx,0xc00274e0
c000a70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a710:	89 10                	mov    DWORD PTR [eax],edx
c000a712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a716:	83 ec 0c             	sub    esp,0xc
c000a719:	50                   	push   eax
c000a71a:	e8 37 f2 ff ff       	call   c0009956 <Device::~Device()>
c000a71f:	83 c4 10             	add    esp,0x10
c000a722:	90                   	nop
c000a723:	83 c4 0c             	add    esp,0xc
c000a726:	c3                   	ret    
c000a727:	90                   	nop

c000a728 <Keyboard::~Keyboard()>:
c000a728:	83 ec 0c             	sub    esp,0xc
c000a72b:	83 ec 0c             	sub    esp,0xc
c000a72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a732:	e8 cd ff ff ff       	call   c000a704 <Keyboard::~Keyboard()>
c000a737:	83 c4 10             	add    esp,0x10
c000a73a:	83 ec 08             	sub    esp,0x8
c000a73d:	68 5c 01 00 00       	push   0x15c
c000a742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a746:	e8 31 2c 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c000a74b:	83 c4 10             	add    esp,0x10
c000a74e:	83 c4 0c             	add    esp,0xc
c000a751:	c3                   	ret    

c000a752 <LogicalDisk::close(int, int, void*)>:
c000a752:	83 c8 ff             	or     eax,0xffffffff
c000a755:	c3                   	ret    

c000a756 <LogicalDisk::~LogicalDisk()>:
c000a756:	83 ec 0c             	sub    esp,0xc
c000a759:	ba 58 75 02 c0       	mov    edx,0xc0027558
c000a75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a762:	89 10                	mov    DWORD PTR [eax],edx
c000a764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a768:	83 ec 0c             	sub    esp,0xc
c000a76b:	50                   	push   eax
c000a76c:	e8 e5 f1 ff ff       	call   c0009956 <Device::~Device()>
c000a771:	83 c4 10             	add    esp,0x10
c000a774:	90                   	nop
c000a775:	83 c4 0c             	add    esp,0xc
c000a778:	c3                   	ret    
c000a779:	90                   	nop

c000a77a <LogicalDisk::~LogicalDisk()>:
c000a77a:	83 ec 0c             	sub    esp,0xc
c000a77d:	83 ec 0c             	sub    esp,0xc
c000a780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a784:	e8 cd ff ff ff       	call   c000a756 <LogicalDisk::~LogicalDisk()>
c000a789:	83 c4 10             	add    esp,0x10
c000a78c:	83 ec 08             	sub    esp,0x8
c000a78f:	68 78 01 00 00       	push   0x178
c000a794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a798:	e8 df 2b 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c000a79d:	83 c4 10             	add    esp,0x10
c000a7a0:	83 c4 0c             	add    esp,0xc
c000a7a3:	c3                   	ret    

c000a7a4 <LogicalDisk::open(int, int, void*)>:
c000a7a4:	83 ec 18             	sub    esp,0x18
c000a7a7:	68 0c 75 02 c0       	push   0xc002750c
c000a7ac:	e8 07 55 00 00       	call   c000fcb8 <KePanic(char const*)>
c000a7b1:	83 c8 ff             	or     eax,0xffffffff
c000a7b4:	83 c4 1c             	add    esp,0x1c
c000a7b7:	c3                   	ret    

c000a7b8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a7b8:	53                   	push   ebx
c000a7b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a7bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a7c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7c5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a7cb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a7d1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a7d7:	77 10                	ja     c000a7e9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a7d9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a7df:	89 d3                	mov    ebx,edx
c000a7e1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a7e7:	72 05                	jb     c000a7ee <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a7e9:	83 c8 ff             	or     eax,0xffffffff
c000a7ec:	89 c2                	mov    edx,eax
c000a7ee:	5b                   	pop    ebx
c000a7ef:	c3                   	ret    

c000a7f0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a7f0:	56                   	push   esi
c000a7f1:	83 c8 ff             	or     eax,0xffffffff
c000a7f4:	53                   	push   ebx
c000a7f5:	89 c2                	mov    edx,eax
c000a7f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a7fb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a803:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a809:	77 27                	ja     c000a832 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a80b:	89 d8                	mov    eax,ebx
c000a80d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a813:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a819:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a81e:	89 c2                	mov    edx,eax
c000a820:	73 10                	jae    c000a832 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a822:	89 c8                	mov    eax,ecx
c000a824:	89 da                	mov    edx,ebx
c000a826:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a82c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a832:	5b                   	pop    ebx
c000a833:	5e                   	pop    esi
c000a834:	c3                   	ret    
c000a835:	90                   	nop

c000a836 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a836:	83 ec 1c             	sub    esp,0x1c
c000a839:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a83d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a841:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a845:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a849:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a84d:	89 04 24             	mov    DWORD PTR [esp],eax
c000a850:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a85c:	83 ec 08             	sub    esp,0x8
c000a85f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a863:	50                   	push   eax
c000a864:	e8 4d f3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a869:	83 c4 10             	add    esp,0x10
c000a86c:	ba 58 75 02 c0       	mov    edx,0xc0027558
c000a871:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a875:	89 10                	mov    DWORD PTR [eax],edx
c000a877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a87b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a886:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a88d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a891:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a89c:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a8a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a8ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a8b2:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a8b8:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a8be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8c9:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a8cf:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a8d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a8dd:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a8e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e7:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a8f1:	90                   	nop
c000a8f2:	83 c4 1c             	add    esp,0x1c
c000a8f5:	c3                   	ret    

c000a8f6 <LogicalDisk::assignDriveLetter()>:
c000a8f6:	55                   	push   ebp
c000a8f7:	57                   	push   edi
c000a8f8:	56                   	push   esi
c000a8f9:	53                   	push   ebx
c000a8fa:	83 ec 14             	sub    esp,0x14
c000a8fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a901:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a907:	b0 41                	mov    al,0x41
c000a909:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a90f:	84 d2                	test   dl,dl
c000a911:	75 02                	jne    c000a915 <LogicalDisk::assignDriveLetter()+0x1f>
c000a913:	b0 43                	mov    al,0x43
c000a915:	8b 3d c0 0a 03 c0    	mov    edi,DWORD PTR ds:0xc0030ac0
c000a91b:	0f b6 ca             	movzx  ecx,dl
c000a91e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a922:	0f be e8             	movsx  ebp,al
c000a925:	8b 3d c4 0a 03 c0    	mov    edi,DWORD PTR ds:0xc0030ac4
c000a92b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a92f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a933:	3c 43                	cmp    al,0x43
c000a935:	75 10                	jne    c000a947 <LogicalDisk::assignDriveLetter()+0x51>
c000a937:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a93e:	75 5a                	jne    c000a99a <LogicalDisk::assignDriveLetter()+0xa4>
c000a940:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a945:	75 53                	jne    c000a99a <LogicalDisk::assignDriveLetter()+0xa4>
c000a947:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a94a:	ba 01 00 00 00       	mov    edx,0x1
c000a94f:	89 34 24             	mov    DWORD PTR [esp],esi
c000a952:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a955:	d3 e2                	shl    edx,cl
c000a957:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a95b:	89 d7                	mov    edi,edx
c000a95d:	89 d6                	mov    esi,edx
c000a95f:	c1 ff 1f             	sar    edi,0x1f
c000a962:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a966:	21 f9                	and    ecx,edi
c000a968:	09 d1                	or     ecx,edx
c000a96a:	75 2e                	jne    c000a99a <LogicalDisk::assignDriveLetter()+0xa4>
c000a96c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a970:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a974:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a97a:	09 f2                	or     edx,esi
c000a97c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a97f:	89 15 c0 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac0,edx
c000a985:	89 1c b5 e0 0a 03 c0 	mov    DWORD PTR [esi*4-0x3ffcf520],ebx
c000a98c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a990:	09 fa                	or     edx,edi
c000a992:	89 15 c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,edx
c000a998:	eb 0d                	jmp    c000a9a7 <LogicalDisk::assignDriveLetter()+0xb1>
c000a99a:	8d 50 01             	lea    edx,[eax+0x1]
c000a99d:	45                   	inc    ebp
c000a99e:	88 d0                	mov    al,dl
c000a9a0:	80 fa 5b             	cmp    dl,0x5b
c000a9a3:	75 8e                	jne    c000a933 <LogicalDisk::assignDriveLetter()+0x3d>
c000a9a5:	31 c0                	xor    eax,eax
c000a9a7:	83 c4 14             	add    esp,0x14
c000a9aa:	5b                   	pop    ebx
c000a9ab:	5e                   	pop    esi
c000a9ac:	5f                   	pop    edi
c000a9ad:	5d                   	pop    ebp
c000a9ae:	c3                   	ret    
c000a9af:	90                   	nop

c000a9b0 <LogicalDisk::mount()>:
c000a9b0:	56                   	push   esi
c000a9b1:	53                   	push   ebx
c000a9b2:	53                   	push   ebx
c000a9b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a9b7:	8b 1d 04 03 03 c0    	mov    ebx,DWORD PTR ds:0xc0030304
c000a9bd:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9c7:	85 db                	test   ebx,ebx
c000a9c9:	74 27                	je     c000a9f2 <LogicalDisk::mount()+0x42>
c000a9cb:	51                   	push   ecx
c000a9cc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a9d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a9d5:	83 e8 41             	sub    eax,0x41
c000a9d8:	50                   	push   eax
c000a9d9:	56                   	push   esi
c000a9da:	53                   	push   ebx
c000a9db:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	84 c0                	test   al,al
c000a9e3:	74 08                	je     c000a9ed <LogicalDisk::mount()+0x3d>
c000a9e5:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a9eb:	eb 07                	jmp    c000a9f4 <LogicalDisk::mount()+0x44>
c000a9ed:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a9f0:	eb d5                	jmp    c000a9c7 <LogicalDisk::mount()+0x17>
c000a9f2:	31 c0                	xor    eax,eax
c000a9f4:	5a                   	pop    edx
c000a9f5:	5b                   	pop    ebx
c000a9f6:	5e                   	pop    esi
c000a9f7:	c3                   	ret    

c000a9f8 <LogicalDisk::unmount()>:
c000a9f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9fc:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000aa06:	c3                   	ret    
c000aa07:	90                   	nop

c000aa08 <LogicalDisk::eject()>:
c000aa08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa0c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000aa12:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa18:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000aa1b:	90                   	nop

c000aa1c <LogicalDisk::unassignDriveLetter()>:
c000aa1c:	57                   	push   edi
c000aa1d:	56                   	push   esi
c000aa1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa22:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa29:	85 c9                	test   ecx,ecx
c000aa2b:	75 0f                	jne    c000aa3c <LogicalDisk::unassignDriveLetter()+0x20>
c000aa2d:	c7 44 24 0c 30 75 02 c0 	mov    DWORD PTR [esp+0xc],0xc0027530
c000aa35:	5e                   	pop    esi
c000aa36:	5f                   	pop    edi
c000aa37:	e9 7c 52 00 00       	jmp    c000fcb8 <KePanic(char const*)>
c000aa3c:	83 e9 41             	sub    ecx,0x41
c000aa3f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa46:	b8 01 00 00 00       	mov    eax,0x1
c000aa4b:	c7 04 8d e0 0a 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffcf520],0x0
c000aa56:	d3 e0                	shl    eax,cl
c000aa58:	89 c7                	mov    edi,eax
c000aa5a:	f7 d0                	not    eax
c000aa5c:	c1 ff 1f             	sar    edi,0x1f
c000aa5f:	21 05 c0 0a 03 c0    	and    DWORD PTR ds:0xc0030ac0,eax
c000aa65:	89 fe                	mov    esi,edi
c000aa67:	f7 d6                	not    esi
c000aa69:	21 35 c4 0a 03 c0    	and    DWORD PTR ds:0xc0030ac4,esi
c000aa6f:	5e                   	pop    esi
c000aa70:	5f                   	pop    edi
c000aa71:	c3                   	ret    

c000aa72 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa72:	57                   	push   edi
c000aa73:	56                   	push   esi
c000aa74:	53                   	push   ebx
c000aa75:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa7d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa85:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa8b:	77 41                	ja     c000aace <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa8d:	99                   	cdq    
c000aa8e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa94:	01 c8                	add    eax,ecx
c000aa96:	11 da                	adc    edx,ebx
c000aa98:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa9e:	19 d7                	sbb    edi,edx
c000aaa0:	72 33                	jb     c000aad5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aaa2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aaa8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aaae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aab2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aab6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aabc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aac2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aac6:	5b                   	pop    ebx
c000aac7:	5e                   	pop    esi
c000aac8:	5f                   	pop    edi
c000aac9:	e9 bc 0b 00 00       	jmp    c000b68a <VCache::read(unsigned long long, int, void*)>
c000aace:	b8 05 00 00 00       	mov    eax,0x5
c000aad3:	eb 05                	jmp    c000aada <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aad5:	b8 07 00 00 00       	mov    eax,0x7
c000aada:	5b                   	pop    ebx
c000aadb:	5e                   	pop    esi
c000aadc:	5f                   	pop    edi
c000aadd:	c3                   	ret    

c000aade <LogicalDisk::write(unsigned long long, int, void*)>:
c000aade:	57                   	push   edi
c000aadf:	56                   	push   esi
c000aae0:	53                   	push   ebx
c000aae1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aae5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aae9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aaed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaf1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aaf7:	77 41                	ja     c000ab3a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aaf9:	99                   	cdq    
c000aafa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ab00:	01 c8                	add    eax,ecx
c000ab02:	11 da                	adc    edx,ebx
c000ab04:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ab0a:	19 d7                	sbb    edi,edx
c000ab0c:	72 33                	jb     c000ab41 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ab0e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ab14:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ab1a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ab1e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab22:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab28:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab32:	5b                   	pop    ebx
c000ab33:	5e                   	pop    esi
c000ab34:	5f                   	pop    edi
c000ab35:	e9 82 09 00 00       	jmp    c000b4bc <VCache::write(unsigned long long, int, void*)>
c000ab3a:	b8 05 00 00 00       	mov    eax,0x5
c000ab3f:	eb 05                	jmp    c000ab46 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab41:	b8 07 00 00 00       	mov    eax,0x7
c000ab46:	5b                   	pop    ebx
c000ab47:	5e                   	pop    esi
c000ab48:	5f                   	pop    edi
c000ab49:	c3                   	ret    
c000ab4a:	66 90                	xchg   ax,ax

c000ab4c <Mouse::Mouse(char const*)>:
c000ab4c:	83 ec 0c             	sub    esp,0xc
c000ab4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab53:	83 ec 08             	sub    esp,0x8
c000ab56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab5a:	50                   	push   eax
c000ab5b:	e8 56 f0 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ab60:	83 c4 10             	add    esp,0x10
c000ab63:	ba 84 75 02 c0       	mov    edx,0xc0027584
c000ab68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6c:	89 10                	mov    DWORD PTR [eax],edx
c000ab6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab72:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab7c:	90                   	nop
c000ab7d:	83 c4 0c             	add    esp,0xc
c000ab80:	c3                   	ret    
c000ab81:	90                   	nop
c000ab82:	66 90                	xchg   ax,ax

c000ab84 <Mouse::~Mouse()>:
c000ab84:	83 ec 0c             	sub    esp,0xc
c000ab87:	ba 84 75 02 c0       	mov    edx,0xc0027584
c000ab8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab90:	89 10                	mov    DWORD PTR [eax],edx
c000ab92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab96:	83 ec 0c             	sub    esp,0xc
c000ab99:	50                   	push   eax
c000ab9a:	e8 b7 ed ff ff       	call   c0009956 <Device::~Device()>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	90                   	nop
c000aba3:	83 c4 0c             	add    esp,0xc
c000aba6:	c3                   	ret    
c000aba7:	90                   	nop

c000aba8 <Mouse::~Mouse()>:
c000aba8:	83 ec 0c             	sub    esp,0xc
c000abab:	83 ec 0c             	sub    esp,0xc
c000abae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abb2:	e8 cd ff ff ff       	call   c000ab84 <Mouse::~Mouse()>
c000abb7:	83 c4 10             	add    esp,0x10
c000abba:	83 ec 08             	sub    esp,0x8
c000abbd:	68 58 01 00 00       	push   0x158
c000abc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc6:	e8 b1 27 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c000abcb:	83 c4 10             	add    esp,0x10
c000abce:	83 c4 0c             	add    esp,0xc
c000abd1:	c3                   	ret    

c000abd2 <NIC::getMAC()>:
c000abd2:	31 c0                	xor    eax,eax
c000abd4:	31 d2                	xor    edx,edx
c000abd6:	c3                   	ret    
c000abd7:	90                   	nop

c000abd8 <NIC::write(int, unsigned char*, int*)>:
c000abd8:	b8 01 00 00 00       	mov    eax,0x1
c000abdd:	c3                   	ret    

c000abde <NIC::NIC(char const*)>:
c000abde:	83 ec 0c             	sub    esp,0xc
c000abe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe5:	83 ec 08             	sub    esp,0x8
c000abe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abec:	50                   	push   eax
c000abed:	e8 c4 ef ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000abf2:	83 c4 10             	add    esp,0x10
c000abf5:	ba b0 75 02 c0       	mov    edx,0xc00275b0
c000abfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abfe:	89 10                	mov    DWORD PTR [eax],edx
c000ac00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac04:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ac0e:	90                   	nop
c000ac0f:	83 c4 0c             	add    esp,0xc
c000ac12:	c3                   	ret    
c000ac13:	90                   	nop

c000ac14 <NIC::~NIC()>:
c000ac14:	83 ec 0c             	sub    esp,0xc
c000ac17:	ba b0 75 02 c0       	mov    edx,0xc00275b0
c000ac1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac20:	89 10                	mov    DWORD PTR [eax],edx
c000ac22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac26:	83 ec 0c             	sub    esp,0xc
c000ac29:	50                   	push   eax
c000ac2a:	e8 27 ed ff ff       	call   c0009956 <Device::~Device()>
c000ac2f:	83 c4 10             	add    esp,0x10
c000ac32:	90                   	nop
c000ac33:	83 c4 0c             	add    esp,0xc
c000ac36:	c3                   	ret    
c000ac37:	90                   	nop

c000ac38 <NIC::~NIC()>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 0c             	sub    esp,0xc
c000ac3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac42:	e8 cd ff ff ff       	call   c000ac14 <NIC::~NIC()>
c000ac47:	83 c4 10             	add    esp,0x10
c000ac4a:	83 ec 08             	sub    esp,0x8
c000ac4d:	68 58 01 00 00       	push   0x158
c000ac52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac56:	e8 21 27 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c000ac5b:	83 c4 10             	add    esp,0x10
c000ac5e:	83 c4 0c             	add    esp,0xc
c000ac61:	c3                   	ret    

c000ac62 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac62:	55                   	push   ebp
c000ac63:	57                   	push   edi
c000ac64:	56                   	push   esi
c000ac65:	53                   	push   ebx
c000ac66:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac6c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ac73:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ac7a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ac81:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ac88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac8c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac90:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac97:	e8 16 f0 ff ff       	call   c0009cb2 <Device::getName()>
c000ac9c:	5a                   	pop    edx
c000ac9d:	59                   	pop    ecx
c000ac9e:	50                   	push   eax
c000ac9f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000aca3:	55                   	push   ebp
c000aca4:	e8 97 59 ff ff       	call   c0000640 <strcpy>
c000aca9:	5b                   	pop    ebx
c000acaa:	58                   	pop    eax
c000acab:	68 dc 75 02 c0       	push   0xc00275dc
c000acb0:	55                   	push   ebp
c000acb1:	e8 8a 5b ff ff       	call   c0000840 <strcat>
c000acb6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000acbd:	e8 a1 4b 00 00       	call   c000f863 <malloc>
c000acc2:	83 c4 0c             	add    esp,0xc
c000acc5:	89 c3                	mov    ebx,eax
c000acc7:	57                   	push   edi
c000acc8:	56                   	push   esi
c000acc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000accd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000acd8:	55                   	push   ebp
c000acd9:	50                   	push   eax
c000acda:	e8 57 fb ff ff       	call   c000a836 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000acdf:	83 c4 14             	add    esp,0x14
c000ace2:	53                   	push   ebx
c000ace3:	e8 0e fc ff ff       	call   c000a8f6 <LogicalDisk::assignDriveLetter()>
c000ace8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000aceb:	e8 c0 fc ff ff       	call   c000a9b0 <LogicalDisk::mount()>
c000acf0:	58                   	pop    eax
c000acf1:	5a                   	pop    edx
c000acf2:	53                   	push   ebx
c000acf3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000acfa:	e8 55 ed ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000acff:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ad05:	5b                   	pop    ebx
c000ad06:	5e                   	pop    esi
c000ad07:	5f                   	pop    edi
c000ad08:	5d                   	pop    ebp
c000ad09:	c3                   	ret    

c000ad0a <createPartitionsForDisk(PhysicalDisk*)>:
c000ad0a:	55                   	push   ebp
c000ad0b:	57                   	push   edi
c000ad0c:	56                   	push   esi
c000ad0d:	53                   	push   ebx
c000ad0e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ad14:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ad1b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ad21:	3d 00 02 00 00       	cmp    eax,0x200
c000ad26:	74 27                	je     c000ad4f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad28:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad2e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad34:	83 ec 10             	sub    esp,0x10
c000ad37:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad3b:	99                   	cdq    
c000ad3c:	c1 e6 0a             	shl    esi,0xa
c000ad3f:	52                   	push   edx
c000ad40:	89 fd                	mov    ebp,edi
c000ad42:	50                   	push   eax
c000ad43:	55                   	push   ebp
c000ad44:	56                   	push   esi
c000ad45:	e8 2a 71 01 00       	call   c0021e74 <__udivdi3>
c000ad4a:	e9 b9 00 00 00       	jmp    c000ae08 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad54:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad58:	56                   	push   esi
c000ad59:	6a 01                	push   0x1
c000ad5b:	6a 00                	push   0x0
c000ad5d:	6a 00                	push   0x0
c000ad5f:	53                   	push   ebx
c000ad60:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad63:	83 c4 20             	add    esp,0x20
c000ad66:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad6e:	75 0a                	jne    c000ad7a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad70:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad78:	74 2c                	je     c000ada6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad7a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad80:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad86:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad8c:	83 ec 10             	sub    esp,0x10
c000ad8f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad93:	89 f7                	mov    edi,esi
c000ad95:	c1 e0 0a             	shl    eax,0xa
c000ad98:	c1 ff 1f             	sar    edi,0x1f
c000ad9b:	57                   	push   edi
c000ad9c:	56                   	push   esi
c000ad9d:	52                   	push   edx
c000ad9e:	50                   	push   eax
c000ad9f:	e8 d0 70 01 00       	call   c0021e74 <__udivdi3>
c000ada4:	eb 62                	jmp    c000ae08 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ada6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000adad:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000adb4:	89 cf                	mov    edi,ecx
c000adb6:	83 e2 7f             	and    edx,0x7f
c000adb9:	83 e7 7f             	and    edi,0x7f
c000adbc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000adc3:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000adc6:	83 e0 7f             	and    eax,0x7f
c000adc9:	8d 14 01             	lea    edx,[ecx+eax*1]
c000adcc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000add3:	83 e0 7f             	and    eax,0x7f
c000add6:	01 d0                	add    eax,edx
c000add8:	89 c5                	mov    ebp,eax
c000adda:	84 c0                	test   al,al
c000addc:	74 41                	je     c000ae1f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000adde:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ade4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adf0:	83 ec 10             	sub    esp,0x10
c000adf3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000adf7:	89 f7                	mov    edi,esi
c000adf9:	c1 e0 0a             	shl    eax,0xa
c000adfc:	c1 ff 1f             	sar    edi,0x1f
c000adff:	57                   	push   edi
c000ae00:	56                   	push   esi
c000ae01:	52                   	push   edx
c000ae02:	50                   	push   eax
c000ae03:	e8 6c 70 01 00       	call   c0021e74 <__udivdi3>
c000ae08:	83 c4 14             	add    esp,0x14
c000ae0b:	52                   	push   edx
c000ae0c:	50                   	push   eax
c000ae0d:	6a 00                	push   0x0
c000ae0f:	6a 00                	push   0x0
c000ae11:	53                   	push   ebx
c000ae12:	e8 4b fe ff ff       	call   c000ac62 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ae17:	83 c4 20             	add    esp,0x20
c000ae1a:	e9 73 01 00 00       	jmp    c000af92 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ae1f:	89 f0                	mov    eax,esi
c000ae21:	31 c9                	xor    ecx,ecx
c000ae23:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae2a:	75 02                	jne    c000ae2e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae2c:	89 cd                	mov    ebp,ecx
c000ae2e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae35:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae3c:	c1 e2 08             	shl    edx,0x8
c000ae3f:	c1 e6 10             	shl    esi,0x10
c000ae42:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae4a:	09 f2                	or     edx,esi
c000ae4c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae54:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae5b:	83 c0 10             	add    eax,0x10
c000ae5e:	09 f2                	or     edx,esi
c000ae60:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae67:	c1 e6 18             	shl    esi,0x18
c000ae6a:	09 f2                	or     edx,esi
c000ae6c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae73:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae77:	c1 e6 10             	shl    esi,0x10
c000ae7a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae81:	c1 e2 08             	shl    edx,0x8
c000ae84:	09 f2                	or     edx,esi
c000ae86:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae8d:	09 f2                	or     edx,esi
c000ae8f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae96:	c1 e6 18             	shl    esi,0x18
c000ae99:	09 f2                	or     edx,esi
c000ae9b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae9f:	41                   	inc    ecx
c000aea0:	83 f9 04             	cmp    ecx,0x4
c000aea3:	0f 85 7a ff ff ff    	jne    c000ae23 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000aea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aead:	83 f0 01             	xor    eax,0x1
c000aeb0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000aeb4:	75 4f                	jne    c000af05 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aeb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeba:	83 f0 01             	xor    eax,0x1
c000aebd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000aec1:	75 42                	jne    c000af05 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aec3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aecb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000aed3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000aed9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000aedf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000aee5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000aee9:	89 f7                	mov    edi,esi
c000aeeb:	c1 e0 0a             	shl    eax,0xa
c000aeee:	c1 ff 1f             	sar    edi,0x1f
c000aef1:	57                   	push   edi
c000aef2:	56                   	push   esi
c000aef3:	52                   	push   edx
c000aef4:	50                   	push   eax
c000aef5:	e8 7a 6f 01 00       	call   c0021e74 <__udivdi3>
c000aefa:	83 c4 10             	add    esp,0x10
c000aefd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000af01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000af05:	89 e8                	mov    eax,ebp
c000af07:	0f b6 e8             	movzx  ebp,al
c000af0a:	85 ed                	test   ebp,ebp
c000af0c:	74 50                	je     c000af5e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000af0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af12:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af16:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000af1a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000af1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af26:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af2a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af32:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af3a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af3e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af42:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af46:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af4e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af52:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af56:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af5a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af5e:	31 ed                	xor    ebp,ebp
c000af60:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af64:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af68:	89 f8                	mov    eax,edi
c000af6a:	09 f0                	or     eax,esi
c000af6c:	74 1e                	je     c000af8c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af6e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af72:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af76:	89 d1                	mov    ecx,edx
c000af78:	09 c1                	or     ecx,eax
c000af7a:	74 10                	je     c000af8c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af7c:	83 ec 0c             	sub    esp,0xc
c000af7f:	57                   	push   edi
c000af80:	56                   	push   esi
c000af81:	52                   	push   edx
c000af82:	50                   	push   eax
c000af83:	53                   	push   ebx
c000af84:	e8 d9 fc ff ff       	call   c000ac62 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af89:	83 c4 20             	add    esp,0x20
c000af8c:	45                   	inc    ebp
c000af8d:	83 fd 04             	cmp    ebp,0x4
c000af90:	75 ce                	jne    c000af60 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af92:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af98:	5b                   	pop    ebx
c000af99:	5e                   	pop    esi
c000af9a:	5f                   	pop    edi
c000af9b:	5d                   	pop    ebp
c000af9c:	c3                   	ret    
c000af9d:	66 90                	xchg   ax,ax
c000af9f:	90                   	nop

c000afa0 <Serial::Serial(char const*)>:
c000afa0:	83 ec 0c             	sub    esp,0xc
c000afa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa7:	83 ec 08             	sub    esp,0x8
c000afaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afae:	50                   	push   eax
c000afaf:	e8 02 ec ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	ba f0 75 02 c0       	mov    edx,0xc00275f0
c000afbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc0:	89 10                	mov    DWORD PTR [eax],edx
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000afd0:	90                   	nop
c000afd1:	83 c4 0c             	add    esp,0xc
c000afd4:	c3                   	ret    
c000afd5:	90                   	nop
c000afd6:	66 90                	xchg   ax,ax

c000afd8 <Serial::~Serial()>:
c000afd8:	83 ec 0c             	sub    esp,0xc
c000afdb:	ba f0 75 02 c0       	mov    edx,0xc00275f0
c000afe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe4:	89 10                	mov    DWORD PTR [eax],edx
c000afe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afea:	83 ec 0c             	sub    esp,0xc
c000afed:	50                   	push   eax
c000afee:	e8 63 e9 ff ff       	call   c0009956 <Device::~Device()>
c000aff3:	83 c4 10             	add    esp,0x10
c000aff6:	90                   	nop
c000aff7:	83 c4 0c             	add    esp,0xc
c000affa:	c3                   	ret    
c000affb:	90                   	nop

c000affc <Serial::~Serial()>:
c000affc:	83 ec 0c             	sub    esp,0xc
c000afff:	83 ec 0c             	sub    esp,0xc
c000b002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b006:	e8 cd ff ff ff       	call   c000afd8 <Serial::~Serial()>
c000b00b:	83 c4 10             	add    esp,0x10
c000b00e:	83 ec 08             	sub    esp,0x8
c000b011:	68 58 01 00 00       	push   0x158
c000b016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01a:	e8 5d 23 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c000b01f:	83 c4 10             	add    esp,0x10
c000b022:	83 c4 0c             	add    esp,0xc
c000b025:	c3                   	ret    
c000b026:	66 90                	xchg   ax,ax

c000b028 <Timer::Timer(char const*)>:
c000b028:	83 ec 0c             	sub    esp,0xc
c000b02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02f:	83 ec 08             	sub    esp,0x8
c000b032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b036:	50                   	push   eax
c000b037:	e8 7a eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000b03c:	83 c4 10             	add    esp,0x10
c000b03f:	ba d0 76 02 c0       	mov    edx,0xc00276d0
c000b044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b048:	89 10                	mov    DWORD PTR [eax],edx
c000b04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b058:	90                   	nop
c000b059:	83 c4 0c             	add    esp,0xc
c000b05c:	c3                   	ret    
c000b05d:	90                   	nop
c000b05e:	66 90                	xchg   ax,ax

c000b060 <Timer::~Timer()>:
c000b060:	83 ec 0c             	sub    esp,0xc
c000b063:	ba d0 76 02 c0       	mov    edx,0xc00276d0
c000b068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06c:	89 10                	mov    DWORD PTR [eax],edx
c000b06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b072:	83 ec 0c             	sub    esp,0xc
c000b075:	50                   	push   eax
c000b076:	e8 db e8 ff ff       	call   c0009956 <Device::~Device()>
c000b07b:	83 c4 10             	add    esp,0x10
c000b07e:	90                   	nop
c000b07f:	83 c4 0c             	add    esp,0xc
c000b082:	c3                   	ret    
c000b083:	90                   	nop

c000b084 <Timer::~Timer()>:
c000b084:	83 ec 0c             	sub    esp,0xc
c000b087:	83 ec 0c             	sub    esp,0xc
c000b08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b08e:	e8 cd ff ff ff       	call   c000b060 <Timer::~Timer()>
c000b093:	83 c4 10             	add    esp,0x10
c000b096:	83 ec 08             	sub    esp,0x8
c000b099:	68 5c 01 00 00       	push   0x15c
c000b09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0a2:	e8 d5 22 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c000b0a7:	83 c4 10             	add    esp,0x10
c000b0aa:	83 c4 0c             	add    esp,0xc
c000b0ad:	c3                   	ret    

c000b0ae <Timer::read()>:
c000b0ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0b8:	c3                   	ret    

c000b0b9 <setupTimer(int)>:
c000b0b9:	53                   	push   ebx
c000b0ba:	83 ec 14             	sub    esp,0x14
c000b0bd:	68 5c 01 00 00       	push   0x15c
c000b0c2:	e8 9c 47 00 00       	call   c000f863 <malloc>
c000b0c7:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0ca:	89 c3                	mov    ebx,eax
c000b0cc:	e8 5b 66 01 00       	call   c002172c <PIT::PIT()>
c000b0d1:	58                   	pop    eax
c000b0d2:	5a                   	pop    edx
c000b0d3:	53                   	push   ebx
c000b0d4:	ff 35 08 11 03 c0    	push   DWORD PTR ds:0xc0031108
c000b0da:	e8 75 e9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000b0df:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0e1:	6a 00                	push   0x0
c000b0e3:	6a 00                	push   0x0
c000b0e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b0e9:	53                   	push   ebx
c000b0ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0ed:	89 d8                	mov    eax,ebx
c000b0ef:	83 c4 28             	add    esp,0x28
c000b0f2:	5b                   	pop    ebx
c000b0f3:	c3                   	ret    

c000b0f4 <timerHandler(unsigned int)>:
c000b0f4:	57                   	push   edi
c000b0f5:	31 d2                	xor    edx,edx
c000b0f7:	56                   	push   esi
c000b0f8:	53                   	push   ebx
c000b0f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0fd:	01 1d 50 0b 03 c0    	add    DWORD PTR ds:0xc0030b50,ebx
c000b103:	11 15 54 0b 03 c0    	adc    DWORD PTR ds:0xc0030b54,edx
c000b109:	80 3d 0d 11 03 c0 00 	cmp    BYTE PTR ds:0xc003110d,0x0
c000b110:	75 12                	jne    c000b124 <timerHandler(unsigned int)+0x30>
c000b112:	c7 44 24 10 7f 76 02 c0 	mov    DWORD PTR [esp+0x10],0xc002767f
c000b11a:	5b                   	pop    ebx
c000b11b:	5e                   	pop    esi
c000b11c:	5f                   	pop    edi
c000b11d:	e9 5a be ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000b122:	66 90                	xchg   ax,ax
c000b124:	fa                   	cli    
c000b125:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c000b12b:	83 ec 0c             	sub    esp,0xc
c000b12e:	68 40 13 03 c0       	push   0xc0031340
c000b133:	e8 ac a9 01 00       	call   c0025ae4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	84 c0                	test   al,al
c000b13d:	0f 85 a9 00 00 00    	jne    c000b1ec <timerHandler(unsigned int)+0xf8>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	68 40 13 03 c0       	push   0xc0031340
c000b14b:	e8 b0 a9 01 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 c6                	mov    esi,eax
c000b155:	8d 76 00             	lea    esi,[esi+0x0]
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	68 40 13 03 c0       	push   0xc0031340
c000b160:	e8 9b a9 01 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b165:	c7 04 24 40 13 03 c0 	mov    DWORD PTR [esp],0xc0031340
c000b16c:	89 c7                	mov    edi,eax
c000b16e:	e8 95 a9 01 00       	call   c0025b08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b173:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b176:	83 c4 10             	add    esp,0x10
c000b179:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b17c:	39 15 50 0b 03 c0    	cmp    DWORD PTR ds:0xc0030b50,edx
c000b182:	a1 54 0b 03 c0       	mov    eax,ds:0xc0030b54
c000b187:	19 c8                	sbb    eax,ecx
c000b189:	72 21                	jb     c000b1ac <timerHandler(unsigned int)+0xb8>
c000b18b:	83 ec 0c             	sub    esp,0xc
c000b18e:	57                   	push   edi
c000b18f:	e8 08 ba 00 00       	call   c0016b9c <unblockTask(ThreadControlBlock*)>
c000b194:	83 c4 10             	add    esp,0x10
c000b197:	39 fe                	cmp    esi,edi
c000b199:	75 25                	jne    c000b1c0 <timerHandler(unsigned int)+0xcc>
c000b19b:	83 ec 0c             	sub    esp,0xc
c000b19e:	68 40 13 03 c0       	push   0xc0031340
c000b1a3:	e8 58 a9 01 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1a8:	89 c6                	mov    esi,eax
c000b1aa:	eb 10                	jmp    c000b1bc <timerHandler(unsigned int)+0xc8>
c000b1ac:	51                   	push   ecx
c000b1ad:	51                   	push   ecx
c000b1ae:	57                   	push   edi
c000b1af:	68 40 13 03 c0       	push   0xc0031340
c000b1b4:	e8 0b aa 01 00       	call   c0025bc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b1b9:	8d 76 00             	lea    esi,[esi+0x0]
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	90                   	nop
c000b1c0:	83 ec 0c             	sub    esp,0xc
c000b1c3:	68 40 13 03 c0       	push   0xc0031340
c000b1c8:	e8 17 a9 01 00       	call   c0025ae4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b1cd:	83 c4 10             	add    esp,0x10
c000b1d0:	84 c0                	test   al,al
c000b1d2:	75 18                	jne    c000b1ec <timerHandler(unsigned int)+0xf8>
c000b1d4:	83 ec 0c             	sub    esp,0xc
c000b1d7:	68 40 13 03 c0       	push   0xc0031340
c000b1dc:	e8 1f a9 01 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1e1:	83 c4 10             	add    esp,0x10
c000b1e4:	39 f0                	cmp    eax,esi
c000b1e6:	0f 85 6c ff ff ff    	jne    c000b158 <timerHandler(unsigned int)+0x64>
c000b1ec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b1f2:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b1f5:	85 c0                	test   eax,eax
c000b1f7:	74 5f                	je     c000b258 <timerHandler(unsigned int)+0x164>
c000b1f9:	80 3d 0c 11 03 c0 00 	cmp    BYTE PTR ds:0xc003110c,0x0
c000b200:	74 56                	je     c000b258 <timerHandler(unsigned int)+0x164>
c000b202:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b207:	76 23                	jbe    c000b22c <timerHandler(unsigned int)+0x138>
c000b209:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c000b20d:	75 11                	jne    c000b220 <timerHandler(unsigned int)+0x12c>
c000b20f:	52                   	push   edx
c000b210:	52                   	push   edx
c000b211:	50                   	push   eax
c000b212:	68 95 76 02 c0       	push   0xc0027695
c000b217:	e8 60 bd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b21c:	83 c4 10             	add    esp,0x10
c000b21f:	90                   	nop
c000b220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b225:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b22c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b232:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b235:	39 d8                	cmp    eax,ebx
c000b237:	73 0b                	jae    c000b244 <timerHandler(unsigned int)+0x150>
c000b239:	c7 42 38 00 00 00 00 	mov    DWORD PTR [edx+0x38],0x0
c000b240:	eb 0e                	jmp    c000b250 <timerHandler(unsigned int)+0x15c>
c000b242:	66 90                	xchg   ax,ax
c000b244:	89 c1                	mov    ecx,eax
c000b246:	29 d9                	sub    ecx,ebx
c000b248:	39 d8                	cmp    eax,ebx
c000b24a:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b24d:	75 09                	jne    c000b258 <timerHandler(unsigned int)+0x164>
c000b24f:	90                   	nop
c000b250:	e8 eb b5 00 00       	call   c0016840 <schedule()>
c000b255:	8d 76 00             	lea    esi,[esi+0x0]
c000b258:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c000b25f:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c000b266:	75 04                	jne    c000b26c <timerHandler(unsigned int)+0x178>
c000b268:	fb                   	sti    
c000b269:	8d 76 00             	lea    esi,[esi+0x0]
c000b26c:	5b                   	pop    ebx
c000b26d:	5e                   	pop    esi
c000b26e:	5f                   	pop    edi
c000b26f:	c3                   	ret    

c000b270 <VCache::VCache(PhysicalDisk*)>:
c000b270:	53                   	push   ebx
c000b271:	83 ec 18             	sub    esp,0x18
c000b274:	ba 40 77 02 c0       	mov    edx,0xc0027740
c000b279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b27d:	89 10                	mov    DWORD PTR [eax],edx
c000b27f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b283:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b28e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b299:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b2a0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b2a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ab:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b2b2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b2b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2bd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b2c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b2cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b2d7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b2de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b2e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ea:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b2ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2f2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b2f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fa:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b301:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b309:	83 ec 0c             	sub    esp,0xc
c000b30c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b310:	e8 4e 45 00 00       	call   c000f863 <malloc>
c000b315:	83 c4 10             	add    esp,0x10
c000b318:	89 c3                	mov    ebx,eax
c000b31a:	83 ec 0c             	sub    esp,0xc
c000b31d:	53                   	push   ebx
c000b31e:	e8 75 49 00 00       	call   c000fc98 <Mutex::Mutex()>
c000b323:	83 c4 10             	add    esp,0x10
c000b326:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b32a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b32d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b331:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b335:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b33c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b343:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b347:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b34d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b351:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b354:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b358:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b35e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b364:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b368:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b36b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b36e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b372:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b376:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b37a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b380:	05 00 01 00 00       	add    eax,0x100
c000b385:	c1 e0 04             	shl    eax,0x4
c000b388:	83 ec 0c             	sub    esp,0xc
c000b38b:	50                   	push   eax
c000b38c:	e8 d2 44 00 00       	call   c000f863 <malloc>
c000b391:	83 c4 10             	add    esp,0x10
c000b394:	89 c2                	mov    edx,eax
c000b396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b39a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b39d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3a1:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b3a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3ac:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b3b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3b4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b3ba:	89 d0                	mov    eax,edx
c000b3bc:	c1 e0 02             	shl    eax,0x2
c000b3bf:	01 d0                	add    eax,edx
c000b3c1:	c1 e0 04             	shl    eax,0x4
c000b3c4:	83 ec 0c             	sub    esp,0xc
c000b3c7:	50                   	push   eax
c000b3c8:	e8 96 44 00 00       	call   c000f863 <malloc>
c000b3cd:	83 c4 10             	add    esp,0x10
c000b3d0:	89 c2                	mov    edx,eax
c000b3d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3d6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b3d9:	90                   	nop
c000b3da:	83 c4 18             	add    esp,0x18
c000b3dd:	5b                   	pop    ebx
c000b3de:	c3                   	ret    
c000b3df:	90                   	nop

c000b3e0 <VCache::invalidateReadBuffer()>:
c000b3e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b3ea:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b3ee:	c3                   	ret    
c000b3ef:	90                   	nop

c000b3f0 <VCache::writeWriteBuffer()>:
c000b3f0:	53                   	push   ebx
c000b3f1:	83 ec 08             	sub    esp,0x8
c000b3f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b3f8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b3fc:	74 1e                	je     c000b41c <VCache::writeWriteBuffer()+0x2c>
c000b3fe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b401:	83 ec 0c             	sub    esp,0xc
c000b404:	8b 10                	mov    edx,DWORD PTR [eax]
c000b406:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b409:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b40c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b40f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b412:	50                   	push   eax
c000b413:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b416:	83 c4 20             	add    esp,0x20
c000b419:	8d 76 00             	lea    esi,[esi+0x0]
c000b41c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b423:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b42a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b42e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b435:	83 c4 08             	add    esp,0x8
c000b438:	5b                   	pop    ebx
c000b439:	c3                   	ret    
c000b43a:	66 90                	xchg   ax,ax

c000b43c <VCache::~VCache()>:
c000b43c:	83 ec 0c             	sub    esp,0xc
c000b43f:	ba 40 77 02 c0       	mov    edx,0xc0027740
c000b444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b448:	89 10                	mov    DWORD PTR [eax],edx
c000b44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b451:	0f b6 c0             	movzx  eax,al
c000b454:	85 c0                	test   eax,eax
c000b456:	74 10                	je     c000b468 <VCache::~VCache()+0x2c>
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45f:	e8 8c ff ff ff       	call   c000b3f0 <VCache::writeWriteBuffer()>
c000b464:	83 c4 10             	add    esp,0x10
c000b467:	90                   	nop
c000b468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b46f:	83 ec 0c             	sub    esp,0xc
c000b472:	50                   	push   eax
c000b473:	e8 fb 43 00 00       	call   c000f873 <free>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b482:	83 ec 0c             	sub    esp,0xc
c000b485:	50                   	push   eax
c000b486:	e8 e8 43 00 00       	call   c000f873 <free>
c000b48b:	83 c4 10             	add    esp,0x10
c000b48e:	90                   	nop
c000b48f:	83 c4 0c             	add    esp,0xc
c000b492:	c3                   	ret    
c000b493:	90                   	nop

c000b494 <VCache::~VCache()>:
c000b494:	83 ec 0c             	sub    esp,0xc
c000b497:	83 ec 0c             	sub    esp,0xc
c000b49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b49e:	e8 99 ff ff ff       	call   c000b43c <VCache::~VCache()>
c000b4a3:	83 c4 10             	add    esp,0x10
c000b4a6:	83 ec 08             	sub    esp,0x8
c000b4a9:	6a 44                	push   0x44
c000b4ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4af:	e8 c8 1e 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c000b4b4:	83 c4 10             	add    esp,0x10
c000b4b7:	83 c4 0c             	add    esp,0xc
c000b4ba:	c3                   	ret    
c000b4bb:	90                   	nop

c000b4bc <VCache::write(unsigned long long, int, void*)>:
c000b4bc:	55                   	push   ebp
c000b4bd:	57                   	push   edi
c000b4be:	56                   	push   esi
c000b4bf:	53                   	push   ebx
c000b4c0:	83 ec 1c             	sub    esp,0x1c
c000b4c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b4c7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b4cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b4cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b4d3:	e8 54 b0 00 00       	call   c001652c <KeDisablePreemption()>
c000b4d8:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4dd:	50                   	push   eax
c000b4de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4e1:	0f af c3             	imul   eax,ebx
c000b4e4:	05 ff 0f 00 00       	add    eax,0xfff
c000b4e9:	99                   	cdq    
c000b4ea:	f7 f9                	idiv   ecx
c000b4ec:	50                   	push   eax
c000b4ed:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4f1:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b4f7:	e8 a8 8a 00 00       	call   c0013fa4 <VAS::canLockPages(unsigned long, int)>
c000b4fc:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b508:	74 2a                	je     c000b534 <VCache::write(unsigned long long, int, void*)+0x78>
c000b50a:	b9 00 10 00 00       	mov    ecx,0x1000
c000b50f:	50                   	push   eax
c000b510:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b513:	0f af c3             	imul   eax,ebx
c000b516:	05 ff 0f 00 00       	add    eax,0xfff
c000b51b:	99                   	cdq    
c000b51c:	f7 f9                	idiv   ecx
c000b51e:	50                   	push   eax
c000b51f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b523:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b529:	e8 da 8c 00 00       	call   c0014208 <VAS::lockPages(unsigned long, int)>
c000b52e:	83 c4 10             	add    esp,0x10
c000b531:	8d 76 00             	lea    esi,[esi+0x0]
c000b534:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b538:	74 0e                	je     c000b548 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b53a:	83 ec 0c             	sub    esp,0xc
c000b53d:	55                   	push   ebp
c000b53e:	e8 9d fe ff ff       	call   c000b3e0 <VCache::invalidateReadBuffer()>
c000b543:	83 c4 10             	add    esp,0x10
c000b546:	66 90                	xchg   ax,ax
c000b548:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b54c:	74 72                	je     c000b5c0 <VCache::write(unsigned long long, int, void*)+0x104>
c000b54e:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b551:	89 c8                	mov    eax,ecx
c000b553:	99                   	cdq    
c000b554:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b557:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b55a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b55e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b562:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b566:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b56a:	31 f0                	xor    eax,esi
c000b56c:	31 fa                	xor    edx,edi
c000b56e:	09 d0                	or     eax,edx
c000b570:	75 42                	jne    c000b5b4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b572:	83 fb 01             	cmp    ebx,0x1
c000b575:	75 3d                	jne    c000b5b4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b57a:	89 cf                	mov    edi,ecx
c000b57c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b582:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b586:	0f af f8             	imul   edi,eax
c000b589:	89 c1                	mov    ecx,eax
c000b58b:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b58e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b590:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b593:	40                   	inc    eax
c000b594:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b597:	83 f8 50             	cmp    eax,0x50
c000b59a:	0f 85 a8 00 00 00    	jne    c000b648 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5a0:	83 ec 0c             	sub    esp,0xc
c000b5a3:	55                   	push   ebp
c000b5a4:	e8 47 fe ff ff       	call   c000b3f0 <VCache::writeWriteBuffer()>
c000b5a9:	83 c4 10             	add    esp,0x10
c000b5ac:	e9 97 00 00 00       	jmp    c000b648 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5b1:	8d 76 00             	lea    esi,[esi+0x0]
c000b5b4:	83 ec 0c             	sub    esp,0xc
c000b5b7:	55                   	push   ebp
c000b5b8:	e8 33 fe ff ff       	call   c000b3f0 <VCache::writeWriteBuffer()>
c000b5bd:	83 c4 10             	add    esp,0x10
c000b5c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5c3:	83 fb 4f             	cmp    ebx,0x4f
c000b5c6:	7f 20                	jg     c000b5e8 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b5c8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b5cb:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b5ce:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b5d1:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b5d5:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b5d8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5de:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5e4:	eb 62                	jmp    c000b648 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5e6:	66 90                	xchg   ax,ax
c000b5e8:	83 ec 0c             	sub    esp,0xc
c000b5eb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5ed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b5f1:	53                   	push   ebx
c000b5f2:	57                   	push   edi
c000b5f3:	56                   	push   esi
c000b5f4:	50                   	push   eax
c000b5f5:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b5f8:	83 c4 20             	add    esp,0x20
c000b5fb:	89 c6                	mov    esi,eax
c000b5fd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b602:	74 28                	je     c000b62c <VCache::write(unsigned long long, int, void*)+0x170>
c000b604:	b9 00 10 00 00       	mov    ecx,0x1000
c000b609:	52                   	push   edx
c000b60a:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b60e:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b614:	99                   	cdq    
c000b615:	f7 f9                	idiv   ecx
c000b617:	50                   	push   eax
c000b618:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b61c:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b622:	e8 b9 89 00 00       	call   c0013fe0 <VAS::unlockPages(unsigned long, int)>
c000b627:	83 c4 10             	add    esp,0x10
c000b62a:	66 90                	xchg   ax,ax
c000b62c:	e8 23 af 00 00       	call   c0016554 <KeRestorePreemption()>
c000b631:	85 f6                	test   esi,esi
c000b633:	74 4b                	je     c000b680 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b635:	83 ec 0c             	sub    esp,0xc
c000b638:	68 f8 76 02 c0       	push   0xc00276f8
c000b63d:	e8 3a b9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b642:	83 c4 10             	add    esp,0x10
c000b645:	eb 39                	jmp    c000b680 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b647:	90                   	nop
c000b648:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b64d:	74 29                	je     c000b678 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b64f:	b9 00 10 00 00       	mov    ecx,0x1000
c000b654:	50                   	push   eax
c000b655:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b659:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b65f:	99                   	cdq    
c000b660:	f7 f9                	idiv   ecx
c000b662:	50                   	push   eax
c000b663:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b667:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b66d:	e8 6e 89 00 00       	call   c0013fe0 <VAS::unlockPages(unsigned long, int)>
c000b672:	83 c4 10             	add    esp,0x10
c000b675:	8d 76 00             	lea    esi,[esi+0x0]
c000b678:	e8 d7 ae 00 00       	call   c0016554 <KeRestorePreemption()>
c000b67d:	31 f6                	xor    esi,esi
c000b67f:	90                   	nop
c000b680:	83 c4 1c             	add    esp,0x1c
c000b683:	89 f0                	mov    eax,esi
c000b685:	5b                   	pop    ebx
c000b686:	5e                   	pop    esi
c000b687:	5f                   	pop    edi
c000b688:	5d                   	pop    ebp
c000b689:	c3                   	ret    

c000b68a <VCache::read(unsigned long long, int, void*)>:
c000b68a:	55                   	push   ebp
c000b68b:	57                   	push   edi
c000b68c:	bf 00 10 00 00       	mov    edi,0x1000
c000b691:	56                   	push   esi
c000b692:	53                   	push   ebx
c000b693:	83 ec 2c             	sub    esp,0x2c
c000b696:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b69a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b69e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6a2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b6a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6aa:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b6ae:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b6b2:	e8 75 ae 00 00       	call   c001652c <KeDisablePreemption()>
c000b6b7:	50                   	push   eax
c000b6b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6bb:	0f af c6             	imul   eax,esi
c000b6be:	05 ff 0f 00 00       	add    eax,0xfff
c000b6c3:	99                   	cdq    
c000b6c4:	f7 ff                	idiv   edi
c000b6c6:	50                   	push   eax
c000b6c7:	55                   	push   ebp
c000b6c8:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b6ce:	e8 d1 88 00 00       	call   c0013fa4 <VAS::canLockPages(unsigned long, int)>
c000b6d3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b6d7:	83 c4 10             	add    esp,0x10
c000b6da:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b6df:	74 1f                	je     c000b700 <VCache::read(unsigned long long, int, void*)+0x76>
c000b6e1:	50                   	push   eax
c000b6e2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6e5:	0f af c6             	imul   eax,esi
c000b6e8:	05 ff 0f 00 00       	add    eax,0xfff
c000b6ed:	99                   	cdq    
c000b6ee:	f7 ff                	idiv   edi
c000b6f0:	50                   	push   eax
c000b6f1:	55                   	push   ebp
c000b6f2:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b6f8:	e8 0b 8b 00 00       	call   c0014208 <VAS::lockPages(unsigned long, int)>
c000b6fd:	83 c4 10             	add    esp,0x10
c000b700:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b704:	74 0e                	je     c000b714 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b706:	83 ec 0c             	sub    esp,0xc
c000b709:	53                   	push   ebx
c000b70a:	e8 e1 fc ff ff       	call   c000b3f0 <VCache::writeWriteBuffer()>
c000b70f:	83 c4 10             	add    esp,0x10
c000b712:	66 90                	xchg   ax,ax
c000b714:	83 fe 01             	cmp    esi,0x1
c000b717:	0f 85 ef 00 00 00    	jne    c000b80c <VCache::read(unsigned long long, int, void*)+0x182>
c000b71d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b720:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b727:	0f 85 df 00 00 00    	jne    c000b80c <VCache::read(unsigned long long, int, void*)+0x182>
c000b72d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b730:	89 fe                	mov    esi,edi
c000b732:	f7 de                	neg    esi
c000b734:	89 f0                	mov    eax,esi
c000b736:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b73a:	c1 f8 1f             	sar    eax,0x1f
c000b73d:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b741:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b745:	89 f0                	mov    eax,esi
c000b747:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b74b:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b74f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b753:	89 f2                	mov    edx,esi
c000b755:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b75a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b75e:	74 0c                	je     c000b76c <VCache::read(unsigned long long, int, void*)+0xe2>
c000b760:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b763:	75 07                	jne    c000b76c <VCache::read(unsigned long long, int, void*)+0xe2>
c000b765:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b768:	74 4e                	je     c000b7b8 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b76a:	66 90                	xchg   ax,ax
c000b76c:	83 ec 0c             	sub    esp,0xc
c000b76f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b773:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b776:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b779:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b77b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b77e:	57                   	push   edi
c000b77f:	52                   	push   edx
c000b780:	50                   	push   eax
c000b781:	51                   	push   ecx
c000b782:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b785:	83 c4 20             	add    esp,0x20
c000b788:	89 c7                	mov    edi,eax
c000b78a:	85 c0                	test   eax,eax
c000b78c:	74 2a                	je     c000b7b8 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b78e:	83 ec 0c             	sub    esp,0xc
c000b791:	68 10 77 02 c0       	push   0xc0027710
c000b796:	e8 e1 b7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b79b:	83 c4 10             	add    esp,0x10
c000b79e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7a3:	0f 84 b3 00 00 00    	je     c000b85c <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7a9:	51                   	push   ecx
c000b7aa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7ad:	05 ff 0f 00 00       	add    eax,0xfff
c000b7b2:	e9 8d 00 00 00       	jmp    c000b844 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b7b7:	90                   	nop
c000b7b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7bb:	89 ef                	mov    edi,ebp
c000b7bd:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b7c3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7c6:	8d 70 ff             	lea    esi,[eax-0x1]
c000b7c9:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b7cd:	0f af f1             	imul   esi,ecx
c000b7d0:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b7d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b7d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7da:	74 24                	je     c000b800 <VCache::read(unsigned long long, int, void*)+0x176>
c000b7dc:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7e1:	52                   	push   edx
c000b7e2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7e5:	05 ff 0f 00 00       	add    eax,0xfff
c000b7ea:	99                   	cdq    
c000b7eb:	f7 f9                	idiv   ecx
c000b7ed:	50                   	push   eax
c000b7ee:	55                   	push   ebp
c000b7ef:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b7f5:	e8 e6 87 00 00       	call   c0013fe0 <VAS::unlockPages(unsigned long, int)>
c000b7fa:	83 c4 10             	add    esp,0x10
c000b7fd:	8d 76 00             	lea    esi,[esi+0x0]
c000b800:	e8 4f ad 00 00       	call   c0016554 <KeRestorePreemption()>
c000b805:	31 ff                	xor    edi,edi
c000b807:	eb 5b                	jmp    c000b864 <VCache::read(unsigned long long, int, void*)+0x1da>
c000b809:	8d 76 00             	lea    esi,[esi+0x0]
c000b80c:	83 ec 0c             	sub    esp,0xc
c000b80f:	53                   	push   ebx
c000b810:	e8 cb fb ff ff       	call   c000b3e0 <VCache::invalidateReadBuffer()>
c000b815:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b818:	8b 10                	mov    edx,DWORD PTR [eax]
c000b81a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b81d:	56                   	push   esi
c000b81e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b822:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b826:	50                   	push   eax
c000b827:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b82a:	83 c4 20             	add    esp,0x20
c000b82d:	89 c7                	mov    edi,eax
c000b82f:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b834:	74 26                	je     c000b85c <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b836:	50                   	push   eax
c000b837:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b83b:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b841:	8d 76 00             	lea    esi,[esi+0x0]
c000b844:	b9 00 10 00 00       	mov    ecx,0x1000
c000b849:	99                   	cdq    
c000b84a:	f7 f9                	idiv   ecx
c000b84c:	50                   	push   eax
c000b84d:	55                   	push   ebp
c000b84e:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b854:	e8 87 87 00 00       	call   c0013fe0 <VAS::unlockPages(unsigned long, int)>
c000b859:	83 c4 10             	add    esp,0x10
c000b85c:	e8 f3 ac 00 00       	call   c0016554 <KeRestorePreemption()>
c000b861:	8d 76 00             	lea    esi,[esi+0x0]
c000b864:	83 c4 2c             	add    esp,0x2c
c000b867:	89 f8                	mov    eax,edi
c000b869:	5b                   	pop    ebx
c000b86a:	5e                   	pop    esi
c000b86b:	5f                   	pop    edi
c000b86c:	5d                   	pop    ebp
c000b86d:	c3                   	ret    

c000b86e <Video::putrect(int, int, int, int, unsigned int)>:
c000b86e:	55                   	push   ebp
c000b86f:	57                   	push   edi
c000b870:	56                   	push   esi
c000b871:	53                   	push   ebx
c000b872:	83 ec 1c             	sub    esp,0x1c
c000b875:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b879:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b87d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b881:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b885:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b889:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b88d:	01 df                	add    edi,ebx
c000b88f:	39 fb                	cmp    ebx,edi
c000b891:	7d 1f                	jge    c000b8b2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b893:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b897:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b89b:	7d 12                	jge    c000b8af <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b89d:	8b 16                	mov    edx,DWORD PTR [esi]
c000b89f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b8a3:	53                   	push   ebx
c000b8a4:	55                   	push   ebp
c000b8a5:	45                   	inc    ebp
c000b8a6:	56                   	push   esi
c000b8a7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8aa:	83 c4 10             	add    esp,0x10
c000b8ad:	eb e8                	jmp    c000b897 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b8af:	43                   	inc    ebx
c000b8b0:	eb dd                	jmp    c000b88f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b8b2:	83 c4 1c             	add    esp,0x1c
c000b8b5:	5b                   	pop    ebx
c000b8b6:	5e                   	pop    esi
c000b8b7:	5f                   	pop    edi
c000b8b8:	5d                   	pop    ebp
c000b8b9:	c3                   	ret    

c000b8ba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b8ba:	55                   	push   ebp
c000b8bb:	57                   	push   edi
c000b8bc:	31 ff                	xor    edi,edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b8c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b8cb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8d2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8db:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8df:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8e3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b8e6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8ea:	01 f9                	add    ecx,edi
c000b8ec:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b8f0:	7d 2f                	jge    c000b921 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b8f2:	31 f6                	xor    esi,esi
c000b8f4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8f8:	01 f2                	add    edx,esi
c000b8fa:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8fe:	7d 1a                	jge    c000b91a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b900:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b903:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b906:	46                   	inc    esi
c000b907:	51                   	push   ecx
c000b908:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b90c:	52                   	push   edx
c000b90d:	55                   	push   ebp
c000b90e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b911:	83 c4 10             	add    esp,0x10
c000b914:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b918:	eb da                	jmp    c000b8f4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b91a:	47                   	inc    edi
c000b91b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b91f:	eb c5                	jmp    c000b8e6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b921:	83 c4 1c             	add    esp,0x1c
c000b924:	5b                   	pop    ebx
c000b925:	5e                   	pop    esi
c000b926:	5f                   	pop    edi
c000b927:	5d                   	pop    ebp
c000b928:	c3                   	ret    
c000b929:	90                   	nop

c000b92a <Video::blit(unsigned int*, int, int, int, int)>:
c000b92a:	55                   	push   ebp
c000b92b:	57                   	push   edi
c000b92c:	56                   	push   esi
c000b92d:	53                   	push   ebx
c000b92e:	83 ec 1c             	sub    esp,0x1c
c000b931:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b935:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b939:	85 c0                	test   eax,eax
c000b93b:	79 02                	jns    c000b93f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b93d:	31 c0                	xor    eax,eax
c000b93f:	c1 e0 02             	shl    eax,0x2
c000b942:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b946:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b94a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b94e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b952:	39 d8                	cmp    eax,ebx
c000b954:	7e 49                	jle    c000b99f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b956:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b95c:	7c 41                	jl     c000b99f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b95e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b962:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b966:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b96a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b96e:	39 f9                	cmp    ecx,edi
c000b970:	7e 22                	jle    c000b994 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b972:	83 c5 04             	add    ebp,0x4
c000b975:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b97b:	7c 14                	jl     c000b991 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b97d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b97f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b982:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b986:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b98a:	56                   	push   esi
c000b98b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	47                   	inc    edi
c000b992:	eb d2                	jmp    c000b966 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b994:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b998:	43                   	inc    ebx
c000b999:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b99d:	eb ab                	jmp    c000b94a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b99f:	83 c4 1c             	add    esp,0x1c
c000b9a2:	5b                   	pop    ebx
c000b9a3:	5e                   	pop    esi
c000b9a4:	5f                   	pop    edi
c000b9a5:	5d                   	pop    ebp
c000b9a6:	c3                   	ret    
c000b9a7:	90                   	nop

c000b9a8 <Video::clearScreen(unsigned int)>:
c000b9a8:	83 ec 14             	sub    esp,0x14
c000b9ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b9af:	8b 10                	mov    edx,DWORD PTR [eax]
c000b9b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9b5:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000b9bb:	ff b0 58 01 00 00    	push   DWORD PTR [eax+0x158]
c000b9c1:	6a 00                	push   0x0
c000b9c3:	6a 00                	push   0x0
c000b9c5:	50                   	push   eax
c000b9c6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b9c9:	83 c4 2c             	add    esp,0x2c
c000b9cc:	c3                   	ret    
c000b9cd:	90                   	nop

c000b9ce <Video::putpixel(int, int, unsigned int)>:
c000b9ce:	c7 44 24 04 48 77 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027748
c000b9d6:	e9 dd 42 00 00       	jmp    c000fcb8 <KePanic(char const*)>
c000b9db:	90                   	nop

c000b9dc <Video::readPixelApprox(int, int)>:
c000b9dc:	83 ec 18             	sub    esp,0x18
c000b9df:	68 69 77 02 c0       	push   0xc0027769
c000b9e4:	e8 cf 42 00 00       	call   c000fcb8 <KePanic(char const*)>
c000b9e9:	31 c0                	xor    eax,eax
c000b9eb:	83 c4 1c             	add    esp,0x1c
c000b9ee:	c3                   	ret    
c000b9ef:	90                   	nop

c000b9f0 <Video::Video(char const*)>:
c000b9f0:	83 ec 0c             	sub    esp,0xc
c000b9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f7:	83 ec 08             	sub    esp,0x8
c000b9fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fe:	50                   	push   eax
c000b9ff:	e8 b2 e1 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ba04:	83 c4 10             	add    esp,0x10
c000ba07:	ba 0c 78 02 c0       	mov    edx,0xc002780c
c000ba0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba10:	89 10                	mov    DWORD PTR [eax],edx
c000ba12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba16:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba20:	90                   	nop
c000ba21:	83 c4 0c             	add    esp,0xc
c000ba24:	c3                   	ret    
c000ba25:	90                   	nop

c000ba26 <Video::~Video()>:
c000ba26:	83 ec 0c             	sub    esp,0xc
c000ba29:	ba 0c 78 02 c0       	mov    edx,0xc002780c
c000ba2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba32:	89 10                	mov    DWORD PTR [eax],edx
c000ba34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba38:	83 ec 0c             	sub    esp,0xc
c000ba3b:	50                   	push   eax
c000ba3c:	e8 15 df ff ff       	call   c0009956 <Device::~Device()>
c000ba41:	83 c4 10             	add    esp,0x10
c000ba44:	90                   	nop
c000ba45:	83 c4 0c             	add    esp,0xc
c000ba48:	c3                   	ret    
c000ba49:	90                   	nop

c000ba4a <Video::~Video()>:
c000ba4a:	83 ec 0c             	sub    esp,0xc
c000ba4d:	83 ec 0c             	sub    esp,0xc
c000ba50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba54:	e8 cd ff ff ff       	call   c000ba26 <Video::~Video()>
c000ba59:	83 c4 10             	add    esp,0x10
c000ba5c:	83 ec 08             	sub    esp,0x8
c000ba5f:	68 64 01 00 00       	push   0x164
c000ba64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba68:	e8 0f 19 00 00       	call   c000d37c <operator delete(void*, unsigned long)>
c000ba6d:	83 c4 10             	add    esp,0x10
c000ba70:	83 c4 0c             	add    esp,0xc
c000ba73:	c3                   	ret    

c000ba74 <Video::isMonochrome()>:
c000ba74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba78:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba7e:	c3                   	ret    
c000ba7f:	90                   	nop

c000ba80 <Video::getWidth()>:
c000ba80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba84:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba8a:	c3                   	ret    
c000ba8b:	90                   	nop

c000ba8c <Video::getHeight()>:
c000ba8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba90:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba96:	c3                   	ret    
c000ba97:	90                   	nop

c000ba98 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba98:	55                   	push   ebp
c000ba99:	57                   	push   edi
c000ba9a:	56                   	push   esi
c000ba9b:	53                   	push   ebx
c000ba9c:	83 ec 2c             	sub    esp,0x2c
c000ba9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000baa3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000baa7:	83 f8 01             	cmp    eax,0x1
c000baaa:	19 c9                	sbb    ecx,ecx
c000baac:	31 db                	xor    ebx,ebx
c000baae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bab2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000bab6:	f7 54 24 14          	not    DWORD PTR [esp+0x14]
c000baba:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000bac2:	81 64 24 14 ff ff ff 00 	and    DWORD PTR [esp+0x14],0xffffff
c000baca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bace:	01 d8                	add    eax,ebx
c000bad0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bad4:	56                   	push   esi
c000bad5:	e8 b2 ff ff ff       	call   c000ba8c <Video::getHeight()>
c000bada:	59                   	pop    ecx
c000badb:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000badf:	0f 8e 81 00 00 00    	jle    c000bb66 <Video::drawCursor(int, int, unsigned int*, int)+0xce>
c000bae5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bae9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000baec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baf0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000baf4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000baf9:	8b ac 98 80 00 00 00 	mov    ebp,DWORD PTR [eax+ebx*4+0x80]
c000bb00:	75 04                	jne    c000bb06 <Video::drawCursor(int, int, unsigned int*, int)+0x6e>
c000bb02:	85 ed                	test   ebp,ebp
c000bb04:	74 56                	je     c000bb5c <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000bb06:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bb0a:	89 f8                	mov    eax,edi
c000bb0c:	83 c0 20             	add    eax,0x20
c000bb0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb17:	09 e8                	or     eax,ebp
c000bb19:	74 41                	je     c000bb5c <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000bb1b:	56                   	push   esi
c000bb1c:	e8 5f ff ff ff       	call   c000ba80 <Video::getWidth()>
c000bb21:	5a                   	pop    edx
c000bb22:	39 c7                	cmp    edi,eax
c000bb24:	7d 36                	jge    c000bb5c <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000bb26:	f7 c5 01 00 00 00    	test   ebp,0x1
c000bb2c:	74 08                	je     c000bb36 <Video::drawCursor(int, int, unsigned int*, int)+0x9e>
c000bb2e:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb34:	eb 0d                	jmp    c000bb43 <Video::drawCursor(int, int, unsigned int*, int)+0xab>
c000bb36:	f6 44 24 0c 01       	test   BYTE PTR [esp+0xc],0x1
c000bb3b:	74 12                	je     c000bb4f <Video::drawCursor(int, int, unsigned int*, int)+0xb7>
c000bb3d:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	57                   	push   edi
c000bb48:	56                   	push   esi
c000bb49:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb4c:	83 c4 10             	add    esp,0x10
c000bb4f:	d1 ed                	shr    ebp,1
c000bb51:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c000bb55:	47                   	inc    edi
c000bb56:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bb5a:	75 b7                	jne    c000bb13 <Video::drawCursor(int, int, unsigned int*, int)+0x7b>
c000bb5c:	43                   	inc    ebx
c000bb5d:	83 fb 20             	cmp    ebx,0x20
c000bb60:	0f 85 64 ff ff ff    	jne    c000baca <Video::drawCursor(int, int, unsigned int*, int)+0x32>
c000bb66:	83 c4 2c             	add    esp,0x2c
c000bb69:	5b                   	pop    ebx
c000bb6a:	5e                   	pop    esi
c000bb6b:	5f                   	pop    edi
c000bb6c:	5d                   	pop    ebp
c000bb6d:	c3                   	ret    

c000bb6e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb6e:	55                   	push   ebp
c000bb6f:	57                   	push   edi
c000bb70:	56                   	push   esi
c000bb71:	53                   	push   ebx
c000bb72:	83 ec 48             	sub    esp,0x48
c000bb75:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb79:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb7d:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb81:	c1 e0 08             	shl    eax,0x8
c000bb84:	01 d0                	add    eax,edx
c000bb86:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb8e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb92:	c1 e0 08             	shl    eax,0x8
c000bb95:	01 d0                	add    eax,edx
c000bb97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bb9f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bba4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bba8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbac:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bbb3:	50                   	push   eax
c000bbb4:	e8 aa 3c 00 00       	call   c000f863 <malloc>
c000bbb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbbd:	83 c4 10             	add    esp,0x10
c000bbc0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbc5:	75 10                	jne    c000bbd7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bbc7:	83 ec 0c             	sub    esp,0xc
c000bbca:	68 94 77 02 c0       	push   0xc0027794
c000bbcf:	e8 e4 40 00 00       	call   c000fcb8 <KePanic(char const*)>
c000bbd4:	83 c4 10             	add    esp,0x10
c000bbd7:	51                   	push   ecx
c000bbd8:	51                   	push   ecx
c000bbd9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbdd:	50                   	push   eax
c000bbde:	68 a4 77 02 c0       	push   0xc00277a4
c000bbe3:	e8 94 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bbe8:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbeb:	83 e0 20             	and    eax,0x20
c000bbee:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bbf2:	85 c0                	test   eax,eax
c000bbf4:	5e                   	pop    esi
c000bbf5:	0f 94 c0             	sete   al
c000bbf8:	5f                   	pop    edi
c000bbf9:	0f b6 c0             	movzx  eax,al
c000bbfc:	be 12 00 00 00       	mov    esi,0x12
c000bc01:	50                   	push   eax
c000bc02:	68 ae 77 02 c0       	push   0xc00277ae
c000bc07:	e8 70 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc0c:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bc10:	83 c4 10             	add    esp,0x10
c000bc13:	89 d0                	mov    eax,edx
c000bc15:	85 d2                	test   edx,edx
c000bc17:	74 11                	je     c000bc2a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bc19:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bc1d:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bc21:	c1 fe 03             	sar    esi,0x3
c000bc24:	0f af f1             	imul   esi,ecx
c000bc27:	83 c6 12             	add    esi,0x12
c000bc2a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc2f:	74 07                	je     c000bc38 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bc31:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bc36:	75 12                	jne    c000bc4a <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bc38:	83 ec 0c             	sub    esp,0xc
c000bc3b:	68 bc 77 02 c0       	push   0xc00277bc
c000bc40:	e8 37 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc45:	e9 a0 02 00 00       	jmp    c000beea <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bc4a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc4e:	83 f9 02             	cmp    ecx,0x2
c000bc51:	74 0e                	je     c000bc61 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bc53:	83 f9 0a             	cmp    ecx,0xa
c000bc56:	0f 84 c8 00 00 00    	je     c000bd24 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bc5c:	e9 72 02 00 00       	jmp    c000bed3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bc61:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc66:	75 0e                	jne    c000bc76 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc68:	84 c0                	test   al,al
c000bc6a:	75 0a                	jne    c000bc76 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc6c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc6f:	83 e8 18             	sub    eax,0x18
c000bc72:	a8 f7                	test   al,0xf7
c000bc74:	74 0d                	je     c000bc83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bc76:	83 ec 0c             	sub    esp,0xc
c000bc79:	68 d1 77 02 c0       	push   0xc00277d1
c000bc7e:	e9 58 02 00 00       	jmp    c000bedb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bc83:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc88:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc90:	31 c0                	xor    eax,eax
c000bc92:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc96:	89 c7                	mov    edi,eax
c000bc98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bca0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bca5:	75 15                	jne    c000bcbc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bca7:	99                   	cdq    
c000bca8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bcac:	85 d2                	test   edx,edx
c000bcae:	75 0c                	jne    c000bcbc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcb0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bcb4:	29 c7                	sub    edi,eax
c000bcb6:	4f                   	dec    edi
c000bcb7:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bcbc:	31 d2                	xor    edx,edx
c000bcbe:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bcc2:	75 08                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bcc4:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bcc9:	c1 e2 18             	shl    edx,0x18
c000bccc:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bcd1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bcd5:	c1 e1 10             	shl    ecx,0x10
c000bcd8:	8d 47 01             	lea    eax,[edi+0x1]
c000bcdb:	89 cd                	mov    ebp,ecx
c000bcdd:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bce2:	c1 e1 08             	shl    ecx,0x8
c000bce5:	09 e9                	or     ecx,ebp
c000bce7:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bceb:	09 e9                	or     ecx,ebp
c000bced:	09 d1                	or     ecx,edx
c000bcef:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bcf3:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bcf6:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bcfa:	c1 fa 03             	sar    edx,0x3
c000bcfd:	01 d6                	add    esi,edx
c000bcff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd03:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bd07:	7e 04                	jle    c000bd0d <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bd09:	89 c7                	mov    edi,eax
c000bd0b:	eb 93                	jmp    c000bca0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bd0d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd15:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bd19:	0f 8f 77 ff ff ff    	jg     c000bc96 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bd1f:	e9 d3 01 00 00       	jmp    c000bef7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd24:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd29:	75 0e                	jne    c000bd39 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd2b:	85 d2                	test   edx,edx
c000bd2d:	75 0a                	jne    c000bd39 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd2f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd32:	83 e8 18             	sub    eax,0x18
c000bd35:	a8 f7                	test   al,0xf7
c000bd37:	74 0d                	je     c000bd46 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bd39:	83 ec 0c             	sub    esp,0xc
c000bd3c:	68 df 77 02 c0       	push   0xc00277df
c000bd41:	e9 95 01 00 00       	jmp    c000bedb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bd46:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd4e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bd56:	31 c9                	xor    ecx,ecx
c000bd58:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd5c:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bd60:	0f 8e 91 01 00 00    	jle    c000bef7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd66:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bd6a:	0f 8d 87 01 00 00    	jge    c000bef7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd70:	8d 46 01             	lea    eax,[esi+0x1]
c000bd73:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd7b:	83 fd 7f             	cmp    ebp,0x7f
c000bd7e:	89 e8                	mov    eax,ebp
c000bd80:	0f 8e 9d 00 00 00    	jle    c000be23 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd86:	83 e0 7f             	and    eax,0x7f
c000bd89:	31 d2                	xor    edx,edx
c000bd8b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd8f:	40                   	inc    eax
c000bd90:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd98:	75 0a                	jne    c000bda4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bd9a:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bd9f:	89 ea                	mov    edx,ebp
c000bda1:	c1 e2 18             	shl    edx,0x18
c000bda4:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bda9:	c1 e0 10             	shl    eax,0x10
c000bdac:	89 c7                	mov    edi,eax
c000bdae:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bdb3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bdb7:	c1 e0 08             	shl    eax,0x8
c000bdba:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bdbe:	09 f8                	or     eax,edi
c000bdc0:	31 f6                	xor    esi,esi
c000bdc2:	09 c5                	or     ebp,eax
c000bdc4:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bdc9:	09 d5                	or     ebp,edx
c000bdcb:	85 ff                	test   edi,edi
c000bdcd:	75 1d                	jne    c000bdec <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdcf:	89 c8                	mov    eax,ecx
c000bdd1:	99                   	cdq    
c000bdd2:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bdd6:	85 d2                	test   edx,edx
c000bdd8:	75 12                	jne    c000bdec <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdde:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bde2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bde6:	49                   	dec    ecx
c000bde7:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bdec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdf0:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdf3:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000bdf6:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000bdfa:	8d 46 01             	lea    eax,[esi+0x1]
c000bdfd:	7e 06                	jle    c000be05 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000bdff:	89 c6                	mov    esi,eax
c000be01:	89 d1                	mov    ecx,edx
c000be03:	eb c6                	jmp    c000bdcb <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000be05:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000be09:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be0d:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000be11:	c1 f8 03             	sar    eax,0x3
c000be14:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be18:	89 d1                	mov    ecx,edx
c000be1a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000be1e:	e9 35 ff ff ff       	jmp    c000bd58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000be23:	8d 45 01             	lea    eax,[ebp+0x1]
c000be26:	31 f6                	xor    esi,esi
c000be28:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be2c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000be31:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be35:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be3a:	75 1d                	jne    c000be59 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be3c:	89 c8                	mov    eax,ecx
c000be3e:	99                   	cdq    
c000be3f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000be43:	85 d2                	test   edx,edx
c000be45:	75 12                	jne    c000be59 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be4b:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000be4f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000be53:	49                   	dec    ecx
c000be54:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000be59:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be61:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be65:	75 10                	jne    c000be77 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000be67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be6b:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000be70:	c1 e7 18             	shl    edi,0x18
c000be73:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be7b:	8d 51 01             	lea    edx,[ecx+0x1]
c000be7e:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000be83:	c1 e0 10             	shl    eax,0x10
c000be86:	89 c7                	mov    edi,eax
c000be88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be8c:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000be91:	c1 e0 08             	shl    eax,0x8
c000be94:	09 f8                	or     eax,edi
c000be96:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000be9a:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000be9e:	09 f8                	or     eax,edi
c000bea0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000bea4:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000bea8:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000beab:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000beaf:	c1 f8 03             	sar    eax,0x3
c000beb2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000beb6:	8d 46 01             	lea    eax,[esi+0x1]
c000beb9:	39 f5                	cmp    ebp,esi
c000bebb:	7e 09                	jle    c000bec6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000bebd:	89 c6                	mov    esi,eax
c000bebf:	89 d1                	mov    ecx,edx
c000bec1:	e9 6f ff ff ff       	jmp    c000be35 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000bec6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000beca:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bece:	e9 45 ff ff ff       	jmp    c000be18 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000bed3:	52                   	push   edx
c000bed4:	52                   	push   edx
c000bed5:	51                   	push   ecx
c000bed6:	68 ee 77 02 c0       	push   0xc00277ee
c000bedb:	e8 9c b0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bee0:	58                   	pop    eax
c000bee1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bee5:	e8 89 39 00 00       	call   c000f873 <free>
c000beea:	83 c4 10             	add    esp,0x10
c000beed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bef5:	eb 14                	jmp    c000bf0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000bef7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000befb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000beff:	89 18                	mov    DWORD PTR [eax],ebx
c000bf01:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000bf05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf09:	89 18                	mov    DWORD PTR [eax],ebx
c000bf0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf0f:	83 c4 3c             	add    esp,0x3c
c000bf12:	5b                   	pop    ebx
c000bf13:	5e                   	pop    esi
c000bf14:	5f                   	pop    edi
c000bf15:	5d                   	pop    ebp
c000bf16:	c3                   	ret    
c000bf17:	90                   	nop

c000bf18 <Video::putTGA(int, int, unsigned char*, int)>:
c000bf18:	55                   	push   ebp
c000bf19:	57                   	push   edi
c000bf1a:	56                   	push   esi
c000bf1b:	53                   	push   ebx
c000bf1c:	83 ec 28             	sub    esp,0x28
c000bf1f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000bf23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf27:	50                   	push   eax
c000bf28:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf2c:	50                   	push   eax
c000bf2d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf31:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf35:	57                   	push   edi
c000bf36:	e8 33 fc ff ff       	call   c000bb6e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf3b:	83 c4 20             	add    esp,0x20
c000bf3e:	85 c0                	test   eax,eax
c000bf40:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf44:	74 3a                	je     c000bf80 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf46:	89 c6                	mov    esi,eax
c000bf48:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf4c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf50:	39 d8                	cmp    eax,ebx
c000bf52:	7e 2c                	jle    c000bf80 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf54:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf5c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf60:	39 e8                	cmp    eax,ebp
c000bf62:	7e 19                	jle    c000bf7d <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bf64:	83 c6 04             	add    esi,0x4
c000bf67:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf6a:	85 c0                	test   eax,eax
c000bf6c:	79 0c                	jns    c000bf7a <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000bf6e:	8b 17                	mov    edx,DWORD PTR [edi]
c000bf70:	50                   	push   eax
c000bf71:	53                   	push   ebx
c000bf72:	55                   	push   ebp
c000bf73:	57                   	push   edi
c000bf74:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bf77:	83 c4 10             	add    esp,0x10
c000bf7a:	45                   	inc    ebp
c000bf7b:	eb db                	jmp    c000bf58 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf7d:	43                   	inc    ebx
c000bf7e:	eb c8                	jmp    c000bf48 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf80:	83 c4 1c             	add    esp,0x1c
c000bf83:	5b                   	pop    ebx
c000bf84:	5e                   	pop    esi
c000bf85:	5f                   	pop    edi
c000bf86:	5d                   	pop    ebp
c000bf87:	c3                   	ret    

c000bf88 <ACPI::close(int, int, void*)>:
c000bf88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf8d:	c3                   	ret    
c000bf8e:	66 90                	xchg   ax,ax

c000bf90 <loadACPITables(unsigned char*)>:
c000bf90:	57                   	push   edi
c000bf91:	56                   	push   esi
c000bf92:	53                   	push   ebx
c000bf93:	83 ec 60             	sub    esp,0x60
c000bf96:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf9b:	0f 84 43 02 00 00    	je     c000c1e4 <loadACPITables(unsigned char*)+0x254>
c000bfa1:	a0 80 0d 03 c0       	mov    al,ds:0xc0030d80
c000bfa6:	0f b6 c0             	movzx  eax,al
c000bfa9:	85 c0                	test   eax,eax
c000bfab:	74 7b                	je     c000c028 <loadACPITables(unsigned char*)+0x98>
c000bfad:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfb1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bfb5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bfb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfbc:	83 e8 24             	sub    eax,0x24
c000bfbf:	c1 e8 03             	shr    eax,0x3
c000bfc2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfc6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfce:	66 90                	xchg   ax,ax
c000bfd0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfd4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfd8:	0f 8d ba 00 00 00    	jge    c000c098 <loadACPITables(unsigned char*)+0x108>
c000bfde:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfe2:	83 c0 24             	add    eax,0x24
c000bfe5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfe9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bfed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bff1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bff5:	c1 e0 03             	shl    eax,0x3
c000bff8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bffc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c000:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c003:	8b 00                	mov    eax,DWORD PTR [eax]
c000c005:	89 c1                	mov    ecx,eax
c000c007:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c000c00c:	8d 50 01             	lea    edx,[eax+0x1]
c000c00f:	89 15 60 0b 03 c0    	mov    DWORD PTR ds:0xc0030b60,edx
c000c015:	89 ca                	mov    edx,ecx
c000c017:	89 14 c5 84 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf47c],edx
c000c01e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c023:	eb ab                	jmp    c000bfd0 <loadACPITables(unsigned char*)+0x40>
c000c025:	8d 76 00             	lea    esi,[esi+0x0]
c000c028:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c02c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c030:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c037:	83 e8 24             	sub    eax,0x24
c000c03a:	c1 e8 02             	shr    eax,0x2
c000c03d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c041:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c049:	8d 76 00             	lea    esi,[esi+0x0]
c000c04c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c050:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c054:	7d 42                	jge    c000c098 <loadACPITables(unsigned char*)+0x108>
c000c056:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c05a:	83 c0 24             	add    eax,0x24
c000c05d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c061:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c065:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c069:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c06d:	c1 e0 02             	shl    eax,0x2
c000c070:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c074:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c078:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c07a:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c000c07f:	8d 50 01             	lea    edx,[eax+0x1]
c000c082:	89 15 60 0b 03 c0    	mov    DWORD PTR ds:0xc0030b60,edx
c000c088:	89 ca                	mov    edx,ecx
c000c08a:	89 14 c5 84 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf47c],edx
c000c091:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c096:	eb b4                	jmp    c000c04c <loadACPITables(unsigned char*)+0xbc>
c000c098:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c0a0:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c000c0a5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c0a9:	0f 8d 39 01 00 00    	jge    c000c1e8 <loadACPITables(unsigned char*)+0x258>
c000c0af:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0b3:	8b 04 c5 84 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf47c]
c000c0ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ca:	25 ff 0f 00 00       	and    eax,0xfff
c000c0cf:	89 c6                	mov    esi,eax
c000c0d1:	8b 1d 90 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031290
c000c0d7:	83 ec 0c             	sub    esp,0xc
c000c0da:	6a 01                	push   0x1
c000c0dc:	e8 6e 71 00 00       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0e8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0ee:	83 ec 0c             	sub    esp,0xc
c000c0f1:	6a 01                	push   0x1
c000c0f3:	6a 01                	push   0x1
c000c0f5:	50                   	push   eax
c000c0f6:	52                   	push   edx
c000c0f7:	53                   	push   ebx
c000c0f8:	e8 1f 7a 00 00       	call   c0013b1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0fd:	83 c4 20             	add    esp,0x20
c000c100:	09 f0                	or     eax,esi
c000c102:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c106:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c10a:	c1 e0 03             	shl    eax,0x3
c000c10d:	05 80 0b 03 c0       	add    eax,0xc0030b80
c000c112:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c116:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c11a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c11e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c12a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c12e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c132:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c136:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c13a:	89 c6                	mov    esi,eax
c000c13c:	89 d7                	mov    edi,edx
c000c13e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c140:	89 c8                	mov    eax,ecx
c000c142:	89 fa                	mov    edx,edi
c000c144:	89 f3                	mov    ebx,esi
c000c146:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c14a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c14e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c152:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c159:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c15d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c161:	05 00 10 00 00       	add    eax,0x1000
c000c166:	c1 e8 0c             	shr    eax,0xc
c000c169:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c16d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c171:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c175:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c179:	25 ff 0f 00 00       	and    eax,0xfff
c000c17e:	89 c6                	mov    esi,eax
c000c180:	8b 1d 90 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031290
c000c186:	83 ec 0c             	sub    esp,0xc
c000c189:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c18d:	e8 bd 70 00 00       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c000c192:	83 c4 10             	add    esp,0x10
c000c195:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c199:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c19f:	83 ec 0c             	sub    esp,0xc
c000c1a2:	6a 01                	push   0x1
c000c1a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1a8:	50                   	push   eax
c000c1a9:	52                   	push   edx
c000c1aa:	53                   	push   ebx
c000c1ab:	e8 6c 79 00 00       	call   c0013b1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1b0:	83 c4 20             	add    esp,0x20
c000c1b3:	09 f0                	or     eax,esi
c000c1b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1bd:	83 ec 0c             	sub    esp,0xc
c000c1c0:	50                   	push   eax
c000c1c1:	e8 91 73 00 00       	call   c0013557 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1c6:	83 c4 10             	add    esp,0x10
c000c1c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1d1:	89 14 c5 84 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf47c],edx
c000c1d8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1dd:	e9 be fe ff ff       	jmp    c000c0a0 <loadACPITables(unsigned char*)+0x110>
c000c1e2:	66 90                	xchg   ax,ax
c000c1e4:	90                   	nop
c000c1e5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1e8:	83 c4 60             	add    esp,0x60
c000c1eb:	5b                   	pop    ebx
c000c1ec:	5e                   	pop    esi
c000c1ed:	5f                   	pop    edi
c000c1ee:	c3                   	ret    
c000c1ef:	90                   	nop

c000c1f0 <findRSDT(unsigned char*)>:
c000c1f0:	57                   	push   edi
c000c1f1:	56                   	push   esi
c000c1f2:	53                   	push   ebx
c000c1f3:	83 ec 50             	sub    esp,0x50
c000c1f6:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c000c1fb:	85 c0                	test   eax,eax
c000c1fd:	75 0d                	jne    c000c20c <findRSDT(unsigned char*)+0x1c>
c000c1ff:	b8 00 00 00 00       	mov    eax,0x0
c000c204:	e9 2b 01 00 00       	jmp    c000c334 <findRSDT(unsigned char*)+0x144>
c000c209:	8d 76 00             	lea    esi,[esi+0x0]
c000c20c:	89 e0                	mov    eax,esp
c000c20e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c212:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c216:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c21a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c222:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c226:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c22a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c22e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c232:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c236:	89 c6                	mov    esi,eax
c000c238:	89 d7                	mov    edi,edx
c000c23a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c23c:	89 c8                	mov    eax,ecx
c000c23e:	89 fa                	mov    edx,edi
c000c240:	89 f3                	mov    ebx,esi
c000c242:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c246:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c24a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c24e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c252:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c256:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c25e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c262:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c266:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c26e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c272:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c276:	25 ff 0f 00 00       	and    eax,0xfff
c000c27b:	89 c6                	mov    esi,eax
c000c27d:	8b 1d 90 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031290
c000c283:	83 ec 0c             	sub    esp,0xc
c000c286:	6a 02                	push   0x2
c000c288:	e8 c2 6f 00 00       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c000c28d:	83 c4 10             	add    esp,0x10
c000c290:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c294:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c29a:	83 ec 0c             	sub    esp,0xc
c000c29d:	6a 01                	push   0x1
c000c29f:	6a 02                	push   0x2
c000c2a1:	50                   	push   eax
c000c2a2:	52                   	push   edx
c000c2a3:	53                   	push   ebx
c000c2a4:	e8 73 78 00 00       	call   c0013b1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2a9:	83 c4 20             	add    esp,0x20
c000c2ac:	09 f0                	or     eax,esi
c000c2ae:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c2b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2b6:	25 ff 0f 00 00       	and    eax,0xfff
c000c2bb:	89 c6                	mov    esi,eax
c000c2bd:	8b 1d 90 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031290
c000c2c3:	83 ec 0c             	sub    esp,0xc
c000c2c6:	6a 02                	push   0x2
c000c2c8:	e8 82 6f 00 00       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c000c2cd:	83 c4 10             	add    esp,0x10
c000c2d0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2da:	83 ec 0c             	sub    esp,0xc
c000c2dd:	6a 01                	push   0x1
c000c2df:	6a 02                	push   0x2
c000c2e1:	50                   	push   eax
c000c2e2:	52                   	push   edx
c000c2e3:	53                   	push   ebx
c000c2e4:	e8 33 78 00 00       	call   c0013b1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2e9:	83 c4 20             	add    esp,0x20
c000c2ec:	09 f0                	or     eax,esi
c000c2ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2f2:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2f7:	85 c0                	test   eax,eax
c000c2f9:	75 11                	jne    c000c30c <findRSDT(unsigned char*)+0x11c>
c000c2fb:	c6 05 80 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030d80,0x0
c000c302:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c306:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c30a:	eb 24                	jmp    c000c330 <findRSDT(unsigned char*)+0x140>
c000c30c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c311:	83 f8 02             	cmp    eax,0x2
c000c314:	75 12                	jne    c000c328 <findRSDT(unsigned char*)+0x138>
c000c316:	c6 05 80 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d80,0x1
c000c31d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c321:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c325:	eb 09                	jmp    c000c330 <findRSDT(unsigned char*)+0x140>
c000c327:	90                   	nop
c000c328:	b8 00 00 00 00       	mov    eax,0x0
c000c32d:	eb 05                	jmp    c000c334 <findRSDT(unsigned char*)+0x144>
c000c32f:	90                   	nop
c000c330:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c334:	83 c4 50             	add    esp,0x50
c000c337:	5b                   	pop    ebx
c000c338:	5e                   	pop    esi
c000c339:	5f                   	pop    edi
c000c33a:	c3                   	ret    
c000c33b:	90                   	nop

c000c33c <findDataTable(unsigned char*, char*)>:
c000c33c:	83 ec 1c             	sub    esp,0x1c
c000c33f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c344:	75 0a                	jne    c000c350 <findDataTable(unsigned char*, char*)+0x14>
c000c346:	b8 00 00 00 00       	mov    eax,0x0
c000c34b:	eb 5f                	jmp    c000c3ac <findDataTable(unsigned char*, char*)+0x70>
c000c34d:	8d 76 00             	lea    esi,[esi+0x0]
c000c350:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c358:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c000c35d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c361:	7d 41                	jge    c000c3a4 <findDataTable(unsigned char*, char*)+0x68>
c000c363:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c367:	c1 e0 03             	shl    eax,0x3
c000c36a:	05 80 0b 03 c0       	add    eax,0xc0030b80
c000c36f:	83 ec 04             	sub    esp,0x4
c000c372:	6a 04                	push   0x4
c000c374:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c378:	50                   	push   eax
c000c379:	e8 02 40 ff ff       	call   c0000380 <memcmp>
c000c37e:	83 c4 10             	add    esp,0x10
c000c381:	85 c0                	test   eax,eax
c000c383:	0f 94 c0             	sete   al
c000c386:	0f b6 c0             	movzx  eax,al
c000c389:	85 c0                	test   eax,eax
c000c38b:	74 0f                	je     c000c39c <findDataTable(unsigned char*, char*)+0x60>
c000c38d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c391:	8b 04 c5 84 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf47c]
c000c398:	eb 12                	jmp    c000c3ac <findDataTable(unsigned char*, char*)+0x70>
c000c39a:	66 90                	xchg   ax,ax
c000c39c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c3a1:	eb b5                	jmp    c000c358 <findDataTable(unsigned char*, char*)+0x1c>
c000c3a3:	90                   	nop
c000c3a4:	b8 00 00 00 00       	mov    eax,0x0
c000c3a9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3ac:	83 c4 1c             	add    esp,0x1c
c000c3af:	c3                   	ret    

c000c3b0 <scanMADT()>:
c000c3b0:	53                   	push   ebx
c000c3b1:	83 ec 38             	sub    esp,0x38
c000c3b4:	c7 05 88 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030d88,0x0
c000c3be:	c7 05 84 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030d84,0x0
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	68 50 78 02 c0       	push   0xc0027850
c000c3d0:	e8 a7 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c3d5:	83 c4 10             	add    esp,0x10
c000c3d8:	e8 04 dd 00 00       	call   c001a0e1 <HalFindRSDP()>
c000c3dd:	a3 88 0d 03 c0       	mov    ds:0xc0030d88,eax
c000c3e2:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c000c3e7:	85 c0                	test   eax,eax
c000c3e9:	0f 84 59 04 00 00    	je     c000c848 <scanMADT()+0x498>
c000c3ef:	83 ec 0c             	sub    esp,0xc
c000c3f2:	68 5e 78 02 c0       	push   0xc002785e
c000c3f7:	e8 80 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c3fc:	83 c4 10             	add    esp,0x10
c000c3ff:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c000c404:	83 ec 0c             	sub    esp,0xc
c000c407:	50                   	push   eax
c000c408:	e8 e3 fd ff ff       	call   c000c1f0 <findRSDT(unsigned char*)>
c000c40d:	83 c4 10             	add    esp,0x10
c000c410:	a3 84 0d 03 c0       	mov    ds:0xc0030d84,eax
c000c415:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c000c41a:	85 c0                	test   eax,eax
c000c41c:	0f 84 2a 04 00 00    	je     c000c84c <scanMADT()+0x49c>
c000c422:	8b 15 84 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d84
c000c428:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c000c42d:	83 ec 04             	sub    esp,0x4
c000c430:	52                   	push   edx
c000c431:	50                   	push   eax
c000c432:	68 08 7a 02 c0       	push   0xc0027a08
c000c437:	e8 40 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c43c:	83 c4 10             	add    esp,0x10
c000c43f:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c000c444:	83 ec 0c             	sub    esp,0xc
c000c447:	50                   	push   eax
c000c448:	e8 43 fb ff ff       	call   c000bf90 <loadACPITables(unsigned char*)>
c000c44d:	83 c4 10             	add    esp,0x10
c000c450:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c000c455:	83 ec 08             	sub    esp,0x8
c000c458:	68 6d 78 02 c0       	push   0xc002786d
c000c45d:	50                   	push   eax
c000c45e:	e8 d9 fe ff ff       	call   c000c33c <findDataTable(unsigned char*, char*)>
c000c463:	83 c4 10             	add    esp,0x10
c000c466:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c46a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c46f:	0f 84 db 03 00 00    	je     c000c850 <scanMADT()+0x4a0>
c000c475:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c47d:	8d 76 00             	lea    esi,[esi+0x0]
c000c480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c484:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c487:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c48b:	0f 87 c7 03 00 00    	ja     c000c858 <scanMADT()+0x4a8>
c000c491:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c499:	0f 87 b9 03 00 00    	ja     c000c858 <scanMADT()+0x4a8>
c000c49f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4a3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c4a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4ab:	8d 50 01             	lea    edx,[eax+0x1]
c000c4ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4b6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4ba:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c4be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4c2:	8d 50 01             	lea    edx,[eax+0x1]
c000c4c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4d1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4d5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4da:	83 f8 02             	cmp    eax,0x2
c000c4dd:	0f 86 71 03 00 00    	jbe    c000c854 <scanMADT()+0x4a4>
c000c4e3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4e8:	85 c0                	test   eax,eax
c000c4ea:	75 58                	jne    c000c544 <scanMADT()+0x194>
c000c4ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4f0:	8d 50 01             	lea    edx,[eax+0x1]
c000c4f3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4f7:	8a 15 80 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f80
c000c4fd:	0f b6 d2             	movzx  edx,dl
c000c500:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c504:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c508:	88 82 c0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf040],al
c000c50e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c512:	8d 50 01             	lea    edx,[eax+0x1]
c000c515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c519:	8a 15 80 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f80
c000c51f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c522:	88 0d 80 0f 03 c0    	mov    BYTE PTR ds:0xc0030f80,cl
c000c528:	0f b6 d2             	movzx  edx,dl
c000c52b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c52f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c533:	88 82 a0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf060],al
c000c539:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c53e:	e9 f1 02 00 00       	jmp    c000c834 <scanMADT()+0x484>
c000c543:	90                   	nop
c000c544:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c549:	83 f8 01             	cmp    eax,0x1
c000c54c:	0f 85 32 01 00 00    	jne    c000c684 <scanMADT()+0x2d4>
c000c552:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c556:	8d 50 01             	lea    edx,[eax+0x1]
c000c559:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c55d:	8a 15 40 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e40
c000c563:	0f b6 d2             	movzx  edx,dl
c000c566:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c56a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c56e:	88 82 60 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf1a0],al
c000c574:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c579:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c57d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c581:	01 d0                	add    eax,edx
c000c583:	83 c0 2c             	add    eax,0x2c
c000c586:	8a 00                	mov    al,BYTE PTR [eax]
c000c588:	0f b6 d0             	movzx  edx,al
c000c58b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c58f:	8d 48 01             	lea    ecx,[eax+0x1]
c000c592:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c596:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c59a:	0f b6 c0             	movzx  eax,al
c000c59d:	c1 e0 08             	shl    eax,0x8
c000c5a0:	89 d1                	mov    ecx,edx
c000c5a2:	09 c1                	or     ecx,eax
c000c5a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5a8:	8d 50 02             	lea    edx,[eax+0x2]
c000c5ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5af:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5b3:	0f b6 c0             	movzx  eax,al
c000c5b6:	c1 e0 10             	shl    eax,0x10
c000c5b9:	09 c1                	or     ecx,eax
c000c5bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5bf:	8d 50 03             	lea    edx,[eax+0x3]
c000c5c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5c6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5ca:	0f b6 c0             	movzx  eax,al
c000c5cd:	c1 e0 18             	shl    eax,0x18
c000c5d0:	09 c1                	or     ecx,eax
c000c5d2:	89 ca                	mov    edx,ecx
c000c5d4:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c000c5d9:	0f b6 c0             	movzx  eax,al
c000c5dc:	89 14 85 80 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf180],edx
c000c5e3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5f0:	01 d0                	add    eax,edx
c000c5f2:	83 c0 2c             	add    eax,0x2c
c000c5f5:	8a 00                	mov    al,BYTE PTR [eax]
c000c5f7:	0f b6 d0             	movzx  edx,al
c000c5fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5fe:	8d 48 01             	lea    ecx,[eax+0x1]
c000c601:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c605:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c609:	0f b6 c0             	movzx  eax,al
c000c60c:	c1 e0 08             	shl    eax,0x8
c000c60f:	89 d1                	mov    ecx,edx
c000c611:	09 c1                	or     ecx,eax
c000c613:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c617:	8d 50 02             	lea    edx,[eax+0x2]
c000c61a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c61e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c622:	0f b6 c0             	movzx  eax,al
c000c625:	c1 e0 10             	shl    eax,0x10
c000c628:	09 c1                	or     ecx,eax
c000c62a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c62e:	8d 50 03             	lea    edx,[eax+0x3]
c000c631:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c635:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c639:	0f b6 c0             	movzx  eax,al
c000c63c:	c1 e0 18             	shl    eax,0x18
c000c63f:	09 c1                	or     ecx,eax
c000c641:	89 ca                	mov    edx,ecx
c000c643:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c000c648:	0f b6 c0             	movzx  eax,al
c000c64b:	89 14 85 00 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf100],edx
c000c652:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c657:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c000c65c:	83 c0 01             	add    eax,0x1
c000c65f:	a2 40 0e 03 c0       	mov    ds:0xc0030e40,al
c000c664:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c000c669:	0f b6 c0             	movzx  eax,al
c000c66c:	83 ec 08             	sub    esp,0x8
c000c66f:	50                   	push   eax
c000c670:	68 72 78 02 c0       	push   0xc0027872
c000c675:	e8 02 a9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c67a:	83 c4 10             	add    esp,0x10
c000c67d:	e9 b2 01 00 00       	jmp    c000c834 <scanMADT()+0x484>
c000c682:	66 90                	xchg   ax,ax
c000c684:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c689:	83 f8 02             	cmp    eax,0x2
c000c68c:	0f 85 ea 00 00 00    	jne    c000c77c <scanMADT()+0x3cc>
c000c692:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c696:	8d 50 01             	lea    edx,[eax+0x1]
c000c699:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c69d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6a1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6a5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c6a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ad:	8d 50 01             	lea    edx,[eax+0x1]
c000c6b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6b8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6bc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c6c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6c8:	01 d0                	add    eax,edx
c000c6ca:	83 c0 2c             	add    eax,0x2c
c000c6cd:	8a 00                	mov    al,BYTE PTR [eax]
c000c6cf:	0f b6 d0             	movzx  edx,al
c000c6d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6d6:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6dd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6e1:	0f b6 c0             	movzx  eax,al
c000c6e4:	c1 e0 08             	shl    eax,0x8
c000c6e7:	89 d1                	mov    ecx,edx
c000c6e9:	09 c1                	or     ecx,eax
c000c6eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ef:	8d 50 02             	lea    edx,[eax+0x2]
c000c6f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6fa:	0f b6 c0             	movzx  eax,al
c000c6fd:	c1 e0 10             	shl    eax,0x10
c000c700:	09 c1                	or     ecx,eax
c000c702:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c706:	8d 50 03             	lea    edx,[eax+0x3]
c000c709:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c70d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c711:	0f b6 c0             	movzx  eax,al
c000c714:	c1 e0 18             	shl    eax,0x18
c000c717:	09 c8                	or     eax,ecx
c000c719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c71d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c722:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c726:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c72a:	01 d0                	add    eax,edx
c000c72c:	83 c0 2c             	add    eax,0x2c
c000c72f:	8a 00                	mov    al,BYTE PTR [eax]
c000c731:	0f b6 c0             	movzx  eax,al
c000c734:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c738:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c73b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c73f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c743:	0f b6 d2             	movzx  edx,dl
c000c746:	c1 e2 08             	shl    edx,0x8
c000c749:	09 d0                	or     eax,edx
c000c74b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c750:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c755:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c75a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c75e:	88 90 08 ae 02 c0    	mov    BYTE PTR [eax-0x3ffd51f8],dl
c000c764:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c769:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c76e:	66 89 84 12 20 0e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf1e0],ax
c000c776:	e9 b9 00 00 00       	jmp    c000c834 <scanMADT()+0x484>
c000c77b:	90                   	nop
c000c77c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c781:	83 f8 04             	cmp    eax,0x4
c000c784:	0f 85 9a 00 00 00    	jne    c000c824 <scanMADT()+0x474>
c000c78a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c78e:	8d 50 01             	lea    edx,[eax+0x1]
c000c791:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c795:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c799:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c79d:	0f b6 c0             	movzx  eax,al
c000c7a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ac:	01 d0                	add    eax,edx
c000c7ae:	83 c0 2c             	add    eax,0x2c
c000c7b1:	8a 00                	mov    al,BYTE PTR [eax]
c000c7b3:	0f b6 d0             	movzx  edx,al
c000c7b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ba:	8d 48 01             	lea    ecx,[eax+0x1]
c000c7bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c7c1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c7c5:	0f b6 c0             	movzx  eax,al
c000c7c8:	c1 e0 08             	shl    eax,0x8
c000c7cb:	09 d0                	or     eax,edx
c000c7cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7d1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7da:	8d 50 01             	lea    edx,[eax+0x1]
c000c7dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7e9:	0f b6 c0             	movzx  eax,al
c000c7ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7f4:	c1 e0 08             	shl    eax,0x8
c000c7f7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c7fb:	89 c1                	mov    ecx,eax
c000c7fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c801:	c1 e0 18             	shl    eax,0x18
c000c804:	89 c3                	mov    ebx,eax
c000c806:	a1 8c 0d 03 c0       	mov    eax,ds:0xc0030d8c
c000c80b:	8d 50 01             	lea    edx,[eax+0x1]
c000c80e:	89 15 8c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d8c,edx
c000c814:	09 d9                	or     ecx,ebx
c000c816:	89 ca                	mov    edx,ecx
c000c818:	89 14 85 a0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf260],edx
c000c81f:	eb 13                	jmp    c000c834 <scanMADT()+0x484>
c000c821:	8d 76 00             	lea    esi,[esi+0x0]
c000c824:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c829:	83 f8 05             	cmp    eax,0x5
c000c82c:	75 06                	jne    c000c834 <scanMADT()+0x484>
c000c82e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c833:	90                   	nop
c000c834:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c839:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c83d:	01 d0                	add    eax,edx
c000c83f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c843:	e9 38 fc ff ff       	jmp    c000c480 <scanMADT()+0xd0>
c000c848:	90                   	nop
c000c849:	eb 0d                	jmp    c000c858 <scanMADT()+0x4a8>
c000c84b:	90                   	nop
c000c84c:	90                   	nop
c000c84d:	eb 09                	jmp    c000c858 <scanMADT()+0x4a8>
c000c84f:	90                   	nop
c000c850:	90                   	nop
c000c851:	eb 05                	jmp    c000c858 <scanMADT()+0x4a8>
c000c853:	90                   	nop
c000c854:	90                   	nop
c000c855:	8d 76 00             	lea    esi,[esi+0x0]
c000c858:	83 c4 38             	add    esp,0x38
c000c85b:	5b                   	pop    ebx
c000c85c:	c3                   	ret    
c000c85d:	90                   	nop
c000c85e:	66 90                	xchg   ax,ax

c000c860 <ACPI::ACPI()>:
c000c860:	83 ec 0c             	sub    esp,0xc
c000c863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c867:	83 ec 08             	sub    esp,0x8
c000c86a:	68 8e 78 02 c0       	push   0xc002788e
c000c86f:	50                   	push   eax
c000c870:	e8 41 d3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000c875:	83 c4 10             	add    esp,0x10
c000c878:	ba ac 7a 02 c0       	mov    edx,0xc0027aac
c000c87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c881:	89 10                	mov    DWORD PTR [eax],edx
c000c883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c887:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c892:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c8aa:	90                   	nop
c000c8ab:	83 c4 0c             	add    esp,0xc
c000c8ae:	c3                   	ret    
c000c8af:	90                   	nop

c000c8b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c8b0:	83 ec 2c             	sub    esp,0x2c
c000c8b3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c8b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c8bb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c8bf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c8c3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c8c8:	88 d0                	mov    al,dl
c000c8ca:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8ce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8d3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8db:	90                   	nop
c000c8dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8e0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8e6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8ea:	0f 8d b0 00 00 00    	jge    c000c9a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c8f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8f8:	83 c2 2a             	add    edx,0x2a
c000c8fb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c8ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c904:	0f b7 c0             	movzx  eax,ax
c000c907:	39 c2                	cmp    edx,eax
c000c909:	0f 85 85 00 00 00    	jne    c000c994 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c90f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c913:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c917:	83 c2 2a             	add    edx,0x2a
c000c91a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c91e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c923:	0f b6 c0             	movzx  eax,al
c000c926:	39 c2                	cmp    edx,eax
c000c928:	75 6a                	jne    c000c994 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c92a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c92f:	85 c0                	test   eax,eax
c000c931:	74 3d                	je     c000c970 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c933:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c937:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c93b:	83 c2 2a             	add    edx,0x2a
c000c93e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c942:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c949:	39 c2                	cmp    edx,eax
c000c94b:	74 13                	je     c000c960 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c94d:	83 ec 0c             	sub    esp,0xc
c000c950:	68 2c 7a 02 c0       	push   0xc0027a2c
c000c955:	e8 5e 33 00 00       	call   c000fcb8 <KePanic(char const*)>
c000c95a:	83 c4 10             	add    esp,0x10
c000c95d:	8d 76 00             	lea    esi,[esi+0x0]
c000c960:	83 ec 0c             	sub    esp,0xc
c000c963:	68 93 78 02 c0       	push   0xc0027893
c000c968:	e8 4b 33 00 00       	call   c000fcb8 <KePanic(char const*)>
c000c96d:	83 c4 10             	add    esp,0x10
c000c970:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c974:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c978:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c97c:	83 c2 2a             	add    edx,0x2a
c000c97f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c983:	8b 02                	mov    eax,DWORD PTR [edx]
c000c985:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c988:	89 01                	mov    DWORD PTR [ecx],eax
c000c98a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c98d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c992:	66 90                	xchg   ax,ax
c000c994:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c999:	e9 3e ff ff ff       	jmp    c000c8dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c99e:	66 90                	xchg   ax,ax
c000c9a0:	90                   	nop
c000c9a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9a5:	83 c4 2c             	add    esp,0x2c
c000c9a8:	c2 04 00             	ret    0x4
c000c9ab:	90                   	nop

c000c9ac <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c9ac:	83 ec 1c             	sub    esp,0x1c
c000c9af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c9b3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c9b7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9bb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c9c0:	88 c8                	mov    al,cl
c000c9c2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c9c6:	88 d0                	mov    al,dl
c000c9c8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9da:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9dd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c9e1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c9e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c9f3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000c9f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9fa:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000c9ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca03:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca09:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ca0d:	83 c0 01             	add    eax,0x1
c000ca10:	88 c1                	mov    cl,al
c000ca12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca16:	83 c2 2a             	add    edx,0x2a
c000ca19:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ca1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca21:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca2b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca2e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca32:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca3a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca40:	8d 50 01             	lea    edx,[eax+0x1]
c000ca43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca47:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca51:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca57:	3d 00 02 00 00       	cmp    eax,0x200
c000ca5c:	75 12                	jne    c000ca70 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca5e:	83 ec 0c             	sub    esp,0xc
c000ca61:	68 a2 78 02 c0       	push   0xc00278a2
c000ca66:	e8 4d 32 00 00       	call   c000fcb8 <KePanic(char const*)>
c000ca6b:	83 c4 10             	add    esp,0x10
c000ca6e:	66 90                	xchg   ax,ax
c000ca70:	90                   	nop
c000ca71:	83 c4 1c             	add    esp,0x1c
c000ca74:	c3                   	ret    
c000ca75:	90                   	nop
c000ca76:	66 90                	xchg   ax,ax

c000ca78 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca78:	b8 00 00 00 00       	mov    eax,0x0
c000ca7d:	c3                   	ret    
c000ca7e:	66 90                	xchg   ax,ax

c000ca80 <ACPI::detectPCI()>:
c000ca80:	53                   	push   ebx
c000ca81:	83 ec 28             	sub    esp,0x28
c000ca84:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca89:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca8e:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c000ca93:	83 ec 08             	sub    esp,0x8
c000ca96:	68 bf 78 02 c0       	push   0xc00278bf
c000ca9b:	50                   	push   eax
c000ca9c:	e8 9b f8 ff ff       	call   c000c33c <findDataTable(unsigned char*, char*)>
c000caa1:	83 c4 10             	add    esp,0x10
c000caa4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000caa8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000caad:	74 0d                	je     c000cabc <ACPI::detectPCI()+0x3c>
c000caaf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cab4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cab9:	8d 76 00             	lea    esi,[esi+0x0]
c000cabc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000cac4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cac8:	8a 00                	mov    al,BYTE PTR [eax]
c000caca:	0f b6 c0             	movzx  eax,al
c000cacd:	83 f8 01             	cmp    eax,0x1
c000cad0:	75 0e                	jne    c000cae0 <ACPI::detectPCI()+0x60>
c000cad2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cad7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cadc:	eb 2e                	jmp    c000cb0c <ACPI::detectPCI()+0x8c>
c000cade:	66 90                	xchg   ax,ax
c000cae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cae4:	8a 00                	mov    al,BYTE PTR [eax]
c000cae6:	0f b6 c0             	movzx  eax,al
c000cae9:	83 f8 02             	cmp    eax,0x2
c000caec:	75 1e                	jne    c000cb0c <ACPI::detectPCI()+0x8c>
c000caee:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000caf3:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000caf8:	85 c0                	test   eax,eax
c000cafa:	74 10                	je     c000cb0c <ACPI::detectPCI()+0x8c>
c000cafc:	83 ec 0c             	sub    esp,0xc
c000caff:	68 5c 7a 02 c0       	push   0xc0027a5c
c000cb04:	e8 af 31 00 00       	call   c000fcb8 <KePanic(char const*)>
c000cb09:	83 c4 10             	add    esp,0x10
c000cb0c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cb10:	83 f0 01             	xor    eax,0x1
c000cb13:	0f b6 c0             	movzx  eax,al
c000cb16:	85 c0                	test   eax,eax
c000cb18:	74 46                	je     c000cb60 <ACPI::detectPCI()+0xe0>
c000cb1a:	e8 11 36 ff ff       	call   c0000130 <manualPCIProbe>
c000cb1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb23:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cb28:	75 0e                	jne    c000cb38 <ACPI::detectPCI()+0xb8>
c000cb2a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb2f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb34:	eb 2a                	jmp    c000cb60 <ACPI::detectPCI()+0xe0>
c000cb36:	66 90                	xchg   ax,ax
c000cb38:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb3d:	75 21                	jne    c000cb60 <ACPI::detectPCI()+0xe0>
c000cb3f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb44:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb49:	85 c0                	test   eax,eax
c000cb4b:	74 13                	je     c000cb60 <ACPI::detectPCI()+0xe0>
c000cb4d:	83 ec 0c             	sub    esp,0xc
c000cb50:	68 5c 7a 02 c0       	push   0xc0027a5c
c000cb55:	e8 5e 31 00 00       	call   c000fcb8 <KePanic(char const*)>
c000cb5a:	83 c4 10             	add    esp,0x10
c000cb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb60:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb65:	85 c0                	test   eax,eax
c000cb67:	0f 84 87 00 00 00    	je     c000cbf4 <ACPI::detectPCI()+0x174>
c000cb6d:	83 ec 0c             	sub    esp,0xc
c000cb70:	68 c4 78 02 c0       	push   0xc00278c4
c000cb75:	e8 57 07 00 00       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb85:	83 ec 0c             	sub    esp,0xc
c000cb88:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb8c:	e8 d2 2c 00 00       	call   c000f863 <malloc>
c000cb91:	83 c4 10             	add    esp,0x10
c000cb94:	89 c3                	mov    ebx,eax
c000cb96:	83 ec 0c             	sub    esp,0xc
c000cb99:	53                   	push   ebx
c000cb9a:	e8 f5 13 01 00       	call   c001df94 <PCI::PCI()>
c000cb9f:	83 c4 10             	add    esp,0x10
c000cba2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cba6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbaa:	83 ec 08             	sub    esp,0x8
c000cbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbb1:	50                   	push   eax
c000cbb2:	e8 9d ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cbb7:	83 c4 10             	add    esp,0x10
c000cbba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbc0:	83 c0 08             	add    eax,0x8
c000cbc3:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbc5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cbca:	85 d2                	test   edx,edx
c000cbcc:	74 0a                	je     c000cbd8 <ACPI::detectPCI()+0x158>
c000cbce:	ba 01 00 00 00       	mov    edx,0x1
c000cbd3:	eb 0b                	jmp    c000cbe0 <ACPI::detectPCI()+0x160>
c000cbd5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbd8:	ba 02 00 00 00       	mov    edx,0x2
c000cbdd:	8d 76 00             	lea    esi,[esi+0x0]
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	52                   	push   edx
c000cbe5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbe9:	ff d0                	call   eax
c000cbeb:	83 c4 10             	add    esp,0x10
c000cbee:	e9 91 00 00 00       	jmp    c000cc84 <ACPI::detectPCI()+0x204>
c000cbf3:	90                   	nop
c000cbf4:	83 ec 0c             	sub    esp,0xc
c000cbf7:	68 dc 78 02 c0       	push   0xc00278dc
c000cbfc:	e8 d0 06 00 00       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000cc01:	83 c4 10             	add    esp,0x10
c000cc04:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cc0b:	83 ec 0c             	sub    esp,0xc
c000cc0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cc12:	e8 4c 2c 00 00       	call   c000f863 <malloc>
c000cc17:	83 c4 10             	add    esp,0x10
c000cc1a:	89 c3                	mov    ebx,eax
c000cc1c:	83 ec 0c             	sub    esp,0xc
c000cc1f:	53                   	push   ebx
c000cc20:	e8 75 1f 01 00       	call   c001eb9a <IDE::IDE()>
c000cc25:	83 c4 10             	add    esp,0x10
c000cc28:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc30:	83 ec 08             	sub    esp,0x8
c000cc33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc37:	50                   	push   eax
c000cc38:	e8 17 ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cc3d:	83 c4 10             	add    esp,0x10
c000cc40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc44:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc52:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc5f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc6c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc6e:	83 c0 08             	add    eax,0x8
c000cc71:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc73:	6a 00                	push   0x0
c000cc75:	6a 00                	push   0x0
c000cc77:	6a 00                	push   0x0
c000cc79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc7d:	ff d0                	call   eax
c000cc7f:	83 c4 10             	add    esp,0x10
c000cc82:	66 90                	xchg   ax,ax
c000cc84:	90                   	nop
c000cc85:	83 c4 28             	add    esp,0x28
c000cc88:	5b                   	pop    ebx
c000cc89:	c3                   	ret    
c000cc8a:	66 90                	xchg   ax,ax

c000cc8c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc8c:	83 ec 0c             	sub    esp,0xc
c000cc8f:	83 ec 0c             	sub    esp,0xc
c000cc92:	68 f1 78 02 c0       	push   0xc00278f1
c000cc97:	e8 1c 30 00 00       	call   c000fcb8 <KePanic(char const*)>
c000cc9c:	83 c4 10             	add    esp,0x10
c000cc9f:	90                   	nop
c000cca0:	83 c4 0c             	add    esp,0xc
c000cca3:	c3                   	ret    

c000cca4 <ACPI::open(int, int, void*)>:
c000cca4:	57                   	push   edi
c000cca5:	56                   	push   esi
c000cca6:	53                   	push   ebx
c000cca7:	81 ec 70 01 00 00    	sub    esp,0x170
c000ccad:	83 ec 0c             	sub    esp,0xc
c000ccb0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ccb7:	e8 c4 fd ff ff       	call   c000ca80 <ACPI::detectPCI()>
c000ccbc:	83 c4 10             	add    esp,0x10
c000ccbf:	83 ec 0c             	sub    esp,0xc
c000ccc2:	68 84 7a 02 c0       	push   0xc0027a84
c000ccc7:	e8 05 06 00 00       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	b8 4c 05 00 00       	mov    eax,0x54c
c000ccd4:	8a 00                	mov    al,BYTE PTR [eax]
c000ccd6:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000ccdd:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cce5:	83 f8 01             	cmp    eax,0x1
c000cce8:	75 12                	jne    c000ccfc <ACPI::open(int, int, void*)+0x58>
c000ccea:	83 ec 0c             	sub    esp,0xc
c000cced:	68 02 79 02 c0       	push   0xc0027902
c000ccf2:	e8 0a 8a 00 00       	call   c0015701 <Thr::loadKernelSymbolTable(char const*)>
c000ccf7:	83 c4 10             	add    esp,0x10
c000ccfa:	eb 34                	jmp    c000cd30 <ACPI::open(int, int, void*)+0x8c>
c000ccfc:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cd04:	3d bb 00 00 00       	cmp    eax,0xbb
c000cd09:	75 15                	jne    c000cd20 <ACPI::open(int, int, void*)+0x7c>
c000cd0b:	83 ec 0c             	sub    esp,0xc
c000cd0e:	68 20 79 02 c0       	push   0xc0027920
c000cd13:	e8 e9 89 00 00       	call   c0015701 <Thr::loadKernelSymbolTable(char const*)>
c000cd18:	83 c4 10             	add    esp,0x10
c000cd1b:	eb 13                	jmp    c000cd30 <ACPI::open(int, int, void*)+0x8c>
c000cd1d:	8d 76 00             	lea    esi,[esi+0x0]
c000cd20:	83 ec 0c             	sub    esp,0xc
c000cd23:	68 3e 79 02 c0       	push   0xc002793e
c000cd28:	e8 8b 2f 00 00       	call   c000fcb8 <KePanic(char const*)>
c000cd2d:	83 c4 10             	add    esp,0x10
c000cd30:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000cd38:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000cd43:	83 ec 0c             	sub    esp,0xc
c000cd46:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000cd4d:	e8 11 2b 00 00       	call   c000f863 <malloc>
c000cd52:	83 c4 10             	add    esp,0x10
c000cd55:	89 c3                	mov    ebx,eax
c000cd57:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000cd5c:	83 ec 04             	sub    esp,0x4
c000cd5f:	50                   	push   eax
c000cd60:	68 58 79 02 c0       	push   0xc0027958
c000cd65:	53                   	push   ebx
c000cd66:	e8 1f b4 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cd6b:	83 c4 10             	add    esp,0x10
c000cd6e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000cd75:	83 ec 08             	sub    esp,0x8
c000cd78:	6a 01                	push   0x1
c000cd7a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd81:	e8 22 b4 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000cd86:	83 c4 10             	add    esp,0x10
c000cd89:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000cd90:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000cd98:	75 16                	jne    c000cdb0 <ACPI::open(int, int, void*)+0x10c>
c000cd9a:	83 ec 0c             	sub    esp,0xc
c000cd9d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cda4:	e8 5d b4 ff ff       	call   c0008206 <File::close()>
c000cda9:	83 c4 10             	add    esp,0x10
c000cdac:	eb 0a                	jmp    c000cdb8 <ACPI::open(int, int, void*)+0x114>
c000cdae:	66 90                	xchg   ax,ax
c000cdb0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000cdb8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000cdc0:	74 1e                	je     c000cde0 <ACPI::open(int, int, void*)+0x13c>
c000cdc2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000cdc9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdcb:	83 c0 08             	add    eax,0x8
c000cdce:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdd0:	83 ec 0c             	sub    esp,0xc
c000cdd3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdda:	ff d0                	call   eax
c000cddc:	83 c4 10             	add    esp,0x10
c000cddf:	90                   	nop
c000cde0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000cde7:	83 f0 01             	xor    eax,0x1
c000cdea:	0f b6 c0             	movzx  eax,al
c000cded:	85 c0                	test   eax,eax
c000cdef:	74 2f                	je     c000ce20 <ACPI::open(int, int, void*)+0x17c>
c000cdf1:	83 ec 0c             	sub    esp,0xc
c000cdf4:	68 76 79 02 c0       	push   0xc0027976
c000cdf9:	e8 d3 04 00 00       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000cdfe:	83 c4 10             	add    esp,0x10
c000ce01:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000ce0c:	83 ec 0c             	sub    esp,0xc
c000ce0f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ce16:	e8 63 66 00 00       	call   c001347e <Virt::setupPageSwapping(int)>
c000ce1b:	83 c4 10             	add    esp,0x10
c000ce1e:	66 90                	xchg   ax,ax
c000ce20:	83 ec 0c             	sub    esp,0xc
c000ce23:	68 91 79 02 c0       	push   0xc0027991
c000ce28:	e8 a4 04 00 00       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000ce2d:	83 c4 10             	add    esp,0x10
c000ce30:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ce37:	83 ec 08             	sub    esp,0x8
c000ce3a:	6a 13                	push   0x13
c000ce3c:	50                   	push   eax
c000ce3d:	e8 40 cf ff ff       	call   c0009d82 <getDevicesOfType(DeviceType)>
c000ce42:	83 c4 0c             	add    esp,0xc
c000ce45:	8d 76 00             	lea    esi,[esi+0x0]
c000ce48:	83 ec 0c             	sub    esp,0xc
c000ce4b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce52:	50                   	push   eax
c000ce53:	e8 9c 8e 01 00       	call   c0025cf4 <LinkedList<Device>::isEmpty()>
c000ce58:	83 c4 10             	add    esp,0x10
c000ce5b:	83 f0 01             	xor    eax,0x1
c000ce5e:	0f b6 c0             	movzx  eax,al
c000ce61:	85 c0                	test   eax,eax
c000ce63:	0f 84 3b 01 00 00    	je     c000cfa4 <ACPI::open(int, int, void*)+0x300>
c000ce69:	83 ec 0c             	sub    esp,0xc
c000ce6c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce73:	50                   	push   eax
c000ce74:	e8 97 8e 01 00       	call   c0025d10 <LinkedList<Device>::getFirstElement()>
c000ce79:	83 c4 10             	add    esp,0x10
c000ce7c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ce83:	83 ec 0c             	sub    esp,0xc
c000ce86:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce8d:	50                   	push   eax
c000ce8e:	e8 85 8e 01 00       	call   c0025d18 <LinkedList<Device>::removeFirst()>
c000ce93:	83 c4 10             	add    esp,0x10
c000ce96:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ce9d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000cea4:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ceab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ceaf:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ceb5:	ba 09 00 00 00       	mov    edx,0x9
c000ceba:	fc                   	cld    
c000cebb:	89 c7                	mov    edi,eax
c000cebd:	89 de                	mov    esi,ebx
c000cebf:	89 d1                	mov    ecx,edx
c000cec1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000cec3:	83 ec 08             	sub    esp,0x8
c000cec6:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ceca:	50                   	push   eax
c000cecb:	83 ec 24             	sub    esp,0x24
c000cece:	89 e0                	mov    eax,esp
c000ced0:	89 c3                	mov    ebx,eax
c000ced2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ced6:	ba 09 00 00 00       	mov    edx,0x9
c000cedb:	89 df                	mov    edi,ebx
c000cedd:	89 c6                	mov    esi,eax
c000cedf:	89 d1                	mov    ecx,edx
c000cee1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000cee3:	e8 96 15 01 00       	call   c001e47e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000cee8:	83 c4 30             	add    esp,0x30
c000ceeb:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000cef2:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000cefa:	0f 84 48 ff ff ff    	je     c000ce48 <ACPI::open(int, int, void*)+0x1a4>
c000cf00:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000cf0b:	83 ec 0c             	sub    esp,0xc
c000cf0e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000cf15:	e8 49 29 00 00       	call   c000f863 <malloc>
c000cf1a:	83 c4 10             	add    esp,0x10
c000cf1d:	89 c3                	mov    ebx,eax
c000cf1f:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000cf24:	83 ec 04             	sub    esp,0x4
c000cf27:	50                   	push   eax
c000cf28:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf2f:	53                   	push   ebx
c000cf30:	e8 55 b2 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cf35:	83 c4 10             	add    esp,0x10
c000cf38:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000cf3f:	83 ec 0c             	sub    esp,0xc
c000cf42:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf49:	e8 1e b5 ff ff       	call   c000846c <File::exists()>
c000cf4e:	83 c4 10             	add    esp,0x10
c000cf51:	0f b6 c0             	movzx  eax,al
c000cf54:	85 c0                	test   eax,eax
c000cf56:	74 1c                	je     c000cf74 <ACPI::open(int, int, void*)+0x2d0>
c000cf58:	83 ec 04             	sub    esp,0x4
c000cf5b:	6a 00                	push   0x0
c000cf5d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf64:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf6b:	e8 34 8f 00 00       	call   c0015ea4 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000cf70:	83 c4 10             	add    esp,0x10
c000cf73:	90                   	nop
c000cf74:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000cf7c:	0f 84 c6 fe ff ff    	je     c000ce48 <ACPI::open(int, int, void*)+0x1a4>
c000cf82:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000cf89:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf8b:	83 c0 08             	add    eax,0x8
c000cf8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf90:	83 ec 0c             	sub    esp,0xc
c000cf93:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf9a:	ff d0                	call   eax
c000cf9c:	83 c4 10             	add    esp,0x10
c000cf9f:	e9 a4 fe ff ff       	jmp    c000ce48 <ACPI::open(int, int, void*)+0x1a4>
c000cfa4:	83 ec 0c             	sub    esp,0xc
c000cfa7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cfae:	50                   	push   eax
c000cfaf:	e8 3c 8d 01 00       	call   c0025cf0 <LinkedList<Device>::~LinkedList()>
c000cfb4:	83 c4 10             	add    esp,0x10
c000cfb7:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c000cfbc:	83 ec 04             	sub    esp,0x4
c000cfbf:	6a 00                	push   0x0
c000cfc1:	50                   	push   eax
c000cfc2:	68 ab 79 02 c0       	push   0xc00279ab
c000cfc7:	e8 d8 8e 00 00       	call   c0015ea4 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000cfcc:	83 c4 10             	add    esp,0x10
c000cfcf:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c000cfd4:	85 c0                	test   eax,eax
c000cfd6:	0f 84 1c 01 00 00    	je     c000d0f8 <ACPI::open(int, int, void*)+0x454>
c000cfdc:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c000cfe1:	85 c0                	test   eax,eax
c000cfe3:	0f 84 0f 01 00 00    	je     c000d0f8 <ACPI::open(int, int, void*)+0x454>
c000cfe9:	83 ec 0c             	sub    esp,0xc
c000cfec:	68 c8 79 02 c0       	push   0xc00279c8
c000cff1:	e8 db 02 00 00       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000cff6:	83 c4 10             	add    esp,0x10
c000cff9:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000d004:	83 ec 0c             	sub    esp,0xc
c000d007:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000d00e:	e8 50 28 00 00       	call   c000f863 <malloc>
c000d013:	83 c4 10             	add    esp,0x10
c000d016:	89 c3                	mov    ebx,eax
c000d018:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000d01d:	83 ec 04             	sub    esp,0x4
c000d020:	50                   	push   eax
c000d021:	68 e5 79 02 c0       	push   0xc00279e5
c000d026:	53                   	push   ebx
c000d027:	e8 5e b1 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d02c:	83 c4 10             	add    esp,0x10
c000d02f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000d036:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d03e:	74 20                	je     c000d060 <ACPI::open(int, int, void*)+0x3bc>
c000d040:	83 ec 0c             	sub    esp,0xc
c000d043:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d04a:	e8 1d b4 ff ff       	call   c000846c <File::exists()>
c000d04f:	83 c4 10             	add    esp,0x10
c000d052:	0f b6 c0             	movzx  eax,al
c000d055:	85 c0                	test   eax,eax
c000d057:	74 07                	je     c000d060 <ACPI::open(int, int, void*)+0x3bc>
c000d059:	b0 01                	mov    al,0x1
c000d05b:	eb 07                	jmp    c000d064 <ACPI::open(int, int, void*)+0x3c0>
c000d05d:	8d 76 00             	lea    esi,[esi+0x0]
c000d060:	b0 00                	mov    al,0x0
c000d062:	66 90                	xchg   ax,ax
c000d064:	0f b6 c0             	movzx  eax,al
c000d067:	85 c0                	test   eax,eax
c000d069:	74 19                	je     c000d084 <ACPI::open(int, int, void*)+0x3e0>
c000d06b:	83 ec 04             	sub    esp,0x4
c000d06e:	6a 00                	push   0x0
c000d070:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000d077:	68 e5 79 02 c0       	push   0xc00279e5
c000d07c:	e8 23 8e 00 00       	call   c0015ea4 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d08c:	74 2a                	je     c000d0b8 <ACPI::open(int, int, void*)+0x414>
c000d08e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d096:	74 20                	je     c000d0b8 <ACPI::open(int, int, void*)+0x414>
c000d098:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d09f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0a1:	83 c0 08             	add    eax,0x8
c000d0a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0a6:	83 ec 0c             	sub    esp,0xc
c000d0a9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d0b0:	ff d0                	call   eax
c000d0b2:	83 c4 10             	add    esp,0x10
c000d0b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d0b8:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c000d0bd:	83 ec 08             	sub    esp,0x8
c000d0c0:	68 02 7a 02 c0       	push   0xc0027a02
c000d0c5:	50                   	push   eax
c000d0c6:	e8 71 f2 ff ff       	call   c000c33c <findDataTable(unsigned char*, char*)>
c000d0cb:	83 c4 10             	add    esp,0x10
c000d0ce:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d0d5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d0dd:	74 19                	je     c000d0f8 <ACPI::open(int, int, void*)+0x454>
c000d0df:	83 ec 08             	sub    esp,0x8
c000d0e2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d0e9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d0f0:	e8 97 fb ff ff       	call   c000cc8c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d0f5:	83 c4 10             	add    esp,0x10
c000d0f8:	b8 00 00 00 00       	mov    eax,0x0
c000d0fd:	81 c4 70 01 00 00    	add    esp,0x170
c000d103:	5b                   	pop    ebx
c000d104:	5e                   	pop    esi
c000d105:	5f                   	pop    edi
c000d106:	c3                   	ret    
c000d107:	90                   	nop

c000d108 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d108:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d10e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d115:	89 c2                	mov    edx,eax
c000d117:	c1 fa 1f             	sar    edx,0x1f
c000d11a:	83 ec 04             	sub    esp,0x4
c000d11d:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d121:	51                   	push   ecx
c000d122:	52                   	push   edx
c000d123:	50                   	push   eax
c000d124:	e8 2f 25 00 00       	call   c000f658 <KeItoa(long long, char*)>
c000d129:	83 c4 10             	add    esp,0x10
c000d12c:	83 ec 08             	sub    esp,0x8
c000d12f:	68 d0 7a 02 c0       	push   0xc0027ad0
c000d134:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d138:	50                   	push   eax
c000d139:	e8 02 35 ff ff       	call   c0000640 <strcpy>
c000d13e:	83 c4 10             	add    esp,0x10
c000d141:	83 ec 08             	sub    esp,0x8
c000d144:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d14b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d14f:	50                   	push   eax
c000d150:	e8 eb 36 ff ff       	call   c0000840 <strcat>
c000d155:	83 c4 10             	add    esp,0x10
c000d158:	83 ec 08             	sub    esp,0x8
c000d15b:	68 de 7a 02 c0       	push   0xc0027ade
c000d160:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d164:	50                   	push   eax
c000d165:	e8 d6 36 ff ff       	call   c0000840 <strcat>
c000d16a:	83 c4 10             	add    esp,0x10
c000d16d:	83 ec 08             	sub    esp,0x8
c000d170:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d177:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d17b:	50                   	push   eax
c000d17c:	e8 bf 36 ff ff       	call   c0000840 <strcat>
c000d181:	83 c4 10             	add    esp,0x10
c000d184:	83 ec 08             	sub    esp,0x8
c000d187:	68 e1 7a 02 c0       	push   0xc0027ae1
c000d18c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d190:	50                   	push   eax
c000d191:	e8 aa 36 ff ff       	call   c0000840 <strcat>
c000d196:	83 c4 10             	add    esp,0x10
c000d199:	83 ec 08             	sub    esp,0x8
c000d19c:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d1a3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1a7:	50                   	push   eax
c000d1a8:	e8 93 36 ff ff       	call   c0000840 <strcat>
c000d1ad:	83 c4 10             	add    esp,0x10
c000d1b0:	83 ec 08             	sub    esp,0x8
c000d1b3:	68 e1 7a 02 c0       	push   0xc0027ae1
c000d1b8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1bc:	50                   	push   eax
c000d1bd:	e8 7e 36 ff ff       	call   c0000840 <strcat>
c000d1c2:	83 c4 10             	add    esp,0x10
c000d1c5:	83 ec 08             	sub    esp,0x8
c000d1c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d1cc:	50                   	push   eax
c000d1cd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1d1:	50                   	push   eax
c000d1d2:	e8 69 36 ff ff       	call   c0000840 <strcat>
c000d1d7:	83 c4 10             	add    esp,0x10
c000d1da:	83 ec 0c             	sub    esp,0xc
c000d1dd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1e1:	50                   	push   eax
c000d1e2:	e8 d1 2a 00 00       	call   c000fcb8 <KePanic(char const*)>
c000d1e7:	83 c4 10             	add    esp,0x10
c000d1ea:	90                   	nop
c000d1eb:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d1f1:	c3                   	ret    

c000d1f2 <KeInitialiseAtexit()>:
c000d1f2:	83 ec 10             	sub    esp,0x10
c000d1f5:	c7 05 e0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fe0,0x0
c000d1ff:	68 80 00 00 00       	push   0x80
c000d204:	6a 00                	push   0x0
c000d206:	68 80 10 03 c0       	push   0xc0031080
c000d20b:	e8 e0 32 ff ff       	call   c00004f0 <memset>
c000d210:	83 c4 1c             	add    esp,0x1c
c000d213:	c3                   	ret    

c000d214 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d214:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c000d219:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d21d:	89 14 85 80 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef80],edx
c000d224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d228:	89 14 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],edx
c000d22f:	40                   	inc    eax
c000d230:	a3 e0 0f 03 c0       	mov    ds:0xc0030fe0,eax
c000d235:	83 f8 1f             	cmp    eax,0x1f
c000d238:	7e 0d                	jle    c000d247 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d23a:	c7 44 24 04 e3 7a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027ae3
c000d242:	e9 71 2a 00 00       	jmp    c000fcb8 <KePanic(char const*)>
c000d247:	c3                   	ret    

c000d248 <KeExecuteAtexit()>:
c000d248:	53                   	push   ebx
c000d249:	31 db                	xor    ebx,ebx
c000d24b:	83 ec 08             	sub    esp,0x8
c000d24e:	39 1d e0 0f 03 c0    	cmp    DWORD PTR ds:0xc0030fe0,ebx
c000d254:	7e 28                	jle    c000d27e <KeExecuteAtexit()+0x36>
c000d256:	8b 04 9d 80 10 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcef80]
c000d25d:	85 c0                	test   eax,eax
c000d25f:	74 1a                	je     c000d27b <KeExecuteAtexit()+0x33>
c000d261:	83 ec 0c             	sub    esp,0xc
c000d264:	ff 34 9d 00 10 03 c0 	push   DWORD PTR [ebx*4-0x3ffcf000]
c000d26b:	ff d0                	call   eax
c000d26d:	c7 04 9d 80 10 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffcef80],0x0
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	43                   	inc    ebx
c000d27c:	eb d0                	jmp    c000d24e <KeExecuteAtexit()+0x6>
c000d27e:	83 c4 08             	add    esp,0x8
c000d281:	5b                   	pop    ebx
c000d282:	c3                   	ret    
c000d283:	90                   	nop

c000d284 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d284:	8b 15 00 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031100
c000d28a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d28e:	21 d0                	and    eax,edx
c000d290:	0f 95 c0             	setne  al
c000d293:	c3                   	ret    

c000d294 <KeInitialiseBootConfigurationFlags()>:
c000d294:	b8 00 05 00 00       	mov    eax,0x500
c000d299:	8b 00                	mov    eax,DWORD PTR [eax]
c000d29b:	a3 00 11 03 c0       	mov    ds:0xc0031100,eax
c000d2a0:	90                   	nop
c000d2a1:	c3                   	ret    

c000d2a2 <KeDisplaySplashScreen()>:
c000d2a2:	53                   	push   ebx
c000d2a3:	bb 01 00 00 00       	mov    ebx,0x1
c000d2a8:	83 ec 08             	sub    esp,0x8
c000d2ab:	43                   	inc    ebx
c000d2ac:	0f be 83 fa 7a 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffd8506]
c000d2b3:	85 c0                	test   eax,eax
c000d2b5:	74 15                	je     c000d2cc <KeDisplaySplashScreen()+0x2a>
c000d2b7:	83 ec 0c             	sub    esp,0xc
c000d2ba:	6a 01                	push   0x1
c000d2bc:	53                   	push   ebx
c000d2bd:	6a 00                	push   0x0
c000d2bf:	6a 0f                	push   0xf
c000d2c1:	50                   	push   eax
c000d2c2:	e8 ad e8 00 00       	call   c001bb74 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d2c7:	83 c4 20             	add    esp,0x20
c000d2ca:	eb df                	jmp    c000d2ab <KeDisplaySplashScreen()+0x9>
c000d2cc:	83 c4 08             	add    esp,0x8
c000d2cf:	5b                   	pop    ebx
c000d2d0:	c3                   	ret    

c000d2d1 <KeSetBootMessage(char const*)>:
c000d2d1:	57                   	push   edi
c000d2d2:	56                   	push   esi
c000d2d3:	53                   	push   ebx
c000d2d4:	31 db                	xor    ebx,ebx
c000d2d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2da:	83 ec 0c             	sub    esp,0xc
c000d2dd:	6a 14                	push   0x14
c000d2df:	53                   	push   ebx
c000d2e0:	43                   	inc    ebx
c000d2e1:	6a 00                	push   0x0
c000d2e3:	6a 00                	push   0x0
c000d2e5:	6a 20                	push   0x20
c000d2e7:	e8 88 e8 00 00       	call   c001bb74 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d2ec:	83 c4 20             	add    esp,0x20
c000d2ef:	83 fb 50             	cmp    ebx,0x50
c000d2f2:	75 e6                	jne    c000d2da <KeSetBootMessage(char const*)+0x9>
c000d2f4:	83 ec 0c             	sub    esp,0xc
c000d2f7:	56                   	push   esi
c000d2f8:	e8 73 32 ff ff       	call   c0000570 <strlen>
c000d2fd:	83 c4 10             	add    esp,0x10
c000d300:	29 c3                	sub    ebx,eax
c000d302:	d1 eb                	shr    ebx,1
c000d304:	89 df                	mov    edi,ebx
c000d306:	89 f0                	mov    eax,esi
c000d308:	29 d8                	sub    eax,ebx
c000d30a:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000d30e:	85 c0                	test   eax,eax
c000d310:	74 16                	je     c000d328 <KeSetBootMessage(char const*)+0x57>
c000d312:	83 ec 0c             	sub    esp,0xc
c000d315:	6a 14                	push   0x14
c000d317:	57                   	push   edi
c000d318:	47                   	inc    edi
c000d319:	6a 00                	push   0x0
c000d31b:	6a 07                	push   0x7
c000d31d:	50                   	push   eax
c000d31e:	e8 51 e8 00 00       	call   c001bb74 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d323:	83 c4 20             	add    esp,0x20
c000d326:	eb de                	jmp    c000d306 <KeSetBootMessage(char const*)+0x35>
c000d328:	5b                   	pop    ebx
c000d329:	5e                   	pop    esi
c000d32a:	5f                   	pop    edi
c000d32b:	c3                   	ret    

c000d32c <__cxa_atexit>:
c000d32c:	31 c0                	xor    eax,eax
c000d32e:	c3                   	ret    

c000d32f <__cxa_finalize>:
c000d32f:	c3                   	ret    

c000d330 <__stack_chk_fail>:
c000d330:	55                   	push   ebp
c000d331:	89 e5                	mov    ebp,esp
c000d333:	83 ec 10             	sub    esp,0x10
c000d336:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d339:	68 0f 7b 02 c0       	push   0xc0027b0f
c000d33e:	e8 39 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d343:	58                   	pop    eax
c000d344:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d347:	5a                   	pop    edx
c000d348:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d34b:	68 0f 7b 02 c0       	push   0xc0027b0f
c000d350:	e8 27 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d355:	c7 04 24 17 7b 02 c0 	mov    DWORD PTR [esp],0xc0027b17
c000d35c:	e8 57 29 00 00       	call   c000fcb8 <KePanic(char const*)>
c000d361:	83 c4 10             	add    esp,0x10
c000d364:	c9                   	leave  
c000d365:	c3                   	ret    

c000d366 <__cxa_pure_virtual>:
c000d366:	83 ec 18             	sub    esp,0x18
c000d369:	68 2f 7b 02 c0       	push   0xc0027b2f
c000d36e:	e8 45 29 00 00       	call   c000fcb8 <KePanic(char const*)>
c000d373:	83 c4 1c             	add    esp,0x1c
c000d376:	c3                   	ret    

c000d377 <operator new[](unsigned long)>:
c000d377:	e9 e7 24 00 00       	jmp    c000f863 <malloc>

c000d37c <operator delete(void*, unsigned long)>:
c000d37c:	e9 02 25 00 00       	jmp    c000f883 <rfree>

c000d381 <operator delete[](void*)>:
c000d381:	e9 fd 24 00 00       	jmp    c000f883 <rfree>

c000d386 <operator delete[](void*, unsigned long)>:
c000d386:	e9 f8 24 00 00       	jmp    c000f883 <rfree>
c000d38b:	90                   	nop

c000d38c <CUnlockScheduler>:
c000d38c:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000d394:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000d399:	85 c0                	test   eax,eax
c000d39b:	75 03                	jne    c000d3a0 <CUnlockScheduler+0x14>
c000d39d:	fb                   	sti    
c000d39e:	66 90                	xchg   ax,ax
c000d3a0:	90                   	nop
c000d3a1:	c3                   	ret    
c000d3a2:	66 90                	xchg   ax,ax

c000d3a4 <CLockScheduler>:
c000d3a4:	fa                   	cli    
c000d3a5:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000d3aa:	83 c0 01             	add    eax,0x1
c000d3ad:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c000d3b2:	90                   	nop
c000d3b3:	c3                   	ret    

c000d3b4 <CPrintf>:
c000d3b4:	83 ec 0c             	sub    esp,0xc
c000d3b7:	83 ec 08             	sub    esp,0x8
c000d3ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3be:	68 42 7b 02 c0       	push   0xc0027b42
c000d3c3:	e8 b4 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d3c8:	83 c4 10             	add    esp,0x10
c000d3cb:	90                   	nop
c000d3cc:	83 c4 0c             	add    esp,0xc
c000d3cf:	c3                   	ret    

c000d3d0 <CmOpen(char const*)>:
c000d3d0:	57                   	push   edi
c000d3d1:	56                   	push   esi
c000d3d2:	53                   	push   ebx
c000d3d3:	83 ec 1c             	sub    esp,0x1c
c000d3d6:	6a 30                	push   0x30
c000d3d8:	e8 86 24 00 00       	call   c000f863 <malloc>
c000d3dd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d3e4:	89 c3                	mov    ebx,eax
c000d3e6:	e8 78 24 00 00       	call   c000f863 <malloc>
c000d3eb:	83 c4 0c             	add    esp,0xc
c000d3ee:	89 c6                	mov    esi,eax
c000d3f0:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c000d3f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d3fa:	50                   	push   eax
c000d3fb:	e8 8a ad ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d400:	83 c4 0c             	add    esp,0xc
c000d403:	89 33                	mov    DWORD PTR [ebx],esi
c000d405:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d409:	50                   	push   eax
c000d40a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d40e:	50                   	push   eax
c000d40f:	56                   	push   esi
c000d410:	e8 95 b0 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c000d415:	5a                   	pop    edx
c000d416:	59                   	pop    ecx
c000d417:	6a 01                	push   0x1
c000d419:	ff 33                	push   DWORD PTR [ebx]
c000d41b:	e8 88 ad ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d420:	5e                   	pop    esi
c000d421:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d425:	e8 39 24 00 00       	call   c000f863 <malloc>
c000d42a:	5a                   	pop    edx
c000d42b:	89 c7                	mov    edi,eax
c000d42d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d431:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d433:	8b 10                	mov    edx,DWORD PTR [eax]
c000d435:	56                   	push   esi
c000d436:	57                   	push   edi
c000d437:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d43b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d43f:	50                   	push   eax
c000d440:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d443:	83 c4 14             	add    esp,0x14
c000d446:	ff 33                	push   DWORD PTR [ebx]
c000d448:	e8 b9 ad ff ff       	call   c0008206 <File::close()>
c000d44d:	59                   	pop    ecx
c000d44e:	58                   	pop    eax
c000d44f:	6a 13                	push   0x13
c000d451:	ff 33                	push   DWORD PTR [ebx]
c000d453:	e8 50 ad ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d458:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d45a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d45c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d45f:	57                   	push   edi
c000d460:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d464:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d468:	50                   	push   eax
c000d469:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d46c:	83 c4 14             	add    esp,0x14
c000d46f:	57                   	push   edi
c000d470:	e8 fe 23 00 00       	call   c000f873 <free>
c000d475:	83 c4 10             	add    esp,0x10
c000d478:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d47b:	75 10                	jne    c000d48d <CmOpen(char const*)+0xbd>
c000d47d:	83 ec 0c             	sub    esp,0xc
c000d480:	68 45 7b 02 c0       	push   0xc0027b45
c000d485:	e8 2e 28 00 00       	call   c000fcb8 <KePanic(char const*)>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d490:	50                   	push   eax
c000d491:	6a 00                	push   0x0
c000d493:	6a 00                	push   0x0
c000d495:	ff 33                	push   DWORD PTR [ebx]
c000d497:	e8 ca ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d49c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d49e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4a0:	89 34 24             	mov    DWORD PTR [esp],esi
c000d4a3:	57                   	push   edi
c000d4a4:	6a 00                	push   0x0
c000d4a6:	6a 2b                	push   0x2b
c000d4a8:	50                   	push   eax
c000d4a9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d4ac:	83 c4 1c             	add    esp,0x1c
c000d4af:	6a 00                	push   0x0
c000d4b1:	6a 00                	push   0x0
c000d4b3:	ff 33                	push   DWORD PTR [ebx]
c000d4b5:	e8 ac ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d4ba:	83 c4 0c             	add    esp,0xc
c000d4bd:	6a 08                	push   0x8
c000d4bf:	68 67 7b 02 c0       	push   0xc0027b67
c000d4c4:	57                   	push   edi
c000d4c5:	e8 b6 2e ff ff       	call   c0000380 <memcmp>
c000d4ca:	83 c4 10             	add    esp,0x10
c000d4cd:	85 c0                	test   eax,eax
c000d4cf:	74 10                	je     c000d4e1 <CmOpen(char const*)+0x111>
c000d4d1:	83 ec 0c             	sub    esp,0xc
c000d4d4:	68 70 7b 02 c0       	push   0xc0027b70
c000d4d9:	e8 da 27 00 00       	call   c000fcb8 <KePanic(char const*)>
c000d4de:	83 c4 10             	add    esp,0x10
c000d4e1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d4e5:	89 d8                	mov    eax,ebx
c000d4e7:	83 c4 10             	add    esp,0x10
c000d4ea:	5b                   	pop    ebx
c000d4eb:	5e                   	pop    esi
c000d4ec:	5f                   	pop    edi
c000d4ed:	c3                   	ret    

c000d4ee <CmClose(Reghive_Tag*)>:
c000d4ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4f2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d4f6:	74 0b                	je     c000d503 <CmClose(Reghive_Tag*)+0x15>
c000d4f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d4fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d4fe:	e9 03 ad ff ff       	jmp    c0008206 <File::close()>
c000d503:	c3                   	ret    

c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d504:	53                   	push   ebx
c000d505:	83 ec 18             	sub    esp,0x18
c000d508:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d50c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d510:	74 29                	je     c000d53b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d512:	50                   	push   eax
c000d513:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d518:	99                   	cdq    
c000d519:	52                   	push   edx
c000d51a:	50                   	push   eax
c000d51b:	ff 33                	push   DWORD PTR [ebx]
c000d51d:	e8 44 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d522:	5a                   	pop    edx
c000d523:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d525:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d529:	8b 10                	mov    edx,DWORD PTR [eax]
c000d52b:	51                   	push   ecx
c000d52c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d530:	6a 00                	push   0x0
c000d532:	6a 2b                	push   0x2b
c000d534:	50                   	push   eax
c000d535:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d538:	83 c4 20             	add    esp,0x20
c000d53b:	83 c4 18             	add    esp,0x18
c000d53e:	5b                   	pop    ebx
c000d53f:	c3                   	ret    

c000d540 <CmGetString(Reghive_Tag*, int, char*)>:
c000d540:	55                   	push   ebp
c000d541:	57                   	push   edi
c000d542:	56                   	push   esi
c000d543:	53                   	push   ebx
c000d544:	31 db                	xor    ebx,ebx
c000d546:	83 ec 70             	sub    esp,0x70
c000d549:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d550:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d554:	50                   	push   eax
c000d555:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d55c:	55                   	push   ebp
c000d55d:	e8 a2 ff ff ff       	call   c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d562:	83 c4 10             	add    esp,0x10
c000d565:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d56a:	c1 e0 08             	shl    eax,0x8
c000d56d:	89 c2                	mov    edx,eax
c000d56f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d574:	09 d0                	or     eax,edx
c000d576:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d57b:	c1 e0 08             	shl    eax,0x8
c000d57e:	09 d0                	or     eax,edx
c000d580:	74 25                	je     c000d5a7 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d582:	6b fb 0d             	imul   edi,ebx,0xd
c000d585:	52                   	push   edx
c000d586:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d58a:	52                   	push   edx
c000d58b:	50                   	push   eax
c000d58c:	55                   	push   ebp
c000d58d:	e8 72 ff ff ff       	call   c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d592:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d596:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d59d:	b9 27 00 00 00       	mov    ecx,0x27
c000d5a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5a4:	83 c4 10             	add    esp,0x10
c000d5a7:	83 c3 03             	add    ebx,0x3
c000d5aa:	83 fb 15             	cmp    ebx,0x15
c000d5ad:	75 b6                	jne    c000d565 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d5af:	83 c4 6c             	add    esp,0x6c
c000d5b2:	5b                   	pop    ebx
c000d5b3:	5e                   	pop    esi
c000d5b4:	5f                   	pop    edi
c000d5b5:	5d                   	pop    ebp
c000d5b6:	c3                   	ret    

c000d5b7 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d5b7:	83 ec 40             	sub    esp,0x40
c000d5ba:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d5be:	50                   	push   eax
c000d5bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5c7:	e8 38 ff ff ff       	call   c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5cc:	83 c4 10             	add    esp,0x10
c000d5cf:	83 c8 ff             	or     eax,0xffffffff
c000d5d2:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d5d7:	75 19                	jne    c000d5f2 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d5d9:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d5de:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d5e3:	c1 e0 08             	shl    eax,0x8
c000d5e6:	09 c2                	or     edx,eax
c000d5e8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d5ed:	c1 e0 10             	shl    eax,0x10
c000d5f0:	09 d0                	or     eax,edx
c000d5f2:	83 c4 3c             	add    esp,0x3c
c000d5f5:	c3                   	ret    

c000d5f6 <CmGetNext(Reghive_Tag*, int)>:
c000d5f6:	83 ec 40             	sub    esp,0x40
c000d5f9:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d5fd:	50                   	push   eax
c000d5fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d602:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d606:	e8 f9 fe ff ff       	call   c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d60b:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d610:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d615:	c1 e0 08             	shl    eax,0x8
c000d618:	09 c2                	or     edx,eax
c000d61a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d61f:	83 c4 4c             	add    esp,0x4c
c000d622:	c1 e0 10             	shl    eax,0x10
c000d625:	09 d0                	or     eax,edx
c000d627:	c3                   	ret    

c000d628 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d628:	53                   	push   ebx
c000d629:	83 ec 18             	sub    esp,0x18
c000d62c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d630:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d634:	74 29                	je     c000d65f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d636:	50                   	push   eax
c000d637:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d63c:	99                   	cdq    
c000d63d:	52                   	push   edx
c000d63e:	50                   	push   eax
c000d63f:	ff 33                	push   DWORD PTR [ebx]
c000d641:	e8 20 ac ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d646:	5a                   	pop    edx
c000d647:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d649:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d64d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d64f:	51                   	push   ecx
c000d650:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d654:	6a 00                	push   0x0
c000d656:	6a 2b                	push   0x2b
c000d658:	50                   	push   eax
c000d659:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d65c:	83 c4 20             	add    esp,0x20
c000d65f:	83 c4 18             	add    esp,0x18
c000d662:	5b                   	pop    ebx
c000d663:	c3                   	ret    

c000d664 <CmFreeExtent(Reghive_Tag*, int)>:
c000d664:	53                   	push   ebx
c000d665:	83 ec 3c             	sub    esp,0x3c
c000d668:	6a 2b                	push   0x2b
c000d66a:	6a 00                	push   0x0
c000d66c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d670:	53                   	push   ebx
c000d671:	e8 7a 2e ff ff       	call   c00004f0 <memset>
c000d676:	83 c4 0c             	add    esp,0xc
c000d679:	53                   	push   ebx
c000d67a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d67e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d682:	e8 a1 ff ff ff       	call   c000d628 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d687:	83 c4 48             	add    esp,0x48
c000d68a:	5b                   	pop    ebx
c000d68b:	c3                   	ret    

c000d68c <CmUpdateHeader(Reghive_Tag*)>:
c000d68c:	83 ec 0c             	sub    esp,0xc
c000d68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d693:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d697:	74 10                	je     c000d6a9 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d699:	52                   	push   edx
c000d69a:	8d 50 05             	lea    edx,[eax+0x5]
c000d69d:	52                   	push   edx
c000d69e:	6a 00                	push   0x0
c000d6a0:	50                   	push   eax
c000d6a1:	e8 82 ff ff ff       	call   c000d628 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	83 c4 0c             	add    esp,0xc
c000d6ac:	c3                   	ret    

c000d6ad <CmExpand(Reghive_Tag*, int)>:
c000d6ad:	57                   	push   edi
c000d6ae:	56                   	push   esi
c000d6af:	83 ce ff             	or     esi,0xffffffff
c000d6b2:	53                   	push   ebx
c000d6b3:	83 ec 30             	sub    esp,0x30
c000d6b6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d6ba:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d6be:	74 5f                	je     c000d71f <CmExpand(Reghive_Tag*, int)+0x72>
c000d6c0:	31 d2                	xor    edx,edx
c000d6c2:	31 f6                	xor    esi,esi
c000d6c4:	50                   	push   eax
c000d6c5:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d6c9:	52                   	push   edx
c000d6ca:	50                   	push   eax
c000d6cb:	ff 33                	push   DWORD PTR [ebx]
c000d6cd:	e8 94 ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d6d2:	83 c4 0c             	add    esp,0xc
c000d6d5:	6a 2b                	push   0x2b
c000d6d7:	6a 00                	push   0x0
c000d6d9:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d6dd:	57                   	push   edi
c000d6de:	e8 0d 2e ff ff       	call   c00004f0 <memset>
c000d6e3:	83 c4 10             	add    esp,0x10
c000d6e6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d6ea:	7d 1b                	jge    c000d707 <CmExpand(Reghive_Tag*, int)+0x5a>
c000d6ec:	83 ec 0c             	sub    esp,0xc
c000d6ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6f1:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d6f5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6f7:	46                   	inc    esi
c000d6f8:	51                   	push   ecx
c000d6f9:	57                   	push   edi
c000d6fa:	6a 00                	push   0x0
c000d6fc:	6a 2b                	push   0x2b
c000d6fe:	50                   	push   eax
c000d6ff:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d702:	83 c4 20             	add    esp,0x20
c000d705:	eb df                	jmp    c000d6e6 <CmExpand(Reghive_Tag*, int)+0x39>
c000d707:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d70b:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	01 f2                	add    edx,esi
c000d713:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d716:	53                   	push   ebx
c000d717:	e8 70 ff ff ff       	call   c000d68c <CmUpdateHeader(Reghive_Tag*)>
c000d71c:	83 c4 10             	add    esp,0x10
c000d71f:	83 c4 30             	add    esp,0x30
c000d722:	89 f0                	mov    eax,esi
c000d724:	5b                   	pop    ebx
c000d725:	5e                   	pop    esi
c000d726:	5f                   	pop    edi
c000d727:	c3                   	ret    

c000d728 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d728:	55                   	push   ebp
c000d729:	57                   	push   edi
c000d72a:	56                   	push   esi
c000d72b:	53                   	push   ebx
c000d72c:	83 cb ff             	or     ebx,0xffffffff
c000d72f:	83 ec 1c             	sub    esp,0x1c
c000d732:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d736:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d73a:	74 68                	je     c000d7a4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d73c:	be 2b 00 00 00       	mov    esi,0x2b
c000d741:	51                   	push   ecx
c000d742:	31 ff                	xor    edi,edi
c000d744:	6a 00                	push   0x0
c000d746:	31 db                	xor    ebx,ebx
c000d748:	6a 00                	push   0x0
c000d74a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d74d:	e8 14 ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d752:	83 c4 10             	add    esp,0x10
c000d755:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d758:	76 3b                	jbe    c000d795 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d75a:	83 ec 0c             	sub    esp,0xc
c000d75d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d760:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d764:	8b 10                	mov    edx,DWORD PTR [eax]
c000d766:	51                   	push   ecx
c000d767:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d76b:	51                   	push   ecx
c000d76c:	6a 00                	push   0x0
c000d76e:	6a 01                	push   0x1
c000d770:	50                   	push   eax
c000d771:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d774:	83 c4 20             	add    esp,0x20
c000d777:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d77c:	74 26                	je     c000d7a4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d77e:	43                   	inc    ebx
c000d77f:	52                   	push   edx
c000d780:	57                   	push   edi
c000d781:	56                   	push   esi
c000d782:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d785:	e8 dc aa ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d78a:	83 c6 2b             	add    esi,0x2b
c000d78d:	83 d7 00             	adc    edi,0x0
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	eb c0                	jmp    c000d755 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d795:	50                   	push   eax
c000d796:	50                   	push   eax
c000d797:	6a 40                	push   0x40
c000d799:	55                   	push   ebp
c000d79a:	e8 0e ff ff ff       	call   c000d6ad <CmExpand(Reghive_Tag*, int)>
c000d79f:	83 c4 10             	add    esp,0x10
c000d7a2:	89 c3                	mov    ebx,eax
c000d7a4:	83 c4 1c             	add    esp,0x1c
c000d7a7:	89 d8                	mov    eax,ebx
c000d7a9:	5b                   	pop    ebx
c000d7aa:	5e                   	pop    esi
c000d7ab:	5f                   	pop    edi
c000d7ac:	5d                   	pop    ebp
c000d7ad:	c3                   	ret    

c000d7ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d7ae:	55                   	push   ebp
c000d7af:	57                   	push   edi
c000d7b0:	56                   	push   esi
c000d7b1:	53                   	push   ebx
c000d7b2:	81 ec 88 00 00 00    	sub    esp,0x88
c000d7b8:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d7bf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7c6:	e8 5d ff ff ff       	call   c000d728 <CmFindUnusedExtent(Reghive_Tag*)>
c000d7cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d7cf:	83 c4 0c             	add    esp,0xc
c000d7d2:	6a 2b                	push   0x2b
c000d7d4:	6a 00                	push   0x0
c000d7d6:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d7da:	55                   	push   ebp
c000d7db:	e8 10 2d ff ff       	call   c00004f0 <memset>
c000d7e0:	83 c4 10             	add    esp,0x10
c000d7e3:	85 db                	test   ebx,ebx
c000d7e5:	74 12                	je     c000d7f9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d7e7:	51                   	push   ecx
c000d7e8:	55                   	push   ebp
c000d7e9:	53                   	push   ebx
c000d7ea:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7f1:	e8 0e fd ff ff       	call   c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d7f6:	83 c4 10             	add    esp,0x10
c000d7f9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d7fd:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d804:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d809:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d80b:	85 db                	test   ebx,ebx
c000d80d:	74 49                	je     c000d858 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d80f:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d814:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d819:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d81d:	c1 e0 08             	shl    eax,0x8
c000d820:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d826:	09 c8                	or     eax,ecx
c000d828:	74 11                	je     c000d83b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d82a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d82e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d832:	c1 e8 10             	shr    eax,0x10
c000d835:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d839:	eb 0f                	jmp    c000d84a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d83b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d840:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d845:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d84a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d84e:	c1 ea 08             	shr    edx,0x8
c000d851:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d856:	eb 0f                	jmp    c000d867 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d858:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d85d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d862:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d867:	52                   	push   edx
c000d868:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d86c:	50                   	push   eax
c000d86d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d871:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d878:	e8 ab fd ff ff       	call   c000d628 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d87d:	83 c4 10             	add    esp,0x10
c000d880:	85 db                	test   ebx,ebx
c000d882:	74 12                	je     c000d896 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d884:	50                   	push   eax
c000d885:	55                   	push   ebp
c000d886:	53                   	push   ebx
c000d887:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d88e:	e8 95 fd ff ff       	call   c000d628 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d893:	83 c4 10             	add    esp,0x10
c000d896:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d89a:	83 c4 7c             	add    esp,0x7c
c000d89d:	5b                   	pop    ebx
c000d89e:	5e                   	pop    esi
c000d89f:	5f                   	pop    edi
c000d8a0:	5d                   	pop    ebp
c000d8a1:	c3                   	ret    

c000d8a2 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d8a2:	55                   	push   ebp
c000d8a3:	57                   	push   edi
c000d8a4:	56                   	push   esi
c000d8a5:	53                   	push   ebx
c000d8a6:	bb 27 00 00 00       	mov    ebx,0x27
c000d8ab:	81 ec 88 00 00 00    	sub    esp,0x88
c000d8b1:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d8b8:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d8bf:	e8 ac 2c ff ff       	call   c0000570 <strlen>
c000d8c4:	8d 48 26             	lea    ecx,[eax+0x26]
c000d8c7:	89 c8                	mov    eax,ecx
c000d8c9:	99                   	cdq    
c000d8ca:	f7 fb                	idiv   ebx
c000d8cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d8d0:	83 c4 10             	add    esp,0x10
c000d8d3:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d8d9:	7e 10                	jle    c000d8eb <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d8db:	83 ec 0c             	sub    esp,0xc
c000d8de:	68 8b 7b 02 c0       	push   0xc0027b8b
c000d8e3:	e8 d0 23 00 00       	call   c000fcb8 <KePanic(char const*)>
c000d8e8:	83 c4 10             	add    esp,0x10
c000d8eb:	31 ff                	xor    edi,edi
c000d8ed:	50                   	push   eax
c000d8ee:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d8f2:	53                   	push   ebx
c000d8f3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8fa:	56                   	push   esi
c000d8fb:	e8 04 fc ff ff       	call   c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d900:	83 c4 10             	add    esp,0x10
c000d903:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d907:	89 d0                	mov    eax,edx
c000d909:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d90d:	c1 e0 08             	shl    eax,0x8
c000d910:	09 c2                	or     edx,eax
c000d912:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d916:	c1 e2 08             	shl    edx,0x8
c000d919:	09 c2                	or     edx,eax
c000d91b:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d91f:	7e 76                	jle    c000d997 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d921:	85 d2                	test   edx,edx
c000d923:	75 25                	jne    c000d94a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d925:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d92a:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d92e:	50                   	push   eax
c000d92f:	6a 00                	push   0x0
c000d931:	6a 00                	push   0x0
c000d933:	56                   	push   esi
c000d934:	e8 75 fe ff ff       	call   c000d7ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d939:	83 c4 10             	add    esp,0x10
c000d93c:	89 c2                	mov    edx,eax
c000d93e:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d941:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d944:	c1 f8 10             	sar    eax,0x10
c000d947:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d94a:	55                   	push   ebp
c000d94b:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d94f:	55                   	push   ebp
c000d950:	52                   	push   edx
c000d951:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d955:	56                   	push   esi
c000d956:	e8 a9 fb ff ff       	call   c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d95b:	83 c4 0c             	add    esp,0xc
c000d95e:	6a 27                	push   0x27
c000d960:	6a 00                	push   0x0
c000d962:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d966:	51                   	push   ecx
c000d967:	e8 84 2b ff ff       	call   c00004f0 <memset>
c000d96c:	83 c4 0c             	add    esp,0xc
c000d96f:	6b c7 27             	imul   eax,edi,0x27
c000d972:	6a 27                	push   0x27
c000d974:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d97b:	50                   	push   eax
c000d97c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d980:	51                   	push   ecx
c000d981:	e8 fa 2c ff ff       	call   c0000680 <strncpy>
c000d986:	83 c4 0c             	add    esp,0xc
c000d989:	55                   	push   ebp
c000d98a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d98e:	52                   	push   edx
c000d98f:	56                   	push   esi
c000d990:	e8 93 fc ff ff       	call   c000d628 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d995:	eb 19                	jmp    c000d9b0 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000d997:	85 d2                	test   edx,edx
c000d999:	74 18                	je     c000d9b3 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000d99b:	51                   	push   ecx
c000d99c:	51                   	push   ecx
c000d99d:	52                   	push   edx
c000d99e:	56                   	push   esi
c000d99f:	e8 c0 fc ff ff       	call   c000d664 <CmFreeExtent(Reghive_Tag*, int)>
c000d9a4:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d9a8:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d9ac:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d9b0:	83 c4 10             	add    esp,0x10
c000d9b3:	47                   	inc    edi
c000d9b4:	83 c3 03             	add    ebx,0x3
c000d9b7:	83 ff 07             	cmp    edi,0x7
c000d9ba:	0f 85 43 ff ff ff    	jne    c000d903 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d9c0:	50                   	push   eax
c000d9c1:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d9c5:	50                   	push   eax
c000d9c6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d9cd:	56                   	push   esi
c000d9ce:	e8 55 fc ff ff       	call   c000d628 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d9d3:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d9d9:	5b                   	pop    ebx
c000d9da:	5e                   	pop    esi
c000d9db:	5f                   	pop    edi
c000d9dc:	5d                   	pop    ebp
c000d9dd:	c3                   	ret    

c000d9de <CmGetMatch(char*, char*, bool, bool*)>:
c000d9de:	56                   	push   esi
c000d9df:	53                   	push   ebx
c000d9e0:	50                   	push   eax
c000d9e1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d9e5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d9ea:	74 25                	je     c000da11 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d9ec:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d9ef:	31 db                	xor    ebx,ebx
c000d9f1:	50                   	push   eax
c000d9f2:	50                   	push   eax
c000d9f3:	8d 04 9d 20 ae 02 c0 	lea    eax,[ebx*4-0x3ffd51e0]
c000d9fa:	50                   	push   eax
c000d9fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ff:	e8 4c 2d ff ff       	call   c0000750 <strcmp>
c000da04:	83 c4 10             	add    esp,0x10
c000da07:	85 c0                	test   eax,eax
c000da09:	74 2e                	je     c000da39 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da0b:	43                   	inc    ebx
c000da0c:	83 fb 3f             	cmp    ebx,0x3f
c000da0f:	75 e0                	jne    c000d9f1 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000da11:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da14:	31 db                	xor    ebx,ebx
c000da16:	8d 04 9d 20 ae 02 c0 	lea    eax,[ebx*4-0x3ffd51e0]
c000da1d:	51                   	push   ecx
c000da1e:	51                   	push   ecx
c000da1f:	50                   	push   eax
c000da20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da24:	e8 27 2d ff ff       	call   c0000750 <strcmp>
c000da29:	83 c4 10             	add    esp,0x10
c000da2c:	85 c0                	test   eax,eax
c000da2e:	74 09                	je     c000da39 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da30:	43                   	inc    ebx
c000da31:	83 fb 3f             	cmp    ebx,0x3f
c000da34:	75 e0                	jne    c000da16 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000da36:	83 cb ff             	or     ebx,0xffffffff
c000da39:	89 d8                	mov    eax,ebx
c000da3b:	5a                   	pop    edx
c000da3c:	5b                   	pop    ebx
c000da3d:	5e                   	pop    esi
c000da3e:	c3                   	ret    

c000da3f <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000da3f:	55                   	push   ebp
c000da40:	31 c0                	xor    eax,eax
c000da42:	57                   	push   edi
c000da43:	56                   	push   esi
c000da44:	53                   	push   ebx
c000da45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da49:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da4d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000da4f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000da53:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	83 fd 1f             	cmp    ebp,0x1f
c000da5d:	7f 0b                	jg     c000da6a <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000da5f:	0f b6 c2             	movzx  eax,dl
c000da62:	d3 e0                	shl    eax,cl
c000da64:	09 07                	or     DWORD PTR [edi],eax
c000da66:	b0 01                	mov    al,0x1
c000da68:	01 33                	add    DWORD PTR [ebx],esi
c000da6a:	5b                   	pop    ebx
c000da6b:	5e                   	pop    esi
c000da6c:	5f                   	pop    edi
c000da6d:	5d                   	pop    ebp
c000da6e:	c3                   	ret    

c000da6f <CmGetShift(unsigned int*, int*, int, bool*)>:
c000da6f:	57                   	push   edi
c000da70:	56                   	push   esi
c000da71:	53                   	push   ebx
c000da72:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000da76:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000da82:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000da84:	7c 17                	jl     c000da9d <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000da86:	8b 17                	mov    edx,DWORD PTR [edi]
c000da88:	b8 01 00 00 00       	mov    eax,0x1
c000da8d:	d3 e0                	shl    eax,cl
c000da8f:	48                   	dec    eax
c000da90:	21 d0                	and    eax,edx
c000da92:	d3 ea                	shr    edx,cl
c000da94:	89 17                	mov    DWORD PTR [edi],edx
c000da96:	29 0b                	sub    DWORD PTR [ebx],ecx
c000da98:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da9b:	eb 05                	jmp    c000daa2 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000da9d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000daa0:	31 c0                	xor    eax,eax
c000daa2:	5b                   	pop    ebx
c000daa3:	5e                   	pop    esi
c000daa4:	5f                   	pop    edi
c000daa5:	c3                   	ret    

c000daa6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000daa6:	83 ec 40             	sub    esp,0x40
c000daa9:	8d 44 24 09          	lea    eax,[esp+0x9]
c000daad:	50                   	push   eax
c000daae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dab2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dab6:	e8 49 fa ff ff       	call   c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dabb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dabf:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000dac3:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000dac7:	89 10                	mov    DWORD PTR [eax],edx
c000dac9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000dacc:	83 c4 4c             	add    esp,0x4c
c000dacf:	c3                   	ret    

c000dad0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000dad0:	55                   	push   ebp
c000dad1:	57                   	push   edi
c000dad2:	56                   	push   esi
c000dad3:	53                   	push   ebx
c000dad4:	83 ec 40             	sub    esp,0x40
c000dad7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000dadb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000dadf:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000dae3:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000dae7:	53                   	push   ebx
c000dae8:	56                   	push   esi
c000dae9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000daed:	e8 12 fa ff ff       	call   c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000daf2:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000daf6:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000dafa:	83 c4 0c             	add    esp,0xc
c000dafd:	53                   	push   ebx
c000dafe:	56                   	push   esi
c000daff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000db03:	e8 20 fb ff ff       	call   c000d628 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000db08:	83 c4 4c             	add    esp,0x4c
c000db0b:	5b                   	pop    ebx
c000db0c:	5e                   	pop    esi
c000db0d:	5f                   	pop    edi
c000db0e:	5d                   	pop    ebp
c000db0f:	c3                   	ret    

c000db10 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000db10:	55                   	push   ebp
c000db11:	57                   	push   edi
c000db12:	56                   	push   esi
c000db13:	31 f6                	xor    esi,esi
c000db15:	53                   	push   ebx
c000db16:	31 db                	xor    ebx,ebx
c000db18:	83 ec 40             	sub    esp,0x40
c000db1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000db23:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000db2b:	6a 12                	push   0x12
c000db2d:	68 ee 00 00 00       	push   0xee
c000db32:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db36:	e8 b5 29 ff ff       	call   c00004f0 <memset>
c000db3b:	83 c4 10             	add    esp,0x10
c000db3e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000db42:	6a 08                	push   0x8
c000db44:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000db48:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000db4c:	50                   	push   eax
c000db4d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000db51:	55                   	push   ebp
c000db52:	57                   	push   edi
c000db53:	e8 e7 fe ff ff       	call   c000da3f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000db58:	83 c4 10             	add    esp,0x10
c000db5b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db5f:	50                   	push   eax
c000db60:	6a 06                	push   0x6
c000db62:	55                   	push   ebp
c000db63:	57                   	push   edi
c000db64:	e8 06 ff ff ff       	call   c000da6f <CmGetShift(unsigned int*, int*, int, bool*)>
c000db69:	83 c4 10             	add    esp,0x10
c000db6c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000db71:	74 07                	je     c000db7a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000db73:	46                   	inc    esi
c000db74:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000db78:	eb e1                	jmp    c000db5b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000db7a:	43                   	inc    ebx
c000db7b:	83 fb 12             	cmp    ebx,0x12
c000db7e:	75 c2                	jne    c000db42 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000db80:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000db84:	31 db                	xor    ebx,ebx
c000db86:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000db89:	50                   	push   eax
c000db8a:	50                   	push   eax
c000db8b:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000db90:	43                   	inc    ebx
c000db91:	8d 04 85 20 ae 02 c0 	lea    eax,[eax*4-0x3ffd51e0]
c000db98:	50                   	push   eax
c000db99:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db9d:	e8 9e 2c ff ff       	call   c0000840 <strcat>
c000dba2:	83 c4 10             	add    esp,0x10
c000dba5:	83 fb 18             	cmp    ebx,0x18
c000dba8:	75 df                	jne    c000db89 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000dbaa:	83 c4 3c             	add    esp,0x3c
c000dbad:	31 c0                	xor    eax,eax
c000dbaf:	5b                   	pop    ebx
c000dbb0:	5e                   	pop    esi
c000dbb1:	5f                   	pop    edi
c000dbb2:	5d                   	pop    ebp
c000dbb3:	c3                   	ret    

c000dbb4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000dbb4:	83 ec 40             	sub    esp,0x40
c000dbb7:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dbbb:	50                   	push   eax
c000dbbc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dbc0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dbc4:	e8 3b f9 ff ff       	call   c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dbc9:	58                   	pop    eax
c000dbca:	5a                   	pop    edx
c000dbcb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dbcf:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dbd3:	50                   	push   eax
c000dbd4:	e8 37 ff ff ff       	call   c000db10 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dbd9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dbde:	83 c4 4c             	add    esp,0x4c
c000dbe1:	c3                   	ret    

c000dbe2 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dbe2:	55                   	push   ebp
c000dbe3:	57                   	push   edi
c000dbe4:	56                   	push   esi
c000dbe5:	53                   	push   ebx
c000dbe6:	31 db                	xor    ebx,ebx
c000dbe8:	83 ec 70             	sub    esp,0x70
c000dbeb:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dbf2:	6a 30                	push   0x30
c000dbf4:	6a 00                	push   0x0
c000dbf6:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dbfa:	56                   	push   esi
c000dbfb:	e8 f0 28 ff ff       	call   c00004f0 <memset>
c000dc00:	83 c4 10             	add    esp,0x10
c000dc03:	83 ec 0c             	sub    esp,0xc
c000dc06:	57                   	push   edi
c000dc07:	e8 64 29 ff ff       	call   c0000570 <strlen>
c000dc0c:	83 c4 10             	add    esp,0x10
c000dc0f:	39 d8                	cmp    eax,ebx
c000dc11:	76 16                	jbe    c000dc29 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dc13:	83 ec 0c             	sub    esp,0xc
c000dc16:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dc1a:	50                   	push   eax
c000dc1b:	e8 10 2d ff ff       	call   c0000930 <toupper>
c000dc20:	83 c4 10             	add    esp,0x10
c000dc23:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000dc26:	43                   	inc    ebx
c000dc27:	eb da                	jmp    c000dc03 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000dc29:	31 f6                	xor    esi,esi
c000dc2b:	52                   	push   edx
c000dc2c:	31 ff                	xor    edi,edi
c000dc2e:	6a 18                	push   0x18
c000dc30:	6a 3f                	push   0x3f
c000dc32:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dc36:	50                   	push   eax
c000dc37:	e8 b4 28 ff ff       	call   c00004f0 <memset>
c000dc3c:	83 c4 10             	add    esp,0x10
c000dc3f:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000dc43:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000dc47:	84 c0                	test   al,al
c000dc49:	0f 84 b0 00 00 00    	je     c000dcff <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dc4f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dc53:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000dc58:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000dc5c:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000dc61:	8d 6e 01             	lea    ebp,[esi+0x1]
c000dc64:	83 ec 0c             	sub    esp,0xc
c000dc67:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dc6b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dc6f:	53                   	push   ebx
c000dc70:	e8 fb 28 ff ff       	call   c0000570 <strlen>
c000dc75:	83 c4 10             	add    esp,0x10
c000dc78:	85 c0                	test   eax,eax
c000dc7a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc7e:	74 0b                	je     c000dc8b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dc80:	50                   	push   eax
c000dc81:	6a 01                	push   0x1
c000dc83:	53                   	push   ebx
c000dc84:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dc88:	50                   	push   eax
c000dc89:	eb 0a                	jmp    c000dc95 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dc8b:	50                   	push   eax
c000dc8c:	6a 00                	push   0x0
c000dc8e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dc92:	50                   	push   eax
c000dc93:	6a 00                	push   0x0
c000dc95:	e8 44 fd ff ff       	call   c000d9de <CmGetMatch(char*, char*, bool, bool*)>
c000dc9a:	83 c4 10             	add    esp,0x10
c000dc9d:	83 f8 ff             	cmp    eax,0xffffffff
c000dca0:	75 1a                	jne    c000dcbc <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dca2:	83 ec 0c             	sub    esp,0xc
c000dca5:	68 a0 7b 02 c0       	push   0xc0027ba0
c000dcaa:	e8 09 20 00 00       	call   c000fcb8 <KePanic(char const*)>
c000dcaf:	83 c4 10             	add    esp,0x10
c000dcb2:	b8 02 00 00 00       	mov    eax,0x2
c000dcb7:	e9 bc 00 00 00       	jmp    c000dd78 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dcbc:	83 ff 18             	cmp    edi,0x18
c000dcbf:	75 1a                	jne    c000dcdb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dcc1:	83 ec 0c             	sub    esp,0xc
c000dcc4:	68 b5 7b 02 c0       	push   0xc0027bb5
c000dcc9:	e8 ea 1f 00 00       	call   c000fcb8 <KePanic(char const*)>
c000dcce:	83 c4 10             	add    esp,0x10
c000dcd1:	b8 01 00 00 00       	mov    eax,0x1
c000dcd6:	e9 9d 00 00 00       	jmp    c000dd78 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dcdb:	47                   	inc    edi
c000dcdc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dce1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dce5:	74 02                	je     c000dce9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dce7:	89 ee                	mov    esi,ebp
c000dce9:	83 ec 0c             	sub    esp,0xc
c000dcec:	53                   	push   ebx
c000dced:	e8 7e 28 ff ff       	call   c0000570 <strlen>
c000dcf2:	83 c4 10             	add    esp,0x10
c000dcf5:	85 c0                	test   eax,eax
c000dcf7:	74 06                	je     c000dcff <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dcf9:	46                   	inc    esi
c000dcfa:	e9 40 ff ff ff       	jmp    c000dc3f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dcff:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dd07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dd0f:	31 f6                	xor    esi,esi
c000dd11:	50                   	push   eax
c000dd12:	31 ff                	xor    edi,edi
c000dd14:	6a 12                	push   0x12
c000dd16:	68 ee 00 00 00       	push   0xee
c000dd1b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dd22:	e8 c9 27 ff ff       	call   c00004f0 <memset>
c000dd27:	83 c4 10             	add    esp,0x10
c000dd2a:	83 fe 17             	cmp    esi,0x17
c000dd2d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dd31:	7e 26                	jle    c000dd59 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dd33:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dd37:	50                   	push   eax
c000dd38:	6a 08                	push   0x8
c000dd3a:	55                   	push   ebp
c000dd3b:	53                   	push   ebx
c000dd3c:	e8 2e fd ff ff       	call   c000da6f <CmGetShift(unsigned int*, int*, int, bool*)>
c000dd41:	83 c4 10             	add    esp,0x10
c000dd44:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dd49:	74 26                	je     c000dd71 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000dd4b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dd52:	4e                   	dec    esi
c000dd53:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dd56:	47                   	inc    edi
c000dd57:	eb 1c                	jmp    c000dd75 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dd59:	6a 06                	push   0x6
c000dd5b:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000dd60:	50                   	push   eax
c000dd61:	55                   	push   ebp
c000dd62:	53                   	push   ebx
c000dd63:	e8 d7 fc ff ff       	call   c000da3f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dd68:	83 c4 10             	add    esp,0x10
c000dd6b:	84 c0                	test   al,al
c000dd6d:	75 06                	jne    c000dd75 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dd6f:	eb c2                	jmp    c000dd33 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dd71:	31 c0                	xor    eax,eax
c000dd73:	eb 03                	jmp    c000dd78 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd75:	46                   	inc    esi
c000dd76:	eb b2                	jmp    c000dd2a <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000dd78:	83 c4 6c             	add    esp,0x6c
c000dd7b:	5b                   	pop    ebx
c000dd7c:	5e                   	pop    esi
c000dd7d:	5f                   	pop    edi
c000dd7e:	5d                   	pop    ebp
c000dd7f:	c3                   	ret    

c000dd80 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dd80:	53                   	push   ebx
c000dd81:	83 ec 3c             	sub    esp,0x3c
c000dd84:	6a 2b                	push   0x2b
c000dd86:	6a 00                	push   0x0
c000dd88:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd8c:	53                   	push   ebx
c000dd8d:	e8 5e 27 ff ff       	call   c00004f0 <memset>
c000dd92:	58                   	pop    eax
c000dd93:	5a                   	pop    edx
c000dd94:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd98:	50                   	push   eax
c000dd99:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd9d:	e8 40 fe ff ff       	call   c000dbe2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dda2:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dda7:	83 c4 0c             	add    esp,0xc
c000ddaa:	6a 15                	push   0x15
c000ddac:	6a 00                	push   0x0
c000ddae:	8d 44 24 27          	lea    eax,[esp+0x27]
c000ddb2:	50                   	push   eax
c000ddb3:	e8 38 27 ff ff       	call   c00004f0 <memset>
c000ddb8:	53                   	push   ebx
c000ddb9:	6a 00                	push   0x0
c000ddbb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddbf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddc3:	e8 e6 f9 ff ff       	call   c000d7ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ddc8:	83 c4 58             	add    esp,0x58
c000ddcb:	5b                   	pop    ebx
c000ddcc:	c3                   	ret    

c000ddcd <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000ddcd:	56                   	push   esi
c000ddce:	53                   	push   ebx
c000ddcf:	83 ec 48             	sub    esp,0x48
c000ddd2:	6a 12                	push   0x12
c000ddd4:	68 ff 00 00 00       	push   0xff
c000ddd9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dddd:	56                   	push   esi
c000ddde:	e8 0d 27 ff ff       	call   c00004f0 <memset>
c000dde3:	5a                   	pop    edx
c000dde4:	59                   	pop    ecx
c000dde5:	56                   	push   esi
c000dde6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ddea:	e8 f3 fd ff ff       	call   c000dbe2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ddef:	83 c4 10             	add    esp,0x10
c000ddf2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000ddf6:	85 db                	test   ebx,ebx
c000ddf8:	74 42                	je     c000de3c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000ddfa:	50                   	push   eax
c000ddfb:	8d 44 24 19          	lea    eax,[esp+0x19]
c000ddff:	50                   	push   eax
c000de00:	53                   	push   ebx
c000de01:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de05:	e8 fa f6 ff ff       	call   c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de0a:	83 c4 0c             	add    esp,0xc
c000de0d:	6a 12                	push   0x12
c000de0f:	8d 44 24 21          	lea    eax,[esp+0x21]
c000de13:	50                   	push   eax
c000de14:	56                   	push   esi
c000de15:	e8 66 25 ff ff       	call   c0000380 <memcmp>
c000de1a:	83 c4 10             	add    esp,0x10
c000de1d:	85 c0                	test   eax,eax
c000de1f:	74 1e                	je     c000de3f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000de21:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000de26:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000de2b:	c1 e3 08             	shl    ebx,0x8
c000de2e:	09 d8                	or     eax,ebx
c000de30:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000de35:	c1 e3 10             	shl    ebx,0x10
c000de38:	09 c3                	or     ebx,eax
c000de3a:	eb ba                	jmp    c000ddf6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000de3c:	83 cb ff             	or     ebx,0xffffffff
c000de3f:	89 d8                	mov    eax,ebx
c000de41:	83 c4 44             	add    esp,0x44
c000de44:	5b                   	pop    ebx
c000de45:	5e                   	pop    esi
c000de46:	c3                   	ret    

c000de47 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000de47:	57                   	push   edi
c000de48:	56                   	push   esi
c000de49:	53                   	push   ebx
c000de4a:	83 ec 34             	sub    esp,0x34
c000de4d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000de51:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000de55:	6a 2b                	push   0x2b
c000de57:	6a 00                	push   0x0
c000de59:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000de5d:	53                   	push   ebx
c000de5e:	e8 8d 26 ff ff       	call   c00004f0 <memset>
c000de63:	58                   	pop    eax
c000de64:	5a                   	pop    edx
c000de65:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de69:	50                   	push   eax
c000de6a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de6e:	e8 6f fd ff ff       	call   c000dbe2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de73:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000de77:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000de7b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000de7f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000de83:	53                   	push   ebx
c000de84:	6a 00                	push   0x0
c000de86:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de8a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de8e:	e8 1b f9 ff ff       	call   c000d7ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de93:	83 c4 50             	add    esp,0x50
c000de96:	5b                   	pop    ebx
c000de97:	5e                   	pop    esi
c000de98:	5f                   	pop    edi
c000de99:	c3                   	ret    

c000de9a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000de9a:	55                   	push   ebp
c000de9b:	57                   	push   edi
c000de9c:	56                   	push   esi
c000de9d:	53                   	push   ebx
c000de9e:	83 ec 40             	sub    esp,0x40
c000dea1:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000dea5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dea9:	6a 2b                	push   0x2b
c000deab:	6a 00                	push   0x0
c000dead:	8d 74 24 11          	lea    esi,[esp+0x11]
c000deb1:	56                   	push   esi
c000deb2:	e8 39 26 ff ff       	call   c00004f0 <memset>
c000deb7:	5f                   	pop    edi
c000deb8:	89 ef                	mov    edi,ebp
c000deba:	58                   	pop    eax
c000debb:	8d 44 24 11          	lea    eax,[esp+0x11]
c000debf:	50                   	push   eax
c000dec0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dec4:	e8 19 fd ff ff       	call   c000dbe2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dec9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000dece:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ded3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000ded8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000dedd:	83 c4 10             	add    esp,0x10
c000dee0:	85 ed                	test   ebp,ebp
c000dee2:	74 14                	je     c000def8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000dee4:	51                   	push   ecx
c000dee5:	51                   	push   ecx
c000dee6:	57                   	push   edi
c000dee7:	53                   	push   ebx
c000dee8:	e8 09 f7 ff ff       	call   c000d5f6 <CmGetNext(Reghive_Tag*, int)>
c000deed:	83 c4 10             	add    esp,0x10
c000def0:	85 c0                	test   eax,eax
c000def2:	74 04                	je     c000def8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000def4:	89 c7                	mov    edi,eax
c000def6:	eb e8                	jmp    c000dee0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000def8:	56                   	push   esi
c000def9:	6a 00                	push   0x0
c000defb:	57                   	push   edi
c000defc:	53                   	push   ebx
c000defd:	e8 ac f8 ff ff       	call   c000d7ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000df02:	83 c4 0c             	add    esp,0xc
c000df05:	89 c7                	mov    edi,eax
c000df07:	56                   	push   esi
c000df08:	50                   	push   eax
c000df09:	53                   	push   ebx
c000df0a:	e8 f5 f5 ff ff       	call   c000d504 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000df0f:	58                   	pop    eax
c000df10:	5a                   	pop    edx
c000df11:	6a 6c                	push   0x6c
c000df13:	6a 00                	push   0x0
c000df15:	6a 00                	push   0x0
c000df17:	68 c6 7b 02 c0       	push   0xc0027bc6
c000df1c:	57                   	push   edi
c000df1d:	53                   	push   ebx
c000df1e:	e8 24 ff ff ff       	call   c000de47 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000df23:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000df27:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000df2b:	c1 e8 10             	shr    eax,0x10
c000df2e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000df32:	83 c4 1c             	add    esp,0x1c
c000df35:	56                   	push   esi
c000df36:	57                   	push   edi
c000df37:	53                   	push   ebx
c000df38:	e8 eb f6 ff ff       	call   c000d628 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000df3d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000df42:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000df47:	c1 e0 08             	shl    eax,0x8
c000df4a:	09 c2                	or     edx,eax
c000df4c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000df51:	83 c4 4c             	add    esp,0x4c
c000df54:	c1 e0 10             	shl    eax,0x10
c000df57:	5b                   	pop    ebx
c000df58:	09 d0                	or     eax,edx
c000df5a:	5e                   	pop    esi
c000df5b:	5f                   	pop    edi
c000df5c:	5d                   	pop    ebp
c000df5d:	c3                   	ret    

c000df5e <zStrtok(char*, char const*)>:
c000df5e:	55                   	push   ebp
c000df5f:	57                   	push   edi
c000df60:	56                   	push   esi
c000df61:	53                   	push   ebx
c000df62:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000df66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df6a:	85 db                	test   ebx,ebx
c000df6c:	74 2f                	je     c000df9d <zStrtok(char*, char const*)+0x3f>
c000df6e:	85 c0                	test   eax,eax
c000df70:	75 09                	jne    c000df7b <zStrtok(char*, char const*)+0x1d>
c000df72:	a1 04 11 03 c0       	mov    eax,ds:0xc0031104
c000df77:	85 c0                	test   eax,eax
c000df79:	74 50                	je     c000dfcb <zStrtok(char*, char const*)+0x6d>
c000df7b:	31 c9                	xor    ecx,ecx
c000df7d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000df81:	74 03                	je     c000df86 <zStrtok(char*, char const*)+0x28>
c000df83:	41                   	inc    ecx
c000df84:	eb f7                	jmp    c000df7d <zStrtok(char*, char const*)+0x1f>
c000df86:	31 d2                	xor    edx,edx
c000df88:	39 ca                	cmp    edx,ecx
c000df8a:	74 15                	je     c000dfa1 <zStrtok(char*, char const*)+0x43>
c000df8c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000df90:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000df93:	8d 3c 10             	lea    edi,[eax+edx*1]
c000df96:	39 ee                	cmp    esi,ebp
c000df98:	74 13                	je     c000dfad <zStrtok(char*, char const*)+0x4f>
c000df9a:	42                   	inc    edx
c000df9b:	eb eb                	jmp    c000df88 <zStrtok(char*, char const*)+0x2a>
c000df9d:	31 c0                	xor    eax,eax
c000df9f:	eb 2a                	jmp    c000dfcb <zStrtok(char*, char const*)+0x6d>
c000dfa1:	c7 05 04 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031104,0x0
c000dfab:	eb 1e                	jmp    c000dfcb <zStrtok(char*, char const*)+0x6d>
c000dfad:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000dfb0:	39 ce                	cmp    esi,ecx
c000dfb2:	75 0a                	jne    c000dfbe <zStrtok(char*, char const*)+0x60>
c000dfb4:	40                   	inc    eax
c000dfb5:	a3 04 11 03 c0       	mov    ds:0xc0031104,eax
c000dfba:	89 d8                	mov    eax,ebx
c000dfbc:	eb 0d                	jmp    c000dfcb <zStrtok(char*, char const*)+0x6d>
c000dfbe:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000dfc2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000dfc5:	89 15 04 11 03 c0    	mov    DWORD PTR ds:0xc0031104,edx
c000dfcb:	5b                   	pop    ebx
c000dfcc:	5e                   	pop    esi
c000dfcd:	5f                   	pop    edi
c000dfce:	5d                   	pop    ebp
c000dfcf:	c3                   	ret    

c000dfd0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000dfd0:	57                   	push   edi
c000dfd1:	56                   	push   esi
c000dfd2:	53                   	push   ebx
c000dfd3:	81 ec 08 01 00 00    	sub    esp,0x108
c000dfd9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000dfe0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000dfe7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000dfeb:	53                   	push   ebx
c000dfec:	e8 4f 26 ff ff       	call   c0000640 <strcpy>
c000dff1:	59                   	pop    ecx
c000dff2:	5e                   	pop    esi
c000dff3:	68 5e 8a 02 c0       	push   0xc0028a5e
c000dff8:	53                   	push   ebx
c000dff9:	bb 01 00 00 00       	mov    ebx,0x1
c000dffe:	e8 5b ff ff ff       	call   c000df5e <zStrtok(char*, char const*)>
c000e003:	83 c4 10             	add    esp,0x10
c000e006:	85 c0                	test   eax,eax
c000e008:	74 3b                	je     c000e045 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e00a:	52                   	push   edx
c000e00b:	50                   	push   eax
c000e00c:	6a 01                	push   0x1
c000e00e:	57                   	push   edi
c000e00f:	e8 b9 fd ff ff       	call   c000ddcd <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000e014:	59                   	pop    ecx
c000e015:	89 c3                	mov    ebx,eax
c000e017:	5e                   	pop    esi
c000e018:	68 5e 8a 02 c0       	push   0xc0028a5e
c000e01d:	6a 00                	push   0x0
c000e01f:	e8 3a ff ff ff       	call   c000df5e <zStrtok(char*, char const*)>
c000e024:	83 c4 10             	add    esp,0x10
c000e027:	89 c6                	mov    esi,eax
c000e029:	85 c0                	test   eax,eax
c000e02b:	74 18                	je     c000e045 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e02d:	52                   	push   edx
c000e02e:	52                   	push   edx
c000e02f:	53                   	push   ebx
c000e030:	57                   	push   edi
c000e031:	e8 81 f5 ff ff       	call   c000d5b7 <CmEnterDirectory(Reghive_Tag*, int)>
c000e036:	83 c4 10             	add    esp,0x10
c000e039:	89 c3                	mov    ebx,eax
c000e03b:	83 f8 ff             	cmp    eax,0xffffffff
c000e03e:	74 05                	je     c000e045 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e040:	50                   	push   eax
c000e041:	56                   	push   esi
c000e042:	53                   	push   ebx
c000e043:	eb c9                	jmp    c000e00e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e045:	81 c4 00 01 00 00    	add    esp,0x100
c000e04b:	89 d8                	mov    eax,ebx
c000e04d:	5b                   	pop    ebx
c000e04e:	5e                   	pop    esi
c000e04f:	5f                   	pop    edi
c000e050:	c3                   	ret    
c000e051:	90                   	nop

c000e052 <Computer::close(int, int, void*)>:
c000e052:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e057:	c3                   	ret    

c000e058 <Computer::Computer()>:
c000e058:	83 ec 0c             	sub    esp,0xc
c000e05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e05f:	83 ec 08             	sub    esp,0x8
c000e062:	68 cc 7b 02 c0       	push   0xc0027bcc
c000e067:	50                   	push   eax
c000e068:	e8 49 bb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000e06d:	83 c4 10             	add    esp,0x10
c000e070:	ba 24 7c 02 c0       	mov    edx,0xc0027c24
c000e075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e079:	89 10                	mov    DWORD PTR [eax],edx
c000e07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e097:	90                   	nop
c000e098:	83 c4 0c             	add    esp,0xc
c000e09b:	c3                   	ret    

c000e09c <Computer::open(int, int, void*)>:
c000e09c:	56                   	push   esi
c000e09d:	53                   	push   ebx
c000e09e:	83 ec 04             	sub    esp,0x4
c000e0a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0a5:	39 1d 08 11 03 c0    	cmp    DWORD PTR ds:0xc0031108,ebx
c000e0ab:	74 10                	je     c000e0bd <Computer::open(int, int, void*)+0x21>
c000e0ad:	83 ec 0c             	sub    esp,0xc
c000e0b0:	68 f0 7b 02 c0       	push   0xc0027bf0
c000e0b5:	e8 fe 1b 00 00       	call   c000fcb8 <KePanic(char const*)>
c000e0ba:	83 c4 10             	add    esp,0x10
c000e0bd:	83 ec 0c             	sub    esp,0xc
c000e0c0:	68 78 11 00 00       	push   0x1178
c000e0c5:	e8 99 17 00 00       	call   c000f863 <malloc>
c000e0ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0cd:	89 c6                	mov    esi,eax
c000e0cf:	e8 a0 ca 00 00       	call   c001ab74 <CPU::CPU()>
c000e0d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e0d8:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e0de:	50                   	push   eax
c000e0df:	6a 00                	push   0x0
c000e0e1:	6a 00                	push   0x0
c000e0e3:	56                   	push   esi
c000e0e4:	e8 6d cc 00 00       	call   c001ad56 <CPU::open(int, int, void*)>
c000e0e9:	83 c4 14             	add    esp,0x14
c000e0ec:	68 d5 7b 02 c0       	push   0xc0027bd5
c000e0f1:	e8 db f1 ff ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000e0f6:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e0fd:	e8 61 17 00 00       	call   c000f863 <malloc>
c000e102:	89 04 24             	mov    DWORD PTR [esp],eax
c000e105:	89 c6                	mov    esi,eax
c000e107:	e8 54 e7 ff ff       	call   c000c860 <ACPI::ACPI()>
c000e10c:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e112:	5a                   	pop    edx
c000e113:	59                   	pop    ecx
c000e114:	56                   	push   esi
c000e115:	53                   	push   ebx
c000e116:	e8 39 b9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e11b:	5e                   	pop    esi
c000e11c:	58                   	pop    eax
c000e11d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e123:	50                   	push   eax
c000e124:	53                   	push   ebx
c000e125:	e8 2a b9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e12a:	83 c4 14             	add    esp,0x14
c000e12d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e132:	5b                   	pop    ebx
c000e133:	5e                   	pop    esi
c000e134:	c3                   	ret    

c000e135 <KeCalculateCRC32(unsigned char*, int)>:
c000e135:	53                   	push   ebx
c000e136:	83 c8 ff             	or     eax,0xffffffff
c000e139:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e13d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e141:	01 cb                	add    ebx,ecx
c000e143:	39 d9                	cmp    ecx,ebx
c000e145:	74 15                	je     c000e15c <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e147:	41                   	inc    ecx
c000e148:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e14b:	31 c2                	xor    edx,eax
c000e14d:	c1 e8 08             	shr    eax,0x8
c000e150:	0f b6 d2             	movzx  edx,dl
c000e153:	33 04 95 20 af 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd50e0]
c000e15a:	eb e7                	jmp    c000e143 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e15c:	f7 d0                	not    eax
c000e15e:	5b                   	pop    ebx
c000e15f:	c3                   	ret    

c000e160 <EnvVarContainer::getEnv(char const*)>:
c000e160:	57                   	push   edi
c000e161:	56                   	push   esi
c000e162:	53                   	push   ebx
c000e163:	31 db                	xor    ebx,ebx
c000e165:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e169:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e16b:	7e 2b                	jle    c000e198 <EnvVarContainer::getEnv(char const*)+0x38>
c000e16d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e174:	50                   	push   eax
c000e175:	50                   	push   eax
c000e176:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e179:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e17c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e180:	e8 cb 25 ff ff       	call   c0000750 <strcmp>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	75 09                	jne    c000e195 <EnvVarContainer::getEnv(char const*)+0x35>
c000e18c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e18f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e193:	eb 05                	jmp    c000e19a <EnvVarContainer::getEnv(char const*)+0x3a>
c000e195:	43                   	inc    ebx
c000e196:	eb d1                	jmp    c000e169 <EnvVarContainer::getEnv(char const*)+0x9>
c000e198:	31 c0                	xor    eax,eax
c000e19a:	5b                   	pop    ebx
c000e19b:	5e                   	pop    esi
c000e19c:	5f                   	pop    edi
c000e19d:	c3                   	ret    

c000e19e <EnvVarContainer::setEnv(char const*, char const*)>:
c000e19e:	55                   	push   ebp
c000e19f:	57                   	push   edi
c000e1a0:	56                   	push   esi
c000e1a1:	53                   	push   ebx
c000e1a2:	83 ec 28             	sub    esp,0x28
c000e1a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e1a9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e1ad:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e1b1:	56                   	push   esi
c000e1b2:	e8 b9 23 ff ff       	call   c0000570 <strlen>
c000e1b7:	40                   	inc    eax
c000e1b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1bb:	e8 a3 16 00 00       	call   c000f863 <malloc>
c000e1c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c7:	e8 a4 23 ff ff       	call   c0000570 <strlen>
c000e1cc:	40                   	inc    eax
c000e1cd:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1d0:	e8 8e 16 00 00       	call   c000f863 <malloc>
c000e1d5:	89 34 24             	mov    DWORD PTR [esp],esi
c000e1d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1dc:	e8 8f 23 ff ff       	call   c0000570 <strlen>
c000e1e1:	83 c4 0c             	add    esp,0xc
c000e1e4:	40                   	inc    eax
c000e1e5:	50                   	push   eax
c000e1e6:	6a 00                	push   0x0
c000e1e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ec:	e8 ff 22 ff ff       	call   c00004f0 <memset>
c000e1f1:	89 34 24             	mov    DWORD PTR [esp],esi
c000e1f4:	e8 77 23 ff ff       	call   c0000570 <strlen>
c000e1f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1fd:	8d 48 01             	lea    ecx,[eax+0x1]
c000e200:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e202:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e205:	89 de                	mov    esi,ebx
c000e207:	e8 64 23 ff ff       	call   c0000570 <strlen>
c000e20c:	83 c4 0c             	add    esp,0xc
c000e20f:	40                   	inc    eax
c000e210:	50                   	push   eax
c000e211:	6a 00                	push   0x0
c000e213:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e217:	e8 d4 22 ff ff       	call   c00004f0 <memset>
c000e21c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e21f:	e8 4c 23 ff ff       	call   c0000570 <strlen>
c000e224:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e228:	8d 48 01             	lea    ecx,[eax+0x1]
c000e22b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e22d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e230:	40                   	inc    eax
c000e231:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e234:	c1 e0 03             	shl    eax,0x3
c000e237:	5a                   	pop    edx
c000e238:	59                   	pop    ecx
c000e239:	50                   	push   eax
c000e23a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e23d:	e8 0d 16 00 00       	call   c000f84f <realloc>
c000e242:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e246:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e249:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e24c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e250:	b9 08 00 00 00       	mov    ecx,0x8
c000e255:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e257:	83 c4 2c             	add    esp,0x2c
c000e25a:	5b                   	pop    ebx
c000e25b:	5e                   	pop    esi
c000e25c:	5f                   	pop    edi
c000e25d:	5d                   	pop    ebp
c000e25e:	c3                   	ret    
c000e25f:	90                   	nop

c000e260 <EnvVarContainer::deleteEnv(char const*)>:
c000e260:	c3                   	ret    
c000e261:	90                   	nop

c000e262 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e262:	55                   	push   ebp
c000e263:	57                   	push   edi
c000e264:	56                   	push   esi
c000e265:	53                   	push   ebx
c000e266:	81 ec 38 01 00 00    	sub    esp,0x138
c000e26c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e273:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e27a:	68 14 01 00 00       	push   0x114
c000e27f:	e8 df 15 00 00       	call   c000f863 <malloc>
c000e284:	83 c4 0c             	add    esp,0xc
c000e287:	89 c3                	mov    ebx,eax
c000e289:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e28c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e293:	50                   	push   eax
c000e294:	e8 f1 9e ff ff       	call   c000818a <File::File(char const*, Process*)>
c000e299:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e29c:	e8 cb a1 ff ff       	call   c000846c <File::exists()>
c000e2a1:	83 c4 10             	add    esp,0x10
c000e2a4:	84 c0                	test   al,al
c000e2a6:	75 31                	jne    c000e2d9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e2a8:	50                   	push   eax
c000e2a9:	50                   	push   eax
c000e2aa:	6a 12                	push   0x12
c000e2ac:	53                   	push   ebx
c000e2ad:	e8 f6 9e ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e2b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e2b7:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2ba:	e8 b1 22 ff ff       	call   c0000570 <strlen>
c000e2bf:	5a                   	pop    edx
c000e2c0:	31 d2                	xor    edx,edx
c000e2c2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e2c6:	51                   	push   ecx
c000e2c7:	56                   	push   esi
c000e2c8:	52                   	push   edx
c000e2c9:	50                   	push   eax
c000e2ca:	53                   	push   ebx
c000e2cb:	ff d7                	call   edi
c000e2cd:	83 c4 14             	add    esp,0x14
c000e2d0:	53                   	push   ebx
c000e2d1:	e8 30 9f ff ff       	call   c0008206 <File::close()>
c000e2d6:	83 c4 10             	add    esp,0x10
c000e2d9:	56                   	push   esi
c000e2da:	31 f6                	xor    esi,esi
c000e2dc:	68 00 01 00 00       	push   0x100
c000e2e1:	6a 00                	push   0x0
c000e2e3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e2e7:	50                   	push   eax
c000e2e8:	e8 03 22 ff ff       	call   c00004f0 <memset>
c000e2ed:	5f                   	pop    edi
c000e2ee:	58                   	pop    eax
c000e2ef:	6a 01                	push   0x1
c000e2f1:	53                   	push   ebx
c000e2f2:	e8 b1 9e ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e302:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e30a:	83 ec 0c             	sub    esp,0xc
c000e30d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e30f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e313:	51                   	push   ecx
c000e314:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e318:	52                   	push   edx
c000e319:	6a 00                	push   0x0
c000e31b:	6a 01                	push   0x1
c000e31d:	53                   	push   ebx
c000e31e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e321:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e326:	83 c4 20             	add    esp,0x20
c000e329:	89 c2                	mov    edx,eax
c000e32b:	85 c0                	test   eax,eax
c000e32d:	0f 84 36 01 00 00    	je     c000e469 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e333:	83 f8 0d             	cmp    eax,0xd
c000e336:	0f 84 22 01 00 00    	je     c000e45e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e33c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e341:	0f 84 f0 00 00 00    	je     c000e437 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e347:	83 f8 0a             	cmp    eax,0xa
c000e34a:	74 13                	je     c000e35f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e34c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e351:	74 0c                	je     c000e35f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e353:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e359:	0f 8e f6 00 00 00    	jle    c000e455 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e35f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e363:	83 ec 0c             	sub    esp,0xc
c000e366:	8d 78 01             	lea    edi,[eax+0x1]
c000e369:	57                   	push   edi
c000e36a:	e8 f4 14 00 00       	call   c000f863 <malloc>
c000e36f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e373:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e377:	8d 56 04             	lea    edx,[esi+0x4]
c000e37a:	89 14 24             	mov    DWORD PTR [esp],edx
c000e37d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e381:	e8 dd 14 00 00       	call   c000f863 <malloc>
c000e386:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e38a:	83 c4 0c             	add    esp,0xc
c000e38d:	57                   	push   edi
c000e38e:	6a 00                	push   0x0
c000e390:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e394:	e8 57 21 ff ff       	call   c00004f0 <memset>
c000e399:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e39d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e3a1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e3a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3a7:	83 c4 0c             	add    esp,0xc
c000e3aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3ae:	52                   	push   edx
c000e3af:	6a 00                	push   0x0
c000e3b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e3b5:	e8 36 21 ff ff       	call   c00004f0 <memset>
c000e3ba:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e3be:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e3c2:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3c5:	e8 a6 21 ff ff       	call   c0000570 <strlen>
c000e3ca:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e3ce:	89 c1                	mov    ecx,eax
c000e3d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e3d5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e3d8:	40                   	inc    eax
c000e3d9:	83 c4 10             	add    esp,0x10
c000e3dc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e3df:	85 d2                	test   edx,edx
c000e3e1:	75 0c                	jne    c000e3ef <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e3e3:	83 ec 0c             	sub    esp,0xc
c000e3e6:	6a 08                	push   0x8
c000e3e8:	e8 76 14 00 00       	call   c000f863 <malloc>
c000e3ed:	eb 0c                	jmp    c000e3fb <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e3ef:	c1 e0 03             	shl    eax,0x3
c000e3f2:	51                   	push   ecx
c000e3f3:	51                   	push   ecx
c000e3f4:	50                   	push   eax
c000e3f5:	52                   	push   edx
c000e3f6:	e8 54 14 00 00       	call   c000f84f <realloc>
c000e3fb:	83 c4 10             	add    esp,0x10
c000e3fe:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e401:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e404:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e407:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e40b:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e40f:	b9 08 00 00 00       	mov    ecx,0x8
c000e414:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e416:	31 f6                	xor    esi,esi
c000e418:	50                   	push   eax
c000e419:	68 00 01 00 00       	push   0x100
c000e41e:	6a 00                	push   0x0
c000e420:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e424:	50                   	push   eax
c000e425:	e8 c6 20 ff ff       	call   c00004f0 <memset>
c000e42a:	83 c4 10             	add    esp,0x10
c000e42d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e435:	eb 27                	jmp    c000e45e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e437:	83 f8 3d             	cmp    eax,0x3d
c000e43a:	74 1e                	je     c000e45a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e43c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e442:	7f 07                	jg     c000e44b <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e444:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e448:	46                   	inc    esi
c000e449:	eb 13                	jmp    c000e45e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e44b:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e453:	eb 09                	jmp    c000e45e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e455:	83 f8 3d             	cmp    eax,0x3d
c000e458:	75 ea                	jne    c000e444 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e45a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e45e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e463:	0f 85 99 fe ff ff    	jne    c000e302 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e469:	83 ec 0c             	sub    esp,0xc
c000e46c:	53                   	push   ebx
c000e46d:	e8 94 9d ff ff       	call   c0008206 <File::close()>
c000e472:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e474:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e477:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e47a:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e480:	5b                   	pop    ebx
c000e481:	5e                   	pop    esi
c000e482:	5f                   	pop    edi
c000e483:	5d                   	pop    ebp
c000e484:	c3                   	ret    
c000e485:	90                   	nop

c000e486 <EnvVarContainer::__loadSystem()>:
c000e486:	83 ec 10             	sub    esp,0x10
c000e489:	68 20 b3 02 c0       	push   0xc002b320
c000e48e:	68 48 7c 02 c0       	push   0xc0027c48
c000e493:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e497:	e8 c6 fd ff ff       	call   c000e262 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e49c:	83 c4 1c             	add    esp,0x1c
c000e49f:	c3                   	ret    

c000e4a0 <EnvVarContainer::__loadUser()>:
c000e4a0:	c3                   	ret    
c000e4a1:	90                   	nop

c000e4a2 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e4a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e4b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e4b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4c2:	90                   	nop
c000e4c3:	c3                   	ret    

c000e4c4 <EnvVarContainer::~EnvVarContainer()>:
c000e4c4:	83 ec 0c             	sub    esp,0xc
c000e4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4ce:	85 c0                	test   eax,eax
c000e4d0:	74 1d                	je     c000e4ef <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e4d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4d8:	85 c0                	test   eax,eax
c000e4da:	74 13                	je     c000e4ef <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4e3:	83 ec 0c             	sub    esp,0xc
c000e4e6:	50                   	push   eax
c000e4e7:	e8 87 13 00 00       	call   c000f873 <free>
c000e4ec:	83 c4 10             	add    esp,0x10
c000e4ef:	90                   	nop
c000e4f0:	83 c4 0c             	add    esp,0xc
c000e4f3:	c3                   	ret    

c000e4f4 <KeGetEnv(Process*, char const*)>:
c000e4f4:	53                   	push   ebx
c000e4f5:	83 ec 08             	sub    esp,0x8
c000e4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e500:	39 05 58 13 03 c0    	cmp    DWORD PTR ds:0xc0031358,eax
c000e506:	74 04                	je     c000e50c <KeGetEnv(Process*, char const*)+0x18>
c000e508:	85 c0                	test   eax,eax
c000e50a:	75 0b                	jne    c000e517 <KeGetEnv(Process*, char const*)+0x23>
c000e50c:	a1 10 11 03 c0       	mov    eax,ds:0xc0031110
c000e511:	85 c0                	test   eax,eax
c000e513:	75 19                	jne    c000e52e <KeGetEnv(Process*, char const*)+0x3a>
c000e515:	eb 27                	jmp    c000e53e <KeGetEnv(Process*, char const*)+0x4a>
c000e517:	52                   	push   edx
c000e518:	52                   	push   edx
c000e519:	53                   	push   ebx
c000e51a:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e520:	e8 3b fc ff ff       	call   c000e160 <EnvVarContainer::getEnv(char const*)>
c000e525:	83 c4 10             	add    esp,0x10
c000e528:	85 c0                	test   eax,eax
c000e52a:	75 28                	jne    c000e554 <KeGetEnv(Process*, char const*)+0x60>
c000e52c:	eb de                	jmp    c000e50c <KeGetEnv(Process*, char const*)+0x18>
c000e52e:	52                   	push   edx
c000e52f:	52                   	push   edx
c000e530:	53                   	push   ebx
c000e531:	50                   	push   eax
c000e532:	e8 29 fc ff ff       	call   c000e160 <EnvVarContainer::getEnv(char const*)>
c000e537:	83 c4 10             	add    esp,0x10
c000e53a:	85 c0                	test   eax,eax
c000e53c:	75 16                	jne    c000e554 <KeGetEnv(Process*, char const*)+0x60>
c000e53e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e542:	a1 14 11 03 c0       	mov    eax,ds:0xc0031114
c000e547:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e54b:	83 c4 08             	add    esp,0x8
c000e54e:	5b                   	pop    ebx
c000e54f:	e9 0c fc ff ff       	jmp    c000e160 <EnvVarContainer::getEnv(char const*)>
c000e554:	83 c4 08             	add    esp,0x8
c000e557:	5b                   	pop    ebx
c000e558:	c3                   	ret    

c000e559 <KeSetEnvSystem(char const*, char const*)>:
c000e559:	83 ec 10             	sub    esp,0x10
c000e55c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e560:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e564:	ff 35 14 11 03 c0    	push   DWORD PTR ds:0xc0031114
c000e56a:	e8 2f fc ff ff       	call   c000e19e <EnvVarContainer::setEnv(char const*, char const*)>
c000e56f:	83 c4 1c             	add    esp,0x1c
c000e572:	c3                   	ret    

c000e573 <KeSetEnvUser(char const*, char const*)>:
c000e573:	a1 10 11 03 c0       	mov    eax,ds:0xc0031110
c000e578:	85 c0                	test   eax,eax
c000e57a:	74 15                	je     c000e591 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e57c:	83 ec 10             	sub    esp,0x10
c000e57f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e583:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e587:	50                   	push   eax
c000e588:	e8 11 fc ff ff       	call   c000e19e <EnvVarContainer::setEnv(char const*, char const*)>
c000e58d:	83 c4 1c             	add    esp,0x1c
c000e590:	c3                   	ret    
c000e591:	c3                   	ret    

c000e592 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e596:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e59c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5a0:	e9 f9 fb ff ff       	jmp    c000e19e <EnvVarContainer::setEnv(char const*, char const*)>

c000e5a5 <KeDeleteEnvSystem(char const*)>:
c000e5a5:	c3                   	ret    

c000e5a6 <KeDeleteEnvUser(char const*)>:
c000e5a6:	c3                   	ret    

c000e5a7 <KeDeleteEnvProcess(Process*, char const*)>:
c000e5a7:	c3                   	ret    

c000e5a8 <KeNewProcessEnv(Process*)>:
c000e5a8:	83 ec 28             	sub    esp,0x28
c000e5ab:	6a 0c                	push   0xc
c000e5ad:	e8 b1 12 00 00       	call   c000f863 <malloc>
c000e5b2:	5a                   	pop    edx
c000e5b3:	59                   	pop    ecx
c000e5b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e5b8:	50                   	push   eax
c000e5b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5bd:	e8 e0 fe ff ff       	call   c000e4a2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e5c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5c6:	83 c4 2c             	add    esp,0x2c
c000e5c9:	c3                   	ret    

c000e5ca <KeCopyProcessEnv(Process*, Process*)>:
c000e5ca:	57                   	push   edi
c000e5cb:	56                   	push   esi
c000e5cc:	53                   	push   ebx
c000e5cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d1:	83 ec 0c             	sub    esp,0xc
c000e5d4:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e5da:	6a 0c                	push   0xc
c000e5dc:	e8 82 12 00 00       	call   c000f863 <malloc>
c000e5e1:	89 c3                	mov    ebx,eax
c000e5e3:	58                   	pop    eax
c000e5e4:	5a                   	pop    edx
c000e5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e9:	53                   	push   ebx
c000e5ea:	e8 b3 fe ff ff       	call   c000e4a2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e5ef:	8b 07                	mov    eax,DWORD PTR [edi]
c000e5f1:	89 03                	mov    DWORD PTR [ebx],eax
c000e5f3:	c1 e0 03             	shl    eax,0x3
c000e5f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e5f9:	e8 65 12 00 00       	call   c000f863 <malloc>
c000e5fe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e601:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e603:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e606:	c1 e1 03             	shl    ecx,0x3
c000e609:	89 c7                	mov    edi,eax
c000e60b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e60d:	83 c4 10             	add    esp,0x10
c000e610:	89 d8                	mov    eax,ebx
c000e612:	5b                   	pop    ebx
c000e613:	5e                   	pop    esi
c000e614:	5f                   	pop    edi
c000e615:	c3                   	ret    

c000e616 <KeLoadSystemEnv()>:
c000e616:	53                   	push   ebx
c000e617:	83 ec 14             	sub    esp,0x14
c000e61a:	6a 0c                	push   0xc
c000e61c:	e8 42 12 00 00       	call   c000f863 <malloc>
c000e621:	89 c3                	mov    ebx,eax
c000e623:	58                   	pop    eax
c000e624:	5a                   	pop    edx
c000e625:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c000e62b:	53                   	push   ebx
c000e62c:	e8 71 fe ff ff       	call   c000e4a2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e631:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e634:	89 1d 14 11 03 c0    	mov    DWORD PTR ds:0xc0031114,ebx
c000e63a:	e8 47 fe ff ff       	call   c000e486 <EnvVarContainer::__loadSystem()>
c000e63f:	83 c4 18             	add    esp,0x18
c000e642:	5b                   	pop    ebx
c000e643:	c3                   	ret    

c000e644 <KeLoadUserEnv()>:
c000e644:	53                   	push   ebx
c000e645:	83 ec 14             	sub    esp,0x14
c000e648:	6a 0c                	push   0xc
c000e64a:	e8 14 12 00 00       	call   c000f863 <malloc>
c000e64f:	89 c3                	mov    ebx,eax
c000e651:	58                   	pop    eax
c000e652:	5a                   	pop    edx
c000e653:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c000e659:	53                   	push   ebx
c000e65a:	e8 43 fe ff ff       	call   c000e4a2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e65f:	89 1d 10 11 03 c0    	mov    DWORD PTR ds:0xc0031110,ebx
c000e665:	83 c4 18             	add    esp,0x18
c000e668:	5b                   	pop    ebx
c000e669:	c3                   	ret    

c000e66a <KeFlushEnv()>:
c000e66a:	c3                   	ret    

c000e66b <KeGetProcessTotalEnvCount(Process*)>:
c000e66b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e66f:	8b 15 10 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031110
c000e675:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e67b:	a1 14 11 03 c0       	mov    eax,ds:0xc0031114
c000e680:	8b 00                	mov    eax,DWORD PTR [eax]
c000e682:	03 01                	add    eax,DWORD PTR [ecx]
c000e684:	85 d2                	test   edx,edx
c000e686:	74 02                	je     c000e68a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e688:	03 02                	add    eax,DWORD PTR [edx]
c000e68a:	c3                   	ret    

c000e68b <KeGetProcessEnvPair(Process*, int)>:
c000e68b:	57                   	push   edi
c000e68c:	56                   	push   esi
c000e68d:	8b 35 10 11 03 c0    	mov    esi,DWORD PTR ds:0xc0031110
c000e693:	53                   	push   ebx
c000e694:	85 f6                	test   esi,esi
c000e696:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e69a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e69e:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e6a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6a8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e6aa:	75 16                	jne    c000e6c2 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e6ac:	39 c2                	cmp    edx,eax
c000e6ae:	7c 16                	jl     c000e6c6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e6b0:	8b 0d 14 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031114
c000e6b6:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e6b8:	01 c6                	add    esi,eax
c000e6ba:	39 d6                	cmp    esi,edx
c000e6bc:	7e 3c                	jle    c000e6fa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e6be:	29 c2                	sub    edx,eax
c000e6c0:	eb 04                	jmp    c000e6c6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e6c2:	39 c2                	cmp    edx,eax
c000e6c4:	7d 05                	jge    c000e6cb <KeGetProcessEnvPair(Process*, int)+0x40>
c000e6c6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e6c9:	eb 20                	jmp    c000e6eb <KeGetProcessEnvPair(Process*, int)+0x60>
c000e6cb:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e6cd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e6d0:	39 d1                	cmp    ecx,edx
c000e6d2:	7e 04                	jle    c000e6d8 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e6d4:	29 c2                	sub    edx,eax
c000e6d6:	eb 10                	jmp    c000e6e8 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e6d8:	8b 35 14 11 03 c0    	mov    esi,DWORD PTR ds:0xc0031114
c000e6de:	03 0e                	add    ecx,DWORD PTR [esi]
c000e6e0:	39 d1                	cmp    ecx,edx
c000e6e2:	7e 16                	jle    c000e6fa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e6e4:	29 c2                	sub    edx,eax
c000e6e6:	29 fa                	sub    edx,edi
c000e6e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e6eb:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e6ee:	8b 02                	mov    eax,DWORD PTR [edx]
c000e6f0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e6f3:	89 03                	mov    DWORD PTR [ebx],eax
c000e6f5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e6f8:	eb 1d                	jmp    c000e717 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e6fa:	83 ec 0c             	sub    esp,0xc
c000e6fd:	68 6a 7c 02 c0       	push   0xc0027c6a
c000e702:	e8 b1 15 00 00       	call   c000fcb8 <KePanic(char const*)>
c000e707:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e70d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e714:	83 c4 10             	add    esp,0x10
c000e717:	89 d8                	mov    eax,ebx
c000e719:	5b                   	pop    ebx
c000e71a:	5e                   	pop    esi
c000e71b:	5f                   	pop    edi
c000e71c:	c2 04 00             	ret    0x4
c000e71f:	90                   	nop

c000e720 <KeDisplayProgramFault(char const*)>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	83 ec 0c             	sub    esp,0xc
c000e726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e72a:	e8 4d 88 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e737:	8b 00                	mov    eax,DWORD PTR [eax]
c000e739:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e73c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e742:	85 c0                	test   eax,eax
c000e744:	74 22                	je     c000e768 <KeDisplayProgramFault(char const*)+0x48>
c000e746:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e74b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e74d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e750:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e756:	6a 04                	push   0x4
c000e758:	6a 0f                	push   0xf
c000e75a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e75e:	50                   	push   eax
c000e75f:	e8 32 3f 00 00       	call   c0012696 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e764:	83 c4 10             	add    esp,0x10
c000e767:	90                   	nop
c000e768:	90                   	nop
c000e769:	83 c4 0c             	add    esp,0xc
c000e76c:	c3                   	ret    
c000e76d:	8d 76 00             	lea    esi,[esi+0x0]

c000e770 <KeGeneralProtectionFault(void*, void*)>:
c000e770:	83 ec 0c             	sub    esp,0xc
c000e773:	83 ec 08             	sub    esp,0x8
c000e776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e77e:	e8 33 b9 00 00       	call   c001a0b6 <HalHandleGeneralProtectionFault(void*, void*)>
c000e783:	83 c4 10             	add    esp,0x10
c000e786:	0f b6 c0             	movzx  eax,al
c000e789:	85 c0                	test   eax,eax
c000e78b:	75 2f                	jne    c000e7bc <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e78d:	83 ec 0c             	sub    esp,0xc
c000e790:	68 84 7c 02 c0       	push   0xc0027c84
c000e795:	e8 86 ff ff ff       	call   c000e720 <KeDisplayProgramFault(char const*)>
c000e79a:	83 c4 10             	add    esp,0x10
c000e79d:	83 ec 0c             	sub    esp,0xc
c000e7a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7a4:	e8 86 ba 00 00       	call   c001a22f <HalDisplayDebugInfo(void*)>
c000e7a9:	83 c4 10             	add    esp,0x10
c000e7ac:	83 ec 0c             	sub    esp,0xc
c000e7af:	6a 7e                	push   0x7e
c000e7b1:	e8 8a 88 00 00       	call   c0017040 <KeTerminateCurrentThread(int)>
c000e7b6:	83 c4 10             	add    esp,0x10
c000e7b9:	eb 05                	jmp    c000e7c0 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e7bb:	90                   	nop
c000e7bc:	90                   	nop
c000e7bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e7c0:	83 c4 0c             	add    esp,0xc
c000e7c3:	c3                   	ret    

c000e7c4 <KePageFault(void*, void*)>:
c000e7c4:	83 ec 0c             	sub    esp,0xc
c000e7c7:	83 ec 08             	sub    esp,0x8
c000e7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d2:	e8 e7 b9 00 00       	call   c001a1be <HalHandlePageFault(void*, void*)>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	0f b6 c0             	movzx  eax,al
c000e7dd:	85 c0                	test   eax,eax
c000e7df:	75 2f                	jne    c000e810 <KePageFault(void*, void*)+0x4c>
c000e7e1:	83 ec 0c             	sub    esp,0xc
c000e7e4:	68 9d 7c 02 c0       	push   0xc0027c9d
c000e7e9:	e8 32 ff ff ff       	call   c000e720 <KeDisplayProgramFault(char const*)>
c000e7ee:	83 c4 10             	add    esp,0x10
c000e7f1:	83 ec 0c             	sub    esp,0xc
c000e7f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f8:	e8 32 ba 00 00       	call   c001a22f <HalDisplayDebugInfo(void*)>
c000e7fd:	83 c4 10             	add    esp,0x10
c000e800:	83 ec 0c             	sub    esp,0xc
c000e803:	6a 7f                	push   0x7f
c000e805:	e8 36 88 00 00       	call   c0017040 <KeTerminateCurrentThread(int)>
c000e80a:	83 c4 10             	add    esp,0x10
c000e80d:	eb 05                	jmp    c000e814 <KePageFault(void*, void*)+0x50>
c000e80f:	90                   	nop
c000e810:	90                   	nop
c000e811:	8d 76 00             	lea    esi,[esi+0x0]
c000e814:	83 c4 0c             	add    esp,0xc
c000e817:	c3                   	ret    

c000e818 <KeOpcodeFault(void*, void*)>:
c000e818:	83 ec 0c             	sub    esp,0xc
c000e81b:	83 ec 08             	sub    esp,0x8
c000e81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e826:	e8 c2 b9 00 00       	call   c001a1ed <HalHandleOpcodeFault(void*, void*)>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	0f b6 c0             	movzx  eax,al
c000e831:	85 c0                	test   eax,eax
c000e833:	75 2f                	jne    c000e864 <KeOpcodeFault(void*, void*)+0x4c>
c000e835:	83 ec 0c             	sub    esp,0xc
c000e838:	68 a8 7c 02 c0       	push   0xc0027ca8
c000e83d:	e8 de fe ff ff       	call   c000e720 <KeDisplayProgramFault(char const*)>
c000e842:	83 c4 10             	add    esp,0x10
c000e845:	83 ec 0c             	sub    esp,0xc
c000e848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e84c:	e8 de b9 00 00       	call   c001a22f <HalDisplayDebugInfo(void*)>
c000e851:	83 c4 10             	add    esp,0x10
c000e854:	83 ec 0c             	sub    esp,0xc
c000e857:	6a 7c                	push   0x7c
c000e859:	e8 e2 87 00 00       	call   c0017040 <KeTerminateCurrentThread(int)>
c000e85e:	83 c4 10             	add    esp,0x10
c000e861:	eb 05                	jmp    c000e868 <KeOpcodeFault(void*, void*)+0x50>
c000e863:	90                   	nop
c000e864:	90                   	nop
c000e865:	8d 76 00             	lea    esi,[esi+0x0]
c000e868:	83 c4 0c             	add    esp,0xc
c000e86b:	c3                   	ret    

c000e86c <KeOtherFault(void*, void*)>:
c000e86c:	83 ec 0c             	sub    esp,0xc
c000e86f:	83 ec 0c             	sub    esp,0xc
c000e872:	68 c4 7c 02 c0       	push   0xc0027cc4
c000e877:	e8 a4 fe ff ff       	call   c000e720 <KeDisplayProgramFault(char const*)>
c000e87c:	83 c4 10             	add    esp,0x10
c000e87f:	83 ec 0c             	sub    esp,0xc
c000e882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e886:	e8 a4 b9 00 00       	call   c001a22f <HalDisplayDebugInfo(void*)>
c000e88b:	83 c4 10             	add    esp,0x10
c000e88e:	83 ec 0c             	sub    esp,0xc
c000e891:	6a 7d                	push   0x7d
c000e893:	e8 a8 87 00 00       	call   c0017040 <KeTerminateCurrentThread(int)>
c000e898:	83 c4 10             	add    esp,0x10
c000e89b:	90                   	nop
c000e89c:	83 c4 0c             	add    esp,0xc
c000e89f:	c3                   	ret    

c000e8a0 <KeNonMaskableInterrupt(void*, void*)>:
c000e8a0:	83 ec 0c             	sub    esp,0xc
c000e8a3:	e8 15 bd 00 00       	call   c001a5bd <HalReceivedNMI()>
c000e8a8:	90                   	nop
c000e8a9:	83 c4 0c             	add    esp,0xc
c000e8ac:	c3                   	ret    
c000e8ad:	8d 76 00             	lea    esi,[esi+0x0]

c000e8b0 <KeDoubleFault(void*, void*)>:
c000e8b0:	83 ec 0c             	sub    esp,0xc
c000e8b3:	83 ec 0c             	sub    esp,0xc
c000e8b6:	68 b5 7c 02 c0       	push   0xc0027cb5
c000e8bb:	e8 f8 13 00 00       	call   c000fcb8 <KePanic(char const*)>
c000e8c0:	83 c4 10             	add    esp,0x10
c000e8c3:	90                   	nop
c000e8c4:	83 c4 0c             	add    esp,0xc
c000e8c7:	c3                   	ret    

c000e8c8 <GDTEntry::setBase(unsigned int)>:
c000e8c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e8d0:	89 c1                	mov    ecx,eax
c000e8d2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e8d6:	c1 e9 10             	shr    ecx,0x10
c000e8d9:	c1 e8 18             	shr    eax,0x18
c000e8dc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e8df:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e8e2:	c3                   	ret    
c000e8e3:	90                   	nop

c000e8e4 <GDTEntry::setLimit(unsigned int)>:
c000e8e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e8e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8ec:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e8ef:	66 89 01             	mov    WORD PTR [ecx],ax
c000e8f2:	83 e2 f0             	and    edx,0xfffffff0
c000e8f5:	c1 e8 10             	shr    eax,0x10
c000e8f8:	83 e0 0f             	and    eax,0xf
c000e8fb:	09 d0                	or     eax,edx
c000e8fd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e900:	c3                   	ret    
c000e901:	90                   	nop

c000e902 <GDT::GDT()>:
c000e902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e906:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e90c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e910:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e916:	90                   	nop
c000e917:	c3                   	ret    

c000e918 <GDT::addEntry(GDTEntry)>:
c000e918:	53                   	push   ebx
c000e919:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e91d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e921:	8b 02                	mov    eax,DWORD PTR [edx]
c000e923:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e927:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e92b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e92f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e932:	c1 e0 03             	shl    eax,0x3
c000e935:	89 0a                	mov    DWORD PTR [edx],ecx
c000e937:	5b                   	pop    ebx
c000e938:	c3                   	ret    
c000e939:	90                   	nop

c000e93a <GDT::getNumberOfEntries()>:
c000e93a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e93e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e940:	c3                   	ret    
c000e941:	90                   	nop

c000e942 <GDT::flush()>:
c000e942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e946:	8b 10                	mov    edx,DWORD PTR [eax]
c000e948:	83 c0 04             	add    eax,0x4
c000e94b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e952:	a3 1a 11 03 c0       	mov    ds:0xc003111a,eax
c000e957:	66 89 15 18 11 03 c0 	mov    WORD PTR ds:0xc0031118,dx
c000e95e:	e9 f7 19 ff ff       	jmp    c000035a <loadGDT>
c000e963:	90                   	nop

c000e964 <GDT::setup()>:
c000e964:	57                   	push   edi
c000e965:	56                   	push   esi
c000e966:	53                   	push   ebx
c000e967:	83 ec 30             	sub    esp,0x30
c000e96a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e96e:	6a 00                	push   0x0
c000e970:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e974:	56                   	push   esi
c000e975:	e8 4e ff ff ff       	call   c000e8c8 <GDTEntry::setBase(unsigned int)>
c000e97a:	6a 00                	push   0x0
c000e97c:	56                   	push   esi
c000e97d:	e8 62 ff ff ff       	call   c000e8e4 <GDTEntry::setLimit(unsigned int)>
c000e982:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e98a:	6a 00                	push   0x0
c000e98c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e990:	56                   	push   esi
c000e991:	e8 32 ff ff ff       	call   c000e8c8 <GDTEntry::setBase(unsigned int)>
c000e996:	68 ff ff ff 00       	push   0xffffff
c000e99b:	56                   	push   esi
c000e99c:	e8 43 ff ff ff       	call   c000e8e4 <GDTEntry::setLimit(unsigned int)>
c000e9a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e9a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9a9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e9ad:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e9b1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e9b6:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e9bb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e9bf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e9c3:	89 f8                	mov    eax,edi
c000e9c5:	89 fa                	mov    edx,edi
c000e9c7:	80 e4 f7             	and    ah,0xf7
c000e9ca:	80 ce 60             	or     dh,0x60
c000e9cd:	89 c7                	mov    edi,eax
c000e9cf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e9d3:	80 cc 60             	or     ah,0x60
c000e9d6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e9da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e9de:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e9e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9e6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9ea:	83 c4 20             	add    esp,0x20
c000e9ed:	6a 00                	push   0x0
c000e9ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e9f3:	50                   	push   eax
c000e9f4:	e8 cf fe ff ff       	call   c000e8c8 <GDTEntry::setBase(unsigned int)>
c000e9f9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e9fd:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ea01:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ea05:	83 e0 3f             	and    eax,0x3f
c000ea08:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ea0c:	6a 00                	push   0x0
c000ea0e:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ea12:	50                   	push   eax
c000ea13:	e8 b0 fe ff ff       	call   c000e8c8 <GDTEntry::setBase(unsigned int)>
c000ea18:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ea1c:	83 e0 3f             	and    eax,0x3f
c000ea1f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ea23:	83 c4 0c             	add    esp,0xc
c000ea26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea2e:	53                   	push   ebx
c000ea2f:	e8 e4 fe ff ff       	call   c000e918 <GDT::addEntry(GDTEntry)>
c000ea34:	83 c4 0c             	add    esp,0xc
c000ea37:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea3b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea3f:	53                   	push   ebx
c000ea40:	e8 d3 fe ff ff       	call   c000e918 <GDT::addEntry(GDTEntry)>
c000ea45:	83 c4 0c             	add    esp,0xc
c000ea48:	57                   	push   edi
c000ea49:	56                   	push   esi
c000ea4a:	53                   	push   ebx
c000ea4b:	e8 c8 fe ff ff       	call   c000e918 <GDT::addEntry(GDTEntry)>
c000ea50:	83 c4 0c             	add    esp,0xc
c000ea53:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ea57:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ea5b:	53                   	push   ebx
c000ea5c:	e8 b7 fe ff ff       	call   c000e918 <GDT::addEntry(GDTEntry)>
c000ea61:	83 c4 0c             	add    esp,0xc
c000ea64:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea68:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea6c:	53                   	push   ebx
c000ea6d:	e8 a6 fe ff ff       	call   c000e918 <GDT::addEntry(GDTEntry)>
c000ea72:	83 c4 0c             	add    esp,0xc
c000ea75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea79:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea7d:	53                   	push   ebx
c000ea7e:	e8 95 fe ff ff       	call   c000e918 <GDT::addEntry(GDTEntry)>
c000ea83:	83 c4 0c             	add    esp,0xc
c000ea86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea8e:	53                   	push   ebx
c000ea8f:	e8 84 fe ff ff       	call   c000e918 <GDT::addEntry(GDTEntry)>
c000ea94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ea97:	e8 a6 fe ff ff       	call   c000e942 <GDT::flush()>
c000ea9c:	83 c4 40             	add    esp,0x40
c000ea9f:	5b                   	pop    ebx
c000eaa0:	5e                   	pop    esi
c000eaa1:	5f                   	pop    edi
c000eaa2:	c3                   	ret    

c000eaa3 <idleFunction(void*)>:
c000eaa3:	83 ec 0c             	sub    esp,0xc
c000eaa6:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c000eaad:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c000eab4:	75 01                	jne    c000eab7 <idleFunction(void*)+0x14>
c000eab6:	fb                   	sti    
c000eab7:	e8 9c bb 00 00       	call   c001a658 <HalSystemIdle()>
c000eabc:	e8 5d 73 01 00       	call   c0025e1e <idleCommon()>
c000eac1:	eb f4                	jmp    c000eab7 <idleFunction(void*)+0x14>
c000eac3:	90                   	nop

c000eac4 <IDTEntry::IDTEntry(bool)>:
c000eac4:	53                   	push   ebx
c000eac5:	83 ec 04             	sub    esp,0x4
c000eac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eacc:	88 04 24             	mov    BYTE PTR [esp],al
c000eacf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ead3:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ead9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eadd:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eae1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eae5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eae8:	83 e2 f0             	and    edx,0xfffffff0
c000eaeb:	83 ca 0e             	or     edx,0xe
c000eaee:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eaf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaf5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eaf8:	83 e2 ef             	and    edx,0xffffffef
c000eafb:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eafe:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000eb02:	85 c0                	test   eax,eax
c000eb04:	74 06                	je     c000eb0c <IDTEntry::IDTEntry(bool)+0x48>
c000eb06:	b2 03                	mov    dl,0x3
c000eb08:	eb 06                	jmp    c000eb10 <IDTEntry::IDTEntry(bool)+0x4c>
c000eb0a:	66 90                	xchg   ax,ax
c000eb0c:	b2 00                	mov    dl,0x0
c000eb0e:	66 90                	xchg   ax,ax
c000eb10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb14:	83 e2 03             	and    edx,0x3
c000eb17:	89 d3                	mov    ebx,edx
c000eb19:	c1 e3 05             	shl    ebx,0x5
c000eb1c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb1f:	83 e2 9f             	and    edx,0xffffff9f
c000eb22:	88 d1                	mov    cl,dl
c000eb24:	88 da                	mov    dl,bl
c000eb26:	09 ca                	or     edx,ecx
c000eb28:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb2f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb32:	83 ca 80             	or     edx,0xffffff80
c000eb35:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb38:	90                   	nop
c000eb39:	83 c4 04             	add    esp,0x4
c000eb3c:	5b                   	pop    ebx
c000eb3d:	c3                   	ret    

c000eb3e <IDTEntry::setOffset(unsigned int)>:
c000eb3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eb42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb46:	66 89 02             	mov    WORD PTR [edx],ax
c000eb49:	c1 e8 10             	shr    eax,0x10
c000eb4c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000eb50:	c3                   	ret    
c000eb51:	90                   	nop
c000eb52:	66 90                	xchg   ax,ax

c000eb54 <IDT::IDT()>:
c000eb54:	90                   	nop
c000eb55:	c3                   	ret    

c000eb56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000eb56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb5a:	83 c0 30             	add    eax,0x30
c000eb5d:	c3                   	ret    

c000eb5e <IDT::addEntry(IDTEntry, int)>:
c000eb5e:	53                   	push   ebx
c000eb5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb6f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000eb72:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000eb76:	5b                   	pop    ebx
c000eb77:	c3                   	ret    

c000eb78 <IDT::addEntry(int, void (*)(), bool)>:
c000eb78:	53                   	push   ebx
c000eb79:	83 ec 10             	sub    esp,0x10
c000eb7c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000eb81:	50                   	push   eax
c000eb82:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000eb86:	53                   	push   ebx
c000eb87:	e8 38 ff ff ff       	call   c000eac4 <IDTEntry::IDTEntry(bool)>
c000eb8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eb90:	53                   	push   ebx
c000eb91:	e8 a8 ff ff ff       	call   c000eb3e <IDTEntry::setOffset(unsigned int)>
c000eb96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb9a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eb9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eba2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000eba6:	e8 b3 ff ff ff       	call   c000eb5e <IDT::addEntry(IDTEntry, int)>
c000ebab:	83 c4 30             	add    esp,0x30
c000ebae:	5b                   	pop    ebx
c000ebaf:	c3                   	ret    

c000ebb0 <IDT::flush()>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	66 c7 05 20 11 03 c0 ff 07 	mov    WORD PTR ds:0xc0031120,0x7ff
c000ebbd:	a3 22 11 03 c0       	mov    ds:0xc0031122,eax
c000ebc2:	0f 01 1d 20 11 03 c0 	lidtd  ds:0xc0031120
c000ebc9:	c3                   	ret    

c000ebca <IDT::setup()>:
c000ebca:	57                   	push   edi
c000ebcb:	56                   	push   esi
c000ebcc:	53                   	push   ebx
c000ebcd:	83 ec 10             	sub    esp,0x10
c000ebd0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ebd4:	6a 00                	push   0x0
c000ebd6:	68 20 18 02 c0       	push   0xc0021820
c000ebdb:	6a 00                	push   0x0
c000ebdd:	53                   	push   ebx
c000ebde:	e8 95 ff ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ebe3:	6a 00                	push   0x0
c000ebe5:	68 30 18 02 c0       	push   0xc0021830
c000ebea:	6a 01                	push   0x1
c000ebec:	53                   	push   ebx
c000ebed:	e8 86 ff ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ebf2:	83 c4 20             	add    esp,0x20
c000ebf5:	6a 00                	push   0x0
c000ebf7:	68 3a 18 02 c0       	push   0xc002183a
c000ebfc:	6a 02                	push   0x2
c000ebfe:	53                   	push   ebx
c000ebff:	e8 74 ff ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ec04:	6a 00                	push   0x0
c000ec06:	68 44 18 02 c0       	push   0xc0021844
c000ec0b:	6a 03                	push   0x3
c000ec0d:	53                   	push   ebx
c000ec0e:	e8 65 ff ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ec13:	83 c4 20             	add    esp,0x20
c000ec16:	6a 00                	push   0x0
c000ec18:	68 4e 18 02 c0       	push   0xc002184e
c000ec1d:	6a 04                	push   0x4
c000ec1f:	53                   	push   ebx
c000ec20:	e8 53 ff ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ec25:	6a 00                	push   0x0
c000ec27:	68 58 18 02 c0       	push   0xc0021858
c000ec2c:	6a 05                	push   0x5
c000ec2e:	53                   	push   ebx
c000ec2f:	e8 44 ff ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ec34:	83 c4 20             	add    esp,0x20
c000ec37:	6a 00                	push   0x0
c000ec39:	68 62 18 02 c0       	push   0xc0021862
c000ec3e:	6a 06                	push   0x6
c000ec40:	53                   	push   ebx
c000ec41:	e8 32 ff ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ec46:	6a 00                	push   0x0
c000ec48:	68 6c 18 02 c0       	push   0xc002186c
c000ec4d:	6a 07                	push   0x7
c000ec4f:	53                   	push   ebx
c000ec50:	e8 23 ff ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ec55:	83 c4 20             	add    esp,0x20
c000ec58:	6a 00                	push   0x0
c000ec5a:	68 76 18 02 c0       	push   0xc0021876
c000ec5f:	6a 08                	push   0x8
c000ec61:	53                   	push   ebx
c000ec62:	e8 11 ff ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ec67:	6a 00                	push   0x0
c000ec69:	68 7e 18 02 c0       	push   0xc002187e
c000ec6e:	6a 09                	push   0x9
c000ec70:	53                   	push   ebx
c000ec71:	e8 02 ff ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ec76:	83 c4 20             	add    esp,0x20
c000ec79:	6a 00                	push   0x0
c000ec7b:	68 88 18 02 c0       	push   0xc0021888
c000ec80:	6a 0a                	push   0xa
c000ec82:	53                   	push   ebx
c000ec83:	e8 f0 fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ec88:	6a 00                	push   0x0
c000ec8a:	68 90 18 02 c0       	push   0xc0021890
c000ec8f:	6a 0b                	push   0xb
c000ec91:	53                   	push   ebx
c000ec92:	e8 e1 fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ec97:	83 c4 20             	add    esp,0x20
c000ec9a:	6a 00                	push   0x0
c000ec9c:	68 98 18 02 c0       	push   0xc0021898
c000eca1:	6a 0c                	push   0xc
c000eca3:	53                   	push   ebx
c000eca4:	e8 cf fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000eca9:	6a 00                	push   0x0
c000ecab:	68 a0 18 02 c0       	push   0xc00218a0
c000ecb0:	6a 0d                	push   0xd
c000ecb2:	53                   	push   ebx
c000ecb3:	e8 c0 fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ecb8:	83 c4 20             	add    esp,0x20
c000ecbb:	6a 00                	push   0x0
c000ecbd:	68 ba 18 02 c0       	push   0xc00218ba
c000ecc2:	6a 0e                	push   0xe
c000ecc4:	53                   	push   ebx
c000ecc5:	e8 ae fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ecca:	6a 00                	push   0x0
c000eccc:	68 c2 18 02 c0       	push   0xc00218c2
c000ecd1:	6a 0f                	push   0xf
c000ecd3:	53                   	push   ebx
c000ecd4:	e8 9f fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ecd9:	83 c4 20             	add    esp,0x20
c000ecdc:	6a 00                	push   0x0
c000ecde:	68 cc 18 02 c0       	push   0xc00218cc
c000ece3:	6a 10                	push   0x10
c000ece5:	53                   	push   ebx
c000ece6:	e8 8d fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000eceb:	6a 00                	push   0x0
c000eced:	68 d6 18 02 c0       	push   0xc00218d6
c000ecf2:	6a 11                	push   0x11
c000ecf4:	53                   	push   ebx
c000ecf5:	e8 7e fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ecfa:	83 c4 20             	add    esp,0x20
c000ecfd:	6a 00                	push   0x0
c000ecff:	68 e0 18 02 c0       	push   0xc00218e0
c000ed04:	6a 12                	push   0x12
c000ed06:	53                   	push   ebx
c000ed07:	e8 6c fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ed0c:	6a 01                	push   0x1
c000ed0e:	68 7a 19 02 c0       	push   0xc002197a
c000ed13:	6a 60                	push   0x60
c000ed15:	53                   	push   ebx
c000ed16:	e8 5d fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ed1b:	83 c4 20             	add    esp,0x20
c000ed1e:	6a 00                	push   0x0
c000ed20:	68 81 19 02 c0       	push   0xc0021981
c000ed25:	6a 20                	push   0x20
c000ed27:	53                   	push   ebx
c000ed28:	e8 4b fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ed2d:	6a 00                	push   0x0
c000ed2f:	68 6c 19 02 c0       	push   0xc002196c
c000ed34:	6a 21                	push   0x21
c000ed36:	53                   	push   ebx
c000ed37:	e8 3c fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ed3c:	83 c4 20             	add    esp,0x20
c000ed3f:	6a 00                	push   0x0
c000ed41:	68 73 19 02 c0       	push   0xc0021973
c000ed46:	6a 22                	push   0x22
c000ed48:	53                   	push   ebx
c000ed49:	e8 2a fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ed4e:	6a 00                	push   0x0
c000ed50:	68 ea 18 02 c0       	push   0xc00218ea
c000ed55:	6a 23                	push   0x23
c000ed57:	53                   	push   ebx
c000ed58:	e8 1b fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ed5d:	83 c4 20             	add    esp,0x20
c000ed60:	6a 00                	push   0x0
c000ed62:	68 f4 18 02 c0       	push   0xc00218f4
c000ed67:	6a 24                	push   0x24
c000ed69:	53                   	push   ebx
c000ed6a:	e8 09 fe ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ed6f:	6a 00                	push   0x0
c000ed71:	68 fe 18 02 c0       	push   0xc00218fe
c000ed76:	6a 25                	push   0x25
c000ed78:	53                   	push   ebx
c000ed79:	e8 fa fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ed7e:	83 c4 20             	add    esp,0x20
c000ed81:	6a 00                	push   0x0
c000ed83:	68 08 19 02 c0       	push   0xc0021908
c000ed88:	6a 26                	push   0x26
c000ed8a:	53                   	push   ebx
c000ed8b:	e8 e8 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ed90:	6a 00                	push   0x0
c000ed92:	68 12 19 02 c0       	push   0xc0021912
c000ed97:	6a 27                	push   0x27
c000ed99:	53                   	push   ebx
c000ed9a:	e8 d9 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ed9f:	83 c4 20             	add    esp,0x20
c000eda2:	6a 00                	push   0x0
c000eda4:	68 1c 19 02 c0       	push   0xc002191c
c000eda9:	6a 28                	push   0x28
c000edab:	53                   	push   ebx
c000edac:	e8 c7 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000edb1:	6a 00                	push   0x0
c000edb3:	68 26 19 02 c0       	push   0xc0021926
c000edb8:	6a 29                	push   0x29
c000edba:	53                   	push   ebx
c000edbb:	e8 b8 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000edc0:	83 c4 20             	add    esp,0x20
c000edc3:	6a 00                	push   0x0
c000edc5:	68 30 19 02 c0       	push   0xc0021930
c000edca:	6a 2a                	push   0x2a
c000edcc:	53                   	push   ebx
c000edcd:	e8 a6 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000edd2:	6a 00                	push   0x0
c000edd4:	68 3a 19 02 c0       	push   0xc002193a
c000edd9:	6a 2b                	push   0x2b
c000eddb:	53                   	push   ebx
c000eddc:	e8 97 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ede1:	83 c4 20             	add    esp,0x20
c000ede4:	6a 00                	push   0x0
c000ede6:	68 44 19 02 c0       	push   0xc0021944
c000edeb:	6a 2c                	push   0x2c
c000eded:	53                   	push   ebx
c000edee:	e8 85 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000edf3:	6a 00                	push   0x0
c000edf5:	68 4e 19 02 c0       	push   0xc002194e
c000edfa:	6a 2d                	push   0x2d
c000edfc:	53                   	push   ebx
c000edfd:	e8 76 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ee02:	83 c4 20             	add    esp,0x20
c000ee05:	6a 00                	push   0x0
c000ee07:	68 58 19 02 c0       	push   0xc0021958
c000ee0c:	6a 2e                	push   0x2e
c000ee0e:	53                   	push   ebx
c000ee0f:	e8 64 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ee14:	6a 00                	push   0x0
c000ee16:	68 62 19 02 c0       	push   0xc0021962
c000ee1b:	6a 2f                	push   0x2f
c000ee1d:	53                   	push   ebx
c000ee1e:	e8 55 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ee23:	83 c4 20             	add    esp,0x20
c000ee26:	6a 00                	push   0x0
c000ee28:	68 88 1a 02 c0       	push   0xc0021a88
c000ee2d:	6a 30                	push   0x30
c000ee2f:	53                   	push   ebx
c000ee30:	e8 43 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ee35:	6a 00                	push   0x0
c000ee37:	68 92 1a 02 c0       	push   0xc0021a92
c000ee3c:	6a 31                	push   0x31
c000ee3e:	53                   	push   ebx
c000ee3f:	e8 34 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ee44:	83 c4 20             	add    esp,0x20
c000ee47:	6a 00                	push   0x0
c000ee49:	68 9c 1a 02 c0       	push   0xc0021a9c
c000ee4e:	6a 32                	push   0x32
c000ee50:	53                   	push   ebx
c000ee51:	e8 22 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ee56:	6a 00                	push   0x0
c000ee58:	68 a6 1a 02 c0       	push   0xc0021aa6
c000ee5d:	6a 33                	push   0x33
c000ee5f:	53                   	push   ebx
c000ee60:	e8 13 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ee65:	83 c4 20             	add    esp,0x20
c000ee68:	6a 00                	push   0x0
c000ee6a:	68 b0 1a 02 c0       	push   0xc0021ab0
c000ee6f:	6a 34                	push   0x34
c000ee71:	53                   	push   ebx
c000ee72:	e8 01 fd ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ee77:	6a 00                	push   0x0
c000ee79:	68 ba 1a 02 c0       	push   0xc0021aba
c000ee7e:	6a 35                	push   0x35
c000ee80:	53                   	push   ebx
c000ee81:	e8 f2 fc ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ee86:	83 c4 20             	add    esp,0x20
c000ee89:	6a 00                	push   0x0
c000ee8b:	68 c4 1a 02 c0       	push   0xc0021ac4
c000ee90:	6a 36                	push   0x36
c000ee92:	53                   	push   ebx
c000ee93:	e8 e0 fc ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000ee98:	6a 00                	push   0x0
c000ee9a:	68 ce 1a 02 c0       	push   0xc0021ace
c000ee9f:	6a 37                	push   0x37
c000eea1:	53                   	push   ebx
c000eea2:	e8 d1 fc ff ff       	call   c000eb78 <IDT::addEntry(int, void (*)(), bool)>
c000eea7:	83 c4 1c             	add    esp,0x1c
c000eeaa:	6a 03                	push   0x3
c000eeac:	6a 02                	push   0x2
c000eeae:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000eeb4:	e8 7d 4b 00 00       	call   c0013a36 <VAS::allocatePages(int, int)>
c000eeb9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000eec0:	89 c6                	mov    esi,eax
c000eec2:	e8 9c 09 00 00       	call   c000f863 <malloc>
c000eec7:	81 c6 00 20 00 00    	add    esi,0x2000
c000eecd:	89 04 24             	mov    DWORD PTR [esp],eax
c000eed0:	89 c7                	mov    edi,eax
c000eed2:	e8 29 3c 00 00       	call   c0012b00 <TSS::TSS()>
c000eed7:	83 c4 0c             	add    esp,0xc
c000eeda:	68 76 18 02 c0       	push   0xc0021876
c000eedf:	56                   	push   esi
c000eee0:	57                   	push   edi
c000eee1:	e8 5e 3c 00 00       	call   c0012b44 <TSS::setup(unsigned long, unsigned long)>
c000eee6:	89 c6                	mov    esi,eax
c000eee8:	58                   	pop    eax
c000eee9:	5a                   	pop    edx
c000eeea:	6a 00                	push   0x0
c000eeec:	8d 44 24 14          	lea    eax,[esp+0x14]
c000eef0:	50                   	push   eax
c000eef1:	e8 ce fb ff ff       	call   c000eac4 <IDTEntry::IDTEntry(bool)>
c000eef6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eefa:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000eeff:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef06:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef10:	80 ce 05             	or     dh,0x5
c000ef13:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef16:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef1e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef24:	e8 87 fc ff ff       	call   c000ebb0 <IDT::flush()>
c000ef29:	83 c4 20             	add    esp,0x20
c000ef2c:	5b                   	pop    ebx
c000ef2d:	5e                   	pop    esi
c000ef2e:	5f                   	pop    edi
c000ef2f:	c3                   	ret    

c000ef30 <CPU::current()>:
c000ef30:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c000ef35:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ef3b:	c3                   	ret    

c000ef3c <operator new(unsigned long)>:
c000ef3c:	e9 22 09 00 00       	jmp    c000f863 <malloc>

c000ef41 <operator delete(void*)>:
c000ef41:	e9 3d 09 00 00       	jmp    c000f883 <rfree>

c000ef46 <disableIRQs()>:
c000ef46:	fa                   	cli    
c000ef47:	c3                   	ret    

c000ef48 <enableIRQs()>:
c000ef48:	fb                   	sti    
c000ef49:	c3                   	ret    

c000ef4a <lockScheduler()>:
c000ef4a:	fa                   	cli    
c000ef4b:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c000ef51:	c3                   	ret    

c000ef52 <unlockScheduler()>:
c000ef52:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c000ef59:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c000ef60:	75 01                	jne    c000ef63 <unlockScheduler()+0x11>
c000ef62:	fb                   	sti    
c000ef63:	c3                   	ret    

c000ef64 <lockStuff()>:
c000ef64:	fa                   	cli    
c000ef65:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c000ef6b:	ff 05 2c 13 03 c0    	inc    DWORD PTR ds:0xc003132c
c000ef71:	c3                   	ret    

c000ef72 <unlockStuff()>:
c000ef72:	83 ec 0c             	sub    esp,0xc
c000ef75:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c000ef7a:	48                   	dec    eax
c000ef7b:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c000ef80:	75 18                	jne    c000ef9a <unlockStuff()+0x28>
c000ef82:	83 3d 28 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031328,0x0
c000ef89:	74 0f                	je     c000ef9a <unlockStuff()+0x28>
c000ef8b:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c000ef95:	e8 a6 78 00 00       	call   c0016840 <schedule()>
c000ef9a:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c000efa1:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c000efa8:	75 01                	jne    c000efab <unlockStuff()+0x39>
c000efaa:	fb                   	sti    
c000efab:	83 c4 0c             	add    esp,0xc
c000efae:	c3                   	ret    

c000efaf <Virt::getAKernelVAS()>:
c000efaf:	a1 90 12 03 c0       	mov    eax,ds:0xc0031290
c000efb4:	c3                   	ret    

c000efb5 <__not_memcpy>:
c000efb5:	57                   	push   edi
c000efb6:	56                   	push   esi
c000efb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000efbf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000efc3:	89 c7                	mov    edi,eax
c000efc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efc7:	5e                   	pop    esi
c000efc8:	5f                   	pop    edi
c000efc9:	c3                   	ret    

c000efca <KeFormatDate(char*, int, int, int, int, bool)>:
c000efca:	55                   	push   ebp
c000efcb:	b9 0a 00 00 00       	mov    ecx,0xa
c000efd0:	57                   	push   edi
c000efd1:	56                   	push   esi
c000efd2:	53                   	push   ebx
c000efd3:	bb e8 03 00 00       	mov    ebx,0x3e8
c000efd8:	81 ec ac 00 00 00    	sub    esp,0xac
c000efde:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000efe5:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000efea:	99                   	cdq    
c000efeb:	f7 f9                	idiv   ecx
c000efed:	89 d5                	mov    ebp,edx
c000efef:	99                   	cdq    
c000eff0:	f7 f9                	idiv   ecx
c000eff2:	8d 42 30             	lea    eax,[edx+0x30]
c000eff5:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eff9:	8d 45 30             	lea    eax,[ebp+0x30]
c000effc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f000:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f007:	99                   	cdq    
c000f008:	f7 fb                	idiv   ebx
c000f00a:	bb 64 00 00 00       	mov    ebx,0x64
c000f00f:	99                   	cdq    
c000f010:	f7 f9                	idiv   ecx
c000f012:	8d 42 30             	lea    eax,[edx+0x30]
c000f015:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f019:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f020:	99                   	cdq    
c000f021:	f7 fb                	idiv   ebx
c000f023:	31 db                	xor    ebx,ebx
c000f025:	99                   	cdq    
c000f026:	f7 f9                	idiv   ecx
c000f028:	8d 42 30             	lea    eax,[edx+0x30]
c000f02b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f02f:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f037:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f03b:	0f be 8b 44 11 03 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffceebc]
c000f042:	83 f9 59             	cmp    ecx,0x59
c000f045:	74 1c                	je     c000f063 <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f047:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f04e:	83 f9 4d             	cmp    ecx,0x4d
c000f051:	0f 84 e3 00 00 00    	je     c000f13a <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f057:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f05e:	e9 d7 00 00 00       	jmp    c000f13a <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f063:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f068:	74 27                	je     c000f091 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f06a:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f06e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f073:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f077:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f07b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f07f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f083:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f087:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f08b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f08f:	eb 15                	jmp    c000f0a6 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f091:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f095:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f099:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f09d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f0a1:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f0a6:	50                   	push   eax
c000f0a7:	50                   	push   eax
c000f0a8:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f0ac:	57                   	push   edi
c000f0ad:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f0b1:	56                   	push   esi
c000f0b2:	e8 89 17 ff ff       	call   c0000840 <strcat>
c000f0b7:	83 c4 10             	add    esp,0x10
c000f0ba:	83 fb 02             	cmp    ebx,0x2
c000f0bd:	74 1a                	je     c000f0d9 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f0bf:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f0c4:	a1 48 11 03 c0       	mov    eax,ds:0xc0031148
c000f0c9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f0cd:	55                   	push   ebp
c000f0ce:	55                   	push   ebp
c000f0cf:	57                   	push   edi
c000f0d0:	56                   	push   esi
c000f0d1:	e8 6a 17 ff ff       	call   c0000840 <strcat>
c000f0d6:	83 c4 10             	add    esp,0x10
c000f0d9:	43                   	inc    ebx
c000f0da:	83 fb 03             	cmp    ebx,0x3
c000f0dd:	0f 85 58 ff ff ff    	jne    c000f03b <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f0e3:	51                   	push   ecx
c000f0e4:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f0eb:	6a 00                	push   0x0
c000f0ed:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f0f4:	e8 f7 13 ff ff       	call   c00004f0 <memset>
c000f0f9:	89 34 24             	mov    DWORD PTR [esp],esi
c000f0fc:	e8 6f 14 ff ff       	call   c0000570 <strlen>
c000f101:	83 c4 10             	add    esp,0x10
c000f104:	40                   	inc    eax
c000f105:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f10c:	72 17                	jb     c000f125 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f10e:	52                   	push   edx
c000f10f:	52                   	push   edx
c000f110:	56                   	push   esi
c000f111:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f118:	e8 23 15 ff ff       	call   c0000640 <strcpy>
c000f11d:	83 c4 10             	add    esp,0x10
c000f120:	e9 8a 00 00 00       	jmp    c000f1af <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f125:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f12c:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f133:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f136:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f138:	eb 75                	jmp    c000f1af <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f13a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f13e:	89 ef                	mov    edi,ebp
c000f140:	50                   	push   eax
c000f141:	c1 ff 1f             	sar    edi,0x1f
c000f144:	50                   	push   eax
c000f145:	57                   	push   edi
c000f146:	55                   	push   ebp
c000f147:	e8 70 04 00 00       	call   c000f5bc <KeGetDigitsInNumber(long long)>
c000f14c:	83 c4 10             	add    esp,0x10
c000f14f:	48                   	dec    eax
c000f150:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f154:	75 1c                	jne    c000f172 <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f156:	83 f9 44             	cmp    ecx,0x44
c000f159:	75 09                	jne    c000f164 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f15b:	80 3d 60 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031160,0x0
c000f162:	eb 0c                	jmp    c000f170 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f164:	83 f9 4d             	cmp    ecx,0x4d
c000f167:	75 2b                	jne    c000f194 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f169:	80 3d 61 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031161,0x0
c000f170:	74 22                	je     c000f194 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f172:	89 e8                	mov    eax,ebp
c000f174:	b9 0a 00 00 00       	mov    ecx,0xa
c000f179:	99                   	cdq    
c000f17a:	f7 f9                	idiv   ecx
c000f17c:	89 d5                	mov    ebp,edx
c000f17e:	99                   	cdq    
c000f17f:	f7 f9                	idiv   ecx
c000f181:	83 c2 30             	add    edx,0x30
c000f184:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f188:	8d 55 30             	lea    edx,[ebp+0x30]
c000f18b:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f18f:	e9 0d ff ff ff       	jmp    c000f0a1 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f194:	89 e8                	mov    eax,ebp
c000f196:	b9 0a 00 00 00       	mov    ecx,0xa
c000f19b:	99                   	cdq    
c000f19c:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f1a1:	f7 f9                	idiv   ecx
c000f1a3:	83 c2 30             	add    edx,0x30
c000f1a6:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f1aa:	e9 f7 fe ff ff       	jmp    c000f0a6 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f1af:	81 c4 ac 00 00 00    	add    esp,0xac
c000f1b5:	5b                   	pop    ebx
c000f1b6:	5e                   	pop    esi
c000f1b7:	5f                   	pop    edi
c000f1b8:	5d                   	pop    ebp
c000f1b9:	c3                   	ret    

c000f1ba <KeFormatShortDate(char*, int, int, int, int)>:
c000f1ba:	83 ec 14             	sub    esp,0x14
c000f1bd:	6a 00                	push   0x0
c000f1bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1d3:	e8 f2 fd ff ff       	call   c000efca <KeFormatDate(char*, int, int, int, int, bool)>
c000f1d8:	83 c4 2c             	add    esp,0x2c
c000f1db:	c3                   	ret    

c000f1dc <KeFormatLongDate(char*, int, int, int, int)>:
c000f1dc:	83 ec 14             	sub    esp,0x14
c000f1df:	6a 01                	push   0x1
c000f1e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1f5:	e8 d0 fd ff ff       	call   c000efca <KeFormatDate(char*, int, int, int, int, bool)>
c000f1fa:	83 c4 2c             	add    esp,0x2c
c000f1fd:	c3                   	ret    

c000f1fe <KeSetLocale(klocale_t)>:
c000f1fe:	57                   	push   edi
c000f1ff:	b9 09 00 00 00       	mov    ecx,0x9
c000f204:	56                   	push   esi
c000f205:	bf 40 11 03 c0       	mov    edi,0xc0031140
c000f20a:	fc                   	cld    
c000f20b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f20f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f211:	5e                   	pop    esi
c000f212:	5f                   	pop    edi
c000f213:	c3                   	ret    

c000f214 <KeInitialiseLocale()>:
c000f214:	57                   	push   edi
c000f215:	56                   	push   esi
c000f216:	83 ec 3c             	sub    esp,0x3c
c000f219:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f221:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f229:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f231:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f239:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f240:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f248:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f250:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f257:	68 ec 7c 02 c0       	push   0xc0027cec
c000f25c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f260:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f264:	50                   	push   eax
c000f265:	e8 d6 13 ff ff       	call   c0000640 <strcpy>
c000f26a:	83 ec 20             	sub    esp,0x20
c000f26d:	b9 09 00 00 00       	mov    ecx,0x9
c000f272:	fc                   	cld    
c000f273:	89 e7                	mov    edi,esp
c000f275:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f277:	e8 82 ff ff ff       	call   c000f1fe <KeSetLocale(klocale_t)>
c000f27c:	83 c4 64             	add    esp,0x64
c000f27f:	5e                   	pop    esi
c000f280:	5f                   	pop    edi
c000f281:	c3                   	ret    

c000f282 <KeFormatCurrency(char*, int, long long, long long)>:
c000f282:	c3                   	ret    

c000f283 <KeFormatCurrency(char*, int, double)>:
c000f283:	c3                   	ret    

c000f284 <KeFormatNumber(char*, long long, long long)>:
c000f284:	c3                   	ret    

c000f285 <KeFormatNumber(char*, double)>:
c000f285:	c3                   	ret    
c000f286:	66 90                	xchg   ax,ax

c000f288 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f288:	55                   	push   ebp
c000f289:	57                   	push   edi
c000f28a:	56                   	push   esi
c000f28b:	53                   	push   ebx
c000f28c:	83 ec 5c             	sub    esp,0x5c
c000f28f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f293:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f297:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f29b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f29f:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f2a3:	bb 0f 6b 02 c0       	mov    ebx,0xc0026b0f
c000f2a8:	bd 11 00 00 00       	mov    ebp,0x11
c000f2ad:	89 d0                	mov    eax,edx
c000f2af:	83 e0 01             	and    eax,0x1
c000f2b2:	74 10                	je     c000f2c4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f2b4:	8a 03                	mov    al,BYTE PTR [ebx]
c000f2b6:	88 02                	mov    BYTE PTR [edx],al
c000f2b8:	8d 52 01             	lea    edx,[edx+0x1]
c000f2bb:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f2be:	83 ed 01             	sub    ebp,0x1
c000f2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2c4:	89 d0                	mov    eax,edx
c000f2c6:	83 e0 02             	and    eax,0x2
c000f2c9:	74 11                	je     c000f2dc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f2cb:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f2ce:	66 89 02             	mov    WORD PTR [edx],ax
c000f2d1:	8d 52 02             	lea    edx,[edx+0x2]
c000f2d4:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f2d7:	83 ed 02             	sub    ebp,0x2
c000f2da:	66 90                	xchg   ax,ax
c000f2dc:	89 e8                	mov    eax,ebp
c000f2de:	c1 e8 02             	shr    eax,0x2
c000f2e1:	fc                   	cld    
c000f2e2:	89 d7                	mov    edi,edx
c000f2e4:	89 de                	mov    esi,ebx
c000f2e6:	89 c1                	mov    ecx,eax
c000f2e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f2ea:	89 f3                	mov    ebx,esi
c000f2ec:	89 fa                	mov    edx,edi
c000f2ee:	b9 00 00 00 00       	mov    ecx,0x0
c000f2f3:	89 e8                	mov    eax,ebp
c000f2f5:	83 e0 02             	and    eax,0x2
c000f2f8:	74 0e                	je     c000f308 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f2fa:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f2fe:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f302:	8d 41 02             	lea    eax,[ecx+0x2]
c000f305:	89 c1                	mov    ecx,eax
c000f307:	90                   	nop
c000f308:	89 e8                	mov    eax,ebp
c000f30a:	83 e0 01             	and    eax,0x1
c000f30d:	74 09                	je     c000f318 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f30f:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f312:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f315:	8d 76 00             	lea    esi,[esi+0x0]
c000f318:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f31c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f320:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f324:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f328:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f32c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f330:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f335:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f339:	89 c2                	mov    edx,eax
c000f33b:	c1 fa 1f             	sar    edx,0x1f
c000f33e:	52                   	push   edx
c000f33f:	50                   	push   eax
c000f340:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f344:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f348:	e8 27 2b 01 00       	call   c0021e74 <__udivdi3>
c000f34d:	83 c4 10             	add    esp,0x10
c000f350:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f354:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f358:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f35c:	80 f4 00             	xor    ah,0x0
c000f35f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f363:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f367:	80 f4 00             	xor    ah,0x0
c000f36a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f36e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f372:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f376:	89 f8                	mov    eax,edi
c000f378:	09 f0                	or     eax,esi
c000f37a:	74 04                	je     c000f380 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f37c:	eb b2                	jmp    c000f330 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f37e:	66 90                	xchg   ax,ax
c000f380:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f384:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f387:	90                   	nop
c000f388:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f38c:	89 c1                	mov    ecx,eax
c000f38e:	89 c3                	mov    ebx,eax
c000f390:	c1 fb 1f             	sar    ebx,0x1f
c000f393:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f397:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f39b:	53                   	push   ebx
c000f39c:	51                   	push   ecx
c000f39d:	52                   	push   edx
c000f39e:	50                   	push   eax
c000f39f:	e8 d0 2b 01 00       	call   c0021f74 <__umoddi3>
c000f3a4:	83 c4 10             	add    esp,0x10
c000f3a7:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f3ac:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f3b0:	01 c8                	add    eax,ecx
c000f3b2:	8a 10                	mov    dl,BYTE PTR [eax]
c000f3b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3b8:	88 10                	mov    BYTE PTR [eax],dl
c000f3ba:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f3be:	89 c2                	mov    edx,eax
c000f3c0:	c1 fa 1f             	sar    edx,0x1f
c000f3c3:	52                   	push   edx
c000f3c4:	50                   	push   eax
c000f3c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f3c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f3cd:	e8 a2 2a 01 00       	call   c0021e74 <__udivdi3>
c000f3d2:	83 c4 10             	add    esp,0x10
c000f3d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f3d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3e1:	80 f4 00             	xor    ah,0x0
c000f3e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f3e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f3ec:	80 f4 00             	xor    ah,0x0
c000f3ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f3f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f3f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f3fb:	89 f8                	mov    eax,edi
c000f3fd:	09 f0                	or     eax,esi
c000f3ff:	74 03                	je     c000f404 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f401:	eb 85                	jmp    c000f388 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f403:	90                   	nop
c000f404:	90                   	nop
c000f405:	83 c4 5c             	add    esp,0x5c
c000f408:	5b                   	pop    ebx
c000f409:	5e                   	pop    esi
c000f40a:	5f                   	pop    edi
c000f40b:	5d                   	pop    ebp
c000f40c:	c3                   	ret    
c000f40d:	8d 76 00             	lea    esi,[esi+0x0]

c000f410 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f410:	55                   	push   ebp
c000f411:	57                   	push   edi
c000f412:	56                   	push   esi
c000f413:	53                   	push   ebx
c000f414:	83 ec 5c             	sub    esp,0x5c
c000f417:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f41b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f41f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f423:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f427:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f42b:	bb 0f 6b 02 c0       	mov    ebx,0xc0026b0f
c000f430:	bd 11 00 00 00       	mov    ebp,0x11
c000f435:	89 d0                	mov    eax,edx
c000f437:	83 e0 01             	and    eax,0x1
c000f43a:	74 10                	je     c000f44c <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f43c:	8a 03                	mov    al,BYTE PTR [ebx]
c000f43e:	88 02                	mov    BYTE PTR [edx],al
c000f440:	8d 52 01             	lea    edx,[edx+0x1]
c000f443:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f446:	83 ed 01             	sub    ebp,0x1
c000f449:	8d 76 00             	lea    esi,[esi+0x0]
c000f44c:	89 d0                	mov    eax,edx
c000f44e:	83 e0 02             	and    eax,0x2
c000f451:	74 11                	je     c000f464 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f453:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f456:	66 89 02             	mov    WORD PTR [edx],ax
c000f459:	8d 52 02             	lea    edx,[edx+0x2]
c000f45c:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f45f:	83 ed 02             	sub    ebp,0x2
c000f462:	66 90                	xchg   ax,ax
c000f464:	89 e8                	mov    eax,ebp
c000f466:	c1 e8 02             	shr    eax,0x2
c000f469:	fc                   	cld    
c000f46a:	89 d7                	mov    edi,edx
c000f46c:	89 de                	mov    esi,ebx
c000f46e:	89 c1                	mov    ecx,eax
c000f470:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f472:	89 f3                	mov    ebx,esi
c000f474:	89 fa                	mov    edx,edi
c000f476:	b9 00 00 00 00       	mov    ecx,0x0
c000f47b:	89 e8                	mov    eax,ebp
c000f47d:	83 e0 02             	and    eax,0x2
c000f480:	74 0e                	je     c000f490 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f482:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f486:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f48a:	8d 41 02             	lea    eax,[ecx+0x2]
c000f48d:	89 c1                	mov    ecx,eax
c000f48f:	90                   	nop
c000f490:	89 e8                	mov    eax,ebp
c000f492:	83 e0 01             	and    eax,0x1
c000f495:	74 09                	je     c000f4a0 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f497:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f49a:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f49d:	8d 76 00             	lea    esi,[esi+0x0]
c000f4a0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f4a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f4a8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f4ad:	79 1d                	jns    c000f4cc <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f4af:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f4b3:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f4b8:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f4bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f4c0:	8d 50 01             	lea    edx,[eax+0x1]
c000f4c3:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f4c7:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f4ca:	66 90                	xchg   ax,ax
c000f4cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f4d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f4d4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f4d8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f4dc:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f4e1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f4e5:	89 c2                	mov    edx,eax
c000f4e7:	c1 fa 1f             	sar    edx,0x1f
c000f4ea:	52                   	push   edx
c000f4eb:	50                   	push   eax
c000f4ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f4f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f4f4:	e8 7b 29 01 00       	call   c0021e74 <__udivdi3>
c000f4f9:	83 c4 10             	add    esp,0x10
c000f4fc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f500:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f504:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f508:	80 f4 00             	xor    ah,0x0
c000f50b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f50f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f513:	80 f4 00             	xor    ah,0x0
c000f516:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f51a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f51e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f522:	89 f8                	mov    eax,edi
c000f524:	09 f0                	or     eax,esi
c000f526:	74 04                	je     c000f52c <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f528:	eb b2                	jmp    c000f4dc <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f52a:	66 90                	xchg   ax,ax
c000f52c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f530:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f533:	90                   	nop
c000f534:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f538:	89 c1                	mov    ecx,eax
c000f53a:	89 c3                	mov    ebx,eax
c000f53c:	c1 fb 1f             	sar    ebx,0x1f
c000f53f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f543:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f547:	53                   	push   ebx
c000f548:	51                   	push   ecx
c000f549:	52                   	push   edx
c000f54a:	50                   	push   eax
c000f54b:	e8 a4 27 01 00       	call   c0021cf4 <__moddi3>
c000f550:	83 c4 10             	add    esp,0x10
c000f553:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f558:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f55c:	01 c8                	add    eax,ecx
c000f55e:	8a 10                	mov    dl,BYTE PTR [eax]
c000f560:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f564:	88 10                	mov    BYTE PTR [eax],dl
c000f566:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f56a:	89 c2                	mov    edx,eax
c000f56c:	c1 fa 1f             	sar    edx,0x1f
c000f56f:	52                   	push   edx
c000f570:	50                   	push   eax
c000f571:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f575:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f579:	e8 2a 26 01 00       	call   c0021ba8 <__divdi3>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f585:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f589:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f58d:	80 f4 00             	xor    ah,0x0
c000f590:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f594:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f598:	80 f4 00             	xor    ah,0x0
c000f59b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f59f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f5a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f5a7:	89 f8                	mov    eax,edi
c000f5a9:	09 f0                	or     eax,esi
c000f5ab:	74 03                	je     c000f5b0 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000f5ad:	eb 85                	jmp    c000f534 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000f5af:	90                   	nop
c000f5b0:	90                   	nop
c000f5b1:	83 c4 5c             	add    esp,0x5c
c000f5b4:	5b                   	pop    ebx
c000f5b5:	5e                   	pop    esi
c000f5b6:	5f                   	pop    edi
c000f5b7:	5d                   	pop    ebp
c000f5b8:	c3                   	ret    
c000f5b9:	8d 76 00             	lea    esi,[esi+0x0]

c000f5bc <KeGetDigitsInNumber(long long)>:
c000f5bc:	56                   	push   esi
c000f5bd:	53                   	push   ebx
c000f5be:	83 ec 24             	sub    esp,0x24
c000f5c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f5c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f5c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f5d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f5d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f5dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5e0:	80 f4 00             	xor    ah,0x0
c000f5e3:	89 c3                	mov    ebx,eax
c000f5e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5e9:	80 f4 00             	xor    ah,0x0
c000f5ec:	89 c6                	mov    esi,eax
c000f5ee:	89 f0                	mov    eax,esi
c000f5f0:	09 d8                	or     eax,ebx
c000f5f2:	74 28                	je     c000f61c <KeGetDigitsInNumber(long long)+0x60>
c000f5f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5fc:	6a 00                	push   0x0
c000f5fe:	6a 0a                	push   0xa
c000f600:	52                   	push   edx
c000f601:	50                   	push   eax
c000f602:	e8 a1 25 01 00       	call   c0021ba8 <__divdi3>
c000f607:	83 c4 10             	add    esp,0x10
c000f60a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f60e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f612:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f617:	eb c3                	jmp    c000f5dc <KeGetDigitsInNumber(long long)+0x20>
c000f619:	8d 76 00             	lea    esi,[esi+0x0]
c000f61c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f620:	83 c4 24             	add    esp,0x24
c000f623:	5b                   	pop    ebx
c000f624:	5e                   	pop    esi
c000f625:	c3                   	ret    
c000f626:	66 90                	xchg   ax,ax

c000f628 <KeItoa(unsigned long long, char*)>:
c000f628:	83 ec 1c             	sub    esp,0x1c
c000f62b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f62f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f633:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f637:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f63b:	6a 0a                	push   0xa
c000f63d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f649:	e8 3a fc ff ff       	call   c000f288 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f64e:	83 c4 10             	add    esp,0x10
c000f651:	90                   	nop
c000f652:	83 c4 1c             	add    esp,0x1c
c000f655:	c3                   	ret    
c000f656:	66 90                	xchg   ax,ax

c000f658 <KeItoa(long long, char*)>:
c000f658:	83 ec 1c             	sub    esp,0x1c
c000f65b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f65f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f667:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f66b:	6a 0a                	push   0xa
c000f66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f675:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f679:	e8 92 fd ff ff       	call   c000f410 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f67e:	83 c4 10             	add    esp,0x10
c000f681:	90                   	nop
c000f682:	83 c4 1c             	add    esp,0x1c
c000f685:	c3                   	ret    
c000f686:	66 90                	xchg   ax,ax

c000f688 <KeXtoa(unsigned long long, char*)>:
c000f688:	83 ec 1c             	sub    esp,0x1c
c000f68b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f68f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f693:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f697:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f69b:	6a 10                	push   0x10
c000f69d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6a9:	e8 da fb ff ff       	call   c000f288 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f6ae:	83 c4 10             	add    esp,0x10
c000f6b1:	90                   	nop
c000f6b2:	83 c4 1c             	add    esp,0x1c
c000f6b5:	c3                   	ret    

c000f6b6 <sbrk>:
c000f6b6:	55                   	push   ebp
c000f6b7:	57                   	push   edi
c000f6b8:	56                   	push   esi
c000f6b9:	53                   	push   ebx
c000f6ba:	83 ec 1c             	sub    esp,0x1c
c000f6bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6c1:	85 c0                	test   eax,eax
c000f6c3:	74 61                	je     c000f726 <sbrk+0x70>
c000f6c5:	78 66                	js     c000f72d <sbrk+0x77>
c000f6c7:	8b 15 70 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b370
c000f6cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6d1:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d6:	89 c5                	mov    ebp,eax
c000f6d8:	78 6b                	js     c000f745 <sbrk+0x8f>
c000f6da:	c1 fd 0c             	sar    ebp,0xc
c000f6dd:	bb 00 00 00 00       	mov    ebx,0x0
c000f6e2:	8b 35 90 12 03 c0    	mov    esi,DWORD PTR ds:0xc0031290
c000f6e8:	8b 3d 70 b3 02 c0    	mov    edi,DWORD PTR ds:0xc002b370
c000f6ee:	e8 b9 07 00 00       	call   c000feac <Phys::allocatePage()>
c000f6f3:	68 01 04 00 00       	push   0x401
c000f6f8:	57                   	push   edi
c000f6f9:	50                   	push   eax
c000f6fa:	56                   	push   esi
c000f6fb:	e8 32 42 00 00       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f700:	81 05 70 b3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b370,0x1000
c000f70a:	83 c3 01             	add    ebx,0x1
c000f70d:	83 c4 10             	add    esp,0x10
c000f710:	39 dd                	cmp    ebp,ebx
c000f712:	75 ce                	jne    c000f6e2 <sbrk+0x2c>
c000f714:	0f 20 d8             	mov    eax,cr3
c000f717:	0f 22 d8             	mov    cr3,eax
c000f71a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f71e:	83 c4 1c             	add    esp,0x1c
c000f721:	5b                   	pop    ebx
c000f722:	5e                   	pop    esi
c000f723:	5f                   	pop    edi
c000f724:	5d                   	pop    ebp
c000f725:	c3                   	ret    
c000f726:	a1 70 b3 02 c0       	mov    eax,ds:0xc002b370
c000f72b:	eb f1                	jmp    c000f71e <sbrk+0x68>
c000f72d:	83 ec 08             	sub    esp,0x8
c000f730:	50                   	push   eax
c000f731:	68 f0 7c 02 c0       	push   0xc0027cf0
c000f736:	e8 41 78 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000f73b:	83 c4 10             	add    esp,0x10
c000f73e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f743:	eb d9                	jmp    c000f71e <sbrk+0x68>
c000f745:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000f74b:	eb 8d                	jmp    c000f6da <sbrk+0x24>

c000f74d <sbrk_thunk>:
c000f74d:	83 ec 0c             	sub    esp,0xc
c000f750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f754:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f759:	7f 10                	jg     c000f76b <sbrk_thunk+0x1e>
c000f75b:	83 ec 0c             	sub    esp,0xc
c000f75e:	50                   	push   eax
c000f75f:	e8 52 ff ff ff       	call   c000f6b6 <sbrk>
c000f764:	83 c4 10             	add    esp,0x10
c000f767:	83 c4 0c             	add    esp,0xc
c000f76a:	c3                   	ret    
c000f76b:	83 ec 08             	sub    esp,0x8
c000f76e:	50                   	push   eax
c000f76f:	68 20 7d 02 c0       	push   0xc0027d20
c000f774:	e8 03 78 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000f779:	83 c4 10             	add    esp,0x10
c000f77c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f781:	eb e4                	jmp    c000f767 <sbrk_thunk+0x1a>

c000f783 <mmap>:
c000f783:	55                   	push   ebp
c000f784:	57                   	push   edi
c000f785:	56                   	push   esi
c000f786:	53                   	push   ebx
c000f787:	83 ec 18             	sub    esp,0x18
c000f78a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f78e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f794:	89 fb                	mov    ebx,edi
c000f796:	c1 eb 0c             	shr    ebx,0xc
c000f799:	53                   	push   ebx
c000f79a:	e8 b0 3a 00 00       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c000f79f:	89 c5                	mov    ebp,eax
c000f7a1:	83 c4 10             	add    esp,0x10
c000f7a4:	85 db                	test   ebx,ebx
c000f7a6:	7e 2f                	jle    c000f7d7 <mmap+0x54>
c000f7a8:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f7ae:	01 c7                	add    edi,eax
c000f7b0:	89 c3                	mov    ebx,eax
c000f7b2:	8b 35 90 12 03 c0    	mov    esi,DWORD PTR ds:0xc0031290
c000f7b8:	e8 ef 06 00 00       	call   c000feac <Phys::allocatePage()>
c000f7bd:	68 01 04 00 00       	push   0x401
c000f7c2:	53                   	push   ebx
c000f7c3:	50                   	push   eax
c000f7c4:	56                   	push   esi
c000f7c5:	e8 68 41 00 00       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7d0:	83 c4 10             	add    esp,0x10
c000f7d3:	39 fb                	cmp    ebx,edi
c000f7d5:	75 db                	jne    c000f7b2 <mmap+0x2f>
c000f7d7:	89 e8                	mov    eax,ebp
c000f7d9:	83 c4 0c             	add    esp,0xc
c000f7dc:	5b                   	pop    ebx
c000f7dd:	5e                   	pop    esi
c000f7de:	5f                   	pop    edi
c000f7df:	5d                   	pop    ebp
c000f7e0:	c3                   	ret    

c000f7e1 <munmap>:
c000f7e1:	83 ec 18             	sub    esp,0x18
c000f7e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7e8:	e8 6a 3d 00 00       	call   c0013557 <Virt::freeKernelVirtualPages(unsigned long)>
c000f7ed:	b8 00 00 00 00       	mov    eax,0x0
c000f7f2:	83 c4 1c             	add    esp,0x1c
c000f7f5:	c3                   	ret    

c000f7f6 <liballoc_lock()>:
c000f7f6:	fa                   	cli    
c000f7f7:	83 05 30 13 03 c0 01 	add    DWORD PTR ds:0xc0031330,0x1
c000f7fe:	b8 00 00 00 00       	mov    eax,0x0
c000f803:	c3                   	ret    

c000f804 <liballoc_unlock()>:
c000f804:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000f80c:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c000f813:	75 01                	jne    c000f816 <liballoc_unlock()+0x12>
c000f815:	fb                   	sti    
c000f816:	b8 00 00 00 00       	mov    eax,0x0
c000f81b:	c3                   	ret    

c000f81c <liballoc_alloc(int)>:
c000f81c:	83 ec 10             	sub    esp,0x10
c000f81f:	6a 01                	push   0x1
c000f821:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f825:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000f82b:	e8 06 42 00 00       	call   c0013a36 <VAS::allocatePages(int, int)>
c000f830:	83 c4 1c             	add    esp,0x1c
c000f833:	c3                   	ret    

c000f834 <liballoc_free(void*, int)>:
c000f834:	83 ec 14             	sub    esp,0x14
c000f837:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f83b:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000f841:	e8 4e 3e 00 00       	call   c0013694 <VAS::freeAllocatedPages(unsigned long)>
c000f846:	b8 00 00 00 00       	mov    eax,0x0
c000f84b:	83 c4 1c             	add    esp,0x1c
c000f84e:	c3                   	ret    

c000f84f <realloc>:
c000f84f:	83 ec 14             	sub    esp,0x14
c000f852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 f8 1e ff ff       	call   c0001757 <dlrealloc>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <malloc>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 ab 19 ff ff       	call   c000121a <dlmalloc>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <free>:
c000f873:	83 ec 18             	sub    esp,0x18
c000f876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87a:	e8 d4 14 ff ff       	call   c0000d53 <dlfree>
c000f87f:	83 c4 1c             	add    esp,0x1c
c000f882:	c3                   	ret    

c000f883 <rfree>:
c000f883:	83 ec 18             	sub    esp,0x18
c000f886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f88a:	e8 c4 14 ff ff       	call   c0000d53 <dlfree>
c000f88f:	83 c4 1c             	add    esp,0x1c
c000f892:	c3                   	ret    

c000f893 <calloc>:
c000f893:	56                   	push   esi
c000f894:	53                   	push   ebx
c000f895:	83 ec 10             	sub    esp,0x10
c000f898:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f89c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8a1:	53                   	push   ebx
c000f8a2:	e8 bc ff ff ff       	call   c000f863 <malloc>
c000f8a7:	89 c6                	mov    esi,eax
c000f8a9:	83 c4 0c             	add    esp,0xc
c000f8ac:	53                   	push   ebx
c000f8ad:	6a 00                	push   0x0
c000f8af:	50                   	push   eax
c000f8b0:	e8 3b 0c ff ff       	call   c00004f0 <memset>
c000f8b5:	89 f0                	mov    eax,esi
c000f8b7:	83 c4 14             	add    esp,0x14
c000f8ba:	5b                   	pop    ebx
c000f8bb:	5e                   	pop    esi
c000f8bc:	c3                   	ret    
c000f8bd:	66 90                	xchg   ax,ax
c000f8bf:	90                   	nop

c000f8c0 <KeMailboxTryPost(Mailbox*, void*)>:
c000f8c0:	83 ec 10             	sub    esp,0x10
c000f8c3:	fa                   	cli    
c000f8c4:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f8c9:	83 c0 01             	add    eax,0x1
c000f8cc:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c000f8d1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f8d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f8dd:	85 c0                	test   eax,eax
c000f8df:	75 23                	jne    c000f904 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f8e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f8e9:	89 10                	mov    DWORD PTR [eax],edx
c000f8eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f8f2:	8d 50 01             	lea    edx,[eax+0x1]
c000f8f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f8fc:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f901:	8d 76 00             	lea    esi,[esi+0x0]
c000f904:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000f90c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f911:	85 c0                	test   eax,eax
c000f913:	75 03                	jne    c000f918 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f915:	fb                   	sti    
c000f916:	66 90                	xchg   ax,ax
c000f918:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f91c:	83 c4 10             	add    esp,0x10
c000f91f:	c3                   	ret    

c000f920 <KeMailboxTryGet(Mailbox*, void**)>:
c000f920:	83 ec 10             	sub    esp,0x10
c000f923:	fa                   	cli    
c000f924:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f929:	83 c0 01             	add    eax,0x1
c000f92c:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c000f931:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f936:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f93a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f93d:	83 f8 01             	cmp    eax,0x1
c000f940:	75 22                	jne    c000f964 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f946:	8b 10                	mov    edx,DWORD PTR [eax]
c000f948:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f94c:	89 10                	mov    DWORD PTR [eax],edx
c000f94e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f952:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f955:	8d 50 ff             	lea    edx,[eax-0x1]
c000f958:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f95c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f95f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f964:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000f96c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f971:	85 c0                	test   eax,eax
c000f973:	75 03                	jne    c000f978 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f975:	fb                   	sti    
c000f976:	66 90                	xchg   ax,ax
c000f978:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f97c:	83 c4 10             	add    esp,0x10
c000f97f:	c3                   	ret    

c000f980 <KeMailboxCreate()>:
c000f980:	83 ec 1c             	sub    esp,0x1c
c000f983:	83 ec 0c             	sub    esp,0xc
c000f986:	6a 08                	push   0x8
c000f988:	e8 d6 fe ff ff       	call   c000f863 <malloc>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f994:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f998:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f99e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f9a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9ad:	83 c4 1c             	add    esp,0x1c
c000f9b0:	c3                   	ret    
c000f9b1:	8d 76 00             	lea    esi,[esi+0x0]

c000f9b4 <KeMailboxPost(Mailbox*, void*)>:
c000f9b4:	83 ec 1c             	sub    esp,0x1c
c000f9b7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f9bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9c4:	e8 f7 fe ff ff       	call   c000f8c0 <KeMailboxTryPost(Mailbox*, void*)>
c000f9c9:	83 c4 08             	add    esp,0x8
c000f9cc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f9d0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f9d4:	83 f0 01             	xor    eax,0x1
c000f9d7:	0f b6 c0             	movzx  eax,al
c000f9da:	85 c0                	test   eax,eax
c000f9dc:	74 26                	je     c000fa04 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f9de:	fa                   	cli    
c000f9df:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f9e4:	83 c0 01             	add    eax,0x1
c000f9e7:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c000f9ec:	e8 4f 6e 00 00       	call   c0016840 <schedule()>
c000f9f1:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000f9f9:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f9fe:	85 c0                	test   eax,eax
c000fa00:	75 02                	jne    c000fa04 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fa02:	fb                   	sti    
c000fa03:	90                   	nop
c000fa04:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fa09:	85 c0                	test   eax,eax
c000fa0b:	75 03                	jne    c000fa10 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fa0d:	eb ad                	jmp    c000f9bc <KeMailboxPost(Mailbox*, void*)+0x8>
c000fa0f:	90                   	nop
c000fa10:	90                   	nop
c000fa11:	83 c4 1c             	add    esp,0x1c
c000fa14:	c3                   	ret    
c000fa15:	8d 76 00             	lea    esi,[esi+0x0]

c000fa18 <KeMailboxGet(Mailbox*, void**)>:
c000fa18:	83 ec 1c             	sub    esp,0x1c
c000fa1b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fa20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fa24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fa28:	e8 f3 fe ff ff       	call   c000f920 <KeMailboxTryGet(Mailbox*, void**)>
c000fa2d:	83 c4 08             	add    esp,0x8
c000fa30:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fa34:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fa38:	83 f0 01             	xor    eax,0x1
c000fa3b:	0f b6 c0             	movzx  eax,al
c000fa3e:	85 c0                	test   eax,eax
c000fa40:	74 26                	je     c000fa68 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fa42:	fa                   	cli    
c000fa43:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000fa48:	83 c0 01             	add    eax,0x1
c000fa4b:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c000fa50:	e8 eb 6d 00 00       	call   c0016840 <schedule()>
c000fa55:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000fa5d:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000fa62:	85 c0                	test   eax,eax
c000fa64:	75 02                	jne    c000fa68 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fa66:	fb                   	sti    
c000fa67:	90                   	nop
c000fa68:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fa6d:	85 c0                	test   eax,eax
c000fa6f:	75 03                	jne    c000fa74 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fa71:	eb ad                	jmp    c000fa20 <KeMailboxGet(Mailbox*, void**)+0x8>
c000fa73:	90                   	nop
c000fa74:	90                   	nop
c000fa75:	83 c4 1c             	add    esp,0x1c
c000fa78:	c3                   	ret    
c000fa79:	8d 76 00             	lea    esi,[esi+0x0]

c000fa7c <KeMailboxDestroy(Mailbox*)>:
c000fa7c:	83 ec 0c             	sub    esp,0xc
c000fa7f:	83 ec 0c             	sub    esp,0xc
c000fa82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa86:	e8 e8 fd ff ff       	call   c000f873 <free>
c000fa8b:	83 c4 10             	add    esp,0x10
c000fa8e:	90                   	nop
c000fa8f:	83 c4 0c             	add    esp,0xc
c000fa92:	c3                   	ret    

c000fa93 <KeFirstTask()>:
c000fa93:	53                   	push   ebx
c000fa94:	83 ec 08             	sub    esp,0x8
c000fa97:	fb                   	sti    
c000fa98:	e8 6a a5 00 00       	call   c001a007 <HalEnableNMI()>
c000fa9d:	83 ec 0c             	sub    esp,0xc
c000faa0:	68 2f 7d 02 c0       	push   0xc0027d2f
c000faa5:	e8 27 d8 ff ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000faaa:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000fab1:	e8 ad fd ff ff       	call   c000f863 <malloc>
c000fab6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000fabd:	89 c3                	mov    ebx,eax
c000fabf:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000fac4:	50                   	push   eax
c000fac5:	68 48 7d 02 c0       	push   0xc0027d48
c000faca:	6a 01                	push   0x1
c000facc:	53                   	push   ebx
c000facd:	e8 62 68 00 00       	call   c0016334 <Process::Process(bool, char const*, Process*, char**)>
c000fad2:	83 c4 20             	add    esp,0x20
c000fad5:	68 ff 00 00 00       	push   0xff
c000fada:	6a 00                	push   0x0
c000fadc:	68 a3 ea 00 c0       	push   0xc000eaa3
c000fae1:	53                   	push   ebx
c000fae2:	e8 8d 6a 00 00       	call   c0016574 <Process::createThread(void (*)(void*), void*, int)>
c000fae7:	8b 15 58 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031358
c000faed:	6a 7a                	push   0x7a
c000faef:	6a 00                	push   0x0
c000faf1:	68 28 6f 01 c0       	push   0xc0016f28
c000faf6:	52                   	push   edx
c000faf7:	e8 78 6a 00 00       	call   c0016574 <Process::createThread(void (*)(void*), void*, int)>
c000fafc:	83 c4 14             	add    esp,0x14
c000faff:	a3 10 13 03 c0       	mov    ds:0xc0031310,eax
c000fb04:	68 d0 7d 02 c0       	push   0xc0027dd0
c000fb09:	e8 c3 d7 ff ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000fb0e:	c6 05 0d 11 03 c0 01 	mov    BYTE PTR ds:0xc003110d,0x1
c000fb15:	e8 e9 0b 00 00       	call   c0010703 <KeInitRand()>
c000fb1a:	e8 8f 78 00 00       	call   c00173ae <Vm::initialise8086()>
c000fb1f:	e8 24 83 ff ff       	call   c0007e48 <Fs::initVFS()>
c000fb24:	c7 04 24 91 79 02 c0 	mov    DWORD PTR [esp],0xc0027991
c000fb2b:	e8 a1 d7 ff ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000fb30:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c000fb35:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000fb3b:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb3d:	6a 00                	push   0x0
c000fb3f:	6a 00                	push   0x0
c000fb41:	6a 00                	push   0x0
c000fb43:	50                   	push   eax
c000fb44:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fb47:	83 c4 14             	add    esp,0x14
c000fb4a:	68 d0 7d 02 c0       	push   0xc0027dd0
c000fb4f:	e8 7d d7 ff ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000fb54:	e8 d4 7a ff ff       	call   c000762d <KeInitialiseSymlinks()>
c000fb59:	e8 b8 ea ff ff       	call   c000e616 <KeLoadSystemEnv()>
c000fb5e:	e8 e5 09 00 00       	call   c0010548 <KeSetupPowerManager()>
c000fb63:	c7 04 24 55 7d 02 c0 	mov    DWORD PTR [esp],0xc0027d55
c000fb6a:	e8 62 d7 ff ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000fb6f:	83 c4 0c             	add    esp,0xc
c000fb72:	8b 0d 08 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031108
c000fb78:	6a 00                	push   0x0
c000fb7a:	51                   	push   ecx
c000fb7b:	68 66 7d 02 c0       	push   0xc0027d66
c000fb80:	e8 1f 63 00 00       	call   c0015ea4 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000fb85:	83 c4 10             	add    esp,0x10
c000fb88:	83 ec 0c             	sub    esp,0xc
c000fb8b:	6a 02                	push   0x2
c000fb8d:	e8 6e 6d 00 00       	call   c0016900 <blockTask(TaskState)>
c000fb92:	83 c4 10             	add    esp,0x10
c000fb95:	eb f1                	jmp    c000fb88 <KeFirstTask()+0xf5>

c000fb97 <KeEntryPoint>:
c000fb97:	57                   	push   edi
c000fb98:	bf f9 03 00 00       	mov    edi,0x3f9
c000fb9d:	56                   	push   esi
c000fb9e:	31 f6                	xor    esi,esi
c000fba0:	53                   	push   ebx
c000fba1:	83 ec 20             	sub    esp,0x20
c000fba4:	e8 eb d6 ff ff       	call   c000d294 <KeInitialiseBootConfigurationFlags()>
c000fba9:	89 f0                	mov    eax,esi
c000fbab:	89 fa                	mov    edx,edi
c000fbad:	ee                   	out    dx,al
c000fbae:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fbb3:	b0 80                	mov    al,0x80
c000fbb5:	89 da                	mov    edx,ebx
c000fbb7:	ee                   	out    dx,al
c000fbb8:	b1 03                	mov    cl,0x3
c000fbba:	ba f8 03 00 00       	mov    edx,0x3f8
c000fbbf:	88 c8                	mov    al,cl
c000fbc1:	ee                   	out    dx,al
c000fbc2:	89 f0                	mov    eax,esi
c000fbc4:	89 fa                	mov    edx,edi
c000fbc6:	ee                   	out    dx,al
c000fbc7:	88 c8                	mov    al,cl
c000fbc9:	89 da                	mov    edx,ebx
c000fbcb:	ee                   	out    dx,al
c000fbcc:	b0 c7                	mov    al,0xc7
c000fbce:	ba fa 03 00 00       	mov    edx,0x3fa
c000fbd3:	ee                   	out    dx,al
c000fbd4:	b0 0b                	mov    al,0xb
c000fbd6:	ba fc 03 00 00       	mov    edx,0x3fc
c000fbdb:	ee                   	out    dx,al
c000fbdc:	83 ec 0c             	sub    esp,0xc
c000fbdf:	68 82 7d 02 c0       	push   0xc0027d82
c000fbe4:	e8 93 73 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000fbe9:	e8 b4 d6 ff ff       	call   c000d2a2 <KeDisplaySplashScreen()>
c000fbee:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fbf3:	05 ff 0f 00 00       	add    eax,0xfff
c000fbf8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fbfd:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc00:	e8 41 04 00 00       	call   c0010046 <Phys::physicalMemorySetup(unsigned int)>
c000fc05:	e8 23 38 00 00       	call   c001342d <Virt::virtualMemorySetup()>
c000fc0a:	e8 e3 d5 ff ff       	call   c000d1f2 <KeInitialiseAtexit()>
c000fc0f:	58                   	pop    eax
c000fc10:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fc14:	53                   	push   ebx
c000fc15:	e8 fa 3a 00 00       	call   c0013714 <VAS::VAS()>
c000fc1a:	89 1d 90 12 03 c0    	mov    DWORD PTR ds:0xc0031290,ebx
c000fc20:	e8 43 5d 01 00       	call   c0025968 <_init>
c000fc25:	c7 04 24 99 7d 02 c0 	mov    DWORD PTR [esp],0xc0027d99
c000fc2c:	e8 a0 d6 ff ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000fc31:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000fc38:	e8 26 fc ff ff       	call   c000f863 <malloc>
c000fc3d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc40:	89 c6                	mov    esi,eax
c000fc42:	e8 11 e4 ff ff       	call   c000e058 <Computer::Computer()>
c000fc47:	8b 15 90 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031290
c000fc4d:	89 35 08 11 03 c0    	mov    DWORD PTR ds:0xc0031108,esi
c000fc53:	52                   	push   edx
c000fc54:	6a 00                	push   0x0
c000fc56:	6a 00                	push   0x0
c000fc58:	56                   	push   esi
c000fc59:	e8 3e e4 ff ff       	call   c000e09c <Computer::open(int, int, void*)>
c000fc5e:	83 c4 14             	add    esp,0x14
c000fc61:	68 f4 7d 02 c0       	push   0xc0027df4
c000fc66:	e8 66 d6 ff ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000fc6b:	e8 0c ab 00 00       	call   c001a77c <HalInitialiseCoprocessor()>
c000fc70:	c7 04 24 b3 7d 02 c0 	mov    DWORD PTR [esp],0xc0027db3
c000fc77:	e8 55 d6 ff ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c000fc7c:	c7 04 24 93 fa 00 c0 	mov    DWORD PTR [esp],0xc000fa93
c000fc83:	e8 70 6a 00 00       	call   c00166f8 <setupMultitasking(void (*)())>
c000fc88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc8b:	e8 3a 3b 00 00       	call   c00137ca <VAS::~VAS()>
c000fc90:	83 c4 30             	add    esp,0x30
c000fc93:	5b                   	pop    ebx
c000fc94:	5e                   	pop    esi
c000fc95:	5f                   	pop    edi
c000fc96:	c3                   	ret    
c000fc97:	90                   	nop

c000fc98 <Mutex::Mutex()>:
c000fc98:	83 ec 0c             	sub    esp,0xc
c000fc9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc9f:	83 ec 08             	sub    esp,0x8
c000fca2:	6a 01                	push   0x1
c000fca4:	50                   	push   eax
c000fca5:	e8 fa 0c 00 00       	call   c00109a4 <Semaphore::Semaphore(int)>
c000fcaa:	83 c4 10             	add    esp,0x10
c000fcad:	90                   	nop
c000fcae:	83 c4 0c             	add    esp,0xc
c000fcb1:	c3                   	ret    

c000fcb2 <KeIsKernelInPanic()>:
c000fcb2:	a0 64 11 03 c0       	mov    al,ds:0xc0031164
c000fcb7:	c3                   	ret    

c000fcb8 <KePanic(char const*)>:
c000fcb8:	c6 05 64 11 03 c0 01 	mov    BYTE PTR ds:0xc0031164,0x1
c000fcbf:	e9 3c ab 00 00       	jmp    c001a800 <HalPanic(char const*)>

c000fcc4 <Phys::allocateDMA(unsigned long)>:
c000fcc4:	55                   	push   ebp
c000fcc5:	31 ed                	xor    ebp,ebp
c000fcc7:	57                   	push   edi
c000fcc8:	56                   	push   esi
c000fcc9:	53                   	push   ebx
c000fcca:	31 db                	xor    ebx,ebx
c000fccc:	83 ec 1c             	sub    esp,0x1c
c000fccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcd3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fcdb:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fce1:	31 c0                	xor    eax,eax
c000fce3:	c1 ef 0c             	shr    edi,0xc
c000fce6:	eb 1b                	jmp    c000fd03 <Phys::allocateDMA(unsigned long)+0x3f>
c000fce8:	85 c0                	test   eax,eax
c000fcea:	75 06                	jne    c000fcf2 <Phys::allocateDMA(unsigned long)+0x2e>
c000fcec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fcf0:	89 dd                	mov    ebp,ebx
c000fcf2:	8d 70 01             	lea    esi,[eax+0x1]
c000fcf5:	39 f7                	cmp    edi,esi
c000fcf7:	74 37                	je     c000fd30 <Phys::allocateDMA(unsigned long)+0x6c>
c000fcf9:	89 f0                	mov    eax,esi
c000fcfb:	83 c3 01             	add    ebx,0x1
c000fcfe:	83 fb 0f             	cmp    ebx,0xf
c000fd01:	7f 13                	jg     c000fd16 <Phys::allocateDMA(unsigned long)+0x52>
c000fd03:	80 bb 80 11 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffcee80],0x0
c000fd0a:	74 dc                	je     c000fce8 <Phys::allocateDMA(unsigned long)+0x24>
c000fd0c:	31 c0                	xor    eax,eax
c000fd0e:	83 c3 01             	add    ebx,0x1
c000fd11:	83 fb 0f             	cmp    ebx,0xf
c000fd14:	7e ed                	jle    c000fd03 <Phys::allocateDMA(unsigned long)+0x3f>
c000fd16:	83 ec 0c             	sub    esp,0xc
c000fd19:	68 18 7e 02 c0       	push   0xc0027e18
c000fd1e:	e8 95 ff ff ff       	call   c000fcb8 <KePanic(char const*)>
c000fd23:	83 c4 10             	add    esp,0x10
c000fd26:	31 c0                	xor    eax,eax
c000fd28:	83 c4 1c             	add    esp,0x1c
c000fd2b:	5b                   	pop    ebx
c000fd2c:	5e                   	pop    esi
c000fd2d:	5f                   	pop    edi
c000fd2e:	5d                   	pop    ebp
c000fd2f:	c3                   	ret    
c000fd30:	89 e9                	mov    ecx,ebp
c000fd32:	c1 f9 04             	sar    ecx,0x4
c000fd35:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fd39:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000fd3d:	89 ca                	mov    edx,ecx
c000fd3f:	83 ea 01             	sub    edx,0x1
c000fd42:	79 03                	jns    c000fd47 <Phys::allocateDMA(unsigned long)+0x83>
c000fd44:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fd47:	c1 fa 04             	sar    edx,0x4
c000fd4a:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000fd4e:	74 08                	je     c000fd58 <Phys::allocateDMA(unsigned long)+0x94>
c000fd50:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000fd54:	31 c0                	xor    eax,eax
c000fd56:	eb b6                	jmp    c000fd0e <Phys::allocateDMA(unsigned long)+0x4a>
c000fd58:	85 f6                	test   esi,esi
c000fd5a:	74 17                	je     c000fd73 <Phys::allocateDMA(unsigned long)+0xaf>
c000fd5c:	8d 95 80 11 03 c0    	lea    edx,[ebp-0x3ffcee80]
c000fd62:	8d 84 05 81 11 03 c0 	lea    eax,[ebp+eax*1-0x3ffcee7f]
c000fd69:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd6c:	83 c2 01             	add    edx,0x1
c000fd6f:	39 d0                	cmp    eax,edx
c000fd71:	75 f6                	jne    c000fd69 <Phys::allocateDMA(unsigned long)+0xa5>
c000fd73:	a1 78 11 03 c0       	mov    eax,ds:0xc0031178
c000fd78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fd7c:	01 f8                	add    eax,edi
c000fd7e:	85 d2                	test   edx,edx
c000fd80:	a3 78 11 03 c0       	mov    ds:0xc0031178,eax
c000fd85:	74 17                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0xda>
c000fd87:	83 ec 0c             	sub    esp,0xc
c000fd8a:	68 18 7e 02 c0       	push   0xc0027e18
c000fd8f:	e8 24 ff ff ff       	call   c000fcb8 <KePanic(char const*)>
c000fd94:	83 c4 10             	add    esp,0x10
c000fd97:	89 f0                	mov    eax,esi
c000fd99:	e9 5d ff ff ff       	jmp    c000fcfb <Phys::allocateDMA(unsigned long)+0x37>
c000fd9e:	c1 e5 0c             	shl    ebp,0xc
c000fda1:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000fda7:	e9 7c ff ff ff       	jmp    c000fd28 <Phys::allocateDMA(unsigned long)+0x64>

c000fdac <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdb0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000fdb6:	a1 78 11 03 c0       	mov    eax,ds:0xc0031178
c000fdbb:	c1 ea 0c             	shr    edx,0xc
c000fdbe:	29 d0                	sub    eax,edx
c000fdc0:	a3 78 11 03 c0       	mov    ds:0xc0031178,eax
c000fdc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc9:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000fdce:	c1 e8 0c             	shr    eax,0xc
c000fdd1:	85 d2                	test   edx,edx
c000fdd3:	74 11                	je     c000fde6 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000fdd5:	05 80 11 03 c0       	add    eax,0xc0031180
c000fdda:	01 c2                	add    edx,eax
c000fddc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fddf:	83 c0 01             	add    eax,0x1
c000fde2:	39 d0                	cmp    eax,edx
c000fde4:	75 f6                	jne    c000fddc <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000fde6:	c3                   	ret    

c000fde7 <Phys::setPageState(unsigned long, bool)>:
c000fde7:	57                   	push   edi
c000fde8:	56                   	push   esi
c000fde9:	8b 35 d8 b3 02 c0    	mov    esi,DWORD PTR ds:0xc002b3d8
c000fdef:	53                   	push   ebx
c000fdf0:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000fdf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdf9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fdfd:	0f b6 c0             	movzx  eax,al
c000fe00:	89 ca                	mov    edx,ecx
c000fe02:	83 e1 07             	and    ecx,0x7
c000fe05:	c1 ea 03             	shr    edx,0x3
c000fe08:	d3 c3                	rol    ebx,cl
c000fe0a:	01 d6                	add    esi,edx
c000fe0c:	d3 e0                	shl    eax,cl
c000fe0e:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000fe11:	21 fb                	and    ebx,edi
c000fe13:	88 1e                	mov    BYTE PTR [esi],bl
c000fe15:	8b 1d d8 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b3d8
c000fe1b:	01 da                	add    edx,ebx
c000fe1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c000fe1f:	09 c8                	or     eax,ecx
c000fe21:	88 02                	mov    BYTE PTR [edx],al
c000fe23:	5b                   	pop    ebx
c000fe24:	5e                   	pop    esi
c000fe25:	5f                   	pop    edi
c000fe26:	c3                   	ret    

c000fe27 <Phys::getPageState(unsigned long)>:
c000fe27:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe2b:	8b 15 d8 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b3d8
c000fe31:	89 c8                	mov    eax,ecx
c000fe33:	83 e1 07             	and    ecx,0x7
c000fe36:	c1 e8 03             	shr    eax,0x3
c000fe39:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe3d:	d3 f8                	sar    eax,cl
c000fe3f:	83 e0 01             	and    eax,0x1
c000fe42:	c3                   	ret    

c000fe43 <Phys::freePage(unsigned long)>:
c000fe43:	53                   	push   ebx
c000fe44:	83 ec 08             	sub    esp,0x8
c000fe47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000fe51:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000fe57:	76 41                	jbe    c000fe9a <Phys::freePage(unsigned long)+0x57>
c000fe59:	c1 e8 0c             	shr    eax,0xc
c000fe5c:	50                   	push   eax
c000fe5d:	89 c3                	mov    ebx,eax
c000fe5f:	e8 c3 ff ff ff       	call   c000fe27 <Phys::getPageState(unsigned long)>
c000fe64:	5a                   	pop    edx
c000fe65:	84 c0                	test   al,al
c000fe67:	74 20                	je     c000fe89 <Phys::freePage(unsigned long)+0x46>
c000fe69:	83 ec 08             	sub    esp,0x8
c000fe6c:	a1 78 11 03 c0       	mov    eax,ds:0xc0031178
c000fe71:	6a 00                	push   0x0
c000fe73:	83 e8 01             	sub    eax,0x1
c000fe76:	53                   	push   ebx
c000fe77:	a3 78 11 03 c0       	mov    ds:0xc0031178,eax
c000fe7c:	e8 66 ff ff ff       	call   c000fde7 <Phys::setPageState(unsigned long, bool)>
c000fe81:	83 c4 10             	add    esp,0x10
c000fe84:	83 c4 08             	add    esp,0x8
c000fe87:	5b                   	pop    ebx
c000fe88:	c3                   	ret    
c000fe89:	c7 44 24 10 2a 7e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027e2a
c000fe91:	83 c4 08             	add    esp,0x8
c000fe94:	5b                   	pop    ebx
c000fe95:	e9 1e fe ff ff       	jmp    c000fcb8 <KePanic(char const*)>
c000fe9a:	68 00 10 00 00       	push   0x1000
c000fe9f:	50                   	push   eax
c000fea0:	e8 07 ff ff ff       	call   c000fdac <Phys::freeDMA(unsigned long, unsigned long)>
c000fea5:	59                   	pop    ecx
c000fea6:	5b                   	pop    ebx
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    

c000feac <Phys::allocatePage()>:
c000feac:	56                   	push   esi
c000fead:	53                   	push   ebx
c000feae:	83 ec 14             	sub    esp,0x14
c000feb1:	8b 35 6c 11 03 c0    	mov    esi,DWORD PTR ds:0xc003116c
c000feb7:	89 f3                	mov    ebx,esi
c000feb9:	eb 18                	jmp    c000fed3 <Phys::allocatePage()+0x27>
c000febb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fec1:	75 0c                	jne    c000fecf <Phys::allocatePage()+0x23>
c000fec3:	c7 05 6c 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003116c,0x0
c000fecd:	31 db                	xor    ebx,ebx
c000fecf:	39 de                	cmp    esi,ebx
c000fed1:	74 5b                	je     c000ff2e <Phys::allocatePage()+0x82>
c000fed3:	53                   	push   ebx
c000fed4:	e8 4e ff ff ff       	call   c000fe27 <Phys::getPageState(unsigned long)>
c000fed9:	59                   	pop    ecx
c000feda:	84 c0                	test   al,al
c000fedc:	74 29                	je     c000ff07 <Phys::allocatePage()+0x5b>
c000fede:	83 c3 01             	add    ebx,0x1
c000fee1:	89 1d 6c 11 03 c0    	mov    DWORD PTR ds:0xc003116c,ebx
c000fee7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000feed:	76 cc                	jbe    c000febb <Phys::allocatePage()+0xf>
c000feef:	83 ec 0c             	sub    esp,0xc
c000fef2:	68 40 7e 02 c0       	push   0xc0027e40
c000fef7:	e8 bc fd ff ff       	call   c000fcb8 <KePanic(char const*)>
c000fefc:	8b 1d 6c 11 03 c0    	mov    ebx,DWORD PTR ds:0xc003116c
c000ff02:	83 c4 10             	add    esp,0x10
c000ff05:	eb b4                	jmp    c000febb <Phys::allocatePage()+0xf>
c000ff07:	6a 01                	push   0x1
c000ff09:	53                   	push   ebx
c000ff0a:	e8 d8 fe ff ff       	call   c000fde7 <Phys::setPageState(unsigned long, bool)>
c000ff0f:	8b 1d 78 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031178
c000ff15:	a1 6c 11 03 c0       	mov    eax,ds:0xc003116c
c000ff1a:	83 c3 01             	add    ebx,0x1
c000ff1d:	5e                   	pop    esi
c000ff1e:	89 1d 78 11 03 c0    	mov    DWORD PTR ds:0xc0031178,ebx
c000ff24:	c1 e0 0c             	shl    eax,0xc
c000ff27:	5a                   	pop    edx
c000ff28:	83 c4 14             	add    esp,0x14
c000ff2b:	5b                   	pop    ebx
c000ff2c:	5e                   	pop    esi
c000ff2d:	c3                   	ret    
c000ff2e:	83 ec 0c             	sub    esp,0xc
c000ff31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff39:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c000ff3f:	51                   	push   ecx
c000ff40:	e8 9f 43 00 00       	call   c00142e4 <VAS::scanForEviction()>
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	85 c0                	test   eax,eax
c000ff4a:	75 1b                	jne    c000ff67 <Phys::allocatePage()+0xbb>
c000ff4c:	83 ec 0c             	sub    esp,0xc
c000ff4f:	68 88 7e 02 c0       	push   0xc0027e88
c000ff54:	e8 5f fd ff ff       	call   c000fcb8 <KePanic(char const*)>
c000ff59:	8b 1d 6c 11 03 c0    	mov    ebx,DWORD PTR ds:0xc003116c
c000ff5f:	83 c4 10             	add    esp,0x10
c000ff62:	e9 6c ff ff ff       	jmp    c000fed3 <Phys::allocatePage()+0x27>
c000ff67:	83 ec 08             	sub    esp,0x8
c000ff6a:	8b 15 78 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031178
c000ff70:	6a 01                	push   0x1
c000ff72:	83 c2 01             	add    edx,0x1
c000ff75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff79:	89 15 78 11 03 c0    	mov    DWORD PTR ds:0xc0031178,edx
c000ff7f:	89 c2                	mov    edx,eax
c000ff81:	c1 ea 0c             	shr    edx,0xc
c000ff84:	52                   	push   edx
c000ff85:	e8 5d fe ff ff       	call   c000fde7 <Phys::setPageState(unsigned long, bool)>
c000ff8a:	83 c4 10             	add    esp,0x10
c000ff8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff91:	eb 95                	jmp    c000ff28 <Phys::allocatePage()+0x7c>

c000ff93 <Phys::allocateContiguousPages(int)>:
c000ff93:	57                   	push   edi
c000ff94:	56                   	push   esi
c000ff95:	53                   	push   ebx
c000ff96:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ff9a:	fa                   	cli    
c000ff9b:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c000ffa1:	83 ec 0c             	sub    esp,0xc
c000ffa4:	83 c2 01             	add    edx,0x1
c000ffa7:	68 b8 7e 02 c0       	push   0xc0027eb8
c000ffac:	89 15 30 13 03 c0    	mov    DWORD PTR ds:0xc0031330,edx
c000ffb2:	31 db                	xor    ebx,ebx
c000ffb4:	e8 c3 6f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ffb9:	83 c4 10             	add    esp,0x10
c000ffbc:	85 db                	test   ebx,ebx
c000ffbe:	75 11                	jne    c000ffd1 <Phys::allocateContiguousPages(int)+0x3e>
c000ffc0:	e8 e7 fe ff ff       	call   c000feac <Phys::allocatePage()>
c000ffc5:	83 ff 01             	cmp    edi,0x1
c000ffc8:	89 c6                	mov    esi,eax
c000ffca:	74 21                	je     c000ffed <Phys::allocateContiguousPages(int)+0x5a>
c000ffcc:	bb 01 00 00 00       	mov    ebx,0x1
c000ffd1:	e8 d6 fe ff ff       	call   c000feac <Phys::allocatePage()>
c000ffd6:	89 da                	mov    edx,ebx
c000ffd8:	c1 e2 0c             	shl    edx,0xc
c000ffdb:	01 f2                	add    edx,esi
c000ffdd:	39 c2                	cmp    edx,eax
c000ffdf:	74 24                	je     c0010005 <Phys::allocateContiguousPages(int)+0x72>
c000ffe1:	bb 01 00 00 00       	mov    ebx,0x1
c000ffe6:	89 c6                	mov    esi,eax
c000ffe8:	83 ff 01             	cmp    edi,0x1
c000ffeb:	75 e4                	jne    c000ffd1 <Phys::allocateContiguousPages(int)+0x3e>
c000ffed:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000fff5:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000fffa:	85 c0                	test   eax,eax
c000fffc:	75 01                	jne    c000ffff <Phys::allocateContiguousPages(int)+0x6c>
c000fffe:	fb                   	sti    
c000ffff:	89 f0                	mov    eax,esi
c0010001:	5b                   	pop    ebx
c0010002:	5e                   	pop    esi
c0010003:	5f                   	pop    edi
c0010004:	c3                   	ret    
c0010005:	83 c3 01             	add    ebx,0x1
c0010008:	39 fb                	cmp    ebx,edi
c001000a:	75 b0                	jne    c000ffbc <Phys::allocateContiguousPages(int)+0x29>
c001000c:	eb df                	jmp    c000ffed <Phys::allocateContiguousPages(int)+0x5a>

c001000e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001000e:	56                   	push   esi
c001000f:	53                   	push   ebx
c0010010:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010014:	39 1d 70 11 03 c0    	cmp    DWORD PTR ds:0xc0031170,ebx
c001001a:	73 06                	jae    c0010022 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001001c:	89 1d 70 11 03 c0    	mov    DWORD PTR ds:0xc0031170,ebx
c0010022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010026:	c1 eb 0c             	shr    ebx,0xc
c0010029:	c1 e8 0c             	shr    eax,0xc
c001002c:	39 d8                	cmp    eax,ebx
c001002e:	73 13                	jae    c0010043 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010030:	6a 00                	push   0x0
c0010032:	8d 70 01             	lea    esi,[eax+0x1]
c0010035:	50                   	push   eax
c0010036:	e8 ac fd ff ff       	call   c000fde7 <Phys::setPageState(unsigned long, bool)>
c001003b:	5a                   	pop    edx
c001003c:	89 f0                	mov    eax,esi
c001003e:	59                   	pop    ecx
c001003f:	39 f3                	cmp    ebx,esi
c0010041:	75 ed                	jne    c0010030 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010043:	5b                   	pop    ebx
c0010044:	5e                   	pop    esi
c0010045:	c3                   	ret    

c0010046 <Phys::physicalMemorySetup(unsigned int)>:
c0010046:	55                   	push   ebp
c0010047:	57                   	push   edi
c0010048:	56                   	push   esi
c0010049:	53                   	push   ebx
c001004a:	83 ec 40             	sub    esp,0x40
c001004d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0010051:	6a 10                	push   0x10
c0010053:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0010059:	6a 00                	push   0x0
c001005b:	68 80 11 03 c0       	push   0xc0031180
c0010060:	e8 8b 04 ff ff       	call   c00004f0 <memset>
c0010065:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c001006b:	31 db                	xor    ebx,ebx
c001006d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010071:	5a                   	pop    edx
c0010072:	59                   	pop    ecx
c0010073:	50                   	push   eax
c0010074:	68 45 7e 02 c0       	push   0xc0027e45
c0010079:	e8 fe 6e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001007e:	83 c4 10             	add    esp,0x10
c0010081:	83 ec 08             	sub    esp,0x8
c0010084:	6a 01                	push   0x1
c0010086:	53                   	push   ebx
c0010087:	83 c3 01             	add    ebx,0x1
c001008a:	e8 58 fd ff ff       	call   c000fde7 <Phys::setPageState(unsigned long, bool)>
c001008f:	83 c4 10             	add    esp,0x10
c0010092:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010098:	75 e7                	jne    c0010081 <Phys::physicalMemorySetup(unsigned int)+0x3b>
c001009a:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00100a1:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00100a8:	c1 e0 08             	shl    eax,0x8
c00100ab:	09 c2                	or     edx,eax
c00100ad:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00100b1:	0f 84 b5 01 00 00    	je     c001026c <Phys::physicalMemorySetup(unsigned int)+0x226>
c00100b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100c3:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100cc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100d4:	eb 1c                	jmp    c00100f2 <Phys::physicalMemorySetup(unsigned int)+0xac>
c00100d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100da:	83 c3 18             	add    ebx,0x18
c00100dd:	83 c0 01             	add    eax,0x1
c00100e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100e8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100ec:	0f 84 5d 01 00 00    	je     c001024f <Phys::physicalMemorySetup(unsigned int)+0x209>
c00100f2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100f5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100f8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010103:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010105:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010108:	01 f0                	add    eax,esi
c001010a:	55                   	push   ebp
c001010b:	11 fa                	adc    edx,edi
c001010d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010111:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010115:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010119:	50                   	push   eax
c001011a:	56                   	push   esi
c001011b:	68 18 7f 02 c0       	push   0xc0027f18
c0010120:	e8 57 6e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010129:	83 c4 10             	add    esp,0x10
c001012c:	09 f8                	or     eax,edi
c001012e:	0f 85 1b 01 00 00    	jne    c001024f <Phys::physicalMemorySetup(unsigned int)+0x209>
c0010134:	83 fd 01             	cmp    ebp,0x1
c0010137:	75 9d                	jne    c00100d6 <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010139:	ba 00 00 08 00       	mov    edx,0x80000
c001013e:	89 c1                	mov    ecx,eax
c0010140:	39 f2                	cmp    edx,esi
c0010142:	19 f9                	sbb    ecx,edi
c0010144:	0f 82 ab 00 00 00    	jb     c00101f5 <Phys::physicalMemorySetup(unsigned int)+0x1af>
c001014a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001014e:	89 c1                	mov    ecx,eax
c0010150:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010154:	0f 83 9b 00 00 00    	jae    c00101f5 <Phys::physicalMemorySetup(unsigned int)+0x1af>
c001015a:	ba 00 00 0a 00       	mov    edx,0xa0000
c001015f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010163:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010167:	39 fa                	cmp    edx,edi
c0010169:	19 e8                	sbb    eax,ebp
c001016b:	0f 82 e6 00 00 00    	jb     c0010257 <Phys::physicalMemorySetup(unsigned int)+0x211>
c0010171:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010175:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010179:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001017f:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010184:	83 d5 ff             	adc    ebp,0xffffffff
c0010187:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001018b:	31 c0                	xor    eax,eax
c001018d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010191:	39 fa                	cmp    edx,edi
c0010193:	89 c1                	mov    ecx,eax
c0010195:	19 e9                	sbb    ecx,ebp
c0010197:	0f 83 39 ff ff ff    	jae    c00100d6 <Phys::physicalMemorySetup(unsigned int)+0x90>
c001019d:	be 00 00 08 00       	mov    esi,0x80000
c00101a2:	83 ec 04             	sub    esp,0x4
c00101a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101a9:	57                   	push   edi
c00101aa:	56                   	push   esi
c00101ab:	68 3c 7f 02 c0       	push   0xc0027f3c
c00101b0:	e8 c7 6d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00101b5:	5a                   	pop    edx
c00101b6:	59                   	pop    ecx
c00101b7:	57                   	push   edi
c00101b8:	56                   	push   esi
c00101b9:	e8 50 fe ff ff       	call   c001000e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101be:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101c6:	8b 35 7c 11 03 c0    	mov    esi,DWORD PTR ds:0xc003117c
c00101cc:	83 c4 0c             	add    esp,0xc
c00101cf:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101d3:	01 f0                	add    eax,esi
c00101d5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101dc:	a3 7c 11 03 c0       	mov    ds:0xc003117c,eax
c00101e1:	52                   	push   edx
c00101e2:	50                   	push   eax
c00101e3:	68 6b 7e 02 c0       	push   0xc0027e6b
c00101e8:	e8 8f 6d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00101ed:	83 c4 10             	add    esp,0x10
c00101f0:	e9 e1 fe ff ff       	jmp    c00100d6 <Phys::physicalMemorySetup(unsigned int)+0x90>
c00101f5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010201:	39 ea                	cmp    edx,ebp
c0010203:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010207:	0f 82 c9 fe ff ff    	jb     c00100d6 <Phys::physicalMemorySetup(unsigned int)+0x90>
c001020d:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010212:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010216:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001021a:	0f 83 b6 fe ff ff    	jae    c00100d6 <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010220:	39 ee                	cmp    esi,ebp
c0010222:	89 f8                	mov    eax,edi
c0010224:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010228:	0f 83 74 ff ff ff    	jae    c00101a2 <Phys::physicalMemorySetup(unsigned int)+0x15c>
c001022e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010232:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010236:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001023a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001023e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010242:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010246:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001024a:	e9 53 ff ff ff       	jmp    c00101a2 <Phys::physicalMemorySetup(unsigned int)+0x15c>
c001024f:	83 c4 3c             	add    esp,0x3c
c0010252:	5b                   	pop    ebx
c0010253:	5e                   	pop    esi
c0010254:	5f                   	pop    edi
c0010255:	5d                   	pop    ebp
c0010256:	c3                   	ret    
c0010257:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001025f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010267:	e9 05 ff ff ff       	jmp    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x12b>
c001026c:	c7 44 24 50 5d 7e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0027e5d
c0010274:	83 c4 3c             	add    esp,0x3c
c0010277:	5b                   	pop    ebx
c0010278:	5e                   	pop    esi
c0010279:	5f                   	pop    edi
c001027a:	5d                   	pop    ebp
c001027b:	e9 38 fa ff ff       	jmp    c000fcb8 <KePanic(char const*)>

c0010280 <Pipe::isAtty()>:
c0010280:	31 c0                	xor    eax,eax
c0010282:	c3                   	ret    
c0010283:	90                   	nop

c0010284 <Pipe::~Pipe()>:
c0010284:	83 ec 0c             	sub    esp,0xc
c0010287:	ba a8 7f 02 c0       	mov    edx,0xc0027fa8
c001028c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010290:	89 10                	mov    DWORD PTR [eax],edx
c0010292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010296:	83 ec 0c             	sub    esp,0xc
c0010299:	50                   	push   eax
c001029a:	e8 43 2d 00 00       	call   c0012fe2 <UnixFile::~UnixFile()>
c001029f:	83 c4 10             	add    esp,0x10
c00102a2:	90                   	nop
c00102a3:	83 c4 0c             	add    esp,0xc
c00102a6:	c3                   	ret    
c00102a7:	90                   	nop

c00102a8 <Pipe::~Pipe()>:
c00102a8:	83 ec 0c             	sub    esp,0xc
c00102ab:	83 ec 0c             	sub    esp,0xc
c00102ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b2:	e8 cd ff ff ff       	call   c0010284 <Pipe::~Pipe()>
c00102b7:	83 c4 10             	add    esp,0x10
c00102ba:	83 ec 08             	sub    esp,0x8
c00102bd:	6a 20                	push   0x20
c00102bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c3:	e8 b4 d0 ff ff       	call   c000d37c <operator delete(void*, unsigned long)>
c00102c8:	83 c4 10             	add    esp,0x10
c00102cb:	83 c4 0c             	add    esp,0xc
c00102ce:	c3                   	ret    
c00102cf:	90                   	nop

c00102d0 <Pipe::write(unsigned long long, void*, int*)>:
c00102d0:	55                   	push   ebp
c00102d1:	57                   	push   edi
c00102d2:	56                   	push   esi
c00102d3:	53                   	push   ebx
c00102d4:	83 ec 1c             	sub    esp,0x1c
c00102d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00102db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00102df:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00102e2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00102e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00102e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00102ed:	89 d8                	mov    eax,ebx
c00102ef:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00102f2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00102f6:	89 d6                	mov    esi,edx
c00102f8:	89 d7                	mov    edi,edx
c00102fa:	c1 ff 1f             	sar    edi,0x1f
c00102fd:	03 34 24             	add    esi,DWORD PTR [esp]
c0010300:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010304:	c1 f8 1f             	sar    eax,0x1f
c0010307:	39 f3                	cmp    ebx,esi
c0010309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001030d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010311:	19 f8                	sbb    eax,edi
c0010313:	b8 01 00 00 00       	mov    eax,0x1
c0010318:	72 6e                	jb     c0010388 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c001031a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001031d:	01 d0                	add    eax,edx
c001031f:	99                   	cdq    
c0010320:	f7 fb                	idiv   ebx
c0010322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010326:	29 d3                	sub    ebx,edx
c0010328:	89 d7                	mov    edi,edx
c001032a:	89 de                	mov    esi,ebx
c001032c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001032f:	c1 fb 1f             	sar    ebx,0x1f
c0010332:	39 f2                	cmp    edx,esi
c0010334:	19 d8                	sbb    eax,ebx
c0010336:	b8 00 00 00 00       	mov    eax,0x0
c001033b:	72 04                	jb     c0010341 <Pipe::write(unsigned long long, void*, int*)+0x71>
c001033d:	89 d0                	mov    eax,edx
c001033f:	29 f0                	sub    eax,esi
c0010341:	89 d3                	mov    ebx,edx
c0010343:	29 c3                	sub    ebx,eax
c0010345:	74 0b                	je     c0010352 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010347:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001034a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001034e:	89 d9                	mov    ecx,ebx
c0010350:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010352:	85 c0                	test   eax,eax
c0010354:	74 0d                	je     c0010363 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010356:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001035a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001035d:	89 de                	mov    esi,ebx
c001035f:	89 c1                	mov    ecx,eax
c0010361:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010363:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010366:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001036b:	75 10                	jne    c001037d <Pipe::write(unsigned long long, void*, int*)+0xad>
c001036d:	83 ec 0c             	sub    esp,0xc
c0010370:	68 65 7f 02 c0       	push   0xc0027f65
c0010375:	e8 3e f9 ff ff       	call   c000fcb8 <KePanic(char const*)>
c001037a:	83 c4 10             	add    esp,0x10
c001037d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010381:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010384:	89 08                	mov    DWORD PTR [eax],ecx
c0010386:	31 c0                	xor    eax,eax
c0010388:	83 c4 1c             	add    esp,0x1c
c001038b:	5b                   	pop    ebx
c001038c:	5e                   	pop    esi
c001038d:	5f                   	pop    edi
c001038e:	5d                   	pop    ebp
c001038f:	c3                   	ret    

c0010390 <Pipe::read(unsigned long long, void*, int*)>:
c0010390:	55                   	push   ebp
c0010391:	57                   	push   edi
c0010392:	56                   	push   esi
c0010393:	53                   	push   ebx
c0010394:	83 ec 1c             	sub    esp,0x1c
c0010397:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001039b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001039f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00103a3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00103a6:	89 c8                	mov    eax,ecx
c00103a8:	99                   	cdq    
c00103a9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00103ad:	74 27                	je     c00103d6 <Pipe::read(unsigned long long, void*, int*)+0x46>
c00103af:	39 f9                	cmp    ecx,edi
c00103b1:	89 d1                	mov    ecx,edx
c00103b3:	19 f1                	sbb    ecx,esi
c00103b5:	73 1f                	jae    c00103d6 <Pipe::read(unsigned long long, void*, int*)+0x46>
c00103b7:	fa                   	cli    
c00103b8:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c00103be:	e8 7d 64 00 00       	call   c0016840 <schedule()>
c00103c3:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c00103ca:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c00103d1:	75 d0                	jne    c00103a3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103d3:	fb                   	sti    
c00103d4:	eb cd                	jmp    c00103a3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103d6:	39 f8                	cmp    eax,edi
c00103d8:	89 d1                	mov    ecx,edx
c00103da:	89 3c 24             	mov    DWORD PTR [esp],edi
c00103dd:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00103e1:	19 f1                	sbb    ecx,esi
c00103e3:	73 07                	jae    c00103ec <Pipe::read(unsigned long long, void*, int*)+0x5c>
c00103e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00103e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103ec:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00103ef:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00103f2:	29 f7                	sub    edi,esi
c00103f4:	89 f8                	mov    eax,edi
c00103f6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00103fa:	99                   	cdq    
c00103fb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00103fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010402:	19 d0                	sbb    eax,edx
c0010404:	73 07                	jae    c001040d <Pipe::read(unsigned long long, void*, int*)+0x7d>
c0010406:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001040d:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010410:	89 ea                	mov    edx,ebp
c0010412:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010416:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001041b:	74 0d                	je     c001042a <Pipe::read(unsigned long long, void*, int*)+0x9a>
c001041d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010420:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010424:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010428:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001042a:	85 d2                	test   edx,edx
c001042c:	74 11                	je     c001043f <Pipe::read(unsigned long long, void*, int*)+0xaf>
c001042e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010432:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010435:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010439:	89 d1                	mov    ecx,edx
c001043b:	89 c7                	mov    edi,eax
c001043d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001043f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010442:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010445:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010448:	99                   	cdq    
c0010449:	89 f7                	mov    edi,esi
c001044b:	03 04 24             	add    eax,DWORD PTR [esp]
c001044e:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010452:	c1 ff 1f             	sar    edi,0x1f
c0010455:	57                   	push   edi
c0010456:	56                   	push   esi
c0010457:	52                   	push   edx
c0010458:	50                   	push   eax
c0010459:	e8 16 1b 01 00       	call   c0021f74 <__umoddi3>
c001045e:	83 c4 10             	add    esp,0x10
c0010461:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010464:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010469:	75 10                	jne    c001047b <Pipe::read(unsigned long long, void*, int*)+0xeb>
c001046b:	83 ec 0c             	sub    esp,0xc
c001046e:	68 82 7f 02 c0       	push   0xc0027f82
c0010473:	e8 40 f8 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0010478:	83 c4 10             	add    esp,0x10
c001047b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001047f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010482:	89 10                	mov    DWORD PTR [eax],edx
c0010484:	83 c4 1c             	add    esp,0x1c
c0010487:	31 c0                	xor    eax,eax
c0010489:	5b                   	pop    ebx
c001048a:	5e                   	pop    esi
c001048b:	5f                   	pop    edi
c001048c:	5d                   	pop    ebp
c001048d:	c3                   	ret    

c001048e <Pipe::Pipe(int)>:
c001048e:	83 ec 0c             	sub    esp,0xc
c0010491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010495:	83 ec 08             	sub    esp,0x8
c0010498:	6a 00                	push   0x0
c001049a:	50                   	push   eax
c001049b:	e8 5c 29 00 00       	call   c0012dfc <UnixFile::UnixFile(int)>
c00104a0:	83 c4 10             	add    esp,0x10
c00104a3:	ba a8 7f 02 c0       	mov    edx,0xc0027fa8
c00104a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ac:	89 10                	mov    DWORD PTR [eax],edx
c00104ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104b6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bd:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104d3:	83 ec 0c             	sub    esp,0xc
c00104d6:	50                   	push   eax
c00104d7:	e8 87 f3 ff ff       	call   c000f863 <malloc>
c00104dc:	83 c4 10             	add    esp,0x10
c00104df:	89 c2                	mov    edx,eax
c00104e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ec:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104f0:	90                   	nop
c00104f1:	83 c4 0c             	add    esp,0xc
c00104f4:	c3                   	ret    

c00104f5 <KePowerThread(void*)>:
c00104f5:	83 ec 0c             	sub    esp,0xc
c00104f8:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c00104ff:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c0010506:	75 01                	jne    c0010509 <KePowerThread(void*)+0x14>
c0010508:	fb                   	sti    
c0010509:	c6 05 ac 11 03 c0 00 	mov    BYTE PTR ds:0xc00311ac,0x0
c0010510:	50                   	push   eax
c0010511:	50                   	push   eax
c0010512:	6a 00                	push   0x0
c0010514:	6a 0a                	push   0xa
c0010516:	e8 31 65 00 00       	call   c0016a4c <sleep(unsigned long long)>
c001051b:	83 05 e4 11 03 c0 0a 	add    DWORD PTR ds:0xc00311e4,0xa
c0010522:	83 c4 10             	add    esp,0x10
c0010525:	eb e2                	jmp    c0010509 <KePowerThread(void*)+0x14>

c0010527 <KeChangePowerSettings(PowerSettings)>:
c0010527:	57                   	push   edi
c0010528:	b9 09 00 00 00       	mov    ecx,0x9
c001052d:	56                   	push   esi
c001052e:	bf c0 11 03 c0       	mov    edi,0xc00311c0
c0010533:	fc                   	cld    
c0010534:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010538:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001053a:	5e                   	pop    esi
c001053b:	5f                   	pop    edi
c001053c:	c3                   	ret    

c001053d <KeUserIOReceived()>:
c001053d:	c7 05 e4 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311e4,0x0
c0010547:	c3                   	ret    

c0010548 <KeSetupPowerManager()>:
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	c7 05 e4 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311e4,0x0
c0010555:	68 f0 00 00 00       	push   0xf0
c001055a:	c6 05 ac 11 03 c0 00 	mov    BYTE PTR ds:0xc00311ac,0x0
c0010561:	6a 00                	push   0x0
c0010563:	68 f5 04 01 c0       	push   0xc00104f5
c0010568:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c001056e:	e8 01 60 00 00       	call   c0016574 <Process::createThread(void (*)(void*), void*, int)>
c0010573:	c7 05 c0 11 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00311c0,0x2
c001057d:	c7 05 c4 11 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00311c4,0x1
c0010587:	c7 05 c8 11 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00311c8,0x3
c0010591:	c7 05 cc 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311cc,0x0
c001059b:	c7 05 d8 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311d8,0x0
c00105a5:	c7 05 d0 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311d0,0x0
c00105af:	c7 05 dc 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311dc,0x0
c00105b9:	c7 05 d4 11 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00311d4,0x3c
c00105c3:	c7 05 e0 11 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00311e0,0x3c
c00105cd:	83 c4 1c             	add    esp,0x1c
c00105d0:	c3                   	ret    

c00105d1 <KePrepareShutdown()>:
c00105d1:	83 ec 0c             	sub    esp,0xc
c00105d4:	e8 6f cc ff ff       	call   c000d248 <KeExecuteAtexit()>
c00105d9:	83 ec 0c             	sub    esp,0xc
c00105dc:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c00105e1:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00105e7:	e8 d0 96 ff ff       	call   c0009cbc <Device::closeAll()>
c00105ec:	83 c4 1c             	add    esp,0x1c
c00105ef:	c3                   	ret    

c00105f0 <KeRegisterShutdownHandler(void (*)())>:
c00105f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f4:	a3 a8 11 03 c0       	mov    ds:0xc00311a8,eax
c00105f9:	c3                   	ret    

c00105fa <KeRegisterRestartHandler(void (*)())>:
c00105fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105fe:	a3 a4 11 03 c0       	mov    ds:0xc00311a4,eax
c0010603:	c3                   	ret    

c0010604 <KeRegisterSleepHandler(void (*)())>:
c0010604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010608:	a3 a0 11 03 c0       	mov    ds:0xc00311a0,eax
c001060d:	c3                   	ret    

c001060e <KeShutdown()>:
c001060e:	83 ec 0c             	sub    esp,0xc
c0010611:	e8 bb ff ff ff       	call   c00105d1 <KePrepareShutdown()>
c0010616:	a1 a8 11 03 c0       	mov    eax,ds:0xc00311a8
c001061b:	85 c0                	test   eax,eax
c001061d:	74 04                	je     c0010623 <KeShutdown()+0x15>
c001061f:	ff d0                	call   eax
c0010621:	eb 10                	jmp    c0010633 <KeShutdown()+0x25>
c0010623:	83 ec 0c             	sub    esp,0xc
c0010626:	68 bc 7f 02 c0       	push   0xc0027fbc
c001062b:	e8 88 f6 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0010630:	83 c4 10             	add    esp,0x10
c0010633:	83 ec 0c             	sub    esp,0xc
c0010636:	68 dd 7f 02 c0       	push   0xc0027fdd
c001063b:	e8 78 f6 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0010640:	83 c4 1c             	add    esp,0x1c
c0010643:	c3                   	ret    

c0010644 <KeSleep()>:
c0010644:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c0010649:	85 c0                	test   eax,eax
c001064b:	74 02                	je     c001064f <KeSleep()+0xb>
c001064d:	ff e0                	jmp    eax
c001064f:	c3                   	ret    

c0010650 <KeHandlePowerButton()>:
c0010650:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c0010655:	83 f8 02             	cmp    eax,0x2
c0010658:	75 02                	jne    c001065c <KeHandlePowerButton()+0xc>
c001065a:	eb b2                	jmp    c001060e <KeShutdown()>
c001065c:	48                   	dec    eax
c001065d:	75 02                	jne    c0010661 <KeHandlePowerButton()+0x11>
c001065f:	eb e3                	jmp    c0010644 <KeSleep()>
c0010661:	c3                   	ret    

c0010662 <KeHandleSleepButton()>:
c0010662:	a1 c4 11 03 c0       	mov    eax,ds:0xc00311c4
c0010667:	83 f8 02             	cmp    eax,0x2
c001066a:	75 02                	jne    c001066e <KeHandleSleepButton()+0xc>
c001066c:	eb a0                	jmp    c001060e <KeShutdown()>
c001066e:	48                   	dec    eax
c001066f:	75 02                	jne    c0010673 <KeHandleSleepButton()+0x11>
c0010671:	eb d1                	jmp    c0010644 <KeSleep()>
c0010673:	c3                   	ret    

c0010674 <KeRestart()>:
c0010674:	83 ec 0c             	sub    esp,0xc
c0010677:	e8 55 ff ff ff       	call   c00105d1 <KePrepareShutdown()>
c001067c:	a1 a4 11 03 c0       	mov    eax,ds:0xc00311a4
c0010681:	85 c0                	test   eax,eax
c0010683:	74 02                	je     c0010687 <KeRestart()+0x13>
c0010685:	ff d0                	call   eax
c0010687:	83 ec 0c             	sub    esp,0xc
c001068a:	68 01 80 02 c0       	push   0xc0028001
c001068f:	e8 24 f6 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0010694:	83 c4 1c             	add    esp,0x1c
c0010697:	c3                   	ret    

c0010698 <KeRand()>:
c0010698:	69 05 e8 11 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00311e8,0x2875
c00106a2:	69 0d ec 11 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00311ec,0xa2e7b175
c00106ac:	53                   	push   ebx
c00106ad:	01 c1                	add    ecx,eax
c00106af:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00106b4:	f7 25 e8 11 03 c0    	mul    DWORD PTR ds:0xc00311e8
c00106ba:	01 ca                	add    edx,ecx
c00106bc:	05 ef 04 b5 00       	add    eax,0xb504ef
c00106c1:	83 d2 00             	adc    edx,0x0
c00106c4:	a3 e8 11 03 c0       	mov    ds:0xc00311e8,eax
c00106c9:	0f b7 da             	movzx  ebx,dx
c00106cc:	89 da                	mov    edx,ebx
c00106ce:	89 1d ec 11 03 c0    	mov    DWORD PTR ds:0xc00311ec,ebx
c00106d4:	0f ac d0 0e          	shrd   eax,edx,0xe
c00106d8:	5b                   	pop    ebx
c00106d9:	c3                   	ret    

c00106da <KeSeedRand(unsigned int)>:
c00106da:	53                   	push   ebx
c00106db:	83 ec 08             	sub    esp,0x8
c00106de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106e2:	e8 5f a4 00 00       	call   c001ab46 <HalGetRand()>
c00106e7:	c7 05 ec 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311ec,0x0
c00106f1:	31 d8                	xor    eax,ebx
c00106f3:	a3 e8 11 03 c0       	mov    ds:0xc00311e8,eax
c00106f8:	e8 9b ff ff ff       	call   c0010698 <KeRand()>
c00106fd:	83 c4 08             	add    esp,0x8
c0010700:	5b                   	pop    ebx
c0010701:	eb 95                	jmp    c0010698 <KeRand()>

c0010703 <KeInitRand()>:
c0010703:	83 ec 0c             	sub    esp,0xc
c0010706:	e8 09 a2 00 00       	call   c001a914 <HalQueryPerformanceCounter()>
c001070b:	0f 20 da             	mov    edx,cr3
c001070e:	0f 22 da             	mov    cr3,edx
c0010711:	0f 20 da             	mov    edx,cr3
c0010714:	0f 22 da             	mov    cr3,edx
c0010717:	0f 20 da             	mov    edx,cr3
c001071a:	0f 22 da             	mov    cr3,edx
c001071d:	0f 20 da             	mov    edx,cr3
c0010720:	0f 22 da             	mov    cr3,edx
c0010723:	83 ec 0c             	sub    esp,0xc
c0010726:	35 03 8a 95 38       	xor    eax,0x38958a03
c001072b:	50                   	push   eax
c001072c:	e8 a9 ff ff ff       	call   c00106da <KeSeedRand(unsigned int)>
c0010731:	83 c4 1c             	add    esp,0x1c
c0010734:	c3                   	ret    
c0010735:	66 90                	xchg   ax,ax
c0010737:	90                   	nop

c0010738 <KeResolveCompatibilitySymbol(char*)>:
c0010738:	83 ec 0c             	sub    esp,0xc
c001073b:	83 ec 08             	sub    esp,0x8
c001073e:	68 10 80 02 c0       	push   0xc0028010
c0010743:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010747:	e8 04 00 ff ff       	call   c0000750 <strcmp>
c001074c:	83 c4 10             	add    esp,0x10
c001074f:	85 c0                	test   eax,eax
c0010751:	0f 94 c0             	sete   al
c0010754:	0f b6 c0             	movzx  eax,al
c0010757:	85 c0                	test   eax,eax
c0010759:	74 0d                	je     c0010768 <KeResolveCompatibilitySymbol(char*)+0x30>
c001075b:	b8 08 11 03 c0       	mov    eax,0xc0031108
c0010760:	e9 3b 02 00 00       	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010765:	8d 76 00             	lea    esi,[esi+0x0]
c0010768:	83 ec 08             	sub    esp,0x8
c001076b:	68 19 80 02 c0       	push   0xc0028019
c0010770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010774:	e8 d7 ff fe ff       	call   c0000750 <strcmp>
c0010779:	83 c4 10             	add    esp,0x10
c001077c:	85 c0                	test   eax,eax
c001077e:	0f 94 c0             	sete   al
c0010781:	0f b6 c0             	movzx  eax,al
c0010784:	85 c0                	test   eax,eax
c0010786:	74 0c                	je     c0010794 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010788:	b8 74 1e 02 c0       	mov    eax,0xc0021e74
c001078d:	e9 0e 02 00 00       	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010792:	66 90                	xchg   ax,ax
c0010794:	83 ec 08             	sub    esp,0x8
c0010797:	68 23 80 02 c0       	push   0xc0028023
c001079c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107a0:	e8 ab ff fe ff       	call   c0000750 <strcmp>
c00107a5:	83 c4 10             	add    esp,0x10
c00107a8:	85 c0                	test   eax,eax
c00107aa:	0f 94 c0             	sete   al
c00107ad:	0f b6 c0             	movzx  eax,al
c00107b0:	85 c0                	test   eax,eax
c00107b2:	74 0c                	je     c00107c0 <KeResolveCompatibilitySymbol(char*)+0x88>
c00107b4:	b8 08 11 03 c0       	mov    eax,0xc0031108
c00107b9:	e9 e2 01 00 00       	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c00107be:	66 90                	xchg   ax,ax
c00107c0:	83 ec 08             	sub    esp,0x8
c00107c3:	68 36 80 02 c0       	push   0xc0028036
c00107c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107cc:	e8 7f ff fe ff       	call   c0000750 <strcmp>
c00107d1:	83 c4 10             	add    esp,0x10
c00107d4:	85 c0                	test   eax,eax
c00107d6:	0f 94 c0             	sete   al
c00107d9:	0f b6 c0             	movzx  eax,al
c00107dc:	85 c0                	test   eax,eax
c00107de:	74 0c                	je     c00107ec <KeResolveCompatibilitySymbol(char*)+0xb4>
c00107e0:	b8 a8 1b 02 c0       	mov    eax,0xc0021ba8
c00107e5:	e9 b6 01 00 00       	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c00107ea:	66 90                	xchg   ax,ax
c00107ec:	83 ec 08             	sub    esp,0x8
c00107ef:	68 3f 80 02 c0       	push   0xc002803f
c00107f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107f8:	e8 53 ff fe ff       	call   c0000750 <strcmp>
c00107fd:	83 c4 10             	add    esp,0x10
c0010800:	85 c0                	test   eax,eax
c0010802:	0f 94 c0             	sete   al
c0010805:	0f b6 c0             	movzx  eax,al
c0010808:	85 c0                	test   eax,eax
c001080a:	74 0c                	je     c0010818 <KeResolveCompatibilitySymbol(char*)+0xe0>
c001080c:	b8 b8 fc 00 c0       	mov    eax,0xc000fcb8
c0010811:	e9 8a 01 00 00       	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010816:	66 90                	xchg   ax,ax
c0010818:	83 ec 08             	sub    esp,0x8
c001081b:	68 52 80 02 c0       	push   0xc0028052
c0010820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010824:	e8 27 ff fe ff       	call   c0000750 <strcmp>
c0010829:	83 c4 10             	add    esp,0x10
c001082c:	85 c0                	test   eax,eax
c001082e:	0f 94 c0             	sete   al
c0010831:	0f b6 c0             	movzx  eax,al
c0010834:	85 c0                	test   eax,eax
c0010836:	74 0c                	je     c0010844 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010838:	b8 d1 d2 00 c0       	mov    eax,0xc000d2d1
c001083d:	e9 5e 01 00 00       	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010842:	66 90                	xchg   ax,ax
c0010844:	83 ec 08             	sub    esp,0x8
c0010847:	68 6f 80 02 c0       	push   0xc002806f
c001084c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010850:	e8 fb fe fe ff       	call   c0000750 <strcmp>
c0010855:	83 c4 10             	add    esp,0x10
c0010858:	85 c0                	test   eax,eax
c001085a:	0f 94 c0             	sete   al
c001085d:	0f b6 c0             	movzx  eax,al
c0010860:	85 c0                	test   eax,eax
c0010862:	74 0c                	je     c0010870 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010864:	b8 74 1f 02 c0       	mov    eax,0xc0021f74
c0010869:	e9 32 01 00 00       	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c001086e:	66 90                	xchg   ax,ax
c0010870:	83 ec 08             	sub    esp,0x8
c0010873:	68 79 80 02 c0       	push   0xc0028079
c0010878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001087c:	e8 cf fe fe ff       	call   c0000750 <strcmp>
c0010881:	83 c4 10             	add    esp,0x10
c0010884:	85 c0                	test   eax,eax
c0010886:	0f 94 c0             	sete   al
c0010889:	0f b6 c0             	movzx  eax,al
c001088c:	85 c0                	test   eax,eax
c001088e:	74 0c                	je     c001089c <KeResolveCompatibilitySymbol(char*)+0x164>
c0010890:	b8 f4 1c 02 c0       	mov    eax,0xc0021cf4
c0010895:	e9 06 01 00 00       	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c001089a:	66 90                	xchg   ax,ax
c001089c:	83 ec 08             	sub    esp,0x8
c001089f:	68 82 80 02 c0       	push   0xc0028082
c00108a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a8:	e8 a3 fe fe ff       	call   c0000750 <strcmp>
c00108ad:	83 c4 10             	add    esp,0x10
c00108b0:	85 c0                	test   eax,eax
c00108b2:	0f 94 c0             	sete   al
c00108b5:	0f b6 c0             	movzx  eax,al
c00108b8:	85 c0                	test   eax,eax
c00108ba:	74 0c                	je     c00108c8 <KeResolveCompatibilitySymbol(char*)+0x190>
c00108bc:	b8 0c 11 03 c0       	mov    eax,0xc003110c
c00108c1:	e9 da 00 00 00       	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108c6:	66 90                	xchg   ax,ax
c00108c8:	83 ec 08             	sub    esp,0x8
c00108cb:	68 9a 80 02 c0       	push   0xc002809a
c00108d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d4:	e8 77 fe fe ff       	call   c0000750 <strcmp>
c00108d9:	83 c4 10             	add    esp,0x10
c00108dc:	85 c0                	test   eax,eax
c00108de:	0f 94 c0             	sete   al
c00108e1:	0f b6 c0             	movzx  eax,al
c00108e4:	85 c0                	test   eax,eax
c00108e6:	74 0c                	je     c00108f4 <KeResolveCompatibilitySymbol(char*)+0x1bc>
c00108e8:	b8 0c 11 03 c0       	mov    eax,0xc003110c
c00108ed:	e9 ae 00 00 00       	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108f2:	66 90                	xchg   ax,ax
c00108f4:	83 ec 08             	sub    esp,0x8
c00108f7:	68 a7 80 02 c0       	push   0xc00280a7
c00108fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010900:	e8 4b fe fe ff       	call   c0000750 <strcmp>
c0010905:	83 c4 10             	add    esp,0x10
c0010908:	85 c0                	test   eax,eax
c001090a:	0f 94 c0             	sete   al
c001090d:	0f b6 c0             	movzx  eax,al
c0010910:	85 c0                	test   eax,eax
c0010912:	74 0c                	je     c0010920 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c0010914:	b8 0d 11 03 c0       	mov    eax,0xc003110d
c0010919:	e9 82 00 00 00       	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c001091e:	66 90                	xchg   ax,ax
c0010920:	83 ec 08             	sub    esp,0x8
c0010923:	68 b4 80 02 c0       	push   0xc00280b4
c0010928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001092c:	e8 1f fe fe ff       	call   c0000750 <strcmp>
c0010931:	83 c4 10             	add    esp,0x10
c0010934:	85 c0                	test   eax,eax
c0010936:	0f 94 c0             	sete   al
c0010939:	0f b6 c0             	movzx  eax,al
c001093c:	85 c0                	test   eax,eax
c001093e:	74 08                	je     c0010948 <KeResolveCompatibilitySymbol(char*)+0x210>
c0010940:	b8 0c 11 03 c0       	mov    eax,0xc003110c
c0010945:	eb 59                	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010947:	90                   	nop
c0010948:	83 ec 08             	sub    esp,0x8
c001094b:	68 c5 80 02 c0       	push   0xc00280c5
c0010950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010954:	e8 f7 fd fe ff       	call   c0000750 <strcmp>
c0010959:	83 c4 10             	add    esp,0x10
c001095c:	85 c0                	test   eax,eax
c001095e:	0f 94 c0             	sete   al
c0010961:	0f b6 c0             	movzx  eax,al
c0010964:	85 c0                	test   eax,eax
c0010966:	74 08                	je     c0010970 <KeResolveCompatibilitySymbol(char*)+0x238>
c0010968:	b8 0d 11 03 c0       	mov    eax,0xc003110d
c001096d:	eb 31                	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c001096f:	90                   	nop
c0010970:	83 ec 08             	sub    esp,0x8
c0010973:	68 d6 80 02 c0       	push   0xc00280d6
c0010978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001097c:	e8 cf fd fe ff       	call   c0000750 <strcmp>
c0010981:	83 c4 10             	add    esp,0x10
c0010984:	85 c0                	test   eax,eax
c0010986:	0f 94 c0             	sete   al
c0010989:	0f b6 c0             	movzx  eax,al
c001098c:	85 c0                	test   eax,eax
c001098e:	74 08                	je     c0010998 <KeResolveCompatibilitySymbol(char*)+0x260>
c0010990:	b8 40 70 01 c0       	mov    eax,0xc0017040
c0010995:	eb 09                	jmp    c00109a0 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010997:	90                   	nop
c0010998:	b8 00 00 00 00       	mov    eax,0x0
c001099d:	8d 76 00             	lea    esi,[esi+0x0]
c00109a0:	83 c4 0c             	add    esp,0xc
c00109a3:	c3                   	ret    

c00109a4 <Semaphore::Semaphore(int)>:
c00109a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00109ac:	89 10                	mov    DWORD PTR [eax],edx
c00109ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109b2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00109b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00109c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109c8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00109cf:	90                   	nop
c00109d0:	c3                   	ret    
c00109d1:	90                   	nop
c00109d2:	66 90                	xchg   ax,ax

c00109d4 <Semaphore::tryAcquire()>:
c00109d4:	83 ec 0c             	sub    esp,0xc
c00109d7:	fa                   	cli    
c00109d8:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00109dd:	83 c0 01             	add    eax,0x1
c00109e0:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c00109e5:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c00109ea:	83 c0 01             	add    eax,0x1
c00109ed:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c00109f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00109f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00109ff:	39 c2                	cmp    edx,eax
c0010a01:	7d 59                	jge    c0010a5c <Semaphore::tryAcquire()+0x88>
c0010a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010a0a:	8d 50 01             	lea    edx,[eax+0x1]
c0010a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a11:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a14:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010a19:	83 e8 01             	sub    eax,0x1
c0010a1c:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010a21:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010a26:	85 c0                	test   eax,eax
c0010a28:	75 1a                	jne    c0010a44 <Semaphore::tryAcquire()+0x70>
c0010a2a:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c0010a2f:	85 c0                	test   eax,eax
c0010a31:	74 11                	je     c0010a44 <Semaphore::tryAcquire()+0x70>
c0010a33:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0010a3d:	e8 fe 5d 00 00       	call   c0016840 <schedule()>
c0010a42:	66 90                	xchg   ax,ax
c0010a44:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0010a4c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010a51:	85 c0                	test   eax,eax
c0010a53:	75 03                	jne    c0010a58 <Semaphore::tryAcquire()+0x84>
c0010a55:	fb                   	sti    
c0010a56:	66 90                	xchg   ax,ax
c0010a58:	b0 01                	mov    al,0x1
c0010a5a:	eb 48                	jmp    c0010aa4 <Semaphore::tryAcquire()+0xd0>
c0010a5c:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010a61:	83 e8 01             	sub    eax,0x1
c0010a64:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010a69:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010a6e:	85 c0                	test   eax,eax
c0010a70:	75 1a                	jne    c0010a8c <Semaphore::tryAcquire()+0xb8>
c0010a72:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c0010a77:	85 c0                	test   eax,eax
c0010a79:	74 11                	je     c0010a8c <Semaphore::tryAcquire()+0xb8>
c0010a7b:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0010a85:	e8 b6 5d 00 00       	call   c0016840 <schedule()>
c0010a8a:	66 90                	xchg   ax,ax
c0010a8c:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0010a94:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010a99:	85 c0                	test   eax,eax
c0010a9b:	75 03                	jne    c0010aa0 <Semaphore::tryAcquire()+0xcc>
c0010a9d:	fb                   	sti    
c0010a9e:	66 90                	xchg   ax,ax
c0010aa0:	b0 00                	mov    al,0x0
c0010aa2:	66 90                	xchg   ax,ax
c0010aa4:	83 c4 0c             	add    esp,0xc
c0010aa7:	c3                   	ret    

c0010aa8 <Semaphore::assertLocked(char const*)>:
c0010aa8:	83 ec 0c             	sub    esp,0xc
c0010aab:	fa                   	cli    
c0010aac:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010ab1:	83 c0 01             	add    eax,0x1
c0010ab4:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0010ab9:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010abe:	83 c0 01             	add    eax,0x1
c0010ac1:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aca:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ad3:	39 c2                	cmp    edx,eax
c0010ad5:	7d 11                	jge    c0010ae8 <Semaphore::assertLocked(char const*)+0x40>
c0010ad7:	83 ec 0c             	sub    esp,0xc
c0010ada:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ade:	e8 d5 f1 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0010ae3:	83 c4 10             	add    esp,0x10
c0010ae6:	66 90                	xchg   ax,ax
c0010ae8:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010aed:	83 e8 01             	sub    eax,0x1
c0010af0:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010af5:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010afa:	85 c0                	test   eax,eax
c0010afc:	75 1a                	jne    c0010b18 <Semaphore::assertLocked(char const*)+0x70>
c0010afe:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c0010b03:	85 c0                	test   eax,eax
c0010b05:	74 11                	je     c0010b18 <Semaphore::assertLocked(char const*)+0x70>
c0010b07:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0010b11:	e8 2a 5d 00 00       	call   c0016840 <schedule()>
c0010b16:	66 90                	xchg   ax,ax
c0010b18:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0010b20:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010b25:	85 c0                	test   eax,eax
c0010b27:	75 03                	jne    c0010b2c <Semaphore::assertLocked(char const*)+0x84>
c0010b29:	fb                   	sti    
c0010b2a:	66 90                	xchg   ax,ax
c0010b2c:	90                   	nop
c0010b2d:	83 c4 0c             	add    esp,0xc
c0010b30:	c3                   	ret    
c0010b31:	90                   	nop
c0010b32:	66 90                	xchg   ax,ax

c0010b34 <Semaphore::acquire(int)>:
c0010b34:	83 ec 1c             	sub    esp,0x1c
c0010b37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010b3c:	0f 84 ae 00 00 00    	je     c0010bf0 <Semaphore::acquire(int)+0xbc>
c0010b42:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010b4a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010b4f:	90                   	nop
c0010b50:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010b55:	85 c0                	test   eax,eax
c0010b57:	0f 84 87 00 00 00    	je     c0010be4 <Semaphore::acquire(int)+0xb0>
c0010b5d:	83 ec 0c             	sub    esp,0xc
c0010b60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010b64:	e8 6b fe ff ff       	call   c00109d4 <Semaphore::tryAcquire()>
c0010b69:	83 c4 10             	add    esp,0x10
c0010b6c:	83 f0 01             	xor    eax,0x1
c0010b6f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010b73:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010b77:	83 f0 01             	xor    eax,0x1
c0010b7a:	0f b6 c0             	movzx  eax,al
c0010b7d:	85 c0                	test   eax,eax
c0010b7f:	75 5f                	jne    c0010be0 <Semaphore::acquire(int)+0xac>
c0010b81:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010b86:	7f 34                	jg     c0010bbc <Semaphore::acquire(int)+0x88>
c0010b88:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010b8c:	89 d0                	mov    eax,edx
c0010b8e:	c1 e0 02             	shl    eax,0x2
c0010b91:	01 d0                	add    eax,edx
c0010b93:	01 c0                	add    eax,eax
c0010b95:	89 c2                	mov    edx,eax
c0010b97:	c1 fa 1f             	sar    edx,0x1f
c0010b9a:	83 ec 08             	sub    esp,0x8
c0010b9d:	52                   	push   edx
c0010b9e:	50                   	push   eax
c0010b9f:	e8 90 5e 00 00       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c0010ba4:	83 c4 10             	add    esp,0x10
c0010ba7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010bab:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010baf:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010bb7:	eb 97                	jmp    c0010b50 <Semaphore::acquire(int)+0x1c>
c0010bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010bbc:	83 ec 08             	sub    esp,0x8
c0010bbf:	6a 00                	push   0x0
c0010bc1:	68 90 01 00 00       	push   0x190
c0010bc6:	e8 69 5e 00 00       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c0010bcb:	83 c4 10             	add    esp,0x10
c0010bce:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010bd3:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010bd8:	e9 73 ff ff ff       	jmp    c0010b50 <Semaphore::acquire(int)+0x1c>
c0010bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0010be0:	90                   	nop
c0010be1:	8d 76 00             	lea    esi,[esi+0x0]
c0010be4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010be8:	e9 fb 00 00 00       	jmp    c0010ce8 <Semaphore::acquire(int)+0x1b4>
c0010bed:	8d 76 00             	lea    esi,[esi+0x0]
c0010bf0:	fa                   	cli    
c0010bf1:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010bf6:	83 c0 01             	add    eax,0x1
c0010bf9:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0010bfe:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010c03:	83 c0 01             	add    eax,0x1
c0010c06:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c0f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010c12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c16:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c18:	39 c2                	cmp    edx,eax
c0010c1a:	7d 14                	jge    c0010c30 <Semaphore::acquire(int)+0xfc>
c0010c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c23:	8d 50 01             	lea    edx,[eax+0x1]
c0010c26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c2d:	eb 6d                	jmp    c0010c9c <Semaphore::acquire(int)+0x168>
c0010c2f:	90                   	nop
c0010c30:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c37:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010c3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c45:	85 c0                	test   eax,eax
c0010c47:	75 13                	jne    c0010c5c <Semaphore::acquire(int)+0x128>
c0010c49:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010c4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c57:	eb 17                	jmp    c0010c70 <Semaphore::acquire(int)+0x13c>
c0010c59:	8d 76 00             	lea    esi,[esi+0x0]
c0010c5c:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010c61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c65:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010c68:	8b 12                	mov    edx,DWORD PTR [edx]
c0010c6a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c70:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010c75:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c7b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010c7e:	83 ec 0c             	sub    esp,0xc
c0010c81:	68 ec 80 02 c0       	push   0xc00280ec
c0010c86:	e8 f1 62 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010c8b:	83 c4 10             	add    esp,0x10
c0010c8e:	83 ec 0c             	sub    esp,0xc
c0010c91:	6a 05                	push   0x5
c0010c93:	e8 68 5c 00 00       	call   c0016900 <blockTask(TaskState)>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	90                   	nop
c0010c9c:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010ca1:	83 e8 01             	sub    eax,0x1
c0010ca4:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010ca9:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010cae:	85 c0                	test   eax,eax
c0010cb0:	75 1a                	jne    c0010ccc <Semaphore::acquire(int)+0x198>
c0010cb2:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c0010cb7:	85 c0                	test   eax,eax
c0010cb9:	74 11                	je     c0010ccc <Semaphore::acquire(int)+0x198>
c0010cbb:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0010cc5:	e8 76 5b 00 00       	call   c0016840 <schedule()>
c0010cca:	66 90                	xchg   ax,ax
c0010ccc:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0010cd4:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010cd9:	85 c0                	test   eax,eax
c0010cdb:	75 03                	jne    c0010ce0 <Semaphore::acquire(int)+0x1ac>
c0010cdd:	fb                   	sti    
c0010cde:	66 90                	xchg   ax,ax
c0010ce0:	b8 00 00 00 00       	mov    eax,0x0
c0010ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ce8:	83 c4 1c             	add    esp,0x1c
c0010ceb:	c3                   	ret    

c0010cec <Semaphore::acquire()>:
c0010cec:	83 ec 0c             	sub    esp,0xc
c0010cef:	83 ec 08             	sub    esp,0x8
c0010cf2:	6a 00                	push   0x0
c0010cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cf8:	e8 37 fe ff ff       	call   c0010b34 <Semaphore::acquire(int)>
c0010cfd:	83 c4 10             	add    esp,0x10
c0010d00:	90                   	nop
c0010d01:	83 c4 0c             	add    esp,0xc
c0010d04:	c3                   	ret    
c0010d05:	90                   	nop
c0010d06:	66 90                	xchg   ax,ax

c0010d08 <Semaphore::release()>:
c0010d08:	83 ec 1c             	sub    esp,0x1c
c0010d0b:	fa                   	cli    
c0010d0c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010d11:	83 c0 01             	add    eax,0x1
c0010d14:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0010d19:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010d1e:	83 c0 01             	add    eax,0x1
c0010d21:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010d26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d2d:	85 c0                	test   eax,eax
c0010d2f:	74 2b                	je     c0010d5c <Semaphore::release()+0x54>
c0010d31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d40:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010d43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d4a:	83 ec 0c             	sub    esp,0xc
c0010d4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d51:	e8 46 5e 00 00       	call   c0016b9c <unblockTask(ThreadControlBlock*)>
c0010d56:	83 c4 10             	add    esp,0x10
c0010d59:	eb 15                	jmp    c0010d70 <Semaphore::release()+0x68>
c0010d5b:	90                   	nop
c0010d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d63:	8d 50 ff             	lea    edx,[eax-0x1]
c0010d66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d6a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d70:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010d75:	83 e8 01             	sub    eax,0x1
c0010d78:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010d7d:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010d82:	85 c0                	test   eax,eax
c0010d84:	75 1a                	jne    c0010da0 <Semaphore::release()+0x98>
c0010d86:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c0010d8b:	85 c0                	test   eax,eax
c0010d8d:	74 11                	je     c0010da0 <Semaphore::release()+0x98>
c0010d8f:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0010d99:	e8 a2 5a 00 00       	call   c0016840 <schedule()>
c0010d9e:	66 90                	xchg   ax,ax
c0010da0:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0010da8:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010dad:	85 c0                	test   eax,eax
c0010daf:	75 03                	jne    c0010db4 <Semaphore::release()+0xac>
c0010db1:	fb                   	sti    
c0010db2:	66 90                	xchg   ax,ax
c0010db4:	90                   	nop
c0010db5:	83 c4 1c             	add    esp,0x1c
c0010db8:	c3                   	ret    

c0010db9 <KiSigKill(int)>:
c0010db9:	83 ec 0c             	sub    esp,0xc
c0010dbc:	6a 00                	push   0x0
c0010dbe:	6a 00                	push   0x0
c0010dc0:	6a ff                	push   0xffffffff
c0010dc2:	6a 01                	push   0x1
c0010dc4:	e8 89 b2 01 00       	call   c002c052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010dc9:	83 c4 1c             	add    esp,0x1c
c0010dcc:	c3                   	ret    

c0010dcd <KiDefaultSignalHandlerIgnore(int)>:
c0010dcd:	c3                   	ret    

c0010dce <KiDefaultSignalHandlerPause(int)>:
c0010dce:	57                   	push   edi
c0010dcf:	b9 07 00 00 00       	mov    ecx,0x7
c0010dd4:	56                   	push   esi
c0010dd5:	be 47 81 02 c0       	mov    esi,0xc0028147
c0010dda:	83 ec 24             	sub    esp,0x24
c0010ddd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010de1:	fc                   	cld    
c0010de2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010de4:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010de8:	50                   	push   eax
c0010de9:	6a 00                	push   0x0
c0010deb:	6a 00                	push   0x0
c0010ded:	6a 27                	push   0x27
c0010def:	e8 5e b2 01 00       	call   c002c052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010df4:	83 c4 34             	add    esp,0x34
c0010df7:	5e                   	pop    esi
c0010df8:	5f                   	pop    edi
c0010df9:	c3                   	ret    

c0010dfa <KiDefaultSignalHandlerResume(int)>:
c0010dfa:	57                   	push   edi
c0010dfb:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010e00:	56                   	push   esi
c0010e01:	be 63 81 02 c0       	mov    esi,0xc0028163
c0010e06:	83 ec 24             	sub    esp,0x24
c0010e09:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010e0d:	fc                   	cld    
c0010e0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e10:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010e14:	50                   	push   eax
c0010e15:	6a 00                	push   0x0
c0010e17:	6a 00                	push   0x0
c0010e19:	6a 27                	push   0x27
c0010e1b:	e8 32 b2 01 00       	call   c002c052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010e20:	83 c4 34             	add    esp,0x34
c0010e23:	5e                   	pop    esi
c0010e24:	5f                   	pop    edi
c0010e25:	c3                   	ret    

c0010e26 <KeDeinitSignals(SigHandlerBlock*)>:
c0010e26:	e9 48 ea ff ff       	jmp    c000f873 <free>

c0010e2b <KeInitSignals()>:
c0010e2b:	53                   	push   ebx
c0010e2c:	83 ec 14             	sub    esp,0x14
c0010e2f:	68 c8 00 00 00       	push   0xc8
c0010e34:	e8 2a ea ff ff       	call   c000f863 <malloc>
c0010e39:	83 c4 0c             	add    esp,0xc
c0010e3c:	89 c3                	mov    ebx,eax
c0010e3e:	6a 04                	push   0x4
c0010e40:	6a 00                	push   0x0
c0010e42:	50                   	push   eax
c0010e43:	e8 a8 f6 fe ff       	call   c00004f0 <memset>
c0010e48:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010e52:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0010e5c:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010e63:	83 c4 0c             	add    esp,0xc
c0010e66:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010e6c:	6a 20                	push   0x20
c0010e6e:	6a 00                	push   0x0
c0010e70:	50                   	push   eax
c0010e71:	e8 7a f6 fe ff       	call   c00004f0 <memset>
c0010e76:	83 c4 0c             	add    esp,0xc
c0010e79:	6a 44                	push   0x44
c0010e7b:	6a 00                	push   0x0
c0010e7d:	53                   	push   ebx
c0010e7e:	e8 6d f6 fe ff       	call   c00004f0 <memset>
c0010e83:	83 c4 0c             	add    esp,0xc
c0010e86:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010e8c:	6a 11                	push   0x11
c0010e8e:	6a 00                	push   0x0
c0010e90:	50                   	push   eax
c0010e91:	e8 5a f6 fe ff       	call   c00004f0 <memset>
c0010e96:	89 d8                	mov    eax,ebx
c0010e98:	83 c4 18             	add    esp,0x18
c0010e9b:	5b                   	pop    ebx
c0010e9c:	c3                   	ret    

c0010e9d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010e9d:	53                   	push   ebx
c0010e9e:	b8 01 00 00 00       	mov    eax,0x1
c0010ea3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010eab:	83 f9 10             	cmp    ecx,0x10
c0010eae:	7f 21                	jg     c0010ed1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010eb0:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eb7:	89 03                	mov    DWORD PTR [ebx],eax
c0010eb9:	b8 01 00 00 00       	mov    eax,0x1
c0010ebe:	d3 e0                	shl    eax,cl
c0010ec0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010ec4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010ec7:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010ecf:	31 c0                	xor    eax,eax
c0010ed1:	5b                   	pop    ebx
c0010ed2:	c3                   	ret    

c0010ed3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010ed3:	55                   	push   ebp
c0010ed4:	57                   	push   edi
c0010ed5:	bf 08 00 00 00       	mov    edi,0x8
c0010eda:	56                   	push   esi
c0010edb:	53                   	push   ebx
c0010edc:	83 ec 14             	sub    esp,0x14
c0010edf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010ee3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010ee7:	68 80 81 02 c0       	push   0xc0028180
c0010eec:	e8 8b 60 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010ef1:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010ef8:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010efe:	83 c4 10             	add    esp,0x10
c0010f01:	31 c9                	xor    ecx,ecx
c0010f03:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010f07:	99                   	cdq    
c0010f08:	f7 ff                	idiv   edi
c0010f0a:	8d 42 24             	lea    eax,[edx+0x24]
c0010f0d:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010f11:	85 f6                	test   esi,esi
c0010f13:	75 1a                	jne    c0010f2f <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0010f15:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f19:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0010f1d:	50                   	push   eax
c0010f1e:	50                   	push   eax
c0010f1f:	52                   	push   edx
c0010f20:	68 96 81 02 c0       	push   0xc0028196
c0010f25:	e8 52 60 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010f2a:	83 c4 10             	add    esp,0x10
c0010f2d:	eb 1b                	jmp    c0010f4a <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0010f2f:	41                   	inc    ecx
c0010f30:	83 f9 08             	cmp    ecx,0x8
c0010f33:	75 ce                	jne    c0010f03 <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0010f35:	83 ec 0c             	sub    esp,0xc
c0010f38:	be 01 00 00 00       	mov    esi,0x1
c0010f3d:	68 b7 81 02 c0       	push   0xc00281b7
c0010f42:	e8 35 60 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010f47:	83 c4 10             	add    esp,0x10
c0010f4a:	83 c4 0c             	add    esp,0xc
c0010f4d:	89 f0                	mov    eax,esi
c0010f4f:	5b                   	pop    ebx
c0010f50:	5e                   	pop    esi
c0010f51:	5f                   	pop    edi
c0010f52:	5d                   	pop    ebp
c0010f53:	c3                   	ret    

c0010f54 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010f54:	55                   	push   ebp
c0010f55:	57                   	push   edi
c0010f56:	56                   	push   esi
c0010f57:	53                   	push   ebx
c0010f58:	83 ec 1c             	sub    esp,0x1c
c0010f5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f5f:	85 db                	test   ebx,ebx
c0010f61:	0f 84 e0 00 00 00    	je     c0011047 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010f67:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010f6e:	0f 84 d3 00 00 00    	je     c0011047 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010f74:	31 c9                	xor    ecx,ecx
c0010f76:	bf 08 00 00 00       	mov    edi,0x8
c0010f7b:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010f81:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010f84:	99                   	cdq    
c0010f85:	f7 ff                	idiv   edi
c0010f87:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010f8e:	85 ed                	test   ebp,ebp
c0010f90:	0f 84 d2 00 00 00    	je     c0011068 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0010f96:	89 e9                	mov    ecx,ebp
c0010f98:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010f9e:	bf 01 00 00 00       	mov    edi,0x1
c0010fa3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010fa7:	d3 e7                	shl    edi,cl
c0010fa9:	31 c9                	xor    ecx,ecx
c0010fab:	b8 01 00 00 00       	mov    eax,0x1
c0010fb0:	d3 e0                	shl    eax,cl
c0010fb2:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c0010fb6:	74 0a                	je     c0010fc2 <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0010fb8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010fbc:	0f 85 85 00 00 00    	jne    c0011047 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010fc2:	41                   	inc    ecx
c0010fc3:	83 f9 11             	cmp    ecx,0x11
c0010fc6:	75 e3                	jne    c0010fab <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0010fc8:	46                   	inc    esi
c0010fc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fcd:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010fd3:	09 f8                	or     eax,edi
c0010fd5:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010fe0:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010fe6:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010fed:	31 c0                	xor    eax,eax
c0010fef:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010ff7:	74 09                	je     c0011002 <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0010ff9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011000:	eb 06                	jmp    c0011008 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c0011002:	40                   	inc    eax
c0011003:	83 f8 08             	cmp    eax,0x8
c0011006:	75 e7                	jne    c0010fef <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0011008:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001100b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001100f:	83 fd 09             	cmp    ebp,0x9
c0011012:	89 2a                	mov    DWORD PTR [edx],ebp
c0011014:	75 14                	jne    c001102a <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0011016:	83 ec 0c             	sub    esp,0xc
c0011019:	68 c8 81 02 c0       	push   0xc00281c8
c001101e:	e8 59 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011023:	b8 b9 0d 01 c0       	mov    eax,0xc0010db9
c0011028:	eb 39                	jmp    c0011063 <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c001102a:	83 f8 01             	cmp    eax,0x1
c001102d:	75 1c                	jne    c001104b <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c001102f:	83 ec 0c             	sub    esp,0xc
c0011032:	f7 d7                	not    edi
c0011034:	68 d2 81 02 c0       	push   0xc00281d2
c0011039:	e8 3e 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001103e:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011044:	83 c4 10             	add    esp,0x10
c0011047:	31 c0                	xor    eax,eax
c0011049:	eb 30                	jmp    c001107b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c001104b:	85 c0                	test   eax,eax
c001104d:	75 2c                	jne    c001107b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c001104f:	83 ec 0c             	sub    esp,0xc
c0011052:	68 df 81 02 c0       	push   0xc00281df
c0011057:	e8 20 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001105c:	8b 04 ad e0 b3 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd4c20]
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	eb 13                	jmp    c001107b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011068:	46                   	inc    esi
c0011069:	41                   	inc    ecx
c001106a:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011070:	83 f9 08             	cmp    ecx,0x8
c0011073:	0f 85 02 ff ff ff    	jne    c0010f7b <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011079:	eb cc                	jmp    c0011047 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001107b:	83 c4 1c             	add    esp,0x1c
c001107e:	5b                   	pop    ebx
c001107f:	5e                   	pop    esi
c0011080:	5f                   	pop    edi
c0011081:	5d                   	pop    ebp
c0011082:	c3                   	ret    

c0011083 <KiCheckSignalZ>:
c0011083:	80 3d 0c 11 03 c0 00 	cmp    BYTE PTR ds:0xc003110c,0x0
c001108a:	74 43                	je     c00110cf <KiCheckSignalZ+0x4c>
c001108c:	83 ec 24             	sub    esp,0x24
c001108f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0011093:	50                   	push   eax
c0011094:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011099:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001109c:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00110a2:	e8 ad fe ff ff       	call   c0010f54 <KeCheckSignal(SigHandlerBlock*, int*)>
c00110a7:	83 c4 10             	add    esp,0x10
c00110aa:	31 d2                	xor    edx,edx
c00110ac:	85 c0                	test   eax,eax
c00110ae:	74 19                	je     c00110c9 <KiCheckSignalZ+0x46>
c00110b0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00110b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00110b9:	89 02                	mov    DWORD PTR [edx],eax
c00110bb:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00110c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110c6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00110c9:	89 d0                	mov    eax,edx
c00110cb:	83 c4 1c             	add    esp,0x1c
c00110ce:	c3                   	ret    
c00110cf:	31 d2                	xor    edx,edx
c00110d1:	89 d0                	mov    eax,edx
c00110d3:	c3                   	ret    

c00110d4 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00110d4:	56                   	push   esi
c00110d5:	53                   	push   ebx
c00110d6:	bb 01 00 00 00       	mov    ebx,0x1
c00110db:	52                   	push   edx
c00110dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00110e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00110e4:	d3 e3                	shl    ebx,cl
c00110e6:	83 f9 10             	cmp    ecx,0x10
c00110e9:	7f 08                	jg     c00110f3 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00110eb:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00110f1:	75 10                	jne    c0011103 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00110f3:	83 ec 0c             	sub    esp,0xc
c00110f6:	68 02 82 02 c0       	push   0xc0028202
c00110fb:	e8 b8 eb ff ff       	call   c000fcb8 <KePanic(char const*)>
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	f7 d3                	not    ebx
c0011105:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001110b:	58                   	pop    eax
c001110c:	5b                   	pop    ebx
c001110d:	5e                   	pop    esi
c001110e:	c3                   	ret    

c001110f <KiFinishSignalZ>:
c001110f:	53                   	push   ebx
c0011110:	83 ec 08             	sub    esp,0x8
c0011113:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011118:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001111c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001111f:	83 fa 08             	cmp    edx,0x8
c0011122:	75 0c                	jne    c0011130 <KiFinishSignalZ+0x21>
c0011124:	83 ec 0c             	sub    esp,0xc
c0011127:	50                   	push   eax
c0011128:	e8 6f 5a 00 00       	call   c0016b9c <unblockTask(ThreadControlBlock*)>
c001112d:	83 c4 10             	add    esp,0x10
c0011130:	50                   	push   eax
c0011131:	50                   	push   eax
c0011132:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011135:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001113a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001113d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011143:	e8 8c ff ff ff       	call   c00110d4 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011148:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001114e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011155:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001115c:	83 c4 18             	add    esp,0x18
c001115f:	5b                   	pop    ebx
c0011160:	c3                   	ret    

c0011161 <SysSeekDir(regs*)>:
c0011161:	31 c0                	xor    eax,eax
c0011163:	31 d2                	xor    edx,edx
c0011165:	c3                   	ret    

c0011166 <SysTellDir(regs*)>:
c0011166:	31 c0                	xor    eax,eax
c0011168:	31 d2                	xor    edx,edx
c001116a:	c3                   	ret    

c001116b <SysVerify(regs*)>:
c001116b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001116f:	31 d2                	xor    edx,edx
c0011171:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011174:	c3                   	ret    

c0011175 <SysGetArgc(regs*)>:
c0011175:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001117a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001117d:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c0011183:	89 c2                	mov    edx,eax
c0011185:	c1 fa 1f             	sar    edx,0x1f
c0011188:	c3                   	ret    

c0011189 <SysTTYName(regs*)>:
c0011189:	b8 01 00 00 00       	mov    eax,0x1
c001118e:	31 d2                	xor    edx,edx
c0011190:	c3                   	ret    

c0011191 <SysFormatDisk(regs*)>:
c0011191:	56                   	push   esi
c0011192:	53                   	push   ebx
c0011193:	83 ec 04             	sub    esp,0x4
c0011196:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001119a:	8b 1d 04 03 03 c0    	mov    ebx,DWORD PTR ds:0xc0030304
c00111a0:	eb 28                	jmp    c00111ca <SysFormatDisk(regs*)+0x39>
c00111a2:	83 ec 0c             	sub    esp,0xc
c00111a5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00111a8:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00111ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00111ad:	51                   	push   ecx
c00111ae:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00111b1:	51                   	push   ecx
c00111b2:	50                   	push   eax
c00111b3:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c00111ba:	50                   	push   eax
c00111bb:	53                   	push   ebx
c00111bc:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00111bf:	83 c4 20             	add    esp,0x20
c00111c2:	83 f8 08             	cmp    eax,0x8
c00111c5:	75 14                	jne    c00111db <SysFormatDisk(regs*)+0x4a>
c00111c7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00111ca:	85 db                	test   ebx,ebx
c00111cc:	75 d4                	jne    c00111a2 <SysFormatDisk(regs*)+0x11>
c00111ce:	83 c4 04             	add    esp,0x4
c00111d1:	b8 03 00 00 00       	mov    eax,0x3
c00111d6:	31 d2                	xor    edx,edx
c00111d8:	5b                   	pop    ebx
c00111d9:	5e                   	pop    esi
c00111da:	c3                   	ret    
c00111db:	85 c0                	test   eax,eax
c00111dd:	74 1f                	je     c00111fe <SysFormatDisk(regs*)+0x6d>
c00111df:	83 f8 09             	cmp    eax,0x9
c00111e2:	74 0d                	je     c00111f1 <SysFormatDisk(regs*)+0x60>
c00111e4:	83 c4 04             	add    esp,0x4
c00111e7:	b8 02 00 00 00       	mov    eax,0x2
c00111ec:	31 d2                	xor    edx,edx
c00111ee:	5b                   	pop    ebx
c00111ef:	5e                   	pop    esi
c00111f0:	c3                   	ret    
c00111f1:	83 c4 04             	add    esp,0x4
c00111f4:	b8 01 00 00 00       	mov    eax,0x1
c00111f9:	31 d2                	xor    edx,edx
c00111fb:	5b                   	pop    ebx
c00111fc:	5e                   	pop    esi
c00111fd:	c3                   	ret    
c00111fe:	83 c4 04             	add    esp,0x4
c0011201:	31 c0                	xor    eax,eax
c0011203:	31 d2                	xor    edx,edx
c0011205:	5b                   	pop    ebx
c0011206:	5e                   	pop    esi
c0011207:	c3                   	ret    

c0011208 <SysSetDiskVolumeLabel(regs*)>:
c0011208:	56                   	push   esi
c0011209:	53                   	push   ebx
c001120a:	83 ec 04             	sub    esp,0x4
c001120d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011211:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011214:	83 f8 19             	cmp    eax,0x19
c0011217:	77 33                	ja     c001124c <SysSetDiskVolumeLabel(regs*)+0x44>
c0011219:	8b 0c 85 e0 0a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcf520]
c0011220:	85 c9                	test   ecx,ecx
c0011222:	74 28                	je     c001124c <SysSetDiskVolumeLabel(regs*)+0x44>
c0011224:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011227:	85 db                	test   ebx,ebx
c0011229:	74 21                	je     c001124c <SysSetDiskVolumeLabel(regs*)+0x44>
c001122b:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011231:	85 d2                	test   edx,edx
c0011233:	74 17                	je     c001124c <SysSetDiskVolumeLabel(regs*)+0x44>
c0011235:	8b 32                	mov    esi,DWORD PTR [edx]
c0011237:	53                   	push   ebx
c0011238:	50                   	push   eax
c0011239:	51                   	push   ecx
c001123a:	52                   	push   edx
c001123b:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c001123e:	83 c4 10             	add    esp,0x10
c0011241:	89 c2                	mov    edx,eax
c0011243:	83 c4 04             	add    esp,0x4
c0011246:	c1 fa 1f             	sar    edx,0x1f
c0011249:	5b                   	pop    ebx
c001124a:	5e                   	pop    esi
c001124b:	c3                   	ret    
c001124c:	83 c4 04             	add    esp,0x4
c001124f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011254:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011259:	5b                   	pop    ebx
c001125a:	5e                   	pop    esi
c001125b:	c3                   	ret    

c001125c <SysGetDiskVolumeLabel(regs*)>:
c001125c:	57                   	push   edi
c001125d:	56                   	push   esi
c001125e:	53                   	push   ebx
c001125f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011263:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011266:	83 fa 19             	cmp    edx,0x19
c0011269:	77 3c                	ja     c00112a7 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001126b:	8b 0c 95 e0 0a 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffcf520]
c0011272:	85 c9                	test   ecx,ecx
c0011274:	74 31                	je     c00112a7 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011276:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011279:	85 db                	test   ebx,ebx
c001127b:	74 2a                	je     c00112a7 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001127d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011280:	85 f6                	test   esi,esi
c0011282:	74 23                	je     c00112a7 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011284:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001128a:	85 c0                	test   eax,eax
c001128c:	74 19                	je     c00112a7 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001128e:	83 ec 0c             	sub    esp,0xc
c0011291:	8b 38                	mov    edi,DWORD PTR [eax]
c0011293:	56                   	push   esi
c0011294:	53                   	push   ebx
c0011295:	52                   	push   edx
c0011296:	51                   	push   ecx
c0011297:	50                   	push   eax
c0011298:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001129b:	83 c4 20             	add    esp,0x20
c001129e:	89 c2                	mov    edx,eax
c00112a0:	5b                   	pop    ebx
c00112a1:	c1 fa 1f             	sar    edx,0x1f
c00112a4:	5e                   	pop    esi
c00112a5:	5f                   	pop    edi
c00112a6:	c3                   	ret    
c00112a7:	5b                   	pop    ebx
c00112a8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00112ad:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112b2:	5e                   	pop    esi
c00112b3:	5f                   	pop    edi
c00112b4:	c3                   	ret    

c00112b5 <SysRealpath(regs*)>:
c00112b5:	83 ec 0c             	sub    esp,0xc
c00112b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112bc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00112bf:	85 d2                	test   edx,edx
c00112c1:	74 07                	je     c00112ca <SysRealpath(regs*)+0x15>
c00112c3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00112c6:	85 c0                	test   eax,eax
c00112c8:	75 0b                	jne    c00112d5 <SysRealpath(regs*)+0x20>
c00112ca:	b8 01 00 00 00       	mov    eax,0x1
c00112cf:	31 d2                	xor    edx,edx
c00112d1:	83 c4 0c             	add    esp,0xc
c00112d4:	c3                   	ret    
c00112d5:	6a 00                	push   0x0
c00112d7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00112dd:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00112e0:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00112e6:	51                   	push   ecx
c00112e7:	52                   	push   edx
c00112e8:	50                   	push   eax
c00112e9:	e8 84 6b ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00112ee:	83 c4 10             	add    esp,0x10
c00112f1:	31 c0                	xor    eax,eax
c00112f3:	31 d2                	xor    edx,edx
c00112f5:	83 c4 0c             	add    esp,0xc
c00112f8:	c3                   	ret    

c00112f9 <SysReadDir(regs*)>:
c00112f9:	53                   	push   ebx
c00112fa:	83 ec 18             	sub    esp,0x18
c00112fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011301:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011304:	83 f8 02             	cmp    eax,0x2
c0011307:	76 61                	jbe    c001136a <SysReadDir(regs*)+0x71>
c0011309:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011310:	77 49                	ja     c001135b <SysReadDir(regs*)+0x62>
c0011312:	83 ec 0c             	sub    esp,0xc
c0011315:	50                   	push   eax
c0011316:	e8 d6 1d 00 00       	call   c00130f1 <KeGetFileFromDescriptor(int)>
c001131b:	83 c4 10             	add    esp,0x10
c001131e:	85 c0                	test   eax,eax
c0011320:	74 39                	je     c001135b <SysReadDir(regs*)+0x62>
c0011322:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001132a:	83 ec 0c             	sub    esp,0xc
c001132d:	8b 10                	mov    edx,DWORD PTR [eax]
c001132f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011333:	51                   	push   ecx
c0011334:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011337:	51                   	push   ecx
c0011338:	6a 00                	push   0x0
c001133a:	68 10 01 00 00       	push   0x110
c001133f:	50                   	push   eax
c0011340:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011343:	83 c4 20             	add    esp,0x20
c0011346:	85 c0                	test   eax,eax
c0011348:	74 29                	je     c0011373 <SysReadDir(regs*)+0x7a>
c001134a:	83 f8 07             	cmp    eax,0x7
c001134d:	74 1b                	je     c001136a <SysReadDir(regs*)+0x71>
c001134f:	b8 02 00 00 00       	mov    eax,0x2
c0011354:	31 d2                	xor    edx,edx
c0011356:	83 c4 18             	add    esp,0x18
c0011359:	5b                   	pop    ebx
c001135a:	c3                   	ret    
c001135b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011360:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011365:	83 c4 18             	add    esp,0x18
c0011368:	5b                   	pop    ebx
c0011369:	c3                   	ret    
c001136a:	b8 01 00 00 00       	mov    eax,0x1
c001136f:	31 d2                	xor    edx,edx
c0011371:	eb e3                	jmp    c0011356 <SysReadDir(regs*)+0x5d>
c0011373:	31 c0                	xor    eax,eax
c0011375:	31 d2                	xor    edx,edx
c0011377:	eb dd                	jmp    c0011356 <SysReadDir(regs*)+0x5d>

c0011379 <SysIsATTY(regs*)>:
c0011379:	83 ec 0c             	sub    esp,0xc
c001137c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011380:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011383:	83 f8 02             	cmp    eax,0x2
c0011386:	76 07                	jbe    c001138f <SysIsATTY(regs*)+0x16>
c0011388:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001138d:	75 26                	jne    c00113b5 <SysIsATTY(regs*)+0x3c>
c001138f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011394:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011397:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001139d:	85 c0                	test   eax,eax
c001139f:	74 24                	je     c00113c5 <SysIsATTY(regs*)+0x4c>
c00113a1:	83 ec 0c             	sub    esp,0xc
c00113a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00113a6:	50                   	push   eax
c00113a7:	ff 12                	call   DWORD PTR [edx]
c00113a9:	31 d2                	xor    edx,edx
c00113ab:	0f b6 c0             	movzx  eax,al
c00113ae:	83 c4 10             	add    esp,0x10
c00113b1:	83 c4 0c             	add    esp,0xc
c00113b4:	c3                   	ret    
c00113b5:	83 ec 0c             	sub    esp,0xc
c00113b8:	50                   	push   eax
c00113b9:	e8 33 1d 00 00       	call   c00130f1 <KeGetFileFromDescriptor(int)>
c00113be:	83 c4 10             	add    esp,0x10
c00113c1:	85 c0                	test   eax,eax
c00113c3:	75 dc                	jne    c00113a1 <SysIsATTY(regs*)+0x28>
c00113c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113ca:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113cf:	83 c4 0c             	add    esp,0xc
c00113d2:	c3                   	ret    

c00113d3 <SysSeek(regs*)>:
c00113d3:	53                   	push   ebx
c00113d4:	83 ec 08             	sub    esp,0x8
c00113d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113db:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113de:	8d 50 fd             	lea    edx,[eax-0x3]
c00113e1:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00113e7:	77 39                	ja     c0011422 <SysSeek(regs*)+0x4f>
c00113e9:	83 ec 0c             	sub    esp,0xc
c00113ec:	50                   	push   eax
c00113ed:	e8 ff 1c 00 00       	call   c00130f1 <KeGetFileFromDescriptor(int)>
c00113f2:	83 c4 10             	add    esp,0x10
c00113f5:	85 c0                	test   eax,eax
c00113f7:	74 29                	je     c0011422 <SysSeek(regs*)+0x4f>
c00113f9:	83 ec 04             	sub    esp,0x4
c00113fc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00113ff:	31 db                	xor    ebx,ebx
c0011401:	53                   	push   ebx
c0011402:	51                   	push   ecx
c0011403:	50                   	push   eax
c0011404:	e8 5d 6e ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0011409:	83 c4 10             	add    esp,0x10
c001140c:	85 c0                	test   eax,eax
c001140e:	0f 95 c0             	setne  al
c0011411:	31 d2                	xor    edx,edx
c0011413:	0f b6 c0             	movzx  eax,al
c0011416:	f7 d8                	neg    eax
c0011418:	83 d2 00             	adc    edx,0x0
c001141b:	83 c4 08             	add    esp,0x8
c001141e:	f7 da                	neg    edx
c0011420:	5b                   	pop    ebx
c0011421:	c3                   	ret    
c0011422:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011427:	ba ff ff ff ff       	mov    edx,0xffffffff
c001142c:	83 c4 08             	add    esp,0x8
c001142f:	5b                   	pop    ebx
c0011430:	c3                   	ret    

c0011431 <SysTell(regs*)>:
c0011431:	53                   	push   ebx
c0011432:	83 ec 08             	sub    esp,0x8
c0011435:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011439:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001143c:	83 f8 02             	cmp    eax,0x2
c001143f:	76 56                	jbe    c0011497 <SysTell(regs*)+0x66>
c0011441:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011446:	76 19                	jbe    c0011461 <SysTell(regs*)+0x30>
c0011448:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001144b:	31 d2                	xor    edx,edx
c001144d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011453:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001145a:	31 c0                	xor    eax,eax
c001145c:	83 c4 08             	add    esp,0x8
c001145f:	5b                   	pop    ebx
c0011460:	c3                   	ret    
c0011461:	83 ec 0c             	sub    esp,0xc
c0011464:	50                   	push   eax
c0011465:	e8 87 1c 00 00       	call   c00130f1 <KeGetFileFromDescriptor(int)>
c001146a:	83 c4 10             	add    esp,0x10
c001146d:	85 c0                	test   eax,eax
c001146f:	74 26                	je     c0011497 <SysTell(regs*)+0x66>
c0011471:	83 ec 08             	sub    esp,0x8
c0011474:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011477:	52                   	push   edx
c0011478:	50                   	push   eax
c0011479:	e8 94 6e ff ff       	call   c0008312 <File::tell(unsigned long long*)>
c001147e:	83 c4 10             	add    esp,0x10
c0011481:	85 c0                	test   eax,eax
c0011483:	0f 95 c0             	setne  al
c0011486:	31 d2                	xor    edx,edx
c0011488:	0f b6 c0             	movzx  eax,al
c001148b:	f7 d8                	neg    eax
c001148d:	83 d2 00             	adc    edx,0x0
c0011490:	83 c4 08             	add    esp,0x8
c0011493:	f7 da                	neg    edx
c0011495:	5b                   	pop    ebx
c0011496:	c3                   	ret    
c0011497:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001149c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114a1:	83 c4 08             	add    esp,0x8
c00114a4:	5b                   	pop    ebx
c00114a5:	c3                   	ret    

c00114a6 <SysSize(regs*)>:
c00114a6:	53                   	push   ebx
c00114a7:	83 ec 18             	sub    esp,0x18
c00114aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114b1:	83 f8 02             	cmp    eax,0x2
c00114b4:	76 5b                	jbe    c0011511 <SysSize(regs*)+0x6b>
c00114b6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00114bb:	76 19                	jbe    c00114d6 <SysSize(regs*)+0x30>
c00114bd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00114c0:	31 d2                	xor    edx,edx
c00114c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00114c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114cf:	31 c0                	xor    eax,eax
c00114d1:	83 c4 18             	add    esp,0x18
c00114d4:	5b                   	pop    ebx
c00114d5:	c3                   	ret    
c00114d6:	83 ec 0c             	sub    esp,0xc
c00114d9:	50                   	push   eax
c00114da:	e8 12 1c 00 00       	call   c00130f1 <KeGetFileFromDescriptor(int)>
c00114df:	83 c4 10             	add    esp,0x10
c00114e2:	85 c0                	test   eax,eax
c00114e4:	74 2b                	je     c0011511 <SysSize(regs*)+0x6b>
c00114e6:	83 ec 04             	sub    esp,0x4
c00114e9:	8d 54 24 13          	lea    edx,[esp+0x13]
c00114ed:	52                   	push   edx
c00114ee:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00114f1:	52                   	push   edx
c00114f2:	50                   	push   eax
c00114f3:	e8 b2 6f ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00114f8:	83 c4 10             	add    esp,0x10
c00114fb:	85 c0                	test   eax,eax
c00114fd:	0f 95 c0             	setne  al
c0011500:	31 d2                	xor    edx,edx
c0011502:	0f b6 c0             	movzx  eax,al
c0011505:	f7 d8                	neg    eax
c0011507:	83 d2 00             	adc    edx,0x0
c001150a:	83 c4 18             	add    esp,0x18
c001150d:	f7 da                	neg    edx
c001150f:	5b                   	pop    ebx
c0011510:	c3                   	ret    
c0011511:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011516:	ba ff ff ff ff       	mov    edx,0xffffffff
c001151b:	83 c4 18             	add    esp,0x18
c001151e:	5b                   	pop    ebx
c001151f:	c3                   	ret    

c0011520 <SysSizeFromFilename(regs*)>:
c0011520:	55                   	push   ebp
c0011521:	57                   	push   edi
c0011522:	56                   	push   esi
c0011523:	53                   	push   ebx
c0011524:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001152a:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011531:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011534:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011537:	85 f6                	test   esi,esi
c0011539:	74 34                	je     c001156f <SysSizeFromFilename(regs*)+0x4f>
c001153b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011541:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011544:	83 f8 02             	cmp    eax,0x2
c0011547:	76 2d                	jbe    c0011576 <SysSizeFromFilename(regs*)+0x56>
c0011549:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001154e:	76 3b                	jbe    c001158b <SysSizeFromFilename(regs*)+0x6b>
c0011550:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011553:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011559:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011560:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011566:	31 c0                	xor    eax,eax
c0011568:	5b                   	pop    ebx
c0011569:	31 d2                	xor    edx,edx
c001156b:	5e                   	pop    esi
c001156c:	5f                   	pop    edi
c001156d:	5d                   	pop    ebp
c001156e:	c3                   	ret    
c001156f:	89 f8                	mov    eax,edi
c0011571:	83 f8 02             	cmp    eax,0x2
c0011574:	77 d3                	ja     c0011549 <SysSizeFromFilename(regs*)+0x29>
c0011576:	81 c4 4c 02 00 00    	add    esp,0x24c
c001157c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011581:	5b                   	pop    ebx
c0011582:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011587:	5e                   	pop    esi
c0011588:	5f                   	pop    edi
c0011589:	5d                   	pop    ebp
c001158a:	c3                   	ret    
c001158b:	83 ec 0c             	sub    esp,0xc
c001158e:	68 14 01 00 00       	push   0x114
c0011593:	e8 cb e2 ff ff       	call   c000f863 <malloc>
c0011598:	6a 01                	push   0x1
c001159a:	89 c5                	mov    ebp,eax
c001159c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115a4:	50                   	push   eax
c00115a5:	57                   	push   edi
c00115a6:	55                   	push   ebp
c00115a7:	e8 e0 6a ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00115ac:	83 c4 20             	add    esp,0x20
c00115af:	85 ed                	test   ebp,ebp
c00115b1:	74 c3                	je     c0011576 <SysSizeFromFilename(regs*)+0x56>
c00115b3:	83 ec 04             	sub    esp,0x4
c00115b6:	8d 44 24 13          	lea    eax,[esp+0x13]
c00115ba:	50                   	push   eax
c00115bb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00115be:	51                   	push   ecx
c00115bf:	55                   	push   ebp
c00115c0:	e8 e5 6e ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00115c5:	89 c3                	mov    ebx,eax
c00115c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00115ca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00115cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115d0:	83 c4 10             	add    esp,0x10
c00115d3:	85 db                	test   ebx,ebx
c00115d5:	75 9f                	jne    c0011576 <SysSizeFromFilename(regs*)+0x56>
c00115d7:	6a 00                	push   0x0
c00115d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115e1:	05 0c 01 00 00       	add    eax,0x10c
c00115e6:	50                   	push   eax
c00115e7:	57                   	push   edi
c00115e8:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00115ef:	53                   	push   ebx
c00115f0:	e8 7d 68 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00115f5:	58                   	pop    eax
c00115f6:	5a                   	pop    edx
c00115f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00115fb:	50                   	push   eax
c00115fc:	53                   	push   ebx
c00115fd:	e8 f7 62 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0011602:	83 c4 10             	add    esp,0x10
c0011605:	83 f8 01             	cmp    eax,0x1
c0011608:	74 1a                	je     c0011624 <SysSizeFromFilename(regs*)+0x104>
c001160a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001160f:	74 26                	je     c0011637 <SysSizeFromFilename(regs*)+0x117>
c0011611:	85 f6                	test   esi,esi
c0011613:	0f 84 47 ff ff ff    	je     c0011560 <SysSizeFromFilename(regs*)+0x40>
c0011619:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001161f:	e9 3c ff ff ff       	jmp    c0011560 <SysSizeFromFilename(regs*)+0x40>
c0011624:	85 f6                	test   esi,esi
c0011626:	0f 84 34 ff ff ff    	je     c0011560 <SysSizeFromFilename(regs*)+0x40>
c001162c:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011632:	e9 29 ff ff ff       	jmp    c0011560 <SysSizeFromFilename(regs*)+0x40>
c0011637:	85 f6                	test   esi,esi
c0011639:	0f 84 21 ff ff ff    	je     c0011560 <SysSizeFromFilename(regs*)+0x40>
c001163f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011645:	e9 16 ff ff ff       	jmp    c0011560 <SysSizeFromFilename(regs*)+0x40>

c001164a <SysSizeFromFilenameNoSymlink(regs*)>:
c001164a:	55                   	push   ebp
c001164b:	57                   	push   edi
c001164c:	56                   	push   esi
c001164d:	53                   	push   ebx
c001164e:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011654:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001165b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001165e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011661:	85 f6                	test   esi,esi
c0011663:	74 34                	je     c0011699 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0011665:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001166b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001166e:	83 f8 02             	cmp    eax,0x2
c0011671:	76 2d                	jbe    c00116a0 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011673:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011678:	76 3b                	jbe    c00116b5 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c001167a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001167d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011683:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001168a:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011690:	31 c0                	xor    eax,eax
c0011692:	5b                   	pop    ebx
c0011693:	31 d2                	xor    edx,edx
c0011695:	5e                   	pop    esi
c0011696:	5f                   	pop    edi
c0011697:	5d                   	pop    ebp
c0011698:	c3                   	ret    
c0011699:	89 f8                	mov    eax,edi
c001169b:	83 f8 02             	cmp    eax,0x2
c001169e:	77 d3                	ja     c0011673 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00116a0:	81 c4 4c 02 00 00    	add    esp,0x24c
c00116a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116ab:	5b                   	pop    ebx
c00116ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116b1:	5e                   	pop    esi
c00116b2:	5f                   	pop    edi
c00116b3:	5d                   	pop    ebp
c00116b4:	c3                   	ret    
c00116b5:	83 ec 0c             	sub    esp,0xc
c00116b8:	68 14 01 00 00       	push   0x114
c00116bd:	e8 a1 e1 ff ff       	call   c000f863 <malloc>
c00116c2:	6a 00                	push   0x0
c00116c4:	89 c5                	mov    ebp,eax
c00116c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116ce:	50                   	push   eax
c00116cf:	57                   	push   edi
c00116d0:	55                   	push   ebp
c00116d1:	e8 b6 69 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00116d6:	83 c4 20             	add    esp,0x20
c00116d9:	85 ed                	test   ebp,ebp
c00116db:	74 c3                	je     c00116a0 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00116dd:	83 ec 04             	sub    esp,0x4
c00116e0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00116e4:	50                   	push   eax
c00116e5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00116e8:	51                   	push   ecx
c00116e9:	55                   	push   ebp
c00116ea:	e8 bb 6d ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00116ef:	89 c3                	mov    ebx,eax
c00116f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116f4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00116f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116fa:	83 c4 10             	add    esp,0x10
c00116fd:	85 db                	test   ebx,ebx
c00116ff:	75 9f                	jne    c00116a0 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011701:	6a 00                	push   0x0
c0011703:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011708:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001170b:	05 0c 01 00 00       	add    eax,0x10c
c0011710:	50                   	push   eax
c0011711:	57                   	push   edi
c0011712:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011719:	53                   	push   ebx
c001171a:	e8 53 67 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001171f:	58                   	pop    eax
c0011720:	5a                   	pop    edx
c0011721:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011725:	50                   	push   eax
c0011726:	53                   	push   ebx
c0011727:	e8 cd 61 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c001172c:	83 c4 10             	add    esp,0x10
c001172f:	83 f8 01             	cmp    eax,0x1
c0011732:	74 1a                	je     c001174e <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c0011734:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011739:	74 26                	je     c0011761 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c001173b:	85 f6                	test   esi,esi
c001173d:	0f 84 47 ff ff ff    	je     c001168a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011743:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011749:	e9 3c ff ff ff       	jmp    c001168a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001174e:	85 f6                	test   esi,esi
c0011750:	0f 84 34 ff ff ff    	je     c001168a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011756:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001175c:	e9 29 ff ff ff       	jmp    c001168a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011761:	85 f6                	test   esi,esi
c0011763:	0f 84 21 ff ff ff    	je     c001168a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011769:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001176f:	e9 16 ff ff ff       	jmp    c001168a <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0011774 <SysClose(regs*)>:
c0011774:	53                   	push   ebx
c0011775:	83 ec 08             	sub    esp,0x8
c0011778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001177c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001177f:	83 f8 02             	cmp    eax,0x2
c0011782:	76 41                	jbe    c00117c5 <SysClose(regs*)+0x51>
c0011784:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001178a:	83 fa 01             	cmp    edx,0x1
c001178d:	76 2d                	jbe    c00117bc <SysClose(regs*)+0x48>
c001178f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011794:	77 2f                	ja     c00117c5 <SysClose(regs*)+0x51>
c0011796:	83 ec 0c             	sub    esp,0xc
c0011799:	50                   	push   eax
c001179a:	e8 52 19 00 00       	call   c00130f1 <KeGetFileFromDescriptor(int)>
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	89 c3                	mov    ebx,eax
c00117a4:	85 c0                	test   eax,eax
c00117a6:	74 1d                	je     c00117c5 <SysClose(regs*)+0x51>
c00117a8:	83 ec 0c             	sub    esp,0xc
c00117ab:	50                   	push   eax
c00117ac:	e8 55 6a ff ff       	call   c0008206 <File::close()>
c00117b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00117b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117b9:	83 c4 10             	add    esp,0x10
c00117bc:	31 c0                	xor    eax,eax
c00117be:	31 d2                	xor    edx,edx
c00117c0:	83 c4 08             	add    esp,0x8
c00117c3:	5b                   	pop    ebx
c00117c4:	c3                   	ret    
c00117c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117ca:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117cf:	83 c4 08             	add    esp,0x8
c00117d2:	5b                   	pop    ebx
c00117d3:	c3                   	ret    

c00117d4 <SysOpenDir(regs*)>:
c00117d4:	56                   	push   esi
c00117d5:	53                   	push   ebx
c00117d6:	83 ec 04             	sub    esp,0x4
c00117d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117dd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117e0:	85 c9                	test   ecx,ecx
c00117e2:	74 5d                	je     c0011841 <SysOpenDir(regs*)+0x6d>
c00117e4:	83 ec 0c             	sub    esp,0xc
c00117e7:	68 14 01 00 00       	push   0x114
c00117ec:	e8 72 e0 ff ff       	call   c000f863 <malloc>
c00117f1:	83 c4 0c             	add    esp,0xc
c00117f4:	89 c6                	mov    esi,eax
c00117f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117fe:	50                   	push   eax
c00117ff:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011802:	52                   	push   edx
c0011803:	56                   	push   esi
c0011804:	e8 61 6e ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	85 f6                	test   esi,esi
c001180e:	74 31                	je     c0011841 <SysOpenDir(regs*)+0x6d>
c0011810:	83 ec 0c             	sub    esp,0xc
c0011813:	56                   	push   esi
c0011814:	e8 19 6f ff ff       	call   c0008732 <Directory::open()>
c0011819:	83 c4 10             	add    esp,0x10
c001181c:	85 c0                	test   eax,eax
c001181e:	75 21                	jne    c0011841 <SysOpenDir(regs*)+0x6d>
c0011820:	83 ec 0c             	sub    esp,0xc
c0011823:	56                   	push   esi
c0011824:	e8 cb 15 00 00       	call   c0012df4 <UnixFile::getFileDescriptor()>
c0011829:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001182c:	83 c4 10             	add    esp,0x10
c001182f:	89 02                	mov    DWORD PTR [edx],eax
c0011831:	c1 f8 1f             	sar    eax,0x1f
c0011834:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011837:	83 c4 04             	add    esp,0x4
c001183a:	31 c0                	xor    eax,eax
c001183c:	31 d2                	xor    edx,edx
c001183e:	5b                   	pop    ebx
c001183f:	5e                   	pop    esi
c0011840:	c3                   	ret    
c0011841:	83 c4 04             	add    esp,0x4
c0011844:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011849:	ba ff ff ff ff       	mov    edx,0xffffffff
c001184e:	5b                   	pop    ebx
c001184f:	5e                   	pop    esi
c0011850:	c3                   	ret    

c0011851 <SysMakeDir(regs*)>:
c0011851:	56                   	push   esi
c0011852:	53                   	push   ebx
c0011853:	83 ec 10             	sub    esp,0x10
c0011856:	68 14 01 00 00       	push   0x114
c001185b:	e8 03 e0 ff ff       	call   c000f863 <malloc>
c0011860:	83 c4 0c             	add    esp,0xc
c0011863:	89 c3                	mov    ebx,eax
c0011865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001186a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001186d:	50                   	push   eax
c001186e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011872:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011875:	52                   	push   edx
c0011876:	53                   	push   ebx
c0011877:	e8 ee 6d ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c001187c:	83 c4 10             	add    esp,0x10
c001187f:	85 db                	test   ebx,ebx
c0011881:	74 2c                	je     c00118af <SysMakeDir(regs*)+0x5e>
c0011883:	83 ec 0c             	sub    esp,0xc
c0011886:	53                   	push   ebx
c0011887:	e8 86 70 ff ff       	call   c0008912 <Directory::create()>
c001188c:	89 c6                	mov    esi,eax
c001188e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011890:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011893:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011896:	83 c4 10             	add    esp,0x10
c0011899:	31 c0                	xor    eax,eax
c001189b:	85 f6                	test   esi,esi
c001189d:	0f 95 c0             	setne  al
c00118a0:	31 d2                	xor    edx,edx
c00118a2:	f7 d8                	neg    eax
c00118a4:	83 d2 00             	adc    edx,0x0
c00118a7:	83 c4 04             	add    esp,0x4
c00118aa:	f7 da                	neg    edx
c00118ac:	5b                   	pop    ebx
c00118ad:	5e                   	pop    esi
c00118ae:	c3                   	ret    
c00118af:	83 c4 04             	add    esp,0x4
c00118b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118bc:	5b                   	pop    ebx
c00118bd:	5e                   	pop    esi
c00118be:	c3                   	ret    

c00118bf <SysCloseDir(regs*)>:
c00118bf:	53                   	push   ebx
c00118c0:	83 ec 08             	sub    esp,0x8
c00118c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118ca:	8d 50 fd             	lea    edx,[eax-0x3]
c00118cd:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00118d3:	77 2f                	ja     c0011904 <SysCloseDir(regs*)+0x45>
c00118d5:	83 ec 0c             	sub    esp,0xc
c00118d8:	50                   	push   eax
c00118d9:	e8 13 18 00 00       	call   c00130f1 <KeGetFileFromDescriptor(int)>
c00118de:	83 c4 10             	add    esp,0x10
c00118e1:	89 c3                	mov    ebx,eax
c00118e3:	85 c0                	test   eax,eax
c00118e5:	74 1d                	je     c0011904 <SysCloseDir(regs*)+0x45>
c00118e7:	83 ec 0c             	sub    esp,0xc
c00118ea:	50                   	push   eax
c00118eb:	e8 9e 6e ff ff       	call   c000878e <Directory::close()>
c00118f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118f8:	83 c4 10             	add    esp,0x10
c00118fb:	31 c0                	xor    eax,eax
c00118fd:	31 d2                	xor    edx,edx
c00118ff:	83 c4 08             	add    esp,0x8
c0011902:	5b                   	pop    ebx
c0011903:	c3                   	ret    
c0011904:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011909:	ba ff ff ff ff       	mov    edx,0xffffffff
c001190e:	83 c4 08             	add    esp,0x8
c0011911:	5b                   	pop    ebx
c0011912:	c3                   	ret    

c0011913 <SysWait(regs*)>:
c0011913:	83 ec 10             	sub    esp,0x10
c0011916:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001191a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001191d:	52                   	push   edx
c001191e:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011921:	51                   	push   ecx
c0011922:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011925:	50                   	push   eax
c0011926:	e8 11 50 00 00       	call   c001693c <waitTask(int, int*, int)>
c001192b:	83 c4 1c             	add    esp,0x1c
c001192e:	89 c2                	mov    edx,eax
c0011930:	c1 fa 1f             	sar    edx,0x1f
c0011933:	c3                   	ret    

c0011934 <SysNotImpl(regs*)>:
c0011934:	83 ec 18             	sub    esp,0x18
c0011937:	68 13 82 02 c0       	push   0xc0028213
c001193c:	e8 77 e3 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0011941:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011946:	ba ff ff ff ff       	mov    edx,0xffffffff
c001194b:	83 c4 1c             	add    esp,0x1c
c001194e:	c3                   	ret    

c001194f <SysPanic(regs*)>:
c001194f:	83 ec 18             	sub    esp,0x18
c0011952:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011956:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011959:	50                   	push   eax
c001195a:	e8 59 e3 ff ff       	call   c000fcb8 <KePanic(char const*)>
c001195f:	b8 01 00 00 00       	mov    eax,0x1
c0011964:	31 d2                	xor    edx,edx
c0011966:	83 c4 1c             	add    esp,0x1c
c0011969:	c3                   	ret    

c001196a <SysRmdir(regs*)>:
c001196a:	56                   	push   esi
c001196b:	53                   	push   ebx
c001196c:	83 ec 20             	sub    esp,0x20
c001196f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011973:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011976:	68 14 01 00 00       	push   0x114
c001197b:	e8 e3 de ff ff       	call   c000f863 <malloc>
c0011980:	6a 00                	push   0x0
c0011982:	89 c3                	mov    ebx,eax
c0011984:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011989:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001198c:	50                   	push   eax
c001198d:	56                   	push   esi
c001198e:	53                   	push   ebx
c001198f:	e8 f8 66 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011994:	83 c4 14             	add    esp,0x14
c0011997:	53                   	push   ebx
c0011998:	e8 d9 69 ff ff       	call   c0008376 <File::unlink()>
c001199d:	83 c4 10             	add    esp,0x10
c00119a0:	85 db                	test   ebx,ebx
c00119a2:	74 14                	je     c00119b8 <SysRmdir(regs*)+0x4e>
c00119a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119a8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119aa:	83 ec 0c             	sub    esp,0xc
c00119ad:	53                   	push   ebx
c00119ae:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119b1:	83 c4 10             	add    esp,0x10
c00119b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119b8:	85 c0                	test   eax,eax
c00119ba:	0f 95 c0             	setne  al
c00119bd:	31 d2                	xor    edx,edx
c00119bf:	0f b6 c0             	movzx  eax,al
c00119c2:	f7 d8                	neg    eax
c00119c4:	83 d2 00             	adc    edx,0x0
c00119c7:	83 c4 14             	add    esp,0x14
c00119ca:	f7 da                	neg    edx
c00119cc:	5b                   	pop    ebx
c00119cd:	5e                   	pop    esi
c00119ce:	c3                   	ret    

c00119cf <SysUnlink(regs*)>:
c00119cf:	56                   	push   esi
c00119d0:	53                   	push   ebx
c00119d1:	83 ec 20             	sub    esp,0x20
c00119d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119d8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119db:	68 14 01 00 00       	push   0x114
c00119e0:	e8 7e de ff ff       	call   c000f863 <malloc>
c00119e5:	6a 00                	push   0x0
c00119e7:	89 c3                	mov    ebx,eax
c00119e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119f1:	50                   	push   eax
c00119f2:	56                   	push   esi
c00119f3:	53                   	push   ebx
c00119f4:	e8 93 66 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00119f9:	83 c4 14             	add    esp,0x14
c00119fc:	53                   	push   ebx
c00119fd:	e8 74 69 ff ff       	call   c0008376 <File::unlink()>
c0011a02:	83 c4 10             	add    esp,0x10
c0011a05:	85 db                	test   ebx,ebx
c0011a07:	74 14                	je     c0011a1d <SysUnlink(regs*)+0x4e>
c0011a09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a0f:	83 ec 0c             	sub    esp,0xc
c0011a12:	53                   	push   ebx
c0011a13:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011a16:	83 c4 10             	add    esp,0x10
c0011a19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a1d:	85 c0                	test   eax,eax
c0011a1f:	0f 95 c0             	setne  al
c0011a22:	31 d2                	xor    edx,edx
c0011a24:	0f b6 c0             	movzx  eax,al
c0011a27:	f7 d8                	neg    eax
c0011a29:	83 d2 00             	adc    edx,0x0
c0011a2c:	83 c4 14             	add    esp,0x14
c0011a2f:	f7 da                	neg    edx
c0011a31:	5b                   	pop    ebx
c0011a32:	5e                   	pop    esi
c0011a33:	c3                   	ret    

c0011a34 <SysGetArgv(regs*)>:
c0011a34:	83 ec 0c             	sub    esp,0xc
c0011a37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a3b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a3e:	85 c0                	test   eax,eax
c0011a40:	78 2c                	js     c0011a6e <SysGetArgv(regs*)+0x3a>
c0011a42:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a48:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011a4b:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011a51:	7d 1b                	jge    c0011a6e <SysGetArgv(regs*)+0x3a>
c0011a53:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011a5a:	85 c0                	test   eax,eax
c0011a5c:	74 18                	je     c0011a76 <SysGetArgv(regs*)+0x42>
c0011a5e:	83 ec 08             	sub    esp,0x8
c0011a61:	50                   	push   eax
c0011a62:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a65:	50                   	push   eax
c0011a66:	e8 d5 eb fe ff       	call   c0000640 <strcpy>
c0011a6b:	83 c4 10             	add    esp,0x10
c0011a6e:	31 c0                	xor    eax,eax
c0011a70:	31 d2                	xor    edx,edx
c0011a72:	83 c4 0c             	add    esp,0xc
c0011a75:	c3                   	ret    
c0011a76:	b8 01 00 00 00       	mov    eax,0x1
c0011a7b:	31 d2                	xor    edx,edx
c0011a7d:	83 c4 0c             	add    esp,0xc
c0011a80:	c3                   	ret    

c0011a81 <SysUSleep(regs*)>:
c0011a81:	83 ec 1c             	sub    esp,0x1c
c0011a84:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a88:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011a8b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011a8e:	6a 00                	push   0x0
c0011a90:	6a 64                	push   0x64
c0011a92:	52                   	push   edx
c0011a93:	50                   	push   eax
c0011a94:	e8 db 03 01 00       	call   c0021e74 <__udivdi3>
c0011a99:	83 c4 18             	add    esp,0x18
c0011a9c:	52                   	push   edx
c0011a9d:	50                   	push   eax
c0011a9e:	e8 91 4f 00 00       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c0011aa3:	31 c0                	xor    eax,eax
c0011aa5:	31 d2                	xor    edx,edx
c0011aa7:	83 c4 1c             	add    esp,0x1c
c0011aaa:	c3                   	ret    

c0011aab <SysSpawn(regs*)>:
c0011aab:	56                   	push   esi
c0011aac:	53                   	push   ebx
c0011aad:	83 ec 04             	sub    esp,0x4
c0011ab0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ab4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011ab7:	85 f6                	test   esi,esi
c0011ab9:	75 0a                	jne    c0011ac5 <SysSpawn(regs*)+0x1a>
c0011abb:	83 c4 04             	add    esp,0x4
c0011abe:	31 c0                	xor    eax,eax
c0011ac0:	31 d2                	xor    edx,edx
c0011ac2:	5b                   	pop    ebx
c0011ac3:	5e                   	pop    esi
c0011ac4:	c3                   	ret    
c0011ac5:	83 ec 0c             	sub    esp,0xc
c0011ac8:	68 c4 07 00 00       	push   0x7c4
c0011acd:	e8 91 dd ff ff       	call   c000f863 <malloc>
c0011ad2:	83 c4 10             	add    esp,0x10
c0011ad5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ad8:	89 c6                	mov    esi,eax
c0011ada:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011add:	85 c9                	test   ecx,ecx
c0011adf:	74 39                	je     c0011b1a <SysSpawn(regs*)+0x6f>
c0011ae1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ae6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ae9:	52                   	push   edx
c0011aea:	50                   	push   eax
c0011aeb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011aee:	50                   	push   eax
c0011aef:	56                   	push   esi
c0011af0:	e8 07 46 00 00       	call   c00160fc <Process::Process(char const*, Process*, char**)>
c0011af5:	83 c4 10             	add    esp,0x10
c0011af8:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011aff:	75 ba                	jne    c0011abb <SysSpawn(regs*)+0x10>
c0011b01:	83 ec 0c             	sub    esp,0xc
c0011b04:	56                   	push   esi
c0011b05:	e8 ce 4b 00 00       	call   c00166d8 <Process::createUserThread()>
c0011b0a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b0c:	83 c4 10             	add    esp,0x10
c0011b0f:	89 c2                	mov    edx,eax
c0011b11:	83 c4 04             	add    esp,0x4
c0011b14:	c1 fa 1f             	sar    edx,0x1f
c0011b17:	5b                   	pop    ebx
c0011b18:	5e                   	pop    esi
c0011b19:	c3                   	ret    
c0011b1a:	31 c0                	xor    eax,eax
c0011b1c:	eb cb                	jmp    c0011ae9 <SysSpawn(regs*)+0x3e>

c0011b1e <SysGetEnv(regs*)>:
c0011b1e:	57                   	push   edi
c0011b1f:	56                   	push   esi
c0011b20:	53                   	push   ebx
c0011b21:	83 ec 1c             	sub    esp,0x1c
c0011b24:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b2d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b30:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b33:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011b36:	51                   	push   ecx
c0011b37:	e8 2f cb ff ff       	call   c000e66b <KeGetProcessTotalEnvCount(Process*)>
c0011b3c:	83 c4 10             	add    esp,0x10
c0011b3f:	39 c7                	cmp    edi,eax
c0011b41:	7c 14                	jl     c0011b57 <SysGetEnv(regs*)+0x39>
c0011b43:	85 f6                	test   esi,esi
c0011b45:	75 0b                	jne    c0011b52 <SysGetEnv(regs*)+0x34>
c0011b47:	83 c4 10             	add    esp,0x10
c0011b4a:	31 c0                	xor    eax,eax
c0011b4c:	5b                   	pop    ebx
c0011b4d:	31 d2                	xor    edx,edx
c0011b4f:	5e                   	pop    esi
c0011b50:	5f                   	pop    edi
c0011b51:	c3                   	ret    
c0011b52:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b55:	eb f0                	jmp    c0011b47 <SysGetEnv(regs*)+0x29>
c0011b57:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b5b:	83 ec 04             	sub    esp,0x4
c0011b5e:	57                   	push   edi
c0011b5f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b65:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011b68:	57                   	push   edi
c0011b69:	50                   	push   eax
c0011b6a:	e8 1c cb ff ff       	call   c000e68b <KeGetProcessEnvPair(Process*, int)>
c0011b6f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b76:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b7a:	83 c4 0c             	add    esp,0xc
c0011b7d:	85 d2                	test   edx,edx
c0011b7f:	75 23                	jne    c0011ba4 <SysGetEnv(regs*)+0x86>
c0011b81:	83 ec 0c             	sub    esp,0xc
c0011b84:	50                   	push   eax
c0011b85:	e8 e6 e9 fe ff       	call   c0000570 <strlen>
c0011b8a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b8d:	89 c3                	mov    ebx,eax
c0011b8f:	e8 dc e9 fe ff       	call   c0000570 <strlen>
c0011b94:	83 c4 10             	add    esp,0x10
c0011b97:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011b9b:	83 c4 10             	add    esp,0x10
c0011b9e:	31 d2                	xor    edx,edx
c0011ba0:	5b                   	pop    ebx
c0011ba1:	5e                   	pop    esi
c0011ba2:	5f                   	pop    edi
c0011ba3:	c3                   	ret    
c0011ba4:	83 ec 08             	sub    esp,0x8
c0011ba7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011baa:	50                   	push   eax
c0011bab:	56                   	push   esi
c0011bac:	e8 8f ea fe ff       	call   c0000640 <strcpy>
c0011bb1:	58                   	pop    eax
c0011bb2:	5a                   	pop    edx
c0011bb3:	68 2d 82 02 c0       	push   0xc002822d
c0011bb8:	56                   	push   esi
c0011bb9:	e8 82 ec fe ff       	call   c0000840 <strcat>
c0011bbe:	59                   	pop    ecx
c0011bbf:	5b                   	pop    ebx
c0011bc0:	57                   	push   edi
c0011bc1:	56                   	push   esi
c0011bc2:	e8 79 ec fe ff       	call   c0000840 <strcat>
c0011bc7:	83 c4 10             	add    esp,0x10
c0011bca:	e9 78 ff ff ff       	jmp    c0011b47 <SysGetEnv(regs*)+0x29>

c0011bcf <SysSetFatAttrib(regs*)>:
c0011bcf:	57                   	push   edi
c0011bd0:	56                   	push   esi
c0011bd1:	53                   	push   ebx
c0011bd2:	83 ec 1c             	sub    esp,0x1c
c0011bd5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011bd9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011bdc:	68 14 01 00 00       	push   0x114
c0011be1:	e8 7d dc ff ff       	call   c000f863 <malloc>
c0011be6:	83 c4 0c             	add    esp,0xc
c0011be9:	89 c3                	mov    ebx,eax
c0011beb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bf0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bf3:	50                   	push   eax
c0011bf4:	57                   	push   edi
c0011bf5:	53                   	push   ebx
c0011bf6:	e8 8f 65 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0011bfb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011bfe:	83 c4 0c             	add    esp,0xc
c0011c01:	0f b6 d4             	movzx  edx,ah
c0011c04:	0f b6 c0             	movzx  eax,al
c0011c07:	52                   	push   edx
c0011c08:	50                   	push   eax
c0011c09:	53                   	push   ebx
c0011c0a:	e8 01 68 ff ff       	call   c0008410 <File::chfatattr(unsigned char, unsigned char)>
c0011c0f:	83 c4 10             	add    esp,0x10
c0011c12:	85 db                	test   ebx,ebx
c0011c14:	74 14                	je     c0011c2a <SysSetFatAttrib(regs*)+0x5b>
c0011c16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c1c:	83 ec 0c             	sub    esp,0xc
c0011c1f:	53                   	push   ebx
c0011c20:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c2a:	85 c0                	test   eax,eax
c0011c2c:	0f 95 c0             	setne  al
c0011c2f:	31 d2                	xor    edx,edx
c0011c31:	0f b6 c0             	movzx  eax,al
c0011c34:	f7 d8                	neg    eax
c0011c36:	83 d2 00             	adc    edx,0x0
c0011c39:	83 c4 10             	add    esp,0x10
c0011c3c:	f7 da                	neg    edx
c0011c3e:	5b                   	pop    ebx
c0011c3f:	5e                   	pop    esi
c0011c40:	5f                   	pop    edi
c0011c41:	c3                   	ret    

c0011c42 <SysShutdown(regs*)>:
c0011c42:	83 ec 1c             	sub    esp,0x1c
c0011c45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c49:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011c4c:	85 c9                	test   ecx,ecx
c0011c4e:	74 18                	je     c0011c68 <SysShutdown(regs*)+0x26>
c0011c50:	83 f9 01             	cmp    ecx,0x1
c0011c53:	74 26                	je     c0011c7b <SysShutdown(regs*)+0x39>
c0011c55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c5f:	83 f9 02             	cmp    ecx,0x2
c0011c62:	74 24                	je     c0011c88 <SysShutdown(regs*)+0x46>
c0011c64:	83 c4 1c             	add    esp,0x1c
c0011c67:	c3                   	ret    
c0011c68:	e8 a1 e9 ff ff       	call   c001060e <KeShutdown()>
c0011c6d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c72:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c77:	83 c4 1c             	add    esp,0x1c
c0011c7a:	c3                   	ret    
c0011c7b:	e8 c4 e9 ff ff       	call   c0010644 <KeSleep()>
c0011c80:	31 c0                	xor    eax,eax
c0011c82:	31 d2                	xor    edx,edx
c0011c84:	83 c4 1c             	add    esp,0x1c
c0011c87:	c3                   	ret    
c0011c88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011c90:	e8 df e9 ff ff       	call   c0010674 <KeRestart()>
c0011c95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c9d:	eb c5                	jmp    c0011c64 <SysShutdown(regs*)+0x22>

c0011c9f <SysPipe(regs*)>:
c0011c9f:	57                   	push   edi
c0011ca0:	56                   	push   esi
c0011ca1:	53                   	push   ebx
c0011ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ca6:	83 ec 0c             	sub    esp,0xc
c0011ca9:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011cac:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011caf:	6a 20                	push   0x20
c0011cb1:	e8 ad db ff ff       	call   c000f863 <malloc>
c0011cb6:	89 c3                	mov    ebx,eax
c0011cb8:	58                   	pop    eax
c0011cb9:	5a                   	pop    edx
c0011cba:	68 00 50 00 00       	push   0x5000
c0011cbf:	53                   	push   ebx
c0011cc0:	e8 c9 e7 ff ff       	call   c001048e <Pipe::Pipe(int)>
c0011cc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011cc8:	e8 27 11 00 00       	call   c0012df4 <UnixFile::getFileDescriptor()>
c0011ccd:	89 07                	mov    DWORD PTR [edi],eax
c0011ccf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011cd2:	e8 1d 11 00 00       	call   c0012df4 <UnixFile::getFileDescriptor()>
c0011cd7:	83 c4 10             	add    esp,0x10
c0011cda:	89 06                	mov    DWORD PTR [esi],eax
c0011cdc:	31 d2                	xor    edx,edx
c0011cde:	5b                   	pop    ebx
c0011cdf:	31 c0                	xor    eax,eax
c0011ce1:	5e                   	pop    esi
c0011ce2:	5f                   	pop    edi
c0011ce3:	c3                   	ret    

c0011ce4 <SysGetUnixTime(regs*)>:
c0011ce4:	57                   	push   edi
c0011ce5:	56                   	push   esi
c0011ce6:	53                   	push   ebx
c0011ce7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ceb:	83 ec 08             	sub    esp,0x8
c0011cee:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011cf1:	52                   	push   edx
c0011cf2:	68 2f 82 02 c0       	push   0xc002822f
c0011cf7:	e8 80 52 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011cfc:	83 c4 10             	add    esp,0x10
c0011cff:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0011d03:	74 3d                	je     c0011d42 <SysGetUnixTime(regs*)+0x5e>
c0011d05:	83 ec 0c             	sub    esp,0xc
c0011d08:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0011d0d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011d13:	50                   	push   eax
c0011d14:	e8 21 74 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0011d19:	83 c4 0c             	add    esp,0xc
c0011d1c:	52                   	push   edx
c0011d1d:	50                   	push   eax
c0011d1e:	68 43 82 02 c0       	push   0xc0028243
c0011d23:	e8 54 52 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011d28:	83 c4 10             	add    esp,0x10
c0011d2b:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0011d30:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011d36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d3a:	5b                   	pop    ebx
c0011d3b:	5e                   	pop    esi
c0011d3c:	5f                   	pop    edi
c0011d3d:	e9 f8 73 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0011d42:	8b 35 50 0b 03 c0    	mov    esi,DWORD PTR ds:0xc0030b50
c0011d48:	8b 3d 54 0b 03 c0    	mov    edi,DWORD PTR ds:0xc0030b54
c0011d4e:	89 f0                	mov    eax,esi
c0011d50:	89 fa                	mov    edx,edi
c0011d52:	01 f0                	add    eax,esi
c0011d54:	11 fa                	adc    edx,edi
c0011d56:	01 f0                	add    eax,esi
c0011d58:	11 fa                	adc    edx,edi
c0011d5a:	89 c1                	mov    ecx,eax
c0011d5c:	89 d3                	mov    ebx,edx
c0011d5e:	0f a4 cb 05          	shld   ebx,ecx,0x5
c0011d62:	c1 e1 05             	shl    ecx,0x5
c0011d65:	01 c8                	add    eax,ecx
c0011d67:	11 da                	adc    edx,ebx
c0011d69:	01 f0                	add    eax,esi
c0011d6b:	5b                   	pop    ebx
c0011d6c:	11 fa                	adc    edx,edi
c0011d6e:	5e                   	pop    esi
c0011d6f:	5f                   	pop    edi
c0011d70:	c3                   	ret    

c0011d71 <string_ends_with(char const*, char const*)>:
c0011d71:	57                   	push   edi
c0011d72:	56                   	push   esi
c0011d73:	53                   	push   ebx
c0011d74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d78:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011d7c:	83 ec 0c             	sub    esp,0xc
c0011d7f:	53                   	push   ebx
c0011d80:	e8 eb e7 fe ff       	call   c0000570 <strlen>
c0011d85:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d88:	89 c6                	mov    esi,eax
c0011d8a:	e8 e1 e7 fe ff       	call   c0000570 <strlen>
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	39 c6                	cmp    esi,eax
c0011d94:	7d 06                	jge    c0011d9c <string_ends_with(char const*, char const*)+0x2b>
c0011d96:	5b                   	pop    ebx
c0011d97:	31 c0                	xor    eax,eax
c0011d99:	5e                   	pop    esi
c0011d9a:	5f                   	pop    edi
c0011d9b:	c3                   	ret    
c0011d9c:	83 ec 08             	sub    esp,0x8
c0011d9f:	29 c6                	sub    esi,eax
c0011da1:	57                   	push   edi
c0011da2:	01 f3                	add    ebx,esi
c0011da4:	53                   	push   ebx
c0011da5:	e8 a6 e9 fe ff       	call   c0000750 <strcmp>
c0011daa:	83 c4 10             	add    esp,0x10
c0011dad:	85 c0                	test   eax,eax
c0011daf:	5b                   	pop    ebx
c0011db0:	0f 94 c0             	sete   al
c0011db3:	5e                   	pop    esi
c0011db4:	0f b6 c0             	movzx  eax,al
c0011db7:	5f                   	pop    edi
c0011db8:	c3                   	ret    

c0011db9 <SysOpen(regs*)>:
c0011db9:	56                   	push   esi
c0011dba:	53                   	push   ebx
c0011dbb:	81 ec 04 01 00 00    	sub    esp,0x104
c0011dc1:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011dc8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011dcb:	85 c0                	test   eax,eax
c0011dcd:	0f 84 bc 01 00 00    	je     c0011f8f <SysOpen(regs*)+0x1d6>
c0011dd3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dd6:	85 c0                	test   eax,eax
c0011dd8:	0f 84 b1 01 00 00    	je     c0011f8f <SysOpen(regs*)+0x1d6>
c0011dde:	6a 00                	push   0x0
c0011de0:	68 4a 82 02 c0       	push   0xc002824a
c0011de5:	50                   	push   eax
c0011de6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011dea:	56                   	push   esi
c0011deb:	e8 82 60 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011df0:	89 34 24             	mov    DWORD PTR [esp],esi
c0011df3:	e8 78 e7 fe ff       	call   c0000570 <strlen>
c0011df8:	83 c4 10             	add    esp,0x10
c0011dfb:	83 e8 01             	sub    eax,0x1
c0011dfe:	74 21                	je     c0011e21 <SysOpen(regs*)+0x68>
c0011e00:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011e04:	eb 12                	jmp    c0011e18 <SysOpen(regs*)+0x5f>
c0011e06:	83 fa 3a             	cmp    edx,0x3a
c0011e09:	74 12                	je     c0011e1d <SysOpen(regs*)+0x64>
c0011e0b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011e0f:	83 e8 01             	sub    eax,0x1
c0011e12:	74 0d                	je     c0011e21 <SysOpen(regs*)+0x68>
c0011e14:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011e18:	83 fa 2e             	cmp    edx,0x2e
c0011e1b:	75 e9                	jne    c0011e06 <SysOpen(regs*)+0x4d>
c0011e1d:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011e21:	83 ec 08             	sub    esp,0x8
c0011e24:	68 4e 82 02 c0       	push   0xc002824e
c0011e29:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e2c:	50                   	push   eax
c0011e2d:	e8 3f ff ff ff       	call   c0011d71 <string_ends_with(char const*, char const*)>
c0011e32:	83 c4 10             	add    esp,0x10
c0011e35:	85 c0                	test   eax,eax
c0011e37:	74 1d                	je     c0011e56 <SysOpen(regs*)+0x9d>
c0011e39:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e3c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011e42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e49:	81 c4 04 01 00 00    	add    esp,0x104
c0011e4f:	31 c0                	xor    eax,eax
c0011e51:	31 d2                	xor    edx,edx
c0011e53:	5b                   	pop    ebx
c0011e54:	5e                   	pop    esi
c0011e55:	c3                   	ret    
c0011e56:	83 ec 08             	sub    esp,0x8
c0011e59:	68 53 82 02 c0       	push   0xc0028253
c0011e5e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e61:	50                   	push   eax
c0011e62:	e8 0a ff ff ff       	call   c0011d71 <string_ends_with(char const*, char const*)>
c0011e67:	83 c4 10             	add    esp,0x10
c0011e6a:	85 c0                	test   eax,eax
c0011e6c:	75 cb                	jne    c0011e39 <SysOpen(regs*)+0x80>
c0011e6e:	83 ec 08             	sub    esp,0x8
c0011e71:	68 4f 82 02 c0       	push   0xc002824f
c0011e76:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e79:	50                   	push   eax
c0011e7a:	e8 d1 e8 fe ff       	call   c0000750 <strcmp>
c0011e7f:	83 c4 10             	add    esp,0x10
c0011e82:	85 c0                	test   eax,eax
c0011e84:	74 b3                	je     c0011e39 <SysOpen(regs*)+0x80>
c0011e86:	83 ec 08             	sub    esp,0x8
c0011e89:	68 4e 82 02 c0       	push   0xc002824e
c0011e8e:	56                   	push   esi
c0011e8f:	e8 dd fe ff ff       	call   c0011d71 <string_ends_with(char const*, char const*)>
c0011e94:	83 c4 10             	add    esp,0x10
c0011e97:	85 c0                	test   eax,eax
c0011e99:	75 9e                	jne    c0011e39 <SysOpen(regs*)+0x80>
c0011e9b:	83 ec 08             	sub    esp,0x8
c0011e9e:	68 58 82 02 c0       	push   0xc0028258
c0011ea3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ea6:	50                   	push   eax
c0011ea7:	e8 c5 fe ff ff       	call   c0011d71 <string_ends_with(char const*, char const*)>
c0011eac:	83 c4 10             	add    esp,0x10
c0011eaf:	85 c0                	test   eax,eax
c0011eb1:	0f 85 eb 00 00 00    	jne    c0011fa2 <SysOpen(regs*)+0x1e9>
c0011eb7:	83 ec 08             	sub    esp,0x8
c0011eba:	68 5d 82 02 c0       	push   0xc002825d
c0011ebf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ec2:	50                   	push   eax
c0011ec3:	e8 a9 fe ff ff       	call   c0011d71 <string_ends_with(char const*, char const*)>
c0011ec8:	83 c4 10             	add    esp,0x10
c0011ecb:	85 c0                	test   eax,eax
c0011ecd:	0f 85 cf 00 00 00    	jne    c0011fa2 <SysOpen(regs*)+0x1e9>
c0011ed3:	83 ec 08             	sub    esp,0x8
c0011ed6:	68 59 82 02 c0       	push   0xc0028259
c0011edb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011ede:	51                   	push   ecx
c0011edf:	e8 6c e8 fe ff       	call   c0000750 <strcmp>
c0011ee4:	83 c4 10             	add    esp,0x10
c0011ee7:	85 c0                	test   eax,eax
c0011ee9:	0f 84 b3 00 00 00    	je     c0011fa2 <SysOpen(regs*)+0x1e9>
c0011eef:	83 ec 08             	sub    esp,0x8
c0011ef2:	68 58 82 02 c0       	push   0xc0028258
c0011ef7:	56                   	push   esi
c0011ef8:	e8 74 fe ff ff       	call   c0011d71 <string_ends_with(char const*, char const*)>
c0011efd:	83 c4 10             	add    esp,0x10
c0011f00:	85 c0                	test   eax,eax
c0011f02:	0f 85 9a 00 00 00    	jne    c0011fa2 <SysOpen(regs*)+0x1e9>
c0011f08:	83 ec 0c             	sub    esp,0xc
c0011f0b:	68 14 01 00 00       	push   0x114
c0011f10:	e8 4e d9 ff ff       	call   c000f863 <malloc>
c0011f15:	83 c4 0c             	add    esp,0xc
c0011f18:	89 c6                	mov    esi,eax
c0011f1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f22:	50                   	push   eax
c0011f23:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011f26:	52                   	push   edx
c0011f27:	56                   	push   esi
c0011f28:	e8 5d 62 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0011f2d:	83 c4 10             	add    esp,0x10
c0011f30:	85 f6                	test   esi,esi
c0011f32:	74 5b                	je     c0011f8f <SysOpen(regs*)+0x1d6>
c0011f34:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011f37:	0f b6 c2             	movzx  eax,dl
c0011f3a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011f3d:	89 d0                	mov    eax,edx
c0011f3f:	83 e0 01             	and    eax,0x1
c0011f42:	f6 c2 02             	test   dl,0x2
c0011f45:	74 03                	je     c0011f4a <SysOpen(regs*)+0x191>
c0011f47:	83 c8 02             	or     eax,0x2
c0011f4a:	f6 c2 04             	test   dl,0x4
c0011f4d:	74 03                	je     c0011f52 <SysOpen(regs*)+0x199>
c0011f4f:	83 c8 04             	or     eax,0x4
c0011f52:	f6 c2 08             	test   dl,0x8
c0011f55:	74 03                	je     c0011f5a <SysOpen(regs*)+0x1a1>
c0011f57:	83 c8 0a             	or     eax,0xa
c0011f5a:	80 e2 10             	and    dl,0x10
c0011f5d:	74 03                	je     c0011f62 <SysOpen(regs*)+0x1a9>
c0011f5f:	83 c8 12             	or     eax,0x12
c0011f62:	83 ec 08             	sub    esp,0x8
c0011f65:	50                   	push   eax
c0011f66:	56                   	push   esi
c0011f67:	e8 3c 62 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0011f6c:	83 c4 10             	add    esp,0x10
c0011f6f:	85 c0                	test   eax,eax
c0011f71:	75 1c                	jne    c0011f8f <SysOpen(regs*)+0x1d6>
c0011f73:	83 ec 0c             	sub    esp,0xc
c0011f76:	56                   	push   esi
c0011f77:	e8 78 0e 00 00       	call   c0012df4 <UnixFile::getFileDescriptor()>
c0011f7c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011f7f:	83 c4 10             	add    esp,0x10
c0011f82:	89 02                	mov    DWORD PTR [edx],eax
c0011f84:	c1 f8 1f             	sar    eax,0x1f
c0011f87:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011f8a:	e9 ba fe ff ff       	jmp    c0011e49 <SysOpen(regs*)+0x90>
c0011f8f:	81 c4 04 01 00 00    	add    esp,0x104
c0011f95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f9a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f9f:	5b                   	pop    ebx
c0011fa0:	5e                   	pop    esi
c0011fa1:	c3                   	ret    
c0011fa2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fa5:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011fab:	e9 92 fe ff ff       	jmp    c0011e42 <SysOpen(regs*)+0x89>

c0011fb0 <KeSystemCall(regs*, void*)>:
c0011fb0:	53                   	push   ebx
c0011fb1:	83 ec 08             	sub    esp,0x8
c0011fb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fb8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011fbb:	83 f8 48             	cmp    eax,0x48
c0011fbe:	77 16                	ja     c0011fd6 <KeSystemCall(regs*, void*)+0x26>
c0011fc0:	8b 14 85 40 b4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4bc0]
c0011fc7:	85 d2                	test   edx,edx
c0011fc9:	74 0b                	je     c0011fd6 <KeSystemCall(regs*, void*)+0x26>
c0011fcb:	83 ec 0c             	sub    esp,0xc
c0011fce:	53                   	push   ebx
c0011fcf:	ff d2                	call   edx
c0011fd1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011fd4:	eb 0d                	jmp    c0011fe3 <KeSystemCall(regs*, void*)+0x33>
c0011fd6:	52                   	push   edx
c0011fd7:	52                   	push   edx
c0011fd8:	50                   	push   eax
c0011fd9:	68 62 82 02 c0       	push   0xc0028262
c0011fde:	e8 99 4f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011fe3:	83 c4 10             	add    esp,0x10
c0011fe6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011feb:	31 d2                	xor    edx,edx
c0011fed:	83 c4 08             	add    esp,0x8
c0011ff0:	5b                   	pop    ebx
c0011ff1:	c3                   	ret    

c0011ff2 <VgaText::isAtty()>:
c0011ff2:	b0 01                	mov    al,0x1
c0011ff4:	c3                   	ret    
c0011ff5:	90                   	nop

c0011ff6 <VgaText::~VgaText()>:
c0011ff6:	83 ec 0c             	sub    esp,0xc
c0011ff9:	ba cc 82 02 c0       	mov    edx,0xc00282cc
c0011ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012002:	89 10                	mov    DWORD PTR [eax],edx
c0012004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012008:	83 ec 0c             	sub    esp,0xc
c001200b:	50                   	push   eax
c001200c:	e8 d1 0f 00 00       	call   c0012fe2 <UnixFile::~UnixFile()>
c0012011:	83 c4 10             	add    esp,0x10
c0012014:	90                   	nop
c0012015:	83 c4 0c             	add    esp,0xc
c0012018:	c3                   	ret    
c0012019:	90                   	nop

c001201a <VgaText::~VgaText()>:
c001201a:	83 ec 0c             	sub    esp,0xc
c001201d:	83 ec 0c             	sub    esp,0xc
c0012020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012024:	e8 cd ff ff ff       	call   c0011ff6 <VgaText::~VgaText()>
c0012029:	83 c4 10             	add    esp,0x10
c001202c:	83 ec 08             	sub    esp,0x8
c001202f:	68 84 01 00 00       	push   0x184
c0012034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012038:	e8 3f b3 ff ff       	call   c000d37c <operator delete(void*, unsigned long)>
c001203d:	83 c4 10             	add    esp,0x10
c0012040:	83 c4 0c             	add    esp,0xc
c0012043:	c3                   	ret    

c0012044 <VgaText::read(unsigned long long, void*, int*)>:
c0012044:	83 ec 10             	sub    esp,0x10
c0012047:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001204b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001204f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012053:	e8 17 85 ff ff       	call   c000a56f <readKeyboard(VgaText*, char*, unsigned long)>
c0012058:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001205c:	89 02                	mov    DWORD PTR [edx],eax
c001205e:	31 c0                	xor    eax,eax
c0012060:	83 c4 1c             	add    esp,0x1c
c0012063:	c3                   	ret    

c0012064 <setTerminalScrollLock(bool)>:
c0012064:	c3                   	ret    

c0012065 <doTerminalCycle()>:
c0012065:	c3                   	ret    

c0012066 <addToTerminalCycle(VgaText*)>:
c0012066:	c3                   	ret    

c0012067 <scrollTerminalScrollLock(int)>:
c0012067:	c3                   	ret    

c0012068 <VgaText::updateTitle()>:
c0012068:	c3                   	ret    
c0012069:	90                   	nop

c001206a <VgaText::load()>:
c001206a:	c3                   	ret    
c001206b:	90                   	nop

c001206c <VgaText::updateCursor()>:
c001206c:	83 ec 14             	sub    esp,0x14
c001206f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012073:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012076:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012079:	e8 5a 9b 00 00       	call   c001bbd8 <HalConsoleCursorUpdate(int, int)>
c001207e:	83 c4 1c             	add    esp,0x1c
c0012081:	c3                   	ret    

c0012082 <VgaText::doANSI_SGR(int)>:
c0012082:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001208a:	85 d2                	test   edx,edx
c001208c:	75 0b                	jne    c0012099 <VgaText::doANSI_SGR(int)+0x17>
c001208e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012091:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012094:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012097:	eb 59                	jmp    c00120f2 <VgaText::doANSI_SGR(int)+0x70>
c0012099:	83 fa 07             	cmp    edx,0x7
c001209c:	75 0b                	jne    c00120a9 <VgaText::doANSI_SGR(int)+0x27>
c001209e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00120a1:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00120a4:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00120a7:	eb 49                	jmp    c00120f2 <VgaText::doANSI_SGR(int)+0x70>
c00120a9:	83 fa 1b             	cmp    edx,0x1b
c00120ac:	74 e0                	je     c001208e <VgaText::doANSI_SGR(int)+0xc>
c00120ae:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00120b1:	83 f9 07             	cmp    ecx,0x7
c00120b4:	77 09                	ja     c00120bf <VgaText::doANSI_SGR(int)+0x3d>
c00120b6:	8b 14 8d a0 b5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4a60]
c00120bd:	eb 20                	jmp    c00120df <VgaText::doANSI_SGR(int)+0x5d>
c00120bf:	8d 4a d8             	lea    ecx,[edx-0x28]
c00120c2:	83 f9 07             	cmp    ecx,0x7
c00120c5:	77 09                	ja     c00120d0 <VgaText::doANSI_SGR(int)+0x4e>
c00120c7:	8b 14 8d a0 b5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4a60]
c00120ce:	eb 22                	jmp    c00120f2 <VgaText::doANSI_SGR(int)+0x70>
c00120d0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00120d3:	83 f9 07             	cmp    ecx,0x7
c00120d6:	77 0b                	ja     c00120e3 <VgaText::doANSI_SGR(int)+0x61>
c00120d8:	8b 14 95 58 b4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4ba8]
c00120df:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00120e2:	c3                   	ret    
c00120e3:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00120e6:	83 f9 07             	cmp    ecx,0x7
c00120e9:	77 0a                	ja     c00120f5 <VgaText::doANSI_SGR(int)+0x73>
c00120eb:	8b 14 95 30 b4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4bd0]
c00120f2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00120f5:	c3                   	ret    

c00120f6 <VgaText::setDefaultBgColour(VgaColour)>:
c00120f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120fe:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012101:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012104:	c3                   	ret    
c0012105:	90                   	nop

c0012106 <VgaText::setDefaultFgColour(VgaColour)>:
c0012106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001210a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001210e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012111:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012114:	c3                   	ret    
c0012115:	90                   	nop

c0012116 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0012116:	53                   	push   ebx
c0012117:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001211b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001211f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012123:	51                   	push   ecx
c0012124:	e8 cd ff ff ff       	call   c00120f6 <VgaText::setDefaultBgColour(VgaColour)>
c0012129:	58                   	pop    eax
c001212a:	5a                   	pop    edx
c001212b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001212f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012133:	5b                   	pop    ebx
c0012134:	eb d0                	jmp    c0012106 <VgaText::setDefaultFgColour(VgaColour)>

c0012136 <VgaText::setTitleTextColour(VgaColour)>:
c0012136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001213a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001213e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012141:	c3                   	ret    

c0012142 <VgaText::setTitleColour(VgaColour)>:
c0012142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012146:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001214a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001214d:	c3                   	ret    

c001214e <VgaText::setTitle(char*)>:
c001214e:	c3                   	ret    
c001214f:	90                   	nop

c0012150 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012154:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012159:	83 e0 0f             	and    eax,0xf
c001215c:	c1 e2 04             	shl    edx,0x4
c001215f:	09 d0                	or     eax,edx
c0012161:	c3                   	ret    

c0012162 <VgaText::scrollScreen()>:
c0012162:	55                   	push   ebp
c0012163:	57                   	push   edi
c0012164:	56                   	push   esi
c0012165:	be 01 00 00 00       	mov    esi,0x1
c001216a:	53                   	push   ebx
c001216b:	83 ec 0c             	sub    esp,0xc
c001216e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012172:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012175:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001217b:	31 ff                	xor    edi,edi
c001217d:	01 e9                	add    ecx,ebp
c001217f:	8a 01                	mov    al,BYTE PTR [ecx]
c0012181:	83 fe 18             	cmp    esi,0x18
c0012184:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c001218a:	75 20                	jne    c00121ac <VgaText::scrollScreen()+0x4a>
c001218c:	f7 c7 01 00 00 00    	test   edi,0x1
c0012192:	74 15                	je     c00121a9 <VgaText::scrollScreen()+0x47>
c0012194:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012198:	50                   	push   eax
c0012199:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001219d:	50                   	push   eax
c001219e:	e8 ad ff ff ff       	call   c0012150 <VgaText::combineColours(unsigned char, unsigned char)>
c00121a3:	5a                   	pop    edx
c00121a4:	5a                   	pop    edx
c00121a5:	88 01                	mov    BYTE PTR [ecx],al
c00121a7:	eb 03                	jmp    c00121ac <VgaText::scrollScreen()+0x4a>
c00121a9:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00121ac:	47                   	inc    edi
c00121ad:	41                   	inc    ecx
c00121ae:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00121b4:	75 c9                	jne    c001217f <VgaText::scrollScreen()+0x1d>
c00121b6:	46                   	inc    esi
c00121b7:	83 fe 19             	cmp    esi,0x19
c00121ba:	75 b9                	jne    c0012175 <VgaText::scrollScreen()+0x13>
c00121bc:	39 1d f4 11 03 c0    	cmp    DWORD PTR ds:0xc00311f4,ebx
c00121c2:	75 1f                	jne    c00121e3 <VgaText::scrollScreen()+0x81>
c00121c4:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00121c8:	74 05                	je     c00121cf <VgaText::scrollScreen()+0x6d>
c00121ca:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00121cd:	eb 14                	jmp    c00121e3 <VgaText::scrollScreen()+0x81>
c00121cf:	50                   	push   eax
c00121d0:	50                   	push   eax
c00121d1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00121d5:	50                   	push   eax
c00121d6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00121da:	50                   	push   eax
c00121db:	e8 8c 98 00 00       	call   c001ba6c <HalConsoleScroll(int, int)>
c00121e0:	83 c4 10             	add    esp,0x10
c00121e3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00121e7:	83 c4 0c             	add    esp,0xc
c00121ea:	5b                   	pop    ebx
c00121eb:	5e                   	pop    esi
c00121ec:	5f                   	pop    edi
c00121ed:	5d                   	pop    ebp
c00121ee:	e9 79 fe ff ff       	jmp    c001206c <VgaText::updateCursor()>
c00121f3:	90                   	nop

c00121f4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00121f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00121f9:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00121fe:	c1 e0 08             	shl    eax,0x8
c0012201:	09 d0                	or     eax,edx
c0012203:	c3                   	ret    

c0012204 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012204:	55                   	push   ebp
c0012205:	57                   	push   edi
c0012206:	56                   	push   esi
c0012207:	53                   	push   ebx
c0012208:	83 ec 1c             	sub    esp,0x1c
c001220b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001220f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012213:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012217:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c001221a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001221e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012222:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012226:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001222a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001222e:	85 ed                	test   ebp,ebp
c0012230:	75 14                	jne    c0012246 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012232:	c7 44 24 30 76 82 02 c0 	mov    DWORD PTR [esp+0x30],0xc0028276
c001223a:	83 c4 1c             	add    esp,0x1c
c001223d:	5b                   	pop    ebx
c001223e:	5e                   	pop    esi
c001223f:	5f                   	pop    edi
c0012240:	5d                   	pop    ebp
c0012241:	e9 72 da ff ff       	jmp    c000fcb8 <KePanic(char const*)>
c0012246:	50                   	push   eax
c0012247:	50                   	push   eax
c0012248:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001224d:	50                   	push   eax
c001224e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012253:	50                   	push   eax
c0012254:	e8 f7 fe ff ff       	call   c0012150 <VgaText::combineColours(unsigned char, unsigned char)>
c0012259:	5a                   	pop    edx
c001225a:	0f be c9             	movsx  ecx,cl
c001225d:	5a                   	pop    edx
c001225e:	0f b6 c0             	movzx  eax,al
c0012261:	50                   	push   eax
c0012262:	51                   	push   ecx
c0012263:	e8 8c ff ff ff       	call   c00121f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0012268:	6b d6 50             	imul   edx,esi,0x50
c001226b:	83 c4 10             	add    esp,0x10
c001226e:	01 da                	add    edx,ebx
c0012270:	0f b7 d2             	movzx  edx,dx
c0012273:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012278:	39 3d f4 11 03 c0    	cmp    DWORD PTR ds:0xc00311f4,edi
c001227e:	75 28                	jne    c00122a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012280:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012284:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012288:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c001228c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012290:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012298:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001229c:	83 c4 1c             	add    esp,0x1c
c001229f:	5b                   	pop    ebx
c00122a0:	5e                   	pop    esi
c00122a1:	5f                   	pop    edi
c00122a2:	5d                   	pop    ebp
c00122a3:	e9 cc 98 00 00       	jmp    c001bb74 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00122a8:	83 c4 1c             	add    esp,0x1c
c00122ab:	5b                   	pop    ebx
c00122ac:	5e                   	pop    esi
c00122ad:	5f                   	pop    edi
c00122ae:	5d                   	pop    ebp
c00122af:	c3                   	ret    

c00122b0 <VgaText::getCursorX()>:
c00122b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00122b7:	c3                   	ret    

c00122b8 <VgaText::getCursorY()>:
c00122b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122bc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00122bf:	c3                   	ret    

c00122c0 <VgaText::setCursor(int, int)>:
c00122c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00122c8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00122cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122cf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00122d2:	e9 95 fd ff ff       	jmp    c001206c <VgaText::updateCursor()>

c00122d7 <setActiveTerminal(VgaText*)>:
c00122d7:	53                   	push   ebx
c00122d8:	83 ec 08             	sub    esp,0x8
c00122db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122df:	85 db                	test   ebx,ebx
c00122e1:	75 11                	jne    c00122f4 <setActiveTerminal(VgaText*)+0x1d>
c00122e3:	c7 44 24 10 86 82 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028286
c00122eb:	83 c4 08             	add    esp,0x8
c00122ee:	5b                   	pop    ebx
c00122ef:	e9 c4 d9 ff ff       	jmp    c000fcb8 <KePanic(char const*)>
c00122f4:	a1 f4 11 03 c0       	mov    eax,ds:0xc00311f4
c00122f9:	85 c0                	test   eax,eax
c00122fb:	74 0c                	je     c0012309 <setActiveTerminal(VgaText*)+0x32>
c00122fd:	83 ec 0c             	sub    esp,0xc
c0012300:	50                   	push   eax
c0012301:	e8 66 fd ff ff       	call   c001206c <VgaText::updateCursor()>
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	89 1d f4 11 03 c0    	mov    DWORD PTR ds:0xc00311f4,ebx
c001230f:	50                   	push   eax
c0012310:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012313:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012316:	53                   	push   ebx
c0012317:	e8 a4 ff ff ff       	call   c00122c0 <VgaText::setCursor(int, int)>
c001231c:	83 c4 18             	add    esp,0x18
c001231f:	5b                   	pop    ebx
c0012320:	c3                   	ret    
c0012321:	90                   	nop

c0012322 <VgaText::clearScreen()>:
c0012322:	57                   	push   edi
c0012323:	56                   	push   esi
c0012324:	31 f6                	xor    esi,esi
c0012326:	53                   	push   ebx
c0012327:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001232b:	52                   	push   edx
c001232c:	6a 00                	push   0x0
c001232e:	6a 00                	push   0x0
c0012330:	53                   	push   ebx
c0012331:	e8 8a ff ff ff       	call   c00122c0 <VgaText::setCursor(int, int)>
c0012336:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001233d:	83 c4 10             	add    esp,0x10
c0012340:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0012343:	7e 20                	jle    c0012365 <VgaText::clearScreen()+0x43>
c0012345:	31 ff                	xor    edi,edi
c0012347:	50                   	push   eax
c0012348:	50                   	push   eax
c0012349:	56                   	push   esi
c001234a:	57                   	push   edi
c001234b:	47                   	inc    edi
c001234c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001234f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012352:	6a 20                	push   0x20
c0012354:	53                   	push   ebx
c0012355:	e8 aa fe ff ff       	call   c0012204 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001235a:	83 c4 20             	add    esp,0x20
c001235d:	83 ff 50             	cmp    edi,0x50
c0012360:	75 e5                	jne    c0012347 <VgaText::clearScreen()+0x25>
c0012362:	46                   	inc    esi
c0012363:	eb db                	jmp    c0012340 <VgaText::clearScreen()+0x1e>
c0012365:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001236c:	5b                   	pop    ebx
c001236d:	5e                   	pop    esi
c001236e:	5f                   	pop    edi
c001236f:	c3                   	ret    

c0012370 <VgaText::setCursorX(int)>:
c0012370:	83 ec 10             	sub    esp,0x10
c0012373:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012377:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001237a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001237e:	50                   	push   eax
c001237f:	e8 3c ff ff ff       	call   c00122c0 <VgaText::setCursor(int, int)>
c0012384:	83 c4 1c             	add    esp,0x1c
c0012387:	c3                   	ret    

c0012388 <VgaText::setCursorY(int)>:
c0012388:	83 ec 10             	sub    esp,0x10
c001238b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001238f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012393:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012396:	50                   	push   eax
c0012397:	e8 24 ff ff ff       	call   c00122c0 <VgaText::setCursor(int, int)>
c001239c:	83 c4 1c             	add    esp,0x1c
c001239f:	c3                   	ret    

c00123a0 <VgaText::incrementCursor(bool)>:
c00123a0:	56                   	push   esi
c00123a1:	53                   	push   ebx
c00123a2:	51                   	push   ecx
c00123a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00123ab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00123ae:	40                   	inc    eax
c00123af:	83 f8 50             	cmp    eax,0x50
c00123b2:	74 05                	je     c00123b9 <VgaText::incrementCursor(bool)+0x19>
c00123b4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00123b7:	eb 24                	jmp    c00123dd <VgaText::incrementCursor(bool)+0x3d>
c00123b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00123bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00123c3:	8d 50 01             	lea    edx,[eax+0x1]
c00123c6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00123c9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00123cc:	75 0f                	jne    c00123dd <VgaText::incrementCursor(bool)+0x3d>
c00123ce:	83 ec 0c             	sub    esp,0xc
c00123d1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00123d4:	53                   	push   ebx
c00123d5:	e8 88 fd ff ff       	call   c0012162 <VgaText::scrollScreen()>
c00123da:	83 c4 10             	add    esp,0x10
c00123dd:	89 f0                	mov    eax,esi
c00123df:	84 c0                	test   al,al
c00123e1:	74 0c                	je     c00123ef <VgaText::incrementCursor(bool)+0x4f>
c00123e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123e7:	5a                   	pop    edx
c00123e8:	5b                   	pop    ebx
c00123e9:	5e                   	pop    esi
c00123ea:	e9 7d fc ff ff       	jmp    c001206c <VgaText::updateCursor()>
c00123ef:	58                   	pop    eax
c00123f0:	5b                   	pop    ebx
c00123f1:	5e                   	pop    esi
c00123f2:	c3                   	ret    
c00123f3:	90                   	nop

c00123f4 <VgaText::decrementCursor(bool)>:
c00123f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00123f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00123fc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00123ff:	85 c0                	test   eax,eax
c0012401:	74 04                	je     c0012407 <VgaText::decrementCursor(bool)+0x13>
c0012403:	48                   	dec    eax
c0012404:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012407:	84 c9                	test   cl,cl
c0012409:	74 09                	je     c0012414 <VgaText::decrementCursor(bool)+0x20>
c001240b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001240f:	e9 58 fc ff ff       	jmp    c001206c <VgaText::updateCursor()>
c0012414:	c3                   	ret    
c0012415:	90                   	nop

c0012416 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012416:	53                   	push   ebx
c0012417:	83 ec 08             	sub    esp,0x8
c001241a:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001241f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012423:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012427:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001242b:	83 f8 07             	cmp    eax,0x7
c001242e:	75 21                	jne    c0012451 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012430:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012438:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012440:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012448:	83 c4 08             	add    esp,0x8
c001244b:	5b                   	pop    ebx
c001244c:	e9 da 65 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c0012451:	83 f8 0d             	cmp    eax,0xd
c0012454:	75 09                	jne    c001245f <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0012456:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001245d:	eb 2d                	jmp    c001248c <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c001245f:	83 f8 0a             	cmp    eax,0xa
c0012462:	75 31                	jne    c0012495 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012464:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012467:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001246e:	8d 50 01             	lea    edx,[eax+0x1]
c0012471:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012474:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012477:	75 0f                	jne    c0012488 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012479:	83 ec 0c             	sub    esp,0xc
c001247c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001247f:	53                   	push   ebx
c0012480:	e8 dd fc ff ff       	call   c0012162 <VgaText::scrollScreen()>
c0012485:	83 c4 10             	add    esp,0x10
c0012488:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001248c:	83 c4 08             	add    esp,0x8
c001248f:	5b                   	pop    ebx
c0012490:	e9 d7 fb ff ff       	jmp    c001206c <VgaText::updateCursor()>
c0012495:	83 f8 08             	cmp    eax,0x8
c0012498:	75 25                	jne    c00124bf <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001249a:	50                   	push   eax
c001249b:	50                   	push   eax
c001249c:	6a 01                	push   0x1
c001249e:	53                   	push   ebx
c001249f:	e8 50 ff ff ff       	call   c00123f4 <VgaText::decrementCursor(bool)>
c00124a4:	5a                   	pop    edx
c00124a5:	59                   	pop    ecx
c00124a6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00124a9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00124ac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00124af:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00124b2:	6a 20                	push   0x20
c00124b4:	53                   	push   ebx
c00124b5:	e8 4a fd ff ff       	call   c0012204 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00124ba:	83 c4 28             	add    esp,0x28
c00124bd:	5b                   	pop    ebx
c00124be:	c3                   	ret    
c00124bf:	83 ec 08             	sub    esp,0x8
c00124c2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00124c5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00124c8:	51                   	push   ecx
c00124c9:	52                   	push   edx
c00124ca:	50                   	push   eax
c00124cb:	53                   	push   ebx
c00124cc:	e8 33 fd ff ff       	call   c0012204 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00124d1:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00124d5:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00124dd:	83 c4 28             	add    esp,0x28
c00124e0:	5b                   	pop    ebx
c00124e1:	e9 ba fe ff ff       	jmp    c00123a0 <VgaText::incrementCursor(bool)>

c00124e6 <VgaText::putchar(char)>:
c00124e6:	57                   	push   edi
c00124e7:	56                   	push   esi
c00124e8:	53                   	push   ebx
c00124e9:	83 ec 10             	sub    esp,0x10
c00124ec:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00124f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00124f4:	89 f8                	mov    eax,edi
c00124f6:	0f be c0             	movsx  eax,al
c00124f9:	83 f8 5b             	cmp    eax,0x5b
c00124fc:	75 18                	jne    c0012516 <VgaText::putchar(char)+0x30>
c00124fe:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0012502:	74 20                	je     c0012524 <VgaText::putchar(char)+0x3e>
c0012504:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001250a:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0012511:	e9 c1 00 00 00       	jmp    c00125d7 <VgaText::putchar(char)+0xf1>
c0012516:	83 f8 1b             	cmp    eax,0x1b
c0012519:	75 09                	jne    c0012524 <VgaText::putchar(char)+0x3e>
c001251b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001251f:	e9 b3 00 00 00       	jmp    c00125d7 <VgaText::putchar(char)+0xf1>
c0012524:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0012527:	84 c9                	test   cl,cl
c0012529:	0f 84 98 00 00 00    	je     c00125c7 <VgaText::putchar(char)+0xe1>
c001252f:	8d 77 c0             	lea    esi,[edi-0x40]
c0012532:	89 f2                	mov    edx,esi
c0012534:	80 fa 3e             	cmp    dl,0x3e
c0012537:	77 78                	ja     c00125b1 <VgaText::putchar(char)+0xcb>
c0012539:	83 f8 6d             	cmp    eax,0x6d
c001253c:	75 47                	jne    c0012585 <VgaText::putchar(char)+0x9f>
c001253e:	31 f6                	xor    esi,esi
c0012540:	31 d2                	xor    edx,edx
c0012542:	31 c0                	xor    eax,eax
c0012544:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012547:	7e 2d                	jle    c0012576 <VgaText::putchar(char)+0x90>
c0012549:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001254e:	83 fa 3b             	cmp    edx,0x3b
c0012551:	75 17                	jne    c001256a <VgaText::putchar(char)+0x84>
c0012553:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0012557:	50                   	push   eax
c0012558:	53                   	push   ebx
c0012559:	e8 24 fb ff ff       	call   c0012082 <VgaText::doANSI_SGR(int)>
c001255e:	59                   	pop    ecx
c001255f:	31 d2                	xor    edx,edx
c0012561:	5f                   	pop    edi
c0012562:	31 c0                	xor    eax,eax
c0012564:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012568:	eb 09                	jmp    c0012573 <VgaText::putchar(char)+0x8d>
c001256a:	6b c0 0a             	imul   eax,eax,0xa
c001256d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012571:	88 ca                	mov    dl,cl
c0012573:	46                   	inc    esi
c0012574:	eb ce                	jmp    c0012544 <VgaText::putchar(char)+0x5e>
c0012576:	84 d2                	test   dl,dl
c0012578:	74 2f                	je     c00125a9 <VgaText::putchar(char)+0xc3>
c001257a:	50                   	push   eax
c001257b:	53                   	push   ebx
c001257c:	e8 01 fb ff ff       	call   c0012082 <VgaText::doANSI_SGR(int)>
c0012581:	58                   	pop    eax
c0012582:	5a                   	pop    edx
c0012583:	eb 24                	jmp    c00125a9 <VgaText::putchar(char)+0xc3>
c0012585:	83 f8 4a             	cmp    eax,0x4a
c0012588:	75 1f                	jne    c00125a9 <VgaText::putchar(char)+0xc3>
c001258a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001258e:	75 19                	jne    c00125a9 <VgaText::putchar(char)+0xc3>
c0012590:	83 ec 0c             	sub    esp,0xc
c0012593:	53                   	push   ebx
c0012594:	e8 89 fd ff ff       	call   c0012322 <VgaText::clearScreen()>
c0012599:	83 c4 0c             	add    esp,0xc
c001259c:	6a 00                	push   0x0
c001259e:	6a 00                	push   0x0
c00125a0:	53                   	push   ebx
c00125a1:	e8 1a fd ff ff       	call   c00122c0 <VgaText::setCursor(int, int)>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00125af:	eb 26                	jmp    c00125d7 <VgaText::putchar(char)+0xf1>
c00125b1:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00125b4:	83 f8 0e             	cmp    eax,0xe
c00125b7:	7f 1e                	jg     c00125d7 <VgaText::putchar(char)+0xf1>
c00125b9:	8d 48 01             	lea    ecx,[eax+0x1]
c00125bc:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00125bf:	89 f9                	mov    ecx,edi
c00125c1:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c00125c5:	eb 10                	jmp    c00125d7 <VgaText::putchar(char)+0xf1>
c00125c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00125ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00125cd:	50                   	push   eax
c00125ce:	53                   	push   ebx
c00125cf:	e8 42 fe ff ff       	call   c0012416 <VgaText::putchar(char, VgaColour, VgaColour)>
c00125d4:	83 c4 10             	add    esp,0x10
c00125d7:	83 c4 10             	add    esp,0x10
c00125da:	5b                   	pop    ebx
c00125db:	5e                   	pop    esi
c00125dc:	5f                   	pop    edi
c00125dd:	c3                   	ret    

c00125de <VgaText::putx(unsigned int)>:
c00125de:	57                   	push   edi
c00125df:	b9 11 00 00 00       	mov    ecx,0x11
c00125e4:	56                   	push   esi
c00125e5:	be 0f 6b 02 c0       	mov    esi,0xc0026b0f
c00125ea:	53                   	push   ebx
c00125eb:	83 ec 20             	sub    esp,0x20
c00125ee:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00125f2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00125f6:	fc                   	cld    
c00125f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125f9:	be 08 00 00 00       	mov    esi,0x8
c00125fe:	50                   	push   eax
c00125ff:	50                   	push   eax
c0012600:	89 d8                	mov    eax,ebx
c0012602:	c1 e3 04             	shl    ebx,0x4
c0012605:	c1 e8 1c             	shr    eax,0x1c
c0012608:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001260d:	50                   	push   eax
c001260e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012612:	e8 cf fe ff ff       	call   c00124e6 <VgaText::putchar(char)>
c0012617:	83 c4 10             	add    esp,0x10
c001261a:	4e                   	dec    esi
c001261b:	75 e1                	jne    c00125fe <VgaText::putx(unsigned int)+0x20>
c001261d:	83 c4 20             	add    esp,0x20
c0012620:	5b                   	pop    ebx
c0012621:	5e                   	pop    esi
c0012622:	5f                   	pop    edi
c0012623:	c3                   	ret    

c0012624 <VgaText::puts(char const*)>:
c0012624:	53                   	push   ebx
c0012625:	83 ec 08             	sub    esp,0x8
c0012628:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001262c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001262f:	85 c0                	test   eax,eax
c0012631:	74 12                	je     c0012645 <VgaText::puts(char const*)+0x21>
c0012633:	43                   	inc    ebx
c0012634:	51                   	push   ecx
c0012635:	51                   	push   ecx
c0012636:	50                   	push   eax
c0012637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001263b:	e8 a6 fe ff ff       	call   c00124e6 <VgaText::putchar(char)>
c0012640:	83 c4 10             	add    esp,0x10
c0012643:	eb e7                	jmp    c001262c <VgaText::puts(char const*)+0x8>
c0012645:	83 c4 08             	add    esp,0x8
c0012648:	5b                   	pop    ebx
c0012649:	c3                   	ret    

c001264a <VgaText::write(unsigned long long, void*, int*)>:
c001264a:	55                   	push   ebp
c001264b:	57                   	push   edi
c001264c:	56                   	push   esi
c001264d:	53                   	push   ebx
c001264e:	83 ec 0c             	sub    esp,0xc
c0012651:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012655:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012659:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001265d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012664:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012667:	39 eb                	cmp    ebx,ebp
c0012669:	74 13                	je     c001267e <VgaText::write(unsigned long long, void*, int*)+0x34>
c001266b:	43                   	inc    ebx
c001266c:	50                   	push   eax
c001266d:	50                   	push   eax
c001266e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012672:	50                   	push   eax
c0012673:	56                   	push   esi
c0012674:	e8 6d fe ff ff       	call   c00124e6 <VgaText::putchar(char)>
c0012679:	83 c4 10             	add    esp,0x10
c001267c:	eb e9                	jmp    c0012667 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001267e:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012685:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012689:	89 38                	mov    DWORD PTR [eax],edi
c001268b:	83 c4 0c             	add    esp,0xc
c001268e:	31 c0                	xor    eax,eax
c0012690:	5b                   	pop    ebx
c0012691:	5e                   	pop    esi
c0012692:	5f                   	pop    edi
c0012693:	5d                   	pop    ebp
c0012694:	c3                   	ret    
c0012695:	90                   	nop

c0012696 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012696:	55                   	push   ebp
c0012697:	57                   	push   edi
c0012698:	56                   	push   esi
c0012699:	53                   	push   ebx
c001269a:	83 ec 1c             	sub    esp,0x1c
c001269d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00126a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00126a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00126a9:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c00126ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00126b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126b8:	85 db                	test   ebx,ebx
c00126ba:	75 14                	jne    c00126d0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c00126bc:	c7 44 24 30 94 82 02 c0 	mov    DWORD PTR [esp+0x30],0xc0028294
c00126c4:	83 c4 1c             	add    esp,0x1c
c00126c7:	5b                   	pop    ebx
c00126c8:	5e                   	pop    esi
c00126c9:	5f                   	pop    edi
c00126ca:	5d                   	pop    ebp
c00126cb:	e9 e8 d5 ff ff       	jmp    c000fcb8 <KePanic(char const*)>
c00126d0:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00126d7:	50                   	push   eax
c00126d8:	50                   	push   eax
c00126d9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00126de:	50                   	push   eax
c00126df:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00126e4:	50                   	push   eax
c00126e5:	e8 66 fa ff ff       	call   c0012150 <VgaText::combineColours(unsigned char, unsigned char)>
c00126ea:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00126ee:	83 c4 10             	add    esp,0x10
c00126f1:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00126f4:	0f b6 e8             	movzx  ebp,al
c00126f7:	0f b7 c9             	movzx  ecx,cx
c00126fa:	01 c9                	add    ecx,ecx
c00126fc:	01 cb                	add    ebx,ecx
c00126fe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012701:	85 c0                	test   eax,eax
c0012703:	0f 84 ef 00 00 00    	je     c00127f8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012709:	83 f8 0d             	cmp    eax,0xd
c001270c:	75 0c                	jne    c001271a <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c001270e:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012715:	e9 d8 00 00 00       	jmp    c00127f2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001271a:	83 f8 0a             	cmp    eax,0xa
c001271d:	75 44                	jne    c0012763 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c001271f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012722:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012729:	8d 48 01             	lea    ecx,[eax+0x1]
c001272c:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c001272f:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012732:	75 0f                	jne    c0012743 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012734:	83 ec 0c             	sub    esp,0xc
c0012737:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c001273a:	57                   	push   edi
c001273b:	e8 22 fa ff ff       	call   c0012162 <VgaText::scrollScreen()>
c0012740:	83 c4 10             	add    esp,0x10
c0012743:	83 ec 0c             	sub    esp,0xc
c0012746:	57                   	push   edi
c0012747:	e8 20 f9 ff ff       	call   c001206c <VgaText::updateCursor()>
c001274c:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012750:	83 c4 10             	add    esp,0x10
c0012753:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012756:	0f b7 db             	movzx  ebx,bx
c0012759:	01 db                	add    ebx,ebx
c001275b:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001275e:	e9 8f 00 00 00       	jmp    c00127f2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012763:	83 f8 08             	cmp    eax,0x8
c0012766:	75 34                	jne    c001279c <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012768:	51                   	push   ecx
c0012769:	51                   	push   ecx
c001276a:	6a 01                	push   0x1
c001276c:	57                   	push   edi
c001276d:	e8 82 fc ff ff       	call   c00123f4 <VgaText::decrementCursor(bool)>
c0012772:	5b                   	pop    ebx
c0012773:	58                   	pop    eax
c0012774:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012777:	ff 77 14             	push   DWORD PTR [edi+0x14]
c001277a:	ff 77 30             	push   DWORD PTR [edi+0x30]
c001277d:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012780:	6a 20                	push   0x20
c0012782:	57                   	push   edi
c0012783:	e8 7c fa ff ff       	call   c0012204 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012788:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001278c:	83 c4 20             	add    esp,0x20
c001278f:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012792:	0f b7 db             	movzx  ebx,bx
c0012795:	01 db                	add    ebx,ebx
c0012797:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001279a:	eb 56                	jmp    c00127f2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001279c:	52                   	push   edx
c001279d:	52                   	push   edx
c001279e:	55                   	push   ebp
c001279f:	50                   	push   eax
c00127a0:	e8 4f fa ff ff       	call   c00121f4 <VgaText::combineCharAndColour(char, unsigned char)>
c00127a5:	83 c4 10             	add    esp,0x10
c00127a8:	66 89 03             	mov    WORD PTR [ebx],ax
c00127ab:	39 3d f4 11 03 c0    	cmp    DWORD PTR ds:0xc00311f4,edi
c00127b1:	75 1d                	jne    c00127d0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00127b3:	83 ec 0c             	sub    esp,0xc
c00127b6:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00127b9:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00127bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127c4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00127c7:	50                   	push   eax
c00127c8:	e8 a7 93 00 00       	call   c001bb74 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00127cd:	83 c4 20             	add    esp,0x20
c00127d0:	83 c3 02             	add    ebx,0x2
c00127d3:	50                   	push   eax
c00127d4:	50                   	push   eax
c00127d5:	6a 00                	push   0x0
c00127d7:	57                   	push   edi
c00127d8:	e8 c3 fb ff ff       	call   c00123a0 <VgaText::incrementCursor(bool)>
c00127dd:	83 c4 10             	add    esp,0x10
c00127e0:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00127e4:	75 0c                	jne    c00127f2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00127e6:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00127ea:	0f b7 db             	movzx  ebx,bx
c00127ed:	01 db                	add    ebx,ebx
c00127ef:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00127f2:	46                   	inc    esi
c00127f3:	e9 06 ff ff ff       	jmp    c00126fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00127f8:	83 ec 0c             	sub    esp,0xc
c00127fb:	57                   	push   edi
c00127fc:	e8 6b f8 ff ff       	call   c001206c <VgaText::updateCursor()>
c0012801:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012808:	83 c4 2c             	add    esp,0x2c
c001280b:	5b                   	pop    ebx
c001280c:	5e                   	pop    esi
c001280d:	5f                   	pop    edi
c001280e:	5d                   	pop    ebp
c001280f:	c3                   	ret    

c0012810 <VgaText::VgaText(char const*)>:
c0012810:	56                   	push   esi
c0012811:	53                   	push   ebx
c0012812:	83 ec 04             	sub    esp,0x4
c0012815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012819:	83 ec 08             	sub    esp,0x8
c001281c:	6a 00                	push   0x0
c001281e:	50                   	push   eax
c001281f:	e8 d8 05 00 00       	call   c0012dfc <UnixFile::UnixFile(int)>
c0012824:	83 c4 10             	add    esp,0x10
c0012827:	ba cc 82 02 c0       	mov    edx,0xc00282cc
c001282c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012830:	89 10                	mov    DWORD PTR [eax],edx
c0012832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012836:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001283d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012841:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001284c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012854:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001285c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012867:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001286e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012872:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001287d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012884:	83 ec 0c             	sub    esp,0xc
c0012887:	68 a4 82 02 c0       	push   0xc00282a4
c001288c:	e8 eb 46 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012891:	83 c4 10             	add    esp,0x10
c0012894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012898:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001289f:	83 ec 0c             	sub    esp,0xc
c00128a2:	6a 01                	push   0x1
c00128a4:	e8 a6 09 00 00       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c00128a9:	83 c4 10             	add    esp,0x10
c00128ac:	89 c2                	mov    edx,eax
c00128ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00128b5:	8b 1d 90 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031290
c00128bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128c2:	89 c6                	mov    esi,eax
c00128c4:	e8 e3 d5 ff ff       	call   c000feac <Phys::allocatePage()>
c00128c9:	68 05 0c 00 00       	push   0xc05
c00128ce:	56                   	push   esi
c00128cf:	50                   	push   eax
c00128d0:	53                   	push   ebx
c00128d1:	e8 5c 10 00 00       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c00128d6:	83 c4 10             	add    esp,0x10
c00128d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128dd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128e0:	83 ec 04             	sub    esp,0x4
c00128e3:	68 a0 0f 00 00       	push   0xfa0
c00128e8:	6a 00                	push   0x0
c00128ea:	50                   	push   eax
c00128eb:	e8 00 dc fe ff       	call   c00004f0 <memset>
c00128f0:	83 c4 10             	add    esp,0x10
c00128f3:	83 ec 04             	sub    esp,0x4
c00128f6:	6a 00                	push   0x0
c00128f8:	6a 07                	push   0x7
c00128fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128fe:	e8 13 f8 ff ff       	call   c0012116 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012903:	83 c4 10             	add    esp,0x10
c0012906:	83 ec 04             	sub    esp,0x4
c0012909:	6a 00                	push   0x0
c001290b:	6a 00                	push   0x0
c001290d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012911:	e8 aa f9 ff ff       	call   c00122c0 <VgaText::setCursor(int, int)>
c0012916:	83 c4 10             	add    esp,0x10
c0012919:	83 ec 0c             	sub    esp,0xc
c001291c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012920:	e8 fd f9 ff ff       	call   c0012322 <VgaText::clearScreen()>
c0012925:	83 c4 10             	add    esp,0x10
c0012928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001292c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012934:	05 82 00 00 00       	add    eax,0x82
c0012939:	83 ec 04             	sub    esp,0x4
c001293c:	68 80 00 00 00       	push   0x80
c0012941:	6a 00                	push   0x0
c0012943:	50                   	push   eax
c0012944:	e8 a7 db fe ff       	call   c00004f0 <memset>
c0012949:	83 c4 10             	add    esp,0x10
c001294c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012950:	05 02 01 00 00       	add    eax,0x102
c0012955:	83 ec 04             	sub    esp,0x4
c0012958:	68 80 00 00 00       	push   0x80
c001295d:	6a 00                	push   0x0
c001295f:	50                   	push   eax
c0012960:	e8 8b db fe ff       	call   c00004f0 <memset>
c0012965:	83 c4 10             	add    esp,0x10
c0012968:	90                   	nop
c0012969:	83 c4 04             	add    esp,0x4
c001296c:	5b                   	pop    ebx
c001296d:	5e                   	pop    esi
c001296e:	c3                   	ret    
c001296f:	90                   	nop

c0012970 <VgaText::receiveKey(unsigned char)>:
c0012970:	55                   	push   ebp
c0012971:	57                   	push   edi
c0012972:	56                   	push   esi
c0012973:	53                   	push   ebx
c0012974:	83 ec 2c             	sub    esp,0x2c
c0012977:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001297b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001297f:	89 ef                	mov    edi,ebp
c0012981:	81 e7 ff 00 00 00    	and    edi,0xff
c0012987:	0f 84 66 01 00 00    	je     c0012af3 <VgaText::receiveKey(unsigned char)+0x183>
c001298d:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012993:	83 ff 08             	cmp    edi,0x8
c0012996:	75 73                	jne    c0012a0b <VgaText::receiveKey(unsigned char)+0x9b>
c0012998:	83 ec 0c             	sub    esp,0xc
c001299b:	56                   	push   esi
c001299c:	e8 cf db fe ff       	call   c0000570 <strlen>
c00129a1:	83 c4 10             	add    esp,0x10
c00129a4:	85 c0                	test   eax,eax
c00129a6:	0f 84 02 01 00 00    	je     c0012aae <VgaText::receiveKey(unsigned char)+0x13e>
c00129ac:	50                   	push   eax
c00129ad:	50                   	push   eax
c00129ae:	6a 08                	push   0x8
c00129b0:	53                   	push   ebx
c00129b1:	e8 30 fb ff ff       	call   c00124e6 <VgaText::putchar(char)>
c00129b6:	89 34 24             	mov    DWORD PTR [esp],esi
c00129b9:	e8 b2 db fe ff       	call   c0000570 <strlen>
c00129be:	83 c4 10             	add    esp,0x10
c00129c1:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00129c9:	83 fa 0d             	cmp    edx,0xd
c00129cc:	89 d0                	mov    eax,edx
c00129ce:	0f 95 c1             	setne  cl
c00129d1:	83 fa 1f             	cmp    edx,0x1f
c00129d4:	0f 9e c2             	setle  dl
c00129d7:	0f b6 d2             	movzx  edx,dl
c00129da:	85 ca                	test   edx,ecx
c00129dc:	74 17                	je     c00129f5 <VgaText::receiveKey(unsigned char)+0x85>
c00129de:	83 e8 08             	sub    eax,0x8
c00129e1:	3c 02                	cmp    al,0x2
c00129e3:	76 10                	jbe    c00129f5 <VgaText::receiveKey(unsigned char)+0x85>
c00129e5:	55                   	push   ebp
c00129e6:	55                   	push   ebp
c00129e7:	68 b7 82 02 c0       	push   0xc00282b7
c00129ec:	53                   	push   ebx
c00129ed:	e8 32 fc ff ff       	call   c0012624 <VgaText::puts(char const*)>
c00129f2:	83 c4 10             	add    esp,0x10
c00129f5:	83 ec 0c             	sub    esp,0xc
c00129f8:	56                   	push   esi
c00129f9:	e8 72 db fe ff       	call   c0000570 <strlen>
c00129fe:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012a06:	e9 a0 00 00 00       	jmp    c0012aab <VgaText::receiveKey(unsigned char)+0x13b>
c0012a0b:	83 ec 0c             	sub    esp,0xc
c0012a0e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012a14:	50                   	push   eax
c0012a15:	e8 56 db fe ff       	call   c0000570 <strlen>
c0012a1a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a21:	e8 4a db fe ff       	call   c0000570 <strlen>
c0012a26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012a2a:	83 c4 10             	add    esp,0x10
c0012a2d:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012a31:	3d 80 00 00 00       	cmp    eax,0x80
c0012a36:	0f 87 b7 00 00 00    	ja     c0012af3 <VgaText::receiveKey(unsigned char)+0x183>
c0012a3c:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012a3f:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012a42:	3c 1e                	cmp    al,0x1e
c0012a44:	0f 96 c0             	setbe  al
c0012a47:	80 fa 01             	cmp    dl,0x1
c0012a4a:	0f 97 c2             	seta   dl
c0012a4d:	0f b6 d2             	movzx  edx,dl
c0012a50:	85 c2                	test   edx,eax
c0012a52:	74 2e                	je     c0012a82 <VgaText::receiveKey(unsigned char)+0x112>
c0012a54:	83 ff 0d             	cmp    edi,0xd
c0012a57:	74 29                	je     c0012a82 <VgaText::receiveKey(unsigned char)+0x112>
c0012a59:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012a5c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012a5f:	68 bd 82 02 c0       	push   0xc00282bd
c0012a64:	53                   	push   ebx
c0012a65:	e8 2c fc ff ff       	call   c0012696 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012a6a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012a6d:	8d 45 40             	lea    eax,[ebp+0x40]
c0012a70:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012a73:	0f b6 c0             	movzx  eax,al
c0012a76:	50                   	push   eax
c0012a77:	53                   	push   ebx
c0012a78:	e8 99 f9 ff ff       	call   c0012416 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012a7d:	83 c4 20             	add    esp,0x20
c0012a80:	eb 11                	jmp    c0012a93 <VgaText::receiveKey(unsigned char)+0x123>
c0012a82:	89 e8                	mov    eax,ebp
c0012a84:	51                   	push   ecx
c0012a85:	0f be c0             	movsx  eax,al
c0012a88:	51                   	push   ecx
c0012a89:	50                   	push   eax
c0012a8a:	53                   	push   ebx
c0012a8b:	e8 56 fa ff ff       	call   c00124e6 <VgaText::putchar(char)>
c0012a90:	83 c4 10             	add    esp,0x10
c0012a93:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012a98:	89 e8                	mov    eax,ebp
c0012a9a:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012a9e:	52                   	push   edx
c0012a9f:	52                   	push   edx
c0012aa0:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012aa4:	50                   	push   eax
c0012aa5:	56                   	push   esi
c0012aa6:	e8 95 dd fe ff       	call   c0000840 <strcat>
c0012aab:	83 c4 10             	add    esp,0x10
c0012aae:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012ab4:	b0 01                	mov    al,0x1
c0012ab6:	83 ff 1c             	cmp    edi,0x1c
c0012ab9:	77 0e                	ja     c0012ac9 <VgaText::receiveKey(unsigned char)+0x159>
c0012abb:	b8 08 04 00 10       	mov    eax,0x10000408
c0012ac0:	89 f9                	mov    ecx,edi
c0012ac2:	d3 e8                	shr    eax,cl
c0012ac4:	f7 d0                	not    eax
c0012ac6:	83 e0 01             	and    eax,0x1
c0012ac9:	84 c0                	test   al,al
c0012acb:	74 04                	je     c0012ad1 <VgaText::receiveKey(unsigned char)+0x161>
c0012acd:	84 d2                	test   dl,dl
c0012acf:	74 22                	je     c0012af3 <VgaText::receiveKey(unsigned char)+0x183>
c0012ad1:	81 c3 02 01 00 00    	add    ebx,0x102
c0012ad7:	50                   	push   eax
c0012ad8:	50                   	push   eax
c0012ad9:	56                   	push   esi
c0012ada:	53                   	push   ebx
c0012adb:	e8 60 dd fe ff       	call   c0000840 <strcat>
c0012ae0:	83 c4 0c             	add    esp,0xc
c0012ae3:	68 80 00 00 00       	push   0x80
c0012ae8:	6a 00                	push   0x0
c0012aea:	56                   	push   esi
c0012aeb:	e8 00 da fe ff       	call   c00004f0 <memset>
c0012af0:	83 c4 10             	add    esp,0x10
c0012af3:	83 c4 2c             	add    esp,0x2c
c0012af6:	5b                   	pop    ebx
c0012af7:	5e                   	pop    esi
c0012af8:	5f                   	pop    edi
c0012af9:	5d                   	pop    ebp
c0012afa:	c3                   	ret    
c0012afb:	90                   	nop

c0012afc <VgaText::doUpdate()>:
c0012afc:	c3                   	ret    
c0012afd:	66 90                	xchg   ax,ax
c0012aff:	90                   	nop

c0012b00 <TSS::TSS()>:
c0012b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012b0b:	90                   	nop
c0012b0c:	c3                   	ret    
c0012b0d:	90                   	nop
c0012b0e:	66 90                	xchg   ax,ax

c0012b10 <TSS::setESP(unsigned long)>:
c0012b10:	55                   	push   ebp
c0012b11:	89 e5                	mov    ebp,esp
c0012b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b19:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012b1c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b1f:	90                   	nop
c0012b20:	5d                   	pop    ebp
c0012b21:	c3                   	ret    
c0012b22:	66 90                	xchg   ax,ax

c0012b24 <TSS::flush()>:
c0012b24:	55                   	push   ebp
c0012b25:	89 e5                	mov    ebp,esp
c0012b27:	83 ec 10             	sub    esp,0x10
c0012b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b2f:	83 c8 03             	or     eax,0x3
c0012b32:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012b36:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012b3a:	66 89 d0             	mov    ax,dx
c0012b3d:	0f 00 d8             	ltr    ax
c0012b40:	90                   	nop
c0012b41:	c9                   	leave  
c0012b42:	c3                   	ret    
c0012b43:	90                   	nop

c0012b44 <TSS::setup(unsigned long, unsigned long)>:
c0012b44:	55                   	push   ebp
c0012b45:	89 e5                	mov    ebp,esp
c0012b47:	83 ec 18             	sub    esp,0x18
c0012b4a:	83 ec 0c             	sub    esp,0xc
c0012b4d:	6a 68                	push   0x68
c0012b4f:	e8 0f cd ff ff       	call   c000f863 <malloc>
c0012b54:	83 c4 10             	add    esp,0x10
c0012b57:	89 c2                	mov    edx,eax
c0012b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b65:	83 ec 08             	sub    esp,0x8
c0012b68:	50                   	push   eax
c0012b69:	68 e0 82 02 c0       	push   0xc00282e0
c0012b6e:	e8 09 44 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012b73:	83 c4 10             	add    esp,0x10
c0012b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b7c:	83 ec 04             	sub    esp,0x4
c0012b7f:	6a 68                	push   0x68
c0012b81:	6a 00                	push   0x0
c0012b83:	50                   	push   eax
c0012b84:	e8 67 d9 fe ff       	call   c00004f0 <memset>
c0012b89:	83 c4 10             	add    esp,0x10
c0012b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b92:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b9e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012ba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ba7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012baa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012bad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012bb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bb6:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bc2:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bce:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012bd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bda:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012be0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012be3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012be6:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bf2:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bfe:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012c01:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c0a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012c0d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012c10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c16:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012c1d:	83 ec 0c             	sub    esp,0xc
c0012c20:	68 f7 82 02 c0       	push   0xc00282f7
c0012c25:	e8 52 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c2a:	83 c4 10             	add    esp,0x10
c0012c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c33:	0f 20 da             	mov    edx,cr3
c0012c36:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012c39:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012c3c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012c3f:	83 ec 0c             	sub    esp,0xc
c0012c42:	68 fa 82 02 c0       	push   0xc00282fa
c0012c47:	e8 30 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c4c:	83 c4 10             	add    esp,0x10
c0012c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c55:	83 ec 08             	sub    esp,0x8
c0012c58:	50                   	push   eax
c0012c59:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012c5c:	50                   	push   eax
c0012c5d:	e8 66 bc ff ff       	call   c000e8c8 <GDTEntry::setBase(unsigned int)>
c0012c62:	83 c4 10             	add    esp,0x10
c0012c65:	83 ec 08             	sub    esp,0x8
c0012c68:	6a 68                	push   0x68
c0012c6a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012c6d:	50                   	push   eax
c0012c6e:	e8 71 bc ff ff       	call   c000e8e4 <GDTEntry::setLimit(unsigned int)>
c0012c73:	83 c4 10             	add    esp,0x10
c0012c76:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012c7a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012c7d:	83 e0 0f             	and    eax,0xf
c0012c80:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012c83:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012c86:	83 c8 40             	or     eax,0x40
c0012c89:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012c8c:	83 ec 0c             	sub    esp,0xc
c0012c8f:	68 fd 82 02 c0       	push   0xc00282fd
c0012c94:	e8 e3 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c99:	83 c4 10             	add    esp,0x10
c0012c9c:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0012ca1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012ca7:	83 ec 08             	sub    esp,0x8
c0012caa:	50                   	push   eax
c0012cab:	68 00 83 02 c0       	push   0xc0028300
c0012cb0:	e8 c7 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0012cbd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012cc3:	05 64 01 00 00       	add    eax,0x164
c0012cc8:	83 ec 04             	sub    esp,0x4
c0012ccb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012cce:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012cd1:	50                   	push   eax
c0012cd2:	e8 41 bc ff ff       	call   c000e918 <GDT::addEntry(GDTEntry)>
c0012cd7:	83 c4 10             	add    esp,0x10
c0012cda:	89 c2                	mov    edx,eax
c0012cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cdf:	89 10                	mov    DWORD PTR [eax],edx
c0012ce1:	83 ec 0c             	sub    esp,0xc
c0012ce4:	68 15 83 02 c0       	push   0xc0028315
c0012ce9:	e8 8e 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012cee:	83 c4 10             	add    esp,0x10
c0012cf1:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0012cf6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012cfc:	05 64 01 00 00       	add    eax,0x164
c0012d01:	83 ec 0c             	sub    esp,0xc
c0012d04:	50                   	push   eax
c0012d05:	e8 38 bc ff ff       	call   c000e942 <GDT::flush()>
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	83 ec 0c             	sub    esp,0xc
c0012d10:	68 18 83 02 c0       	push   0xc0028318
c0012d15:	e8 62 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012d1a:	83 c4 10             	add    esp,0x10
c0012d1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d20:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d22:	c9                   	leave  
c0012d23:	c3                   	ret    

c0012d24 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012d2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d2f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012d34:	75 08                	jne    c0012d3e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012d36:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012d3c:	eb 38                	jmp    c0012d76 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012d3e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012d43:	75 17                	jne    c0012d5c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012d45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012d4d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d59:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012d5c:	89 c1                	mov    ecx,eax
c0012d5e:	83 e1 fd             	and    ecx,0xfffffffd
c0012d61:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012d67:	74 cd                	je     c0012d36 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012d69:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012d6e:	83 e0 ef             	and    eax,0xffffffef
c0012d71:	83 f8 08             	cmp    eax,0x8
c0012d74:	76 c0                	jbe    c0012d36 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012d76:	31 c0                	xor    eax,eax
c0012d78:	c3                   	ret    
c0012d79:	90                   	nop

c0012d7a <ReservedFilename::isAtty()>:
c0012d7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d7e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012d81:	31 c0                	xor    eax,eax
c0012d83:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012d89:	74 09                	je     c0012d94 <ReservedFilename::isAtty()+0x1a>
c0012d8b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012d91:	0f 94 c0             	sete   al
c0012d94:	c3                   	ret    
c0012d95:	90                   	nop

c0012d96 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012d96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012da1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012da5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012daa:	75 08                	jne    c0012db4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012dac:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012db2:	eb 3d                	jmp    c0012df1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012db4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012db9:	75 17                	jne    c0012dd2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012dbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dc0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012dc3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012dc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012dcf:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012dd2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012dd7:	75 04                	jne    c0012ddd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012dd9:	89 0a                	mov    DWORD PTR [edx],ecx
c0012ddb:	eb 14                	jmp    c0012df1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012ddd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012de2:	74 c8                	je     c0012dac <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012de4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012de9:	83 e0 ef             	and    eax,0xffffffef
c0012dec:	83 f8 08             	cmp    eax,0x8
c0012def:	76 bb                	jbe    c0012dac <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012df1:	31 c0                	xor    eax,eax
c0012df3:	c3                   	ret    

c0012df4 <UnixFile::getFileDescriptor()>:
c0012df4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012df8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dfb:	c3                   	ret    

c0012dfc <UnixFile::UnixFile(int)>:
c0012dfc:	53                   	push   ebx
c0012dfd:	83 ec 28             	sub    esp,0x28
c0012e00:	ba 44 83 02 c0       	mov    edx,0xc0028344
c0012e05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e09:	89 10                	mov    DWORD PTR [eax],edx
c0012e0b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012e13:	0f 8f 90 01 00 00    	jg     c0012fa9 <UnixFile::UnixFile(int)+0x1ad>
c0012e19:	a1 e0 b5 02 c0       	mov    eax,ds:0xc002b5e0
c0012e1e:	8d 50 01             	lea    edx,[eax+0x1]
c0012e21:	89 15 e0 b5 02 c0    	mov    DWORD PTR ds:0xc002b5e0,edx
c0012e27:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012e2b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012e2e:	83 ec 08             	sub    esp,0x8
c0012e31:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e35:	68 78 12 03 c0       	push   0xc0031278
c0012e3a:	e8 47 30 01 00       	call   c0025e86 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012e3f:	83 c4 10             	add    esp,0x10
c0012e42:	a0 74 12 03 c0       	mov    al,ds:0xc0031274
c0012e47:	83 f0 01             	xor    eax,0x1
c0012e4a:	0f b6 c0             	movzx  eax,al
c0012e4d:	85 c0                	test   eax,eax
c0012e4f:	0f 84 55 01 00 00    	je     c0012faa <UnixFile::UnixFile(int)+0x1ae>
c0012e55:	c6 05 74 12 03 c0 01 	mov    BYTE PTR ds:0xc0031274,0x1
c0012e5c:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012e64:	83 ec 0c             	sub    esp,0xc
c0012e67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e6b:	e8 f3 c9 ff ff       	call   c000f863 <malloc>
c0012e70:	83 c4 10             	add    esp,0x10
c0012e73:	89 c3                	mov    ebx,eax
c0012e75:	83 ec 08             	sub    esp,0x8
c0012e78:	68 03 ff ff 0f       	push   0xfffff03
c0012e7d:	53                   	push   ebx
c0012e7e:	e8 2d 01 00 00       	call   c0012fb0 <ReservedFilename::ReservedFilename(int)>
c0012e83:	83 c4 10             	add    esp,0x10
c0012e86:	89 1d 6c 12 03 c0    	mov    DWORD PTR ds:0xc003126c,ebx
c0012e8c:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012e94:	83 ec 0c             	sub    esp,0xc
c0012e97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e9b:	e8 c3 c9 ff ff       	call   c000f863 <malloc>
c0012ea0:	83 c4 10             	add    esp,0x10
c0012ea3:	89 c3                	mov    ebx,eax
c0012ea5:	83 ec 08             	sub    esp,0x8
c0012ea8:	68 01 ff ff 0f       	push   0xfffff01
c0012ead:	53                   	push   ebx
c0012eae:	e8 fd 00 00 00       	call   c0012fb0 <ReservedFilename::ReservedFilename(int)>
c0012eb3:	83 c4 10             	add    esp,0x10
c0012eb6:	89 1d 70 12 03 c0    	mov    DWORD PTR ds:0xc0031270,ebx
c0012ebc:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012ec4:	83 ec 0c             	sub    esp,0xc
c0012ec7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ecb:	e8 93 c9 ff ff       	call   c000f863 <malloc>
c0012ed0:	83 c4 10             	add    esp,0x10
c0012ed3:	89 c3                	mov    ebx,eax
c0012ed5:	83 ec 08             	sub    esp,0x8
c0012ed8:	68 00 ff ff 0f       	push   0xfffff00
c0012edd:	53                   	push   ebx
c0012ede:	e8 cd 00 00 00       	call   c0012fb0 <ReservedFilename::ReservedFilename(int)>
c0012ee3:	83 c4 10             	add    esp,0x10
c0012ee6:	89 1d 64 12 03 c0    	mov    DWORD PTR ds:0xc0031264,ebx
c0012eec:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012ef4:	83 ec 0c             	sub    esp,0xc
c0012ef7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012efb:	e8 63 c9 ff ff       	call   c000f863 <malloc>
c0012f00:	83 c4 10             	add    esp,0x10
c0012f03:	89 c3                	mov    ebx,eax
c0012f05:	83 ec 08             	sub    esp,0x8
c0012f08:	68 02 ff ff 0f       	push   0xfffff02
c0012f0d:	53                   	push   ebx
c0012f0e:	e8 9d 00 00 00       	call   c0012fb0 <ReservedFilename::ReservedFilename(int)>
c0012f13:	83 c4 10             	add    esp,0x10
c0012f16:	89 1d 68 12 03 c0    	mov    DWORD PTR ds:0xc0031268,ebx
c0012f1c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012f24:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012f29:	7f 7f                	jg     c0012faa <UnixFile::UnixFile(int)+0x1ae>
c0012f2b:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012f33:	83 ec 0c             	sub    esp,0xc
c0012f36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012f3a:	e8 24 c9 ff ff       	call   c000f863 <malloc>
c0012f3f:	83 c4 10             	add    esp,0x10
c0012f42:	89 c3                	mov    ebx,eax
c0012f44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f48:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012f4d:	83 ec 08             	sub    esp,0x8
c0012f50:	50                   	push   eax
c0012f51:	53                   	push   ebx
c0012f52:	e8 59 00 00 00       	call   c0012fb0 <ReservedFilename::ReservedFilename(int)>
c0012f57:	83 c4 10             	add    esp,0x10
c0012f5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f5e:	89 1c 85 40 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcedc0],ebx
c0012f65:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012f6d:	83 ec 0c             	sub    esp,0xc
c0012f70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f74:	e8 ea c8 ff ff       	call   c000f863 <malloc>
c0012f79:	83 c4 10             	add    esp,0x10
c0012f7c:	89 c3                	mov    ebx,eax
c0012f7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f82:	05 20 ff ff 0f       	add    eax,0xfffff20
c0012f87:	83 ec 08             	sub    esp,0x8
c0012f8a:	50                   	push   eax
c0012f8b:	53                   	push   ebx
c0012f8c:	e8 1f 00 00 00       	call   c0012fb0 <ReservedFilename::ReservedFilename(int)>
c0012f91:	83 c4 10             	add    esp,0x10
c0012f94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f98:	89 1c 85 00 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee00],ebx
c0012f9f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012fa4:	e9 7b ff ff ff       	jmp    c0012f24 <UnixFile::UnixFile(int)+0x128>
c0012fa9:	90                   	nop
c0012faa:	83 c4 28             	add    esp,0x28
c0012fad:	5b                   	pop    ebx
c0012fae:	c3                   	ret    
c0012faf:	90                   	nop

c0012fb0 <ReservedFilename::ReservedFilename(int)>:
c0012fb0:	83 ec 0c             	sub    esp,0xc
c0012fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb7:	83 ec 08             	sub    esp,0x8
c0012fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fbe:	50                   	push   eax
c0012fbf:	e8 38 fe ff ff       	call   c0012dfc <UnixFile::UnixFile(int)>
c0012fc4:	83 c4 10             	add    esp,0x10
c0012fc7:	ba 60 83 02 c0       	mov    edx,0xc0028360
c0012fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd0:	89 10                	mov    DWORD PTR [eax],edx
c0012fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012fdd:	90                   	nop
c0012fde:	83 c4 0c             	add    esp,0xc
c0012fe1:	c3                   	ret    

c0012fe2 <UnixFile::~UnixFile()>:
c0012fe2:	83 ec 1c             	sub    esp,0x1c
c0012fe5:	ba 44 83 02 c0       	mov    edx,0xc0028344
c0012fea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fee:	89 10                	mov    DWORD PTR [eax],edx
c0012ff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ff4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ff7:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0012ffc:	7f 76                	jg     c0013074 <UnixFile::~UnixFile()+0x92>
c0012ffe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013006:	83 ec 0c             	sub    esp,0xc
c0013009:	68 78 12 03 c0       	push   0xc0031278
c001300e:	e8 47 2f 01 00       	call   c0025f5a <LinkedList<UnixFile>::getFirstElement()>
c0013013:	83 c4 10             	add    esp,0x10
c0013016:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001301a:	83 ec 0c             	sub    esp,0xc
c001301d:	68 78 12 03 c0       	push   0xc0031278
c0013022:	e8 3b 2f 01 00       	call   c0025f62 <LinkedList<UnixFile>::removeFirst()>
c0013027:	83 c4 10             	add    esp,0x10
c001302a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001302e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0013032:	74 43                	je     c0013077 <UnixFile::~UnixFile()+0x95>
c0013034:	83 ec 08             	sub    esp,0x8
c0013037:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001303b:	68 78 12 03 c0       	push   0xc0031278
c0013040:	e8 41 2e 01 00       	call   c0025e86 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013045:	83 c4 10             	add    esp,0x10
c0013048:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001304c:	8d 50 01             	lea    edx,[eax+0x1]
c001304f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013053:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013058:	0f 94 c0             	sete   al
c001305b:	0f b6 c0             	movzx  eax,al
c001305e:	85 c0                	test   eax,eax
c0013060:	74 a4                	je     c0013006 <UnixFile::~UnixFile()+0x24>
c0013062:	83 ec 0c             	sub    esp,0xc
c0013065:	68 1c 83 02 c0       	push   0xc002831c
c001306a:	e8 49 cc ff ff       	call   c000fcb8 <KePanic(char const*)>
c001306f:	83 c4 10             	add    esp,0x10
c0013072:	eb 92                	jmp    c0013006 <UnixFile::~UnixFile()+0x24>
c0013074:	90                   	nop
c0013075:	eb 01                	jmp    c0013078 <UnixFile::~UnixFile()+0x96>
c0013077:	90                   	nop
c0013078:	90                   	nop
c0013079:	83 c4 1c             	add    esp,0x1c
c001307c:	c3                   	ret    
c001307d:	90                   	nop

c001307e <UnixFile::~UnixFile()>:
c001307e:	83 ec 0c             	sub    esp,0xc
c0013081:	83 ec 0c             	sub    esp,0xc
c0013084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013088:	e8 55 ff ff ff       	call   c0012fe2 <UnixFile::~UnixFile()>
c001308d:	83 c4 10             	add    esp,0x10
c0013090:	83 ec 08             	sub    esp,0x8
c0013093:	6a 0c                	push   0xc
c0013095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013099:	e8 de a2 ff ff       	call   c000d37c <operator delete(void*, unsigned long)>
c001309e:	83 c4 10             	add    esp,0x10
c00130a1:	83 c4 0c             	add    esp,0xc
c00130a4:	c3                   	ret    
c00130a5:	90                   	nop

c00130a6 <ReservedFilename::~ReservedFilename()>:
c00130a6:	83 ec 0c             	sub    esp,0xc
c00130a9:	ba 60 83 02 c0       	mov    edx,0xc0028360
c00130ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b2:	89 10                	mov    DWORD PTR [eax],edx
c00130b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b8:	83 ec 0c             	sub    esp,0xc
c00130bb:	50                   	push   eax
c00130bc:	e8 21 ff ff ff       	call   c0012fe2 <UnixFile::~UnixFile()>
c00130c1:	83 c4 10             	add    esp,0x10
c00130c4:	90                   	nop
c00130c5:	83 c4 0c             	add    esp,0xc
c00130c8:	c3                   	ret    
c00130c9:	90                   	nop

c00130ca <ReservedFilename::~ReservedFilename()>:
c00130ca:	83 ec 0c             	sub    esp,0xc
c00130cd:	83 ec 0c             	sub    esp,0xc
c00130d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d4:	e8 cd ff ff ff       	call   c00130a6 <ReservedFilename::~ReservedFilename()>
c00130d9:	83 c4 10             	add    esp,0x10
c00130dc:	83 ec 08             	sub    esp,0x8
c00130df:	6a 0c                	push   0xc
c00130e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e5:	e8 92 a2 ff ff       	call   c000d37c <operator delete(void*, unsigned long)>
c00130ea:	83 c4 10             	add    esp,0x10
c00130ed:	83 c4 0c             	add    esp,0xc
c00130f0:	c3                   	ret    

c00130f1 <KeGetFileFromDescriptor(int)>:
c00130f1:	53                   	push   ebx
c00130f2:	83 ec 08             	sub    esp,0x8
c00130f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130f9:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00130ff:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0013105:	7f 30                	jg     c0013137 <KeGetFileFromDescriptor(int)+0x46>
c0013107:	83 ec 0c             	sub    esp,0xc
c001310a:	68 78 12 03 c0       	push   0xc0031278
c001310f:	e8 46 2e 01 00       	call   c0025f5a <LinkedList<UnixFile>::getFirstElement()>
c0013114:	83 c4 10             	add    esp,0x10
c0013117:	8d 50 ff             	lea    edx,[eax-0x1]
c001311a:	83 fa fd             	cmp    edx,0xfffffffd
c001311d:	76 04                	jbe    c0013123 <KeGetFileFromDescriptor(int)+0x32>
c001311f:	31 c0                	xor    eax,eax
c0013121:	eb 6e                	jmp    c0013191 <KeGetFileFromDescriptor(int)+0xa0>
c0013123:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0013126:	74 69                	je     c0013191 <KeGetFileFromDescriptor(int)+0xa0>
c0013128:	52                   	push   edx
c0013129:	52                   	push   edx
c001312a:	50                   	push   eax
c001312b:	68 78 12 03 c0       	push   0xc0031278
c0013130:	e8 cf 2e 01 00       	call   c0026004 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0013135:	eb dd                	jmp    c0013114 <KeGetFileFromDescriptor(int)+0x23>
c0013137:	a1 6c 12 03 c0       	mov    eax,ds:0xc003126c
c001313c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0013142:	74 4d                	je     c0013191 <KeGetFileFromDescriptor(int)+0xa0>
c0013144:	a1 70 12 03 c0       	mov    eax,ds:0xc0031270
c0013149:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001314f:	74 40                	je     c0013191 <KeGetFileFromDescriptor(int)+0xa0>
c0013151:	a1 68 12 03 c0       	mov    eax,ds:0xc0031268
c0013156:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001315c:	74 33                	je     c0013191 <KeGetFileFromDescriptor(int)+0xa0>
c001315e:	a1 64 12 03 c0       	mov    eax,ds:0xc0031264
c0013163:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013169:	74 26                	je     c0013191 <KeGetFileFromDescriptor(int)+0xa0>
c001316b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013171:	83 f8 08             	cmp    eax,0x8
c0013174:	77 09                	ja     c001317f <KeGetFileFromDescriptor(int)+0x8e>
c0013176:	8b 04 85 40 12 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcedc0]
c001317d:	eb 12                	jmp    c0013191 <KeGetFileFromDescriptor(int)+0xa0>
c001317f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0013185:	83 fb 08             	cmp    ebx,0x8
c0013188:	77 95                	ja     c001311f <KeGetFileFromDescriptor(int)+0x2e>
c001318a:	8b 04 9d 00 12 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcee00]
c0013191:	83 c4 08             	add    esp,0x8
c0013194:	5b                   	pop    ebx
c0013195:	c3                   	ret    

c0013196 <__static_initialization_and_destruction_0(int, int)>:
c0013196:	83 ec 0c             	sub    esp,0xc
c0013199:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001319e:	75 34                	jne    c00131d4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00131a0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00131a8:	75 2a                	jne    c00131d4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00131aa:	83 ec 0c             	sub    esp,0xc
c00131ad:	68 78 12 03 c0       	push   0xc0031278
c00131b2:	e8 8d 2c 01 00       	call   c0025e44 <LinkedList<UnixFile>::LinkedList()>
c00131b7:	83 c4 10             	add    esp,0x10
c00131ba:	83 ec 04             	sub    esp,0x4
c00131bd:	68 c0 ad 02 c0       	push   0xc002adc0
c00131c2:	68 78 12 03 c0       	push   0xc0031278
c00131c7:	68 42 5e 02 c0       	push   0xc0025e42
c00131cc:	e8 5b a1 ff ff       	call   c000d32c <__cxa_atexit>
c00131d1:	83 c4 10             	add    esp,0x10
c00131d4:	90                   	nop
c00131d5:	83 c4 0c             	add    esp,0xc
c00131d8:	c3                   	ret    

c00131d9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00131d9:	83 ec 0c             	sub    esp,0xc
c00131dc:	83 ec 08             	sub    esp,0x8
c00131df:	68 ff ff 00 00       	push   0xffff
c00131e4:	6a 01                	push   0x1
c00131e6:	e8 ab ff ff ff       	call   c0013196 <__static_initialization_and_destruction_0(int, int)>
c00131eb:	83 c4 10             	add    esp,0x10
c00131ee:	83 c4 0c             	add    esp,0xc
c00131f1:	c3                   	ret    

c00131f2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00131f2:	53                   	push   ebx
c00131f3:	8b 15 e8 b5 02 c0    	mov    edx,DWORD PTR ds:0xc002b5e8
c00131f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00131fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013201:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013207:	89 d8                	mov    eax,ebx
c0013209:	d1 e8                	shr    eax,1
c001320b:	01 d0                	add    eax,edx
c001320d:	80 e3 01             	and    bl,0x1
c0013210:	8a 10                	mov    dl,BYTE PTR [eax]
c0013212:	75 09                	jne    c001321d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013214:	83 e2 f0             	and    edx,0xfffffff0
c0013217:	09 ca                	or     edx,ecx
c0013219:	88 10                	mov    BYTE PTR [eax],dl
c001321b:	5b                   	pop    ebx
c001321c:	c3                   	ret    
c001321d:	83 e2 0f             	and    edx,0xf
c0013220:	0f b6 c9             	movzx  ecx,cl
c0013223:	c1 e1 04             	shl    ecx,0x4
c0013226:	09 ca                	or     edx,ecx
c0013228:	88 10                	mov    BYTE PTR [eax],dl
c001322a:	5b                   	pop    ebx
c001322b:	c3                   	ret    

c001322c <Virt::getPageState(unsigned long)>:
c001322c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013230:	8b 0d e8 b5 02 c0    	mov    ecx,DWORD PTR ds:0xc002b5e8
c0013236:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001323c:	89 d0                	mov    eax,edx
c001323e:	d1 e8                	shr    eax,1
c0013240:	80 e2 01             	and    dl,0x1
c0013243:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0013246:	74 03                	je     c001324b <Virt::getPageState(unsigned long)+0x1f>
c0013248:	c1 e8 04             	shr    eax,0x4
c001324b:	83 e0 0f             	and    eax,0xf
c001324e:	c3                   	ret    

c001324f <Virt::allocateKernelVirtualPages(int)>:
c001324f:	55                   	push   ebp
c0013250:	31 ed                	xor    ebp,ebp
c0013252:	57                   	push   edi
c0013253:	31 ff                	xor    edi,edi
c0013255:	56                   	push   esi
c0013256:	53                   	push   ebx
c0013257:	31 db                	xor    ebx,ebx
c0013259:	83 ec 0c             	sub    esp,0xc
c001325c:	8b 35 e4 b5 02 c0    	mov    esi,DWORD PTR ds:0xc002b5e4
c0013262:	56                   	push   esi
c0013263:	e8 c4 ff ff ff       	call   c001322c <Virt::getPageState(unsigned long)>
c0013268:	5a                   	pop    edx
c0013269:	84 c0                	test   al,al
c001326b:	75 41                	jne    c00132ae <Virt::allocateKernelVirtualPages(int)+0x5f>
c001326d:	85 db                	test   ebx,ebx
c001326f:	75 02                	jne    c0013273 <Virt::allocateKernelVirtualPages(int)+0x24>
c0013271:	89 f5                	mov    ebp,esi
c0013273:	83 c3 01             	add    ebx,0x1
c0013276:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001327a:	74 5f                	je     c00132db <Virt::allocateKernelVirtualPages(int)+0x8c>
c001327c:	83 c6 01             	add    esi,0x1
c001327f:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013285:	76 34                	jbe    c00132bb <Virt::allocateKernelVirtualPages(int)+0x6c>
c0013287:	c7 05 e4 b5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b5e4,0xc8000
c0013291:	f7 c7 01 00 00 00    	test   edi,0x1
c0013297:	75 2a                	jne    c00132c3 <Virt::allocateKernelVirtualPages(int)+0x74>
c0013299:	be 00 80 0c 00       	mov    esi,0xc8000
c001329e:	bf 01 00 00 00       	mov    edi,0x1
c00132a3:	56                   	push   esi
c00132a4:	e8 83 ff ff ff       	call   c001322c <Virt::getPageState(unsigned long)>
c00132a9:	5a                   	pop    edx
c00132aa:	84 c0                	test   al,al
c00132ac:	74 bf                	je     c001326d <Virt::allocateKernelVirtualPages(int)+0x1e>
c00132ae:	31 db                	xor    ebx,ebx
c00132b0:	83 c6 01             	add    esi,0x1
c00132b3:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00132b9:	77 cc                	ja     c0013287 <Virt::allocateKernelVirtualPages(int)+0x38>
c00132bb:	89 35 e4 b5 02 c0    	mov    DWORD PTR ds:0xc002b5e4,esi
c00132c1:	eb 9f                	jmp    c0013262 <Virt::allocateKernelVirtualPages(int)+0x13>
c00132c3:	83 ec 0c             	sub    esp,0xc
c00132c6:	68 74 83 02 c0       	push   0xc0028374
c00132cb:	e8 e8 c9 ff ff       	call   c000fcb8 <KePanic(char const*)>
c00132d0:	8b 35 e4 b5 02 c0    	mov    esi,DWORD PTR ds:0xc002b5e4
c00132d6:	83 c4 10             	add    esp,0x10
c00132d9:	eb 87                	jmp    c0013262 <Virt::allocateKernelVirtualPages(int)+0x13>
c00132db:	89 2d e4 b5 02 c0    	mov    DWORD PTR ds:0xc002b5e4,ebp
c00132e1:	83 fb 01             	cmp    ebx,0x1
c00132e4:	74 6f                	je     c0013355 <Virt::allocateKernelVirtualPages(int)+0x106>
c00132e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132ea:	85 c9                	test   ecx,ecx
c00132ec:	74 49                	je     c0013337 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00132ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132f2:	89 e8                	mov    eax,ebp
c00132f4:	31 db                	xor    ebx,ebx
c00132f6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00132f9:	eb 18                	jmp    c0013313 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00132fb:	6a 01                	push   0x1
c00132fd:	83 c3 01             	add    ebx,0x1
c0013300:	50                   	push   eax
c0013301:	e8 ec fe ff ff       	call   c00131f2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013306:	58                   	pop    eax
c0013307:	5a                   	pop    edx
c0013308:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001330c:	74 29                	je     c0013337 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001330e:	a1 e4 b5 02 c0       	mov    eax,ds:0xc002b5e4
c0013313:	8d 50 01             	lea    edx,[eax+0x1]
c0013316:	85 db                	test   ebx,ebx
c0013318:	89 15 e4 b5 02 c0    	mov    DWORD PTR ds:0xc002b5e4,edx
c001331e:	74 24                	je     c0013344 <Virt::allocateKernelVirtualPages(int)+0xf5>
c0013320:	39 df                	cmp    edi,ebx
c0013322:	75 d7                	jne    c00132fb <Virt::allocateKernelVirtualPages(int)+0xac>
c0013324:	6a 03                	push   0x3
c0013326:	83 c3 01             	add    ebx,0x1
c0013329:	50                   	push   eax
c001332a:	e8 c3 fe ff ff       	call   c00131f2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001332f:	59                   	pop    ecx
c0013330:	5e                   	pop    esi
c0013331:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013335:	75 d7                	jne    c001330e <Virt::allocateKernelVirtualPages(int)+0xbf>
c0013337:	83 c4 0c             	add    esp,0xc
c001333a:	89 e8                	mov    eax,ebp
c001333c:	5b                   	pop    ebx
c001333d:	c1 e0 0c             	shl    eax,0xc
c0013340:	5e                   	pop    esi
c0013341:	5f                   	pop    edi
c0013342:	5d                   	pop    ebp
c0013343:	c3                   	ret    
c0013344:	6a 02                	push   0x2
c0013346:	bb 01 00 00 00       	mov    ebx,0x1
c001334b:	50                   	push   eax
c001334c:	e8 a1 fe ff ff       	call   c00131f2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013351:	58                   	pop    eax
c0013352:	5a                   	pop    edx
c0013353:	eb b9                	jmp    c001330e <Virt::allocateKernelVirtualPages(int)+0xbf>
c0013355:	6a 04                	push   0x4
c0013357:	8d 45 01             	lea    eax,[ebp+0x1]
c001335a:	55                   	push   ebp
c001335b:	a3 e4 b5 02 c0       	mov    ds:0xc002b5e4,eax
c0013360:	e8 8d fe ff ff       	call   c00131f2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013365:	5b                   	pop    ebx
c0013366:	89 e8                	mov    eax,ebp
c0013368:	5e                   	pop    esi
c0013369:	c1 e0 0c             	shl    eax,0xc
c001336c:	83 c4 0c             	add    esp,0xc
c001336f:	5b                   	pop    ebx
c0013370:	5e                   	pop    esi
c0013371:	5f                   	pop    edi
c0013372:	5d                   	pop    ebp
c0013373:	c3                   	ret    

c0013374 <Virt::freeSwapfilePage(unsigned long)>:
c0013374:	53                   	push   ebx
c0013375:	8b 15 8c 12 03 c0    	mov    edx,DWORD PTR ds:0xc003128c
c001337b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001337f:	b8 01 00 00 00       	mov    eax,0x1
c0013384:	89 cb                	mov    ebx,ecx
c0013386:	d3 e0                	shl    eax,cl
c0013388:	c1 eb 05             	shr    ebx,0x5
c001338b:	f7 d0                	not    eax
c001338d:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013390:	21 c1                	and    ecx,eax
c0013392:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013395:	5b                   	pop    ebx
c0013396:	c3                   	ret    

c0013397 <Virt::swapIDToSector(unsigned long)>:
c0013397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001339b:	8b 15 ec b5 02 c0    	mov    edx,DWORD PTR ds:0xc002b5ec
c00133a1:	8b 0d f4 b5 02 c0    	mov    ecx,DWORD PTR ds:0xc002b5f4
c00133a7:	0f af c2             	imul   eax,edx
c00133aa:	01 c8                	add    eax,ecx
c00133ac:	c3                   	ret    

c00133ad <Virt::allocateSwapfilePage()>:
c00133ad:	55                   	push   ebp
c00133ae:	31 d2                	xor    edx,edx
c00133b0:	57                   	push   edi
c00133b1:	56                   	push   esi
c00133b2:	53                   	push   ebx
c00133b3:	83 ec 0c             	sub    esp,0xc
c00133b6:	8b 0d ec b5 02 c0    	mov    ecx,DWORD PTR ds:0xc002b5ec
c00133bc:	a1 f0 b5 02 c0       	mov    eax,ds:0xc002b5f0
c00133c1:	f7 f1                	div    ecx
c00133c3:	39 0d f0 b5 02 c0    	cmp    DWORD PTR ds:0xc002b5f0,ecx
c00133c9:	72 2f                	jb     c00133fa <Virt::allocateSwapfilePage()+0x4d>
c00133cb:	8b 35 8c 12 03 c0    	mov    esi,DWORD PTR ds:0xc003128c
c00133d1:	8b 16                	mov    edx,DWORD PTR [esi]
c00133d3:	f6 c2 01             	test   dl,0x1
c00133d6:	74 3e                	je     c0013416 <Virt::allocateSwapfilePage()+0x69>
c00133d8:	31 c9                	xor    ecx,ecx
c00133da:	bf 01 00 00 00       	mov    edi,0x1
c00133df:	eb 12                	jmp    c00133f3 <Virt::allocateSwapfilePage()+0x46>
c00133e1:	89 fd                	mov    ebp,edi
c00133e3:	89 ca                	mov    edx,ecx
c00133e5:	d3 e5                	shl    ebp,cl
c00133e7:	c1 ea 05             	shr    edx,0x5
c00133ea:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00133ed:	8b 13                	mov    edx,DWORD PTR [ebx]
c00133ef:	85 ea                	test   edx,ebp
c00133f1:	74 2c                	je     c001341f <Virt::allocateSwapfilePage()+0x72>
c00133f3:	83 c1 01             	add    ecx,0x1
c00133f6:	39 c8                	cmp    eax,ecx
c00133f8:	77 e7                	ja     c00133e1 <Virt::allocateSwapfilePage()+0x34>
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	68 87 86 02 c0       	push   0xc0028687
c0013402:	e8 b1 c8 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0013407:	83 c4 10             	add    esp,0x10
c001340a:	31 c9                	xor    ecx,ecx
c001340c:	83 c4 0c             	add    esp,0xc
c001340f:	89 c8                	mov    eax,ecx
c0013411:	5b                   	pop    ebx
c0013412:	5e                   	pop    esi
c0013413:	5f                   	pop    edi
c0013414:	5d                   	pop    ebp
c0013415:	c3                   	ret    
c0013416:	89 f3                	mov    ebx,esi
c0013418:	bd 01 00 00 00       	mov    ebp,0x1
c001341d:	31 c9                	xor    ecx,ecx
c001341f:	09 ea                	or     edx,ebp
c0013421:	89 c8                	mov    eax,ecx
c0013423:	89 13                	mov    DWORD PTR [ebx],edx
c0013425:	83 c4 0c             	add    esp,0xc
c0013428:	5b                   	pop    ebx
c0013429:	5e                   	pop    esi
c001342a:	5f                   	pop    edi
c001342b:	5d                   	pop    ebp
c001342c:	c3                   	ret    

c001342d <Virt::virtualMemorySetup()>:
c001342d:	53                   	push   ebx
c001342e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013433:	6a 0f                	push   0xf
c0013435:	53                   	push   ebx
c0013436:	83 c3 01             	add    ebx,0x1
c0013439:	e8 b4 fd ff ff       	call   c00131f2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001343e:	58                   	pop    eax
c001343f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013445:	5a                   	pop    edx
c0013446:	75 eb                	jne    c0013433 <Virt::virtualMemorySetup()+0x6>
c0013448:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001344d:	6a 00                	push   0x0
c001344f:	53                   	push   ebx
c0013450:	83 c3 01             	add    ebx,0x1
c0013453:	e8 9a fd ff ff       	call   c00131f2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013458:	59                   	pop    ecx
c0013459:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001345f:	58                   	pop    eax
c0013460:	75 eb                	jne    c001344d <Virt::virtualMemorySetup()+0x20>
c0013462:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013467:	6a 0f                	push   0xf
c0013469:	53                   	push   ebx
c001346a:	83 c3 01             	add    ebx,0x1
c001346d:	e8 80 fd ff ff       	call   c00131f2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013472:	58                   	pop    eax
c0013473:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013479:	5a                   	pop    edx
c001347a:	75 eb                	jne    c0013467 <Virt::virtualMemorySetup()+0x3a>
c001347c:	5b                   	pop    ebx
c001347d:	c3                   	ret    

c001347e <Virt::setupPageSwapping(int)>:
c001347e:	53                   	push   ebx
c001347f:	83 ec 0c             	sub    esp,0xc
c0013482:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013486:	a1 e8 0a 03 c0       	mov    eax,ds:0xc0030ae8
c001348b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013491:	8b 10                	mov    edx,DWORD PTR [eax]
c0013493:	53                   	push   ebx
c0013494:	c1 e3 0b             	shl    ebx,0xb
c0013497:	68 9e 86 02 c0       	push   0xc002869e
c001349c:	50                   	push   eax
c001349d:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00134a0:	89 1d f0 b5 02 c0    	mov    DWORD PTR ds:0xc002b5f0,ebx
c00134a6:	c6 05 f8 b5 02 c0 43 	mov    BYTE PTR ds:0xc002b5f8,0x43
c00134ad:	c1 eb 08             	shr    ebx,0x8
c00134b0:	a3 f4 b5 02 c0       	mov    ds:0xc002b5f4,eax
c00134b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134b8:	c7 05 ec b5 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002b5ec,0x8
c00134c2:	e8 9c c3 ff ff       	call   c000f863 <malloc>
c00134c7:	83 c4 0c             	add    esp,0xc
c00134ca:	89 c1                	mov    ecx,eax
c00134cc:	a3 8c 12 03 c0       	mov    ds:0xc003128c,eax
c00134d1:	31 d2                	xor    edx,edx
c00134d3:	a1 f0 b5 02 c0       	mov    eax,ds:0xc002b5f0
c00134d8:	f7 35 ec b5 02 c0    	div    DWORD PTR ds:0xc002b5ec
c00134de:	c1 e8 05             	shr    eax,0x5
c00134e1:	50                   	push   eax
c00134e2:	6a 00                	push   0x0
c00134e4:	51                   	push   ecx
c00134e5:	e8 06 d0 fe ff       	call   c00004f0 <memset>
c00134ea:	83 c4 18             	add    esp,0x18
c00134ed:	5b                   	pop    ebx
c00134ee:	c3                   	ret    
c00134ef:	90                   	nop

c00134f0 <VAS::setCPUSpecific(unsigned long)>:
c00134f0:	c3                   	ret    
c00134f1:	90                   	nop

c00134f2 <VAS::VAS(VAS*)>:
c00134f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00134fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013501:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013508:	90                   	nop
c0013509:	c3                   	ret    

c001350a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001350a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001350e:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0013513:	89 c2                	mov    edx,eax
c0013515:	c1 e8 0a             	shr    eax,0xa
c0013518:	c1 ea 16             	shr    edx,0x16
c001351b:	83 f9 01             	cmp    ecx,0x1
c001351e:	19 c9                	sbb    ecx,ecx
c0013520:	c1 e2 0c             	shl    edx,0xc
c0013523:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013529:	25 fc 0f 00 00       	and    eax,0xffc
c001352e:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0013535:	01 d0                	add    eax,edx
c0013537:	c3                   	ret    

c0013538 <VAS::getPageTableEntry(unsigned long)>:
c0013538:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001353c:	89 ca                	mov    edx,ecx
c001353e:	c1 e9 0a             	shr    ecx,0xa
c0013541:	c1 ea 16             	shr    edx,0x16
c0013544:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001354a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013550:	c1 e0 0c             	shl    eax,0xc
c0013553:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013556:	c3                   	ret    

c0013557 <Virt::freeKernelVirtualPages(unsigned long)>:
c0013557:	55                   	push   ebp
c0013558:	57                   	push   edi
c0013559:	bf 01 00 00 00       	mov    edi,0x1
c001355e:	56                   	push   esi
c001355f:	53                   	push   ebx
c0013560:	83 ec 1c             	sub    esp,0x1c
c0013563:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013567:	c1 ee 0c             	shr    esi,0xc
c001356a:	eb 48                	jmp    c00135b4 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001356c:	83 ec 08             	sub    esp,0x8
c001356f:	a1 90 12 03 c0       	mov    eax,ds:0xc0031290
c0013574:	55                   	push   ebp
c0013575:	50                   	push   eax
c0013576:	e8 bd ff ff ff       	call   c0013538 <VAS::getPageTableEntry(unsigned long)>
c001357b:	83 c4 10             	add    esp,0x10
c001357e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013580:	f6 c6 04             	test   dh,0x4
c0013583:	75 70                	jne    c00135f5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013585:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001358b:	83 fb 04             	cmp    ebx,0x4
c001358e:	0f 84 8a 00 00 00    	je     c001361e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013594:	83 fb 02             	cmp    ebx,0x2
c0013597:	0f 84 9a 00 00 00    	je     c0013637 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001359d:	83 fb 03             	cmp    ebx,0x3
c00135a0:	0f 84 be 00 00 00    	je     c0013664 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00135a6:	83 fb 01             	cmp    ebx,0x1
c00135a9:	0f 84 a2 00 00 00    	je     c0013651 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00135af:	83 c6 01             	add    esi,0x1
c00135b2:	31 ff                	xor    edi,edi
c00135b4:	56                   	push   esi
c00135b5:	89 f5                	mov    ebp,esi
c00135b7:	e8 70 fc ff ff       	call   c001322c <Virt::getPageState(unsigned long)>
c00135bc:	c1 e5 0c             	shl    ebp,0xc
c00135bf:	0f b6 d8             	movzx  ebx,al
c00135c2:	5a                   	pop    edx
c00135c3:	85 db                	test   ebx,ebx
c00135c5:	75 a5                	jne    c001356c <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00135c7:	83 ec 0c             	sub    esp,0xc
c00135ca:	68 b5 86 02 c0       	push   0xc00286b5
c00135cf:	e8 e4 c6 ff ff       	call   c000fcb8 <KePanic(char const*)>
c00135d4:	5a                   	pop    edx
c00135d5:	59                   	pop    ecx
c00135d6:	55                   	push   ebp
c00135d7:	8b 2d 90 12 03 c0    	mov    ebp,DWORD PTR ds:0xc0031290
c00135dd:	55                   	push   ebp
c00135de:	e8 55 ff ff ff       	call   c0013538 <VAS::getPageTableEntry(unsigned long)>
c00135e3:	83 c4 10             	add    esp,0x10
c00135e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00135e8:	f6 c6 04             	test   dh,0x4
c00135eb:	75 08                	jne    c00135f5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00135ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00135f3:	eb ba                	jmp    c00135af <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00135f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135f9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00135ff:	83 ec 0c             	sub    esp,0xc
c0013602:	52                   	push   edx
c0013603:	e8 3b c8 ff ff       	call   c000fe43 <Phys::freePage(unsigned long)>
c0013608:	83 c4 10             	add    esp,0x10
c001360b:	83 fb 04             	cmp    ebx,0x4
c001360e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013612:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013618:	0f 85 76 ff ff ff    	jne    c0013594 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001361e:	83 e7 01             	and    edi,0x1
c0013621:	75 46                	jne    c0013669 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0013623:	c7 44 24 30 94 83 02 c0 	mov    DWORD PTR [esp+0x30],0xc0028394
c001362b:	83 c4 1c             	add    esp,0x1c
c001362e:	5b                   	pop    ebx
c001362f:	5e                   	pop    esi
c0013630:	5f                   	pop    edi
c0013631:	5d                   	pop    ebp
c0013632:	e9 81 c6 ff ff       	jmp    c000fcb8 <KePanic(char const*)>
c0013637:	83 e7 01             	and    edi,0x1
c001363a:	75 15                	jne    c0013651 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001363c:	83 ec 0c             	sub    esp,0xc
c001363f:	68 d1 86 02 c0       	push   0xc00286d1
c0013644:	e8 6f c6 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0013649:	83 c4 10             	add    esp,0x10
c001364c:	e9 5e ff ff ff       	jmp    c00135af <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013651:	83 ec 08             	sub    esp,0x8
c0013654:	6a 00                	push   0x0
c0013656:	56                   	push   esi
c0013657:	e8 96 fb ff ff       	call   c00131f2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001365c:	83 c4 10             	add    esp,0x10
c001365f:	e9 4b ff ff ff       	jmp    c00135af <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013664:	83 e7 01             	and    edi,0x1
c0013667:	75 16                	jne    c001367f <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013669:	83 ec 08             	sub    esp,0x8
c001366c:	6a 00                	push   0x0
c001366e:	56                   	push   esi
c001366f:	e8 7e fb ff ff       	call   c00131f2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013674:	83 c4 10             	add    esp,0x10
c0013677:	83 c4 1c             	add    esp,0x1c
c001367a:	5b                   	pop    ebx
c001367b:	5e                   	pop    esi
c001367c:	5f                   	pop    edi
c001367d:	5d                   	pop    ebp
c001367e:	c3                   	ret    
c001367f:	c7 44 24 30 ed 86 02 c0 	mov    DWORD PTR [esp+0x30],0xc00286ed
c0013687:	83 c4 1c             	add    esp,0x1c
c001368a:	5b                   	pop    ebx
c001368b:	5e                   	pop    esi
c001368c:	5f                   	pop    edi
c001368d:	5d                   	pop    ebp
c001368e:	e9 25 c6 ff ff       	jmp    c000fcb8 <KePanic(char const*)>
c0013693:	90                   	nop

c0013694 <VAS::freeAllocatedPages(unsigned long)>:
c0013694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013698:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001369c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00136a0:	74 09                	je     c00136ab <VAS::freeAllocatedPages(unsigned long)+0x17>
c00136a2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00136a6:	e9 ac fe ff ff       	jmp    c0013557 <Virt::freeKernelVirtualPages(unsigned long)>
c00136ab:	c7 44 24 04 b8 83 02 c0 	mov    DWORD PTR [esp+0x4],0xc00283b8
c00136b3:	e9 c4 38 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c00136b8 <VAS::virtualToPhysical(unsigned long)>:
c00136b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136bc:	50                   	push   eax
c00136bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00136c1:	52                   	push   edx
c00136c2:	e8 71 fe ff ff       	call   c0013538 <VAS::getPageTableEntry(unsigned long)>
c00136c7:	59                   	pop    ecx
c00136c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00136ca:	5a                   	pop    edx
c00136cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00136d0:	c3                   	ret    
c00136d1:	90                   	nop

c00136d2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00136d2:	55                   	push   ebp
c00136d3:	57                   	push   edi
c00136d4:	56                   	push   esi
c00136d5:	53                   	push   ebx
c00136d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136da:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00136de:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136e2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00136e6:	85 db                	test   ebx,ebx
c00136e8:	7e 24                	jle    c001370e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00136ea:	c1 e3 0c             	shl    ebx,0xc
c00136ed:	01 f3                	add    ebx,esi
c00136ef:	56                   	push   esi
c00136f0:	81 c6 00 10 00 00    	add    esi,0x1000
c00136f6:	55                   	push   ebp
c00136f7:	e8 3c fe ff ff       	call   c0013538 <VAS::getPageTableEntry(unsigned long)>
c00136fc:	5a                   	pop    edx
c00136fd:	59                   	pop    ecx
c00136fe:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013700:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013704:	21 f9                	and    ecx,edi
c0013706:	09 d1                	or     ecx,edx
c0013708:	39 f3                	cmp    ebx,esi
c001370a:	89 08                	mov    DWORD PTR [eax],ecx
c001370c:	75 e1                	jne    c00136ef <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c001370e:	5b                   	pop    ebx
c001370f:	5e                   	pop    esi
c0013710:	5f                   	pop    edi
c0013711:	5d                   	pop    ebp
c0013712:	c3                   	ret    
c0013713:	90                   	nop

c0013714 <VAS::VAS()>:
c0013714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013718:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001371f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013723:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001372a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001372e:	a3 90 12 03 c0       	mov    ds:0xc0031290,eax
c0013733:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013737:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001373b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001373f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0013742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013746:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001374d:	ba 7d c0 02 c0       	mov    edx,0xc002c07d
c0013752:	b8 00 c0 02 c0       	mov    eax,0xc002c000
c0013757:	29 c2                	sub    edx,eax
c0013759:	89 d0                	mov    eax,edx
c001375b:	05 ff 0f 00 00       	add    eax,0xfff
c0013760:	c1 e8 0c             	shr    eax,0xc
c0013763:	89 c2                	mov    edx,eax
c0013765:	b8 00 c0 02 c0       	mov    eax,0xc002c000
c001376a:	6a 04                	push   0x4
c001376c:	6a ff                	push   0xffffffff
c001376e:	52                   	push   edx
c001376f:	50                   	push   eax
c0013770:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013774:	e8 59 ff ff ff       	call   c00136d2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013779:	83 c4 14             	add    esp,0x14
c001377c:	90                   	nop
c001377d:	c3                   	ret    

c001377e <VAS::setToWriteCombining(unsigned long, int)>:
c001377e:	a1 24 14 03 c0       	mov    eax,ds:0xc0031424
c0013783:	50                   	push   eax
c0013784:	6a ff                	push   0xffffffff
c0013786:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001378a:	52                   	push   edx
c001378b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001378f:	51                   	push   ecx
c0013790:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013794:	50                   	push   eax
c0013795:	e8 38 ff ff ff       	call   c00136d2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001379a:	83 c4 14             	add    esp,0x14
c001379d:	c3                   	ret    

c001379e <VAS::mapOtherVASIn(bool, VAS*)>:
c001379e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137a2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00137a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137a9:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00137ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00137b1:	83 f8 01             	cmp    eax,0x1
c00137b4:	19 c0                	sbb    eax,eax
c00137b6:	83 ca 03             	or     edx,0x3
c00137b9:	83 e0 fc             	and    eax,0xfffffffc
c00137bc:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00137c3:	0f 20 d8             	mov    eax,cr3
c00137c6:	0f 22 d8             	mov    cr3,eax
c00137c9:	c3                   	ret    

c00137ca <VAS::~VAS()>:
c00137ca:	83 ec 2c             	sub    esp,0x2c
c00137cd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00137d5:	fa                   	cli    
c00137d6:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00137db:	83 c0 01             	add    eax,0x1
c00137de:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c00137e3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00137e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00137ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00137ed:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00137f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137f7:	6a 01                	push   0x1
c00137f9:	50                   	push   eax
c00137fa:	e8 9f ff ff ff       	call   c001379e <VAS::mapOtherVASIn(bool, VAS*)>
c00137ff:	83 c4 0c             	add    esp,0xc
c0013802:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001380a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013812:	0f 8f d8 00 00 00    	jg     c00138f0 <VAS::~VAS()+0x126>
c0013818:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001381c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001381f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013823:	c1 e2 02             	shl    edx,0x2
c0013826:	01 d0                	add    eax,edx
c0013828:	8b 00                	mov    eax,DWORD PTR [eax]
c001382a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001382e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013832:	83 e0 01             	and    eax,0x1
c0013835:	0f 84 ab 00 00 00    	je     c00138e6 <VAS::~VAS()+0x11c>
c001383b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013843:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001384b:	7f 74                	jg     c00138c1 <VAS::~VAS()+0xf7>
c001384d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013851:	c1 e0 0a             	shl    eax,0xa
c0013854:	89 c2                	mov    edx,eax
c0013856:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001385a:	01 d0                	add    eax,edx
c001385c:	c1 e0 0c             	shl    eax,0xc
c001385f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013863:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013868:	8b 00                	mov    eax,DWORD PTR [eax]
c001386a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001386d:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013873:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013877:	6a 01                	push   0x1
c0013879:	50                   	push   eax
c001387a:	e8 8b fc ff ff       	call   c001350a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001387f:	83 c4 0c             	add    esp,0xc
c0013882:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013886:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001388a:	8b 00                	mov    eax,DWORD PTR [eax]
c001388c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013894:	25 01 04 00 00       	and    eax,0x401
c0013899:	3d 01 04 00 00       	cmp    eax,0x401
c001389e:	75 1a                	jne    c00138ba <VAS::~VAS()+0xf0>
c00138a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138a4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00138a9:	83 ec 0c             	sub    esp,0xc
c00138ac:	50                   	push   eax
c00138ad:	e8 91 c5 ff ff       	call   c000fe43 <Phys::freePage(unsigned long)>
c00138b2:	83 c4 10             	add    esp,0x10
c00138b5:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00138ba:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00138bf:	eb 82                	jmp    c0013843 <VAS::~VAS()+0x79>
c00138c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c5:	25 00 04 00 00       	and    eax,0x400
c00138ca:	74 1a                	je     c00138e6 <VAS::~VAS()+0x11c>
c00138cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00138d5:	83 ec 0c             	sub    esp,0xc
c00138d8:	50                   	push   eax
c00138d9:	e8 65 c5 ff ff       	call   c000fe43 <Phys::freePage(unsigned long)>
c00138de:	83 c4 10             	add    esp,0x10
c00138e1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00138e6:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00138eb:	e9 1a ff ff ff       	jmp    c001380a <VAS::~VAS()+0x40>
c00138f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00138f7:	83 ec 0c             	sub    esp,0xc
c00138fa:	50                   	push   eax
c00138fb:	e8 57 fc ff ff       	call   c0013557 <Virt::freeKernelVirtualPages(unsigned long)>
c0013900:	83 c4 10             	add    esp,0x10
c0013903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013907:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001390a:	83 ec 0c             	sub    esp,0xc
c001390d:	50                   	push   eax
c001390e:	e8 30 c5 ff ff       	call   c000fe43 <Phys::freePage(unsigned long)>
c0013913:	83 c4 10             	add    esp,0x10
c0013916:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001391b:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0013923:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0013928:	85 c0                	test   eax,eax
c001392a:	75 01                	jne    c001392d <VAS::~VAS()+0x163>
c001392c:	fb                   	sti    
c001392d:	90                   	nop
c001392e:	83 c4 2c             	add    esp,0x2c
c0013931:	c3                   	ret    

c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013932:	55                   	push   ebp
c0013933:	57                   	push   edi
c0013934:	56                   	push   esi
c0013935:	53                   	push   ebx
c0013936:	83 ec 1c             	sub    esp,0x1c
c0013939:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001393d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013941:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013947:	77 08                	ja     c0013951 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013949:	0f 20 d8             	mov    eax,cr3
c001394c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001394f:	75 49                	jne    c001399a <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013951:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013955:	09 d8                	or     eax,ebx
c0013957:	a9 ff 0f 00 00       	test   eax,0xfff
c001395c:	75 59                	jne    c00139b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c001395e:	89 de                	mov    esi,ebx
c0013960:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013963:	c1 ee 16             	shr    esi,0x16
c0013966:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001396d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013971:	74 56                	je     c00139c9 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013973:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013977:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001397b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013981:	c1 eb 0a             	shr    ebx,0xa
c0013984:	c1 e6 0c             	shl    esi,0xc
c0013987:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001398d:	09 d0                	or     eax,edx
c001398f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013992:	83 c4 1c             	add    esp,0x1c
c0013995:	5b                   	pop    ebx
c0013996:	5e                   	pop    esi
c0013997:	5f                   	pop    edi
c0013998:	5d                   	pop    ebp
c0013999:	c3                   	ret    
c001399a:	83 ec 0c             	sub    esp,0xc
c001399d:	68 dc 83 02 c0       	push   0xc00283dc
c00139a2:	e8 d5 35 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00139a7:	83 c4 10             	add    esp,0x10
c00139aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00139ae:	09 d8                	or     eax,ebx
c00139b0:	a9 ff 0f 00 00       	test   eax,0xfff
c00139b5:	74 a7                	je     c001395e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00139b7:	83 ec 0c             	sub    esp,0xc
c00139ba:	68 44 84 02 c0       	push   0xc0028444
c00139bf:	e8 f4 c2 ff ff       	call   c000fcb8 <KePanic(char const*)>
c00139c4:	83 c4 10             	add    esp,0x10
c00139c7:	eb 95                	jmp    c001395e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00139c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00139cd:	e8 da c4 ff ff       	call   c000feac <Phys::allocatePage()>
c00139d2:	83 ec 0c             	sub    esp,0xc
c00139d5:	89 c5                	mov    ebp,eax
c00139d7:	8b 0d 90 12 03 c0    	mov    ecx,DWORD PTR ds:0xc0031290
c00139dd:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00139e1:	6a 01                	push   0x1
c00139e3:	e8 67 f8 ff ff       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c00139e8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00139ef:	6a 01                	push   0x1
c00139f1:	50                   	push   eax
c00139f2:	55                   	push   ebp
c00139f3:	81 cd 07 04 00 00    	or     ebp,0x407
c00139f9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00139fd:	51                   	push   ecx
c00139fe:	e8 19 01 00 00       	call   c0013b1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013a03:	83 c4 1c             	add    esp,0x1c
c0013a06:	68 00 10 00 00       	push   0x1000
c0013a0b:	6a 00                	push   0x0
c0013a0d:	50                   	push   eax
c0013a0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a12:	e8 d9 ca fe ff       	call   c00004f0 <memset>
c0013a17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013a1b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013a1e:	e8 34 fb ff ff       	call   c0013557 <Virt::freeKernelVirtualPages(unsigned long)>
c0013a23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a27:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013a2a:	83 c4 10             	add    esp,0x10
c0013a2d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013a30:	e9 3e ff ff ff       	jmp    c0013973 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013a35:	90                   	nop

c0013a36 <VAS::allocatePages(int, int)>:
c0013a36:	55                   	push   ebp
c0013a37:	57                   	push   edi
c0013a38:	56                   	push   esi
c0013a39:	53                   	push   ebx
c0013a3a:	83 ec 1c             	sub    esp,0x1c
c0013a3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a41:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013a45:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013a49:	75 71                	jne    c0013abc <VAS::allocatePages(int, int)+0x86>
c0013a4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013a4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a52:	85 c0                	test   eax,eax
c0013a54:	74 4d                	je     c0013aa3 <VAS::allocatePages(int, int)+0x6d>
c0013a56:	89 dd                	mov    ebp,ebx
c0013a58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a5c:	c1 e5 0c             	shl    ebp,0xc
c0013a5f:	01 c5                	add    ebp,eax
c0013a61:	85 db                	test   ebx,ebx
c0013a63:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013a66:	7e 29                	jle    c0013a91 <VAS::allocatePages(int, int)+0x5b>
c0013a68:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013a6c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a70:	81 cf 00 04 00 00    	or     edi,0x400
c0013a76:	e8 31 c4 ff ff       	call   c000feac <Phys::allocatePage()>
c0013a7b:	57                   	push   edi
c0013a7c:	53                   	push   ebx
c0013a7d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013a83:	50                   	push   eax
c0013a84:	56                   	push   esi
c0013a85:	e8 a8 fe ff ff       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	39 dd                	cmp    ebp,ebx
c0013a8f:	75 e5                	jne    c0013a76 <VAS::allocatePages(int, int)+0x40>
c0013a91:	0f 20 d8             	mov    eax,cr3
c0013a94:	0f 22 d8             	mov    cr3,eax
c0013a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a9b:	83 c4 1c             	add    esp,0x1c
c0013a9e:	5b                   	pop    ebx
c0013a9f:	5e                   	pop    esi
c0013aa0:	5f                   	pop    edi
c0013aa1:	5d                   	pop    ebp
c0013aa2:	c3                   	ret    
c0013aa3:	83 ec 0c             	sub    esp,0xc
c0013aa6:	68 68 84 02 c0       	push   0xc0028468
c0013aab:	e8 08 c2 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0013ab0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013ab3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ab7:	83 c4 10             	add    esp,0x10
c0013aba:	eb 9a                	jmp    c0013a56 <VAS::allocatePages(int, int)+0x20>
c0013abc:	83 ec 0c             	sub    esp,0xc
c0013abf:	53                   	push   ebx
c0013ac0:	e8 8a f7 ff ff       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c0013ac5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ac9:	83 c4 10             	add    esp,0x10
c0013acc:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013ad1:	77 37                	ja     c0013b0a <VAS::allocatePages(int, int)+0xd4>
c0013ad3:	85 db                	test   ebx,ebx
c0013ad5:	7e ba                	jle    c0013a91 <VAS::allocatePages(int, int)+0x5b>
c0013ad7:	c1 e3 0c             	shl    ebx,0xc
c0013ada:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ade:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013ae2:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013ae5:	81 cf 00 04 00 00    	or     edi,0x400
c0013aeb:	89 c3                	mov    ebx,eax
c0013aed:	e8 ba c3 ff ff       	call   c000feac <Phys::allocatePage()>
c0013af2:	57                   	push   edi
c0013af3:	53                   	push   ebx
c0013af4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013afa:	50                   	push   eax
c0013afb:	56                   	push   esi
c0013afc:	e8 31 fe ff ff       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b01:	83 c4 10             	add    esp,0x10
c0013b04:	39 dd                	cmp    ebp,ebx
c0013b06:	75 e5                	jne    c0013aed <VAS::allocatePages(int, int)+0xb7>
c0013b08:	eb 87                	jmp    c0013a91 <VAS::allocatePages(int, int)+0x5b>
c0013b0a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013b0e:	a1 28 14 03 c0       	mov    eax,ds:0xc0031428
c0013b13:	09 c2                	or     edx,eax
c0013b15:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013b19:	eb b8                	jmp    c0013ad3 <VAS::allocatePages(int, int)+0x9d>
c0013b1b:	90                   	nop

c0013b1c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013b1c:	55                   	push   ebp
c0013b1d:	57                   	push   edi
c0013b1e:	56                   	push   esi
c0013b1f:	53                   	push   ebx
c0013b20:	83 ec 0c             	sub    esp,0xc
c0013b23:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013b27:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013b2b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013b2f:	85 db                	test   ebx,ebx
c0013b31:	7e 2f                	jle    c0013b62 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013b33:	c1 e3 0c             	shl    ebx,0xc
c0013b36:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013b3a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013b3e:	01 d3                	add    ebx,edx
c0013b40:	55                   	push   ebp
c0013b41:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013b45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b49:	29 c2                	sub    edx,eax
c0013b4b:	01 f2                	add    edx,esi
c0013b4d:	52                   	push   edx
c0013b4e:	56                   	push   esi
c0013b4f:	81 c6 00 10 00 00    	add    esi,0x1000
c0013b55:	57                   	push   edi
c0013b56:	e8 d7 fd ff ff       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b5b:	83 c4 10             	add    esp,0x10
c0013b5e:	39 de                	cmp    esi,ebx
c0013b60:	75 de                	jne    c0013b40 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013b62:	0f 20 d8             	mov    eax,cr3
c0013b65:	0f 22 d8             	mov    cr3,eax
c0013b68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b6c:	83 c4 0c             	add    esp,0xc
c0013b6f:	5b                   	pop    ebx
c0013b70:	5e                   	pop    esi
c0013b71:	5f                   	pop    edi
c0013b72:	5d                   	pop    ebp
c0013b73:	c3                   	ret    

c0013b74 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013b74:	55                   	push   ebp
c0013b75:	57                   	push   edi
c0013b76:	56                   	push   esi
c0013b77:	53                   	push   ebx
c0013b78:	83 ec 1c             	sub    esp,0x1c
c0013b7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013b7f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013b83:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013b87:	09 f8                	or     eax,edi
c0013b89:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013b8d:	a9 ff 0f 00 00       	test   eax,0xfff
c0013b92:	75 4f                	jne    c0013be3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013b94:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013b98:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013b9b:	c1 eb 16             	shr    ebx,0x16
c0013b9e:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013ba5:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013ba9:	74 52                	je     c0013bfd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013bab:	0f b6 f2             	movzx  esi,dl
c0013bae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013bb2:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013bb6:	c1 e8 0a             	shr    eax,0xa
c0013bb9:	83 fe 01             	cmp    esi,0x1
c0013bbc:	19 d2                	sbb    edx,edx
c0013bbe:	c1 e3 0c             	shl    ebx,0xc
c0013bc1:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013bc7:	25 fc 0f 00 00       	and    eax,0xffc
c0013bcc:	01 d8                	add    eax,ebx
c0013bce:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013bd2:	09 d9                	or     ecx,ebx
c0013bd4:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013bdb:	83 c4 1c             	add    esp,0x1c
c0013bde:	5b                   	pop    ebx
c0013bdf:	5e                   	pop    esi
c0013be0:	5f                   	pop    edi
c0013be1:	5d                   	pop    ebp
c0013be2:	c3                   	ret    
c0013be3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013be7:	83 ec 0c             	sub    esp,0xc
c0013bea:	68 94 84 02 c0       	push   0xc0028494
c0013bef:	e8 c4 c0 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0013bf4:	83 c4 10             	add    esp,0x10
c0013bf7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013bfb:	eb 97                	jmp    c0013b94 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013bfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013c01:	e8 a6 c2 ff ff       	call   c000feac <Phys::allocatePage()>
c0013c06:	83 ec 0c             	sub    esp,0xc
c0013c09:	89 c5                	mov    ebp,eax
c0013c0b:	8b 0d 90 12 03 c0    	mov    ecx,DWORD PTR ds:0xc0031290
c0013c11:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013c15:	6a 01                	push   0x1
c0013c17:	e8 33 f6 ff ff       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c0013c1c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013c23:	6a 01                	push   0x1
c0013c25:	50                   	push   eax
c0013c26:	55                   	push   ebp
c0013c27:	81 cd 07 04 00 00    	or     ebp,0x407
c0013c2d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013c31:	51                   	push   ecx
c0013c32:	e8 e5 fe ff ff       	call   c0013b1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013c37:	83 c4 1c             	add    esp,0x1c
c0013c3a:	68 00 10 00 00       	push   0x1000
c0013c3f:	6a 00                	push   0x0
c0013c41:	50                   	push   eax
c0013c42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c46:	e8 a5 c8 fe ff       	call   c00004f0 <memset>
c0013c4b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c4f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013c52:	e8 00 f9 ff ff       	call   c0013557 <Virt::freeKernelVirtualPages(unsigned long)>
c0013c57:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013c5a:	83 c4 10             	add    esp,0x10
c0013c5d:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0013c60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013c64:	e9 42 ff ff ff       	jmp    c0013bab <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013c69:	90                   	nop

c0013c6a <VAS::VAS(bool)>:
c0013c6a:	53                   	push   ebx
c0013c6b:	83 ec 28             	sub    esp,0x28
c0013c6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c72:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013c76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c85:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013c8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c90:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013c94:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013c97:	e8 10 c2 ff ff       	call   c000feac <Phys::allocatePage()>
c0013c9c:	89 c2                	mov    edx,eax
c0013c9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ca2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013ca5:	8b 1d 90 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031290
c0013cab:	83 ec 0c             	sub    esp,0xc
c0013cae:	6a 01                	push   0x1
c0013cb0:	e8 9a f5 ff ff       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c0013cb5:	83 c4 10             	add    esp,0x10
c0013cb8:	89 c2                	mov    edx,eax
c0013cba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cbe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013cc1:	83 ec 0c             	sub    esp,0xc
c0013cc4:	6a 03                	push   0x3
c0013cc6:	6a 01                	push   0x1
c0013cc8:	52                   	push   edx
c0013cc9:	50                   	push   eax
c0013cca:	53                   	push   ebx
c0013ccb:	e8 4c fe ff ff       	call   c0013b1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013cd0:	83 c4 20             	add    esp,0x20
c0013cd3:	89 c2                	mov    edx,eax
c0013cd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cd9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013cdc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013ce4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013cec:	7f 1d                	jg     c0013d0b <VAS::VAS(bool)+0xa1>
c0013cee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cf2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cf5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013cf9:	c1 e2 02             	shl    edx,0x2
c0013cfc:	01 d0                	add    eax,edx
c0013cfe:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013d04:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013d09:	eb d9                	jmp    c0013ce4 <VAS::VAS(bool)+0x7a>
c0013d0b:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013d13:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013d1b:	7f 59                	jg     c0013d76 <VAS::VAS(bool)+0x10c>
c0013d1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d21:	2d 00 02 00 00       	sub    eax,0x200
c0013d26:	c1 e0 0c             	shl    eax,0xc
c0013d29:	89 c2                	mov    edx,eax
c0013d2b:	a1 28 14 03 c0       	mov    eax,ds:0xc0031428
c0013d30:	89 d1                	mov    ecx,edx
c0013d32:	09 c1                	or     ecx,eax
c0013d34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d3f:	c1 e2 02             	shl    edx,0x2
c0013d42:	01 d0                	add    eax,edx
c0013d44:	83 c9 05             	or     ecx,0x5
c0013d47:	89 ca                	mov    edx,ecx
c0013d49:	89 10                	mov    DWORD PTR [eax],edx
c0013d4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d4f:	2d 40 03 00 00       	sub    eax,0x340
c0013d54:	83 f8 7f             	cmp    eax,0x7f
c0013d57:	77 16                	ja     c0013d6f <VAS::VAS(bool)+0x105>
c0013d59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d5d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d64:	c1 e2 02             	shl    edx,0x2
c0013d67:	01 d0                	add    eax,edx
c0013d69:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013d6f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013d74:	eb 9d                	jmp    c0013d13 <VAS::VAS(bool)+0xa9>
c0013d76:	8b 15 28 14 03 c0    	mov    edx,DWORD PTR ds:0xc0031428
c0013d7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d83:	05 20 0c 00 00       	add    eax,0xc20
c0013d88:	81 ca 03 40 00 00    	or     edx,0x4003
c0013d8e:	89 10                	mov    DWORD PTR [eax],edx
c0013d90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d94:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013d97:	a1 28 14 03 c0       	mov    eax,ds:0xc0031428
c0013d9c:	09 c2                	or     edx,eax
c0013d9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013da2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013da5:	05 fc 0f 00 00       	add    eax,0xffc
c0013daa:	83 ca 03             	or     edx,0x3
c0013dad:	89 10                	mov    DWORD PTR [eax],edx
c0013daf:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0013db4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013dba:	83 ec 0c             	sub    esp,0xc
c0013dbd:	50                   	push   eax
c0013dbe:	e8 ef 5e ff ff       	call   c0009cb2 <Device::getName()>
c0013dc3:	83 c4 10             	add    esp,0x10
c0013dc6:	83 ec 08             	sub    esp,0x8
c0013dc9:	68 07 87 02 c0       	push   0xc0028707
c0013dce:	50                   	push   eax
c0013dcf:	e8 7c c9 fe ff       	call   c0000750 <strcmp>
c0013dd4:	83 c4 10             	add    esp,0x10
c0013dd7:	85 c0                	test   eax,eax
c0013dd9:	0f 94 c0             	sete   al
c0013ddc:	0f b6 c0             	movzx  eax,al
c0013ddf:	85 c0                	test   eax,eax
c0013de1:	74 68                	je     c0013e4b <VAS::VAS(bool)+0x1e1>
c0013de3:	fa                   	cli    
c0013de4:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0013de9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013def:	05 68 09 00 00       	add    eax,0x968
c0013df4:	83 ec 0c             	sub    esp,0xc
c0013df7:	50                   	push   eax
c0013df8:	e8 59 ad ff ff       	call   c000eb56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013dfd:	83 c4 10             	add    esp,0x10
c0013e00:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013e05:	89 c3                	mov    ebx,eax
c0013e07:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0013e0c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013e12:	05 68 09 00 00       	add    eax,0x968
c0013e17:	83 ec 0c             	sub    esp,0xc
c0013e1a:	50                   	push   eax
c0013e1b:	e8 36 ad ff ff       	call   c000eb56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013e20:	83 c4 10             	add    esp,0x10
c0013e23:	83 ec 08             	sub    esp,0x8
c0013e26:	50                   	push   eax
c0013e27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e2b:	e8 08 f7 ff ff       	call   c0013538 <VAS::getPageTableEntry(unsigned long)>
c0013e30:	83 c4 10             	add    esp,0x10
c0013e33:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e35:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013e3a:	6a 11                	push   0x11
c0013e3c:	53                   	push   ebx
c0013e3d:	50                   	push   eax
c0013e3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e42:	e8 eb fa ff ff       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e47:	83 c4 10             	add    esp,0x10
c0013e4a:	fb                   	sti    
c0013e4b:	90                   	nop
c0013e4c:	83 c4 28             	add    esp,0x28
c0013e4f:	5b                   	pop    ebx
c0013e50:	c3                   	ret    
c0013e51:	90                   	nop

c0013e52 <VAS::evict(unsigned long)>:
c0013e52:	55                   	push   ebp
c0013e53:	57                   	push   edi
c0013e54:	56                   	push   esi
c0013e55:	53                   	push   ebx
c0013e56:	83 ec 24             	sub    esp,0x24
c0013e59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013e5d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e65:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0013e6a:	50                   	push   eax
c0013e6b:	68 15 87 02 c0       	push   0xc0028715
c0013e70:	e8 07 31 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013e75:	e8 33 f5 ff ff       	call   c00133ad <Virt::allocateSwapfilePage()>
c0013e7a:	83 c4 10             	add    esp,0x10
c0013e7d:	89 c7                	mov    edi,eax
c0013e7f:	a1 ec b5 02 c0       	mov    eax,ds:0xc002b5ec
c0013e84:	85 c0                	test   eax,eax
c0013e86:	7e 40                	jle    c0013ec8 <VAS::evict(unsigned long)+0x76>
c0013e88:	89 ee                	mov    esi,ebp
c0013e8a:	31 db                	xor    ebx,ebx
c0013e8c:	83 ec 0c             	sub    esp,0xc
c0013e8f:	57                   	push   edi
c0013e90:	e8 02 f5 ff ff       	call   c0013397 <Virt::swapIDToSector(unsigned long)>
c0013e95:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e98:	01 d8                	add    eax,ebx
c0013e9a:	6a 01                	push   0x1
c0013e9c:	31 d2                	xor    edx,edx
c0013e9e:	83 c3 01             	add    ebx,0x1
c0013ea1:	52                   	push   edx
c0013ea2:	81 c6 00 02 00 00    	add    esi,0x200
c0013ea8:	50                   	push   eax
c0013ea9:	0f be 05 f8 b5 02 c0 	movsx  eax,BYTE PTR ds:0xc002b5f8
c0013eb0:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c0013eb7:	50                   	push   eax
c0013eb8:	e8 21 6c ff ff       	call   c000aade <LogicalDisk::write(unsigned long long, int, void*)>
c0013ebd:	83 c4 20             	add    esp,0x20
c0013ec0:	39 1d ec b5 02 c0    	cmp    DWORD PTR ds:0xc002b5ec,ebx
c0013ec6:	7f c4                	jg     c0013e8c <VAS::evict(unsigned long)+0x3a>
c0013ec8:	83 ec 08             	sub    esp,0x8
c0013ecb:	c1 e7 0c             	shl    edi,0xc
c0013ece:	55                   	push   ebp
c0013ecf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ed3:	50                   	push   eax
c0013ed4:	e8 5f f6 ff ff       	call   c0013538 <VAS::getPageTableEntry(unsigned long)>
c0013ed9:	8b 10                	mov    edx,DWORD PTR [eax]
c0013edb:	89 d3                	mov    ebx,edx
c0013edd:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013ee3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013ee9:	09 d7                	or     edi,edx
c0013eeb:	89 38                	mov    DWORD PTR [eax],edi
c0013eed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ef0:	8b 15 88 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031288
c0013ef6:	83 c2 01             	add    edx,0x1
c0013ef9:	89 15 88 12 03 c0    	mov    DWORD PTR ds:0xc0031288,edx
c0013eff:	e8 3f bf ff ff       	call   c000fe43 <Phys::freePage(unsigned long)>
c0013f04:	0f 20 d8             	mov    eax,cr3
c0013f07:	0f 22 d8             	mov    cr3,eax
c0013f0a:	8b 0d 88 12 03 c0    	mov    ecx,DWORD PTR ds:0xc0031288
c0013f10:	51                   	push   ecx
c0013f11:	55                   	push   ebp
c0013f12:	53                   	push   ebx
c0013f13:	68 b8 84 02 c0       	push   0xc00284b8
c0013f18:	e8 5f 30 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013f1d:	83 c4 18             	add    esp,0x18
c0013f20:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c0013f25:	50                   	push   eax
c0013f26:	8d 50 01             	lea    edx,[eax+0x1]
c0013f29:	68 2a 87 02 c0       	push   0xc002872a
c0013f2e:	89 15 84 12 03 c0    	mov    DWORD PTR ds:0xc0031284,edx
c0013f34:	e8 43 30 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013f39:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0013f3e:	c7 44 24 40 3c 87 02 c0 	mov    DWORD PTR [esp+0x40],0xc002873c
c0013f46:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013f4a:	83 c4 2c             	add    esp,0x2c
c0013f4d:	5b                   	pop    ebx
c0013f4e:	5e                   	pop    esi
c0013f4f:	5f                   	pop    edi
c0013f50:	5d                   	pop    ebp
c0013f51:	e9 26 30 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c0013f56 <VAS::canLockPage(unsigned long)>:
c0013f56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f5a:	50                   	push   eax
c0013f5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013f5f:	52                   	push   edx
c0013f60:	e8 d3 f5 ff ff       	call   c0013538 <VAS::getPageTableEntry(unsigned long)>
c0013f65:	59                   	pop    ecx
c0013f66:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f68:	5a                   	pop    edx
c0013f69:	c1 e8 0b             	shr    eax,0xb
c0013f6c:	83 e0 01             	and    eax,0x1
c0013f6f:	c3                   	ret    

c0013f70 <VAS::unlockPage(unsigned long)>:
c0013f70:	83 ec 0c             	sub    esp,0xc
c0013f73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f77:	50                   	push   eax
c0013f78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013f7c:	52                   	push   edx
c0013f7d:	e8 b6 f5 ff ff       	call   c0013538 <VAS::getPageTableEntry(unsigned long)>
c0013f82:	59                   	pop    ecx
c0013f83:	5a                   	pop    edx
c0013f84:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f86:	f6 c6 08             	test   dh,0x8
c0013f89:	75 09                	jne    c0013f94 <VAS::unlockPage(unsigned long)+0x24>
c0013f8b:	80 ce 08             	or     dh,0x8
c0013f8e:	89 10                	mov    DWORD PTR [eax],edx
c0013f90:	83 c4 0c             	add    esp,0xc
c0013f93:	c3                   	ret    
c0013f94:	c7 44 24 10 ec 84 02 c0 	mov    DWORD PTR [esp+0x10],0xc00284ec
c0013f9c:	83 c4 0c             	add    esp,0xc
c0013f9f:	e9 14 bd ff ff       	jmp    c000fcb8 <KePanic(char const*)>

c0013fa4 <VAS::canLockPages(unsigned long, int)>:
c0013fa4:	55                   	push   ebp
c0013fa5:	57                   	push   edi
c0013fa6:	56                   	push   esi
c0013fa7:	53                   	push   ebx
c0013fa8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013fac:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013fb0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013fb4:	85 ff                	test   edi,edi
c0013fb6:	7e 23                	jle    c0013fdb <VAS::canLockPages(unsigned long, int)+0x37>
c0013fb8:	31 f6                	xor    esi,esi
c0013fba:	eb 0d                	jmp    c0013fc9 <VAS::canLockPages(unsigned long, int)+0x25>
c0013fbc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013fc2:	83 c6 01             	add    esi,0x1
c0013fc5:	39 f7                	cmp    edi,esi
c0013fc7:	74 0d                	je     c0013fd6 <VAS::canLockPages(unsigned long, int)+0x32>
c0013fc9:	53                   	push   ebx
c0013fca:	55                   	push   ebp
c0013fcb:	e8 86 ff ff ff       	call   c0013f56 <VAS::canLockPage(unsigned long)>
c0013fd0:	5a                   	pop    edx
c0013fd1:	84 c0                	test   al,al
c0013fd3:	59                   	pop    ecx
c0013fd4:	75 e6                	jne    c0013fbc <VAS::canLockPages(unsigned long, int)+0x18>
c0013fd6:	5b                   	pop    ebx
c0013fd7:	5e                   	pop    esi
c0013fd8:	5f                   	pop    edi
c0013fd9:	5d                   	pop    ebp
c0013fda:	c3                   	ret    
c0013fdb:	b0 01                	mov    al,0x1
c0013fdd:	eb f7                	jmp    c0013fd6 <VAS::canLockPages(unsigned long, int)+0x32>
c0013fdf:	90                   	nop

c0013fe0 <VAS::unlockPages(unsigned long, int)>:
c0013fe0:	55                   	push   ebp
c0013fe1:	57                   	push   edi
c0013fe2:	56                   	push   esi
c0013fe3:	53                   	push   ebx
c0013fe4:	83 ec 0c             	sub    esp,0xc
c0013fe7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013feb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013fef:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013ff3:	85 ff                	test   edi,edi
c0013ff5:	7e 1c                	jle    c0014013 <VAS::unlockPages(unsigned long, int)+0x33>
c0013ff7:	31 f6                	xor    esi,esi
c0013ff9:	83 ec 08             	sub    esp,0x8
c0013ffc:	83 c6 01             	add    esi,0x1
c0013fff:	53                   	push   ebx
c0014000:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014006:	55                   	push   ebp
c0014007:	e8 64 ff ff ff       	call   c0013f70 <VAS::unlockPage(unsigned long)>
c001400c:	83 c4 10             	add    esp,0x10
c001400f:	39 f7                	cmp    edi,esi
c0014011:	75 e6                	jne    c0013ff9 <VAS::unlockPages(unsigned long, int)+0x19>
c0014013:	83 c4 0c             	add    esp,0xc
c0014016:	5b                   	pop    ebx
c0014017:	5e                   	pop    esi
c0014018:	5f                   	pop    edi
c0014019:	5d                   	pop    ebp
c001401a:	c3                   	ret    
c001401b:	90                   	nop

c001401c <VAS::tryLoadBackOffDisk(unsigned long)>:
c001401c:	55                   	push   ebp
c001401d:	57                   	push   edi
c001401e:	56                   	push   esi
c001401f:	53                   	push   ebx
c0014020:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0014026:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c001402d:	89 c5                	mov    ebp,eax
c001402f:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c0014035:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c001403a:	77 11                	ja     c001404d <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c001403c:	85 ed                	test   ebp,ebp
c001403e:	75 1d                	jne    c001405d <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0014040:	31 c0                	xor    eax,eax
c0014042:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014048:	5b                   	pop    ebx
c0014049:	5e                   	pop    esi
c001404a:	5f                   	pop    edi
c001404b:	5d                   	pop    ebp
c001404c:	c3                   	ret    
c001404d:	83 ec 0c             	sub    esp,0xc
c0014050:	68 51 87 02 c0       	push   0xc0028751
c0014055:	e8 5e bc ff ff       	call   c000fcb8 <KePanic(char const*)>
c001405a:	83 c4 10             	add    esp,0x10
c001405d:	83 ec 08             	sub    esp,0x8
c0014060:	55                   	push   ebp
c0014061:	8b 9c 24 2c 10 00 00 	mov    ebx,DWORD PTR [esp+0x102c]
c0014068:	53                   	push   ebx
c0014069:	e8 ca f4 ff ff       	call   c0013538 <VAS::getPageTableEntry(unsigned long)>
c001406e:	83 c4 10             	add    esp,0x10
c0014071:	89 c3                	mov    ebx,eax
c0014073:	85 c0                	test   eax,eax
c0014075:	74 c9                	je     c0014040 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c0014077:	8b 38                	mov    edi,DWORD PTR [eax]
c0014079:	f7 c7 00 02 00 00    	test   edi,0x200
c001407f:	0f 85 b3 00 00 00    	jne    c0014138 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c0014085:	89 f8                	mov    eax,edi
c0014087:	25 01 04 00 00       	and    eax,0x401
c001408c:	3d 00 04 00 00       	cmp    eax,0x400
c0014091:	75 ad                	jne    c0014040 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c0014093:	e8 14 be ff ff       	call   c000feac <Phys::allocatePage()>
c0014098:	c1 ef 0c             	shr    edi,0xc
c001409b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001409d:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00140a3:	09 c2                	or     edx,eax
c00140a5:	81 ca 01 08 00 00    	or     edx,0x801
c00140ab:	89 13                	mov    DWORD PTR [ebx],edx
c00140ad:	8b 15 ec b5 02 c0    	mov    edx,DWORD PTR ds:0xc002b5ec
c00140b3:	85 d2                	test   edx,edx
c00140b5:	7e 4d                	jle    c0014104 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c00140b7:	89 ee                	mov    esi,ebp
c00140b9:	31 db                	xor    ebx,ebx
c00140bb:	83 ec 08             	sub    esp,0x8
c00140be:	56                   	push   esi
c00140bf:	68 78 87 02 c0       	push   0xc0028778
c00140c4:	e8 b3 2e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00140c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00140cc:	e8 c6 f2 ff ff       	call   c0013397 <Virt::swapIDToSector(unsigned long)>
c00140d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00140d4:	01 d8                	add    eax,ebx
c00140d6:	6a 01                	push   0x1
c00140d8:	31 d2                	xor    edx,edx
c00140da:	83 c3 01             	add    ebx,0x1
c00140dd:	52                   	push   edx
c00140de:	81 c6 00 02 00 00    	add    esi,0x200
c00140e4:	50                   	push   eax
c00140e5:	0f be 05 f8 b5 02 c0 	movsx  eax,BYTE PTR ds:0xc002b5f8
c00140ec:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c00140f3:	50                   	push   eax
c00140f4:	e8 79 69 ff ff       	call   c000aa72 <LogicalDisk::read(unsigned long long, int, void*)>
c00140f9:	83 c4 20             	add    esp,0x20
c00140fc:	39 1d ec b5 02 c0    	cmp    DWORD PTR ds:0xc002b5ec,ebx
c0014102:	7f b7                	jg     c00140bb <VAS::tryLoadBackOffDisk(unsigned long)+0x9f>
c0014104:	83 ec 04             	sub    esp,0x4
c0014107:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001410c:	83 e8 01             	sub    eax,0x1
c001410f:	50                   	push   eax
c0014110:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c0014115:	55                   	push   ebp
c0014116:	68 63 87 02 c0       	push   0xc0028763
c001411b:	e8 5c 2e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014120:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014123:	e8 4c f2 ff ff       	call   c0013374 <Virt::freeSwapfilePage(unsigned long)>
c0014128:	0f 20 d8             	mov    eax,cr3
c001412b:	0f 22 d8             	mov    cr3,eax
c001412e:	b0 01                	mov    al,0x1
c0014130:	83 c4 10             	add    esp,0x10
c0014133:	e9 0a ff ff ff       	jmp    c0014042 <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c0014138:	83 ec 0c             	sub    esp,0xc
c001413b:	68 1c 85 02 c0       	push   0xc002851c
c0014140:	e8 37 2e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014145:	8b 33                	mov    esi,DWORD PTR [ebx]
c0014147:	e8 60 bd ff ff       	call   c000feac <Phys::allocatePage()>
c001414c:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0014152:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014154:	83 c9 01             	or     ecx,0x1
c0014157:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014159:	0f 20 da             	mov    edx,cr3
c001415c:	0f 22 da             	mov    cr3,edx
c001415f:	ba 00 10 00 00       	mov    edx,0x1000
c0014164:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014168:	89 d1                	mov    ecx,edx
c001416a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001416c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001416e:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0014174:	09 c8                	or     eax,ecx
c0014176:	83 c8 02             	or     eax,0x2
c0014179:	89 03                	mov    DWORD PTR [ebx],eax
c001417b:	0f 20 d8             	mov    eax,cr3
c001417e:	0f 22 d8             	mov    cr3,eax
c0014181:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014185:	89 ef                	mov    edi,ebp
c0014187:	89 d1                	mov    ecx,edx
c0014189:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001418b:	b0 01                	mov    al,0x1
c001418d:	83 c4 10             	add    esp,0x10
c0014190:	e9 ad fe ff ff       	jmp    c0014042 <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c0014195:	90                   	nop

c0014196 <VAS::lockPage(unsigned long)>:
c0014196:	56                   	push   esi
c0014197:	53                   	push   ebx
c0014198:	83 ec 04             	sub    esp,0x4
c001419b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001419f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00141a3:	50                   	push   eax
c00141a4:	56                   	push   esi
c00141a5:	e8 8e f3 ff ff       	call   c0013538 <VAS::getPageTableEntry(unsigned long)>
c00141aa:	5a                   	pop    edx
c00141ab:	89 c3                	mov    ebx,eax
c00141ad:	59                   	pop    ecx
c00141ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00141b0:	a8 01                	test   al,0x1
c00141b2:	74 10                	je     c00141c4 <VAS::lockPage(unsigned long)+0x2e>
c00141b4:	f6 c4 08             	test   ah,0x8
c00141b7:	74 28                	je     c00141e1 <VAS::lockPage(unsigned long)+0x4b>
c00141b9:	80 e4 f7             	and    ah,0xf7
c00141bc:	89 03                	mov    DWORD PTR [ebx],eax
c00141be:	83 c4 04             	add    esp,0x4
c00141c1:	5b                   	pop    ebx
c00141c2:	5e                   	pop    esi
c00141c3:	c3                   	ret    
c00141c4:	83 ec 08             	sub    esp,0x8
c00141c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00141cc:	50                   	push   eax
c00141cd:	56                   	push   esi
c00141ce:	e8 49 fe ff ff       	call   c001401c <VAS::tryLoadBackOffDisk(unsigned long)>
c00141d3:	83 c4 10             	add    esp,0x10
c00141d6:	84 c0                	test   al,al
c00141d8:	74 19                	je     c00141f3 <VAS::lockPage(unsigned long)+0x5d>
c00141da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141dc:	f6 c4 08             	test   ah,0x8
c00141df:	75 d8                	jne    c00141b9 <VAS::lockPage(unsigned long)+0x23>
c00141e1:	c7 44 24 10 ec 84 02 c0 	mov    DWORD PTR [esp+0x10],0xc00284ec
c00141e9:	83 c4 04             	add    esp,0x4
c00141ec:	5b                   	pop    ebx
c00141ed:	5e                   	pop    esi
c00141ee:	e9 c5 ba ff ff       	jmp    c000fcb8 <KePanic(char const*)>
c00141f3:	83 ec 0c             	sub    esp,0xc
c00141f6:	68 3c 85 02 c0       	push   0xc002853c
c00141fb:	e8 b8 ba ff ff       	call   c000fcb8 <KePanic(char const*)>
c0014200:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014202:	83 c4 10             	add    esp,0x10
c0014205:	eb ad                	jmp    c00141b4 <VAS::lockPage(unsigned long)+0x1e>
c0014207:	90                   	nop

c0014208 <VAS::lockPages(unsigned long, int)>:
c0014208:	55                   	push   ebp
c0014209:	57                   	push   edi
c001420a:	56                   	push   esi
c001420b:	53                   	push   ebx
c001420c:	83 ec 0c             	sub    esp,0xc
c001420f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014213:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014217:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001421b:	85 ff                	test   edi,edi
c001421d:	7e 1c                	jle    c001423b <VAS::lockPages(unsigned long, int)+0x33>
c001421f:	31 f6                	xor    esi,esi
c0014221:	83 ec 08             	sub    esp,0x8
c0014224:	83 c6 01             	add    esi,0x1
c0014227:	53                   	push   ebx
c0014228:	81 c3 00 10 00 00    	add    ebx,0x1000
c001422e:	55                   	push   ebp
c001422f:	e8 62 ff ff ff       	call   c0014196 <VAS::lockPage(unsigned long)>
c0014234:	83 c4 10             	add    esp,0x10
c0014237:	39 f7                	cmp    edi,esi
c0014239:	75 e6                	jne    c0014221 <VAS::lockPages(unsigned long, int)+0x19>
c001423b:	83 c4 0c             	add    esp,0xc
c001423e:	5b                   	pop    ebx
c001423f:	5e                   	pop    esi
c0014240:	5f                   	pop    edi
c0014241:	5d                   	pop    ebp
c0014242:	c3                   	ret    
c0014243:	90                   	nop

c0014244 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014244:	55                   	push   ebp
c0014245:	57                   	push   edi
c0014246:	56                   	push   esi
c0014247:	53                   	push   ebx
c0014248:	83 ec 28             	sub    esp,0x28
c001424b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001424f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014253:	50                   	push   eax
c0014254:	e8 f6 ef ff ff       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c0014259:	83 c4 0c             	add    esp,0xc
c001425c:	89 c5                	mov    ebp,eax
c001425e:	6a 07                	push   0x7
c0014260:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014264:	52                   	push   edx
c0014265:	56                   	push   esi
c0014266:	e8 cb f7 ff ff       	call   c0013a36 <VAS::allocatePages(int, int)>
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	89 c7                	mov    edi,eax
c0014270:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014274:	85 c9                	test   ecx,ecx
c0014276:	74 2f                	je     c00142a7 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014278:	31 db                	xor    ebx,ebx
c001427a:	e8 2d bc ff ff       	call   c000feac <Phys::allocatePage()>
c001427f:	83 c3 01             	add    ebx,0x1
c0014282:	6a 03                	push   0x3
c0014284:	55                   	push   ebp
c0014285:	50                   	push   eax
c0014286:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001428a:	56                   	push   esi
c001428b:	e8 a2 f6 ff ff       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014290:	6a 07                	push   0x7
c0014292:	57                   	push   edi
c0014293:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014297:	50                   	push   eax
c0014298:	56                   	push   esi
c0014299:	e8 94 f6 ff ff       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c001429e:	83 c4 20             	add    esp,0x20
c00142a1:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c00142a5:	75 d3                	jne    c001427a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c00142a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00142ab:	89 28                	mov    DWORD PTR [eax],ebp
c00142ad:	83 c4 1c             	add    esp,0x1c
c00142b0:	89 f8                	mov    eax,edi
c00142b2:	5b                   	pop    ebx
c00142b3:	5e                   	pop    esi
c00142b4:	5f                   	pop    edi
c00142b5:	5d                   	pop    ebp
c00142b6:	c3                   	ret    
c00142b7:	90                   	nop

c00142b8 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00142b8:	53                   	push   ebx
c00142b9:	83 ec 14             	sub    esp,0x14
c00142bc:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00142c0:	68 6c 85 02 c0       	push   0xc002856c
c00142c5:	e8 b2 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00142ca:	c7 04 24 cc 85 02 c0 	mov    DWORD PTR [esp],0xc00285cc
c00142d1:	e8 a6 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00142d6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142da:	83 c4 18             	add    esp,0x18
c00142dd:	5b                   	pop    ebx
c00142de:	e9 74 f2 ff ff       	jmp    c0013557 <Virt::freeKernelVirtualPages(unsigned long)>
c00142e3:	90                   	nop

c00142e4 <VAS::scanForEviction()>:
c00142e4:	57                   	push   edi
c00142e5:	56                   	push   esi
c00142e6:	31 f6                	xor    esi,esi
c00142e8:	53                   	push   ebx
c00142e9:	83 ec 18             	sub    esp,0x18
c00142ec:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00142f0:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00142f5:	50                   	push   eax
c00142f6:	68 48 86 02 c0       	push   0xc0028648
c00142fb:	e8 7c 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014300:	c7 04 24 91 87 02 c0 	mov    DWORD PTR [esp],0xc0028791
c0014307:	e8 70 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001430c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001430f:	83 c4 10             	add    esp,0x10
c0014312:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014318:	75 0e                	jne    c0014328 <VAS::scanForEviction()+0x44>
c001431a:	89 da                	mov    edx,ebx
c001431c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001431f:	c1 ea 16             	shr    edx,0x16
c0014322:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014326:	74 5b                	je     c0014383 <VAS::scanForEviction()+0x9f>
c0014328:	83 ec 08             	sub    esp,0x8
c001432b:	53                   	push   ebx
c001432c:	57                   	push   edi
c001432d:	e8 06 f2 ff ff       	call   c0013538 <VAS::getPageTableEntry(unsigned long)>
c0014332:	83 c4 10             	add    esp,0x10
c0014335:	8b 10                	mov    edx,DWORD PTR [eax]
c0014337:	89 d1                	mov    ecx,edx
c0014339:	c1 e9 0c             	shr    ecx,0xc
c001433c:	74 10                	je     c001434e <VAS::scanForEviction()+0x6a>
c001433e:	89 d1                	mov    ecx,edx
c0014340:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0014346:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c001434c:	74 40                	je     c001438e <VAS::scanForEviction()+0xaa>
c001434e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014354:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001435a:	76 2d                	jbe    c0014389 <VAS::scanForEviction()+0xa5>
c001435c:	83 c6 01             	add    esi,0x1
c001435f:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014366:	83 fe 03             	cmp    esi,0x3
c0014369:	74 37                	je     c00143a2 <VAS::scanForEviction()+0xbe>
c001436b:	31 db                	xor    ebx,ebx
c001436d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014373:	75 b3                	jne    c0014328 <VAS::scanForEviction()+0x44>
c0014375:	89 da                	mov    edx,ebx
c0014377:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001437a:	c1 ea 16             	shr    edx,0x16
c001437d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014381:	75 a5                	jne    c0014328 <VAS::scanForEviction()+0x44>
c0014383:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014389:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001438c:	eb 84                	jmp    c0014312 <VAS::scanForEviction()+0x2e>
c001438e:	f6 c2 01             	test   dl,0x1
c0014391:	74 bb                	je     c001434e <VAS::scanForEviction()+0x6a>
c0014393:	f6 c2 20             	test   dl,0x20
c0014396:	74 13                	je     c00143ab <VAS::scanForEviction()+0xc7>
c0014398:	83 e2 df             	and    edx,0xffffffdf
c001439b:	89 10                	mov    DWORD PTR [eax],edx
c001439d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00143a0:	eb ac                	jmp    c001434e <VAS::scanForEviction()+0x6a>
c00143a2:	83 c4 10             	add    esp,0x10
c00143a5:	31 c0                	xor    eax,eax
c00143a7:	5b                   	pop    ebx
c00143a8:	5e                   	pop    esi
c00143a9:	5f                   	pop    edi
c00143aa:	c3                   	ret    
c00143ab:	83 ec 08             	sub    esp,0x8
c00143ae:	89 d0                	mov    eax,edx
c00143b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00143b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143b9:	53                   	push   ebx
c00143ba:	68 ad 87 02 c0       	push   0xc00287ad
c00143bf:	e8 b8 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143c4:	58                   	pop    eax
c00143c5:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00143c8:	5a                   	pop    edx
c00143c9:	51                   	push   ecx
c00143ca:	57                   	push   edi
c00143cb:	e8 82 fa ff ff       	call   c0013e52 <VAS::evict(unsigned long)>
c00143d0:	5b                   	pop    ebx
c00143d1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00143d4:	5e                   	pop    esi
c00143d5:	50                   	push   eax
c00143d6:	68 c1 87 02 c0       	push   0xc00287c1
c00143db:	e8 9c 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143e0:	58                   	pop    eax
c00143e1:	5a                   	pop    edx
c00143e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143e6:	50                   	push   eax
c00143e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00143eb:	68 d4 87 02 c0       	push   0xc00287d4
c00143f0:	e8 87 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143f5:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00143f8:	81 c1 00 10 00 00    	add    ecx,0x1000
c00143fe:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0014401:	8b 3d 30 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031330
c0014407:	5b                   	pop    ebx
c0014408:	5e                   	pop    esi
c0014409:	57                   	push   edi
c001440a:	68 68 86 02 c0       	push   0xc0028668
c001440f:	e8 68 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014414:	83 c4 10             	add    esp,0x10
c0014417:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001441b:	83 c4 10             	add    esp,0x10
c001441e:	5b                   	pop    ebx
c001441f:	5e                   	pop    esi
c0014420:	5f                   	pop    edi
c0014421:	c3                   	ret    

c0014422 <mapVASFirstTime>:
c0014422:	55                   	push   ebp
c0014423:	57                   	push   edi
c0014424:	56                   	push   esi
c0014425:	53                   	push   ebx
c0014426:	83 ec 0c             	sub    esp,0xc
c0014429:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001442e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014431:	83 fa 01             	cmp    edx,0x1
c0014434:	0f 84 cb 00 00 00    	je     c0014505 <mapVASFirstTime+0xe3>
c001443a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001443d:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014440:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014445:	c1 e5 15             	shl    ebp,0x15
c0014448:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001444d:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014453:	29 eb                	sub    ebx,ebp
c0014455:	29 ef                	sub    edi,ebp
c0014457:	e8 50 ba ff ff       	call   c000feac <Phys::allocatePage()>
c001445c:	83 ec 0c             	sub    esp,0xc
c001445f:	68 03 04 00 00       	push   0x403
c0014464:	6a 01                	push   0x1
c0014466:	53                   	push   ebx
c0014467:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001446d:	50                   	push   eax
c001446e:	56                   	push   esi
c001446f:	e8 a8 f6 ff ff       	call   c0013b1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014474:	83 c4 20             	add    esp,0x20
c0014477:	39 fb                	cmp    ebx,edi
c0014479:	75 dc                	jne    c0014457 <mapVASFirstTime+0x35>
c001447b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014480:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014485:	29 eb                	sub    ebx,ebp
c0014487:	29 ef                	sub    edi,ebp
c0014489:	e8 1e ba ff ff       	call   c000feac <Phys::allocatePage()>
c001448e:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014492:	83 fa 01             	cmp    edx,0x1
c0014495:	19 d2                	sbb    edx,edx
c0014497:	83 ec 0c             	sub    esp,0xc
c001449a:	83 e2 04             	and    edx,0x4
c001449d:	81 c2 03 04 00 00    	add    edx,0x403
c00144a3:	52                   	push   edx
c00144a4:	6a 01                	push   0x1
c00144a6:	53                   	push   ebx
c00144a7:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00144ad:	50                   	push   eax
c00144ae:	56                   	push   esi
c00144af:	e8 68 f6 ff ff       	call   c0013b1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00144b4:	83 c4 20             	add    esp,0x20
c00144b7:	39 df                	cmp    edi,ebx
c00144b9:	75 ce                	jne    c0014489 <mapVASFirstTime+0x67>
c00144bb:	83 ec 0c             	sub    esp,0xc
c00144be:	bb 7c d0 02 c0       	mov    ebx,0xc002d07c
c00144c3:	6a 04                	push   0x4
c00144c5:	81 eb 00 c0 02 c0    	sub    ebx,0xc002c000
c00144cb:	6a ff                	push   0xffffffff
c00144cd:	c1 eb 0c             	shr    ebx,0xc
c00144d0:	53                   	push   ebx
c00144d1:	68 00 c0 02 c0       	push   0xc002c000
c00144d6:	56                   	push   esi
c00144d7:	e8 f6 f1 ff ff       	call   c00136d2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00144dc:	83 c4 14             	add    esp,0x14
c00144df:	a1 90 12 03 c0       	mov    eax,ds:0xc0031290
c00144e4:	6a 04                	push   0x4
c00144e6:	6a ff                	push   0xffffffff
c00144e8:	53                   	push   ebx
c00144e9:	68 00 c0 02 c0       	push   0xc002c000
c00144ee:	50                   	push   eax
c00144ef:	e8 de f1 ff ff       	call   c00136d2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00144f4:	0f 20 d8             	mov    eax,cr3
c00144f7:	0f 22 d8             	mov    cr3,eax
c00144fa:	83 c4 20             	add    esp,0x20
c00144fd:	83 c4 0c             	add    esp,0xc
c0014500:	5b                   	pop    ebx
c0014501:	5e                   	pop    esi
c0014502:	5f                   	pop    edi
c0014503:	5d                   	pop    ebp
c0014504:	c3                   	ret    
c0014505:	83 ec 0c             	sub    esp,0xc
c0014508:	68 e1 87 02 c0       	push   0xc00287e1
c001450d:	e8 6a 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014512:	83 c4 10             	add    esp,0x10
c0014515:	83 c4 0c             	add    esp,0xc
c0014518:	5b                   	pop    ebx
c0014519:	5e                   	pop    esi
c001451a:	5f                   	pop    edi
c001451b:	5d                   	pop    ebp
c001451c:	c3                   	ret    

c001451d <SysAlarm(regs*)>:
c001451d:	53                   	push   ebx
c001451e:	83 ec 10             	sub    esp,0x10
c0014521:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014525:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014528:	68 fa 87 02 c0       	push   0xc00287fa
c001452d:	e8 4a 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014532:	83 c4 0c             	add    esp,0xc
c0014535:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014538:	31 d2                	xor    edx,edx
c001453a:	52                   	push   edx
c001453b:	50                   	push   eax
c001453c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014542:	e8 ad 09 00 00       	call   c0014ef4 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014547:	83 c4 18             	add    esp,0x18
c001454a:	5b                   	pop    ebx
c001454b:	c3                   	ret    

c001454c <SysEject(regs*)>:
c001454c:	83 ec 0c             	sub    esp,0xc
c001454f:	83 ca ff             	or     edx,0xffffffff
c0014552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014556:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014559:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001455e:	83 e9 41             	sub    ecx,0x41
c0014561:	83 f9 19             	cmp    ecx,0x19
c0014564:	77 18                	ja     c001457e <SysEject(regs*)+0x32>
c0014566:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c001456d:	85 c9                	test   ecx,ecx
c001456f:	74 0d                	je     c001457e <SysEject(regs*)+0x32>
c0014571:	83 ec 0c             	sub    esp,0xc
c0014574:	51                   	push   ecx
c0014575:	e8 8e 64 ff ff       	call   c000aa08 <LogicalDisk::eject()>
c001457a:	83 c4 10             	add    esp,0x10
c001457d:	99                   	cdq    
c001457e:	83 c4 0c             	add    esp,0xc
c0014581:	c3                   	ret    

c0014582 <SysExit(regs*)>:
c0014582:	83 ec 18             	sub    esp,0x18
c0014585:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014589:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001458c:	e8 af 2a 00 00       	call   c0017040 <KeTerminateCurrentThread(int)>
c0014591:	83 c8 ff             	or     eax,0xffffffff
c0014594:	83 c4 1c             	add    esp,0x1c
c0014597:	89 c2                	mov    edx,eax
c0014599:	c3                   	ret    

c001459a <SysGetCwd(regs*)>:
c001459a:	83 ec 10             	sub    esp,0x10
c001459d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145a1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00145a4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00145a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145ac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00145af:	e8 6a 38 ff ff       	call   c0007e1e <Fs::getcwd(Process*, char*, int)>
c00145b4:	83 c4 1c             	add    esp,0x1c
c00145b7:	99                   	cdq    
c00145b8:	c3                   	ret    

c00145b9 <SysGetPID(regs*)>:
c00145b9:	83 ec 14             	sub    esp,0x14
c00145bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145c4:	ff 30                	push   DWORD PTR [eax]
c00145c6:	68 0f 88 02 c0       	push   0xc002880f
c00145cb:	e8 ac 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00145d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00145da:	83 c4 1c             	add    esp,0x1c
c00145dd:	99                   	cdq    
c00145de:	c3                   	ret    

c00145df <SysGetRAMData(regs*)>:
c00145df:	8b 0d 7c 11 03 c0    	mov    ecx,DWORD PTR ds:0xc003117c
c00145e5:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c00145ea:	03 05 78 11 03 c0    	add    eax,DWORD PTR ds:0xc0031178
c00145f0:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00145f6:	99                   	cdq    
c00145f7:	f7 f9                	idiv   ecx
c00145f9:	c1 e0 18             	shl    eax,0x18
c00145fc:	09 c8                	or     eax,ecx
c00145fe:	99                   	cdq    
c00145ff:	c3                   	ret    

c0014600 <SysGetVGAPtr(regs*)>:
c0014600:	55                   	push   ebp
c0014601:	57                   	push   edi
c0014602:	56                   	push   esi
c0014603:	53                   	push   ebx
c0014604:	83 ec 1c             	sub    esp,0x1c
c0014607:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001460b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001460e:	83 f8 ff             	cmp    eax,0xffffffff
c0014611:	74 23                	je     c0014636 <SysGetVGAPtr(regs*)+0x36>
c0014613:	83 ec 0c             	sub    esp,0xc
c0014616:	50                   	push   eax
c0014617:	e8 d0 24 00 00       	call   c0016aec <KeProcessFromPID(int)>
c001461c:	31 d2                	xor    edx,edx
c001461e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014622:	83 c4 10             	add    esp,0x10
c0014625:	b8 01 00 00 00       	mov    eax,0x1
c001462a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001462f:	75 11                	jne    c0014642 <SysGetVGAPtr(regs*)+0x42>
c0014631:	e9 80 00 00 00       	jmp    c00146b6 <SysGetVGAPtr(regs*)+0xb6>
c0014636:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001463b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001463e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014642:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014646:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001464a:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014650:	74 0c                	je     c001465e <SysGetVGAPtr(regs*)+0x5e>
c0014652:	83 ec 0c             	sub    esp,0xc
c0014655:	55                   	push   ebp
c0014656:	e8 7c dc ff ff       	call   c00122d7 <setActiveTerminal(VgaText*)>
c001465b:	83 c4 10             	add    esp,0x10
c001465e:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014661:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014664:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014669:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001466b:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001466e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014671:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014677:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001467a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001467d:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014683:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014687:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001468a:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014691:	c1 e8 07             	shr    eax,0x7
c0014694:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c001469a:	50                   	push   eax
c001469b:	50                   	push   eax
c001469c:	68 1e 88 02 c0       	push   0xc002881e
c00146a1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00146a4:	05 ac 0f 00 00       	add    eax,0xfac
c00146a9:	50                   	push   eax
c00146aa:	e8 91 bf fe ff       	call   c0000640 <strcpy>
c00146af:	83 c4 10             	add    esp,0x10
c00146b2:	31 c0                	xor    eax,eax
c00146b4:	31 d2                	xor    edx,edx
c00146b6:	83 c4 1c             	add    esp,0x1c
c00146b9:	5b                   	pop    ebx
c00146ba:	5e                   	pop    esi
c00146bb:	5f                   	pop    edi
c00146bc:	5d                   	pop    ebp
c00146bd:	c3                   	ret    
c00146be:	66 90                	xchg   ax,ax

c00146c0 <SysKill(regs*)>:
c00146c0:	53                   	push   ebx
c00146c1:	83 ec 08             	sub    esp,0x8
c00146c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146c8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00146cc:	75 16                	jne    c00146e4 <SysKill(regs*)+0x24>
c00146ce:	83 ec 0c             	sub    esp,0xc
c00146d1:	68 28 88 02 c0       	push   0xc0028828
c00146d6:	e8 dd b5 ff ff       	call   c000fcb8 <KePanic(char const*)>
c00146db:	83 c4 10             	add    esp,0x10
c00146de:	e9 89 00 00 00       	jmp    c001476c <SysKill(regs*)+0xac>
c00146e3:	90                   	nop
c00146e4:	83 ec 0c             	sub    esp,0xc
c00146e7:	68 4c 13 03 c0       	push   0xc003134c
c00146ec:	e8 0f 14 01 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00146f1:	8d 76 00             	lea    esi,[esi+0x0]
c00146f4:	83 c4 10             	add    esp,0x10
c00146f7:	85 c0                	test   eax,eax
c00146f9:	74 19                	je     c0014714 <SysKill(regs*)+0x54>
c00146fb:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00146fe:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014701:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014703:	74 33                	je     c0014738 <SysKill(regs*)+0x78>
c0014705:	52                   	push   edx
c0014706:	52                   	push   edx
c0014707:	50                   	push   eax
c0014708:	68 4c 13 03 c0       	push   0xc003134c
c001470d:	e8 fa 18 01 00       	call   c002600c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014712:	eb e0                	jmp    c00146f4 <SysKill(regs*)+0x34>
c0014714:	83 ec 0c             	sub    esp,0xc
c0014717:	68 40 13 03 c0       	push   0xc0031340
c001471c:	e8 df 13 01 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014721:	8d 76 00             	lea    esi,[esi+0x0]
c0014724:	83 c4 10             	add    esp,0x10
c0014727:	85 c0                	test   eax,eax
c0014729:	74 41                	je     c001476c <SysKill(regs*)+0xac>
c001472b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001472e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014731:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014733:	75 27                	jne    c001475c <SysKill(regs*)+0x9c>
c0014735:	8d 76 00             	lea    esi,[esi+0x0]
c0014738:	51                   	push   ecx
c0014739:	51                   	push   ecx
c001473a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001473d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014742:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014745:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001474b:	e8 83 c7 ff ff       	call   c0010ed3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014750:	83 c4 10             	add    esp,0x10
c0014753:	31 c0                	xor    eax,eax
c0014755:	31 d2                	xor    edx,edx
c0014757:	eb 1b                	jmp    c0014774 <SysKill(regs*)+0xb4>
c0014759:	8d 76 00             	lea    esi,[esi+0x0]
c001475c:	52                   	push   edx
c001475d:	52                   	push   edx
c001475e:	50                   	push   eax
c001475f:	68 40 13 03 c0       	push   0xc0031340
c0014764:	e8 a3 18 01 00       	call   c002600c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014769:	eb b9                	jmp    c0014724 <SysKill(regs*)+0x64>
c001476b:	90                   	nop
c001476c:	83 c8 ff             	or     eax,0xffffffff
c001476f:	89 c2                	mov    edx,eax
c0014771:	8d 76 00             	lea    esi,[esi+0x0]
c0014774:	83 c4 08             	add    esp,0x8
c0014777:	5b                   	pop    ebx
c0014778:	c3                   	ret    

c0014779 <SysLoadDLL(regs*)>:
c0014779:	56                   	push   esi
c001477a:	31 d2                	xor    edx,edx
c001477c:	53                   	push   ebx
c001477d:	b8 01 00 00 00       	mov    eax,0x1
c0014782:	53                   	push   ebx
c0014783:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014787:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001478b:	0f 84 82 00 00 00    	je     c0014813 <SysLoadDLL(regs*)+0x9a>
c0014791:	83 ec 0c             	sub    esp,0xc
c0014794:	68 14 01 00 00       	push   0x114
c0014799:	e8 c5 b0 ff ff       	call   c000f863 <malloc>
c001479e:	83 c4 0c             	add    esp,0xc
c00147a1:	89 c3                	mov    ebx,eax
c00147a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147a8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00147ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00147ae:	53                   	push   ebx
c00147af:	e8 d6 39 ff ff       	call   c000818a <File::File(char const*, Process*)>
c00147b4:	83 c4 10             	add    esp,0x10
c00147b7:	31 d2                	xor    edx,edx
c00147b9:	b8 02 00 00 00       	mov    eax,0x2
c00147be:	85 db                	test   ebx,ebx
c00147c0:	74 51                	je     c0014813 <SysLoadDLL(regs*)+0x9a>
c00147c2:	83 ec 0c             	sub    esp,0xc
c00147c5:	53                   	push   ebx
c00147c6:	e8 a1 3c ff ff       	call   c000846c <File::exists()>
c00147cb:	83 c4 10             	add    esp,0x10
c00147ce:	84 c0                	test   al,al
c00147d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147d2:	75 11                	jne    c00147e5 <SysLoadDLL(regs*)+0x6c>
c00147d4:	83 ec 0c             	sub    esp,0xc
c00147d7:	53                   	push   ebx
c00147d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00147db:	83 c4 10             	add    esp,0x10
c00147de:	b8 03 00 00 00       	mov    eax,0x3
c00147e3:	eb 2c                	jmp    c0014811 <SysLoadDLL(regs*)+0x98>
c00147e5:	83 ec 0c             	sub    esp,0xc
c00147e8:	53                   	push   ebx
c00147e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00147ec:	83 c4 0c             	add    esp,0xc
c00147ef:	6a 00                	push   0x0
c00147f1:	ff 35 08 11 03 c0    	push   DWORD PTR ds:0xc0031108
c00147f7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00147fa:	e8 a5 16 00 00       	call   c0015ea4 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c00147ff:	83 c4 10             	add    esp,0x10
c0014802:	88 c1                	mov    cl,al
c0014804:	31 d2                	xor    edx,edx
c0014806:	31 c0                	xor    eax,eax
c0014808:	84 c9                	test   cl,cl
c001480a:	75 07                	jne    c0014813 <SysLoadDLL(regs*)+0x9a>
c001480c:	b8 04 00 00 00       	mov    eax,0x4
c0014811:	31 d2                	xor    edx,edx
c0014813:	59                   	pop    ecx
c0014814:	5b                   	pop    ebx
c0014815:	5e                   	pop    esi
c0014816:	c3                   	ret    

c0014817 <SysPause(regs*)>:
c0014817:	83 ec 18             	sub    esp,0x18
c001481a:	6a 08                	push   0x8
c001481c:	e8 df 20 00 00       	call   c0016900 <blockTask(TaskState)>
c0014821:	31 c0                	xor    eax,eax
c0014823:	31 d2                	xor    edx,edx
c0014825:	83 c4 1c             	add    esp,0x1c
c0014828:	c3                   	ret    

c0014829 <SysPthreadCreate(regs*)>:
c0014829:	83 ec 18             	sub    esp,0x18
c001482c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014831:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014834:	e8 9f 1e 00 00       	call   c00166d8 <Process::createUserThread()>
c0014839:	31 c0                	xor    eax,eax
c001483b:	31 d2                	xor    edx,edx
c001483d:	83 c4 1c             	add    esp,0x1c
c0014840:	c3                   	ret    

c0014841 <SysPthreadGetTID(regs*)>:
c0014841:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014846:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014849:	99                   	cdq    
c001484a:	c3                   	ret    

c001484b <SysInternalPthreadGetContext(regs*)>:
c001484b:	31 c0                	xor    eax,eax
c001484d:	31 d2                	xor    edx,edx
c001484f:	c3                   	ret    

c0014850 <SysInternalPthreadGetStartLocation(regs*)>:
c0014850:	31 c0                	xor    eax,eax
c0014852:	31 d2                	xor    edx,edx
c0014854:	c3                   	ret    

c0014855 <SysPthreadJoin(regs*)>:
c0014855:	31 c0                	xor    eax,eax
c0014857:	31 d2                	xor    edx,edx
c0014859:	c3                   	ret    

c001485a <SysPthreadExit(regs*)>:
c001485a:	83 ec 18             	sub    esp,0x18
c001485d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014861:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014864:	e8 d7 27 00 00       	call   c0017040 <KeTerminateCurrentThread(int)>
c0014869:	83 c8 ff             	or     eax,0xffffffff
c001486c:	83 c4 1c             	add    esp,0x1c
c001486f:	89 c2                	mov    edx,eax
c0014871:	c3                   	ret    

c0014872 <SysRead(regs*)>:
c0014872:	57                   	push   edi
c0014873:	56                   	push   esi
c0014874:	53                   	push   ebx
c0014875:	83 ec 10             	sub    esp,0x10
c0014878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001487c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001487f:	83 f8 02             	cmp    eax,0x2
c0014882:	77 10                	ja     c0014894 <SysRead(regs*)+0x22>
c0014884:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014889:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001488c:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014892:	eb 0e                	jmp    c00148a2 <SysRead(regs*)+0x30>
c0014894:	83 ec 0c             	sub    esp,0xc
c0014897:	50                   	push   eax
c0014898:	e8 54 e8 ff ff       	call   c00130f1 <KeGetFileFromDescriptor(int)>
c001489d:	83 c4 10             	add    esp,0x10
c00148a0:	89 c1                	mov    ecx,eax
c00148a2:	83 c8 ff             	or     eax,0xffffffff
c00148a5:	85 c9                	test   ecx,ecx
c00148a7:	89 c2                	mov    edx,eax
c00148a9:	74 28                	je     c00148d3 <SysRead(regs*)+0x61>
c00148ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148b3:	31 ff                	xor    edi,edi
c00148b5:	83 ec 0c             	sub    esp,0xc
c00148b8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00148ba:	8d 54 24 18          	lea    edx,[esp+0x18]
c00148be:	52                   	push   edx
c00148bf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00148c2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00148c5:	57                   	push   edi
c00148c6:	56                   	push   esi
c00148c7:	51                   	push   ecx
c00148c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00148cf:	83 c4 20             	add    esp,0x20
c00148d2:	99                   	cdq    
c00148d3:	83 c4 10             	add    esp,0x10
c00148d6:	5b                   	pop    ebx
c00148d7:	5e                   	pop    esi
c00148d8:	5f                   	pop    edi
c00148d9:	c3                   	ret    

c00148da <SysRegisterSignal(regs*)>:
c00148da:	83 ec 18             	sub    esp,0x18
c00148dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148e1:	6a 00                	push   0x0
c00148e3:	6a 00                	push   0x0
c00148e5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00148e8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00148eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148f3:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00148f9:	e8 9f c5 ff ff       	call   c0010e9d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00148fe:	83 c4 2c             	add    esp,0x2c
c0014901:	99                   	cdq    
c0014902:	c3                   	ret    

c0014903 <SysRegistryGetTypeFromPath(regs*)>:
c0014903:	53                   	push   ebx
c0014904:	81 ec 40 01 00 00    	sub    esp,0x140
c001490a:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014911:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014914:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014917:	e8 b4 96 ff ff       	call   c000dfd0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001491c:	83 c4 10             	add    esp,0x10
c001491f:	89 c1                	mov    ecx,eax
c0014921:	85 c0                	test   eax,eax
c0014923:	74 15                	je     c001493a <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014925:	50                   	push   eax
c0014926:	8d 44 24 08          	lea    eax,[esp+0x8]
c001492a:	50                   	push   eax
c001492b:	51                   	push   ecx
c001492c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001492f:	e8 80 92 ff ff       	call   c000dbb4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014934:	83 c4 10             	add    esp,0x10
c0014937:	99                   	cdq    
c0014938:	eb 05                	jmp    c001493f <SysRegistryGetTypeFromPath(regs*)+0x3c>
c001493a:	83 c8 ff             	or     eax,0xffffffff
c001493d:	89 c2                	mov    edx,eax
c001493f:	81 c4 38 01 00 00    	add    esp,0x138
c0014945:	5b                   	pop    ebx
c0014946:	c3                   	ret    

c0014947 <SysRegistryReadExtent(regs*)>:
c0014947:	83 ec 1c             	sub    esp,0x1c
c001494a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001494e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014951:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014954:	85 c0                	test   eax,eax
c0014956:	79 1f                	jns    c0014977 <SysRegistryReadExtent(regs*)+0x30>
c0014958:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001495d:	52                   	push   edx
c001495e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014962:	52                   	push   edx
c0014963:	50                   	push   eax
c0014964:	51                   	push   ecx
c0014965:	e8 3c 91 ff ff       	call   c000daa6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001496a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001496e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014972:	83 c4 10             	add    esp,0x10
c0014975:	eb 14                	jmp    c001498b <SysRegistryReadExtent(regs*)+0x44>
c0014977:	83 ec 04             	sub    esp,0x4
c001497a:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001497d:	50                   	push   eax
c001497e:	51                   	push   ecx
c001497f:	e8 bc 8b ff ff       	call   c000d540 <CmGetString(Reghive_Tag*, int, char*)>
c0014984:	83 c4 10             	add    esp,0x10
c0014987:	31 c0                	xor    eax,eax
c0014989:	31 d2                	xor    edx,edx
c001498b:	83 c4 1c             	add    esp,0x1c
c001498e:	c3                   	ret    

c001498f <SysRegistryPathToExtentLookup(regs*)>:
c001498f:	83 ec 14             	sub    esp,0x14
c0014992:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014996:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014999:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001499c:	e8 2f 96 ff ff       	call   c000dfd0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00149a1:	83 c4 1c             	add    esp,0x1c
c00149a4:	99                   	cdq    
c00149a5:	c3                   	ret    

c00149a6 <SysRegistryEnterDirectory(regs*)>:
c00149a6:	83 ec 14             	sub    esp,0x14
c00149a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149ad:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00149b0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149b3:	e8 ff 8b ff ff       	call   c000d5b7 <CmEnterDirectory(Reghive_Tag*, int)>
c00149b8:	83 c4 1c             	add    esp,0x1c
c00149bb:	99                   	cdq    
c00149bc:	c3                   	ret    

c00149bd <SysRegistryGetNext(regs*)>:
c00149bd:	83 ec 14             	sub    esp,0x14
c00149c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149c4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00149c7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149ca:	e8 27 8c ff ff       	call   c000d5f6 <CmGetNext(Reghive_Tag*, int)>
c00149cf:	83 c4 1c             	add    esp,0x1c
c00149d2:	99                   	cdq    
c00149d3:	c3                   	ret    

c00149d4 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00149d4:	57                   	push   edi
c00149d5:	56                   	push   esi
c00149d6:	53                   	push   ebx
c00149d7:	81 ec 34 01 00 00    	sub    esp,0x134
c00149dd:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00149e4:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00149e8:	57                   	push   edi
c00149e9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00149ec:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00149ef:	e8 c0 91 ff ff       	call   c000dbb4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00149f4:	89 c3                	mov    ebx,eax
c00149f6:	58                   	pop    eax
c00149f7:	5a                   	pop    edx
c00149f8:	57                   	push   edi
c00149f9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00149fc:	e8 3f bc fe ff       	call   c0000640 <strcpy>
c0014a01:	89 d8                	mov    eax,ebx
c0014a03:	81 c4 40 01 00 00    	add    esp,0x140
c0014a09:	99                   	cdq    
c0014a0a:	5b                   	pop    ebx
c0014a0b:	5e                   	pop    esi
c0014a0c:	5f                   	pop    edi
c0014a0d:	c3                   	ret    

c0014a0e <SysRegistryOpen(regs*)>:
c0014a0e:	83 ec 18             	sub    esp,0x18
c0014a11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a15:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014a18:	e8 b3 89 ff ff       	call   c000d3d0 <CmOpen(char const*)>
c0014a1d:	83 c4 1c             	add    esp,0x1c
c0014a20:	99                   	cdq    
c0014a21:	c3                   	ret    

c0014a22 <SysRegistryClose(regs*)>:
c0014a22:	83 ec 18             	sub    esp,0x18
c0014a25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a29:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a2c:	e8 bd 8a ff ff       	call   c000d4ee <CmClose(Reghive_Tag*)>
c0014a31:	31 c0                	xor    eax,eax
c0014a33:	31 d2                	xor    edx,edx
c0014a35:	83 c4 1c             	add    esp,0x1c
c0014a38:	c3                   	ret    

c0014a39 <SysRegistryEasyReadString(regs*)>:
c0014a39:	57                   	push   edi
c0014a3a:	56                   	push   esi
c0014a3b:	53                   	push   ebx
c0014a3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a40:	83 ec 0c             	sub    esp,0xc
c0014a43:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014a46:	e8 85 89 ff ff       	call   c000d3d0 <CmOpen(char const*)>
c0014a4b:	5a                   	pop    edx
c0014a4c:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014a4f:	59                   	pop    ecx
c0014a50:	89 c3                	mov    ebx,eax
c0014a52:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a55:	50                   	push   eax
c0014a56:	e8 75 95 ff ff       	call   c000dfd0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014a5b:	83 c4 10             	add    esp,0x10
c0014a5e:	89 c1                	mov    ecx,eax
c0014a60:	b8 01 00 00 00       	mov    eax,0x1
c0014a65:	85 c9                	test   ecx,ecx
c0014a67:	7e 16                	jle    c0014a7f <SysRegistryEasyReadString(regs*)+0x46>
c0014a69:	50                   	push   eax
c0014a6a:	57                   	push   edi
c0014a6b:	51                   	push   ecx
c0014a6c:	53                   	push   ebx
c0014a6d:	e8 ce 8a ff ff       	call   c000d540 <CmGetString(Reghive_Tag*, int, char*)>
c0014a72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a75:	e8 74 8a ff ff       	call   c000d4ee <CmClose(Reghive_Tag*)>
c0014a7a:	83 c4 10             	add    esp,0x10
c0014a7d:	31 c0                	xor    eax,eax
c0014a7f:	5b                   	pop    ebx
c0014a80:	31 d2                	xor    edx,edx
c0014a82:	5e                   	pop    esi
c0014a83:	5f                   	pop    edi
c0014a84:	c3                   	ret    

c0014a85 <SysRegistryEasyReadInteger(regs*)>:
c0014a85:	56                   	push   esi
c0014a86:	53                   	push   ebx
c0014a87:	83 ec 10             	sub    esp,0x10
c0014a8a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014a8e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014a91:	e8 3a 89 ff ff       	call   c000d3d0 <CmOpen(char const*)>
c0014a96:	5a                   	pop    edx
c0014a97:	89 c3                	mov    ebx,eax
c0014a99:	59                   	pop    ecx
c0014a9a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a9d:	50                   	push   eax
c0014a9e:	e8 2d 95 ff ff       	call   c000dfd0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014aa3:	83 c4 10             	add    esp,0x10
c0014aa6:	89 c1                	mov    ecx,eax
c0014aa8:	b8 01 00 00 00       	mov    eax,0x1
c0014aad:	85 c9                	test   ecx,ecx
c0014aaf:	7e 18                	jle    c0014ac9 <SysRegistryEasyReadInteger(regs*)+0x44>
c0014ab1:	50                   	push   eax
c0014ab2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014ab5:	51                   	push   ecx
c0014ab6:	53                   	push   ebx
c0014ab7:	e8 ea 8f ff ff       	call   c000daa6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014abc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014abf:	e8 2a 8a ff ff       	call   c000d4ee <CmClose(Reghive_Tag*)>
c0014ac4:	83 c4 10             	add    esp,0x10
c0014ac7:	31 c0                	xor    eax,eax
c0014ac9:	59                   	pop    ecx
c0014aca:	31 d2                	xor    edx,edx
c0014acc:	5b                   	pop    ebx
c0014acd:	5e                   	pop    esi
c0014ace:	c3                   	ret    

c0014acf <SysSbrk(regs*)>:
c0014acf:	56                   	push   esi
c0014ad0:	53                   	push   ebx
c0014ad1:	50                   	push   eax
c0014ad2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ad7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014adb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ade:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014ae1:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014ae7:	85 db                	test   ebx,ebx
c0014ae9:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014aec:	74 02                	je     c0014af0 <SysSbrk(regs*)+0x21>
c0014aee:	79 06                	jns    c0014af6 <SysSbrk(regs*)+0x27>
c0014af0:	89 f0                	mov    eax,esi
c0014af2:	31 d2                	xor    edx,edx
c0014af4:	eb 2a                	jmp    c0014b20 <SysSbrk(regs*)+0x51>
c0014af6:	83 c8 ff             	or     eax,0xffffffff
c0014af9:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014aff:	89 c2                	mov    edx,eax
c0014b01:	77 1d                	ja     c0014b20 <SysSbrk(regs*)+0x51>
c0014b03:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014b09:	50                   	push   eax
c0014b0a:	c1 ea 0c             	shr    edx,0xc
c0014b0d:	68 07 0c 00 00       	push   0xc07
c0014b12:	52                   	push   edx
c0014b13:	51                   	push   ecx
c0014b14:	e8 1d ef ff ff       	call   c0013a36 <VAS::allocatePages(int, int)>
c0014b19:	89 f0                	mov    eax,esi
c0014b1b:	31 d2                	xor    edx,edx
c0014b1d:	83 c4 10             	add    esp,0x10
c0014b20:	59                   	pop    ecx
c0014b21:	5b                   	pop    ebx
c0014b22:	5e                   	pop    esi
c0014b23:	c3                   	ret    

c0014b24 <SysSetCwd(regs*)>:
c0014b24:	83 ec 14             	sub    esp,0x14
c0014b27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b2b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b33:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014b36:	e8 d0 39 ff ff       	call   c000850b <Fs::setcwd(Process*, char*)>
c0014b3b:	83 c4 1c             	add    esp,0x1c
c0014b3e:	99                   	cdq    
c0014b3f:	c3                   	ret    

c0014b40 <SysSetTime(regs*)>:
c0014b40:	55                   	push   ebp
c0014b41:	31 d2                	xor    edx,edx
c0014b43:	57                   	push   edi
c0014b44:	56                   	push   esi
c0014b45:	be 18 00 00 00       	mov    esi,0x18
c0014b4a:	53                   	push   ebx
c0014b4b:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014b50:	83 ec 20             	sub    esp,0x20
c0014b53:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014b57:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014b5a:	f7 f3                	div    ebx
c0014b5c:	89 d7                	mov    edi,edx
c0014b5e:	31 d2                	xor    edx,edx
c0014b60:	f7 f3                	div    ebx
c0014b62:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014b65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014b69:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014b6e:	31 d2                	xor    edx,edx
c0014b70:	f7 f3                	div    ebx
c0014b72:	31 d2                	xor    edx,edx
c0014b74:	f7 f6                	div    esi
c0014b76:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014b79:	89 d5                	mov    ebp,edx
c0014b7b:	89 c3                	mov    ebx,eax
c0014b7d:	be 0c 00 00 00       	mov    esi,0xc
c0014b82:	83 e3 1f             	and    ebx,0x1f
c0014b85:	c1 e8 05             	shr    eax,0x5
c0014b88:	43                   	inc    ebx
c0014b89:	31 d2                	xor    edx,edx
c0014b8b:	f7 f6                	div    esi
c0014b8d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014b91:	57                   	push   edi
c0014b92:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b96:	55                   	push   ebp
c0014b97:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0014b9b:	56                   	push   esi
c0014b9c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ba0:	53                   	push   ebx
c0014ba1:	68 49 88 02 c0       	push   0xc0028849
c0014ba6:	e8 d1 23 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014bab:	83 c4 1c             	add    esp,0x1c
c0014bae:	57                   	push   edi
c0014baf:	c1 e7 10             	shl    edi,0x10
c0014bb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014bb6:	55                   	push   ebp
c0014bb7:	56                   	push   esi
c0014bb8:	c1 e6 10             	shl    esi,0x10
c0014bbb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014bbf:	53                   	push   ebx
c0014bc0:	68 6b 88 02 c0       	push   0xc002886b
c0014bc5:	e8 b2 23 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014bca:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0014bcf:	31 d2                	xor    edx,edx
c0014bd1:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
c0014bd7:	31 c0                	xor    eax,eax
c0014bd9:	88 d8                	mov    al,bl
c0014bdb:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c0014bdf:	0f b7 d8             	movzx  ebx,ax
c0014be2:	09 f3                	or     ebx,esi
c0014be4:	89 d8                	mov    eax,ebx
c0014be6:	89 eb                	mov    ebx,ebp
c0014be8:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0014bec:	88 da                	mov    dl,bl
c0014bee:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c0014bf2:	83 c4 1c             	add    esp,0x1c
c0014bf5:	89 d6                	mov    esi,edx
c0014bf7:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0014bfd:	09 fe                	or     esi,edi
c0014bff:	56                   	push   esi
c0014c00:	50                   	push   eax
c0014c01:	51                   	push   ecx
c0014c02:	e8 75 49 ff ff       	call   c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014c07:	83 c4 2c             	add    esp,0x2c
c0014c0a:	83 f0 01             	xor    eax,0x1
c0014c0d:	5b                   	pop    ebx
c0014c0e:	0f b6 c0             	movzx  eax,al
c0014c11:	5e                   	pop    esi
c0014c12:	31 d2                	xor    edx,edx
c0014c14:	5f                   	pop    edi
c0014c15:	5d                   	pop    ebp
c0014c16:	c3                   	ret    

c0014c17 <SysSymlink(regs*)>:
c0014c17:	56                   	push   esi
c0014c18:	83 c8 ff             	or     eax,0xffffffff
c0014c1b:	53                   	push   ebx
c0014c1c:	89 c2                	mov    edx,eax
c0014c1e:	81 ec 34 02 00 00    	sub    esp,0x234
c0014c24:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014c2b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014c2f:	74 50                	je     c0014c81 <SysSymlink(regs*)+0x6a>
c0014c31:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014c34:	85 c9                	test   ecx,ecx
c0014c36:	74 49                	je     c0014c81 <SysSymlink(regs*)+0x6a>
c0014c38:	6a 01                	push   0x1
c0014c3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c3f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c42:	05 0c 01 00 00       	add    eax,0x10c
c0014c47:	50                   	push   eax
c0014c48:	51                   	push   ecx
c0014c49:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014c4d:	56                   	push   esi
c0014c4e:	e8 1f 32 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014c53:	6a 01                	push   0x1
c0014c55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c5d:	05 0c 01 00 00       	add    eax,0x10c
c0014c62:	50                   	push   eax
c0014c63:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c66:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014c6d:	53                   	push   ebx
c0014c6e:	e8 ff 31 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014c73:	83 c4 18             	add    esp,0x18
c0014c76:	56                   	push   esi
c0014c77:	53                   	push   ebx
c0014c78:	e8 23 2e ff ff       	call   c0007aa0 <KeCreateSymlink(char const*, char const*)>
c0014c7d:	83 c4 10             	add    esp,0x10
c0014c80:	99                   	cdq    
c0014c81:	81 c4 34 02 00 00    	add    esp,0x234
c0014c87:	5b                   	pop    ebx
c0014c88:	5e                   	pop    esi
c0014c89:	c3                   	ret    

c0014c8a <SysTimezone(regs*)>:
c0014c8a:	83 ec 0c             	sub    esp,0xc
c0014c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c91:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014c95:	75 17                	jne    c0014cae <SysTimezone(regs*)+0x24>
c0014c97:	83 ec 0c             	sub    esp,0xc
c0014c9a:	68 8d 88 02 c0       	push   0xc002888d
c0014c9f:	e8 d8 22 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014ca4:	83 c8 ff             	or     eax,0xffffffff
c0014ca7:	83 c4 10             	add    esp,0x10
c0014caa:	89 c2                	mov    edx,eax
c0014cac:	eb 16                	jmp    c0014cc4 <SysTimezone(regs*)+0x3a>
c0014cae:	83 ec 0c             	sub    esp,0xc
c0014cb1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014cb4:	e8 50 43 ff ff       	call   c0009009 <KeSetTimezone(int)>
c0014cb9:	31 d2                	xor    edx,edx
c0014cbb:	83 f0 01             	xor    eax,0x1
c0014cbe:	83 c4 10             	add    esp,0x10
c0014cc1:	0f b6 c0             	movzx  eax,al
c0014cc4:	83 c4 0c             	add    esp,0xc
c0014cc7:	c3                   	ret    

c0014cc8 <SysTruncate(regs*)>:
c0014cc8:	55                   	push   ebp
c0014cc9:	57                   	push   edi
c0014cca:	31 ff                	xor    edi,edi
c0014ccc:	56                   	push   esi
c0014ccd:	53                   	push   ebx
c0014cce:	83 ec 0c             	sub    esp,0xc
c0014cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cd5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014cd8:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014cdb:	89 ce                	mov    esi,ecx
c0014cdd:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014ce1:	0f 84 9a 00 00 00    	je     c0014d81 <SysTruncate(regs*)+0xb9>
c0014ce7:	83 ec 0c             	sub    esp,0xc
c0014cea:	68 14 01 00 00       	push   0x114
c0014cef:	e8 6f ab ff ff       	call   c000f863 <malloc>
c0014cf4:	83 c4 0c             	add    esp,0xc
c0014cf7:	89 c3                	mov    ebx,eax
c0014cf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cfe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014d01:	55                   	push   ebp
c0014d02:	53                   	push   ebx
c0014d03:	e8 82 34 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0014d08:	83 c4 10             	add    esp,0x10
c0014d0b:	31 d2                	xor    edx,edx
c0014d0d:	b8 03 00 00 00       	mov    eax,0x3
c0014d12:	85 db                	test   ebx,ebx
c0014d14:	0f 84 a2 00 00 00    	je     c0014dbc <SysTruncate(regs*)+0xf4>
c0014d1a:	51                   	push   ecx
c0014d1b:	51                   	push   ecx
c0014d1c:	6a 02                	push   0x2
c0014d1e:	53                   	push   ebx
c0014d1f:	e8 84 34 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0014d24:	83 c4 10             	add    esp,0x10
c0014d27:	85 c0                	test   eax,eax
c0014d29:	74 13                	je     c0014d3e <SysTruncate(regs*)+0x76>
c0014d2b:	83 ec 0c             	sub    esp,0xc
c0014d2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d30:	53                   	push   ebx
c0014d31:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d34:	83 c4 10             	add    esp,0x10
c0014d37:	b8 04 00 00 00       	mov    eax,0x4
c0014d3c:	eb 7c                	jmp    c0014dba <SysTruncate(regs*)+0xf2>
c0014d3e:	52                   	push   edx
c0014d3f:	57                   	push   edi
c0014d40:	56                   	push   esi
c0014d41:	53                   	push   ebx
c0014d42:	e8 75 35 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c0014d47:	83 c4 10             	add    esp,0x10
c0014d4a:	85 c0                	test   eax,eax
c0014d4c:	74 1b                	je     c0014d69 <SysTruncate(regs*)+0xa1>
c0014d4e:	83 ec 0c             	sub    esp,0xc
c0014d51:	53                   	push   ebx
c0014d52:	e8 af 34 ff ff       	call   c0008206 <File::close()>
c0014d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d5f:	83 c4 10             	add    esp,0x10
c0014d62:	b8 05 00 00 00       	mov    eax,0x5
c0014d67:	eb 51                	jmp    c0014dba <SysTruncate(regs*)+0xf2>
c0014d69:	83 ec 0c             	sub    esp,0xc
c0014d6c:	53                   	push   ebx
c0014d6d:	e8 94 34 ff ff       	call   c0008206 <File::close()>
c0014d72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d7a:	83 c4 10             	add    esp,0x10
c0014d7d:	31 c0                	xor    eax,eax
c0014d7f:	eb 39                	jmp    c0014dba <SysTruncate(regs*)+0xf2>
c0014d81:	31 d2                	xor    edx,edx
c0014d83:	b8 01 00 00 00       	mov    eax,0x1
c0014d88:	83 fd 02             	cmp    ebp,0x2
c0014d8b:	7e 2f                	jle    c0014dbc <SysTruncate(regs*)+0xf4>
c0014d8d:	83 ec 0c             	sub    esp,0xc
c0014d90:	51                   	push   ecx
c0014d91:	e8 5b e3 ff ff       	call   c00130f1 <KeGetFileFromDescriptor(int)>
c0014d96:	83 c4 10             	add    esp,0x10
c0014d99:	89 c1                	mov    ecx,eax
c0014d9b:	31 d2                	xor    edx,edx
c0014d9d:	b8 02 00 00 00       	mov    eax,0x2
c0014da2:	85 c9                	test   ecx,ecx
c0014da4:	74 16                	je     c0014dbc <SysTruncate(regs*)+0xf4>
c0014da6:	50                   	push   eax
c0014da7:	57                   	push   edi
c0014da8:	56                   	push   esi
c0014da9:	51                   	push   ecx
c0014daa:	e8 0d 35 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c0014daf:	83 c4 10             	add    esp,0x10
c0014db2:	85 c0                	test   eax,eax
c0014db4:	0f 95 c0             	setne  al
c0014db7:	0f b6 c0             	movzx  eax,al
c0014dba:	31 d2                	xor    edx,edx
c0014dbc:	83 c4 0c             	add    esp,0xc
c0014dbf:	5b                   	pop    ebx
c0014dc0:	5e                   	pop    esi
c0014dc1:	5f                   	pop    edi
c0014dc2:	5d                   	pop    ebp
c0014dc3:	c3                   	ret    

c0014dc4 <SysWrite(regs*)>:
c0014dc4:	57                   	push   edi
c0014dc5:	56                   	push   esi
c0014dc6:	53                   	push   ebx
c0014dc7:	83 ec 10             	sub    esp,0x10
c0014dca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014dce:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014dd1:	83 f8 02             	cmp    eax,0x2
c0014dd4:	77 10                	ja     c0014de6 <SysWrite(regs*)+0x22>
c0014dd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ddb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dde:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014de4:	eb 0e                	jmp    c0014df4 <SysWrite(regs*)+0x30>
c0014de6:	83 ec 0c             	sub    esp,0xc
c0014de9:	50                   	push   eax
c0014dea:	e8 02 e3 ff ff       	call   c00130f1 <KeGetFileFromDescriptor(int)>
c0014def:	83 c4 10             	add    esp,0x10
c0014df2:	89 c1                	mov    ecx,eax
c0014df4:	83 c8 ff             	or     eax,0xffffffff
c0014df7:	85 c9                	test   ecx,ecx
c0014df9:	89 c2                	mov    edx,eax
c0014dfb:	74 28                	je     c0014e25 <SysWrite(regs*)+0x61>
c0014dfd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014e05:	31 ff                	xor    edi,edi
c0014e07:	83 ec 0c             	sub    esp,0xc
c0014e0a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014e0c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014e10:	52                   	push   edx
c0014e11:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e14:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014e17:	57                   	push   edi
c0014e18:	56                   	push   esi
c0014e19:	51                   	push   ecx
c0014e1a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014e1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014e21:	83 c4 20             	add    esp,0x20
c0014e24:	99                   	cdq    
c0014e25:	83 c4 10             	add    esp,0x10
c0014e28:	5b                   	pop    ebx
c0014e29:	5e                   	pop    esi
c0014e2a:	5f                   	pop    edi
c0014e2b:	c3                   	ret    

c0014e2c <SysWsbe(regs*)>:
c0014e2c:	55                   	push   ebp
c0014e2d:	57                   	push   edi
c0014e2e:	56                   	push   esi
c0014e2f:	53                   	push   ebx
c0014e30:	83 ec 3c             	sub    esp,0x3c
c0014e33:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014e37:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014e3e:	75 2d                	jne    c0014e6d <SysWsbe(regs*)+0x41>
c0014e40:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0014e47:	75 24                	jne    c0014e6d <SysWsbe(regs*)+0x41>
c0014e49:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0014e50:	75 1b                	jne    c0014e6d <SysWsbe(regs*)+0x41>
c0014e52:	6a 01                	push   0x1
c0014e54:	6a 00                	push   0x0
c0014e56:	68 5e 9f 00 c0       	push   0xc0009f5e
c0014e5b:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0014e61:	e8 0e 17 00 00       	call   c0016574 <Process::createThread(void (*)(void*), void*, int)>
c0014e66:	83 c4 10             	add    esp,0x10
c0014e69:	31 c0                	xor    eax,eax
c0014e6b:	eb 52                	jmp    c0014ebf <SysWsbe(regs*)+0x93>
c0014e6d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014e71:	be a2 88 02 c0       	mov    esi,0xc00288a2
c0014e76:	b9 0b 00 00 00       	mov    ecx,0xb
c0014e7b:	fc                   	cld    
c0014e7c:	83 ec 0c             	sub    esp,0xc
c0014e7f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014e81:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014e85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e8a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e8d:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0014e93:	8b 06                	mov    eax,DWORD PTR [esi]
c0014e95:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0014e98:	57                   	push   edi
c0014e99:	e8 d2 b6 fe ff       	call   c0000570 <strlen>
c0014e9e:	5a                   	pop    edx
c0014e9f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014ea3:	52                   	push   edx
c0014ea4:	31 d2                	xor    edx,edx
c0014ea6:	57                   	push   edi
c0014ea7:	52                   	push   edx
c0014ea8:	50                   	push   eax
c0014ea9:	56                   	push   esi
c0014eaa:	ff d5                	call   ebp
c0014eac:	83 c4 14             	add    esp,0x14
c0014eaf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014eb2:	e8 89 21 00 00       	call   c0017040 <KeTerminateCurrentThread(int)>
c0014eb7:	83 c4 10             	add    esp,0x10
c0014eba:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014ebf:	83 c4 3c             	add    esp,0x3c
c0014ec2:	31 d2                	xor    edx,edx
c0014ec4:	5b                   	pop    ebx
c0014ec5:	5e                   	pop    esi
c0014ec6:	5f                   	pop    edi
c0014ec7:	5d                   	pop    ebp
c0014ec8:	c3                   	ret    

c0014ec9 <SysYield(regs*)>:
c0014ec9:	83 ec 0c             	sub    esp,0xc
c0014ecc:	fa                   	cli    
c0014ecd:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c0014ed3:	e8 68 19 00 00       	call   c0016840 <schedule()>
c0014ed8:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0014edf:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c0014ee6:	75 01                	jne    c0014ee9 <SysYield(regs*)+0x20>
c0014ee8:	fb                   	sti    
c0014ee9:	31 c0                	xor    eax,eax
c0014eeb:	31 d2                	xor    edx,edx
c0014eed:	83 c4 0c             	add    esp,0xc
c0014ef0:	c3                   	ret    
c0014ef1:	66 90                	xchg   ax,ax
c0014ef3:	90                   	nop

c0014ef4 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0014ef4:	55                   	push   ebp
c0014ef5:	57                   	push   edi
c0014ef6:	56                   	push   esi
c0014ef7:	53                   	push   ebx
c0014ef8:	83 ec 2c             	sub    esp,0x2c
c0014efb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014eff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f03:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014f07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014f0b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014f0f:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0014f12:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c0014f16:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014f1a:	c1 e0 08             	shl    eax,0x8
c0014f1d:	09 c1                	or     ecx,eax
c0014f1f:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0014f23:	c1 e0 10             	shl    eax,0x10
c0014f26:	09 c1                	or     ecx,eax
c0014f28:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0014f2c:	83 e0 7f             	and    eax,0x7f
c0014f2f:	c1 e0 18             	shl    eax,0x18
c0014f32:	09 c8                	or     eax,ecx
c0014f34:	89 c5                	mov    ebp,eax
c0014f36:	89 f8                	mov    eax,edi
c0014f38:	80 f4 00             	xor    ah,0x0
c0014f3b:	89 c3                	mov    ebx,eax
c0014f3d:	89 e8                	mov    eax,ebp
c0014f3f:	80 f4 00             	xor    ah,0x0
c0014f42:	89 c6                	mov    esi,eax
c0014f44:	89 f0                	mov    eax,esi
c0014f46:	09 d8                	or     eax,ebx
c0014f48:	74 42                	je     c0014f8c <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0014f4a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014f4e:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0014f51:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0014f55:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014f59:	c1 e0 08             	shl    eax,0x8
c0014f5c:	09 c6                	or     esi,eax
c0014f5e:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0014f62:	c1 e0 10             	shl    eax,0x10
c0014f65:	09 c6                	or     esi,eax
c0014f67:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0014f6b:	83 e0 7f             	and    eax,0x7f
c0014f6e:	c1 e0 18             	shl    eax,0x18
c0014f71:	09 f0                	or     eax,esi
c0014f73:	89 c3                	mov    ebx,eax
c0014f75:	a1 50 0b 03 c0       	mov    eax,ds:0xc0030b50
c0014f7a:	8b 15 54 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b54
c0014f80:	29 c1                	sub    ecx,eax
c0014f82:	19 d3                	sbb    ebx,edx
c0014f84:	89 c8                	mov    eax,ecx
c0014f86:	89 da                	mov    edx,ebx
c0014f88:	eb 0e                	jmp    c0014f98 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0014f8a:	66 90                	xchg   ax,ax
c0014f8c:	b8 00 00 00 00       	mov    eax,0x0
c0014f91:	ba 00 00 00 00       	mov    edx,0x0
c0014f96:	66 90                	xchg   ax,ax
c0014f98:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014f9c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fa4:	80 f4 00             	xor    ah,0x0
c0014fa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014fab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014faf:	80 f4 00             	xor    ah,0x0
c0014fb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014fba:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0014fbe:	89 e8                	mov    eax,ebp
c0014fc0:	09 f8                	or     eax,edi
c0014fc2:	74 30                	je     c0014ff4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0014fc4:	8b 0d 50 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b50
c0014fca:	8b 1d 54 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b54
c0014fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fd8:	01 c8                	add    eax,ecx
c0014fda:	11 da                	adc    edx,ebx
c0014fdc:	89 c6                	mov    esi,eax
c0014fde:	83 e6 ff             	and    esi,0xffffffff
c0014fe1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014fe4:	89 d0                	mov    eax,edx
c0014fe6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014feb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fef:	eb 13                	jmp    c0015004 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c0014ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ff4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014ffb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015003:	90                   	nop
c0015004:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015008:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001500b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001500f:	89 cf                	mov    edi,ecx
c0015011:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0015014:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015017:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001501b:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0015020:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c0015023:	83 e1 00             	and    ecx,0x0
c0015026:	09 ca                	or     edx,ecx
c0015028:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c001502b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001502f:	c1 ea 08             	shr    edx,0x8
c0015032:	0f b6 d2             	movzx  edx,dl
c0015035:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c0015038:	83 e1 00             	and    ecx,0x0
c001503b:	09 ca                	or     edx,ecx
c001503d:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015040:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015044:	c1 ea 10             	shr    edx,0x10
c0015047:	0f b6 d2             	movzx  edx,dl
c001504a:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c001504d:	83 e1 00             	and    ecx,0x0
c0015050:	09 ca                	or     edx,ecx
c0015052:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015055:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015059:	c1 ea 18             	shr    edx,0x18
c001505c:	83 e2 7f             	and    edx,0x7f
c001505f:	89 d3                	mov    ebx,edx
c0015061:	83 e3 7f             	and    ebx,0x7f
c0015064:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015067:	83 e2 80             	and    edx,0xffffff80
c001506a:	88 d1                	mov    cl,dl
c001506c:	88 da                	mov    dl,bl
c001506e:	09 ca                	or     edx,ecx
c0015070:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015077:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001507b:	83 c4 2c             	add    esp,0x2c
c001507e:	5b                   	pop    ebx
c001507f:	5e                   	pop    esi
c0015080:	5f                   	pop    edi
c0015081:	5d                   	pop    ebp
c0015082:	c3                   	ret    
c0015083:	90                   	nop

c0015084 <KeCheckAlarm(ThreadControlBlock*)>:
c0015084:	55                   	push   ebp
c0015085:	57                   	push   edi
c0015086:	56                   	push   esi
c0015087:	53                   	push   ebx
c0015088:	83 ec 0c             	sub    esp,0xc
c001508b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001508f:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015092:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0015096:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c001509a:	c1 e5 08             	shl    ebp,0x8
c001509d:	09 fd                	or     ebp,edi
c001509f:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c00150a3:	c1 e7 10             	shl    edi,0x10
c00150a6:	09 ef                	or     edi,ebp
c00150a8:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c00150ac:	83 e0 7f             	and    eax,0x7f
c00150af:	c1 e0 18             	shl    eax,0x18
c00150b2:	09 f8                	or     eax,edi
c00150b4:	89 c1                	mov    ecx,eax
c00150b6:	89 d0                	mov    eax,edx
c00150b8:	80 f4 00             	xor    ah,0x0
c00150bb:	89 c3                	mov    ebx,eax
c00150bd:	89 c8                	mov    eax,ecx
c00150bf:	80 f4 00             	xor    ah,0x0
c00150c2:	89 c6                	mov    esi,eax
c00150c4:	89 f0                	mov    eax,esi
c00150c6:	09 d8                	or     eax,ebx
c00150c8:	0f 84 9e 00 00 00    	je     c001516c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00150ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00150d2:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c00150d5:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c00150d9:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c00150dd:	c1 e6 08             	shl    esi,0x8
c00150e0:	09 de                	or     esi,ebx
c00150e2:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c00150e6:	c1 e3 10             	shl    ebx,0x10
c00150e9:	09 f3                	or     ebx,esi
c00150eb:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c00150ef:	83 e1 7f             	and    ecx,0x7f
c00150f2:	c1 e1 18             	shl    ecx,0x18
c00150f5:	09 d9                	or     ecx,ebx
c00150f7:	89 ca                	mov    edx,ecx
c00150f9:	89 c1                	mov    ecx,eax
c00150fb:	89 d3                	mov    ebx,edx
c00150fd:	a1 50 0b 03 c0       	mov    eax,ds:0xc0030b50
c0015102:	8b 15 54 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b54
c0015108:	39 c8                	cmp    eax,ecx
c001510a:	89 d0                	mov    eax,edx
c001510c:	19 d8                	sbb    eax,ebx
c001510e:	72 5c                	jb     c001516c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015110:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015114:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c001511b:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c001511e:	83 e2 00             	and    edx,0x0
c0015121:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015124:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015127:	83 e2 00             	and    edx,0x0
c001512a:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c001512d:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015130:	83 e2 00             	and    edx,0x0
c0015133:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015136:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015139:	83 e2 80             	and    edx,0xffffff80
c001513c:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001513f:	83 ec 0c             	sub    esp,0xc
c0015142:	68 ce 88 02 c0       	push   0xc00288ce
c0015147:	e8 30 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001514c:	83 c4 10             	add    esp,0x10
c001514f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015153:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015156:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c001515c:	83 ec 08             	sub    esp,0x8
c001515f:	6a 0e                	push   0xe
c0015161:	50                   	push   eax
c0015162:	e8 6c bd ff ff       	call   c0010ed3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0015167:	83 c4 10             	add    esp,0x10
c001516a:	66 90                	xchg   ax,ax
c001516c:	90                   	nop
c001516d:	83 c4 0c             	add    esp,0xc
c0015170:	5b                   	pop    ebx
c0015171:	5e                   	pop    esi
c0015172:	5f                   	pop    edi
c0015173:	5d                   	pop    ebp
c0015174:	c3                   	ret    

c0015175 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015175:	55                   	push   ebp
c0015176:	57                   	push   edi
c0015177:	56                   	push   esi
c0015178:	53                   	push   ebx
c0015179:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001517f:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015187:	0f 95 c0             	setne  al
c001518a:	31 d2                	xor    edx,edx
c001518c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015194:	0f 94 c2             	sete   dl
c0015197:	85 c2                	test   edx,eax
c0015199:	74 34                	je     c00151cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001519b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00151a6:	74 27                	je     c00151cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00151a8:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00151af:	05 00 10 00 00       	add    eax,0x1000
c00151b4:	89 c1                	mov    ecx,eax
c00151b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00151bb:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00151c1:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00151c8:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00151cf:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00151d6:	83 ec 0c             	sub    esp,0xc
c00151d9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00151df:	6a 01                	push   0x1
c00151e1:	e8 69 e0 ff ff       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c00151e6:	83 c4 10             	add    esp,0x10
c00151e9:	89 c3                	mov    ebx,eax
c00151eb:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00151f1:	0f 86 26 01 00 00    	jbe    c001531d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00151f7:	c1 ee 0c             	shr    esi,0xc
c00151fa:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015201:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001520d:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015214:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015218:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001521f:	29 ef                	sub    edi,ebp
c0015221:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0015225:	0f 83 f9 00 00 00    	jae    c0015324 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c001522b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015231:	76 05                	jbe    c0015238 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0015233:	bf 00 10 00 00       	mov    edi,0x1000
c0015238:	83 ec 0c             	sub    esp,0xc
c001523b:	31 d2                	xor    edx,edx
c001523d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015244:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015246:	8d 44 24 28          	lea    eax,[esp+0x28]
c001524a:	50                   	push   eax
c001524b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001524f:	56                   	push   esi
c0015250:	52                   	push   edx
c0015251:	57                   	push   edi
c0015252:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015259:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001525c:	83 c4 20             	add    esp,0x20
c001525f:	85 c0                	test   eax,eax
c0015261:	75 06                	jne    c0015269 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0015263:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015267:	74 13                	je     c001527c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015269:	83 ec 0c             	sub    esp,0xc
c001526c:	53                   	push   ebx
c001526d:	e8 e5 e2 ff ff       	call   c0013557 <Virt::freeKernelVirtualPages(unsigned long)>
c0015272:	83 c4 10             	add    esp,0x10
c0015275:	31 c0                	xor    eax,eax
c0015277:	e9 80 01 00 00       	jmp    c00153fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001527c:	fa                   	cli    
c001527d:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c0015283:	e8 24 ac ff ff       	call   c000feac <Phys::allocatePage()>
c0015288:	6a 07                	push   0x7
c001528a:	89 c7                	mov    edi,eax
c001528c:	53                   	push   ebx
c001528d:	50                   	push   eax
c001528e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015293:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015296:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001529c:	e8 91 e6 ff ff       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c00152a1:	83 c4 0c             	add    esp,0xc
c00152a4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00152ab:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00152b1:	6a 00                	push   0x0
c00152b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152bb:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00152c1:	e8 d8 e4 ff ff       	call   c001379e <VAS::mapOtherVASIn(bool, VAS*)>
c00152c6:	58                   	pop    eax
c00152c7:	5a                   	pop    edx
c00152c8:	68 07 0c 00 00       	push   0xc07
c00152cd:	55                   	push   ebp
c00152ce:	57                   	push   edi
c00152cf:	89 df                	mov    edi,ebx
c00152d1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00152d8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00152de:	6a 00                	push   0x0
c00152e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152e8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00152ee:	e8 81 e8 ff ff       	call   c0013b74 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00152f3:	b9 00 10 00 00       	mov    ecx,0x1000
c00152f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152fa:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0015301:	83 c4 20             	add    esp,0x20
c0015304:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c001530b:	75 01                	jne    c001530e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c001530d:	fb                   	sti    
c001530e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015314:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015318:	e9 f0 fe ff ff       	jmp    c001520d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001531d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015324:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001532b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015331:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015337:	0f 86 b1 00 00 00    	jbe    c00153ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001533d:	fa                   	cli    
c001533e:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c0015344:	c1 ee 0c             	shr    esi,0xc
c0015347:	51                   	push   ecx
c0015348:	31 ff                	xor    edi,edi
c001534a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015351:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015357:	6a 00                	push   0x0
c0015359:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001535e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015361:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015367:	e8 32 e4 ff ff       	call   c001379e <VAS::mapOtherVASIn(bool, VAS*)>
c001536c:	83 c4 10             	add    esp,0x10
c001536f:	e8 38 ab ff ff       	call   c000feac <Phys::allocatePage()>
c0015374:	47                   	inc    edi
c0015375:	6a 07                	push   0x7
c0015377:	53                   	push   ebx
c0015378:	50                   	push   eax
c0015379:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001537d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015383:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015386:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c001538c:	e8 a1 e5 ff ff       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015391:	58                   	pop    eax
c0015392:	5a                   	pop    edx
c0015393:	68 07 0c 00 00       	push   0xc07
c0015398:	55                   	push   ebp
c0015399:	81 c5 00 10 00 00    	add    ebp,0x1000
c001539f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153a3:	50                   	push   eax
c00153a4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00153ab:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00153b1:	6a 00                	push   0x0
c00153b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153bb:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00153c1:	e8 ae e7 ff ff       	call   c0013b74 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00153c6:	83 c4 1c             	add    esp,0x1c
c00153c9:	68 00 10 00 00       	push   0x1000
c00153ce:	6a 00                	push   0x0
c00153d0:	53                   	push   ebx
c00153d1:	e8 1a b1 fe ff       	call   c00004f0 <memset>
c00153d6:	83 c4 10             	add    esp,0x10
c00153d9:	39 fe                	cmp    esi,edi
c00153db:	77 92                	ja     c001536f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c00153dd:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c00153e4:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c00153eb:	75 01                	jne    c00153ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00153ed:	fb                   	sti    
c00153ee:	83 ec 0c             	sub    esp,0xc
c00153f1:	53                   	push   ebx
c00153f2:	e8 60 e1 ff ff       	call   c0013557 <Virt::freeKernelVirtualPages(unsigned long)>
c00153f7:	83 c4 10             	add    esp,0x10
c00153fa:	b0 01                	mov    al,0x1
c00153fc:	81 c4 2c 10 00 00    	add    esp,0x102c
c0015402:	5b                   	pop    ebx
c0015403:	5e                   	pop    esi
c0015404:	5f                   	pop    edi
c0015405:	5d                   	pop    ebp
c0015406:	c3                   	ret    

c0015407 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015407:	55                   	push   ebp
c0015408:	57                   	push   edi
c0015409:	56                   	push   esi
c001540a:	53                   	push   ebx
c001540b:	83 ec 68             	sub    esp,0x68
c001540e:	68 14 01 00 00       	push   0x114
c0015413:	e8 4b a4 ff ff       	call   c000f863 <malloc>
c0015418:	83 c4 0c             	add    esp,0xc
c001541b:	89 c6                	mov    esi,eax
c001541d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015421:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015425:	50                   	push   eax
c0015426:	e8 5f 2d ff ff       	call   c000818a <File::File(char const*, Process*)>
c001542b:	5b                   	pop    ebx
c001542c:	5f                   	pop    edi
c001542d:	6a 01                	push   0x1
c001542f:	56                   	push   esi
c0015430:	e8 73 2d ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015435:	83 c4 10             	add    esp,0x10
c0015438:	85 c0                	test   eax,eax
c001543a:	0f 85 c6 01 00 00    	jne    c0015606 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015440:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015448:	83 ec 0c             	sub    esp,0xc
c001544b:	6a 34                	push   0x34
c001544d:	e8 11 a4 ff ff       	call   c000f863 <malloc>
c0015452:	59                   	pop    ecx
c0015453:	89 c3                	mov    ebx,eax
c0015455:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0015459:	8b 06                	mov    eax,DWORD PTR [esi]
c001545b:	57                   	push   edi
c001545c:	53                   	push   ebx
c001545d:	6a 00                	push   0x0
c001545f:	6a 34                	push   0x34
c0015461:	56                   	push   esi
c0015462:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015465:	83 c4 20             	add    esp,0x20
c0015468:	85 c0                	test   eax,eax
c001546a:	0f 85 96 01 00 00    	jne    c0015606 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015470:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015476:	0f 85 8a 01 00 00    	jne    c0015606 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001547c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001547f:	85 c0                	test   eax,eax
c0015481:	0f 84 7f 01 00 00    	je     c0015606 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015487:	52                   	push   edx
c0015488:	31 d2                	xor    edx,edx
c001548a:	52                   	push   edx
c001548b:	50                   	push   eax
c001548c:	56                   	push   esi
c001548d:	e8 d4 2d ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015492:	83 c4 10             	add    esp,0x10
c0015495:	85 c0                	test   eax,eax
c0015497:	0f 85 69 01 00 00    	jne    c0015606 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001549d:	83 ec 0c             	sub    esp,0xc
c00154a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00154a3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00154a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00154ab:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00154af:	0f af c2             	imul   eax,edx
c00154b2:	50                   	push   eax
c00154b3:	e8 ab a3 ff ff       	call   c000f863 <malloc>
c00154b8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00154ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00154be:	89 3c 24             	mov    DWORD PTR [esp],edi
c00154c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154c5:	31 ff                	xor    edi,edi
c00154c7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00154cb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00154cf:	0f af c2             	imul   eax,edx
c00154d2:	99                   	cdq    
c00154d3:	52                   	push   edx
c00154d4:	50                   	push   eax
c00154d5:	56                   	push   esi
c00154d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00154d9:	83 c4 20             	add    esp,0x20
c00154dc:	0f b7 c7             	movzx  eax,di
c00154df:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c00154e3:	73 71                	jae    c0015556 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00154e5:	6b c0 28             	imul   eax,eax,0x28
c00154e8:	55                   	push   ebp
c00154e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00154ed:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c00154f1:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00154f4:	6b d2 28             	imul   edx,edx,0x28
c00154f7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00154fb:	31 d2                	xor    edx,edx
c00154fd:	52                   	push   edx
c00154fe:	50                   	push   eax
c00154ff:	56                   	push   esi
c0015500:	e8 61 2d ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015505:	83 c4 0c             	add    esp,0xc
c0015508:	6a 20                	push   0x20
c001550a:	6a 00                	push   0x0
c001550c:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c0015510:	55                   	push   ebp
c0015511:	e8 da af fe ff       	call   c00004f0 <memset>
c0015516:	58                   	pop    eax
c0015517:	8b 06                	mov    eax,DWORD PTR [esi]
c0015519:	8d 54 24 38          	lea    edx,[esp+0x38]
c001551d:	52                   	push   edx
c001551e:	55                   	push   ebp
c001551f:	6a 00                	push   0x0
c0015521:	6a 1f                	push   0x1f
c0015523:	56                   	push   esi
c0015524:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015527:	83 c4 18             	add    esp,0x18
c001552a:	55                   	push   ebp
c001552b:	68 df 88 02 c0       	push   0xc00288df
c0015530:	e8 1b b2 fe ff       	call   c0000750 <strcmp>
c0015535:	83 c4 10             	add    esp,0x10
c0015538:	85 c0                	test   eax,eax
c001553a:	75 17                	jne    c0015553 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c001553c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015540:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015544:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c001554a:	83 c8 80             	or     eax,0xffffff80
c001554d:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c0015553:	47                   	inc    edi
c0015554:	eb 86                	jmp    c00154dc <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015556:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015559:	85 c0                	test   eax,eax
c001555b:	0f 84 a5 00 00 00    	je     c0015606 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015561:	31 d2                	xor    edx,edx
c0015563:	57                   	push   edi
c0015564:	52                   	push   edx
c0015565:	50                   	push   eax
c0015566:	56                   	push   esi
c0015567:	e8 fa 2c ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001556c:	83 c4 10             	add    esp,0x10
c001556f:	85 c0                	test   eax,eax
c0015571:	0f 85 8f 00 00 00    	jne    c0015606 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015577:	83 ec 0c             	sub    esp,0xc
c001557a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001557e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015582:	31 ed                	xor    ebp,ebp
c0015584:	0f af c2             	imul   eax,edx
c0015587:	50                   	push   eax
c0015588:	e8 d6 a2 ff ff       	call   c000f863 <malloc>
c001558d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015591:	59                   	pop    ecx
c0015592:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015594:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015598:	50                   	push   eax
c0015599:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001559d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00155a1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00155a5:	0f af c2             	imul   eax,edx
c00155a8:	99                   	cdq    
c00155a9:	52                   	push   edx
c00155aa:	50                   	push   eax
c00155ab:	56                   	push   esi
c00155ac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00155af:	83 c4 20             	add    esp,0x20
c00155b2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00155ba:	0f b7 fd             	movzx  edi,bp
c00155bd:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00155c1:	0f 83 80 00 00 00    	jae    c0015647 <Thr::loadProgramIntoMemory(Process*, char const*)+0x240>
c00155c7:	c1 e7 05             	shl    edi,0x5
c00155ca:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c00155ce:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00155d1:	75 6e                	jne    c0015641 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c00155d3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00155d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00155da:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00155dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00155e1:	52                   	push   edx
c00155e2:	31 d2                	xor    edx,edx
c00155e4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00155e7:	52                   	push   edx
c00155e8:	50                   	push   eax
c00155e9:	56                   	push   esi
c00155ea:	e8 77 2c ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00155ef:	83 c4 10             	add    esp,0x10
c00155f2:	85 c0                	test   eax,eax
c00155f4:	74 17                	je     c001560d <Thr::loadProgramIntoMemory(Process*, char const*)+0x206>
c00155f6:	83 ec 0c             	sub    esp,0xc
c00155f9:	68 ee 88 02 c0       	push   0xc00288ee
c00155fe:	e8 79 19 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015603:	83 c4 10             	add    esp,0x10
c0015606:	31 c0                	xor    eax,eax
c0015608:	e9 8a 00 00 00       	jmp    c0015697 <Thr::loadProgramIntoMemory(Process*, char const*)+0x290>
c001560d:	83 ec 0c             	sub    esp,0xc
c0015610:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015613:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015616:	50                   	push   eax
c0015617:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001561b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001561f:	56                   	push   esi
c0015620:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015627:	e8 49 fb ff ff       	call   c0015175 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001562c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015630:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015634:	83 c4 20             	add    esp,0x20
c0015637:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001563b:	73 04                	jae    c0015641 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c001563d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015641:	45                   	inc    ebp
c0015642:	e9 73 ff ff ff       	jmp    c00155ba <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015647:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001564b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001564f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015653:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0015659:	83 ec 0c             	sub    esp,0xc
c001565c:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015662:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015667:	05 00 10 00 00       	add    eax,0x1000
c001566c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001566f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015673:	e8 fb a1 ff ff       	call   c000f873 <free>
c0015678:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001567b:	e8 f3 a1 ff ff       	call   c000f873 <free>
c0015680:	58                   	pop    eax
c0015681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015685:	e8 e9 a1 ff ff       	call   c000f873 <free>
c001568a:	89 34 24             	mov    DWORD PTR [esp],esi
c001568d:	e8 74 2b ff ff       	call   c0008206 <File::close()>
c0015692:	83 c4 10             	add    esp,0x10
c0015695:	b0 01                	mov    al,0x1
c0015697:	83 c4 5c             	add    esp,0x5c
c001569a:	5b                   	pop    ebx
c001569b:	5e                   	pop    esi
c001569c:	5f                   	pop    edi
c001569d:	5d                   	pop    ebp
c001569e:	c3                   	ret    

c001569f <Thr::runtimeReferenceHelper()>:
c001569f:	83 ec 18             	sub    esp,0x18
c00156a2:	68 f6 88 02 c0       	push   0xc00288f6
c00156a7:	e8 d0 18 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00156ac:	fa                   	cli    
c00156ad:	83 c4 10             	add    esp,0x10
c00156b0:	eb fe                	jmp    c00156b0 <Thr::runtimeReferenceHelper()+0x11>

c00156b2 <Thr::getAddressOfKernelSymbol(char const*)>:
c00156b2:	57                   	push   edi
c00156b3:	56                   	push   esi
c00156b4:	53                   	push   ebx
c00156b5:	31 db                	xor    ebx,ebx
c00156b7:	39 1d 00 13 03 c0    	cmp    DWORD PTR ds:0xc0031300,ebx
c00156bd:	7e 3c                	jle    c00156fb <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00156bf:	8b 34 9d e0 12 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffced20]
c00156c6:	31 ff                	xor    edi,edi
c00156c8:	39 3c 9d a0 12 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffced60],edi
c00156cf:	7e 27                	jle    c00156f8 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00156d1:	50                   	push   eax
c00156d2:	50                   	push   eax
c00156d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156d7:	8b 06                	mov    eax,DWORD PTR [esi]
c00156d9:	03 04 9d c0 12 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffced40]
c00156e0:	50                   	push   eax
c00156e1:	e8 6a b0 fe ff       	call   c0000750 <strcmp>
c00156e6:	83 c4 10             	add    esp,0x10
c00156e9:	85 c0                	test   eax,eax
c00156eb:	75 05                	jne    c00156f2 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00156ed:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00156f0:	eb 0b                	jmp    c00156fd <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00156f2:	83 c6 10             	add    esi,0x10
c00156f5:	47                   	inc    edi
c00156f6:	eb d0                	jmp    c00156c8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00156f8:	43                   	inc    ebx
c00156f9:	eb bc                	jmp    c00156b7 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00156fb:	31 c0                	xor    eax,eax
c00156fd:	5b                   	pop    ebx
c00156fe:	5e                   	pop    esi
c00156ff:	5f                   	pop    edi
c0015700:	c3                   	ret    

c0015701 <Thr::loadKernelSymbolTable(char const*)>:
c0015701:	55                   	push   ebp
c0015702:	57                   	push   edi
c0015703:	56                   	push   esi
c0015704:	53                   	push   ebx
c0015705:	83 ec 68             	sub    esp,0x68
c0015708:	8b 35 58 13 03 c0    	mov    esi,DWORD PTR ds:0xc0031358
c001570e:	68 14 01 00 00       	push   0x114
c0015713:	e8 4b a1 ff ff       	call   c000f863 <malloc>
c0015718:	83 c4 0c             	add    esp,0xc
c001571b:	89 c3                	mov    ebx,eax
c001571d:	56                   	push   esi
c001571e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015722:	50                   	push   eax
c0015723:	e8 62 2a ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015728:	5e                   	pop    esi
c0015729:	5f                   	pop    edi
c001572a:	6a 01                	push   0x1
c001572c:	53                   	push   ebx
c001572d:	e8 76 2a ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015732:	83 c4 10             	add    esp,0x10
c0015735:	85 c0                	test   eax,eax
c0015737:	74 0a                	je     c0015743 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015739:	83 ec 0c             	sub    esp,0xc
c001573c:	68 18 89 02 c0       	push   0xc0028918
c0015741:	eb 34                	jmp    c0015777 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015743:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001574b:	83 ec 0c             	sub    esp,0xc
c001574e:	6a 34                	push   0x34
c0015750:	e8 0e a1 ff ff       	call   c000f863 <malloc>
c0015755:	59                   	pop    ecx
c0015756:	89 c7                	mov    edi,eax
c0015758:	8d 74 24 34          	lea    esi,[esp+0x34]
c001575c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001575e:	56                   	push   esi
c001575f:	57                   	push   edi
c0015760:	6a 00                	push   0x0
c0015762:	6a 34                	push   0x34
c0015764:	53                   	push   ebx
c0015765:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015768:	83 c4 20             	add    esp,0x20
c001576b:	85 c0                	test   eax,eax
c001576d:	74 17                	je     c0015786 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001576f:	83 ec 0c             	sub    esp,0xc
c0015772:	68 2f 89 02 c0       	push   0xc002892f
c0015777:	e8 3c a5 ff ff       	call   c000fcb8 <KePanic(char const*)>
c001577c:	83 c4 10             	add    esp,0x10
c001577f:	31 c0                	xor    eax,eax
c0015781:	e9 31 02 00 00       	jmp    c00159b7 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015786:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001578c:	75 e1                	jne    c001576f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001578e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015791:	85 c0                	test   eax,eax
c0015793:	74 da                	je     c001576f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015795:	52                   	push   edx
c0015796:	31 d2                	xor    edx,edx
c0015798:	52                   	push   edx
c0015799:	50                   	push   eax
c001579a:	53                   	push   ebx
c001579b:	e8 c6 2a ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00157a0:	83 c4 10             	add    esp,0x10
c00157a3:	85 c0                	test   eax,eax
c00157a5:	75 c8                	jne    c001576f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00157a7:	83 ec 0c             	sub    esp,0xc
c00157aa:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00157ae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00157b2:	31 ed                	xor    ebp,ebp
c00157b4:	0f af c2             	imul   eax,edx
c00157b7:	50                   	push   eax
c00157b8:	e8 a6 a0 ff ff       	call   c000f863 <malloc>
c00157bd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00157bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00157c3:	89 34 24             	mov    DWORD PTR [esp],esi
c00157c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00157ca:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00157ce:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00157d2:	0f af c2             	imul   eax,edx
c00157d5:	99                   	cdq    
c00157d6:	52                   	push   edx
c00157d7:	50                   	push   eax
c00157d8:	53                   	push   ebx
c00157d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00157dc:	83 c4 20             	add    esp,0x20
c00157df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00157e7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00157ef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00157f7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157ff:	0f b7 f5             	movzx  esi,bp
c0015802:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015806:	0f 83 a7 00 00 00    	jae    c00158b3 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001580c:	6b f6 28             	imul   esi,esi,0x28
c001580f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015813:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015816:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001581a:	50                   	push   eax
c001581b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001581f:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015823:	8b 16                	mov    edx,DWORD PTR [esi]
c0015825:	6b c0 28             	imul   eax,eax,0x28
c0015828:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001582c:	89 d0                	mov    eax,edx
c001582e:	31 d2                	xor    edx,edx
c0015830:	52                   	push   edx
c0015831:	50                   	push   eax
c0015832:	53                   	push   ebx
c0015833:	e8 2e 2a ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015838:	83 c4 0c             	add    esp,0xc
c001583b:	6a 20                	push   0x20
c001583d:	6a 00                	push   0x0
c001583f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015843:	52                   	push   edx
c0015844:	e8 a7 ac fe ff       	call   c00004f0 <memset>
c0015849:	58                   	pop    eax
c001584a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001584c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015850:	51                   	push   ecx
c0015851:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015855:	52                   	push   edx
c0015856:	6a 00                	push   0x0
c0015858:	6a 1f                	push   0x1f
c001585a:	53                   	push   ebx
c001585b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001585e:	83 c4 18             	add    esp,0x18
c0015861:	68 46 89 02 c0       	push   0xc0028946
c0015866:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001586a:	52                   	push   edx
c001586b:	e8 e0 ae fe ff       	call   c0000750 <strcmp>
c0015870:	83 c4 10             	add    esp,0x10
c0015873:	85 c0                	test   eax,eax
c0015875:	75 0f                	jne    c0015886 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015877:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001587a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001587e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015882:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015886:	50                   	push   eax
c0015887:	50                   	push   eax
c0015888:	68 4e 89 02 c0       	push   0xc002894e
c001588d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015891:	50                   	push   eax
c0015892:	e8 b9 ae fe ff       	call   c0000750 <strcmp>
c0015897:	83 c4 10             	add    esp,0x10
c001589a:	85 c0                	test   eax,eax
c001589c:	75 0f                	jne    c00158ad <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001589e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00158a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00158a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158ad:	45                   	inc    ebp
c00158ae:	e9 4c ff ff ff       	jmp    c00157ff <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00158b3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00158b8:	75 10                	jne    c00158ca <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00158ba:	83 ec 0c             	sub    esp,0xc
c00158bd:	68 56 89 02 c0       	push   0xc0028956
c00158c2:	e8 f1 a3 ff ff       	call   c000fcb8 <KePanic(char const*)>
c00158c7:	83 c4 10             	add    esp,0x10
c00158ca:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00158cf:	75 10                	jne    c00158e1 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00158d1:	83 ec 0c             	sub    esp,0xc
c00158d4:	68 56 89 02 c0       	push   0xc0028956
c00158d9:	e8 da a3 ff ff       	call   c000fcb8 <KePanic(char const*)>
c00158de:	83 c4 10             	add    esp,0x10
c00158e1:	31 d2                	xor    edx,edx
c00158e3:	50                   	push   eax
c00158e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158e8:	52                   	push   edx
c00158e9:	50                   	push   eax
c00158ea:	53                   	push   ebx
c00158eb:	e8 76 29 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00158f0:	5a                   	pop    edx
c00158f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00158f5:	e8 69 9f ff ff       	call   c000f863 <malloc>
c00158fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00158fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015902:	31 c9                	xor    ecx,ecx
c0015904:	5e                   	pop    esi
c0015905:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015907:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001590b:	55                   	push   ebp
c001590c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015910:	51                   	push   ecx
c0015911:	52                   	push   edx
c0015912:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015916:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001591a:	53                   	push   ebx
c001591b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001591e:	83 c4 14             	add    esp,0x14
c0015921:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015925:	e8 39 9f ff ff       	call   c000f863 <malloc>
c001592a:	89 c6                	mov    esi,eax
c001592c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001592e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015931:	56                   	push   esi
c0015932:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015936:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001593a:	51                   	push   ecx
c001593b:	52                   	push   edx
c001593c:	53                   	push   ebx
c001593d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015940:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015944:	8b 15 00 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031300
c001594a:	83 c4 1c             	add    esp,0x1c
c001594d:	c1 e8 04             	shr    eax,0x4
c0015950:	89 04 95 a0 12 03 c0 	mov    DWORD PTR [edx*4-0x3ffced60],eax
c0015957:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001595b:	31 d2                	xor    edx,edx
c001595d:	52                   	push   edx
c001595e:	50                   	push   eax
c001595f:	53                   	push   ebx
c0015960:	e8 01 29 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015965:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015967:	31 d2                	xor    edx,edx
c0015969:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001596c:	56                   	push   esi
c001596d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015971:	52                   	push   edx
c0015972:	50                   	push   eax
c0015973:	53                   	push   ebx
c0015974:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015977:	83 c4 14             	add    esp,0x14
c001597a:	53                   	push   ebx
c001597b:	e8 86 28 ff ff       	call   c0008206 <File::close()>
c0015980:	5d                   	pop    ebp
c0015981:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015985:	e8 e9 9e ff ff       	call   c000f873 <free>
c001598a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001598d:	e8 e1 9e ff ff       	call   c000f873 <free>
c0015992:	a1 00 13 03 c0       	mov    eax,ds:0xc0031300
c0015997:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001599b:	8d 50 01             	lea    edx,[eax+0x1]
c001599e:	89 0c 85 e0 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffced20],ecx
c00159a5:	89 34 85 c0 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffced40],esi
c00159ac:	89 15 00 13 03 c0    	mov    DWORD PTR ds:0xc0031300,edx
c00159b2:	83 c4 10             	add    esp,0x10
c00159b5:	b0 01                	mov    al,0x1
c00159b7:	83 c4 5c             	add    esp,0x5c
c00159ba:	5b                   	pop    ebx
c00159bb:	5e                   	pop    esi
c00159bc:	5f                   	pop    edi
c00159bd:	5d                   	pop    ebp
c00159be:	c3                   	ret    

c00159bf <KeIsELFValid(Elf32_Ehdr*)>:
c00159bf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00159c3:	31 c0                	xor    eax,eax
c00159c5:	80 3a 7f             	cmp    BYTE PTR [edx],0x7f
c00159c8:	75 13                	jne    c00159dd <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00159ca:	80 7a 01 45          	cmp    BYTE PTR [edx+0x1],0x45
c00159ce:	75 0d                	jne    c00159dd <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00159d0:	80 7a 02 4c          	cmp    BYTE PTR [edx+0x2],0x4c
c00159d4:	75 07                	jne    c00159dd <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00159d6:	80 7a 03 46          	cmp    BYTE PTR [edx+0x3],0x46
c00159da:	0f 94 c0             	sete   al
c00159dd:	c3                   	ret    

c00159de <KeGetELFSectionHeader(unsigned char*, int)>:
c00159de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159e2:	6b 54 24 08 28       	imul   edx,DWORD PTR [esp+0x8],0x28
c00159e7:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
c00159ea:	01 d0                	add    eax,edx
c00159ec:	c3                   	ret    

c00159ed <KeGetELFProgramHeader(unsigned char*, int)>:
c00159ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00159f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00159f5:	c1 e0 05             	shl    eax,0x5
c00159f8:	03 42 1c             	add    eax,DWORD PTR [edx+0x1c]
c00159fb:	01 d0                	add    eax,edx
c00159fd:	c3                   	ret    

c00159fe <KeLookupELFString(unsigned char*, int)>:
c00159fe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015a02:	31 c0                	xor    eax,eax
c0015a04:	0f b7 51 32          	movzx  edx,WORD PTR [ecx+0x32]
c0015a08:	85 d2                	test   edx,edx
c0015a0a:	74 14                	je     c0015a20 <KeLookupELFString(unsigned char*, int)+0x22>
c0015a0c:	52                   	push   edx
c0015a0d:	51                   	push   ecx
c0015a0e:	e8 cb ff ff ff       	call   c00159de <KeGetELFSectionHeader(unsigned char*, int)>
c0015a13:	5a                   	pop    edx
c0015a14:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c0015a17:	5a                   	pop    edx
c0015a18:	89 c8                	mov    eax,ecx
c0015a1a:	74 04                	je     c0015a20 <KeLookupELFString(unsigned char*, int)+0x22>
c0015a1c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0015a20:	c3                   	ret    

c0015a21 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>:
c0015a21:	55                   	push   ebp
c0015a22:	57                   	push   edi
c0015a23:	56                   	push   esi
c0015a24:	53                   	push   ebx
c0015a25:	31 db                	xor    ebx,ebx
c0015a27:	83 ec 1c             	sub    esp,0x1c
c0015a2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a2e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015a31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a35:	89 c5                	mov    ebp,eax
c0015a37:	0f b6 44 24 34       	movzx  eax,BYTE PTR [esp+0x34]
c0015a3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a44:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c0015a48:	39 d8                	cmp    eax,ebx
c0015a4a:	0f 8e 81 00 00 00    	jle    c0015ad1 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xb0>
c0015a50:	53                   	push   ebx
c0015a51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015a55:	e8 93 ff ff ff       	call   c00159ed <KeGetELFProgramHeader(unsigned char*, int)>
c0015a5a:	5a                   	pop    edx
c0015a5b:	83 38 01             	cmp    DWORD PTR [eax],0x1
c0015a5e:	59                   	pop    ecx
c0015a5f:	75 6a                	jne    c0015acb <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c0015a61:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0015a64:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0015a67:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
c0015a6a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015a6d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015a71:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015a76:	75 22                	jne    c0015a9a <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x79>
c0015a78:	83 ec 0c             	sub    esp,0xc
c0015a7b:	68 70 89 02 c0       	push   0xc0028970
c0015a80:	e8 33 a2 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0015a85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a89:	01 f2                	add    edx,esi
c0015a8b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0015a8f:	83 c4 10             	add    esp,0x10
c0015a92:	39 d5                	cmp    ebp,edx
c0015a94:	73 35                	jae    c0015acb <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c0015a96:	89 d5                	mov    ebp,edx
c0015a98:	eb 31                	jmp    c0015acb <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c0015a9a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015a9e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015aa1:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0015aa5:	01 f2                	add    edx,esi
c0015aa7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015aab:	89 d7                	mov    edi,edx
c0015aad:	03 70 04             	add    esi,DWORD PTR [eax+0x4]
c0015ab0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015ab2:	50                   	push   eax
c0015ab3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ab7:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0015abb:	50                   	push   eax
c0015abc:	6a 00                	push   0x0
c0015abe:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0015ac2:	52                   	push   edx
c0015ac3:	e8 28 aa fe ff       	call   c00004f0 <memset>
c0015ac8:	83 c4 10             	add    esp,0x10
c0015acb:	43                   	inc    ebx
c0015acc:	e9 6f ff ff ff       	jmp    c0015a40 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x1f>
c0015ad1:	83 c4 1c             	add    esp,0x1c
c0015ad4:	89 e8                	mov    eax,ebp
c0015ad6:	5b                   	pop    ebx
c0015ad7:	5e                   	pop    esi
c0015ad8:	5f                   	pop    edi
c0015ad9:	5d                   	pop    ebp
c0015ada:	c3                   	ret    

c0015adb <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>:
c0015adb:	57                   	push   edi
c0015adc:	56                   	push   esi
c0015add:	53                   	push   ebx
c0015ade:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ae2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015ae6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015aea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015aee:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015af1:	85 db                	test   ebx,ebx
c0015af3:	74 04                	je     c0015af9 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0015af5:	85 c0                	test   eax,eax
c0015af7:	75 05                	jne    c0015afe <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x23>
c0015af9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0015afc:	eb 5c                	jmp    c0015b5a <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x7f>
c0015afe:	50                   	push   eax
c0015aff:	51                   	push   ecx
c0015b00:	e8 d9 fe ff ff       	call   c00159de <KeGetELFSectionHeader(unsigned char*, int)>
c0015b05:	5f                   	pop    edi
c0015b06:	89 c7                	mov    edi,eax
c0015b08:	5a                   	pop    edx
c0015b09:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015b0c:	31 d2                	xor    edx,edx
c0015b0e:	f7 77 24             	div    DWORD PTR [edi+0x24]
c0015b11:	39 c3                	cmp    ebx,eax
c0015b13:	73 e4                	jae    c0015af9 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0015b15:	c1 e3 04             	shl    ebx,0x4
c0015b18:	03 5f 10             	add    ebx,DWORD PTR [edi+0x10]
c0015b1b:	01 cb                	add    ebx,ecx
c0015b1d:	0f b7 53 0e          	movzx  edx,WORD PTR [ebx+0xe]
c0015b21:	85 d2                	test   edx,edx
c0015b23:	75 39                	jne    c0015b5e <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x83>
c0015b25:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0015b28:	51                   	push   ecx
c0015b29:	e8 b0 fe ff ff       	call   c00159de <KeGetELFSectionHeader(unsigned char*, int)>
c0015b2e:	52                   	push   edx
c0015b2f:	03 0b                	add    ecx,DWORD PTR [ebx]
c0015b31:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c0015b34:	51                   	push   ecx
c0015b35:	e8 78 fb ff ff       	call   c00156b2 <Thr::getAddressOfKernelSymbol(char const*)>
c0015b3a:	83 c4 10             	add    esp,0x10
c0015b3d:	85 c0                	test   eax,eax
c0015b3f:	75 32                	jne    c0015b73 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0015b41:	f6 43 0c 20          	test   BYTE PTR [ebx+0xc],0x20
c0015b45:	75 03                	jne    c0015b4a <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x6f>
c0015b47:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0015b4a:	83 ec 0c             	sub    esp,0xc
c0015b4d:	68 99 89 02 c0       	push   0xc0028999
c0015b52:	e8 25 14 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015b57:	83 c4 10             	add    esp,0x10
c0015b5a:	31 c0                	xor    eax,eax
c0015b5c:	eb 15                	jmp    c0015b73 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0015b5e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015b61:	81 fa f1 ff 00 00    	cmp    edx,0xfff1
c0015b67:	74 0a                	je     c0015b73 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0015b69:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b6d:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015b71:	01 d0                	add    eax,edx
c0015b73:	5b                   	pop    ebx
c0015b74:	5e                   	pop    esi
c0015b75:	5f                   	pop    edi
c0015b76:	c3                   	ret    

c0015b77 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>:
c0015b77:	55                   	push   ebp
c0015b78:	57                   	push   edi
c0015b79:	56                   	push   esi
c0015b7a:	53                   	push   ebx
c0015b7b:	83 ec 1c             	sub    esp,0x1c
c0015b7e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0015b82:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015b86:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015b8a:	8b 69 18             	mov    ebp,DWORD PTR [ecx+0x18]
c0015b8d:	8b 1e                	mov    ebx,DWORD PTR [esi]
c0015b8f:	29 ef                	sub    edi,ebp
c0015b91:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0015b94:	01 fb                	add    ebx,edi
c0015b96:	c1 ea 08             	shr    edx,0x8
c0015b99:	74 2d                	je     c0015bc8 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x51>
c0015b9b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015ba0:	50                   	push   eax
c0015ba1:	50                   	push   eax
c0015ba2:	55                   	push   ebp
c0015ba3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015ba7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0015bab:	50                   	push   eax
c0015bac:	52                   	push   edx
c0015bad:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015bb1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0015bb4:	51                   	push   ecx
c0015bb5:	e8 21 ff ff ff       	call   c0015adb <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>
c0015bba:	83 c4 20             	add    esp,0x20
c0015bbd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015bc2:	74 06                	je     c0015bca <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x53>
c0015bc4:	31 c0                	xor    eax,eax
c0015bc6:	eb 27                	jmp    c0015bef <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0015bc8:	31 c0                	xor    eax,eax
c0015bca:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c0015bce:	83 fa 01             	cmp    edx,0x1
c0015bd1:	75 04                	jne    c0015bd7 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x60>
c0015bd3:	01 03                	add    DWORD PTR [ebx],eax
c0015bd5:	eb 16                	jmp    c0015bed <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c0015bd7:	83 fa 02             	cmp    edx,0x2
c0015bda:	75 08                	jne    c0015be4 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x6d>
c0015bdc:	03 03                	add    eax,DWORD PTR [ebx]
c0015bde:	29 d8                	sub    eax,ebx
c0015be0:	89 03                	mov    DWORD PTR [ebx],eax
c0015be2:	eb 09                	jmp    c0015bed <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c0015be4:	31 c0                	xor    eax,eax
c0015be6:	83 fa 08             	cmp    edx,0x8
c0015be9:	75 04                	jne    c0015bef <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0015beb:	01 3b                	add    DWORD PTR [ebx],edi
c0015bed:	b0 01                	mov    al,0x1
c0015bef:	83 c4 1c             	add    esp,0x1c
c0015bf2:	5b                   	pop    ebx
c0015bf3:	5e                   	pop    esi
c0015bf4:	5f                   	pop    edi
c0015bf5:	5d                   	pop    ebp
c0015bf6:	c3                   	ret    

c0015bf7 <KePerformRelocations(unsigned char*, unsigned long)>:
c0015bf7:	55                   	push   ebp
c0015bf8:	31 ed                	xor    ebp,ebp
c0015bfa:	57                   	push   edi
c0015bfb:	56                   	push   esi
c0015bfc:	53                   	push   ebx
c0015bfd:	83 ec 1c             	sub    esp,0x1c
c0015c00:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c04:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c0015c08:	39 e8                	cmp    eax,ebp
c0015c0a:	0f 8e 92 00 00 00    	jle    c0015ca2 <KePerformRelocations(unsigned char*, unsigned long)+0xab>
c0015c10:	55                   	push   ebp
c0015c11:	56                   	push   esi
c0015c12:	e8 c7 fd ff ff       	call   c00159de <KeGetELFSectionHeader(unsigned char*, int)>
c0015c17:	5a                   	pop    edx
c0015c18:	89 c3                	mov    ebx,eax
c0015c1a:	59                   	pop    ecx
c0015c1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015c1e:	83 f8 09             	cmp    eax,0x9
c0015c21:	75 64                	jne    c0015c87 <KePerformRelocations(unsigned char*, unsigned long)+0x90>
c0015c23:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015c26:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0015c29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c2d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c34:	ff 33                	push   DWORD PTR [ebx]
c0015c36:	56                   	push   esi
c0015c37:	e8 c2 fd ff ff       	call   c00159fe <KeLookupELFString(unsigned char*, int)>
c0015c3c:	68 ba 89 02 c0       	push   0xc00289ba
c0015c41:	50                   	push   eax
c0015c42:	e8 09 ab fe ff       	call   c0000750 <strcmp>
c0015c47:	83 c4 10             	add    esp,0x10
c0015c4a:	89 c1                	mov    ecx,eax
c0015c4c:	85 c0                	test   eax,eax
c0015c4e:	75 4c                	jne    c0015c9c <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015c50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c54:	31 d2                	xor    edx,edx
c0015c56:	01 f7                	add    edi,esi
c0015c58:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0015c5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c60:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0015c64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015c68:	7d 32                	jge    c0015c9c <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015c6a:	57                   	push   edi
c0015c6b:	83 c7 08             	add    edi,0x8
c0015c6e:	53                   	push   ebx
c0015c6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c73:	56                   	push   esi
c0015c74:	e8 fe fe ff ff       	call   c0015b77 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>
c0015c79:	83 c4 10             	add    esp,0x10
c0015c7c:	84 c0                	test   al,al
c0015c7e:	74 24                	je     c0015ca4 <KePerformRelocations(unsigned char*, unsigned long)+0xad>
c0015c80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c84:	41                   	inc    ecx
c0015c85:	eb d9                	jmp    c0015c60 <KePerformRelocations(unsigned char*, unsigned long)+0x69>
c0015c87:	83 f8 04             	cmp    eax,0x4
c0015c8a:	75 10                	jne    c0015c9c <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015c8c:	83 ec 0c             	sub    esp,0xc
c0015c8f:	68 c3 89 02 c0       	push   0xc00289c3
c0015c94:	e8 1f a0 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0015c99:	83 c4 10             	add    esp,0x10
c0015c9c:	45                   	inc    ebp
c0015c9d:	e9 62 ff ff ff       	jmp    c0015c04 <KePerformRelocations(unsigned char*, unsigned long)+0xd>
c0015ca2:	b0 01                	mov    al,0x1
c0015ca4:	83 c4 1c             	add    esp,0x1c
c0015ca7:	5b                   	pop    ebx
c0015ca8:	5e                   	pop    esi
c0015ca9:	5f                   	pop    edi
c0015caa:	5d                   	pop    ebp
c0015cab:	c3                   	ret    

c0015cac <KeLoadELF(unsigned char*, bool, unsigned long)>:
c0015cac:	57                   	push   edi
c0015cad:	56                   	push   esi
c0015cae:	53                   	push   ebx
c0015caf:	83 ec 10             	sub    esp,0x10
c0015cb2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015cb6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0015cba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015cbe:	53                   	push   ebx
c0015cbf:	e8 fb fc ff ff       	call   c00159bf <KeIsELFValid(Elf32_Ehdr*)>
c0015cc4:	59                   	pop    ecx
c0015cc5:	84 c0                	test   al,al
c0015cc7:	75 04                	jne    c0015ccd <KeLoadELF(unsigned char*, bool, unsigned long)+0x21>
c0015cc9:	31 c0                	xor    eax,eax
c0015ccb:	eb 4d                	jmp    c0015d1a <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0015ccd:	81 e6 ff 00 00 00    	and    esi,0xff
c0015cd3:	74 07                	je     c0015cdc <KeLoadELF(unsigned char*, bool, unsigned long)+0x30>
c0015cd5:	66 83 7b 30 00       	cmp    WORD PTR [ebx+0x30],0x0
c0015cda:	74 ed                	je     c0015cc9 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015cdc:	66 83 7b 2c 00       	cmp    WORD PTR [ebx+0x2c],0x0
c0015ce1:	74 e6                	je     c0015cc9 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015ce3:	52                   	push   edx
c0015ce4:	57                   	push   edi
c0015ce5:	56                   	push   esi
c0015ce6:	53                   	push   ebx
c0015ce7:	e8 35 fd ff ff       	call   c0015a21 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>
c0015cec:	59                   	pop    ecx
c0015ced:	5a                   	pop    edx
c0015cee:	50                   	push   eax
c0015cef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015cf3:	68 e4 89 02 c0       	push   0xc00289e4
c0015cf8:	e8 7f 12 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015cfd:	83 c4 10             	add    esp,0x10
c0015d00:	85 f6                	test   esi,esi
c0015d02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d06:	74 12                	je     c0015d1a <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0015d08:	50                   	push   eax
c0015d09:	50                   	push   eax
c0015d0a:	57                   	push   edi
c0015d0b:	53                   	push   ebx
c0015d0c:	e8 e6 fe ff ff       	call   c0015bf7 <KePerformRelocations(unsigned char*, unsigned long)>
c0015d11:	83 c4 10             	add    esp,0x10
c0015d14:	84 c0                	test   al,al
c0015d16:	74 b1                	je     c0015cc9 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015d18:	89 f8                	mov    eax,edi
c0015d1a:	83 c4 10             	add    esp,0x10
c0015d1d:	5b                   	pop    ebx
c0015d1e:	5e                   	pop    esi
c0015d1f:	5f                   	pop    edi
c0015d20:	c3                   	ret    

c0015d21 <KeLoadDriver(char const*)>:
c0015d21:	55                   	push   ebp
c0015d22:	57                   	push   edi
c0015d23:	56                   	push   esi
c0015d24:	53                   	push   ebx
c0015d25:	83 ec 34             	sub    esp,0x34
c0015d28:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015d2c:	56                   	push   esi
c0015d2d:	68 08 8a 02 c0       	push   0xc0028a08
c0015d32:	e8 45 12 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015d37:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015d3e:	e8 20 9b ff ff       	call   c000f863 <malloc>
c0015d43:	83 c4 0c             	add    esp,0xc
c0015d46:	89 c3                	mov    ebx,eax
c0015d48:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0015d4e:	56                   	push   esi
c0015d4f:	50                   	push   eax
c0015d50:	e8 35 24 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015d55:	83 c4 10             	add    esp,0x10
c0015d58:	85 db                	test   ebx,ebx
c0015d5a:	0f 84 0e 01 00 00    	je     c0015e6e <KeLoadDriver(char const*)+0x14d>
c0015d60:	55                   	push   ebp
c0015d61:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015d65:	50                   	push   eax
c0015d66:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015d6a:	50                   	push   eax
c0015d6b:	53                   	push   ebx
c0015d6c:	e8 39 27 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0015d71:	83 c4 10             	add    esp,0x10
c0015d74:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015d79:	0f 85 ef 00 00 00    	jne    c0015e6e <KeLoadDriver(char const*)+0x14d>
c0015d7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015d87:	89 d1                	mov    ecx,edx
c0015d89:	09 c1                	or     ecx,eax
c0015d8b:	0f 84 dd 00 00 00    	je     c0015e6e <KeLoadDriver(char const*)+0x14d>
c0015d91:	05 ff 0f 00 00       	add    eax,0xfff
c0015d96:	83 d2 00             	adc    edx,0x0
c0015d99:	51                   	push   ecx
c0015d9a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015d9e:	6a 03                	push   0x3
c0015da0:	50                   	push   eax
c0015da1:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c0015da7:	e8 8a dc ff ff       	call   c0013a36 <VAS::allocatePages(int, int)>
c0015dac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015db0:	5e                   	pop    esi
c0015db1:	5f                   	pop    edi
c0015db2:	6a 01                	push   0x1
c0015db4:	53                   	push   ebx
c0015db5:	e8 ee 23 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015dba:	83 c4 10             	add    esp,0x10
c0015dbd:	85 c0                	test   eax,eax
c0015dbf:	74 11                	je     c0015dd2 <KeLoadDriver(char const*)+0xb1>
c0015dc1:	83 ec 0c             	sub    esp,0xc
c0015dc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015dc6:	53                   	push   ebx
c0015dc7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015dca:	83 c4 10             	add    esp,0x10
c0015dcd:	e9 9c 00 00 00       	jmp    c0015e6e <KeLoadDriver(char const*)+0x14d>
c0015dd2:	83 ec 0c             	sub    esp,0xc
c0015dd5:	31 ed                	xor    ebp,ebp
c0015dd7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015ddb:	e8 83 9a ff ff       	call   c000f863 <malloc>
c0015de0:	5a                   	pop    edx
c0015de1:	89 c6                	mov    esi,eax
c0015de3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015de7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015de9:	52                   	push   edx
c0015dea:	56                   	push   esi
c0015deb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015def:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015df3:	53                   	push   ebx
c0015df4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015df7:	83 c4 14             	add    esp,0x14
c0015dfa:	53                   	push   ebx
c0015dfb:	e8 06 24 ff ff       	call   c0008206 <File::close()>
c0015e00:	83 c4 0c             	add    esp,0xc
c0015e03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015e07:	6a 01                	push   0x1
c0015e09:	56                   	push   esi
c0015e0a:	e8 9d fe ff ff       	call   c0015cac <KeLoadELF(unsigned char*, bool, unsigned long)>
c0015e0f:	83 c4 10             	add    esp,0x10
c0015e12:	89 c3                	mov    ebx,eax
c0015e14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e18:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e1c:	05 ff 0f 00 00       	add    eax,0xfff
c0015e21:	bf 00 00 00 00       	mov    edi,0x0
c0015e26:	83 d2 00             	adc    edx,0x0
c0015e29:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015e2d:	c1 ea 0c             	shr    edx,0xc
c0015e30:	39 c5                	cmp    ebp,eax
c0015e32:	89 d1                	mov    ecx,edx
c0015e34:	89 f8                	mov    eax,edi
c0015e36:	19 c8                	sbb    eax,ecx
c0015e38:	73 36                	jae    c0015e70 <KeLoadDriver(char const*)+0x14f>
c0015e3a:	50                   	push   eax
c0015e3b:	50                   	push   eax
c0015e3c:	89 e8                	mov    eax,ebp
c0015e3e:	c1 e0 0c             	shl    eax,0xc
c0015e41:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0015e45:	50                   	push   eax
c0015e46:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c0015e4c:	e8 e7 d6 ff ff       	call   c0013538 <VAS::getPageTableEntry(unsigned long)>
c0015e51:	83 c4 10             	add    esp,0x10
c0015e54:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e56:	a8 60                	test   al,0x60
c0015e58:	75 11                	jne    c0015e6b <KeLoadDriver(char const*)+0x14a>
c0015e5a:	83 ec 0c             	sub    esp,0xc
c0015e5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015e62:	50                   	push   eax
c0015e63:	e8 db 9f ff ff       	call   c000fe43 <Phys::freePage(unsigned long)>
c0015e68:	83 c4 10             	add    esp,0x10
c0015e6b:	45                   	inc    ebp
c0015e6c:	eb a6                	jmp    c0015e14 <KeLoadDriver(char const*)+0xf3>
c0015e6e:	31 db                	xor    ebx,ebx
c0015e70:	83 c4 2c             	add    esp,0x2c
c0015e73:	89 d8                	mov    eax,ebx
c0015e75:	5b                   	pop    ebx
c0015e76:	5e                   	pop    esi
c0015e77:	5f                   	pop    edi
c0015e78:	5d                   	pop    ebp
c0015e79:	c3                   	ret    

c0015e7a <KeExecuteDriver(unsigned long, void*)>:
c0015e7a:	56                   	push   esi
c0015e7b:	53                   	push   ebx
c0015e7c:	51                   	push   ecx
c0015e7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e81:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015e85:	85 db                	test   ebx,ebx
c0015e87:	75 10                	jne    c0015e99 <KeExecuteDriver(unsigned long, void*)+0x1f>
c0015e89:	83 ec 0c             	sub    esp,0xc
c0015e8c:	68 1e 8a 02 c0       	push   0xc0028a1e
c0015e91:	e8 22 9e ff ff       	call   c000fcb8 <KePanic(char const*)>
c0015e96:	83 c4 10             	add    esp,0x10
c0015e99:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0015e9d:	89 d8                	mov    eax,ebx
c0015e9f:	5a                   	pop    edx
c0015ea0:	5b                   	pop    ebx
c0015ea1:	5e                   	pop    esi
c0015ea2:	ff e0                	jmp    eax

c0015ea4 <KeLoadAndExecuteDriver(char const*, void*, bool)>:
c0015ea4:	57                   	push   edi
c0015ea5:	56                   	push   esi
c0015ea6:	53                   	push   ebx
c0015ea7:	81 ec 0c 01 00 00    	sub    esp,0x10c
c0015ead:	8b b4 24 1c 01 00 00 	mov    esi,DWORD PTR [esp+0x11c]
c0015eb4:	8b bc 24 24 01 00 00 	mov    edi,DWORD PTR [esp+0x124]
c0015ebb:	56                   	push   esi
c0015ebc:	e8 60 fe ff ff       	call   c0015d21 <KeLoadDriver(char const*)>
c0015ec1:	83 c4 10             	add    esp,0x10
c0015ec4:	85 c0                	test   eax,eax
c0015ec6:	74 16                	je     c0015ede <KeLoadAndExecuteDriver(char const*, void*, bool)+0x3a>
c0015ec8:	53                   	push   ebx
c0015ec9:	53                   	push   ebx
c0015eca:	b3 01                	mov    bl,0x1
c0015ecc:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0015ed3:	50                   	push   eax
c0015ed4:	e8 a1 ff ff ff       	call   c0015e7a <KeExecuteDriver(unsigned long, void*)>
c0015ed9:	83 c4 10             	add    esp,0x10
c0015edc:	eb 2d                	jmp    c0015f0b <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0015ede:	89 fb                	mov    ebx,edi
c0015ee0:	84 db                	test   bl,bl
c0015ee2:	74 27                	je     c0015f0b <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0015ee4:	50                   	push   eax
c0015ee5:	50                   	push   eax
c0015ee6:	68 48 8a 02 c0       	push   0xc0028a48
c0015eeb:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015eef:	53                   	push   ebx
c0015ef0:	e8 4b a7 fe ff       	call   c0000640 <strcpy>
c0015ef5:	5a                   	pop    edx
c0015ef6:	59                   	pop    ecx
c0015ef7:	56                   	push   esi
c0015ef8:	53                   	push   ebx
c0015ef9:	e8 42 a9 fe ff       	call   c0000840 <strcat>
c0015efe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f01:	e8 b2 9d ff ff       	call   c000fcb8 <KePanic(char const*)>
c0015f06:	31 db                	xor    ebx,ebx
c0015f08:	83 c4 10             	add    esp,0x10
c0015f0b:	81 c4 00 01 00 00    	add    esp,0x100
c0015f11:	88 d8                	mov    al,bl
c0015f13:	5b                   	pop    ebx
c0015f14:	5e                   	pop    esi
c0015f15:	5f                   	pop    edi
c0015f16:	c3                   	ret    

c0015f17 <KeProcessExec(Process*, char const*)>:
c0015f17:	56                   	push   esi
c0015f18:	53                   	push   ebx
c0015f19:	83 ec 04             	sub    esp,0x4
c0015f1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f20:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0015f26:	85 f6                	test   esi,esi
c0015f28:	74 16                	je     c0015f40 <KeProcessExec(Process*, char const*)+0x29>
c0015f2a:	83 ec 0c             	sub    esp,0xc
c0015f2d:	56                   	push   esi
c0015f2e:	e8 97 d8 ff ff       	call   c00137ca <VAS::~VAS()>
c0015f33:	58                   	pop    eax
c0015f34:	5a                   	pop    edx
c0015f35:	6a 14                	push   0x14
c0015f37:	56                   	push   esi
c0015f38:	e8 3f 74 ff ff       	call   c000d37c <operator delete(void*, unsigned long)>
c0015f3d:	83 c4 10             	add    esp,0x10
c0015f40:	83 ec 0c             	sub    esp,0xc
c0015f43:	6a 14                	push   0x14
c0015f45:	e8 19 99 ff ff       	call   c000f863 <malloc>
c0015f4a:	89 c6                	mov    esi,eax
c0015f4c:	58                   	pop    eax
c0015f4d:	5a                   	pop    edx
c0015f4e:	6a 00                	push   0x0
c0015f50:	56                   	push   esi
c0015f51:	e8 14 dd ff ff       	call   c0013c6a <VAS::VAS(bool)>
c0015f56:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0015f5c:	59                   	pop    ecx
c0015f5d:	5e                   	pop    esi
c0015f5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f62:	50                   	push   eax
c0015f63:	53                   	push   ebx
c0015f64:	e8 9e f4 ff ff       	call   c0015407 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015f69:	83 c4 14             	add    esp,0x14
c0015f6c:	31 c0                	xor    eax,eax
c0015f6e:	5b                   	pop    ebx
c0015f6f:	5e                   	pop    esi
c0015f70:	c3                   	ret    
c0015f71:	66 90                	xchg   ax,ax
c0015f73:	90                   	nop

c0015f74 <userModeEntryPoint(void*)>:
c0015f74:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0015f7c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0015f81:	85 c0                	test   eax,eax
c0015f83:	75 03                	jne    c0015f88 <userModeEntryPoint(void*)+0x14>
c0015f85:	fb                   	sti    
c0015f86:	66 90                	xchg   ax,ax
c0015f88:	fb                   	sti    
c0015f89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f8e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f91:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0015f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f9b:	e9 9f a2 fe ff       	jmp    c000023f <goToUsermode>

c0015fa0 <changeTSS>:
c0015fa0:	83 ec 14             	sub    esp,0x14
c0015fa3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fa8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0015fab:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015fb0:	c1 e2 15             	shl    edx,0x15
c0015fb3:	29 d0                	sub    eax,edx
c0015fb5:	50                   	push   eax
c0015fb6:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0015fbb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015fc1:	05 68 11 00 00       	add    eax,0x1168
c0015fc6:	50                   	push   eax
c0015fc7:	e8 44 cb ff ff       	call   c0012b10 <TSS::setESP(unsigned long)>
c0015fcc:	83 c4 1c             	add    esp,0x1c
c0015fcf:	c3                   	ret    

c0015fd0 <switchToThread(ThreadControlBlock*)>:
c0015fd0:	57                   	push   edi
c0015fd1:	8b 0d 2c 13 03 c0    	mov    ecx,DWORD PTR ds:0xc003132c
c0015fd7:	56                   	push   esi
c0015fd8:	85 c9                	test   ecx,ecx
c0015fda:	53                   	push   ebx
c0015fdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fdf:	0f 85 9b 00 00 00    	jne    c0016080 <switchToThread(ThreadControlBlock*)+0xb0>
c0015fe5:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0015fe9:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015fef:	0f 84 87 00 00 00    	je     c001607c <switchToThread(ThreadControlBlock*)+0xac>
c0015ff5:	b8 00 04 00 00       	mov    eax,0x400
c0015ffa:	29 d0                	sub    eax,edx
c0015ffc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0015fff:	d1 f8                	sar    eax,1
c0016001:	01 d0                	add    eax,edx
c0016003:	90                   	nop
c0016004:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016007:	e8 08 49 00 00       	call   c001a914 <HalQueryPerformanceCounter()>
c001600c:	a3 70 13 03 c0       	mov    ds:0xc0031370,eax
c0016011:	89 15 74 13 03 c0    	mov    DWORD PTR ds:0xc0031374,edx
c0016017:	89 c6                	mov    esi,eax
c0016019:	89 d7                	mov    edi,edx
c001601b:	2b 35 60 13 03 c0    	sub    esi,DWORD PTR ds:0xc0031360
c0016021:	a3 60 13 03 c0       	mov    ds:0xc0031360,eax
c0016026:	1b 3d 64 13 03 c0    	sbb    edi,DWORD PTR ds:0xc0031364
c001602c:	89 35 68 13 03 c0    	mov    DWORD PTR ds:0xc0031368,esi
c0016032:	89 3d 6c 13 03 c0    	mov    DWORD PTR ds:0xc003136c,edi
c0016038:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001603e:	89 15 64 13 03 c0    	mov    DWORD PTR ds:0xc0031364,edx
c0016044:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016047:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001604a:	01 c6                	add    esi,eax
c001604c:	11 d7                	adc    edi,edx
c001604e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016051:	83 ec 0c             	sub    esp,0xc
c0016054:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016057:	53                   	push   ebx
c0016058:	e8 1a a2 fe ff       	call   c0000277 <switchToThreadASM>
c001605d:	0f 20 c0             	mov    eax,cr0
c0016060:	83 c8 08             	or     eax,0x8
c0016063:	0f 22 c0             	mov    cr0,eax
c0016066:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001606b:	83 c4 10             	add    esp,0x10
c001606e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016072:	5b                   	pop    ebx
c0016073:	5e                   	pop    esi
c0016074:	5f                   	pop    edi
c0016075:	e9 0a f0 ff ff       	jmp    c0015084 <KeCheckAlarm(ThreadControlBlock*)>
c001607a:	66 90                	xchg   ax,ax
c001607c:	31 c0                	xor    eax,eax
c001607e:	eb 84                	jmp    c0016004 <switchToThread(ThreadControlBlock*)+0x34>
c0016080:	5b                   	pop    ebx
c0016081:	c7 05 28 13 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x1
c001608b:	5e                   	pop    esi
c001608c:	5f                   	pop    edi
c001608d:	c3                   	ret    
c001608e:	66 90                	xchg   ax,ax

c0016090 <Process::addArgs(char**)>:
c0016090:	57                   	push   edi
c0016091:	56                   	push   esi
c0016092:	53                   	push   ebx
c0016093:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016097:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001609b:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c00160a5:	85 ff                	test   edi,edi
c00160a7:	74 4f                	je     c00160f8 <Process::addArgs(char**)+0x68>
c00160a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00160ab:	85 c0                	test   eax,eax
c00160ad:	74 49                	je     c00160f8 <Process::addArgs(char**)+0x68>
c00160af:	31 db                	xor    ebx,ebx
c00160b1:	8d 76 00             	lea    esi,[esi+0x0]
c00160b4:	83 ec 0c             	sub    esp,0xc
c00160b7:	50                   	push   eax
c00160b8:	e8 b3 a4 fe ff       	call   c0000570 <strlen>
c00160bd:	83 c0 01             	add    eax,0x1
c00160c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00160c3:	e8 9b 97 ff ff       	call   c000f863 <malloc>
c00160c8:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c00160cf:	5a                   	pop    edx
c00160d0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00160d3:	59                   	pop    ecx
c00160d4:	83 c3 01             	add    ebx,0x1
c00160d7:	52                   	push   edx
c00160d8:	50                   	push   eax
c00160d9:	e8 62 a5 fe ff       	call   c0000640 <strcpy>
c00160de:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c00160e4:	83 c4 10             	add    esp,0x10
c00160e7:	83 c1 01             	add    ecx,0x1
c00160ea:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c00160f0:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00160f3:	85 c0                	test   eax,eax
c00160f5:	75 bd                	jne    c00160b4 <Process::addArgs(char**)+0x24>
c00160f7:	90                   	nop
c00160f8:	5b                   	pop    ebx
c00160f9:	5e                   	pop    esi
c00160fa:	5f                   	pop    edi
c00160fb:	c3                   	ret    

c00160fc <Process::Process(char const*, Process*, char**)>:
c00160fc:	56                   	push   esi
c00160fd:	53                   	push   ebx
c00160fe:	83 ec 14             	sub    esp,0x14
c0016101:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016105:	05 0c 02 00 00       	add    eax,0x20c
c001610a:	bb 07 00 00 00       	mov    ebx,0x7
c001610f:	89 c6                	mov    esi,eax
c0016111:	8d 76 00             	lea    esi,[esi+0x0]
c0016114:	85 db                	test   ebx,ebx
c0016116:	78 14                	js     c001612c <Process::Process(char const*, Process*, char**)+0x30>
c0016118:	83 ec 0c             	sub    esp,0xc
c001611b:	56                   	push   esi
c001611c:	e8 f7 fe 00 00       	call   c0026018 <ThreadControlBlock::ThreadControlBlock()>
c0016121:	83 c4 10             	add    esp,0x10
c0016124:	83 c6 73             	add    esi,0x73
c0016127:	83 eb 01             	sub    ebx,0x1
c001612a:	eb e8                	jmp    c0016114 <Process::Process(char const*, Process*, char**)+0x18>
c001612c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016130:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016137:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001613b:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016142:	83 ec 0c             	sub    esp,0xc
c0016145:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016149:	e8 5a 84 ff ff       	call   c000e5a8 <KeNewProcessEnv(Process*)>
c001614e:	83 c4 10             	add    esp,0x10
c0016151:	89 c2                	mov    edx,eax
c0016153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016157:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c001615d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016161:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c001616a:	a1 fc b5 02 c0       	mov    eax,ds:0xc002b5fc
c001616f:	8d 50 01             	lea    edx,[eax+0x1]
c0016172:	89 15 fc b5 02 c0    	mov    DWORD PTR ds:0xc002b5fc,edx
c0016178:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001617c:	89 02                	mov    DWORD PTR [edx],eax
c001617e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016186:	83 ec 0c             	sub    esp,0xc
c0016189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001618d:	e8 d1 96 ff ff       	call   c000f863 <malloc>
c0016192:	83 c4 10             	add    esp,0x10
c0016195:	89 c3                	mov    ebx,eax
c0016197:	83 ec 08             	sub    esp,0x8
c001619a:	6a 00                	push   0x0
c001619c:	53                   	push   ebx
c001619d:	e8 c8 da ff ff       	call   c0013c6a <VAS::VAS(bool)>
c00161a2:	83 c4 10             	add    esp,0x10
c00161a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161a9:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00161af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161b3:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00161bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00161c5:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00161cb:	e8 5b ac ff ff       	call   c0010e2b <KeInitSignals()>
c00161d0:	89 c2                	mov    edx,eax
c00161d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161d6:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c00161dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161e0:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00161e6:	85 c0                	test   eax,eax
c00161e8:	74 42                	je     c001622c <Process::Process(char const*, Process*, char**)+0x130>
c00161ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161ee:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00161f4:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00161fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161fe:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016208:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001620e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016214:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016218:	05 0c 01 00 00       	add    eax,0x10c
c001621d:	83 ec 08             	sub    esp,0x8
c0016220:	52                   	push   edx
c0016221:	50                   	push   eax
c0016222:	e8 19 a4 fe ff       	call   c0000640 <strcpy>
c0016227:	83 c4 10             	add    esp,0x10
c001622a:	eb 7c                	jmp    c00162a8 <Process::Process(char const*, Process*, char**)+0x1ac>
c001622c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016234:	83 ec 0c             	sub    esp,0xc
c0016237:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001623b:	e8 23 96 ff ff       	call   c000f863 <malloc>
c0016240:	83 c4 10             	add    esp,0x10
c0016243:	89 c3                	mov    ebx,eax
c0016245:	83 ec 08             	sub    esp,0x8
c0016248:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001624c:	53                   	push   ebx
c001624d:	e8 be c5 ff ff       	call   c0012810 <VgaText::VgaText(char const*)>
c0016252:	83 c4 10             	add    esp,0x10
c0016255:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016259:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c001625f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016263:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016269:	83 ec 0c             	sub    esp,0xc
c001626c:	50                   	push   eax
c001626d:	e8 f4 bd ff ff       	call   c0012066 <addToTerminalCycle(VgaText*)>
c0016272:	83 c4 10             	add    esp,0x10
c0016275:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016279:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001627f:	83 ec 0c             	sub    esp,0xc
c0016282:	50                   	push   eax
c0016283:	e8 4f c0 ff ff       	call   c00122d7 <setActiveTerminal(VgaText*)>
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001628f:	05 0c 01 00 00       	add    eax,0x10c
c0016294:	83 ec 08             	sub    esp,0x8
c0016297:	68 5c 8a 02 c0       	push   0xc0028a5c
c001629c:	50                   	push   eax
c001629d:	e8 9e a3 fe ff       	call   c0000640 <strcpy>
c00162a2:	83 c4 10             	add    esp,0x10
c00162a5:	8d 76 00             	lea    esi,[esi+0x0]
c00162a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162ac:	83 c0 0c             	add    eax,0xc
c00162af:	83 ec 08             	sub    esp,0x8
c00162b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162b6:	50                   	push   eax
c00162b7:	e8 84 a3 fe ff       	call   c0000640 <strcpy>
c00162bc:	83 c4 10             	add    esp,0x10
c00162bf:	83 ec 08             	sub    esp,0x8
c00162c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00162c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162ca:	e8 c1 fd ff ff       	call   c0016090 <Process::addArgs(char**)>
c00162cf:	83 c4 10             	add    esp,0x10
c00162d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162d6:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c00162dc:	83 e2 7f             	and    edx,0x7f
c00162df:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c00162e5:	83 ec 08             	sub    esp,0x8
c00162e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162f0:	e8 12 f1 ff ff       	call   c0015407 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00162f5:	83 c4 10             	add    esp,0x10
c00162f8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00162fc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016300:	83 f0 01             	xor    eax,0x1
c0016303:	88 c2                	mov    dl,al
c0016305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016309:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c001630f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016313:	8b 10                	mov    edx,DWORD PTR [eax]
c0016315:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001631a:	52                   	push   edx
c001631b:	50                   	push   eax
c001631c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016320:	68 c8 8a 02 c0       	push   0xc0028ac8
c0016325:	e8 52 0c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001632a:	83 c4 10             	add    esp,0x10
c001632d:	90                   	nop
c001632e:	83 c4 14             	add    esp,0x14
c0016331:	5b                   	pop    ebx
c0016332:	5e                   	pop    esi
c0016333:	c3                   	ret    

c0016334 <Process::Process(bool, char const*, Process*, char**)>:
c0016334:	56                   	push   esi
c0016335:	53                   	push   ebx
c0016336:	83 ec 24             	sub    esp,0x24
c0016339:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001633d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016341:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016345:	05 0c 02 00 00       	add    eax,0x20c
c001634a:	bb 07 00 00 00       	mov    ebx,0x7
c001634f:	89 c6                	mov    esi,eax
c0016351:	8d 76 00             	lea    esi,[esi+0x0]
c0016354:	85 db                	test   ebx,ebx
c0016356:	78 14                	js     c001636c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016358:	83 ec 0c             	sub    esp,0xc
c001635b:	56                   	push   esi
c001635c:	e8 b7 fc 00 00       	call   c0026018 <ThreadControlBlock::ThreadControlBlock()>
c0016361:	83 c4 10             	add    esp,0x10
c0016364:	83 c6 73             	add    esi,0x73
c0016367:	83 eb 01             	sub    ebx,0x1
c001636a:	eb e8                	jmp    c0016354 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001636c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016370:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001637b:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016382:	83 ec 0c             	sub    esp,0xc
c0016385:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016389:	e8 1a 82 ff ff       	call   c000e5a8 <KeNewProcessEnv(Process*)>
c001638e:	83 c4 10             	add    esp,0x10
c0016391:	89 c2                	mov    edx,eax
c0016393:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016397:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c001639d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163a1:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c00163aa:	a1 fc b5 02 c0       	mov    eax,ds:0xc002b5fc
c00163af:	8d 50 01             	lea    edx,[eax+0x1]
c00163b2:	89 15 fc b5 02 c0    	mov    DWORD PTR ds:0xc002b5fc,edx
c00163b8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00163bc:	89 02                	mov    DWORD PTR [edx],eax
c00163be:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00163c6:	83 ec 0c             	sub    esp,0xc
c00163c9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00163cd:	e8 91 94 ff ff       	call   c000f863 <malloc>
c00163d2:	83 c4 10             	add    esp,0x10
c00163d5:	89 c3                	mov    ebx,eax
c00163d7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00163dc:	83 ec 08             	sub    esp,0x8
c00163df:	50                   	push   eax
c00163e0:	53                   	push   ebx
c00163e1:	e8 84 d8 ff ff       	call   c0013c6a <VAS::VAS(bool)>
c00163e6:	83 c4 10             	add    esp,0x10
c00163e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163ed:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00163f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163f7:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016401:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016405:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016409:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c001640f:	e8 17 aa ff ff       	call   c0010e2b <KeInitSignals()>
c0016414:	89 c2                	mov    edx,eax
c0016416:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001641a:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016420:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016424:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001642a:	85 c0                	test   eax,eax
c001642c:	74 42                	je     c0016470 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001642e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016432:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016438:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c001643e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016442:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016448:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001644c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016452:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016458:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001645c:	05 0c 01 00 00       	add    eax,0x10c
c0016461:	83 ec 08             	sub    esp,0x8
c0016464:	52                   	push   edx
c0016465:	50                   	push   eax
c0016466:	e8 d5 a1 fe ff       	call   c0000640 <strcpy>
c001646b:	83 c4 10             	add    esp,0x10
c001646e:	eb 7c                	jmp    c00164ec <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016470:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001647f:	e8 df 93 ff ff       	call   c000f863 <malloc>
c0016484:	83 c4 10             	add    esp,0x10
c0016487:	89 c3                	mov    ebx,eax
c0016489:	83 ec 08             	sub    esp,0x8
c001648c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016490:	53                   	push   ebx
c0016491:	e8 7a c3 ff ff       	call   c0012810 <VgaText::VgaText(char const*)>
c0016496:	83 c4 10             	add    esp,0x10
c0016499:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001649d:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c00164a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164a7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00164ad:	83 ec 0c             	sub    esp,0xc
c00164b0:	50                   	push   eax
c00164b1:	e8 b0 bb ff ff       	call   c0012066 <addToTerminalCycle(VgaText*)>
c00164b6:	83 c4 10             	add    esp,0x10
c00164b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164bd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00164c3:	83 ec 0c             	sub    esp,0xc
c00164c6:	50                   	push   eax
c00164c7:	e8 0b be ff ff       	call   c00122d7 <setActiveTerminal(VgaText*)>
c00164cc:	83 c4 10             	add    esp,0x10
c00164cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164d3:	05 0c 01 00 00       	add    eax,0x10c
c00164d8:	83 ec 08             	sub    esp,0x8
c00164db:	68 5c 8a 02 c0       	push   0xc0028a5c
c00164e0:	50                   	push   eax
c00164e1:	e8 5a a1 fe ff       	call   c0000640 <strcpy>
c00164e6:	83 c4 10             	add    esp,0x10
c00164e9:	8d 76 00             	lea    esi,[esi+0x0]
c00164ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164f0:	83 c0 0c             	add    eax,0xc
c00164f3:	83 ec 08             	sub    esp,0x8
c00164f6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00164fa:	50                   	push   eax
c00164fb:	e8 40 a1 fe ff       	call   c0000640 <strcpy>
c0016500:	83 c4 10             	add    esp,0x10
c0016503:	83 ec 08             	sub    esp,0x8
c0016506:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001650a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001650e:	e8 7d fb ff ff       	call   c0016090 <Process::addArgs(char**)>
c0016513:	83 c4 10             	add    esp,0x10
c0016516:	90                   	nop
c0016517:	83 c4 24             	add    esp,0x24
c001651a:	5b                   	pop    ebx
c001651b:	5e                   	pop    esi
c001651c:	c3                   	ret    
c001651d:	8d 76 00             	lea    esi,[esi+0x0]

c0016520 <taskStartupFunction>:
c0016520:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016525:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016528:	c3                   	ret    
c0016529:	8d 76 00             	lea    esi,[esi+0x0]

c001652c <KeDisablePreemption()>:
c001652c:	a1 0c 13 03 c0       	mov    eax,ds:0xc003130c
c0016531:	85 c0                	test   eax,eax
c0016533:	75 13                	jne    c0016548 <KeDisablePreemption()+0x1c>
c0016535:	8a 15 0c 11 03 c0    	mov    dl,BYTE PTR ds:0xc003110c
c001653b:	c6 05 0c 11 03 c0 00 	mov    BYTE PTR ds:0xc003110c,0x0
c0016542:	88 15 08 13 03 c0    	mov    BYTE PTR ds:0xc0031308,dl
c0016548:	83 c0 01             	add    eax,0x1
c001654b:	a3 0c 13 03 c0       	mov    ds:0xc003130c,eax
c0016550:	c3                   	ret    
c0016551:	8d 76 00             	lea    esi,[esi+0x0]

c0016554 <KeRestorePreemption()>:
c0016554:	a1 0c 13 03 c0       	mov    eax,ds:0xc003130c
c0016559:	83 e8 01             	sub    eax,0x1
c001655c:	a3 0c 13 03 c0       	mov    ds:0xc003130c,eax
c0016561:	75 0d                	jne    c0016570 <KeRestorePreemption()+0x1c>
c0016563:	a0 08 13 03 c0       	mov    al,ds:0xc0031308
c0016568:	a2 0c 11 03 c0       	mov    ds:0xc003110c,al
c001656d:	8d 76 00             	lea    esi,[esi+0x0]
c0016570:	c3                   	ret    
c0016571:	90                   	nop
c0016572:	66 90                	xchg   ax,ax

c0016574 <Process::createThread(void (*)(void*), void*, int)>:
c0016574:	55                   	push   ebp
c0016575:	31 c9                	xor    ecx,ecx
c0016577:	57                   	push   edi
c0016578:	56                   	push   esi
c0016579:	53                   	push   ebx
c001657a:	83 ec 0c             	sub    esp,0xc
c001657d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016581:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016588:	89 f2                	mov    edx,esi
c001658a:	66 90                	xchg   ax,ax
c001658c:	0f b7 c2             	movzx  eax,dx
c001658f:	80 e2 01             	and    dl,0x1
c0016592:	74 18                	je     c00165ac <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016594:	d1 f8                	sar    eax,1
c0016596:	83 c1 01             	add    ecx,0x1
c0016599:	89 c2                	mov    edx,eax
c001659b:	83 f9 10             	cmp    ecx,0x10
c001659e:	75 ec                	jne    c001658c <Process::createThread(void (*)(void*), void*, int)+0x18>
c00165a0:	83 c4 0c             	add    esp,0xc
c00165a3:	31 db                	xor    ebx,ebx
c00165a5:	89 d8                	mov    eax,ebx
c00165a7:	5b                   	pop    ebx
c00165a8:	5e                   	pop    esi
c00165a9:	5f                   	pop    edi
c00165aa:	5d                   	pop    ebp
c00165ab:	c3                   	ret    
c00165ac:	b8 01 00 00 00       	mov    eax,0x1
c00165b1:	d3 e0                	shl    eax,cl
c00165b3:	09 c6                	or     esi,eax
c00165b5:	8d 04 89             	lea    eax,[ecx+ecx*4]
c00165b8:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c00165bf:	01 c0                	add    eax,eax
c00165c1:	01 c8                	add    eax,ecx
c00165c3:	01 c0                	add    eax,eax
c00165c5:	01 c8                	add    eax,ecx
c00165c7:	8d 04 80             	lea    eax,[eax+eax*4]
c00165ca:	01 d8                	add    eax,ebx
c00165cc:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c00165d3:	75 0b                	jne    c00165e0 <Process::createThread(void (*)(void*), void*, int)+0x6c>
c00165d5:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c00165df:	90                   	nop
c00165e0:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c00165e6:	83 ec 0c             	sub    esp,0xc
c00165e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00165ec:	8d 04 89             	lea    eax,[ecx+ecx*4]
c00165ef:	01 c0                	add    eax,eax
c00165f1:	01 c8                	add    eax,ecx
c00165f3:	01 c0                	add    eax,eax
c00165f5:	01 c8                	add    eax,ecx
c00165f7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00165fa:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00165fd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016603:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016609:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001660d:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016613:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016619:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001661f:	89 ca                	mov    edx,ecx
c0016621:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016628:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001662c:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016636:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016640:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016647:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c001664e:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016655:	f7 da                	neg    edx
c0016657:	c1 e2 15             	shl    edx,0x15
c001665a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016660:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016666:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001666a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016674:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001667a:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016680:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016686:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016690:	83 e2 80             	and    edx,0xffffff80
c0016693:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001669d:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c00166a3:	68 00 01 00 00       	push   0x100
c00166a8:	e8 b6 91 ff ff       	call   c000f863 <malloc>
c00166ad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00166b0:	58                   	pop    eax
c00166b1:	5a                   	pop    edx
c00166b2:	53                   	push   ebx
c00166b3:	68 60 8a 02 c0       	push   0xc0028a60
c00166b8:	e8 bf 08 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00166bd:	59                   	pop    ecx
c00166be:	5e                   	pop    esi
c00166bf:	53                   	push   ebx
c00166c0:	68 4c 13 03 c0       	push   0xc003134c
c00166c5:	e8 fa f4 00 00       	call   c0025bc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166ca:	89 d8                	mov    eax,ebx
c00166cc:	83 c4 10             	add    esp,0x10
c00166cf:	83 c4 0c             	add    esp,0xc
c00166d2:	5b                   	pop    ebx
c00166d3:	5e                   	pop    esi
c00166d4:	5f                   	pop    edi
c00166d5:	5d                   	pop    ebp
c00166d6:	c3                   	ret    
c00166d7:	90                   	nop

c00166d8 <Process::createUserThread()>:
c00166d8:	83 ec 0c             	sub    esp,0xc
c00166db:	68 80 00 00 00       	push   0x80
c00166e0:	6a 00                	push   0x0
c00166e2:	68 74 5f 01 c0       	push   0xc0015f74
c00166e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166eb:	50                   	push   eax
c00166ec:	e8 83 fe ff ff       	call   c0016574 <Process::createThread(void (*)(void*), void*, int)>
c00166f1:	83 c4 1c             	add    esp,0x1c
c00166f4:	c3                   	ret    
c00166f5:	8d 76 00             	lea    esi,[esi+0x0]

c00166f8 <setupMultitasking(void (*)())>:
c00166f8:	56                   	push   esi
c00166f9:	53                   	push   ebx
c00166fa:	83 ec 04             	sub    esp,0x4
c00166fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016701:	eb 11                	jmp    c0016714 <setupMultitasking(void (*)())+0x1c>
c0016703:	90                   	nop
c0016704:	83 ec 0c             	sub    esp,0xc
c0016707:	68 4c 13 03 c0       	push   0xc003134c
c001670c:	e8 f7 f3 00 00       	call   c0025b08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016711:	83 c4 10             	add    esp,0x10
c0016714:	83 ec 0c             	sub    esp,0xc
c0016717:	68 4c 13 03 c0       	push   0xc003134c
c001671c:	e8 c3 f3 00 00       	call   c0025ae4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016721:	83 c4 10             	add    esp,0x10
c0016724:	84 c0                	test   al,al
c0016726:	74 dc                	je     c0016704 <setupMultitasking(void (*)())+0xc>
c0016728:	83 ec 0c             	sub    esp,0xc
c001672b:	68 c4 07 00 00       	push   0x7c4
c0016730:	e8 2e 91 ff ff       	call   c000f863 <malloc>
c0016735:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001673c:	89 c3                	mov    ebx,eax
c001673e:	6a 00                	push   0x0
c0016740:	68 74 8a 02 c0       	push   0xc0028a74
c0016745:	6a 01                	push   0x1
c0016747:	50                   	push   eax
c0016748:	e8 e7 fb ff ff       	call   c0016334 <Process::Process(bool, char const*, Process*, char**)>
c001674d:	83 c4 14             	add    esp,0x14
c0016750:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016756:	89 1d 58 13 03 c0    	mov    DWORD PTR ds:0xc0031358,ebx
c001675c:	50                   	push   eax
c001675d:	e8 75 bb ff ff       	call   c00122d7 <setActiveTerminal(VgaText*)>
c0016762:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016769:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016773:	83 c8 01             	or     eax,0x1
c0016776:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c001677d:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016783:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016786:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016790:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016796:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001679c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00167a6:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00167b0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00167ba:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00167c0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00167ca:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00167d0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00167da:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00167e1:	e8 7d 90 ff ff       	call   c000f863 <malloc>
c00167e6:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c00167f0:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00167f6:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c00167fd:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c0016804:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c001680b:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0016812:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016818:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001681e:	5a                   	pop    edx
c001681f:	59                   	pop    ecx
c0016820:	68 5c 8a 02 c0       	push   0xc0028a5c
c0016825:	50                   	push   eax
c0016826:	e8 15 9e fe ff       	call   c0000640 <strcpy>
c001682b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016832:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016836:	83 c4 14             	add    esp,0x14
c0016839:	5b                   	pop    ebx
c001683a:	5e                   	pop    esi
c001683b:	e9 29 9a fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0016840 <schedule()>:
c0016840:	8b 15 2c 13 03 c0    	mov    edx,DWORD PTR ds:0xc003132c
c0016846:	85 d2                	test   edx,edx
c0016848:	74 0e                	je     c0016858 <schedule()+0x18>
c001684a:	c7 05 28 13 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x1
c0016854:	c3                   	ret    
c0016855:	8d 76 00             	lea    esi,[esi+0x0]
c0016858:	53                   	push   ebx
c0016859:	83 ec 14             	sub    esp,0x14
c001685c:	68 4c 13 03 c0       	push   0xc003134c
c0016861:	e8 7e f2 00 00       	call   c0025ae4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016866:	83 c4 10             	add    esp,0x10
c0016869:	84 c0                	test   al,al
c001686b:	75 3f                	jne    c00168ac <schedule()+0x6c>
c001686d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016872:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016875:	83 fa 01             	cmp    edx,0x1
c0016878:	74 3a                	je     c00168b4 <schedule()+0x74>
c001687a:	66 90                	xchg   ax,ax
c001687c:	83 ec 0c             	sub    esp,0xc
c001687f:	68 4c 13 03 c0       	push   0xc003134c
c0016884:	e8 77 f2 00 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016889:	c7 04 24 4c 13 03 c0 	mov    DWORD PTR [esp],0xc003134c
c0016890:	89 c3                	mov    ebx,eax
c0016892:	e8 71 f2 00 00       	call   c0025b08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016897:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001689e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168a1:	e8 2a f7 ff ff       	call   c0015fd0 <switchToThread(ThreadControlBlock*)>
c00168a6:	83 c4 10             	add    esp,0x10
c00168a9:	8d 76 00             	lea    esi,[esi+0x0]
c00168ac:	83 c4 08             	add    esp,0x8
c00168af:	5b                   	pop    ebx
c00168b0:	c3                   	ret    
c00168b1:	8d 76 00             	lea    esi,[esi+0x0]
c00168b4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00168bb:	83 ec 08             	sub    esp,0x8
c00168be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168c3:	50                   	push   eax
c00168c4:	68 4c 13 03 c0       	push   0xc003134c
c00168c9:	e8 f6 f2 00 00       	call   c0025bc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168ce:	83 c4 10             	add    esp,0x10
c00168d1:	eb a9                	jmp    c001687c <schedule()+0x3c>
c00168d3:	90                   	nop

c00168d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00168d4:	83 ec 0c             	sub    esp,0xc
c00168d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00168e0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00168e3:	e8 58 ff ff ff       	call   c0016840 <schedule()>
c00168e8:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c00168f0:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00168f5:	85 c0                	test   eax,eax
c00168f7:	75 03                	jne    c00168fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00168f9:	fb                   	sti    
c00168fa:	66 90                	xchg   ax,ax
c00168fc:	83 c4 0c             	add    esp,0xc
c00168ff:	c3                   	ret    

c0016900 <blockTask(TaskState)>:
c0016900:	83 ec 0c             	sub    esp,0xc
c0016903:	fa                   	cli    
c0016904:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016909:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001690d:	83 c0 01             	add    eax,0x1
c0016910:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0016915:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001691a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001691d:	e8 1e ff ff ff       	call   c0016840 <schedule()>
c0016922:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c001692a:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c0016930:	85 d2                	test   edx,edx
c0016932:	75 04                	jne    c0016938 <blockTask(TaskState)+0x38>
c0016934:	fb                   	sti    
c0016935:	8d 76 00             	lea    esi,[esi+0x0]
c0016938:	83 c4 0c             	add    esp,0xc
c001693b:	c3                   	ret    

c001693c <waitTask(int, int*, int)>:
c001693c:	83 ec 18             	sub    esp,0x18
c001693f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016944:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016948:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001694b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001694f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016954:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0016957:	6a 07                	push   0x7
c0016959:	e8 a2 ff ff ff       	call   c0016900 <blockTask(TaskState)>
c001695e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016963:	83 c4 10             	add    esp,0x10
c0016966:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0016969:	85 d2                	test   edx,edx
c001696b:	74 0b                	je     c0016978 <waitTask(int, int*, int)+0x3c>
c001696d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0016970:	89 02                	mov    DWORD PTR [edx],eax
c0016972:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016977:	90                   	nop
c0016978:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001697b:	83 c4 0c             	add    esp,0xc
c001697e:	c3                   	ret    
c001697f:	90                   	nop

c0016980 <milliTenthSleepUntil(unsigned long long)>:
c0016980:	83 ec 0c             	sub    esp,0xc
c0016983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016987:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001698b:	3b 05 50 0b 03 c0    	cmp    eax,DWORD PTR ds:0xc0030b50
c0016991:	89 d1                	mov    ecx,edx
c0016993:	1b 0d 54 0b 03 c0    	sbb    ecx,DWORD PTR ds:0xc0030b54
c0016999:	73 05                	jae    c00169a0 <milliTenthSleepUntil(unsigned long long)+0x20>
c001699b:	90                   	nop
c001699c:	83 c4 0c             	add    esp,0xc
c001699f:	c3                   	ret    
c00169a0:	fa                   	cli    
c00169a1:	8b 0d 30 13 03 c0    	mov    ecx,DWORD PTR ds:0xc0031330
c00169a7:	83 ec 08             	sub    esp,0x8
c00169aa:	83 c1 01             	add    ecx,0x1
c00169ad:	89 0d 30 13 03 c0    	mov    DWORD PTR ds:0xc0031330,ecx
c00169b3:	8b 0d 2c 13 03 c0    	mov    ecx,DWORD PTR ds:0xc003132c
c00169b9:	83 c1 01             	add    ecx,0x1
c00169bc:	89 0d 2c 13 03 c0    	mov    DWORD PTR ds:0xc003132c,ecx
c00169c2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00169c8:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00169cb:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00169ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169d3:	50                   	push   eax
c00169d4:	68 40 13 03 c0       	push   0xc0031340
c00169d9:	e8 e6 f1 00 00       	call   c0025bc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169de:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00169e5:	e8 16 ff ff ff       	call   c0016900 <blockTask(TaskState)>
c00169ea:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c00169ef:	83 c4 10             	add    esp,0x10
c00169f2:	83 e8 01             	sub    eax,0x1
c00169f5:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c00169fa:	85 c0                	test   eax,eax
c00169fc:	75 0a                	jne    c0016a08 <milliTenthSleepUntil(unsigned long long)+0x88>
c00169fe:	8b 15 28 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031328
c0016a04:	85 d2                	test   edx,edx
c0016a06:	75 18                	jne    c0016a20 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0016a08:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016a10:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016a15:	85 c0                	test   eax,eax
c0016a17:	75 83                	jne    c001699c <milliTenthSleepUntil(unsigned long long)+0x1c>
c0016a19:	fb                   	sti    
c0016a1a:	83 c4 0c             	add    esp,0xc
c0016a1d:	c3                   	ret    
c0016a1e:	66 90                	xchg   ax,ax
c0016a20:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0016a2a:	e8 11 fe ff ff       	call   c0016840 <schedule()>
c0016a2f:	eb d7                	jmp    c0016a08 <milliTenthSleepUntil(unsigned long long)+0x88>
c0016a31:	8d 76 00             	lea    esi,[esi+0x0]

c0016a34 <milliTenthSleep(unsigned long long)>:
c0016a34:	a1 50 0b 03 c0       	mov    eax,ds:0xc0030b50
c0016a39:	8b 15 54 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b54
c0016a3f:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0016a43:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0016a47:	e9 34 ff ff ff       	jmp    c0016980 <milliTenthSleepUntil(unsigned long long)>

c0016a4c <sleep(unsigned long long)>:
c0016a4c:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0016a54:	b8 10 27 00 00       	mov    eax,0x2710
c0016a59:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0016a5d:	01 ca                	add    edx,ecx
c0016a5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016a63:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016a67:	eb cb                	jmp    c0016a34 <milliTenthSleep(unsigned long long)>
c0016a69:	8d 76 00             	lea    esi,[esi+0x0]

c0016a6c <sleep(unsigned int)>:
c0016a6c:	83 ec 14             	sub    esp,0x14
c0016a6f:	b8 10 27 00 00       	mov    eax,0x2710
c0016a74:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0016a78:	52                   	push   edx
c0016a79:	50                   	push   eax
c0016a7a:	e8 b5 ff ff ff       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c0016a7f:	83 c4 1c             	add    esp,0x1c
c0016a82:	c3                   	ret    
c0016a83:	90                   	nop

c0016a84 <milliTenthSleep(unsigned int)>:
c0016a84:	83 ec 14             	sub    esp,0x14
c0016a87:	31 d2                	xor    edx,edx
c0016a89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016a8d:	03 05 50 0b 03 c0    	add    eax,DWORD PTR ds:0xc0030b50
c0016a93:	13 15 54 0b 03 c0    	adc    edx,DWORD PTR ds:0xc0030b54
c0016a99:	52                   	push   edx
c0016a9a:	50                   	push   eax
c0016a9b:	e8 e0 fe ff ff       	call   c0016980 <milliTenthSleepUntil(unsigned long long)>
c0016aa0:	83 c4 1c             	add    esp,0x1c
c0016aa3:	c3                   	ret    

c0016aa4 <taskReturned>:
c0016aa4:	83 ec 18             	sub    esp,0x18
c0016aa7:	68 fc 8a 02 c0       	push   0xc0028afc
c0016aac:	e8 07 92 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0016ab1:	83 c4 10             	add    esp,0x10
c0016ab4:	83 ec 0c             	sub    esp,0xc
c0016ab7:	6a 02                	push   0x2
c0016ab9:	e8 42 fe ff ff       	call   c0016900 <blockTask(TaskState)>
c0016abe:	fa                   	cli    
c0016abf:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016ac4:	83 c0 01             	add    eax,0x1
c0016ac7:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0016acc:	e8 6f fd ff ff       	call   c0016840 <schedule()>
c0016ad1:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016ad9:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c0016adf:	83 c4 10             	add    esp,0x10
c0016ae2:	85 d2                	test   edx,edx
c0016ae4:	75 ce                	jne    c0016ab4 <taskReturned+0x10>
c0016ae6:	fb                   	sti    
c0016ae7:	eb cb                	jmp    c0016ab4 <taskReturned+0x10>
c0016ae9:	8d 76 00             	lea    esi,[esi+0x0]

c0016aec <KeProcessFromPID(int)>:
c0016aec:	57                   	push   edi
c0016aed:	56                   	push   esi
c0016aee:	53                   	push   ebx
c0016aef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016af3:	fa                   	cli    
c0016af4:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016af9:	83 ec 0c             	sub    esp,0xc
c0016afc:	83 c0 01             	add    eax,0x1
c0016aff:	68 4c 13 03 c0       	push   0xc003134c
c0016b04:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0016b09:	e8 f2 ef 00 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016b0e:	83 c4 10             	add    esp,0x10
c0016b11:	89 c7                	mov    edi,eax
c0016b13:	eb 17                	jmp    c0016b2c <KeProcessFromPID(int)+0x40>
c0016b15:	8d 76 00             	lea    esi,[esi+0x0]
c0016b18:	83 ec 0c             	sub    esp,0xc
c0016b1b:	68 4c 13 03 c0       	push   0xc003134c
c0016b20:	e8 db ef 00 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016b25:	83 c4 10             	add    esp,0x10
c0016b28:	39 f8                	cmp    eax,edi
c0016b2a:	74 50                	je     c0016b7c <KeProcessFromPID(int)+0x90>
c0016b2c:	83 ec 0c             	sub    esp,0xc
c0016b2f:	68 4c 13 03 c0       	push   0xc003134c
c0016b34:	e8 c7 ef 00 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016b39:	c7 04 24 4c 13 03 c0 	mov    DWORD PTR [esp],0xc003134c
c0016b40:	89 c3                	mov    ebx,eax
c0016b42:	e8 c1 ef 00 00       	call   c0025b08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016b47:	59                   	pop    ecx
c0016b48:	58                   	pop    eax
c0016b49:	53                   	push   ebx
c0016b4a:	68 4c 13 03 c0       	push   0xc003134c
c0016b4f:	e8 70 f0 00 00       	call   c0025bc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b54:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016b57:	83 c4 10             	add    esp,0x10
c0016b5a:	39 30                	cmp    DWORD PTR [eax],esi
c0016b5c:	75 ba                	jne    c0016b18 <KeProcessFromPID(int)+0x2c>
c0016b5e:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016b66:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c0016b6c:	85 d2                	test   edx,edx
c0016b6e:	74 08                	je     c0016b78 <KeProcessFromPID(int)+0x8c>
c0016b70:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016b73:	5b                   	pop    ebx
c0016b74:	5e                   	pop    esi
c0016b75:	5f                   	pop    edi
c0016b76:	c3                   	ret    
c0016b77:	90                   	nop
c0016b78:	fb                   	sti    
c0016b79:	eb f5                	jmp    c0016b70 <KeProcessFromPID(int)+0x84>
c0016b7b:	90                   	nop
c0016b7c:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016b84:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016b89:	85 c0                	test   eax,eax
c0016b8b:	75 07                	jne    c0016b94 <KeProcessFromPID(int)+0xa8>
c0016b8d:	fb                   	sti    
c0016b8e:	31 c0                	xor    eax,eax
c0016b90:	5b                   	pop    ebx
c0016b91:	5e                   	pop    esi
c0016b92:	5f                   	pop    edi
c0016b93:	c3                   	ret    
c0016b94:	5b                   	pop    ebx
c0016b95:	31 c0                	xor    eax,eax
c0016b97:	5e                   	pop    esi
c0016b98:	5f                   	pop    edi
c0016b99:	c3                   	ret    
c0016b9a:	66 90                	xchg   ax,ax

c0016b9c <unblockTask(ThreadControlBlock*)>:
c0016b9c:	53                   	push   ebx
c0016b9d:	83 ec 08             	sub    esp,0x8
c0016ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ba4:	fa                   	cli    
c0016ba5:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c0016bab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016bae:	83 c2 01             	add    edx,0x1
c0016bb1:	85 c0                	test   eax,eax
c0016bb3:	89 15 30 13 03 c0    	mov    DWORD PTR ds:0xc0031330,edx
c0016bb9:	74 6d                	je     c0016c28 <unblockTask(ThreadControlBlock*)+0x8c>
c0016bbb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016bbe:	83 f8 01             	cmp    eax,0x1
c0016bc1:	74 39                	je     c0016bfc <unblockTask(ThreadControlBlock*)+0x60>
c0016bc3:	83 ec 0c             	sub    esp,0xc
c0016bc6:	68 4c 13 03 c0       	push   0xc003134c
c0016bcb:	e8 30 ef 00 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016bd0:	83 c4 10             	add    esp,0x10
c0016bd3:	85 c0                	test   eax,eax
c0016bd5:	75 1d                	jne    c0016bf4 <unblockTask(ThreadControlBlock*)+0x58>
c0016bd7:	eb 63                	jmp    c0016c3c <unblockTask(ThreadControlBlock*)+0xa0>
c0016bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0016bdc:	83 ec 08             	sub    esp,0x8
c0016bdf:	50                   	push   eax
c0016be0:	68 4c 13 03 c0       	push   0xc003134c
c0016be5:	e8 22 f4 00 00       	call   c002600c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016bea:	83 c4 10             	add    esp,0x10
c0016bed:	85 c0                	test   eax,eax
c0016bef:	74 4b                	je     c0016c3c <unblockTask(ThreadControlBlock*)+0xa0>
c0016bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0016bf4:	39 c3                	cmp    ebx,eax
c0016bf6:	75 e4                	jne    c0016bdc <unblockTask(ThreadControlBlock*)+0x40>
c0016bf8:	eb 12                	jmp    c0016c0c <unblockTask(ThreadControlBlock*)+0x70>
c0016bfa:	66 90                	xchg   ax,ax
c0016bfc:	83 ec 0c             	sub    esp,0xc
c0016bff:	68 92 8a 02 c0       	push   0xc0028a92
c0016c04:	e8 73 03 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016c14:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016c19:	85 c0                	test   eax,eax
c0016c1b:	75 03                	jne    c0016c20 <unblockTask(ThreadControlBlock*)+0x84>
c0016c1d:	fb                   	sti    
c0016c1e:	66 90                	xchg   ax,ax
c0016c20:	83 c4 08             	add    esp,0x8
c0016c23:	5b                   	pop    ebx
c0016c24:	c3                   	ret    
c0016c25:	8d 76 00             	lea    esi,[esi+0x0]
c0016c28:	83 ec 0c             	sub    esp,0xc
c0016c2b:	68 7b 8a 02 c0       	push   0xc0028a7b
c0016c30:	e8 47 03 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016c35:	83 c4 10             	add    esp,0x10
c0016c38:	eb d2                	jmp    c0016c0c <unblockTask(ThreadControlBlock*)+0x70>
c0016c3a:	66 90                	xchg   ax,ax
c0016c3c:	83 ec 08             	sub    esp,0x8
c0016c3f:	53                   	push   ebx
c0016c40:	68 4c 13 03 c0       	push   0xc003134c
c0016c45:	e8 7a ef 00 00       	call   c0025bc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c4a:	83 c4 10             	add    esp,0x10
c0016c4d:	eb bd                	jmp    c0016c0c <unblockTask(ThreadControlBlock*)+0x70>
c0016c4f:	90                   	nop

c0016c50 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016c50:	55                   	push   ebp
c0016c51:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016c56:	57                   	push   edi
c0016c57:	56                   	push   esi
c0016c58:	53                   	push   ebx
c0016c59:	83 ec 1c             	sub    esp,0x1c
c0016c5c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016c60:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0016c63:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016c66:	d3 c0                	rol    eax,cl
c0016c68:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c0016c6f:	21 c8                	and    eax,ecx
c0016c71:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0016c78:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016c7b:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0016c83:	0f 85 b7 01 00 00    	jne    c0016e40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0016c89:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0016c8f:	85 ed                	test   ebp,ebp
c0016c91:	7e 29                	jle    c0016cbc <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0016c93:	31 f6                	xor    esi,esi
c0016c95:	8d 76 00             	lea    esi,[esi+0x0]
c0016c98:	83 ec 0c             	sub    esp,0xc
c0016c9b:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0016ca2:	83 c6 01             	add    esi,0x1
c0016ca5:	57                   	push   edi
c0016ca6:	e8 c8 8b ff ff       	call   c000f873 <free>
c0016cab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016cae:	83 c4 10             	add    esp,0x10
c0016cb1:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0016cb7:	7f df                	jg     c0016c98 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0016cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0016cbc:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016cc6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016cc9:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c0016ccf:	89 f7                	mov    edi,esi
c0016cd1:	85 ed                	test   ebp,ebp
c0016cd3:	74 1b                	je     c0016cf0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016cd5:	83 ec 0c             	sub    esp,0xc
c0016cd8:	55                   	push   ebp
c0016cd9:	e8 e6 77 ff ff       	call   c000e4c4 <EnvVarContainer::~EnvVarContainer()>
c0016cde:	59                   	pop    ecx
c0016cdf:	5e                   	pop    esi
c0016ce0:	6a 0c                	push   0xc
c0016ce2:	55                   	push   ebp
c0016ce3:	e8 94 66 ff ff       	call   c000d37c <operator delete(void*, unsigned long)>
c0016ce8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016ceb:	83 c4 10             	add    esp,0x10
c0016cee:	89 f7                	mov    edi,esi
c0016cf0:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016cf6:	85 c0                	test   eax,eax
c0016cf8:	0f 84 b6 00 00 00    	je     c0016db4 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c0016cfe:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0016d01:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016d05:	31 c9                	xor    ecx,ecx
c0016d07:	eb 17                	jmp    c0016d20 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016d09:	8d 76 00             	lea    esi,[esi+0x0]
c0016d0c:	83 c1 01             	add    ecx,0x1
c0016d0f:	83 f9 10             	cmp    ecx,0x10
c0016d12:	0f 84 9c 00 00 00    	je     c0016db4 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c0016d18:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016d1e:	66 90                	xchg   ax,ax
c0016d20:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0016d27:	d3 fa                	sar    edx,cl
c0016d29:	80 e2 01             	and    dl,0x1
c0016d2c:	74 de                	je     c0016d0c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016d2e:	8d 14 89             	lea    edx,[ecx+ecx*4]
c0016d31:	01 d2                	add    edx,edx
c0016d33:	01 ca                	add    edx,ecx
c0016d35:	01 d2                	add    edx,edx
c0016d37:	01 ca                	add    edx,ecx
c0016d39:	8d 14 92             	lea    edx,[edx+edx*4]
c0016d3c:	01 d0                	add    eax,edx
c0016d3e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016d44:	83 fd 07             	cmp    ebp,0x7
c0016d47:	75 c3                	jne    c0016d0c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016d49:	05 40 02 00 00       	add    eax,0x240
c0016d4e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0016d51:	83 fd ff             	cmp    ebp,0xffffffff
c0016d54:	0f 8c ee 00 00 00    	jl     c0016e48 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0016d5a:	0f 84 ac 01 00 00    	je     c0016f0c <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0016d60:	85 ed                	test   ebp,ebp
c0016d62:	0f 84 90 01 00 00    	je     c0016ef8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c0016d68:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016d6a:	75 a0                	jne    c0016d0c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016d6c:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016d72:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016d76:	01 d0                	add    eax,edx
c0016d78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016d7c:	83 ec 0c             	sub    esp,0xc
c0016d7f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0016d85:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016d88:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016d8e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016d95:	50                   	push   eax
c0016d96:	e8 01 fe ff ff       	call   c0016b9c <unblockTask(ThreadControlBlock*)>
c0016d9b:	83 c4 10             	add    esp,0x10
c0016d9e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016da1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016da5:	89 f7                	mov    edi,esi
c0016da7:	83 c1 01             	add    ecx,0x1
c0016daa:	83 f9 10             	cmp    ecx,0x10
c0016dad:	0f 85 65 ff ff ff    	jne    c0016d18 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016db3:	90                   	nop
c0016db4:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c0016dba:	85 c0                	test   eax,eax
c0016dbc:	74 62                	je     c0016e20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0016dbe:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0016dc4:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c0016dca:	74 54                	je     c0016e20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	68 4c 13 03 c0       	push   0xc003134c
c0016dd4:	e8 27 ed 00 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dd9:	c7 04 24 4c 13 03 c0 	mov    DWORD PTR [esp],0xc003134c
c0016de0:	89 c7                	mov    edi,eax
c0016de2:	e8 fd ec 00 00       	call   c0025ae4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016de7:	83 c4 10             	add    esp,0x10
c0016dea:	84 c0                	test   al,al
c0016dec:	0f 84 ce 00 00 00    	je     c0016ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c0016df2:	66 90                	xchg   ax,ax
c0016df4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016df7:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016dfd:	85 d2                	test   edx,edx
c0016dff:	74 0f                	je     c0016e10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0016e01:	83 ec 0c             	sub    esp,0xc
c0016e04:	8b 02                	mov    eax,DWORD PTR [edx]
c0016e06:	52                   	push   edx
c0016e07:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e0a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e0d:	83 c4 10             	add    esp,0x10
c0016e10:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c0016e1a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0016e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e20:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c0016e26:	85 db                	test   ebx,ebx
c0016e28:	74 16                	je     c0016e40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0016e2a:	83 ec 0c             	sub    esp,0xc
c0016e2d:	53                   	push   ebx
c0016e2e:	e8 97 c9 ff ff       	call   c00137ca <VAS::~VAS()>
c0016e33:	58                   	pop    eax
c0016e34:	5a                   	pop    edx
c0016e35:	6a 14                	push   0x14
c0016e37:	53                   	push   ebx
c0016e38:	e8 3f 65 ff ff       	call   c000d37c <operator delete(void*, unsigned long)>
c0016e3d:	83 c4 10             	add    esp,0x10
c0016e40:	83 c4 1c             	add    esp,0x1c
c0016e43:	5b                   	pop    ebx
c0016e44:	5e                   	pop    esi
c0016e45:	5f                   	pop    edi
c0016e46:	5d                   	pop    ebp
c0016e47:	c3                   	ret    
c0016e48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016e4c:	83 ec 0c             	sub    esp,0xc
c0016e4f:	68 30 8b 02 c0       	push   0xc0028b30
c0016e54:	e8 5f 8e ff ff       	call   c000fcb8 <KePanic(char const*)>
c0016e59:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016e5c:	83 c4 10             	add    esp,0x10
c0016e5f:	89 f7                	mov    edi,esi
c0016e61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e65:	e9 a2 fe ff ff       	jmp    c0016d0c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016e6a:	66 90                	xchg   ax,ax
c0016e6c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016e72:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0016e78:	75 1e                	jne    c0016e98 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0016e7a:	83 ec 0c             	sub    esp,0xc
c0016e7d:	68 98 8b 02 c0       	push   0xc0028b98
c0016e82:	e8 f5 00 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016e87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016e8e:	e8 6d fa ff ff       	call   c0016900 <blockTask(TaskState)>
c0016e93:	83 c4 10             	add    esp,0x10
c0016e96:	66 90                	xchg   ax,ax
c0016e98:	83 ec 08             	sub    esp,0x8
c0016e9b:	56                   	push   esi
c0016e9c:	68 4c 13 03 c0       	push   0xc003134c
c0016ea1:	e8 1e ed 00 00       	call   c0025bc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ea6:	c7 04 24 4c 13 03 c0 	mov    DWORD PTR [esp],0xc003134c
c0016ead:	e8 4e ec 00 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016eb2:	83 c4 10             	add    esp,0x10
c0016eb5:	39 f8                	cmp    eax,edi
c0016eb7:	0f 84 37 ff ff ff    	je     c0016df4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c0016ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec0:	83 ec 0c             	sub    esp,0xc
c0016ec3:	68 4c 13 03 c0       	push   0xc003134c
c0016ec8:	e8 33 ec 00 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ecd:	c7 04 24 4c 13 03 c0 	mov    DWORD PTR [esp],0xc003134c
c0016ed4:	89 c6                	mov    esi,eax
c0016ed6:	e8 2d ec 00 00       	call   c0025b08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016edb:	83 c4 10             	add    esp,0x10
c0016ede:	39 f3                	cmp    ebx,esi
c0016ee0:	74 b6                	je     c0016e98 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0016ee2:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0016ee5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016ee8:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c0016eee:	75 a8                	jne    c0016e98 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0016ef0:	e9 77 ff ff ff       	jmp    c0016e6c <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c0016ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016efc:	83 ec 0c             	sub    esp,0xc
c0016eff:	68 64 8b 02 c0       	push   0xc0028b64
c0016f04:	e9 4b ff ff ff       	jmp    c0016e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c0016f09:	8d 76 00             	lea    esi,[esi+0x0]
c0016f0c:	8b 36                	mov    esi,DWORD PTR [esi]
c0016f0e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016f12:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0016f15:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f18:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0016f1e:	01 d7                	add    edi,edx
c0016f20:	89 f8                	mov    eax,edi
c0016f22:	e9 51 fe ff ff       	jmp    c0016d78 <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c0016f27:	90                   	nop

c0016f28 <cleanerTaskFunction(void*)>:
c0016f28:	53                   	push   ebx
c0016f29:	83 ec 08             	sub    esp,0x8
c0016f2c:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016f34:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016f39:	85 c0                	test   eax,eax
c0016f3b:	75 03                	jne    c0016f40 <cleanerTaskFunction(void*)+0x18>
c0016f3d:	fb                   	sti    
c0016f3e:	66 90                	xchg   ax,ax
c0016f40:	fa                   	cli    
c0016f41:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016f46:	83 c0 01             	add    eax,0x1
c0016f49:	80 3d 14 13 03 c0 00 	cmp    BYTE PTR ds:0xc0031314,0x0
c0016f50:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0016f55:	0f 85 c9 00 00 00    	jne    c0017024 <cleanerTaskFunction(void*)+0xfc>
c0016f5b:	83 ec 0c             	sub    esp,0xc
c0016f5e:	6a 02                	push   0x2
c0016f60:	e8 6f f9 ff ff       	call   c00168d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016f65:	83 c4 10             	add    esp,0x10
c0016f68:	c6 05 14 13 03 c0 00 	mov    BYTE PTR ds:0xc0031314,0x0
c0016f6f:	fa                   	cli    
c0016f70:	8b 0d 30 13 03 c0    	mov    ecx,DWORD PTR ds:0xc0031330
c0016f76:	8b 1d 2c 13 03 c0    	mov    ebx,DWORD PTR ds:0xc003132c
c0016f7c:	83 c1 01             	add    ecx,0x1
c0016f7f:	83 c3 01             	add    ebx,0x1
c0016f82:	89 0d 30 13 03 c0    	mov    DWORD PTR ds:0xc0031330,ecx
c0016f88:	89 1d 2c 13 03 c0    	mov    DWORD PTR ds:0xc003132c,ebx
c0016f8e:	fa                   	cli    
c0016f8f:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016f94:	83 c0 01             	add    eax,0x1
c0016f97:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0016f9c:	eb 2a                	jmp    c0016fc8 <cleanerTaskFunction(void*)+0xa0>
c0016f9e:	66 90                	xchg   ax,ax
c0016fa0:	83 ec 0c             	sub    esp,0xc
c0016fa3:	68 34 13 03 c0       	push   0xc0031334
c0016fa8:	e8 53 eb 00 00       	call   c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016fad:	c7 04 24 34 13 03 c0 	mov    DWORD PTR [esp],0xc0031334
c0016fb4:	89 c3                	mov    ebx,eax
c0016fb6:	e8 4d eb 00 00       	call   c0025b08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016fbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fbe:	e8 8d fc ff ff       	call   c0016c50 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016fc3:	83 c4 10             	add    esp,0x10
c0016fc6:	66 90                	xchg   ax,ax
c0016fc8:	83 ec 0c             	sub    esp,0xc
c0016fcb:	68 34 13 03 c0       	push   0xc0031334
c0016fd0:	e8 0f eb 00 00       	call   c0025ae4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016fd5:	83 c4 10             	add    esp,0x10
c0016fd8:	84 c0                	test   al,al
c0016fda:	74 c4                	je     c0016fa0 <cleanerTaskFunction(void*)+0x78>
c0016fdc:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016fe4:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c0016fea:	85 d2                	test   edx,edx
c0016fec:	75 02                	jne    c0016ff0 <cleanerTaskFunction(void*)+0xc8>
c0016fee:	fb                   	sti    
c0016fef:	90                   	nop
c0016ff0:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0016ff5:	83 e8 01             	sub    eax,0x1
c0016ff8:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0016ffd:	0f 85 29 ff ff ff    	jne    c0016f2c <cleanerTaskFunction(void*)+0x4>
c0017003:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c0017008:	85 c0                	test   eax,eax
c001700a:	0f 84 1c ff ff ff    	je     c0016f2c <cleanerTaskFunction(void*)+0x4>
c0017010:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c001701a:	e8 21 f8 ff ff       	call   c0016840 <schedule()>
c001701f:	e9 08 ff ff ff       	jmp    c0016f2c <cleanerTaskFunction(void*)+0x4>
c0017024:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c001702c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017031:	85 c0                	test   eax,eax
c0017033:	0f 85 2f ff ff ff    	jne    c0016f68 <cleanerTaskFunction(void*)+0x40>
c0017039:	fb                   	sti    
c001703a:	e9 29 ff ff ff       	jmp    c0016f68 <cleanerTaskFunction(void*)+0x40>
c001703f:	90                   	nop

c0017040 <KeTerminateCurrentThread(int)>:
c0017040:	83 ec 14             	sub    esp,0x14
c0017043:	fa                   	cli    
c0017044:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017049:	83 c0 01             	add    eax,0x1
c001704c:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0017051:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0017056:	83 c0 01             	add    eax,0x1
c0017059:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c001705e:	fa                   	cli    
c001705f:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017064:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017068:	83 c0 01             	add    eax,0x1
c001706b:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0017070:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017075:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017078:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001707d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017080:	50                   	push   eax
c0017081:	68 34 13 03 c0       	push   0xc0031334
c0017086:	e8 39 eb 00 00       	call   c0025bc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001708b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017090:	83 c4 10             	add    esp,0x10
c0017093:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001709a:	a1 10 13 03 c0       	mov    eax,ds:0xc0031310
c001709f:	85 c0                	test   eax,eax
c00170a1:	0f 84 81 00 00 00    	je     c0017128 <KeTerminateCurrentThread(int)+0xe8>
c00170a7:	83 ec 0c             	sub    esp,0xc
c00170aa:	c6 05 14 13 03 c0 01 	mov    BYTE PTR ds:0xc0031314,0x1
c00170b1:	50                   	push   eax
c00170b2:	e8 e5 fa ff ff       	call   c0016b9c <unblockTask(ThreadControlBlock*)>
c00170b7:	83 c4 10             	add    esp,0x10
c00170ba:	66 90                	xchg   ax,ax
c00170bc:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c00170c4:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00170c9:	85 c0                	test   eax,eax
c00170cb:	75 03                	jne    c00170d0 <KeTerminateCurrentThread(int)+0x90>
c00170cd:	fb                   	sti    
c00170ce:	66 90                	xchg   ax,ax
c00170d0:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c00170d5:	83 e8 01             	sub    eax,0x1
c00170d8:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c00170dd:	75 09                	jne    c00170e8 <KeTerminateCurrentThread(int)+0xa8>
c00170df:	83 3d 28 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031328,0x0
c00170e6:	75 54                	jne    c001713c <KeTerminateCurrentThread(int)+0xfc>
c00170e8:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c00170f0:	8b 0d 30 13 03 c0    	mov    ecx,DWORD PTR ds:0xc0031330
c00170f6:	85 c9                	test   ecx,ecx
c00170f8:	75 06                	jne    c0017100 <KeTerminateCurrentThread(int)+0xc0>
c00170fa:	66 90                	xchg   ax,ax
c00170fc:	fb                   	sti    
c00170fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017100:	fa                   	cli    
c0017101:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017106:	83 c0 01             	add    eax,0x1
c0017109:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c001710e:	e8 2d f7 ff ff       	call   c0016840 <schedule()>
c0017113:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c001711b:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c0017121:	85 d2                	test   edx,edx
c0017123:	75 db                	jne    c0017100 <KeTerminateCurrentThread(int)+0xc0>
c0017125:	eb d5                	jmp    c00170fc <KeTerminateCurrentThread(int)+0xbc>
c0017127:	90                   	nop
c0017128:	83 ec 0c             	sub    esp,0xc
c001712b:	68 a9 8a 02 c0       	push   0xc0028aa9
c0017130:	e8 47 fe fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017135:	83 c4 10             	add    esp,0x10
c0017138:	eb 82                	jmp    c00170bc <KeTerminateCurrentThread(int)+0x7c>
c001713a:	66 90                	xchg   ax,ax
c001713c:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0017146:	e8 f5 f6 ff ff       	call   c0016840 <schedule()>
c001714b:	eb 9b                	jmp    c00170e8 <KeTerminateCurrentThread(int)+0xa8>
c001714d:	8d 76 00             	lea    esi,[esi+0x0]

c0017150 <__static_initialization_and_destruction_0(int, int)>:
c0017150:	83 ec 0c             	sub    esp,0xc
c0017153:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017158:	0f 85 8e 00 00 00    	jne    c00171ec <__static_initialization_and_destruction_0(int, int)+0x9c>
c001715e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017166:	0f 85 80 00 00 00    	jne    c00171ec <__static_initialization_and_destruction_0(int, int)+0x9c>
c001716c:	83 ec 0c             	sub    esp,0xc
c001716f:	68 4c 13 03 c0       	push   0xc003134c
c0017174:	e8 eb ee 00 00       	call   c0026064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017179:	83 c4 10             	add    esp,0x10
c001717c:	83 ec 04             	sub    esp,0x4
c001717f:	68 c0 ad 02 c0       	push   0xc002adc0
c0017184:	68 4c 13 03 c0       	push   0xc003134c
c0017189:	68 14 60 02 c0       	push   0xc0026014
c001718e:	e8 99 61 ff ff       	call   c000d32c <__cxa_atexit>
c0017193:	83 c4 10             	add    esp,0x10
c0017196:	83 ec 0c             	sub    esp,0xc
c0017199:	68 40 13 03 c0       	push   0xc0031340
c001719e:	e8 c1 ee 00 00       	call   c0026064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00171a3:	83 c4 10             	add    esp,0x10
c00171a6:	83 ec 04             	sub    esp,0x4
c00171a9:	68 c0 ad 02 c0       	push   0xc002adc0
c00171ae:	68 40 13 03 c0       	push   0xc0031340
c00171b3:	68 14 60 02 c0       	push   0xc0026014
c00171b8:	e8 6f 61 ff ff       	call   c000d32c <__cxa_atexit>
c00171bd:	83 c4 10             	add    esp,0x10
c00171c0:	83 ec 0c             	sub    esp,0xc
c00171c3:	68 34 13 03 c0       	push   0xc0031334
c00171c8:	e8 97 ee 00 00       	call   c0026064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00171cd:	83 c4 10             	add    esp,0x10
c00171d0:	83 ec 04             	sub    esp,0x4
c00171d3:	68 c0 ad 02 c0       	push   0xc002adc0
c00171d8:	68 34 13 03 c0       	push   0xc0031334
c00171dd:	68 14 60 02 c0       	push   0xc0026014
c00171e2:	e8 45 61 ff ff       	call   c000d32c <__cxa_atexit>
c00171e7:	83 c4 10             	add    esp,0x10
c00171ea:	66 90                	xchg   ax,ax
c00171ec:	90                   	nop
c00171ed:	83 c4 0c             	add    esp,0xc
c00171f0:	c3                   	ret    
c00171f1:	8d 76 00             	lea    esi,[esi+0x0]

c00171f4 <_GLOBAL__sub_I_keNextPID>:
c00171f4:	83 ec 0c             	sub    esp,0xc
c00171f7:	83 ec 08             	sub    esp,0x8
c00171fa:	68 ff ff 00 00       	push   0xffff
c00171ff:	6a 01                	push   0x1
c0017201:	e8 4a ff ff ff       	call   c0017150 <__static_initialization_and_destruction_0(int, int)>
c0017206:	83 c4 10             	add    esp,0x10
c0017209:	83 c4 0c             	add    esp,0xc
c001720c:	c3                   	ret    

c001720d <Vm::inbv(unsigned short)>:
c001720d:	55                   	push   ebp
c001720e:	89 e5                	mov    ebp,esp
c0017210:	83 ec 14             	sub    esp,0x14
c0017213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017216:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c001721a:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c001721e:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017223:	75 07                	jne    c001722c <Vm::inbv(unsigned short)+0x1f>
c0017225:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c001722a:	eb 16                	jmp    c0017242 <Vm::inbv(unsigned short)+0x35>
c001722c:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017230:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017234:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0017238:	89 c2                	mov    edx,eax
c001723a:	ec                   	in     al,dx
c001723b:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001723e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017241:	90                   	nop
c0017242:	c9                   	leave  
c0017243:	c3                   	ret    

c0017244 <Vm::outbv(unsigned short, unsigned char)>:
c0017244:	55                   	push   ebp
c0017245:	89 e5                	mov    ebp,esp
c0017247:	83 ec 18             	sub    esp,0x18
c001724a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001724d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017250:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017254:	88 d0                	mov    al,dl
c0017256:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0017259:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c001725d:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017262:	75 2d                	jne    c0017291 <Vm::outbv(unsigned short, unsigned char)+0x4d>
c0017264:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017269:	8d 50 01             	lea    edx,[eax+0x1]
c001726c:	89 15 90 13 03 c0    	mov    DWORD PTR ds:0xc0031390,edx
c0017272:	8a 55 e8             	mov    dl,BYTE PTR [ebp-0x18]
c0017275:	88 90 a0 13 03 c0    	mov    BYTE PTR [eax-0x3ffcec60],dl
c001727b:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017280:	83 f8 20             	cmp    eax,0x20
c0017283:	75 23                	jne    c00172a8 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017285:	c7 05 90 13 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031390,0x1f
c001728f:	eb 17                	jmp    c00172a8 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017291:	0f b6 55 e8          	movzx  edx,BYTE PTR [ebp-0x18]
c0017295:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017299:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001729d:	88 55 fd             	mov    BYTE PTR [ebp-0x3],dl
c00172a0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00172a3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00172a7:	ee                   	out    dx,al
c00172a8:	90                   	nop
c00172a9:	c9                   	leave  
c00172aa:	c3                   	ret    

c00172ab <Vm::realToLinear(unsigned short, unsigned short)>:
c00172ab:	55                   	push   ebp
c00172ac:	89 e5                	mov    ebp,esp
c00172ae:	83 ec 08             	sub    esp,0x8
c00172b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00172b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00172b7:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
c00172bb:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
c00172bf:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
c00172c3:	c1 e0 04             	shl    eax,0x4
c00172c6:	89 c2                	mov    edx,eax
c00172c8:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
c00172cc:	01 d0                	add    eax,edx
c00172ce:	c9                   	leave  
c00172cf:	c3                   	ret    

c00172d0 <Vm::getSegment(unsigned int)>:
c00172d0:	55                   	push   ebp
c00172d1:	89 e5                	mov    ebp,esp
c00172d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00172d6:	c1 e8 10             	shr    eax,0x10
c00172d9:	5d                   	pop    ebp
c00172da:	c3                   	ret    

c00172db <Vm::getOffset(unsigned int)>:
c00172db:	55                   	push   ebp
c00172dc:	89 e5                	mov    ebp,esp
c00172de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00172e1:	5d                   	pop    ebp
c00172e2:	c3                   	ret    

c00172e3 <Vm::mainloop2()>:
c00172e3:	55                   	push   ebp
c00172e4:	89 e5                	mov    ebp,esp
c00172e6:	53                   	push   ebx
c00172e7:	83 ec 04             	sub    esp,0x4
c00172ea:	fa                   	cli    
c00172eb:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00172f0:	83 c0 01             	add    eax,0x1
c00172f3:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c00172f8:	c6 05 89 13 03 c0 01 	mov    BYTE PTR ds:0xc0031389,0x1
c00172ff:	83 ec 0c             	sub    esp,0xc
c0017302:	6a 02                	push   0x2
c0017304:	e8 cb f5 ff ff       	call   c00168d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017309:	83 c4 10             	add    esp,0x10
c001730c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017311:	8b 00                	mov    eax,DWORD PTR [eax]
c0017313:	66 8b 40 5f          	mov    ax,WORD PTR [eax+0x5f]
c0017317:	0f b7 d8             	movzx  ebx,ax
c001731a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001731f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017321:	66 8b 40 5d          	mov    ax,WORD PTR [eax+0x5d]
c0017325:	0f b7 c8             	movzx  ecx,ax
c0017328:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001732d:	8b 00                	mov    eax,DWORD PTR [eax]
c001732f:	66 8b 40 5b          	mov    ax,WORD PTR [eax+0x5b]
c0017333:	0f b7 d0             	movzx  edx,ax
c0017336:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001733b:	8b 00                	mov    eax,DWORD PTR [eax]
c001733d:	66 8b 40 59          	mov    ax,WORD PTR [eax+0x59]
c0017341:	0f b7 c0             	movzx  eax,ax
c0017344:	53                   	push   ebx
c0017345:	51                   	push   ecx
c0017346:	52                   	push   edx
c0017347:	50                   	push   eax
c0017348:	e8 c2 8e fe ff       	call   c000020f <goToVM86>
c001734d:	83 c4 10             	add    esp,0x10
c0017350:	90                   	nop
c0017351:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0017354:	c9                   	leave  
c0017355:	c3                   	ret    

c0017356 <Vm::mainVm8086Loop(void*)>:
c0017356:	55                   	push   ebp
c0017357:	89 e5                	mov    ebp,esp
c0017359:	83 ec 08             	sub    esp,0x8
c001735c:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0017364:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017369:	85 c0                	test   eax,eax
c001736b:	75 01                	jne    c001736e <Vm::mainVm8086Loop(void*)+0x18>
c001736d:	fb                   	sti    
c001736e:	e8 70 ff ff ff       	call   c00172e3 <Vm::mainloop2()>
c0017373:	90                   	nop
c0017374:	c9                   	leave  
c0017375:	c3                   	ret    

c0017376 <Vm::mainloop3(unsigned long)>:
c0017376:	55                   	push   ebp
c0017377:	89 e5                	mov    ebp,esp
c0017379:	83 ec 08             	sub    esp,0x8
c001737c:	fa                   	cli    
c001737d:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017382:	83 c0 01             	add    eax,0x1
c0017385:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c001738a:	c6 05 88 13 03 c0 01 	mov    BYTE PTR ds:0xc0031388,0x1
c0017391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017394:	a3 84 13 03 c0       	mov    ds:0xc0031384,eax
c0017399:	83 ec 0c             	sub    esp,0xc
c001739c:	6a 02                	push   0x2
c001739e:	e8 31 f5 ff ff       	call   c00168d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00173a3:	83 c4 10             	add    esp,0x10
c00173a6:	e8 38 ff ff ff       	call   c00172e3 <Vm::mainloop2()>
c00173ab:	90                   	nop
c00173ac:	c9                   	leave  
c00173ad:	c3                   	ret    

c00173ae <Vm::initialise8086()>:
c00173ae:	55                   	push   ebp
c00173af:	89 e5                	mov    ebp,esp
c00173b1:	83 ec 08             	sub    esp,0x8
c00173b4:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c00173b9:	68 80 00 00 00       	push   0x80
c00173be:	6a 00                	push   0x0
c00173c0:	68 56 73 01 c0       	push   0xc0017356
c00173c5:	50                   	push   eax
c00173c6:	e8 a9 f1 ff ff       	call   c0016574 <Process::createThread(void (*)(void*), void*, int)>
c00173cb:	83 c4 10             	add    esp,0x10
c00173ce:	a3 8c 13 03 c0       	mov    ds:0xc003138c,eax
c00173d3:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c00173d8:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00173de:	83 ec 0c             	sub    esp,0xc
c00173e1:	6a 07                	push   0x7
c00173e3:	68 10 01 00 00       	push   0x110
c00173e8:	6a 00                	push   0x0
c00173ea:	6a 00                	push   0x0
c00173ec:	50                   	push   eax
c00173ed:	e8 2a c7 ff ff       	call   c0013b1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00173f2:	83 c4 20             	add    esp,0x20
c00173f5:	90                   	nop
c00173f6:	c9                   	leave  
c00173f7:	c3                   	ret    

c00173f8 <Vm::finish8086()>:
c00173f8:	55                   	push   ebp
c00173f9:	89 e5                	mov    ebp,esp
c00173fb:	83 ec 18             	sub    esp,0x18
c00173fe:	fa                   	cli    
c00173ff:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017404:	83 c0 01             	add    eax,0x1
c0017407:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c001740c:	a0 88 13 03 c0       	mov    al,ds:0xc0031388
c0017411:	0f b6 c0             	movzx  eax,al
c0017414:	85 c0                	test   eax,eax
c0017416:	75 19                	jne    c0017431 <Vm::finish8086()+0x39>
c0017418:	e8 23 f4 ff ff       	call   c0016840 <schedule()>
c001741d:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0017425:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001742a:	85 c0                	test   eax,eax
c001742c:	75 d0                	jne    c00173fe <Vm::finish8086()+0x6>
c001742e:	fb                   	sti    
c001742f:	eb cd                	jmp    c00173fe <Vm::finish8086()+0x6>
c0017431:	90                   	nop
c0017432:	a1 84 13 03 c0       	mov    eax,ds:0xc0031384
c0017437:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001743a:	c6 05 88 13 03 c0 00 	mov    BYTE PTR ds:0xc0031388,0x0
c0017441:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c0017446:	83 ec 0c             	sub    esp,0xc
c0017449:	50                   	push   eax
c001744a:	e8 4d f7 ff ff       	call   c0016b9c <unblockTask(ThreadControlBlock*)>
c001744f:	83 c4 10             	add    esp,0x10
c0017452:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c001745a:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001745f:	85 c0                	test   eax,eax
c0017461:	75 01                	jne    c0017464 <Vm::finish8086()+0x6c>
c0017463:	fb                   	sti    
c0017464:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017467:	c9                   	leave  
c0017468:	c3                   	ret    

c0017469 <Vm::getOutput8086(unsigned char*)>:
c0017469:	55                   	push   ebp
c001746a:	89 e5                	mov    ebp,esp
c001746c:	57                   	push   edi
c001746d:	56                   	push   esi
c001746e:	53                   	push   ebx
c001746f:	83 ec 20             	sub    esp,0x20
c0017472:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017477:	89 c2                	mov    edx,eax
c0017479:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001747c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001747f:	c7 45 e8 a0 13 03 c0 	mov    DWORD PTR [ebp-0x18],0xc00313a0
c0017486:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0017489:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001748c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001748f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0017492:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0017495:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0017498:	89 c6                	mov    esi,eax
c001749a:	89 d7                	mov    edi,edx
c001749c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001749e:	89 c8                	mov    eax,ecx
c00174a0:	89 fa                	mov    edx,edi
c00174a2:	89 f3                	mov    ebx,esi
c00174a4:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c00174a7:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00174aa:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00174ad:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c00174b2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00174b5:	c7 05 90 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031390,0x0
c00174bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00174c2:	83 c4 20             	add    esp,0x20
c00174c5:	5b                   	pop    ebx
c00174c6:	5e                   	pop    esi
c00174c7:	5f                   	pop    edi
c00174c8:	5d                   	pop    ebp
c00174c9:	c3                   	ret    

c00174ca <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00174ca:	55                   	push   ebp
c00174cb:	89 e5                	mov    ebp,esp
c00174cd:	57                   	push   edi
c00174ce:	56                   	push   esi
c00174cf:	53                   	push   ebx
c00174d0:	83 ec 3c             	sub    esp,0x3c
c00174d3:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00174d6:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00174d9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00174dc:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00174df:	66 89 5d c4          	mov    WORD PTR [ebp-0x3c],bx
c00174e3:	66 89 4d c0          	mov    WORD PTR [ebp-0x40],cx
c00174e7:	66 89 55 bc          	mov    WORD PTR [ebp-0x44],dx
c00174eb:	66 89 45 b8          	mov    WORD PTR [ebp-0x48],ax
c00174ef:	a0 80 13 03 c0       	mov    al,ds:0xc0031380
c00174f4:	83 f0 01             	xor    eax,0x1
c00174f7:	0f b6 c0             	movzx  eax,al
c00174fa:	85 c0                	test   eax,eax
c00174fc:	74 07                	je     c0017505 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c00174fe:	c6 05 80 13 03 c0 01 	mov    BYTE PTR ds:0xc0031380,0x1
c0017505:	fa                   	cli    
c0017506:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001750b:	83 c0 01             	add    eax,0x1
c001750e:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0017513:	a0 89 13 03 c0       	mov    al,ds:0xc0031389
c0017518:	0f b6 c0             	movzx  eax,al
c001751b:	85 c0                	test   eax,eax
c001751d:	75 19                	jne    c0017538 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x6e>
c001751f:	e8 1c f3 ff ff       	call   c0016840 <schedule()>
c0017524:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c001752c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017531:	85 c0                	test   eax,eax
c0017533:	75 d0                	jne    c0017505 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017535:	fb                   	sti    
c0017536:	eb cd                	jmp    c0017505 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017538:	90                   	nop
c0017539:	8b 15 8c 13 03 c0    	mov    edx,DWORD PTR ds:0xc003138c
c001753f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0017542:	66 89 42 59          	mov    WORD PTR [edx+0x59],ax
c0017546:	8b 15 8c 13 03 c0    	mov    edx,DWORD PTR ds:0xc003138c
c001754c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001754f:	66 89 42 5b          	mov    WORD PTR [edx+0x5b],ax
c0017553:	8b 15 8c 13 03 c0    	mov    edx,DWORD PTR ds:0xc003138c
c0017559:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c001755c:	66 89 42 5d          	mov    WORD PTR [edx+0x5d],ax
c0017560:	8b 15 8c 13 03 c0    	mov    edx,DWORD PTR ds:0xc003138c
c0017566:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c0017569:	66 89 42 5f          	mov    WORD PTR [edx+0x5f],ax
c001756d:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c0017572:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017576:	c7 05 90 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031390,0x0
c0017580:	83 ec 04             	sub    esp,0x4
c0017583:	6a 20                	push   0x20
c0017585:	6a 00                	push   0x0
c0017587:	68 a0 13 03 c0       	push   0xc00313a0
c001758c:	e8 5f 8f fe ff       	call   c00004f0 <memset>
c0017591:	83 c4 10             	add    esp,0x10
c0017594:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0017597:	0f b7 55 c4          	movzx  edx,WORD PTR [ebp-0x3c]
c001759b:	0f b7 45 c0          	movzx  eax,WORD PTR [ebp-0x40]
c001759f:	83 ec 08             	sub    esp,0x8
c00175a2:	52                   	push   edx
c00175a3:	50                   	push   eax
c00175a4:	e8 02 fd ff ff       	call   c00172ab <Vm::realToLinear(unsigned short, unsigned short)>
c00175a9:	83 c4 10             	add    esp,0x10
c00175ac:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00175af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00175b2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00175b5:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c00175b8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00175bb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00175be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00175c1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00175c4:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00175c7:	89 c6                	mov    esi,eax
c00175c9:	89 d7                	mov    edi,edx
c00175cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00175cd:	89 c8                	mov    eax,ecx
c00175cf:	89 fa                	mov    edx,edi
c00175d1:	89 f3                	mov    ebx,esi
c00175d3:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00175d6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00175d9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00175dc:	c6 05 89 13 03 c0 00 	mov    BYTE PTR ds:0xc0031389,0x0
c00175e3:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c00175eb:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00175f0:	85 c0                	test   eax,eax
c00175f2:	75 01                	jne    c00175f5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x12b>
c00175f4:	fb                   	sti    
c00175f5:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c00175fa:	83 ec 0c             	sub    esp,0xc
c00175fd:	50                   	push   eax
c00175fe:	e8 99 f5 ff ff       	call   c0016b9c <unblockTask(ThreadControlBlock*)>
c0017603:	83 c4 10             	add    esp,0x10
c0017606:	b0 01                	mov    al,0x1
c0017608:	8d 65 f4             	lea    esp,[ebp-0xc]
c001760b:	5b                   	pop    ebx
c001760c:	5e                   	pop    esi
c001760d:	5f                   	pop    edi
c001760e:	5d                   	pop    ebp
c001760f:	c3                   	ret    

c0017610 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017610:	55                   	push   ebp
c0017611:	89 e5                	mov    ebp,esp
c0017613:	56                   	push   esi
c0017614:	53                   	push   ebx
c0017615:	83 ec 30             	sub    esp,0x30
c0017618:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c001761b:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001761e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017621:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017624:	66 89 5d d4          	mov    WORD PTR [ebp-0x2c],bx
c0017628:	66 89 4d d0          	mov    WORD PTR [ebp-0x30],cx
c001762c:	66 89 55 cc          	mov    WORD PTR [ebp-0x34],dx
c0017630:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0017634:	a0 80 13 03 c0       	mov    al,ds:0xc0031380
c0017639:	83 f0 01             	xor    eax,0x1
c001763c:	0f b6 c0             	movzx  eax,al
c001763f:	85 c0                	test   eax,eax
c0017641:	74 07                	je     c001764a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3a>
c0017643:	c6 05 80 13 03 c0 01 	mov    BYTE PTR ds:0xc0031380,0x1
c001764a:	83 ec 08             	sub    esp,0x8
c001764d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017650:	68 c0 8b 02 c0       	push   0xc0028bc0
c0017655:	e8 22 f9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001765a:	83 c4 10             	add    esp,0x10
c001765d:	fa                   	cli    
c001765e:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017663:	83 c0 01             	add    eax,0x1
c0017666:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c001766b:	a0 89 13 03 c0       	mov    al,ds:0xc0031389
c0017670:	0f b6 c0             	movzx  eax,al
c0017673:	85 c0                	test   eax,eax
c0017675:	75 19                	jne    c0017690 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x80>
c0017677:	e8 c4 f1 ff ff       	call   c0016840 <schedule()>
c001767c:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0017684:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017689:	85 c0                	test   eax,eax
c001768b:	75 d0                	jne    c001765d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c001768d:	fb                   	sti    
c001768e:	eb cd                	jmp    c001765d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0017690:	90                   	nop
c0017691:	8b 15 8c 13 03 c0    	mov    edx,DWORD PTR ds:0xc003138c
c0017697:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001769a:	66 89 42 59          	mov    WORD PTR [edx+0x59],ax
c001769e:	8b 15 8c 13 03 c0    	mov    edx,DWORD PTR ds:0xc003138c
c00176a4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00176a7:	66 89 42 5b          	mov    WORD PTR [edx+0x5b],ax
c00176ab:	8b 15 8c 13 03 c0    	mov    edx,DWORD PTR ds:0xc003138c
c00176b1:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
c00176b4:	66 89 42 5d          	mov    WORD PTR [edx+0x5d],ax
c00176b8:	8b 15 8c 13 03 c0    	mov    edx,DWORD PTR ds:0xc003138c
c00176be:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00176c1:	66 89 42 5f          	mov    WORD PTR [edx+0x5f],ax
c00176c5:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c00176ca:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00176ce:	c7 05 90 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031390,0x0
c00176d8:	83 ec 04             	sub    esp,0x4
c00176db:	6a 20                	push   0x20
c00176dd:	6a 00                	push   0x0
c00176df:	68 a0 13 03 c0       	push   0xc00313a0
c00176e4:	e8 07 8e fe ff       	call   c00004f0 <memset>
c00176e9:	83 c4 10             	add    esp,0x10
c00176ec:	c7 45 ec 14 01 00 00 	mov    DWORD PTR [ebp-0x14],0x114
c00176f3:	83 ec 0c             	sub    esp,0xc
c00176f6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00176f9:	e8 65 81 ff ff       	call   c000f863 <malloc>
c00176fe:	83 c4 10             	add    esp,0x10
c0017701:	89 c3                	mov    ebx,eax
c0017703:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c0017708:	83 ec 04             	sub    esp,0x4
c001770b:	50                   	push   eax
c001770c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001770f:	53                   	push   ebx
c0017710:	e8 75 0a ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017715:	83 c4 10             	add    esp,0x10
c0017718:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001771b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001771f:	75 29                	jne    c001774a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13a>
c0017721:	83 ec 0c             	sub    esp,0xc
c0017724:	68 e2 8b 02 c0       	push   0xc0028be2
c0017729:	e8 8a 85 ff ff       	call   c000fcb8 <KePanic(char const*)>
c001772e:	83 c4 10             	add    esp,0x10
c0017731:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0017739:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001773e:	85 c0                	test   eax,eax
c0017740:	75 01                	jne    c0017743 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x133>
c0017742:	fb                   	sti    
c0017743:	b0 00                	mov    al,0x0
c0017745:	e9 fb 00 00 00       	jmp    c0017845 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c001774a:	83 ec 04             	sub    esp,0x4
c001774d:	8d 45 df             	lea    eax,[ebp-0x21]
c0017750:	50                   	push   eax
c0017751:	8d 45 e0             	lea    eax,[ebp-0x20]
c0017754:	50                   	push   eax
c0017755:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017758:	e8 4d 0d ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001775d:	83 c4 10             	add    esp,0x10
c0017760:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0017763:	0f b6 c0             	movzx  eax,al
c0017766:	85 c0                	test   eax,eax
c0017768:	74 29                	je     c0017793 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001776a:	83 ec 0c             	sub    esp,0xc
c001776d:	68 f6 8b 02 c0       	push   0xc0028bf6
c0017772:	e8 41 85 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0017777:	83 c4 10             	add    esp,0x10
c001777a:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0017782:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017787:	85 c0                	test   eax,eax
c0017789:	75 01                	jne    c001778c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17c>
c001778b:	fb                   	sti    
c001778c:	b0 00                	mov    al,0x0
c001778e:	e9 b2 00 00 00       	jmp    c0017845 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c0017793:	83 ec 08             	sub    esp,0x8
c0017796:	6a 01                	push   0x1
c0017798:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001779b:	e8 08 0a ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c00177a0:	83 c4 10             	add    esp,0x10
c00177a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00177a6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c00177aa:	74 26                	je     c00177d2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1c2>
c00177ac:	83 ec 0c             	sub    esp,0xc
c00177af:	68 0f 8c 02 c0       	push   0xc0028c0f
c00177b4:	e8 ff 84 ff ff       	call   c000fcb8 <KePanic(char const*)>
c00177b9:	83 c4 10             	add    esp,0x10
c00177bc:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c00177c4:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00177c9:	85 c0                	test   eax,eax
c00177cb:	75 01                	jne    c00177ce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1be>
c00177cd:	fb                   	sti    
c00177ce:	b0 00                	mov    al,0x0
c00177d0:	eb 73                	jmp    c0017845 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c00177d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00177d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00177d7:	83 c0 0c             	add    eax,0xc
c00177da:	8b 18                	mov    ebx,DWORD PTR [eax]
c00177dc:	0f b7 55 d4          	movzx  edx,WORD PTR [ebp-0x2c]
c00177e0:	0f b7 45 d0          	movzx  eax,WORD PTR [ebp-0x30]
c00177e4:	83 ec 08             	sub    esp,0x8
c00177e7:	52                   	push   edx
c00177e8:	50                   	push   eax
c00177e9:	e8 bd fa ff ff       	call   c00172ab <Vm::realToLinear(unsigned short, unsigned short)>
c00177ee:	83 c4 10             	add    esp,0x10
c00177f1:	89 c6                	mov    esi,eax
c00177f3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00177f6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00177f9:	83 ec 0c             	sub    esp,0xc
c00177fc:	8d 4d d8             	lea    ecx,[ebp-0x28]
c00177ff:	51                   	push   ecx
c0017800:	56                   	push   esi
c0017801:	52                   	push   edx
c0017802:	50                   	push   eax
c0017803:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017806:	ff d3                	call   ebx
c0017808:	83 c4 20             	add    esp,0x20
c001780b:	83 ec 0c             	sub    esp,0xc
c001780e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017811:	e8 f0 09 ff ff       	call   c0008206 <File::close()>
c0017816:	83 c4 10             	add    esp,0x10
c0017819:	c6 05 89 13 03 c0 00 	mov    BYTE PTR ds:0xc0031389,0x0
c0017820:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0017828:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001782d:	85 c0                	test   eax,eax
c001782f:	75 01                	jne    c0017832 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x222>
c0017831:	fb                   	sti    
c0017832:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c0017837:	83 ec 0c             	sub    esp,0xc
c001783a:	50                   	push   eax
c001783b:	e8 5c f3 ff ff       	call   c0016b9c <unblockTask(ThreadControlBlock*)>
c0017840:	83 c4 10             	add    esp,0x10
c0017843:	b0 01                	mov    al,0x1
c0017845:	8d 65 f8             	lea    esp,[ebp-0x8]
c0017848:	5b                   	pop    ebx
c0017849:	5e                   	pop    esi
c001784a:	5d                   	pop    ebp
c001784b:	c3                   	ret    

c001784c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001784c:	55                   	push   ebp
c001784d:	89 e5                	mov    ebp,esp
c001784f:	83 ec 68             	sub    esp,0x68
c0017852:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017855:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017858:	66 89 55 9c          	mov    WORD PTR [ebp-0x64],dx
c001785c:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0017860:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c0017867:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
c001786a:	83 e8 06             	sub    eax,0x6
c001786d:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0017871:	0f b7 55 98          	movzx  edx,WORD PTR [ebp-0x68]
c0017875:	0f b7 45 9c          	movzx  eax,WORD PTR [ebp-0x64]
c0017879:	52                   	push   edx
c001787a:	50                   	push   eax
c001787b:	e8 2b fa ff ff       	call   c00172ab <Vm::realToLinear(unsigned short, unsigned short)>
c0017880:	83 c4 08             	add    esp,0x8
c0017883:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0017886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017889:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001788c:	83 e8 06             	sub    eax,0x6
c001788f:	0f b7 d0             	movzx  edx,ax
c0017892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017895:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001789b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001789e:	83 c0 02             	add    eax,0x2
c00178a1:	0f b7 c0             	movzx  eax,ax
c00178a4:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00178a7:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c00178aa:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
c00178ae:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00178b1:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00178b4:	66 8b 45 da          	mov    ax,WORD PTR [ebp-0x26]
c00178b8:	88 c2                	mov    dl,al
c00178ba:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00178bd:	88 10                	mov    BYTE PTR [eax],dl
c00178bf:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
c00178c3:	c1 e8 08             	shr    eax,0x8
c00178c6:	89 c2                	mov    edx,eax
c00178c8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00178cb:	83 c0 01             	add    eax,0x1
c00178ce:	88 10                	mov    BYTE PTR [eax],dl
c00178d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00178d6:	0f b7 c0             	movzx  eax,ax
c00178d9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00178dc:	83 c2 02             	add    edx,0x2
c00178df:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
c00178e2:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c00178e6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00178e9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00178ec:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c00178f0:	88 c2                	mov    dl,al
c00178f2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00178f5:	88 10                	mov    BYTE PTR [eax],dl
c00178f7:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c00178fb:	c1 e8 08             	shr    eax,0x8
c00178fe:	89 c2                	mov    edx,eax
c0017900:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017903:	83 c0 01             	add    eax,0x1
c0017906:	88 10                	mov    BYTE PTR [eax],dl
c0017908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001790b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001790e:	0f b7 c0             	movzx  eax,ax
c0017911:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017914:	83 c2 04             	add    edx,0x4
c0017917:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001791a:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
c001791e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017921:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0017924:	66 8b 45 f2          	mov    ax,WORD PTR [ebp-0xe]
c0017928:	88 c2                	mov    dl,al
c001792a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001792d:	88 10                	mov    BYTE PTR [eax],dl
c001792f:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
c0017933:	c1 e8 08             	shr    eax,0x8
c0017936:	89 c2                	mov    edx,eax
c0017938:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001793b:	83 c0 01             	add    eax,0x1
c001793e:	88 10                	mov    BYTE PTR [eax],dl
c0017940:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017945:	8b 00                	mov    eax,DWORD PTR [eax]
c0017947:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c001794a:	0f b6 c0             	movzx  eax,al
c001794d:	85 c0                	test   eax,eax
c001794f:	74 5e                	je     c00179af <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x163>
c0017951:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0017954:	83 c0 04             	add    eax,0x4
c0017957:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c001795a:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001795d:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0017960:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0017963:	8a 00                	mov    al,BYTE PTR [eax]
c0017965:	0f b6 c0             	movzx  eax,al
c0017968:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c001796b:	83 c2 01             	add    edx,0x1
c001796e:	8a 12                	mov    dl,BYTE PTR [edx]
c0017970:	0f b6 d2             	movzx  edx,dl
c0017973:	c1 e2 08             	shl    edx,0x8
c0017976:	09 d0                	or     eax,edx
c0017978:	80 cc 02             	or     ah,0x2
c001797b:	0f b7 c0             	movzx  eax,ax
c001797e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017981:	83 c2 04             	add    edx,0x4
c0017984:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0017987:	66 89 45 ce          	mov    WORD PTR [ebp-0x32],ax
c001798b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001798e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0017991:	66 8b 45 ce          	mov    ax,WORD PTR [ebp-0x32]
c0017995:	88 c2                	mov    dl,al
c0017997:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001799a:	88 10                	mov    BYTE PTR [eax],dl
c001799c:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
c00179a0:	c1 e8 08             	shr    eax,0x8
c00179a3:	89 c2                	mov    edx,eax
c00179a5:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00179a8:	83 c0 01             	add    eax,0x1
c00179ab:	88 10                	mov    BYTE PTR [eax],dl
c00179ad:	eb 5e                	jmp    c0017a0d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x1c1>
c00179af:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00179b2:	83 c0 04             	add    eax,0x4
c00179b5:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c00179b8:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c00179bb:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c00179be:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c00179c1:	8a 00                	mov    al,BYTE PTR [eax]
c00179c3:	0f b6 c0             	movzx  eax,al
c00179c6:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c00179c9:	83 c2 01             	add    edx,0x1
c00179cc:	8a 12                	mov    dl,BYTE PTR [edx]
c00179ce:	0f b6 d2             	movzx  edx,dl
c00179d1:	c1 e2 08             	shl    edx,0x8
c00179d4:	09 d0                	or     eax,edx
c00179d6:	0f b7 c0             	movzx  eax,ax
c00179d9:	25 ff fd 00 00       	and    eax,0xfdff
c00179de:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00179e1:	83 c2 04             	add    edx,0x4
c00179e4:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
c00179e7:	66 89 45 ba          	mov    WORD PTR [ebp-0x46],ax
c00179eb:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c00179ee:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c00179f1:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
c00179f5:	88 c2                	mov    dl,al
c00179f7:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c00179fa:	88 10                	mov    BYTE PTR [eax],dl
c00179fc:	0f b7 45 ba          	movzx  eax,WORD PTR [ebp-0x46]
c0017a00:	c1 e8 08             	shr    eax,0x8
c0017a03:	89 c2                	mov    edx,eax
c0017a05:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0017a08:	83 c0 01             	add    eax,0x1
c0017a0b:	88 10                	mov    BYTE PTR [eax],dl
c0017a0d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a14:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017a18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017a1b:	c1 e0 02             	shl    eax,0x2
c0017a1e:	8d 50 02             	lea    edx,[eax+0x2]
c0017a21:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0017a24:	01 d0                	add    eax,edx
c0017a26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017a29:	0f b7 d0             	movzx  edx,ax
c0017a2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a2f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0017a32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017a35:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017a3c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0017a3f:	01 d0                	add    eax,edx
c0017a41:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017a44:	0f b7 d0             	movzx  edx,ax
c0017a47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a4a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017a4d:	90                   	nop
c0017a4e:	c9                   	leave  
c0017a4f:	c3                   	ret    

c0017a50 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017a50:	55                   	push   ebp
c0017a51:	89 e5                	mov    ebp,esp
c0017a53:	83 ec 28             	sub    esp,0x28
c0017a56:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017a59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017a5c:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017a60:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017a64:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017a68:	c1 e0 04             	shl    eax,0x4
c0017a6b:	89 c2                	mov    edx,eax
c0017a6d:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017a71:	01 d0                	add    eax,edx
c0017a73:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017a78:	7e 10                	jle    c0017a8a <Vm::readByteFromReal(unsigned short, unsigned short)+0x3a>
c0017a7a:	83 ec 0c             	sub    esp,0xc
c0017a7d:	68 28 8c 02 c0       	push   0xc0028c28
c0017a82:	e8 31 82 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0017a87:	83 c4 10             	add    esp,0x10
c0017a8a:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017a8e:	c1 e0 04             	shl    eax,0x4
c0017a91:	89 c2                	mov    edx,eax
c0017a93:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017a97:	01 d0                	add    eax,edx
c0017a99:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017a9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017a9f:	8a 00                	mov    al,BYTE PTR [eax]
c0017aa1:	c9                   	leave  
c0017aa2:	c3                   	ret    

c0017aa3 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017aa3:	55                   	push   ebp
c0017aa4:	89 e5                	mov    ebp,esp
c0017aa6:	83 ec 28             	sub    esp,0x28
c0017aa9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017aac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017aaf:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017ab3:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017ab7:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017abb:	c1 e0 04             	shl    eax,0x4
c0017abe:	89 c2                	mov    edx,eax
c0017ac0:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017ac4:	01 d0                	add    eax,edx
c0017ac6:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017acb:	7e 10                	jle    c0017add <Vm::readWordFromReal(unsigned short, unsigned short)+0x3a>
c0017acd:	83 ec 0c             	sub    esp,0xc
c0017ad0:	68 28 8c 02 c0       	push   0xc0028c28
c0017ad5:	e8 de 81 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0017ada:	83 c4 10             	add    esp,0x10
c0017add:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017ae1:	c1 e0 04             	shl    eax,0x4
c0017ae4:	89 c2                	mov    edx,eax
c0017ae6:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017aea:	01 d0                	add    eax,edx
c0017aec:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017aef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017af2:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017af5:	c9                   	leave  
c0017af6:	c3                   	ret    

c0017af7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017af7:	55                   	push   ebp
c0017af8:	89 e5                	mov    ebp,esp
c0017afa:	83 ec 28             	sub    esp,0x28
c0017afd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017b00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017b03:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017b07:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017b0b:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017b0f:	c1 e0 04             	shl    eax,0x4
c0017b12:	89 c2                	mov    edx,eax
c0017b14:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017b18:	01 d0                	add    eax,edx
c0017b1a:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017b1f:	7e 10                	jle    c0017b31 <Vm::readDwordFromReal(unsigned short, unsigned short)+0x3a>
c0017b21:	83 ec 0c             	sub    esp,0xc
c0017b24:	68 28 8c 02 c0       	push   0xc0028c28
c0017b29:	e8 8a 81 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0017b2e:	83 c4 10             	add    esp,0x10
c0017b31:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017b35:	c1 e0 04             	shl    eax,0x4
c0017b38:	89 c2                	mov    edx,eax
c0017b3a:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017b3e:	01 d0                	add    eax,edx
c0017b40:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017b43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017b46:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b48:	c9                   	leave  
c0017b49:	c3                   	ret    

c0017b4a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017b4a:	55                   	push   ebp
c0017b4b:	89 e5                	mov    ebp,esp
c0017b4d:	83 ec 28             	sub    esp,0x28
c0017b50:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017b56:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017b59:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017b5d:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017b61:	88 c8                	mov    al,cl
c0017b63:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
c0017b66:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017b6a:	c1 e0 04             	shl    eax,0x4
c0017b6d:	89 c2                	mov    edx,eax
c0017b6f:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017b73:	01 d0                	add    eax,edx
c0017b75:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017b7a:	7e 10                	jle    c0017b8c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)+0x42>
c0017b7c:	83 ec 0c             	sub    esp,0xc
c0017b7f:	68 28 8c 02 c0       	push   0xc0028c28
c0017b84:	e8 2f 81 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0017b89:	83 c4 10             	add    esp,0x10
c0017b8c:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017b90:	c1 e0 04             	shl    eax,0x4
c0017b93:	89 c2                	mov    edx,eax
c0017b95:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017b99:	01 d0                	add    eax,edx
c0017b9b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017b9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017ba1:	8a 55 dc             	mov    dl,BYTE PTR [ebp-0x24]
c0017ba4:	88 10                	mov    BYTE PTR [eax],dl
c0017ba6:	90                   	nop
c0017ba7:	c9                   	leave  
c0017ba8:	c3                   	ret    

c0017ba9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017ba9:	55                   	push   ebp
c0017baa:	89 e5                	mov    ebp,esp
c0017bac:	83 ec 28             	sub    esp,0x28
c0017baf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0017bb2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017bb5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017bb8:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
c0017bbc:	66 89 55 e0          	mov    WORD PTR [ebp-0x20],dx
c0017bc0:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0017bc4:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017bc8:	c1 e0 04             	shl    eax,0x4
c0017bcb:	89 c2                	mov    edx,eax
c0017bcd:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017bd1:	01 d0                	add    eax,edx
c0017bd3:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017bd8:	7e 10                	jle    c0017bea <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)+0x41>
c0017bda:	83 ec 0c             	sub    esp,0xc
c0017bdd:	68 28 8c 02 c0       	push   0xc0028c28
c0017be2:	e8 d1 80 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0017be7:	83 c4 10             	add    esp,0x10
c0017bea:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017bee:	c1 e0 04             	shl    eax,0x4
c0017bf1:	89 c2                	mov    edx,eax
c0017bf3:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017bf7:	01 d0                	add    eax,edx
c0017bf9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017bfc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017bff:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0017c02:	66 89 02             	mov    WORD PTR [edx],ax
c0017c05:	90                   	nop
c0017c06:	c9                   	leave  
c0017c07:	c3                   	ret    

c0017c08 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017c08:	55                   	push   ebp
c0017c09:	89 e5                	mov    ebp,esp
c0017c0b:	83 ec 28             	sub    esp,0x28
c0017c0e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017c11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017c14:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017c18:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017c1c:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017c20:	c1 e0 04             	shl    eax,0x4
c0017c23:	89 c2                	mov    edx,eax
c0017c25:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017c29:	01 d0                	add    eax,edx
c0017c2b:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017c30:	7e 10                	jle    c0017c42 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)+0x3a>
c0017c32:	83 ec 0c             	sub    esp,0xc
c0017c35:	68 28 8c 02 c0       	push   0xc0028c28
c0017c3a:	e8 79 80 ff ff       	call   c000fcb8 <KePanic(char const*)>
c0017c3f:	83 c4 10             	add    esp,0x10
c0017c42:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017c46:	c1 e0 04             	shl    eax,0x4
c0017c49:	89 c2                	mov    edx,eax
c0017c4b:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017c4f:	01 d0                	add    eax,edx
c0017c51:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017c54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017c57:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017c5a:	89 10                	mov    DWORD PTR [eax],edx
c0017c5c:	90                   	nop
c0017c5d:	c9                   	leave  
c0017c5e:	c3                   	ret    

c0017c5f <Vm::faultHandler(regs*)>:
c0017c5f:	55                   	push   ebp
c0017c60:	89 e5                	mov    ebp,esp
c0017c62:	57                   	push   edi
c0017c63:	56                   	push   esi
c0017c64:	53                   	push   ebx
c0017c65:	81 ec ac 00 00 00    	sub    esp,0xac
c0017c6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c6e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017c71:	0f b7 d0             	movzx  edx,ax
c0017c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c7a:	0f b7 c0             	movzx  eax,ax
c0017c7d:	52                   	push   edx
c0017c7e:	50                   	push   eax
c0017c7f:	e8 27 f6 ff ff       	call   c00172ab <Vm::realToLinear(unsigned short, unsigned short)>
c0017c84:	83 c4 08             	add    esp,0x8
c0017c87:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0017c8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c8d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017c90:	0f b7 d0             	movzx  edx,ax
c0017c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c96:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017c99:	0f b7 c0             	movzx  eax,ax
c0017c9c:	52                   	push   edx
c0017c9d:	50                   	push   eax
c0017c9e:	e8 08 f6 ff ff       	call   c00172ab <Vm::realToLinear(unsigned short, unsigned short)>
c0017ca3:	83 c4 08             	add    esp,0x8
c0017ca6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cac:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017caf:	0f b7 d0             	movzx  edx,ax
c0017cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cb5:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017cb8:	0f b7 c0             	movzx  eax,ax
c0017cbb:	52                   	push   edx
c0017cbc:	50                   	push   eax
c0017cbd:	e8 e9 f5 ff ff       	call   c00172ab <Vm::realToLinear(unsigned short, unsigned short)>
c0017cc2:	83 c4 08             	add    esp,0x8
c0017cc5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0017cc8:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0017ccf:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
c0017cd3:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
c0017cd7:	c6 45 e1 06          	mov    BYTE PTR [ebp-0x1f],0x6
c0017cdb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017cde:	8a 00                	mov    al,BYTE PTR [eax]
c0017ce0:	0f b6 c0             	movzx  eax,al
c0017ce3:	83 e8 26             	sub    eax,0x26
c0017ce6:	3d d5 00 00 00       	cmp    eax,0xd5
c0017ceb:	0f 87 f4 0c 00 00    	ja     c00189e5 <Vm::faultHandler(regs*)+0xd86>
c0017cf1:	8b 04 85 a8 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7358]
c0017cf8:	ff e0                	jmp    eax
c0017cfa:	c6 45 e1 02          	mov    BYTE PTR [ebp-0x1f],0x2
c0017cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d01:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d04:	8d 50 01             	lea    edx,[eax+0x1]
c0017d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d0a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d0d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017d11:	e9 83 0d 00 00       	jmp    c0018a99 <Vm::faultHandler(regs*)+0xe3a>
c0017d16:	c6 45 e1 00          	mov    BYTE PTR [ebp-0x1f],0x0
c0017d1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d1d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d20:	8d 50 01             	lea    edx,[eax+0x1]
c0017d23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d26:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d29:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017d2d:	e9 67 0d 00 00       	jmp    c0018a99 <Vm::faultHandler(regs*)+0xe3a>
c0017d32:	c6 45 e1 01          	mov    BYTE PTR [ebp-0x1f],0x1
c0017d36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d3c:	8d 50 01             	lea    edx,[eax+0x1]
c0017d3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d42:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d45:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017d49:	e9 4b 0d 00 00       	jmp    c0018a99 <Vm::faultHandler(regs*)+0xe3a>
c0017d4e:	c6 45 e1 03          	mov    BYTE PTR [ebp-0x1f],0x3
c0017d52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d55:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d58:	8d 50 01             	lea    edx,[eax+0x1]
c0017d5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d5e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d61:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017d65:	e9 2f 0d 00 00       	jmp    c0018a99 <Vm::faultHandler(regs*)+0xe3a>
c0017d6a:	c6 45 e1 04          	mov    BYTE PTR [ebp-0x1f],0x4
c0017d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d71:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d74:	8d 50 01             	lea    edx,[eax+0x1]
c0017d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d7a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d7d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017d81:	e9 13 0d 00 00       	jmp    c0018a99 <Vm::faultHandler(regs*)+0xe3a>
c0017d86:	c6 45 e1 05          	mov    BYTE PTR [ebp-0x1f],0x5
c0017d8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d8d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d90:	8d 50 01             	lea    edx,[eax+0x1]
c0017d93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d96:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d99:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017d9d:	e9 f7 0c 00 00       	jmp    c0018a99 <Vm::faultHandler(regs*)+0xe3a>
c0017da2:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0017da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017da9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017dac:	8d 50 01             	lea    edx,[eax+0x1]
c0017daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017db2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017db5:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017db9:	e9 db 0c 00 00       	jmp    c0018a99 <Vm::faultHandler(regs*)+0xe3a>
c0017dbe:	c6 45 e2 01          	mov    BYTE PTR [ebp-0x1e],0x1
c0017dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dc5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017dc8:	8d 50 01             	lea    edx,[eax+0x1]
c0017dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017dd1:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017dd5:	e9 bf 0c 00 00       	jmp    c0018a99 <Vm::faultHandler(regs*)+0xe3a>
c0017dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ddd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017de0:	8d 50 01             	lea    edx,[eax+0x1]
c0017de3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017de6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017de9:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017ded:	e9 a7 0c 00 00       	jmp    c0018a99 <Vm::faultHandler(regs*)+0xe3a>
c0017df2:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0017df6:	85 c0                	test   eax,eax
c0017df8:	74 5b                	je     c0017e55 <Vm::faultHandler(regs*)+0x1f6>
c0017dfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dfd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017e00:	83 e8 04             	sub    eax,0x4
c0017e03:	0f b7 d0             	movzx  edx,ax
c0017e06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e09:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017e0c:	83 6d d0 04          	sub    DWORD PTR [ebp-0x30],0x4
c0017e10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017e16:	25 ff 0d 00 00       	and    eax,0xdff
c0017e1b:	89 c2                	mov    edx,eax
c0017e1d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017e20:	89 10                	mov    DWORD PTR [eax],edx
c0017e22:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e27:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e29:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017e2c:	0f b6 c0             	movzx  eax,al
c0017e2f:	85 c0                	test   eax,eax
c0017e31:	74 11                	je     c0017e44 <Vm::faultHandler(regs*)+0x1e5>
c0017e33:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017e36:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e38:	80 cc 02             	or     ah,0x2
c0017e3b:	89 c2                	mov    edx,eax
c0017e3d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017e40:	89 10                	mov    DWORD PTR [eax],edx
c0017e42:	eb 64                	jmp    c0017ea8 <Vm::faultHandler(regs*)+0x249>
c0017e44:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017e47:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e49:	80 e4 fd             	and    ah,0xfd
c0017e4c:	89 c2                	mov    edx,eax
c0017e4e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017e51:	89 10                	mov    DWORD PTR [eax],edx
c0017e53:	eb 53                	jmp    c0017ea8 <Vm::faultHandler(regs*)+0x249>
c0017e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e58:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017e5b:	83 e8 02             	sub    eax,0x2
c0017e5e:	0f b7 d0             	movzx  edx,ax
c0017e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e64:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017e67:	83 6d d4 02          	sub    DWORD PTR [ebp-0x2c],0x2
c0017e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e6e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017e71:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0017e74:	66 89 02             	mov    WORD PTR [edx],ax
c0017e77:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e7e:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017e81:	0f b6 c0             	movzx  eax,al
c0017e84:	85 c0                	test   eax,eax
c0017e86:	74 11                	je     c0017e99 <Vm::faultHandler(regs*)+0x23a>
c0017e88:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017e8b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017e8e:	80 cc 02             	or     ah,0x2
c0017e91:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0017e94:	66 89 02             	mov    WORD PTR [edx],ax
c0017e97:	eb 0f                	jmp    c0017ea8 <Vm::faultHandler(regs*)+0x249>
c0017e99:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017e9c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017e9f:	80 e4 fd             	and    ah,0xfd
c0017ea2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0017ea5:	66 89 02             	mov    WORD PTR [edx],ax
c0017ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017eae:	8d 50 01             	lea    edx,[eax+0x1]
c0017eb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eb4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017eb7:	b0 01                	mov    al,0x1
c0017eb9:	e9 e0 0b 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c0017ebe:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0017ec2:	85 c0                	test   eax,eax
c0017ec4:	74 46                	je     c0017f0c <Vm::faultHandler(regs*)+0x2ad>
c0017ec6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017ec9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ecb:	25 ff 0d 00 00       	and    eax,0xdff
c0017ed0:	0d 00 02 02 00       	or     eax,0x20200
c0017ed5:	89 c2                	mov    edx,eax
c0017ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eda:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0017edd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017ee0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ee2:	25 00 02 00 00       	and    eax,0x200
c0017ee7:	89 c2                	mov    edx,eax
c0017ee9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017eee:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ef0:	85 d2                	test   edx,edx
c0017ef2:	0f 95 c2             	setne  dl
c0017ef5:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0017ef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017efb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017efe:	83 c0 04             	add    eax,0x4
c0017f01:	0f b7 d0             	movzx  edx,ax
c0017f04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f07:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017f0a:	eb 47                	jmp    c0017f53 <Vm::faultHandler(regs*)+0x2f4>
c0017f0c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017f0f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017f12:	0f b7 c0             	movzx  eax,ax
c0017f15:	0d 00 02 02 00       	or     eax,0x20200
c0017f1a:	89 c2                	mov    edx,eax
c0017f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f1f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0017f22:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017f25:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017f28:	0f b7 c0             	movzx  eax,ax
c0017f2b:	25 00 02 00 00       	and    eax,0x200
c0017f30:	89 c2                	mov    edx,eax
c0017f32:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017f37:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f39:	85 d2                	test   edx,edx
c0017f3b:	0f 95 c2             	setne  dl
c0017f3e:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0017f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f44:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017f47:	83 c0 02             	add    eax,0x2
c0017f4a:	0f b7 d0             	movzx  edx,ax
c0017f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f50:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f56:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f59:	8d 50 01             	lea    edx,[eax+0x1]
c0017f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f5f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f62:	b0 01                	mov    al,0x1
c0017f64:	e9 35 0b 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c0017f69:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017f6c:	83 c0 01             	add    eax,0x1
c0017f6f:	8a 00                	mov    al,BYTE PTR [eax]
c0017f71:	0f b6 c0             	movzx  eax,al
c0017f74:	3d ee 00 00 00       	cmp    eax,0xee
c0017f79:	75 19                	jne    c0017f94 <Vm::faultHandler(regs*)+0x335>
c0017f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f7e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0017f81:	83 ec 0c             	sub    esp,0xc
c0017f84:	50                   	push   eax
c0017f85:	e8 ec f3 ff ff       	call   c0017376 <Vm::mainloop3(unsigned long)>
c0017f8a:	83 c4 10             	add    esp,0x10
c0017f8d:	b0 01                	mov    al,0x1
c0017f8f:	e9 0a 0b 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c0017f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f97:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017f9a:	0f b7 c8             	movzx  ecx,ax
c0017f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fa0:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017fa3:	0f b7 d0             	movzx  edx,ax
c0017fa6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017fa9:	83 c0 01             	add    eax,0x1
c0017fac:	8a 00                	mov    al,BYTE PTR [eax]
c0017fae:	0f b6 c0             	movzx  eax,al
c0017fb1:	83 ec 0c             	sub    esp,0xc
c0017fb4:	51                   	push   ecx
c0017fb5:	52                   	push   edx
c0017fb6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0017fb9:	50                   	push   eax
c0017fba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017fbd:	e8 8a f8 ff ff       	call   c001784c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017fc2:	83 c4 20             	add    esp,0x20
c0017fc5:	b0 01                	mov    al,0x1
c0017fc7:	e9 d2 0a 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c0017fcc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017fd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fd3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fda:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017fdd:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fe3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017fe6:	b0 01                	mov    al,0x1
c0017fe8:	e9 b1 0a 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c0017fed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ff2:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ff4:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0017ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ffb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ffe:	8d 50 01             	lea    edx,[eax+0x1]
c0018001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018004:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018007:	b0 01                	mov    al,0x1
c0018009:	e9 90 0a 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c001800e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018011:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0018014:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0018017:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
c001801a:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c001801d:	8a 00                	mov    al,BYTE PTR [eax]
c001801f:	0f b6 c0             	movzx  eax,al
c0018022:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c0018025:	83 c2 01             	add    edx,0x1
c0018028:	8a 12                	mov    dl,BYTE PTR [edx]
c001802a:	0f b6 d2             	movzx  edx,dl
c001802d:	c1 e2 08             	shl    edx,0x8
c0018030:	09 d0                	or     eax,edx
c0018032:	0f b7 d0             	movzx  edx,ax
c0018035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018038:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001803b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001803e:	83 c0 02             	add    eax,0x2
c0018041:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0018044:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0018047:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c001804a:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c001804d:	8a 00                	mov    al,BYTE PTR [eax]
c001804f:	0f b6 c0             	movzx  eax,al
c0018052:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c0018055:	83 c2 01             	add    edx,0x1
c0018058:	8a 12                	mov    dl,BYTE PTR [edx]
c001805a:	0f b6 d2             	movzx  edx,dl
c001805d:	c1 e2 08             	shl    edx,0x8
c0018060:	09 d0                	or     eax,edx
c0018062:	0f b7 d0             	movzx  edx,ax
c0018065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018068:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001806b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001806e:	83 c0 04             	add    eax,0x4
c0018071:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
c0018074:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0018077:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
c001807a:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c001807d:	8a 00                	mov    al,BYTE PTR [eax]
c001807f:	0f b6 c0             	movzx  eax,al
c0018082:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c0018085:	83 c2 01             	add    edx,0x1
c0018088:	8a 12                	mov    dl,BYTE PTR [edx]
c001808a:	0f b6 d2             	movzx  edx,dl
c001808d:	c1 e2 08             	shl    edx,0x8
c0018090:	09 d0                	or     eax,edx
c0018092:	0f b7 c0             	movzx  eax,ax
c0018095:	0d 00 02 02 00       	or     eax,0x20200
c001809a:	89 c2                	mov    edx,eax
c001809c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001809f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00180a2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00180a5:	83 c0 04             	add    eax,0x4
c00180a8:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c00180ab:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00180ae:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c00180b1:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00180b4:	8a 00                	mov    al,BYTE PTR [eax]
c00180b6:	0f b6 c0             	movzx  eax,al
c00180b9:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c00180bc:	83 c2 01             	add    edx,0x1
c00180bf:	8a 12                	mov    dl,BYTE PTR [edx]
c00180c1:	0f b6 d2             	movzx  edx,dl
c00180c4:	c1 e2 08             	shl    edx,0x8
c00180c7:	09 d0                	or     eax,edx
c00180c9:	0f b7 c0             	movzx  eax,ax
c00180cc:	25 00 02 00 00       	and    eax,0x200
c00180d1:	89 c2                	mov    edx,eax
c00180d3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00180d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00180da:	85 d2                	test   edx,edx
c00180dc:	0f 95 c2             	setne  dl
c00180df:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c00180e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180e5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00180e8:	83 c0 06             	add    eax,0x6
c00180eb:	0f b7 d0             	movzx  edx,ax
c00180ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180f1:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00180f4:	b0 01                	mov    al,0x1
c00180f6:	e9 a3 09 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c00180fb:	66 c7 45 ca 00 00    	mov    WORD PTR [ebp-0x36],0x0
c0018101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018104:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018107:	66 89 45 ca          	mov    WORD PTR [ebp-0x36],ax
c001810b:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c001810f:	85 c0                	test   eax,eax
c0018111:	74 7a                	je     c001818d <Vm::faultHandler(regs*)+0x52e>
c0018113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018116:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018119:	3d ff ff 00 00       	cmp    eax,0xffff
c001811e:	76 6d                	jbe    c001818d <Vm::faultHandler(regs*)+0x52e>
c0018120:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018123:	83 c0 05             	add    eax,0x5
c0018126:	8a 00                	mov    al,BYTE PTR [eax]
c0018128:	0f b6 c0             	movzx  eax,al
c001812b:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018131:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018134:	83 c0 04             	add    eax,0x4
c0018137:	8a 00                	mov    al,BYTE PTR [eax]
c0018139:	0f b6 f8             	movzx  edi,al
c001813c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001813f:	83 c0 03             	add    eax,0x3
c0018142:	8a 00                	mov    al,BYTE PTR [eax]
c0018144:	0f b6 f0             	movzx  esi,al
c0018147:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001814a:	83 c0 02             	add    eax,0x2
c001814d:	8a 00                	mov    al,BYTE PTR [eax]
c001814f:	0f b6 d8             	movzx  ebx,al
c0018152:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018155:	83 c0 01             	add    eax,0x1
c0018158:	8a 00                	mov    al,BYTE PTR [eax]
c001815a:	0f b6 c8             	movzx  ecx,al
c001815d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018160:	8a 00                	mov    al,BYTE PTR [eax]
c0018162:	0f b6 d0             	movzx  edx,al
c0018165:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018168:	8a 00                	mov    al,BYTE PTR [eax]
c001816a:	0f b6 c0             	movzx  eax,al
c001816d:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018173:	57                   	push   edi
c0018174:	56                   	push   esi
c0018175:	53                   	push   ebx
c0018176:	51                   	push   ecx
c0018177:	52                   	push   edx
c0018178:	50                   	push   eax
c0018179:	68 48 8c 02 c0       	push   0xc0028c48
c001817e:	e8 f9 ed fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018183:	83 c4 20             	add    esp,0x20
c0018186:	b0 00                	mov    al,0x0
c0018188:	e9 11 09 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c001818d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018190:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018193:	0f b7 c0             	movzx  eax,ax
c0018196:	83 ec 0c             	sub    esp,0xc
c0018199:	50                   	push   eax
c001819a:	e8 6e f0 ff ff       	call   c001720d <Vm::inbv(unsigned short)>
c001819f:	83 c4 10             	add    esp,0x10
c00181a2:	0f b6 c8             	movzx  ecx,al
c00181a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181ab:	0f b7 d0             	movzx  edx,ax
c00181ae:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
c00181b2:	83 ec 04             	sub    esp,0x4
c00181b5:	51                   	push   ecx
c00181b6:	52                   	push   edx
c00181b7:	50                   	push   eax
c00181b8:	e8 8d f9 ff ff       	call   c0017b4a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00181bd:	83 c4 10             	add    esp,0x10
c00181c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00181c6:	25 00 04 00 00       	and    eax,0x400
c00181cb:	85 c0                	test   eax,eax
c00181cd:	74 14                	je     c00181e3 <Vm::faultHandler(regs*)+0x584>
c00181cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181d5:	83 e8 01             	sub    eax,0x1
c00181d8:	0f b7 d0             	movzx  edx,ax
c00181db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00181e1:	eb 12                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x596>
c00181e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181e9:	83 c0 01             	add    eax,0x1
c00181ec:	0f b7 d0             	movzx  edx,ax
c00181ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181f2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00181f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181f8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00181fb:	8d 50 01             	lea    edx,[eax+0x1]
c00181fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018201:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018204:	b0 01                	mov    al,0x1
c0018206:	e9 93 08 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c001820b:	66 c7 45 c8 00 00    	mov    WORD PTR [ebp-0x38],0x0
c0018211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018214:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018217:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c001821b:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c001821f:	85 c0                	test   eax,eax
c0018221:	74 7a                	je     c001829d <Vm::faultHandler(regs*)+0x63e>
c0018223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018226:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018229:	3d ff ff 00 00       	cmp    eax,0xffff
c001822e:	76 6d                	jbe    c001829d <Vm::faultHandler(regs*)+0x63e>
c0018230:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018233:	83 c0 05             	add    eax,0x5
c0018236:	8a 00                	mov    al,BYTE PTR [eax]
c0018238:	0f b6 c0             	movzx  eax,al
c001823b:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018241:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018244:	83 c0 04             	add    eax,0x4
c0018247:	8a 00                	mov    al,BYTE PTR [eax]
c0018249:	0f b6 f8             	movzx  edi,al
c001824c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001824f:	83 c0 03             	add    eax,0x3
c0018252:	8a 00                	mov    al,BYTE PTR [eax]
c0018254:	0f b6 f0             	movzx  esi,al
c0018257:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001825a:	83 c0 02             	add    eax,0x2
c001825d:	8a 00                	mov    al,BYTE PTR [eax]
c001825f:	0f b6 d8             	movzx  ebx,al
c0018262:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018265:	83 c0 01             	add    eax,0x1
c0018268:	8a 00                	mov    al,BYTE PTR [eax]
c001826a:	0f b6 c8             	movzx  ecx,al
c001826d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018270:	8a 00                	mov    al,BYTE PTR [eax]
c0018272:	0f b6 d0             	movzx  edx,al
c0018275:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018278:	8a 00                	mov    al,BYTE PTR [eax]
c001827a:	0f b6 c0             	movzx  eax,al
c001827d:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018283:	57                   	push   edi
c0018284:	56                   	push   esi
c0018285:	53                   	push   ebx
c0018286:	51                   	push   ecx
c0018287:	52                   	push   edx
c0018288:	50                   	push   eax
c0018289:	68 48 8c 02 c0       	push   0xc0028c48
c001828e:	e8 e9 ec fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018293:	83 c4 20             	add    esp,0x20
c0018296:	b0 00                	mov    al,0x0
c0018298:	e9 01 08 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c001829d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00182a1:	85 c0                	test   eax,eax
c00182a3:	74 6f                	je     c0018314 <Vm::faultHandler(regs*)+0x6b5>
c00182a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182a8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00182ab:	0f b7 c0             	movzx  eax,ax
c00182ae:	66 89 45 a6          	mov    WORD PTR [ebp-0x5a],ax
c00182b2:	66 8b 45 a6          	mov    ax,WORD PTR [ebp-0x5a]
c00182b6:	89 c2                	mov    edx,eax
c00182b8:	ed                   	in     eax,dx
c00182b9:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
c00182bc:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
c00182bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182c5:	0f b7 d0             	movzx  edx,ax
c00182c8:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c00182cc:	83 ec 04             	sub    esp,0x4
c00182cf:	51                   	push   ecx
c00182d0:	52                   	push   edx
c00182d1:	50                   	push   eax
c00182d2:	e8 31 f9 ff ff       	call   c0017c08 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00182d7:	83 c4 10             	add    esp,0x10
c00182da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00182e0:	25 00 04 00 00       	and    eax,0x400
c00182e5:	85 c0                	test   eax,eax
c00182e7:	74 17                	je     c0018300 <Vm::faultHandler(regs*)+0x6a1>
c00182e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182ef:	83 e8 04             	sub    eax,0x4
c00182f2:	0f b7 d0             	movzx  edx,ax
c00182f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00182fb:	e9 83 00 00 00       	jmp    c0018383 <Vm::faultHandler(regs*)+0x724>
c0018300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018303:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018306:	83 c0 04             	add    eax,0x4
c0018309:	0f b7 d0             	movzx  edx,ax
c001830c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001830f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018312:	eb 6f                	jmp    c0018383 <Vm::faultHandler(regs*)+0x724>
c0018314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018317:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001831a:	0f b7 c0             	movzx  eax,ax
c001831d:	66 89 45 9e          	mov    WORD PTR [ebp-0x62],ax
c0018321:	66 8b 45 9e          	mov    ax,WORD PTR [ebp-0x62]
c0018325:	89 c2                	mov    edx,eax
c0018327:	66 ed                	in     ax,dx
c0018329:	66 89 45 9c          	mov    WORD PTR [ebp-0x64],ax
c001832d:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
c0018330:	0f b7 c8             	movzx  ecx,ax
c0018333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018336:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018339:	0f b7 d0             	movzx  edx,ax
c001833c:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018340:	83 ec 04             	sub    esp,0x4
c0018343:	51                   	push   ecx
c0018344:	52                   	push   edx
c0018345:	50                   	push   eax
c0018346:	e8 5e f8 ff ff       	call   c0017ba9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001834b:	83 c4 10             	add    esp,0x10
c001834e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018351:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018354:	25 00 04 00 00       	and    eax,0x400
c0018359:	85 c0                	test   eax,eax
c001835b:	74 14                	je     c0018371 <Vm::faultHandler(regs*)+0x712>
c001835d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018360:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018363:	83 e8 02             	sub    eax,0x2
c0018366:	0f b7 d0             	movzx  edx,ax
c0018369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001836c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001836f:	eb 12                	jmp    c0018383 <Vm::faultHandler(regs*)+0x724>
c0018371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018374:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018377:	83 c0 02             	add    eax,0x2
c001837a:	0f b7 d0             	movzx  edx,ax
c001837d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018380:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018386:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018389:	8d 50 01             	lea    edx,[eax+0x1]
c001838c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001838f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018392:	b0 01                	mov    al,0x1
c0018394:	e9 05 07 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c0018399:	66 c7 45 de 00 00    	mov    WORD PTR [ebp-0x22],0x0
c001839f:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c00183a3:	83 f8 06             	cmp    eax,0x6
c00183a6:	77 4f                	ja     c00183f7 <Vm::faultHandler(regs*)+0x798>
c00183a8:	8b 04 85 00 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7000]
c00183af:	ff e0                	jmp    eax
c00183b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00183b7:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00183bb:	eb 3a                	jmp    c00183f7 <Vm::faultHandler(regs*)+0x798>
c00183bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00183c3:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00183c7:	eb 2e                	jmp    c00183f7 <Vm::faultHandler(regs*)+0x798>
c00183c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00183cf:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00183d3:	eb 22                	jmp    c00183f7 <Vm::faultHandler(regs*)+0x798>
c00183d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183db:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00183df:	eb 16                	jmp    c00183f7 <Vm::faultHandler(regs*)+0x798>
c00183e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00183e6:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00183ea:	eb 0b                	jmp    c00183f7 <Vm::faultHandler(regs*)+0x798>
c00183ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183ef:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c00183f2:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00183f6:	90                   	nop
c00183f7:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c00183fb:	85 c0                	test   eax,eax
c00183fd:	74 7a                	je     c0018479 <Vm::faultHandler(regs*)+0x81a>
c00183ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018402:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018405:	3d ff ff 00 00       	cmp    eax,0xffff
c001840a:	76 6d                	jbe    c0018479 <Vm::faultHandler(regs*)+0x81a>
c001840c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001840f:	83 c0 05             	add    eax,0x5
c0018412:	8a 00                	mov    al,BYTE PTR [eax]
c0018414:	0f b6 c0             	movzx  eax,al
c0018417:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c001841d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018420:	83 c0 04             	add    eax,0x4
c0018423:	8a 00                	mov    al,BYTE PTR [eax]
c0018425:	0f b6 f8             	movzx  edi,al
c0018428:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001842b:	83 c0 03             	add    eax,0x3
c001842e:	8a 00                	mov    al,BYTE PTR [eax]
c0018430:	0f b6 f0             	movzx  esi,al
c0018433:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018436:	83 c0 02             	add    eax,0x2
c0018439:	8a 00                	mov    al,BYTE PTR [eax]
c001843b:	0f b6 d8             	movzx  ebx,al
c001843e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018441:	83 c0 01             	add    eax,0x1
c0018444:	8a 00                	mov    al,BYTE PTR [eax]
c0018446:	0f b6 c8             	movzx  ecx,al
c0018449:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001844c:	8a 00                	mov    al,BYTE PTR [eax]
c001844e:	0f b6 d0             	movzx  edx,al
c0018451:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018454:	8a 00                	mov    al,BYTE PTR [eax]
c0018456:	0f b6 c0             	movzx  eax,al
c0018459:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c001845f:	57                   	push   edi
c0018460:	56                   	push   esi
c0018461:	53                   	push   ebx
c0018462:	51                   	push   ecx
c0018463:	52                   	push   edx
c0018464:	50                   	push   eax
c0018465:	68 48 8c 02 c0       	push   0xc0028c48
c001846a:	e8 0d eb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001846f:	83 c4 20             	add    esp,0x20
c0018472:	b0 00                	mov    al,0x0
c0018474:	e9 25 06 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c0018479:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001847c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001847f:	0f b7 d0             	movzx  edx,ax
c0018482:	0f b7 45 de          	movzx  eax,WORD PTR [ebp-0x22]
c0018486:	83 ec 08             	sub    esp,0x8
c0018489:	52                   	push   edx
c001848a:	50                   	push   eax
c001848b:	e8 c0 f5 ff ff       	call   c0017a50 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018490:	83 c4 10             	add    esp,0x10
c0018493:	0f b6 d0             	movzx  edx,al
c0018496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018499:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001849c:	0f b7 c0             	movzx  eax,ax
c001849f:	83 ec 08             	sub    esp,0x8
c00184a2:	52                   	push   edx
c00184a3:	50                   	push   eax
c00184a4:	e8 9b ed ff ff       	call   c0017244 <Vm::outbv(unsigned short, unsigned char)>
c00184a9:	83 c4 10             	add    esp,0x10
c00184ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00184b2:	25 00 04 00 00       	and    eax,0x400
c00184b7:	85 c0                	test   eax,eax
c00184b9:	74 14                	je     c00184cf <Vm::faultHandler(regs*)+0x870>
c00184bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184be:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00184c1:	83 e8 01             	sub    eax,0x1
c00184c4:	0f b7 d0             	movzx  edx,ax
c00184c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184ca:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00184cd:	eb 12                	jmp    c00184e1 <Vm::faultHandler(regs*)+0x882>
c00184cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184d2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00184d5:	83 c0 01             	add    eax,0x1
c00184d8:	0f b7 d0             	movzx  edx,ax
c00184db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184de:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00184e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00184e7:	8d 50 01             	lea    edx,[eax+0x1]
c00184ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00184f0:	b0 01                	mov    al,0x1
c00184f2:	e9 a7 05 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c00184f7:	66 c7 45 dc 00 00    	mov    WORD PTR [ebp-0x24],0x0
c00184fd:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c0018501:	83 f8 06             	cmp    eax,0x6
c0018504:	77 4f                	ja     c0018555 <Vm::faultHandler(regs*)+0x8f6>
c0018506:	8b 04 85 1c 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe4]
c001850d:	ff e0                	jmp    eax
c001850f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018512:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018515:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018519:	eb 3a                	jmp    c0018555 <Vm::faultHandler(regs*)+0x8f6>
c001851b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001851e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018521:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018525:	eb 2e                	jmp    c0018555 <Vm::faultHandler(regs*)+0x8f6>
c0018527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001852a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001852d:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018531:	eb 22                	jmp    c0018555 <Vm::faultHandler(regs*)+0x8f6>
c0018533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018536:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018539:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c001853d:	eb 16                	jmp    c0018555 <Vm::faultHandler(regs*)+0x8f6>
c001853f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018542:	8b 00                	mov    eax,DWORD PTR [eax]
c0018544:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018548:	eb 0b                	jmp    c0018555 <Vm::faultHandler(regs*)+0x8f6>
c001854a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001854d:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018550:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018554:	90                   	nop
c0018555:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018559:	85 c0                	test   eax,eax
c001855b:	74 7a                	je     c00185d7 <Vm::faultHandler(regs*)+0x978>
c001855d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018560:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018563:	3d ff ff 00 00       	cmp    eax,0xffff
c0018568:	76 6d                	jbe    c00185d7 <Vm::faultHandler(regs*)+0x978>
c001856a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001856d:	83 c0 05             	add    eax,0x5
c0018570:	8a 00                	mov    al,BYTE PTR [eax]
c0018572:	0f b6 c0             	movzx  eax,al
c0018575:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c001857b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001857e:	83 c0 04             	add    eax,0x4
c0018581:	8a 00                	mov    al,BYTE PTR [eax]
c0018583:	0f b6 f8             	movzx  edi,al
c0018586:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018589:	83 c0 03             	add    eax,0x3
c001858c:	8a 00                	mov    al,BYTE PTR [eax]
c001858e:	0f b6 f0             	movzx  esi,al
c0018591:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018594:	83 c0 02             	add    eax,0x2
c0018597:	8a 00                	mov    al,BYTE PTR [eax]
c0018599:	0f b6 d8             	movzx  ebx,al
c001859c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001859f:	83 c0 01             	add    eax,0x1
c00185a2:	8a 00                	mov    al,BYTE PTR [eax]
c00185a4:	0f b6 c8             	movzx  ecx,al
c00185a7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00185aa:	8a 00                	mov    al,BYTE PTR [eax]
c00185ac:	0f b6 d0             	movzx  edx,al
c00185af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00185b2:	8a 00                	mov    al,BYTE PTR [eax]
c00185b4:	0f b6 c0             	movzx  eax,al
c00185b7:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00185bd:	57                   	push   edi
c00185be:	56                   	push   esi
c00185bf:	53                   	push   ebx
c00185c0:	51                   	push   ecx
c00185c1:	52                   	push   edx
c00185c2:	50                   	push   eax
c00185c3:	68 48 8c 02 c0       	push   0xc0028c48
c00185c8:	e8 af e9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00185cd:	83 c4 20             	add    esp,0x20
c00185d0:	b0 00                	mov    al,0x0
c00185d2:	e9 c7 04 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c00185d7:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00185db:	85 c0                	test   eax,eax
c00185dd:	74 6e                	je     c001864d <Vm::faultHandler(regs*)+0x9ee>
c00185df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185e2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00185e5:	0f b7 d0             	movzx  edx,ax
c00185e8:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c00185ec:	83 ec 08             	sub    esp,0x8
c00185ef:	52                   	push   edx
c00185f0:	50                   	push   eax
c00185f1:	e8 01 f5 ff ff       	call   c0017af7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00185f6:	83 c4 10             	add    esp,0x10
c00185f9:	89 c2                	mov    edx,eax
c00185fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185fe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018601:	0f b7 c0             	movzx  eax,ax
c0018604:	66 89 45 9a          	mov    WORD PTR [ebp-0x66],ax
c0018608:	89 55 94             	mov    DWORD PTR [ebp-0x6c],edx
c001860b:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
c001860e:	66 8b 55 9a          	mov    dx,WORD PTR [ebp-0x66]
c0018612:	ef                   	out    dx,eax
c0018613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018616:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018619:	25 00 04 00 00       	and    eax,0x400
c001861e:	85 c0                	test   eax,eax
c0018620:	74 17                	je     c0018639 <Vm::faultHandler(regs*)+0x9da>
c0018622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018625:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018628:	83 e8 04             	sub    eax,0x4
c001862b:	0f b7 d0             	movzx  edx,ax
c001862e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018631:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018634:	e9 80 00 00 00       	jmp    c00186b9 <Vm::faultHandler(regs*)+0xa5a>
c0018639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001863c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001863f:	83 c0 04             	add    eax,0x4
c0018642:	0f b7 d0             	movzx  edx,ax
c0018645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018648:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001864b:	eb 6c                	jmp    c00186b9 <Vm::faultHandler(regs*)+0xa5a>
c001864d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018650:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018653:	0f b7 d0             	movzx  edx,ax
c0018656:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c001865a:	83 ec 08             	sub    esp,0x8
c001865d:	52                   	push   edx
c001865e:	50                   	push   eax
c001865f:	e8 3f f4 ff ff       	call   c0017aa3 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018664:	83 c4 10             	add    esp,0x10
c0018667:	0f b7 c0             	movzx  eax,ax
c001866a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001866d:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018670:	0f b7 d2             	movzx  edx,dx
c0018673:	66 89 55 92          	mov    WORD PTR [ebp-0x6e],dx
c0018677:	66 89 45 90          	mov    WORD PTR [ebp-0x70],ax
c001867b:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
c001867e:	66 8b 55 92          	mov    dx,WORD PTR [ebp-0x6e]
c0018682:	66 ef                	out    dx,ax
c0018684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018687:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001868a:	25 00 04 00 00       	and    eax,0x400
c001868f:	85 c0                	test   eax,eax
c0018691:	74 14                	je     c00186a7 <Vm::faultHandler(regs*)+0xa48>
c0018693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018696:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018699:	83 e8 02             	sub    eax,0x2
c001869c:	0f b7 d0             	movzx  edx,ax
c001869f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186a2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00186a5:	eb 12                	jmp    c00186b9 <Vm::faultHandler(regs*)+0xa5a>
c00186a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186aa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00186ad:	83 c0 02             	add    eax,0x2
c00186b0:	0f b7 d0             	movzx  edx,ax
c00186b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186b6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00186b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00186bf:	8d 50 01             	lea    edx,[eax+0x1]
c00186c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00186c8:	b0 01                	mov    al,0x1
c00186ca:	e9 cf 03 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c00186cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186d2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00186d5:	b0 00                	mov    al,0x0
c00186d7:	89 c2                	mov    edx,eax
c00186d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186dc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00186df:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00186e2:	83 c0 01             	add    eax,0x1
c00186e5:	8a 00                	mov    al,BYTE PTR [eax]
c00186e7:	0f b6 c0             	movzx  eax,al
c00186ea:	83 ec 0c             	sub    esp,0xc
c00186ed:	50                   	push   eax
c00186ee:	e8 1a eb ff ff       	call   c001720d <Vm::inbv(unsigned short)>
c00186f3:	83 c4 10             	add    esp,0x10
c00186f6:	88 c1                	mov    cl,al
c00186f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186fb:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00186fe:	0f b6 c1             	movzx  eax,cl
c0018701:	09 c2                	or     edx,eax
c0018703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018706:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001870c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001870f:	8d 50 02             	lea    edx,[eax+0x2]
c0018712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018715:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018718:	b0 01                	mov    al,0x1
c001871a:	e9 7f 03 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c001871f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018723:	85 c0                	test   eax,eax
c0018725:	74 24                	je     c001874b <Vm::faultHandler(regs*)+0xaec>
c0018727:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001872a:	83 c0 01             	add    eax,0x1
c001872d:	8a 00                	mov    al,BYTE PTR [eax]
c001872f:	0f b6 c0             	movzx  eax,al
c0018732:	66 89 45 8e          	mov    WORD PTR [ebp-0x72],ax
c0018736:	66 8b 45 8e          	mov    ax,WORD PTR [ebp-0x72]
c001873a:	89 c2                	mov    edx,eax
c001873c:	ed                   	in     eax,dx
c001873d:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
c0018740:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
c0018743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018746:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018749:	eb 42                	jmp    c001878d <Vm::faultHandler(regs*)+0xb2e>
c001874b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001874e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018751:	25 00 00 ff ff       	and    eax,0xffff0000
c0018756:	89 c2                	mov    edx,eax
c0018758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001875b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001875e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018761:	83 c0 01             	add    eax,0x1
c0018764:	8a 00                	mov    al,BYTE PTR [eax]
c0018766:	0f b6 c0             	movzx  eax,al
c0018769:	66 89 45 86          	mov    WORD PTR [ebp-0x7a],ax
c001876d:	66 8b 45 86          	mov    ax,WORD PTR [ebp-0x7a]
c0018771:	89 c2                	mov    edx,eax
c0018773:	66 ed                	in     ax,dx
c0018775:	66 89 45 84          	mov    WORD PTR [ebp-0x7c],ax
c0018779:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
c001877c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001877f:	8b 52 2c             	mov    edx,DWORD PTR [edx+0x2c]
c0018782:	0f b7 c0             	movzx  eax,ax
c0018785:	09 c2                	or     edx,eax
c0018787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001878a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001878d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018790:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018793:	8d 50 02             	lea    edx,[eax+0x2]
c0018796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018799:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001879c:	b0 01                	mov    al,0x1
c001879e:	e9 fb 02 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c00187a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187a6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00187a9:	0f b6 d0             	movzx  edx,al
c00187ac:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00187af:	83 c0 01             	add    eax,0x1
c00187b2:	8a 00                	mov    al,BYTE PTR [eax]
c00187b4:	0f b6 c0             	movzx  eax,al
c00187b7:	83 ec 08             	sub    esp,0x8
c00187ba:	52                   	push   edx
c00187bb:	50                   	push   eax
c00187bc:	e8 83 ea ff ff       	call   c0017244 <Vm::outbv(unsigned short, unsigned char)>
c00187c1:	83 c4 10             	add    esp,0x10
c00187c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00187ca:	8d 50 02             	lea    edx,[eax+0x2]
c00187cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187d0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00187d3:	b0 01                	mov    al,0x1
c00187d5:	e9 c4 02 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c00187da:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00187de:	85 c0                	test   eax,eax
c00187e0:	74 28                	je     c001880a <Vm::faultHandler(regs*)+0xbab>
c00187e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187e5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00187e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00187eb:	83 c0 01             	add    eax,0x1
c00187ee:	8a 00                	mov    al,BYTE PTR [eax]
c00187f0:	0f b6 c0             	movzx  eax,al
c00187f3:	66 89 45 82          	mov    WORD PTR [ebp-0x7e],ax
c00187f7:	89 95 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],edx
c00187fd:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [ebp-0x84]
c0018803:	66 8b 55 82          	mov    dx,WORD PTR [ebp-0x7e]
c0018807:	ef                   	out    dx,eax
c0018808:	eb 31                	jmp    c001883b <Vm::faultHandler(regs*)+0xbdc>
c001880a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001880d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018810:	0f b7 c0             	movzx  eax,ax
c0018813:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018816:	83 c2 01             	add    edx,0x1
c0018819:	8a 12                	mov    dl,BYTE PTR [edx]
c001881b:	0f b6 d2             	movzx  edx,dl
c001881e:	66 89 95 7a ff ff ff 	mov    WORD PTR [ebp-0x86],dx
c0018825:	66 89 85 78 ff ff ff 	mov    WORD PTR [ebp-0x88],ax
c001882c:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [ebp-0x88]
c0018832:	66 8b 95 7a ff ff ff 	mov    dx,WORD PTR [ebp-0x86]
c0018839:	66 ef                	out    dx,ax
c001883b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001883e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018841:	8d 50 02             	lea    edx,[eax+0x2]
c0018844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018847:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001884a:	b0 01                	mov    al,0x1
c001884c:	e9 4d 02 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c0018851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018854:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018857:	b0 00                	mov    al,0x0
c0018859:	89 c2                	mov    edx,eax
c001885b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001885e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018864:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018867:	0f b7 c0             	movzx  eax,ax
c001886a:	83 ec 0c             	sub    esp,0xc
c001886d:	50                   	push   eax
c001886e:	e8 9a e9 ff ff       	call   c001720d <Vm::inbv(unsigned short)>
c0018873:	83 c4 10             	add    esp,0x10
c0018876:	88 c1                	mov    cl,al
c0018878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001887b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001887e:	0f b6 c1             	movzx  eax,cl
c0018881:	09 c2                	or     edx,eax
c0018883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018886:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018889:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001888c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001888f:	8d 50 01             	lea    edx,[eax+0x1]
c0018892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018895:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018898:	b0 01                	mov    al,0x1
c001889a:	e9 ff 01 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c001889f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00188a3:	85 c0                	test   eax,eax
c00188a5:	74 2e                	je     c00188d5 <Vm::faultHandler(regs*)+0xc76>
c00188a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188aa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00188ad:	0f b7 c0             	movzx  eax,ax
c00188b0:	66 89 85 76 ff ff ff 	mov    WORD PTR [ebp-0x8a],ax
c00188b7:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [ebp-0x8a]
c00188be:	89 c2                	mov    edx,eax
c00188c0:	ed                   	in     eax,dx
c00188c1:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
c00188c7:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [ebp-0x90]
c00188cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188d0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00188d3:	eb 4c                	jmp    c0018921 <Vm::faultHandler(regs*)+0xcc2>
c00188d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188d8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00188db:	25 00 00 ff ff       	and    eax,0xffff0000
c00188e0:	89 c2                	mov    edx,eax
c00188e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188e5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00188e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188eb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00188ee:	0f b7 c0             	movzx  eax,ax
c00188f1:	66 89 85 6e ff ff ff 	mov    WORD PTR [ebp-0x92],ax
c00188f8:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [ebp-0x92]
c00188ff:	89 c2                	mov    edx,eax
c0018901:	66 ed                	in     ax,dx
c0018903:	66 89 85 6c ff ff ff 	mov    WORD PTR [ebp-0x94],ax
c001890a:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [ebp-0x94]
c0018910:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018913:	8b 52 2c             	mov    edx,DWORD PTR [edx+0x2c]
c0018916:	0f b7 c0             	movzx  eax,ax
c0018919:	09 c2                	or     edx,eax
c001891b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001891e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018924:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018927:	8d 50 01             	lea    edx,[eax+0x1]
c001892a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001892d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018930:	b0 01                	mov    al,0x1
c0018932:	e9 67 01 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c0018937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001893a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001893d:	0f b6 d0             	movzx  edx,al
c0018940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018943:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018946:	0f b7 c0             	movzx  eax,ax
c0018949:	83 ec 08             	sub    esp,0x8
c001894c:	52                   	push   edx
c001894d:	50                   	push   eax
c001894e:	e8 f1 e8 ff ff       	call   c0017244 <Vm::outbv(unsigned short, unsigned char)>
c0018953:	83 c4 10             	add    esp,0x10
c0018956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018959:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001895c:	8d 50 01             	lea    edx,[eax+0x1]
c001895f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018962:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018965:	b0 01                	mov    al,0x1
c0018967:	e9 32 01 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c001896c:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018970:	85 c0                	test   eax,eax
c0018972:	74 2c                	je     c00189a0 <Vm::faultHandler(regs*)+0xd41>
c0018974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018977:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001897a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001897d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018980:	0f b7 c0             	movzx  eax,ax
c0018983:	66 89 85 6a ff ff ff 	mov    WORD PTR [ebp-0x96],ax
c001898a:	89 95 64 ff ff ff    	mov    DWORD PTR [ebp-0x9c],edx
c0018990:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
c0018996:	66 8b 95 6a ff ff ff 	mov    dx,WORD PTR [ebp-0x96]
c001899d:	ef                   	out    dx,eax
c001899e:	eb 2f                	jmp    c00189cf <Vm::faultHandler(regs*)+0xd70>
c00189a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189a3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00189a6:	0f b7 c0             	movzx  eax,ax
c00189a9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00189ac:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00189af:	0f b7 d2             	movzx  edx,dx
c00189b2:	66 89 95 62 ff ff ff 	mov    WORD PTR [ebp-0x9e],dx
c00189b9:	66 89 85 60 ff ff ff 	mov    WORD PTR [ebp-0xa0],ax
c00189c0:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [ebp-0xa0]
c00189c6:	66 8b 95 62 ff ff ff 	mov    dx,WORD PTR [ebp-0x9e]
c00189cd:	66 ef                	out    dx,ax
c00189cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00189d5:	8d 50 01             	lea    edx,[eax+0x1]
c00189d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189db:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00189de:	b0 01                	mov    al,0x1
c00189e0:	e9 b9 00 00 00       	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c00189e5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189e8:	83 c0 05             	add    eax,0x5
c00189eb:	8a 00                	mov    al,BYTE PTR [eax]
c00189ed:	0f b6 c0             	movzx  eax,al
c00189f0:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00189f6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189f9:	83 c0 04             	add    eax,0x4
c00189fc:	8a 00                	mov    al,BYTE PTR [eax]
c00189fe:	0f b6 f8             	movzx  edi,al
c0018a01:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a04:	83 c0 03             	add    eax,0x3
c0018a07:	8a 00                	mov    al,BYTE PTR [eax]
c0018a09:	0f b6 f0             	movzx  esi,al
c0018a0c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a0f:	83 c0 02             	add    eax,0x2
c0018a12:	8a 00                	mov    al,BYTE PTR [eax]
c0018a14:	0f b6 d8             	movzx  ebx,al
c0018a17:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a1a:	83 c0 01             	add    eax,0x1
c0018a1d:	8a 00                	mov    al,BYTE PTR [eax]
c0018a1f:	0f b6 c8             	movzx  ecx,al
c0018a22:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a25:	8a 00                	mov    al,BYTE PTR [eax]
c0018a27:	0f b6 d0             	movzx  edx,al
c0018a2a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a2d:	8a 00                	mov    al,BYTE PTR [eax]
c0018a2f:	0f b6 c0             	movzx  eax,al
c0018a32:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018a38:	57                   	push   edi
c0018a39:	56                   	push   esi
c0018a3a:	53                   	push   ebx
c0018a3b:	51                   	push   ecx
c0018a3c:	52                   	push   edx
c0018a3d:	50                   	push   eax
c0018a3e:	68 78 8c 02 c0       	push   0xc0028c78
c0018a43:	e8 34 e5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018a48:	83 c4 20             	add    esp,0x20
c0018a4b:	83 ec 0c             	sub    esp,0xc
c0018a4e:	6a 60                	push   0x60
c0018a50:	e8 b8 e7 ff ff       	call   c001720d <Vm::inbv(unsigned short)>
c0018a55:	83 c4 10             	add    esp,0x10
c0018a58:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0018a5b:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018a5f:	83 f8 1c             	cmp    eax,0x1c
c0018a62:	74 09                	je     c0018a6d <Vm::faultHandler(regs*)+0xe0e>
c0018a64:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018a68:	83 f8 5a             	cmp    eax,0x5a
c0018a6b:	75 24                	jne    c0018a91 <Vm::faultHandler(regs*)+0xe32>
c0018a6d:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018a71:	83 f8 1c             	cmp    eax,0x1c
c0018a74:	74 09                	je     c0018a7f <Vm::faultHandler(regs*)+0xe20>
c0018a76:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018a7a:	83 f8 5a             	cmp    eax,0x5a
c0018a7d:	75 15                	jne    c0018a94 <Vm::faultHandler(regs*)+0xe35>
c0018a7f:	83 ec 0c             	sub    esp,0xc
c0018a82:	6a 60                	push   0x60
c0018a84:	e8 84 e7 ff ff       	call   c001720d <Vm::inbv(unsigned short)>
c0018a89:	83 c4 10             	add    esp,0x10
c0018a8c:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0018a8f:	eb dc                	jmp    c0018a6d <Vm::faultHandler(regs*)+0xe0e>
c0018a91:	90                   	nop
c0018a92:	eb b7                	jmp    c0018a4b <Vm::faultHandler(regs*)+0xdec>
c0018a94:	90                   	nop
c0018a95:	b0 00                	mov    al,0x0
c0018a97:	eb 05                	jmp    c0018a9e <Vm::faultHandler(regs*)+0xe3f>
c0018a99:	e9 3d f2 ff ff       	jmp    c0017cdb <Vm::faultHandler(regs*)+0x7c>
c0018a9e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018aa1:	5b                   	pop    ebx
c0018aa2:	5e                   	pop    esi
c0018aa3:	5f                   	pop    edi
c0018aa4:	5d                   	pop    ebp
c0018aa5:	c3                   	ret    

c0018aa6 <IOAPIC::close(int, int, void*)>:
c0018aa6:	b8 00 00 00 00       	mov    eax,0x0
c0018aab:	c3                   	ret    

c0018aac <apicGetBase()>:
c0018aac:	55                   	push   ebp
c0018aad:	89 e5                	mov    ebp,esp
c0018aaf:	83 ec 18             	sub    esp,0x18
c0018ab2:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0018ab7:	83 e0 08             	and    eax,0x8
c0018aba:	0f b6 c0             	movzx  eax,al
c0018abd:	85 c0                	test   eax,eax
c0018abf:	75 07                	jne    c0018ac8 <apicGetBase()+0x1c>
c0018ac1:	b8 00 00 00 00       	mov    eax,0x0
c0018ac6:	eb 1b                	jmp    c0018ae3 <apicGetBase()+0x37>
c0018ac8:	83 ec 0c             	sub    esp,0xc
c0018acb:	6a 1b                	push   0x1b
c0018acd:	e8 61 15 00 00       	call   c001a033 <x86rdmsr(unsigned int)>
c0018ad2:	83 c4 10             	add    esp,0x10
c0018ad5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018ad8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018adb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018ade:	25 00 00 ff ff       	and    eax,0xffff0000
c0018ae3:	c9                   	leave  
c0018ae4:	c3                   	ret    
c0018ae5:	90                   	nop

c0018ae6 <IOAPIC::IOAPIC()>:
c0018ae6:	83 ec 0c             	sub    esp,0xc
c0018ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aed:	83 ec 08             	sub    esp,0x8
c0018af0:	68 38 90 02 c0       	push   0xc0029038
c0018af5:	50                   	push   eax
c0018af6:	e8 bb 10 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0018afb:	83 c4 10             	add    esp,0x10
c0018afe:	ba 58 90 02 c0       	mov    edx,0xc0029058
c0018b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b07:	89 10                	mov    DWORD PTR [eax],edx
c0018b09:	90                   	nop
c0018b0a:	83 c4 0c             	add    esp,0xc
c0018b0d:	c3                   	ret    

c0018b0e <apicOpen()>:
c0018b0e:	55                   	push   ebp
c0018b0f:	89 e5                	mov    ebp,esp
c0018b11:	53                   	push   ebx
c0018b12:	83 ec 34             	sub    esp,0x34
c0018b15:	83 ec 0c             	sub    esp,0xc
c0018b18:	68 40 90 02 c0       	push   0xc0029040
c0018b1d:	e8 5a e4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018b22:	83 c4 10             	add    esp,0x10
c0018b25:	a0 00 14 03 c0       	mov    al,ds:0xc0031400
c0018b2a:	83 f0 01             	xor    eax,0x1
c0018b2d:	0f b6 c0             	movzx  eax,al
c0018b30:	85 c0                	test   eax,eax
c0018b32:	0f 84 a3 00 00 00    	je     c0018bdb <apicOpen()+0xcd>
c0018b38:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0018b3c:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c0018b41:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018b45:	0f b6 c0             	movzx  eax,al
c0018b48:	39 c2                	cmp    edx,eax
c0018b4a:	0f 83 84 00 00 00    	jae    c0018bd4 <apicOpen()+0xc6>
c0018b50:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0018b57:	83 ec 0c             	sub    esp,0xc
c0018b5a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0018b5d:	e8 01 6d ff ff       	call   c000f863 <malloc>
c0018b62:	83 c4 10             	add    esp,0x10
c0018b65:	89 c3                	mov    ebx,eax
c0018b67:	83 ec 0c             	sub    esp,0xc
c0018b6a:	53                   	push   ebx
c0018b6b:	e8 76 ff ff ff       	call   c0018ae6 <IOAPIC::IOAPIC()>
c0018b70:	83 c4 10             	add    esp,0x10
c0018b73:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0018b76:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018b7a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018b7d:	89 14 85 e0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec20],edx
c0018b84:	a1 c0 13 03 c0       	mov    eax,ds:0xc00313c0
c0018b89:	83 c0 01             	add    eax,0x1
c0018b8c:	a3 c0 13 03 c0       	mov    ds:0xc00313c0,eax
c0018b91:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0018b96:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018b9c:	83 ec 08             	sub    esp,0x8
c0018b9f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018ba2:	50                   	push   eax
c0018ba3:	e8 ac 0e ff ff       	call   c0009a54 <Device::addChild(Device*)>
c0018ba8:	83 c4 10             	add    esp,0x10
c0018bab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bb0:	83 c0 08             	add    eax,0x8
c0018bb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bb5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018bb9:	6a 00                	push   0x0
c0018bbb:	6a 00                	push   0x0
c0018bbd:	52                   	push   edx
c0018bbe:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018bc1:	ff d0                	call   eax
c0018bc3:	83 c4 10             	add    esp,0x10
c0018bc6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0018bc9:	83 c0 01             	add    eax,0x1
c0018bcc:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0018bcf:	e9 68 ff ff ff       	jmp    c0018b3c <apicOpen()+0x2e>
c0018bd4:	c6 05 00 14 03 c0 01 	mov    BYTE PTR ds:0xc0031400,0x1
c0018bdb:	e8 cc fe ff ff       	call   c0018aac <apicGetBase()>
c0018be0:	05 f0 00 00 00       	add    eax,0xf0
c0018be5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018be8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018beb:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bed:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018bf0:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0018bf7:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0018bfe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018c01:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018c04:	89 10                	mov    DWORD PTR [eax],edx
c0018c06:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0018c0d:	a1 8c 0d 03 c0       	mov    eax,ds:0xc0030d8c
c0018c12:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0018c15:	7d 7c                	jge    c0018c93 <apicOpen()+0x185>
c0018c17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018c1a:	8b 04 85 a0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf260]
c0018c21:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0018c24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018c27:	8b 04 85 a0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf260]
c0018c2e:	c1 e8 08             	shr    eax,0x8
c0018c31:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018c35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018c38:	8b 04 85 a0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf260]
c0018c3f:	c1 e8 18             	shr    eax,0x18
c0018c42:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0018c45:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018c49:	3d ff 00 00 00       	cmp    eax,0xff
c0018c4e:	75 3a                	jne    c0018c8a <apicOpen()+0x17c>
c0018c50:	e8 57 fe ff ff       	call   c0018aac <apicGetBase()>
c0018c55:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0018c59:	83 fa 01             	cmp    edx,0x1
c0018c5c:	75 07                	jne    c0018c65 <apicOpen()+0x157>
c0018c5e:	ba 60 03 00 00       	mov    edx,0x360
c0018c63:	eb 05                	jmp    c0018c6a <apicOpen()+0x15c>
c0018c65:	ba 50 03 00 00       	mov    edx,0x350
c0018c6a:	01 d0                	add    eax,edx
c0018c6c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018c6f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c74:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018c77:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018c7e:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018c82:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018c85:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018c88:	89 10                	mov    DWORD PTR [eax],edx
c0018c8a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018c8e:	e9 7a ff ff ff       	jmp    c0018c0d <apicOpen()+0xff>
c0018c93:	90                   	nop
c0018c94:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018c97:	c9                   	leave  
c0018c98:	c3                   	ret    
c0018c99:	90                   	nop

c0018c9a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018c9a:	55                   	push   ebp
c0018c9b:	89 e5                	mov    ebp,esp
c0018c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ca0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ca6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018ca9:	72 1d                	jb     c0018cc8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018cab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cae:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0018cb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cb7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018cbd:	01 d0                	add    eax,edx
c0018cbf:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018cc2:	73 04                	jae    c0018cc8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018cc4:	b0 01                	mov    al,0x1
c0018cc6:	eb 02                	jmp    c0018cca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0018cc8:	b0 00                	mov    al,0x0
c0018cca:	5d                   	pop    ebp
c0018ccb:	c3                   	ret    

c0018ccc <IOAPIC::read(int)>:
c0018ccc:	55                   	push   ebp
c0018ccd:	89 e5                	mov    ebp,esp
c0018ccf:	83 ec 10             	sub    esp,0x10
c0018cd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cd5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018cdb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018cde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018ce1:	0f b6 d0             	movzx  edx,al
c0018ce4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018ce7:	89 10                	mov    DWORD PTR [eax],edx
c0018ce9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018cec:	83 c0 10             	add    eax,0x10
c0018cef:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cf1:	c9                   	leave  
c0018cf2:	c3                   	ret    
c0018cf3:	90                   	nop

c0018cf4 <IOAPIC::open(int, int, void*)>:
c0018cf4:	55                   	push   ebp
c0018cf5:	89 e5                	mov    ebp,esp
c0018cf7:	57                   	push   edi
c0018cf8:	56                   	push   esi
c0018cf9:	53                   	push   ebx
c0018cfa:	83 ec 04             	sub    esp,0x4
c0018cfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d00:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018d03:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d0c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018d12:	8b 14 85 80 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf180]
c0018d19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d1c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018d22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d25:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018d2b:	8b 14 85 00 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf100]
c0018d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d35:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0018d3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d3e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018d44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d47:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018d4d:	0f b6 f0             	movzx  esi,al
c0018d50:	89 d0                	mov    eax,edx
c0018d52:	ba 00 00 00 00       	mov    edx,0x0
c0018d57:	89 c7                	mov    edi,eax
c0018d59:	83 e7 ff             	and    edi,0xffffffff
c0018d5c:	89 f9                	mov    ecx,edi
c0018d5e:	0f b6 da             	movzx  ebx,dl
c0018d61:	89 c8                	mov    eax,ecx
c0018d63:	89 da                	mov    edx,ebx
c0018d65:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0018d68:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018d6b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018d6f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018d73:	83 e0 00             	and    eax,0x0
c0018d76:	09 d0                	or     eax,edx
c0018d78:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018d7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d7f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018d85:	8d 50 01             	lea    edx,[eax+0x1]
c0018d88:	88 d1                	mov    cl,dl
c0018d8a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018d8d:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018d93:	0f b6 d0             	movzx  edx,al
c0018d96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d99:	83 c2 08             	add    edx,0x8
c0018d9c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018da0:	0f b6 c9             	movzx  ecx,cl
c0018da3:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0018da9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018dad:	6a 01                	push   0x1
c0018daf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018db2:	e8 15 ff ff ff       	call   c0018ccc <IOAPIC::read(int)>
c0018db7:	83 c4 08             	add    esp,0x8
c0018dba:	c1 f8 10             	sar    eax,0x10
c0018dbd:	0f b6 c0             	movzx  eax,al
c0018dc0:	8d 50 01             	lea    edx,[eax+0x1]
c0018dc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dc6:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0018dcc:	b8 00 00 00 00       	mov    eax,0x0
c0018dd1:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018dd4:	5b                   	pop    ebx
c0018dd5:	5e                   	pop    esi
c0018dd6:	5f                   	pop    edi
c0018dd7:	5d                   	pop    ebp
c0018dd8:	c3                   	ret    
c0018dd9:	90                   	nop

c0018dda <IOAPIC::write(int, int)>:
c0018dda:	55                   	push   ebp
c0018ddb:	89 e5                	mov    ebp,esp
c0018ddd:	83 ec 10             	sub    esp,0x10
c0018de0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018de3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018de9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018dec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018def:	0f b6 d0             	movzx  edx,al
c0018df2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018df5:	89 10                	mov    DWORD PTR [eax],edx
c0018df7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018dfa:	8d 50 10             	lea    edx,[eax+0x10]
c0018dfd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018e00:	89 02                	mov    DWORD PTR [edx],eax
c0018e02:	90                   	nop
c0018e03:	c9                   	leave  
c0018e04:	c3                   	ret    
c0018e05:	90                   	nop

c0018e06 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0018e06:	55                   	push   ebp
c0018e07:	89 e5                	mov    ebp,esp
c0018e09:	53                   	push   ebx
c0018e0a:	83 ec 2c             	sub    esp,0x2c
c0018e0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018e10:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0018e13:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0018e16:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0018e19:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0018e1c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018e1f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018e22:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0018e25:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0018e28:	88 d8                	mov    al,bl
c0018e2a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0018e2d:	88 c8                	mov    al,cl
c0018e2f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0018e32:	88 d0                	mov    al,dl
c0018e34:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0018e37:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018e3b:	83 c0 08             	add    eax,0x8
c0018e3e:	01 c0                	add    eax,eax
c0018e40:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018e43:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018e47:	83 c0 08             	add    eax,0x8
c0018e4a:	01 c0                	add    eax,eax
c0018e4c:	83 c0 01             	add    eax,0x1
c0018e4f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018e52:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018e55:	50                   	push   eax
c0018e56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018e59:	e8 6e fe ff ff       	call   c0018ccc <IOAPIC::read(int)>
c0018e5e:	83 c4 08             	add    esp,0x8
c0018e61:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018e64:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018e6b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018e6e:	c1 e0 18             	shl    eax,0x18
c0018e71:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0018e74:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0018e77:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018e7a:	52                   	push   edx
c0018e7b:	50                   	push   eax
c0018e7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018e7f:	e8 56 ff ff ff       	call   c0018dda <IOAPIC::write(int, int)>
c0018e84:	83 c4 0c             	add    esp,0xc
c0018e87:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018e8a:	50                   	push   eax
c0018e8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018e8e:	e8 39 fe ff ff       	call   c0018ccc <IOAPIC::read(int)>
c0018e93:	83 c4 08             	add    esp,0x8
c0018e96:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018e99:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0018ea0:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0018ea7:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0018eae:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0018eb2:	85 c0                	test   eax,eax
c0018eb4:	74 09                	je     c0018ebf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0018eb6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0018ebd:	eb 07                	jmp    c0018ec6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0018ebf:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0018ec6:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0018eca:	85 c0                	test   eax,eax
c0018ecc:	74 09                	je     c0018ed7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0018ece:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0018ed5:	eb 07                	jmp    c0018ede <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0018ed7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0018ede:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0018ee5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0018ee9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0018eec:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0018eef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018ef2:	52                   	push   edx
c0018ef3:	50                   	push   eax
c0018ef4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018ef7:	e8 de fe ff ff       	call   c0018dda <IOAPIC::write(int, int)>
c0018efc:	83 c4 0c             	add    esp,0xc
c0018eff:	90                   	nop
c0018f00:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018f03:	c9                   	leave  
c0018f04:	c3                   	ret    
c0018f05:	90                   	nop

c0018f06 <noCopro(unsigned long)>:
c0018f06:	c3                   	ret    

c0018f07 <HalRestart()>:
c0018f07:	e4 64                	in     al,0x64
c0018f09:	a8 02                	test   al,0x2
c0018f0b:	75 fa                	jne    c0018f07 <HalRestart()>
c0018f0d:	b0 fe                	mov    al,0xfe
c0018f0f:	e6 64                	out    0x64,al
c0018f11:	c3                   	ret    

c0018f12 <HalShutdown()>:
c0018f12:	c3                   	ret    

c0018f13 <HalSleep()>:
c0018f13:	c3                   	ret    

c0018f14 <CPU::close(int, int, void*)>:
c0018f14:	31 c0                	xor    eax,eax
c0018f16:	c3                   	ret    

c0018f17 <x86ReadCMOS(unsigned char)>:
c0018f17:	83 ec 14             	sub    esp,0x14
c0018f1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f1e:	88 04 24             	mov    BYTE PTR [esp],al
c0018f21:	a0 2c 14 03 c0       	mov    al,ds:0xc003142c
c0018f26:	0f b6 c0             	movzx  eax,al
c0018f29:	85 c0                	test   eax,eax
c0018f2b:	74 04                	je     c0018f31 <x86ReadCMOS(unsigned char)+0x1a>
c0018f2d:	b2 00                	mov    dl,0x0
c0018f2f:	eb 02                	jmp    c0018f33 <x86ReadCMOS(unsigned char)+0x1c>
c0018f31:	b2 80                	mov    dl,0x80
c0018f33:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018f36:	09 d0                	or     eax,edx
c0018f38:	0f b6 c0             	movzx  eax,al
c0018f3b:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018f42:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018f46:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018f4a:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018f4f:	ee                   	out    dx,al
c0018f50:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018f57:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018f5c:	89 c2                	mov    edx,eax
c0018f5e:	ec                   	in     al,dx
c0018f5f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f63:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f67:	83 c4 14             	add    esp,0x14
c0018f6a:	c3                   	ret    

c0018f6b <x86WriteCMOS(unsigned char, unsigned char)>:
c0018f6b:	83 ec 18             	sub    esp,0x18
c0018f6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f76:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0018f7a:	88 04 24             	mov    BYTE PTR [esp],al
c0018f7d:	a0 2c 14 03 c0       	mov    al,ds:0xc003142c
c0018f82:	0f b6 c0             	movzx  eax,al
c0018f85:	85 c0                	test   eax,eax
c0018f87:	74 04                	je     c0018f8d <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0018f89:	b2 00                	mov    dl,0x0
c0018f8b:	eb 02                	jmp    c0018f8f <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018f8d:	b2 80                	mov    dl,0x80
c0018f8f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018f93:	09 d0                	or     eax,edx
c0018f95:	0f b6 c0             	movzx  eax,al
c0018f98:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018f9f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018fa3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018fa7:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018fac:	ee                   	out    dx,al
c0018fad:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018fb1:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018fb8:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018fbc:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018fc0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018fc5:	ee                   	out    dx,al
c0018fc6:	90                   	nop
c0018fc7:	83 c4 18             	add    esp,0x18
c0018fca:	c3                   	ret    

c0018fcb <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018fcb:	60                   	pusha  
c0018fcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018fd4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018fd8:	9c                   	pushf  
c0018fd9:	fa                   	cli    
c0018fda:	0f 09                	wbinvd 
c0018fdc:	0f 30                	wrmsr  
c0018fde:	9d                   	popf   
c0018fdf:	89 c2                	mov    edx,eax
c0018fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fe5:	89 10                	mov    DWORD PTR [eax],edx
c0018fe7:	61                   	popa   
c0018fe8:	90                   	nop
c0018fe9:	c3                   	ret    

c0018fea <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018fea:	60                   	pusha  
c0018feb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fef:	89 c1                	mov    ecx,eax
c0018ff1:	9c                   	pushf  
c0018ff2:	fa                   	cli    
c0018ff3:	0f 09                	wbinvd 
c0018ff5:	31 c0                	xor    eax,eax
c0018ff7:	31 d2                	xor    edx,edx
c0018ff9:	0f 32                	rdmsr  
c0018ffb:	9d                   	popf   
c0018ffc:	89 c2                	mov    edx,eax
c0018ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019002:	89 10                	mov    DWORD PTR [eax],edx
c0019004:	61                   	popa   
c0019005:	90                   	nop
c0019006:	c3                   	ret    

c0019007 <AMD_K6_writeback(int, int, int)>:
c0019007:	83 ec 20             	sub    esp,0x20
c001900a:	a1 70 11 03 c0       	mov    eax,ds:0xc0031170
c001900f:	c1 e8 14             	shr    eax,0x14
c0019012:	c1 e8 02             	shr    eax,0x2
c0019015:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019019:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c001901e:	0f 85 9e 00 00 00    	jne    c00190c2 <AMD_K6_writeback(int, int, int)+0xbb>
c0019024:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019028:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001902c:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0019031:	75 19                	jne    c001904c <AMD_K6_writeback(int, int, int)+0x45>
c0019033:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0019038:	7f 0a                	jg     c0019044 <AMD_K6_writeback(int, int, int)+0x3d>
c001903a:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0019042:	eb 08                	jmp    c001904c <AMD_K6_writeback(int, int, int)+0x45>
c0019044:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c001904c:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0019051:	7c 6e                	jl     c00190c1 <AMD_K6_writeback(int, int, int)+0xba>
c0019053:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0019058:	7e 09                	jle    c0019063 <AMD_K6_writeback(int, int, int)+0x5c>
c001905a:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c001905f:	74 36                	je     c0019097 <AMD_K6_writeback(int, int, int)+0x90>
c0019061:	eb 5e                	jmp    c00190c1 <AMD_K6_writeback(int, int, int)+0xba>
c0019063:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019067:	50                   	push   eax
c0019068:	68 82 00 00 c0       	push   0xc0000082
c001906d:	e8 78 ff ff ff       	call   c0018fea <AMD_K6_read_msr(unsigned int, REGS*)>
c0019072:	83 c4 08             	add    esp,0x8
c0019075:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019079:	01 c0                	add    eax,eax
c001907b:	83 e0 7f             	and    eax,0x7f
c001907e:	89 c2                	mov    edx,eax
c0019080:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019084:	50                   	push   eax
c0019085:	6a 00                	push   0x0
c0019087:	52                   	push   edx
c0019088:	68 82 00 00 c0       	push   0xc0000082
c001908d:	e8 39 ff ff ff       	call   c0018fcb <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019092:	83 c4 10             	add    esp,0x10
c0019095:	eb 2b                	jmp    c00190c2 <AMD_K6_writeback(int, int, int)+0xbb>
c0019097:	8d 44 24 08          	lea    eax,[esp+0x8]
c001909b:	50                   	push   eax
c001909c:	68 82 00 00 c0       	push   0xc0000082
c00190a1:	e8 44 ff ff ff       	call   c0018fea <AMD_K6_read_msr(unsigned int, REGS*)>
c00190a6:	83 c4 08             	add    esp,0x8
c00190a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00190ad:	50                   	push   eax
c00190ae:	6a 00                	push   0x0
c00190b0:	6a 00                	push   0x0
c00190b2:	68 82 00 00 c0       	push   0xc0000082
c00190b7:	e8 0f ff ff ff       	call   c0018fcb <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00190bc:	83 c4 10             	add    esp,0x10
c00190bf:	eb 01                	jmp    c00190c2 <AMD_K6_writeback(int, int, int)+0xbb>
c00190c1:	90                   	nop
c00190c2:	90                   	nop
c00190c3:	83 c4 20             	add    esp,0x20
c00190c6:	c3                   	ret    

c00190c7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00190c7:	56                   	push   esi
c00190c8:	53                   	push   ebx
c00190c9:	a1 a0 b8 02 c0       	mov    eax,ds:0xc002b8a0
c00190ce:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00190d2:	75 32                	jne    c0019106 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00190d4:	8b 15 20 14 03 c0    	mov    edx,DWORD PTR ds:0xc0031420
c00190da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190de:	89 10                	mov    DWORD PTR [eax],edx
c00190e0:	8b 15 1c 14 03 c0    	mov    edx,DWORD PTR ds:0xc003141c
c00190e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00190ea:	89 10                	mov    DWORD PTR [eax],edx
c00190ec:	8b 15 18 14 03 c0    	mov    edx,DWORD PTR ds:0xc0031418
c00190f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00190f6:	89 10                	mov    DWORD PTR [eax],edx
c00190f8:	8b 15 14 14 03 c0    	mov    edx,DWORD PTR ds:0xc0031414
c00190fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019102:	89 10                	mov    DWORD PTR [eax],edx
c0019104:	eb 5c                	jmp    c0019162 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0019106:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001910a:	ba 00 00 00 00       	mov    edx,0x0
c001910f:	89 d1                	mov    ecx,edx
c0019111:	0f a2                	cpuid  
c0019113:	89 c6                	mov    esi,eax
c0019115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019119:	89 30                	mov    DWORD PTR [eax],esi
c001911b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001911f:	89 18                	mov    DWORD PTR [eax],ebx
c0019121:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019125:	89 08                	mov    DWORD PTR [eax],ecx
c0019127:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001912b:	89 10                	mov    DWORD PTR [eax],edx
c001912d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019131:	a3 a0 b8 02 c0       	mov    ds:0xc002b8a0,eax
c0019136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001913a:	8b 00                	mov    eax,DWORD PTR [eax]
c001913c:	a3 20 14 03 c0       	mov    ds:0xc0031420,eax
c0019141:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019145:	8b 00                	mov    eax,DWORD PTR [eax]
c0019147:	a3 1c 14 03 c0       	mov    ds:0xc003141c,eax
c001914c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019150:	8b 00                	mov    eax,DWORD PTR [eax]
c0019152:	a3 18 14 03 c0       	mov    ds:0xc0031418,eax
c0019157:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001915b:	8b 00                	mov    eax,DWORD PTR [eax]
c001915d:	a3 14 14 03 c0       	mov    ds:0xc0031414,eax
c0019162:	5b                   	pop    ebx
c0019163:	5e                   	pop    esi
c0019164:	c3                   	ret    

c0019165 <cpuidCheckEDX(unsigned int)>:
c0019165:	83 ec 10             	sub    esp,0x10
c0019168:	89 e0                	mov    eax,esp
c001916a:	50                   	push   eax
c001916b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001916f:	50                   	push   eax
c0019170:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019174:	50                   	push   eax
c0019175:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019179:	50                   	push   eax
c001917a:	6a 01                	push   0x1
c001917c:	e8 46 ff ff ff       	call   c00190c7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019181:	83 c4 14             	add    esp,0x14
c0019184:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019187:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001918b:	0f 95 c0             	setne  al
c001918e:	83 c4 10             	add    esp,0x10
c0019191:	c3                   	ret    

c0019192 <cpuidCheckECX(unsigned int)>:
c0019192:	83 ec 10             	sub    esp,0x10
c0019195:	89 e0                	mov    eax,esp
c0019197:	50                   	push   eax
c0019198:	8d 44 24 08          	lea    eax,[esp+0x8]
c001919c:	50                   	push   eax
c001919d:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191a1:	50                   	push   eax
c00191a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191a6:	50                   	push   eax
c00191a7:	6a 01                	push   0x1
c00191a9:	e8 19 ff ff ff       	call   c00190c7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191ae:	83 c4 14             	add    esp,0x14
c00191b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191b5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00191b9:	0f 95 c0             	setne  al
c00191bc:	83 c4 10             	add    esp,0x10
c00191bf:	c3                   	ret    

c00191c0 <cpuidCheckExtendedEBX(unsigned int)>:
c00191c0:	83 ec 10             	sub    esp,0x10
c00191c3:	89 e0                	mov    eax,esp
c00191c5:	50                   	push   eax
c00191c6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191ca:	50                   	push   eax
c00191cb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191cf:	50                   	push   eax
c00191d0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191d4:	50                   	push   eax
c00191d5:	6a 07                	push   0x7
c00191d7:	e8 eb fe ff ff       	call   c00190c7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191dc:	83 c4 14             	add    esp,0x14
c00191df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00191e3:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00191e7:	0f 95 c0             	setne  al
c00191ea:	83 c4 10             	add    esp,0x10
c00191ed:	c3                   	ret    

c00191ee <cpuidCheckExtendedECX(unsigned int)>:
c00191ee:	83 ec 10             	sub    esp,0x10
c00191f1:	89 e0                	mov    eax,esp
c00191f3:	50                   	push   eax
c00191f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191f8:	50                   	push   eax
c00191f9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191fd:	50                   	push   eax
c00191fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019202:	50                   	push   eax
c0019203:	6a 07                	push   0x7
c0019205:	e8 bd fe ff ff       	call   c00190c7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001920a:	83 c4 14             	add    esp,0x14
c001920d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019211:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019215:	0f 95 c0             	setne  al
c0019218:	83 c4 10             	add    esp,0x10
c001921b:	c3                   	ret    

c001921c <HalDetectFeatures()>:
c001921c:	57                   	push   edi
c001921d:	56                   	push   esi
c001921e:	53                   	push   ebx
c001921f:	81 ec 90 00 00 00    	sub    esp,0x90
c0019225:	83 ec 04             	sub    esp,0x4
c0019228:	6a 08                	push   0x8
c001922a:	6a 00                	push   0x0
c001922c:	68 4c 14 03 c0       	push   0xc003144c
c0019231:	e8 ba 72 fe ff       	call   c00004f0 <memset>
c0019236:	83 c4 10             	add    esp,0x10
c0019239:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001923e:	83 c8 04             	or     eax,0x4
c0019241:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019246:	83 ec 0c             	sub    esp,0xc
c0019249:	68 7c 90 02 c0       	push   0xc002907c
c001924e:	e8 29 dd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019253:	83 c4 10             	add    esp,0x10
c0019256:	e8 9e 6f fe ff       	call   c00001f9 <detectCPUID>
c001925b:	85 c0                	test   eax,eax
c001925d:	0f 95 c0             	setne  al
c0019260:	83 e0 01             	and    eax,0x1
c0019263:	83 e0 01             	and    eax,0x1
c0019266:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019269:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001926e:	83 e0 fd             	and    eax,0xfffffffd
c0019271:	88 c2                	mov    dl,al
c0019273:	88 c8                	mov    al,cl
c0019275:	09 d0                	or     eax,edx
c0019277:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c001927c:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019281:	83 e0 02             	and    eax,0x2
c0019284:	0f b6 c0             	movzx  eax,al
c0019287:	85 c0                	test   eax,eax
c0019289:	0f 84 84 02 00 00    	je     c0019513 <HalDetectFeatures()+0x2f7>
c001928f:	83 ec 0c             	sub    esp,0xc
c0019292:	6a 20                	push   0x20
c0019294:	e8 cc fe ff ff       	call   c0019165 <cpuidCheckEDX(unsigned int)>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	83 e0 01             	and    eax,0x1
c001929f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00192a6:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c00192ab:	83 e0 f7             	and    eax,0xfffffff7
c00192ae:	88 c2                	mov    dl,al
c00192b0:	88 c8                	mov    al,cl
c00192b2:	09 d0                	or     eax,edx
c00192b4:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c00192b9:	83 ec 0c             	sub    esp,0xc
c00192bc:	68 00 00 00 04       	push   0x4000000
c00192c1:	e8 9f fe ff ff       	call   c0019165 <cpuidCheckEDX(unsigned int)>
c00192c6:	83 c4 10             	add    esp,0x10
c00192c9:	89 c1                	mov    ecx,eax
c00192cb:	83 e1 01             	and    ecx,0x1
c00192ce:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c00192d3:	83 e0 fe             	and    eax,0xfffffffe
c00192d6:	88 c2                	mov    dl,al
c00192d8:	88 c8                	mov    al,cl
c00192da:	09 d0                	or     eax,edx
c00192dc:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c00192e1:	83 ec 0c             	sub    esp,0xc
c00192e4:	68 80 00 00 00       	push   0x80
c00192e9:	e8 77 fe ff ff       	call   c0019165 <cpuidCheckEDX(unsigned int)>
c00192ee:	83 c4 10             	add    esp,0x10
c00192f1:	89 c1                	mov    ecx,eax
c00192f3:	c1 e1 07             	shl    ecx,0x7
c00192f6:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c00192fb:	83 e0 7f             	and    eax,0x7f
c00192fe:	88 c2                	mov    dl,al
c0019300:	88 c8                	mov    al,cl
c0019302:	09 d0                	or     eax,edx
c0019304:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c0019309:	83 ec 0c             	sub    esp,0xc
c001930c:	68 00 00 80 00       	push   0x800000
c0019311:	e8 4f fe ff ff       	call   c0019165 <cpuidCheckEDX(unsigned int)>
c0019316:	83 c4 10             	add    esp,0x10
c0019319:	83 e0 01             	and    eax,0x1
c001931c:	89 c1                	mov    ecx,eax
c001931e:	c1 e1 05             	shl    ecx,0x5
c0019321:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019326:	83 e0 df             	and    eax,0xffffffdf
c0019329:	88 c2                	mov    dl,al
c001932b:	88 c8                	mov    al,cl
c001932d:	09 d0                	or     eax,edx
c001932f:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019334:	83 ec 0c             	sub    esp,0xc
c0019337:	6a 01                	push   0x1
c0019339:	e8 46 3f ff ff       	call   c000d284 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001933e:	83 c4 10             	add    esp,0x10
c0019341:	0f b6 c0             	movzx  eax,al
c0019344:	85 c0                	test   eax,eax
c0019346:	75 17                	jne    c001935f <HalDetectFeatures()+0x143>
c0019348:	83 ec 0c             	sub    esp,0xc
c001934b:	68 00 04 00 00       	push   0x400
c0019350:	e8 2f 3f ff ff       	call   c000d284 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019355:	83 c4 10             	add    esp,0x10
c0019358:	0f b6 c0             	movzx  eax,al
c001935b:	85 c0                	test   eax,eax
c001935d:	74 04                	je     c0019363 <HalDetectFeatures()+0x147>
c001935f:	b0 01                	mov    al,0x1
c0019361:	eb 02                	jmp    c0019365 <HalDetectFeatures()+0x149>
c0019363:	b0 00                	mov    al,0x0
c0019365:	0f b6 c0             	movzx  eax,al
c0019368:	85 c0                	test   eax,eax
c001936a:	74 0f                	je     c001937b <HalDetectFeatures()+0x15f>
c001936c:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019371:	83 e0 fe             	and    eax,0xfffffffe
c0019374:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019379:	eb 28                	jmp    c00193a3 <HalDetectFeatures()+0x187>
c001937b:	83 ec 0c             	sub    esp,0xc
c001937e:	68 00 02 00 00       	push   0x200
c0019383:	e8 dd fd ff ff       	call   c0019165 <cpuidCheckEDX(unsigned int)>
c0019388:	83 c4 10             	add    esp,0x10
c001938b:	89 c1                	mov    ecx,eax
c001938d:	83 e1 01             	and    ecx,0x1
c0019390:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019395:	83 e0 fe             	and    eax,0xfffffffe
c0019398:	88 c2                	mov    dl,al
c001939a:	88 c8                	mov    al,cl
c001939c:	09 d0                	or     eax,edx
c001939e:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c00193a3:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c00193a8:	83 e0 01             	and    eax,0x1
c00193ab:	0f b6 c0             	movzx  eax,al
c00193ae:	85 c0                	test   eax,eax
c00193b0:	74 1c                	je     c00193ce <HalDetectFeatures()+0x1b2>
c00193b2:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c00193b7:	83 e0 08             	and    eax,0x8
c00193ba:	0f b6 c0             	movzx  eax,al
c00193bd:	85 c0                	test   eax,eax
c00193bf:	75 0d                	jne    c00193ce <HalDetectFeatures()+0x1b2>
c00193c1:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c00193c6:	83 e0 fe             	and    eax,0xfffffffe
c00193c9:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c00193ce:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c00193d6:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c00193de:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c00193e6:	85 c0                	test   eax,eax
c00193e8:	0f 84 ab 00 00 00    	je     c0019499 <HalDetectFeatures()+0x27d>
c00193ee:	83 ec 0c             	sub    esp,0xc
c00193f1:	6a 01                	push   0x1
c00193f3:	e8 9a fd ff ff       	call   c0019192 <cpuidCheckECX(unsigned int)>
c00193f8:	83 c4 10             	add    esp,0x10
c00193fb:	83 e0 01             	and    eax,0x1
c00193fe:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019401:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019406:	83 e0 fd             	and    eax,0xfffffffd
c0019409:	88 c2                	mov    dl,al
c001940b:	88 c8                	mov    al,cl
c001940d:	09 d0                	or     eax,edx
c001940f:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c0019414:	83 ec 0c             	sub    esp,0xc
c0019417:	68 00 02 00 00       	push   0x200
c001941c:	e8 71 fd ff ff       	call   c0019192 <cpuidCheckECX(unsigned int)>
c0019421:	83 c4 10             	add    esp,0x10
c0019424:	83 e0 01             	and    eax,0x1
c0019427:	89 c1                	mov    ecx,eax
c0019429:	c1 e1 04             	shl    ecx,0x4
c001942c:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019431:	83 e0 ef             	and    eax,0xffffffef
c0019434:	88 c2                	mov    dl,al
c0019436:	88 c8                	mov    al,cl
c0019438:	09 d0                	or     eax,edx
c001943a:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c001943f:	83 ec 0c             	sub    esp,0xc
c0019442:	68 00 00 08 00       	push   0x80000
c0019447:	e8 46 fd ff ff       	call   c0019192 <cpuidCheckECX(unsigned int)>
c001944c:	83 c4 10             	add    esp,0x10
c001944f:	83 e0 01             	and    eax,0x1
c0019452:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019459:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c001945e:	83 e0 fb             	and    eax,0xfffffffb
c0019461:	88 c2                	mov    dl,al
c0019463:	88 c8                	mov    al,cl
c0019465:	09 d0                	or     eax,edx
c0019467:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c001946c:	83 ec 0c             	sub    esp,0xc
c001946f:	68 00 00 10 00       	push   0x100000
c0019474:	e8 19 fd ff ff       	call   c0019192 <cpuidCheckECX(unsigned int)>
c0019479:	83 c4 10             	add    esp,0x10
c001947c:	83 e0 01             	and    eax,0x1
c001947f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019486:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c001948b:	83 e0 f7             	and    eax,0xfffffff7
c001948e:	88 c2                	mov    dl,al
c0019490:	88 c8                	mov    al,cl
c0019492:	09 d0                	or     eax,edx
c0019494:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c0019499:	83 ec 0c             	sub    esp,0xc
c001949c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00194a0:	50                   	push   eax
c00194a1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00194a5:	50                   	push   eax
c00194a6:	8d 44 24 34          	lea    eax,[esp+0x34]
c00194aa:	50                   	push   eax
c00194ab:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00194af:	50                   	push   eax
c00194b0:	68 00 00 00 80       	push   0x80000000
c00194b5:	e8 0d fc ff ff       	call   c00190c7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194ba:	83 c4 20             	add    esp,0x20
c00194bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00194c1:	3d 00 00 00 80       	cmp    eax,0x80000000
c00194c6:	76 4b                	jbe    c0019513 <HalDetectFeatures()+0x2f7>
c00194c8:	83 ec 0c             	sub    esp,0xc
c00194cb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00194cf:	50                   	push   eax
c00194d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00194d4:	50                   	push   eax
c00194d5:	8d 44 24 34          	lea    eax,[esp+0x34]
c00194d9:	50                   	push   eax
c00194da:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00194de:	50                   	push   eax
c00194df:	68 01 00 00 80       	push   0x80000001
c00194e4:	e8 de fb ff ff       	call   c00190c7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194e9:	83 c4 20             	add    esp,0x20
c00194ec:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c00194f1:	83 e0 bf             	and    eax,0xffffffbf
c00194f4:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c00194f9:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c00194fe:	83 e0 fd             	and    eax,0xfffffffd
c0019501:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c0019506:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c001950b:	83 e0 fe             	and    eax,0xfffffffe
c001950e:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c0019513:	83 ec 0c             	sub    esp,0xc
c0019516:	68 00 04 00 00       	push   0x400
c001951b:	e8 64 3d ff ff       	call   c000d284 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019520:	83 c4 10             	add    esp,0x10
c0019523:	0f b6 c0             	movzx  eax,al
c0019526:	85 c0                	test   eax,eax
c0019528:	74 0d                	je     c0019537 <HalDetectFeatures()+0x31b>
c001952a:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001952f:	83 e0 fb             	and    eax,0xfffffffb
c0019532:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019537:	c6 05 48 14 03 c0 01 	mov    BYTE PTR ds:0xc0031448,0x1
c001953e:	83 ec 04             	sub    esp,0x4
c0019541:	6a 0d                	push   0xd
c0019543:	6a 00                	push   0x0
c0019545:	68 30 14 03 c0       	push   0xc0031430
c001954a:	e8 a1 6f fe ff       	call   c00004f0 <memset>
c001954f:	83 c4 10             	add    esp,0x10
c0019552:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019557:	83 e0 02             	and    eax,0x2
c001955a:	0f b6 c0             	movzx  eax,al
c001955d:	85 c0                	test   eax,eax
c001955f:	0f 84 16 08 00 00    	je     c0019d7b <HalDetectFeatures()+0xb5f>
c0019565:	83 ec 0c             	sub    esp,0xc
c0019568:	6a 10                	push   0x10
c001956a:	e8 f6 fb ff ff       	call   c0019165 <cpuidCheckEDX(unsigned int)>
c001956f:	83 c4 10             	add    esp,0x10
c0019572:	83 e0 01             	and    eax,0x1
c0019575:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001957c:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c0019581:	83 e0 f7             	and    eax,0xfffffff7
c0019584:	88 c2                	mov    dl,al
c0019586:	88 c8                	mov    al,cl
c0019588:	09 d0                	or     eax,edx
c001958a:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c001958f:	83 ec 0c             	sub    esp,0xc
c0019592:	6a 40                	push   0x40
c0019594:	e8 cc fb ff ff       	call   c0019165 <cpuidCheckEDX(unsigned int)>
c0019599:	83 c4 10             	add    esp,0x10
c001959c:	83 e0 01             	and    eax,0x1
c001959f:	89 c1                	mov    ecx,eax
c00195a1:	c1 e1 04             	shl    ecx,0x4
c00195a4:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c00195a9:	83 e0 ef             	and    eax,0xffffffef
c00195ac:	88 c2                	mov    dl,al
c00195ae:	88 c8                	mov    al,cl
c00195b0:	09 d0                	or     eax,edx
c00195b2:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c00195b7:	83 ec 0c             	sub    esp,0xc
c00195ba:	6a 08                	push   0x8
c00195bc:	e8 a4 fb ff ff       	call   c0019165 <cpuidCheckEDX(unsigned int)>
c00195c1:	83 c4 10             	add    esp,0x10
c00195c4:	83 e0 01             	and    eax,0x1
c00195c7:	89 c1                	mov    ecx,eax
c00195c9:	c1 e1 05             	shl    ecx,0x5
c00195cc:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c00195d1:	83 e0 df             	and    eax,0xffffffdf
c00195d4:	88 c2                	mov    dl,al
c00195d6:	88 c8                	mov    al,cl
c00195d8:	09 d0                	or     eax,edx
c00195da:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c00195df:	83 ec 0c             	sub    esp,0xc
c00195e2:	68 00 20 00 00       	push   0x2000
c00195e7:	e8 79 fb ff ff       	call   c0019165 <cpuidCheckEDX(unsigned int)>
c00195ec:	83 c4 10             	add    esp,0x10
c00195ef:	83 e0 01             	and    eax,0x1
c00195f2:	89 c1                	mov    ecx,eax
c00195f4:	c1 e1 06             	shl    ecx,0x6
c00195f7:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c00195fc:	83 e0 bf             	and    eax,0xffffffbf
c00195ff:	88 c2                	mov    dl,al
c0019601:	88 c8                	mov    al,cl
c0019603:	09 d0                	or     eax,edx
c0019605:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c001960a:	83 ec 0c             	sub    esp,0xc
c001960d:	68 00 00 01 00       	push   0x10000
c0019612:	e8 4e fb ff ff       	call   c0019165 <cpuidCheckEDX(unsigned int)>
c0019617:	83 c4 10             	add    esp,0x10
c001961a:	89 c1                	mov    ecx,eax
c001961c:	c1 e1 07             	shl    ecx,0x7
c001961f:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c0019624:	83 e0 7f             	and    eax,0x7f
c0019627:	88 c2                	mov    dl,al
c0019629:	88 c8                	mov    al,cl
c001962b:	09 d0                	or     eax,edx
c001962d:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c0019632:	83 ec 0c             	sub    esp,0xc
c0019635:	6a 01                	push   0x1
c0019637:	e8 29 fb ff ff       	call   c0019165 <cpuidCheckEDX(unsigned int)>
c001963c:	83 c4 10             	add    esp,0x10
c001963f:	83 e0 01             	and    eax,0x1
c0019642:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019649:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c001964e:	83 e0 f7             	and    eax,0xfffffff7
c0019651:	88 c2                	mov    dl,al
c0019653:	88 c8                	mov    al,cl
c0019655:	09 d0                	or     eax,edx
c0019657:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c001965c:	83 ec 0c             	sub    esp,0xc
c001965f:	68 00 08 00 00       	push   0x800
c0019664:	e8 fc fa ff ff       	call   c0019165 <cpuidCheckEDX(unsigned int)>
c0019669:	83 c4 10             	add    esp,0x10
c001966c:	89 c1                	mov    ecx,eax
c001966e:	83 e1 01             	and    ecx,0x1
c0019671:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019676:	83 e0 fe             	and    eax,0xfffffffe
c0019679:	88 c2                	mov    dl,al
c001967b:	88 c8                	mov    al,cl
c001967d:	09 d0                	or     eax,edx
c001967f:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019684:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c0019689:	83 e0 40             	and    eax,0x40
c001968c:	0f b6 c0             	movzx  eax,al
c001968f:	85 c0                	test   eax,eax
c0019691:	74 0a                	je     c001969d <HalDetectFeatures()+0x481>
c0019693:	c7 05 28 14 03 c0 00 01 00 00 	mov    DWORD PTR ds:0xc0031428,0x100
c001969d:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c00196a2:	83 e0 80             	and    eax,0xffffff80
c00196a5:	0f b6 c0             	movzx  eax,al
c00196a8:	85 c0                	test   eax,eax
c00196aa:	74 0a                	je     c00196b6 <HalDetectFeatures()+0x49a>
c00196ac:	c7 05 24 14 03 c0 80 00 00 00 	mov    DWORD PTR ds:0xc0031424,0x80
c00196b6:	83 ec 0c             	sub    esp,0xc
c00196b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196bd:	50                   	push   eax
c00196be:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00196c2:	50                   	push   eax
c00196c3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00196c7:	50                   	push   eax
c00196c8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00196cc:	50                   	push   eax
c00196cd:	6a 00                	push   0x0
c00196cf:	e8 f3 f9 ff ff       	call   c00190c7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196d4:	83 c4 20             	add    esp,0x20
c00196d7:	c7 44 24 48 30 14 03 c0 	mov    DWORD PTR [esp+0x48],0xc0031430
c00196df:	8d 44 24 10          	lea    eax,[esp+0x10]
c00196e3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00196e7:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c00196ef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00196f3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00196f7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00196fb:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00196ff:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019703:	89 c6                	mov    esi,eax
c0019705:	89 d7                	mov    edi,edx
c0019707:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019709:	89 c8                	mov    eax,ecx
c001970b:	89 fa                	mov    edx,edi
c001970d:	89 f3                	mov    ebx,esi
c001970f:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0019713:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019717:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001971b:	b8 34 14 03 c0       	mov    eax,0xc0031434
c0019720:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0019724:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019728:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001972c:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0019734:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0019738:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001973c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0019740:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0019744:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0019748:	89 c6                	mov    esi,eax
c001974a:	89 d7                	mov    edi,edx
c001974c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001974e:	89 c8                	mov    eax,ecx
c0019750:	89 fa                	mov    edx,edi
c0019752:	89 f3                	mov    ebx,esi
c0019754:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0019758:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c001975c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019760:	b8 38 14 03 c0       	mov    eax,0xc0031438
c0019765:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c001976c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019770:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0019774:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c001977c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019783:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0019787:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001978b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019792:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0019796:	89 c6                	mov    esi,eax
c0019798:	89 d7                	mov    edi,edx
c001979a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001979c:	89 c8                	mov    eax,ecx
c001979e:	89 fa                	mov    edx,edi
c00197a0:	89 f3                	mov    ebx,esi
c00197a2:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c00197a6:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c00197aa:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00197ae:	83 ec 08             	sub    esp,0x8
c00197b1:	68 91 90 02 c0       	push   0xc0029091
c00197b6:	68 30 14 03 c0       	push   0xc0031430
c00197bb:	e8 90 6f fe ff       	call   c0000750 <strcmp>
c00197c0:	83 c4 10             	add    esp,0x10
c00197c3:	85 c0                	test   eax,eax
c00197c5:	74 19                	je     c00197e0 <HalDetectFeatures()+0x5c4>
c00197c7:	83 ec 08             	sub    esp,0x8
c00197ca:	68 9e 90 02 c0       	push   0xc002909e
c00197cf:	68 30 14 03 c0       	push   0xc0031430
c00197d4:	e8 77 6f fe ff       	call   c0000750 <strcmp>
c00197d9:	83 c4 10             	add    esp,0x10
c00197dc:	85 c0                	test   eax,eax
c00197de:	75 04                	jne    c00197e4 <HalDetectFeatures()+0x5c8>
c00197e0:	b0 01                	mov    al,0x1
c00197e2:	eb 02                	jmp    c00197e6 <HalDetectFeatures()+0x5ca>
c00197e4:	b0 00                	mov    al,0x0
c00197e6:	0f b6 c0             	movzx  eax,al
c00197e9:	85 c0                	test   eax,eax
c00197eb:	74 0f                	je     c00197fc <HalDetectFeatures()+0x5e0>
c00197ed:	c7 05 44 14 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x2
c00197f7:	e9 0d 03 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c00197fc:	83 ec 08             	sub    esp,0x8
c00197ff:	68 ab 90 02 c0       	push   0xc00290ab
c0019804:	68 30 14 03 c0       	push   0xc0031430
c0019809:	e8 42 6f fe ff       	call   c0000750 <strcmp>
c001980e:	83 c4 10             	add    esp,0x10
c0019811:	85 c0                	test   eax,eax
c0019813:	74 19                	je     c001982e <HalDetectFeatures()+0x612>
c0019815:	83 ec 08             	sub    esp,0x8
c0019818:	68 b8 90 02 c0       	push   0xc00290b8
c001981d:	68 30 14 03 c0       	push   0xc0031430
c0019822:	e8 29 6f fe ff       	call   c0000750 <strcmp>
c0019827:	83 c4 10             	add    esp,0x10
c001982a:	85 c0                	test   eax,eax
c001982c:	75 04                	jne    c0019832 <HalDetectFeatures()+0x616>
c001982e:	b0 01                	mov    al,0x1
c0019830:	eb 02                	jmp    c0019834 <HalDetectFeatures()+0x618>
c0019832:	b0 00                	mov    al,0x0
c0019834:	0f b6 c0             	movzx  eax,al
c0019837:	85 c0                	test   eax,eax
c0019839:	74 0f                	je     c001984a <HalDetectFeatures()+0x62e>
c001983b:	c7 05 44 14 03 c0 04 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x4
c0019845:	e9 bf 02 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c001984a:	83 ec 08             	sub    esp,0x8
c001984d:	68 c5 90 02 c0       	push   0xc00290c5
c0019852:	68 30 14 03 c0       	push   0xc0031430
c0019857:	e8 f4 6e fe ff       	call   c0000750 <strcmp>
c001985c:	83 c4 10             	add    esp,0x10
c001985f:	85 c0                	test   eax,eax
c0019861:	74 19                	je     c001987c <HalDetectFeatures()+0x660>
c0019863:	83 ec 08             	sub    esp,0x8
c0019866:	68 d2 90 02 c0       	push   0xc00290d2
c001986b:	68 30 14 03 c0       	push   0xc0031430
c0019870:	e8 db 6e fe ff       	call   c0000750 <strcmp>
c0019875:	83 c4 10             	add    esp,0x10
c0019878:	85 c0                	test   eax,eax
c001987a:	75 04                	jne    c0019880 <HalDetectFeatures()+0x664>
c001987c:	b0 01                	mov    al,0x1
c001987e:	eb 02                	jmp    c0019882 <HalDetectFeatures()+0x666>
c0019880:	b0 00                	mov    al,0x0
c0019882:	0f b6 c0             	movzx  eax,al
c0019885:	85 c0                	test   eax,eax
c0019887:	74 0f                	je     c0019898 <HalDetectFeatures()+0x67c>
c0019889:	c7 05 44 14 03 c0 05 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x5
c0019893:	e9 71 02 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c0019898:	83 ec 08             	sub    esp,0x8
c001989b:	68 df 90 02 c0       	push   0xc00290df
c00198a0:	68 30 14 03 c0       	push   0xc0031430
c00198a5:	e8 a6 6e fe ff       	call   c0000750 <strcmp>
c00198aa:	83 c4 10             	add    esp,0x10
c00198ad:	85 c0                	test   eax,eax
c00198af:	0f 94 c0             	sete   al
c00198b2:	0f b6 c0             	movzx  eax,al
c00198b5:	85 c0                	test   eax,eax
c00198b7:	74 0f                	je     c00198c8 <HalDetectFeatures()+0x6ac>
c00198b9:	c7 05 44 14 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x1
c00198c3:	e9 41 02 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c00198c8:	83 ec 08             	sub    esp,0x8
c00198cb:	68 ec 90 02 c0       	push   0xc00290ec
c00198d0:	68 30 14 03 c0       	push   0xc0031430
c00198d5:	e8 76 6e fe ff       	call   c0000750 <strcmp>
c00198da:	83 c4 10             	add    esp,0x10
c00198dd:	85 c0                	test   eax,eax
c00198df:	0f 94 c0             	sete   al
c00198e2:	0f b6 c0             	movzx  eax,al
c00198e5:	85 c0                	test   eax,eax
c00198e7:	74 0f                	je     c00198f8 <HalDetectFeatures()+0x6dc>
c00198e9:	c7 05 44 14 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x3
c00198f3:	e9 11 02 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c00198f8:	83 ec 08             	sub    esp,0x8
c00198fb:	68 ab 90 02 c0       	push   0xc00290ab
c0019900:	68 30 14 03 c0       	push   0xc0031430
c0019905:	e8 46 6e fe ff       	call   c0000750 <strcmp>
c001990a:	83 c4 10             	add    esp,0x10
c001990d:	85 c0                	test   eax,eax
c001990f:	0f 94 c0             	sete   al
c0019912:	0f b6 c0             	movzx  eax,al
c0019915:	85 c0                	test   eax,eax
c0019917:	74 0f                	je     c0019928 <HalDetectFeatures()+0x70c>
c0019919:	c7 05 44 14 03 c0 06 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x6
c0019923:	e9 e1 01 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c0019928:	83 ec 08             	sub    esp,0x8
c001992b:	68 f9 90 02 c0       	push   0xc00290f9
c0019930:	68 30 14 03 c0       	push   0xc0031430
c0019935:	e8 16 6e fe ff       	call   c0000750 <strcmp>
c001993a:	83 c4 10             	add    esp,0x10
c001993d:	85 c0                	test   eax,eax
c001993f:	0f 94 c0             	sete   al
c0019942:	0f b6 c0             	movzx  eax,al
c0019945:	85 c0                	test   eax,eax
c0019947:	74 0f                	je     c0019958 <HalDetectFeatures()+0x73c>
c0019949:	c7 05 44 14 03 c0 07 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x7
c0019953:	e9 b1 01 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c0019958:	83 ec 08             	sub    esp,0x8
c001995b:	68 06 91 02 c0       	push   0xc0029106
c0019960:	68 30 14 03 c0       	push   0xc0031430
c0019965:	e8 e6 6d fe ff       	call   c0000750 <strcmp>
c001996a:	83 c4 10             	add    esp,0x10
c001996d:	85 c0                	test   eax,eax
c001996f:	0f 94 c0             	sete   al
c0019972:	0f b6 c0             	movzx  eax,al
c0019975:	85 c0                	test   eax,eax
c0019977:	74 0f                	je     c0019988 <HalDetectFeatures()+0x76c>
c0019979:	c7 05 44 14 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x8
c0019983:	e9 81 01 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c0019988:	83 ec 08             	sub    esp,0x8
c001998b:	68 13 91 02 c0       	push   0xc0029113
c0019990:	68 30 14 03 c0       	push   0xc0031430
c0019995:	e8 b6 6d fe ff       	call   c0000750 <strcmp>
c001999a:	83 c4 10             	add    esp,0x10
c001999d:	85 c0                	test   eax,eax
c001999f:	0f 94 c0             	sete   al
c00199a2:	0f b6 c0             	movzx  eax,al
c00199a5:	85 c0                	test   eax,eax
c00199a7:	74 0f                	je     c00199b8 <HalDetectFeatures()+0x79c>
c00199a9:	c7 05 44 14 03 c0 09 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x9
c00199b3:	e9 51 01 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c00199b8:	83 ec 08             	sub    esp,0x8
c00199bb:	68 20 91 02 c0       	push   0xc0029120
c00199c0:	68 30 14 03 c0       	push   0xc0031430
c00199c5:	e8 86 6d fe ff       	call   c0000750 <strcmp>
c00199ca:	83 c4 10             	add    esp,0x10
c00199cd:	85 c0                	test   eax,eax
c00199cf:	0f 94 c0             	sete   al
c00199d2:	0f b6 c0             	movzx  eax,al
c00199d5:	85 c0                	test   eax,eax
c00199d7:	74 0f                	je     c00199e8 <HalDetectFeatures()+0x7cc>
c00199d9:	c7 05 44 14 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xa
c00199e3:	e9 21 01 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c00199e8:	83 ec 08             	sub    esp,0x8
c00199eb:	68 2d 91 02 c0       	push   0xc002912d
c00199f0:	68 30 14 03 c0       	push   0xc0031430
c00199f5:	e8 56 6d fe ff       	call   c0000750 <strcmp>
c00199fa:	83 c4 10             	add    esp,0x10
c00199fd:	85 c0                	test   eax,eax
c00199ff:	0f 94 c0             	sete   al
c0019a02:	0f b6 c0             	movzx  eax,al
c0019a05:	85 c0                	test   eax,eax
c0019a07:	74 0f                	je     c0019a18 <HalDetectFeatures()+0x7fc>
c0019a09:	c7 05 44 14 03 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xb
c0019a13:	e9 f1 00 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c0019a18:	83 ec 08             	sub    esp,0x8
c0019a1b:	68 3a 91 02 c0       	push   0xc002913a
c0019a20:	68 30 14 03 c0       	push   0xc0031430
c0019a25:	e8 26 6d fe ff       	call   c0000750 <strcmp>
c0019a2a:	83 c4 10             	add    esp,0x10
c0019a2d:	85 c0                	test   eax,eax
c0019a2f:	0f 94 c0             	sete   al
c0019a32:	0f b6 c0             	movzx  eax,al
c0019a35:	85 c0                	test   eax,eax
c0019a37:	74 0f                	je     c0019a48 <HalDetectFeatures()+0x82c>
c0019a39:	c7 05 44 14 03 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xc
c0019a43:	e9 c1 00 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c0019a48:	83 ec 08             	sub    esp,0x8
c0019a4b:	68 47 91 02 c0       	push   0xc0029147
c0019a50:	68 30 14 03 c0       	push   0xc0031430
c0019a55:	e8 f6 6c fe ff       	call   c0000750 <strcmp>
c0019a5a:	83 c4 10             	add    esp,0x10
c0019a5d:	85 c0                	test   eax,eax
c0019a5f:	0f 94 c0             	sete   al
c0019a62:	0f b6 c0             	movzx  eax,al
c0019a65:	85 c0                	test   eax,eax
c0019a67:	74 0f                	je     c0019a78 <HalDetectFeatures()+0x85c>
c0019a69:	c7 05 44 14 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xd
c0019a73:	e9 91 00 00 00       	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c0019a78:	83 ec 08             	sub    esp,0x8
c0019a7b:	68 54 91 02 c0       	push   0xc0029154
c0019a80:	68 30 14 03 c0       	push   0xc0031430
c0019a85:	e8 c6 6c fe ff       	call   c0000750 <strcmp>
c0019a8a:	83 c4 10             	add    esp,0x10
c0019a8d:	85 c0                	test   eax,eax
c0019a8f:	0f 94 c0             	sete   al
c0019a92:	0f b6 c0             	movzx  eax,al
c0019a95:	85 c0                	test   eax,eax
c0019a97:	74 0c                	je     c0019aa5 <HalDetectFeatures()+0x889>
c0019a99:	c7 05 44 14 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xd
c0019aa3:	eb 64                	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c0019aa5:	83 ec 08             	sub    esp,0x8
c0019aa8:	68 61 91 02 c0       	push   0xc0029161
c0019aad:	68 30 14 03 c0       	push   0xc0031430
c0019ab2:	e8 99 6c fe ff       	call   c0000750 <strcmp>
c0019ab7:	83 c4 10             	add    esp,0x10
c0019aba:	85 c0                	test   eax,eax
c0019abc:	0f 94 c0             	sete   al
c0019abf:	0f b6 c0             	movzx  eax,al
c0019ac2:	85 c0                	test   eax,eax
c0019ac4:	74 0c                	je     c0019ad2 <HalDetectFeatures()+0x8b6>
c0019ac6:	c7 05 44 14 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xd
c0019ad0:	eb 37                	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c0019ad2:	83 ec 08             	sub    esp,0x8
c0019ad5:	68 6e 91 02 c0       	push   0xc002916e
c0019ada:	68 30 14 03 c0       	push   0xc0031430
c0019adf:	e8 6c 6c fe ff       	call   c0000750 <strcmp>
c0019ae4:	83 c4 10             	add    esp,0x10
c0019ae7:	85 c0                	test   eax,eax
c0019ae9:	0f 94 c0             	sete   al
c0019aec:	0f b6 c0             	movzx  eax,al
c0019aef:	85 c0                	test   eax,eax
c0019af1:	74 0c                	je     c0019aff <HalDetectFeatures()+0x8e3>
c0019af3:	c7 05 44 14 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xd
c0019afd:	eb 0a                	jmp    c0019b09 <HalDetectFeatures()+0x8ed>
c0019aff:	c7 05 44 14 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x0
c0019b09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b0d:	83 f8 06             	cmp    eax,0x6
c0019b10:	0f 86 cc 00 00 00    	jbe    c0019be2 <HalDetectFeatures()+0x9c6>
c0019b16:	83 ec 0c             	sub    esp,0xc
c0019b19:	68 80 00 00 00       	push   0x80
c0019b1e:	e8 9d f6 ff ff       	call   c00191c0 <cpuidCheckExtendedEBX(unsigned int)>
c0019b23:	83 c4 10             	add    esp,0x10
c0019b26:	89 c1                	mov    ecx,eax
c0019b28:	83 e1 01             	and    ecx,0x1
c0019b2b:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019b30:	83 e0 fe             	and    eax,0xfffffffe
c0019b33:	88 c2                	mov    dl,al
c0019b35:	88 c8                	mov    al,cl
c0019b37:	09 d0                	or     eax,edx
c0019b39:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019b3e:	83 ec 0c             	sub    esp,0xc
c0019b41:	68 00 00 10 00       	push   0x100000
c0019b46:	e8 75 f6 ff ff       	call   c00191c0 <cpuidCheckExtendedEBX(unsigned int)>
c0019b4b:	83 c4 10             	add    esp,0x10
c0019b4e:	83 e0 01             	and    eax,0x1
c0019b51:	89 c1                	mov    ecx,eax
c0019b53:	c1 e1 06             	shl    ecx,0x6
c0019b56:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019b5b:	83 e0 bf             	and    eax,0xffffffbf
c0019b5e:	88 c2                	mov    dl,al
c0019b60:	88 c8                	mov    al,cl
c0019b62:	09 d0                	or     eax,edx
c0019b64:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019b69:	83 ec 0c             	sub    esp,0xc
c0019b6c:	68 00 00 04 00       	push   0x40000
c0019b71:	e8 4a f6 ff ff       	call   c00191c0 <cpuidCheckExtendedEBX(unsigned int)>
c0019b76:	83 c4 10             	add    esp,0x10
c0019b79:	83 e0 01             	and    eax,0x1
c0019b7c:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019b7f:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019b84:	83 e0 fd             	and    eax,0xfffffffd
c0019b87:	88 c2                	mov    dl,al
c0019b89:	88 c8                	mov    al,cl
c0019b8b:	09 d0                	or     eax,edx
c0019b8d:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019b92:	83 ec 0c             	sub    esp,0xc
c0019b95:	6a 04                	push   0x4
c0019b97:	e8 52 f6 ff ff       	call   c00191ee <cpuidCheckExtendedECX(unsigned int)>
c0019b9c:	83 c4 10             	add    esp,0x10
c0019b9f:	83 e0 01             	and    eax,0x1
c0019ba2:	89 c1                	mov    ecx,eax
c0019ba4:	c1 e1 05             	shl    ecx,0x5
c0019ba7:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019bac:	83 e0 df             	and    eax,0xffffffdf
c0019baf:	88 c2                	mov    dl,al
c0019bb1:	88 c8                	mov    al,cl
c0019bb3:	09 d0                	or     eax,edx
c0019bb5:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019bba:	83 ec 0c             	sub    esp,0xc
c0019bbd:	6a 20                	push   0x20
c0019bbf:	e8 2a f6 ff ff       	call   c00191ee <cpuidCheckExtendedECX(unsigned int)>
c0019bc4:	83 c4 10             	add    esp,0x10
c0019bc7:	83 e0 01             	and    eax,0x1
c0019bca:	89 c1                	mov    ecx,eax
c0019bcc:	c1 e1 04             	shl    ecx,0x4
c0019bcf:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019bd4:	83 e0 ef             	and    eax,0xffffffef
c0019bd7:	88 c2                	mov    dl,al
c0019bd9:	88 c8                	mov    al,cl
c0019bdb:	09 d0                	or     eax,edx
c0019bdd:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019be2:	83 ec 0c             	sub    esp,0xc
c0019be5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019be9:	50                   	push   eax
c0019bea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019bee:	50                   	push   eax
c0019bef:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019bf3:	50                   	push   eax
c0019bf4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019bf8:	50                   	push   eax
c0019bf9:	6a 01                	push   0x1
c0019bfb:	e8 c7 f4 ff ff       	call   c00190c7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019c00:	83 c4 20             	add    esp,0x20
c0019c03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c07:	83 e0 0f             	and    eax,0xf
c0019c0a:	a2 40 14 03 c0       	mov    ds:0xc0031440,al
c0019c0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c13:	c1 e8 04             	shr    eax,0x4
c0019c16:	83 e0 0f             	and    eax,0xf
c0019c19:	a2 3e 14 03 c0       	mov    ds:0xc003143e,al
c0019c1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c22:	c1 e8 08             	shr    eax,0x8
c0019c25:	83 e0 0f             	and    eax,0xf
c0019c28:	a2 3d 14 03 c0       	mov    ds:0xc003143d,al
c0019c2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c31:	c1 e8 0c             	shr    eax,0xc
c0019c34:	83 e0 03             	and    eax,0x3
c0019c37:	a2 3f 14 03 c0       	mov    ds:0xc003143f,al
c0019c3c:	a0 3d 14 03 c0       	mov    al,ds:0xc003143d
c0019c41:	0f b6 c0             	movzx  eax,al
c0019c44:	83 f8 06             	cmp    eax,0x6
c0019c47:	74 0d                	je     c0019c56 <HalDetectFeatures()+0xa3a>
c0019c49:	a0 3d 14 03 c0       	mov    al,ds:0xc003143d
c0019c4e:	0f b6 c0             	movzx  eax,al
c0019c51:	83 f8 0f             	cmp    eax,0xf
c0019c54:	75 18                	jne    c0019c6e <HalDetectFeatures()+0xa52>
c0019c56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c5a:	c1 e8 10             	shr    eax,0x10
c0019c5d:	c1 e0 04             	shl    eax,0x4
c0019c60:	88 c2                	mov    dl,al
c0019c62:	a0 3e 14 03 c0       	mov    al,ds:0xc003143e
c0019c67:	09 d0                	or     eax,edx
c0019c69:	a2 3e 14 03 c0       	mov    ds:0xc003143e,al
c0019c6e:	a0 3d 14 03 c0       	mov    al,ds:0xc003143d
c0019c73:	0f b6 c0             	movzx  eax,al
c0019c76:	83 f8 0f             	cmp    eax,0xf
c0019c79:	75 15                	jne    c0019c90 <HalDetectFeatures()+0xa74>
c0019c7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c7f:	c1 e8 14             	shr    eax,0x14
c0019c82:	88 c2                	mov    dl,al
c0019c84:	a0 3d 14 03 c0       	mov    al,ds:0xc003143d
c0019c89:	01 d0                	add    eax,edx
c0019c8b:	a2 3d 14 03 c0       	mov    ds:0xc003143d,al
c0019c90:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019c98:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019ca0:	85 c0                	test   eax,eax
c0019ca2:	74 2d                	je     c0019cd1 <HalDetectFeatures()+0xab5>
c0019ca4:	83 ec 0c             	sub    esp,0xc
c0019ca7:	68 00 00 00 40       	push   0x40000000
c0019cac:	e8 e1 f4 ff ff       	call   c0019192 <cpuidCheckECX(unsigned int)>
c0019cb1:	83 c4 10             	add    esp,0x10
c0019cb4:	83 e0 01             	and    eax,0x1
c0019cb7:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019cbe:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c0019cc3:	83 e0 fb             	and    eax,0xfffffffb
c0019cc6:	88 c2                	mov    dl,al
c0019cc8:	88 c8                	mov    al,cl
c0019cca:	09 d0                	or     eax,edx
c0019ccc:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c0019cd1:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019cd6:	83 c8 04             	or     eax,0x4
c0019cd9:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019cde:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019ce3:	83 c8 08             	or     eax,0x8
c0019ce6:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019ceb:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019cf0:	83 c8 10             	or     eax,0x10
c0019cf3:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019cf8:	83 ec 0c             	sub    esp,0xc
c0019cfb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cff:	50                   	push   eax
c0019d00:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019d04:	50                   	push   eax
c0019d05:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d09:	50                   	push   eax
c0019d0a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d0e:	50                   	push   eax
c0019d0f:	68 00 00 00 80       	push   0x80000000
c0019d14:	e8 ae f3 ff ff       	call   c00190c7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019d19:	83 c4 20             	add    esp,0x20
c0019d1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d20:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019d25:	0f 86 96 01 00 00    	jbe    c0019ec1 <HalDetectFeatures()+0xca5>
c0019d2b:	83 ec 0c             	sub    esp,0xc
c0019d2e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d32:	50                   	push   eax
c0019d33:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019d37:	50                   	push   eax
c0019d38:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d3c:	50                   	push   eax
c0019d3d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d41:	50                   	push   eax
c0019d42:	68 01 00 00 80       	push   0x80000001
c0019d47:	e8 7b f3 ff ff       	call   c00190c7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019d4c:	83 c4 20             	add    esp,0x20
c0019d4f:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019d54:	83 e0 7f             	and    eax,0x7f
c0019d57:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019d5c:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019d61:	83 e0 fb             	and    eax,0xfffffffb
c0019d64:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019d69:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019d6e:	83 e0 fd             	and    eax,0xfffffffd
c0019d71:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019d76:	e9 46 01 00 00       	jmp    c0019ec1 <HalDetectFeatures()+0xca5>
c0019d7b:	83 ec 08             	sub    esp,0x8
c0019d7e:	68 df 90 02 c0       	push   0xc00290df
c0019d83:	68 30 14 03 c0       	push   0xc0031430
c0019d88:	e8 b3 68 fe ff       	call   c0000640 <strcpy>
c0019d8d:	83 c4 10             	add    esp,0x10
c0019d90:	c7 05 44 14 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x1
c0019d9a:	e8 24 64 fe ff       	call   c00001c3 <is486>
c0019d9f:	85 c0                	test   eax,eax
c0019da1:	0f 95 c0             	setne  al
c0019da4:	0f b6 c0             	movzx  eax,al
c0019da7:	85 c0                	test   eax,eax
c0019da9:	0f 84 8d 00 00 00    	je     c0019e3c <HalDetectFeatures()+0xc20>
c0019daf:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019db4:	83 c8 04             	or     eax,0x4
c0019db7:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019dbc:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019dc1:	83 c8 08             	or     eax,0x8
c0019dc4:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019dc9:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019dce:	83 c8 10             	or     eax,0x10
c0019dd1:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019dd6:	0f 20 c0             	mov    eax,cr0
c0019dd9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019ddd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019de1:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019de8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019def:	83 e0 04             	and    eax,0x4
c0019df2:	74 1e                	je     c0019e12 <HalDetectFeatures()+0xbf6>
c0019df4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019dfb:	83 e0 10             	and    eax,0x10
c0019dfe:	75 12                	jne    c0019e12 <HalDetectFeatures()+0xbf6>
c0019e00:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019e05:	83 e0 f7             	and    eax,0xfffffff7
c0019e08:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019e0d:	e9 af 00 00 00       	jmp    c0019ec1 <HalDetectFeatures()+0xca5>
c0019e12:	e8 87 63 fe ff       	call   c000019e <hasLegacyFPU>
c0019e17:	83 e0 01             	and    eax,0x1
c0019e1a:	83 e0 01             	and    eax,0x1
c0019e1d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019e24:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019e29:	83 e0 f7             	and    eax,0xfffffff7
c0019e2c:	88 c2                	mov    dl,al
c0019e2e:	88 c8                	mov    al,cl
c0019e30:	09 d0                	or     eax,edx
c0019e32:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019e37:	e9 85 00 00 00       	jmp    c0019ec1 <HalDetectFeatures()+0xca5>
c0019e3c:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019e41:	83 e0 fb             	and    eax,0xfffffffb
c0019e44:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019e49:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019e4e:	83 e0 f7             	and    eax,0xfffffff7
c0019e51:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019e56:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019e5b:	83 e0 ef             	and    eax,0xffffffef
c0019e5e:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019e63:	0f 20 c0             	mov    eax,cr0
c0019e66:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019e6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019e6e:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019e75:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019e7c:	83 e0 04             	and    eax,0x4
c0019e7f:	74 1b                	je     c0019e9c <HalDetectFeatures()+0xc80>
c0019e81:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019e88:	83 e0 10             	and    eax,0x10
c0019e8b:	75 0f                	jne    c0019e9c <HalDetectFeatures()+0xc80>
c0019e8d:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019e92:	83 e0 f7             	and    eax,0xfffffff7
c0019e95:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019e9a:	eb 25                	jmp    c0019ec1 <HalDetectFeatures()+0xca5>
c0019e9c:	e8 fd 62 fe ff       	call   c000019e <hasLegacyFPU>
c0019ea1:	83 e0 01             	and    eax,0x1
c0019ea4:	83 e0 01             	and    eax,0x1
c0019ea7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019eae:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019eb3:	83 e0 f7             	and    eax,0xfffffff7
c0019eb6:	88 c2                	mov    dl,al
c0019eb8:	88 c8                	mov    al,cl
c0019eba:	09 d0                	or     eax,edx
c0019ebc:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019ec1:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019ec6:	83 e0 08             	and    eax,0x8
c0019ec9:	0f b6 c0             	movzx  eax,al
c0019ecc:	85 c0                	test   eax,eax
c0019ece:	75 25                	jne    c0019ef5 <HalDetectFeatures()+0xcd9>
c0019ed0:	e8 c9 62 fe ff       	call   c000019e <hasLegacyFPU>
c0019ed5:	83 e0 01             	and    eax,0x1
c0019ed8:	83 e0 01             	and    eax,0x1
c0019edb:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019ee2:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019ee7:	83 e0 f7             	and    eax,0xfffffff7
c0019eea:	88 c2                	mov    dl,al
c0019eec:	88 c8                	mov    al,cl
c0019eee:	09 d0                	or     eax,edx
c0019ef0:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019ef5:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019efa:	83 e0 08             	and    eax,0x8
c0019efd:	0f b6 c0             	movzx  eax,al
c0019f00:	85 c0                	test   eax,eax
c0019f02:	74 0d                	je     c0019f11 <HalDetectFeatures()+0xcf5>
c0019f04:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019f09:	83 c8 10             	or     eax,0x10
c0019f0c:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019f11:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019f16:	83 e0 10             	and    eax,0x10
c0019f19:	0f b6 c0             	movzx  eax,al
c0019f1c:	85 c0                	test   eax,eax
c0019f1e:	75 23                	jne    c0019f43 <HalDetectFeatures()+0xd27>
c0019f20:	e8 11 7c 00 00       	call   c0021b36 <x87Detect>
c0019f25:	83 e0 01             	and    eax,0x1
c0019f28:	83 e0 01             	and    eax,0x1
c0019f2b:	89 c1                	mov    ecx,eax
c0019f2d:	c1 e1 04             	shl    ecx,0x4
c0019f30:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019f35:	83 e0 ef             	and    eax,0xffffffef
c0019f38:	88 c2                	mov    dl,al
c0019f3a:	88 c8                	mov    al,cl
c0019f3c:	09 d0                	or     eax,edx
c0019f3e:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019f43:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019f48:	83 e0 01             	and    eax,0x1
c0019f4b:	0f b6 c0             	movzx  eax,al
c0019f4e:	85 c0                	test   eax,eax
c0019f50:	75 2d                	jne    c0019f7f <HalDetectFeatures()+0xd63>
c0019f52:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019f57:	83 e0 02             	and    eax,0x2
c0019f5a:	0f b6 c0             	movzx  eax,al
c0019f5d:	85 c0                	test   eax,eax
c0019f5f:	75 1e                	jne    c0019f7f <HalDetectFeatures()+0xd63>
c0019f61:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019f66:	83 e0 04             	and    eax,0x4
c0019f69:	0f b6 c0             	movzx  eax,al
c0019f6c:	85 c0                	test   eax,eax
c0019f6e:	75 0f                	jne    c0019f7f <HalDetectFeatures()+0xd63>
c0019f70:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019f75:	83 e0 08             	and    eax,0x8
c0019f78:	0f b6 c0             	movzx  eax,al
c0019f7b:	85 c0                	test   eax,eax
c0019f7d:	74 0d                	je     c0019f8c <HalDetectFeatures()+0xd70>
c0019f7f:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019f84:	83 c8 80             	or     eax,0xffffff80
c0019f87:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019f8c:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019f91:	83 e0 10             	and    eax,0x10
c0019f94:	0f b6 c0             	movzx  eax,al
c0019f97:	85 c0                	test   eax,eax
c0019f99:	74 2f                	je     c0019fca <HalDetectFeatures()+0xdae>
c0019f9b:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019fa0:	83 e0 80             	and    eax,0xffffff80
c0019fa3:	0f b6 c0             	movzx  eax,al
c0019fa6:	85 c0                	test   eax,eax
c0019fa8:	75 20                	jne    c0019fca <HalDetectFeatures()+0xdae>
c0019faa:	e8 41 7b 00 00       	call   c0021af0 <sseDetect>
c0019faf:	83 e0 01             	and    eax,0x1
c0019fb2:	89 c1                	mov    ecx,eax
c0019fb4:	c1 e1 07             	shl    ecx,0x7
c0019fb7:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019fbc:	83 e0 7f             	and    eax,0x7f
c0019fbf:	88 c2                	mov    dl,al
c0019fc1:	88 c8                	mov    al,cl
c0019fc3:	09 d0                	or     eax,edx
c0019fc5:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019fca:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019fcf:	83 e0 80             	and    eax,0xffffff80
c0019fd2:	0f b6 c0             	movzx  eax,al
c0019fd5:	85 c0                	test   eax,eax
c0019fd7:	74 1c                	je     c0019ff5 <HalDetectFeatures()+0xdd9>
c0019fd9:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019fde:	83 e0 20             	and    eax,0x20
c0019fe1:	0f b6 c0             	movzx  eax,al
c0019fe4:	85 c0                	test   eax,eax
c0019fe6:	75 0d                	jne    c0019ff5 <HalDetectFeatures()+0xdd9>
c0019fe8:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019fed:	83 e0 df             	and    eax,0xffffffdf
c0019ff0:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c0019ff5:	c6 05 48 14 03 c0 00 	mov    BYTE PTR ds:0xc0031448,0x0
c0019ffc:	90                   	nop
c0019ffd:	81 c4 90 00 00 00    	add    esp,0x90
c001a003:	5b                   	pop    ebx
c001a004:	5e                   	pop    esi
c001a005:	5f                   	pop    edi
c001a006:	c3                   	ret    

c001a007 <HalEnableNMI()>:
c001a007:	c6 05 2c 14 03 c0 01 	mov    BYTE PTR ds:0xc003142c,0x1
c001a00e:	6a 10                	push   0x10
c001a010:	e8 02 ef ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001a015:	83 c4 04             	add    esp,0x4
c001a018:	90                   	nop
c001a019:	c3                   	ret    

c001a01a <HalDisableNMI()>:
c001a01a:	c6 05 2c 14 03 c0 00 	mov    BYTE PTR ds:0xc003142c,0x0
c001a021:	6a 10                	push   0x10
c001a023:	e8 ef ee ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001a028:	83 c4 04             	add    esp,0x4
c001a02b:	90                   	nop
c001a02c:	c3                   	ret    

c001a02d <HalGetNMIState()>:
c001a02d:	a0 2c 14 03 c0       	mov    al,ds:0xc003142c
c001a032:	c3                   	ret    

c001a033 <x86rdmsr(unsigned int)>:
c001a033:	83 ec 1c             	sub    esp,0x1c
c001a036:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001a03b:	83 e0 08             	and    eax,0x8
c001a03e:	0f b6 c0             	movzx  eax,al
c001a041:	85 c0                	test   eax,eax
c001a043:	75 10                	jne    c001a055 <x86rdmsr(unsigned int)+0x22>
c001a045:	83 ec 0c             	sub    esp,0xc
c001a048:	68 7a 91 02 c0       	push   0xc002917a
c001a04d:	e8 66 5c ff ff       	call   c000fcb8 <KePanic(char const*)>
c001a052:	83 c4 10             	add    esp,0x10
c001a055:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a059:	89 c1                	mov    ecx,eax
c001a05b:	0f 32                	rdmsr  
c001a05d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a061:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a065:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a069:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a06d:	83 c4 1c             	add    esp,0x1c
c001a070:	c3                   	ret    

c001a071 <x86wrmsr(unsigned int, unsigned long long)>:
c001a071:	83 ec 1c             	sub    esp,0x1c
c001a074:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a078:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a07c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a080:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a084:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001a089:	83 e0 08             	and    eax,0x8
c001a08c:	0f b6 c0             	movzx  eax,al
c001a08f:	85 c0                	test   eax,eax
c001a091:	75 10                	jne    c001a0a3 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001a093:	83 ec 0c             	sub    esp,0xc
c001a096:	68 80 91 02 c0       	push   0xc0029180
c001a09b:	e8 18 5c ff ff       	call   c000fcb8 <KePanic(char const*)>
c001a0a0:	83 c4 10             	add    esp,0x10
c001a0a3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001a0a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0af:	0f 30                	wrmsr  
c001a0b1:	90                   	nop
c001a0b2:	83 c4 1c             	add    esp,0x1c
c001a0b5:	c3                   	ret    

c001a0b6 <HalHandleGeneralProtectionFault(void*, void*)>:
c001a0b6:	83 ec 0c             	sub    esp,0xc
c001a0b9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a0be:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0c0:	8a 40 62             	mov    al,BYTE PTR [eax+0x62]
c001a0c3:	0f b6 c0             	movzx  eax,al
c001a0c6:	85 c0                	test   eax,eax
c001a0c8:	74 11                	je     c001a0db <HalHandleGeneralProtectionFault(void*, void*)+0x25>
c001a0ca:	83 ec 0c             	sub    esp,0xc
c001a0cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0d1:	e8 89 db ff ff       	call   c0017c5f <Vm::faultHandler(regs*)>
c001a0d6:	83 c4 10             	add    esp,0x10
c001a0d9:	eb 02                	jmp    c001a0dd <HalHandleGeneralProtectionFault(void*, void*)+0x27>
c001a0db:	b0 00                	mov    al,0x0
c001a0dd:	83 c4 0c             	add    esp,0xc
c001a0e0:	c3                   	ret    

c001a0e1 <HalFindRSDP()>:
c001a0e1:	83 ec 1c             	sub    esp,0x1c
c001a0e4:	a1 7c 11 03 c0       	mov    eax,ds:0xc003117c
c001a0e9:	3d ff 07 00 00       	cmp    eax,0x7ff
c001a0ee:	7e 17                	jle    c001a107 <HalFindRSDP()+0x26>
c001a0f0:	83 ec 0c             	sub    esp,0xc
c001a0f3:	68 00 04 00 00       	push   0x400
c001a0f8:	e8 87 31 ff ff       	call   c000d284 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a0fd:	83 c4 10             	add    esp,0x10
c001a100:	0f b6 c0             	movzx  eax,al
c001a103:	85 c0                	test   eax,eax
c001a105:	74 04                	je     c001a10b <HalFindRSDP()+0x2a>
c001a107:	b0 01                	mov    al,0x1
c001a109:	eb 02                	jmp    c001a10d <HalFindRSDP()+0x2c>
c001a10b:	b0 00                	mov    al,0x0
c001a10d:	0f b6 c0             	movzx  eax,al
c001a110:	85 c0                	test   eax,eax
c001a112:	74 1d                	je     c001a131 <HalFindRSDP()+0x50>
c001a114:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001a119:	83 e0 fb             	and    eax,0xfffffffb
c001a11c:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c001a121:	83 ec 0c             	sub    esp,0xc
c001a124:	68 86 91 02 c0       	push   0xc0029186
c001a129:	e8 4e ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a12e:	83 c4 10             	add    esp,0x10
c001a131:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001a136:	83 e0 04             	and    eax,0x4
c001a139:	0f b6 c0             	movzx  eax,al
c001a13c:	85 c0                	test   eax,eax
c001a13e:	75 17                	jne    c001a157 <HalFindRSDP()+0x76>
c001a140:	83 ec 0c             	sub    esp,0xc
c001a143:	68 95 91 02 c0       	push   0xc0029195
c001a148:	e8 2f ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a14d:	83 c4 10             	add    esp,0x10
c001a150:	b8 00 00 00 00       	mov    eax,0x0
c001a155:	eb 63                	jmp    c001a1ba <HalFindRSDP()+0xd9>
c001a157:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001a15f:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001a167:	77 2f                	ja     c001a198 <HalFindRSDP()+0xb7>
c001a169:	83 ec 04             	sub    esp,0x4
c001a16c:	6a 08                	push   0x8
c001a16e:	68 9f 91 02 c0       	push   0xc002919f
c001a173:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a177:	e8 04 62 fe ff       	call   c0000380 <memcmp>
c001a17c:	83 c4 10             	add    esp,0x10
c001a17f:	85 c0                	test   eax,eax
c001a181:	0f 94 c0             	sete   al
c001a184:	0f b6 c0             	movzx  eax,al
c001a187:	85 c0                	test   eax,eax
c001a189:	74 06                	je     c001a191 <HalFindRSDP()+0xb0>
c001a18b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a18f:	eb 29                	jmp    c001a1ba <HalFindRSDP()+0xd9>
c001a191:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001a196:	eb c7                	jmp    c001a15f <HalFindRSDP()+0x7e>
c001a198:	83 ec 0c             	sub    esp,0xc
c001a19b:	68 a8 91 02 c0       	push   0xc00291a8
c001a1a0:	e8 d7 cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a1a5:	83 c4 10             	add    esp,0x10
c001a1a8:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001a1ad:	83 e0 fb             	and    eax,0xfffffffb
c001a1b0:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c001a1b5:	b8 00 00 00 00       	mov    eax,0x0
c001a1ba:	83 c4 1c             	add    esp,0x1c
c001a1bd:	c3                   	ret    

c001a1be <HalHandlePageFault(void*, void*)>:
c001a1be:	83 ec 1c             	sub    esp,0x1c
c001a1c1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a1c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a1cb:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001a1d1:	0f 20 d2             	mov    edx,cr2
c001a1d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a1dc:	83 ec 08             	sub    esp,0x8
c001a1df:	52                   	push   edx
c001a1e0:	50                   	push   eax
c001a1e1:	e8 36 9e ff ff       	call   c001401c <VAS::tryLoadBackOffDisk(unsigned long)>
c001a1e6:	83 c4 10             	add    esp,0x10
c001a1e9:	83 c4 1c             	add    esp,0x1c
c001a1ec:	c3                   	ret    

c001a1ed <HalHandleOpcodeFault(void*, void*)>:
c001a1ed:	83 ec 1c             	sub    esp,0x1c
c001a1f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1f8:	a0 48 14 03 c0       	mov    al,ds:0xc0031448
c001a1fd:	0f b6 c0             	movzx  eax,al
c001a200:	85 c0                	test   eax,eax
c001a202:	74 25                	je     c001a229 <HalHandleOpcodeFault(void*, void*)+0x3c>
c001a204:	83 ec 0c             	sub    esp,0xc
c001a207:	68 a0 93 02 c0       	push   0xc00293a0
c001a20c:	e8 6b cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a211:	83 c4 10             	add    esp,0x10
c001a214:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a218:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a21b:	8d 50 19             	lea    edx,[eax+0x19]
c001a21e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a222:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a225:	b0 01                	mov    al,0x1
c001a227:	eb 02                	jmp    c001a22b <HalHandleOpcodeFault(void*, void*)+0x3e>
c001a229:	b0 00                	mov    al,0x0
c001a22b:	83 c4 1c             	add    esp,0x1c
c001a22e:	c3                   	ret    

c001a22f <HalDisplayDebugInfo(void*)>:
c001a22f:	83 ec 2c             	sub    esp,0x2c
c001a232:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a236:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a23a:	0f 20 c0             	mov    eax,cr0
c001a23d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a241:	0f 20 d0             	mov    eax,cr2
c001a244:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a248:	0f 20 d8             	mov    eax,cr3
c001a24b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a24f:	0f 20 e0             	mov    eax,cr4
c001a252:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a256:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a25a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a25d:	83 ec 08             	sub    esp,0x8
c001a260:	50                   	push   eax
c001a261:	68 c2 91 02 c0       	push   0xc00291c2
c001a266:	e8 11 cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a26b:	83 c4 10             	add    esp,0x10
c001a26e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a272:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001a275:	83 ec 08             	sub    esp,0x8
c001a278:	50                   	push   eax
c001a279:	68 b3 91 02 c0       	push   0xc00291b3
c001a27e:	e8 f9 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a283:	83 c4 10             	add    esp,0x10
c001a286:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a28a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001a28d:	83 ec 08             	sub    esp,0x8
c001a290:	50                   	push   eax
c001a291:	68 be 91 02 c0       	push   0xc00291be
c001a296:	e8 e1 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a29b:	83 c4 10             	add    esp,0x10
c001a29e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a2a5:	83 ec 08             	sub    esp,0x8
c001a2a8:	50                   	push   eax
c001a2a9:	68 cd 91 02 c0       	push   0xc00291cd
c001a2ae:	e8 c9 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a2b3:	83 c4 10             	add    esp,0x10
c001a2b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2ba:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001a2bd:	83 ec 08             	sub    esp,0x8
c001a2c0:	50                   	push   eax
c001a2c1:	68 d8 91 02 c0       	push   0xc00291d8
c001a2c6:	e8 b1 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a2cb:	83 c4 10             	add    esp,0x10
c001a2ce:	83 ec 08             	sub    esp,0x8
c001a2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2d5:	68 e3 91 02 c0       	push   0xc00291e3
c001a2da:	e8 9d cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a2df:	83 c4 10             	add    esp,0x10
c001a2e2:	83 ec 08             	sub    esp,0x8
c001a2e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2e9:	68 ee 91 02 c0       	push   0xc00291ee
c001a2ee:	e8 89 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a2f3:	83 c4 10             	add    esp,0x10
c001a2f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2fa:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a2fd:	c1 e0 05             	shl    eax,0x5
c001a300:	8d 90 00 b6 02 c0    	lea    edx,[eax-0x3ffd4a00]
c001a306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a30a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a30d:	83 ec 04             	sub    esp,0x4
c001a310:	52                   	push   edx
c001a311:	50                   	push   eax
c001a312:	68 f9 91 02 c0       	push   0xc00291f9
c001a317:	e8 60 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a31c:	83 c4 10             	add    esp,0x10
c001a31f:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a324:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a32a:	83 ec 0c             	sub    esp,0xc
c001a32d:	50                   	push   eax
c001a32e:	e8 a4 7f ff ff       	call   c00122d7 <setActiveTerminal(VgaText*)>
c001a333:	83 c4 10             	add    esp,0x10
c001a336:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a33b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a341:	83 ec 08             	sub    esp,0x8
c001a344:	68 08 92 02 c0       	push   0xc0029208
c001a349:	50                   	push   eax
c001a34a:	e8 d5 82 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a34f:	83 c4 10             	add    esp,0x10
c001a352:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a357:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a35d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a361:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a364:	83 ec 08             	sub    esp,0x8
c001a367:	52                   	push   edx
c001a368:	50                   	push   eax
c001a369:	e8 70 82 ff ff       	call   c00125de <VgaText::putx(unsigned int)>
c001a36e:	83 c4 10             	add    esp,0x10
c001a371:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a376:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a37c:	83 ec 08             	sub    esp,0x8
c001a37f:	68 16 92 02 c0       	push   0xc0029216
c001a384:	50                   	push   eax
c001a385:	e8 9a 82 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a38a:	83 c4 10             	add    esp,0x10
c001a38d:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a392:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a398:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001a39d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a39f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a3a2:	83 c2 0c             	add    edx,0xc
c001a3a5:	83 ec 08             	sub    esp,0x8
c001a3a8:	52                   	push   edx
c001a3a9:	50                   	push   eax
c001a3aa:	e8 75 82 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a3af:	83 c4 10             	add    esp,0x10
c001a3b2:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a3b7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3bd:	83 ec 08             	sub    esp,0x8
c001a3c0:	68 1f 92 02 c0       	push   0xc002921f
c001a3c5:	50                   	push   eax
c001a3c6:	e8 59 82 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a3cb:	83 c4 10             	add    esp,0x10
c001a3ce:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a3d3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3dd:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001a3e0:	83 ec 08             	sub    esp,0x8
c001a3e3:	52                   	push   edx
c001a3e4:	50                   	push   eax
c001a3e5:	e8 f4 81 ff ff       	call   c00125de <VgaText::putx(unsigned int)>
c001a3ea:	83 c4 10             	add    esp,0x10
c001a3ed:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a3f2:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3f8:	83 ec 08             	sub    esp,0x8
c001a3fb:	68 27 92 02 c0       	push   0xc0029227
c001a400:	50                   	push   eax
c001a401:	e8 1e 82 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a406:	83 c4 10             	add    esp,0x10
c001a409:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a40e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a414:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a418:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001a41b:	83 ec 08             	sub    esp,0x8
c001a41e:	52                   	push   edx
c001a41f:	50                   	push   eax
c001a420:	e8 b9 81 ff ff       	call   c00125de <VgaText::putx(unsigned int)>
c001a425:	83 c4 10             	add    esp,0x10
c001a428:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a42d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a433:	83 ec 08             	sub    esp,0x8
c001a436:	68 2f 92 02 c0       	push   0xc002922f
c001a43b:	50                   	push   eax
c001a43c:	e8 e3 81 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a441:	83 c4 10             	add    esp,0x10
c001a444:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a449:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a44f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a453:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001a456:	83 ec 08             	sub    esp,0x8
c001a459:	52                   	push   edx
c001a45a:	50                   	push   eax
c001a45b:	e8 7e 81 ff ff       	call   c00125de <VgaText::putx(unsigned int)>
c001a460:	83 c4 10             	add    esp,0x10
c001a463:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a468:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a46e:	83 ec 08             	sub    esp,0x8
c001a471:	68 37 92 02 c0       	push   0xc0029237
c001a476:	50                   	push   eax
c001a477:	e8 a8 81 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a47c:	83 c4 10             	add    esp,0x10
c001a47f:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a484:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a48a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a48e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a491:	83 ec 08             	sub    esp,0x8
c001a494:	52                   	push   edx
c001a495:	50                   	push   eax
c001a496:	e8 43 81 ff ff       	call   c00125de <VgaText::putx(unsigned int)>
c001a49b:	83 c4 10             	add    esp,0x10
c001a49e:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a4a3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4a9:	83 ec 08             	sub    esp,0x8
c001a4ac:	68 3f 92 02 c0       	push   0xc002923f
c001a4b1:	50                   	push   eax
c001a4b2:	e8 6d 81 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a4b7:	83 c4 10             	add    esp,0x10
c001a4ba:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a4bf:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a4c9:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a4cc:	83 ec 08             	sub    esp,0x8
c001a4cf:	52                   	push   edx
c001a4d0:	50                   	push   eax
c001a4d1:	e8 08 81 ff ff       	call   c00125de <VgaText::putx(unsigned int)>
c001a4d6:	83 c4 10             	add    esp,0x10
c001a4d9:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a4de:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4e4:	83 ec 08             	sub    esp,0x8
c001a4e7:	68 47 92 02 c0       	push   0xc0029247
c001a4ec:	50                   	push   eax
c001a4ed:	e8 32 81 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a4f2:	83 c4 10             	add    esp,0x10
c001a4f5:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a4fa:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a500:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a504:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a507:	83 ec 08             	sub    esp,0x8
c001a50a:	52                   	push   edx
c001a50b:	50                   	push   eax
c001a50c:	e8 cd 80 ff ff       	call   c00125de <VgaText::putx(unsigned int)>
c001a511:	83 c4 10             	add    esp,0x10
c001a514:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a519:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a51f:	83 ec 08             	sub    esp,0x8
c001a522:	68 4f 92 02 c0       	push   0xc002924f
c001a527:	50                   	push   eax
c001a528:	e8 f7 80 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a52d:	83 c4 10             	add    esp,0x10
c001a530:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a535:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a53b:	83 ec 08             	sub    esp,0x8
c001a53e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a542:	50                   	push   eax
c001a543:	e8 96 80 ff ff       	call   c00125de <VgaText::putx(unsigned int)>
c001a548:	83 c4 10             	add    esp,0x10
c001a54b:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a550:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a556:	83 ec 08             	sub    esp,0x8
c001a559:	68 58 92 02 c0       	push   0xc0029258
c001a55e:	50                   	push   eax
c001a55f:	e8 c0 80 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a564:	83 c4 10             	add    esp,0x10
c001a567:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a56c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a572:	83 ec 08             	sub    esp,0x8
c001a575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a579:	50                   	push   eax
c001a57a:	e8 5f 80 ff ff       	call   c00125de <VgaText::putx(unsigned int)>
c001a57f:	83 c4 10             	add    esp,0x10
c001a582:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a587:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a58d:	83 ec 08             	sub    esp,0x8
c001a590:	68 60 92 02 c0       	push   0xc0029260
c001a595:	50                   	push   eax
c001a596:	e8 89 80 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a59b:	83 c4 10             	add    esp,0x10
c001a59e:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a5a3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a5a9:	83 ec 08             	sub    esp,0x8
c001a5ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5b0:	50                   	push   eax
c001a5b1:	e8 28 80 ff ff       	call   c00125de <VgaText::putx(unsigned int)>
c001a5b6:	83 c4 10             	add    esp,0x10
c001a5b9:	fa                   	cli    
c001a5ba:	f4                   	hlt    
c001a5bb:	eb fe                	jmp    c001a5bb <HalDisplayDebugInfo(void*)+0x38c>

c001a5bd <HalReceivedNMI()>:
c001a5bd:	83 ec 1c             	sub    esp,0x1c
c001a5c0:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a5c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5cb:	89 c2                	mov    edx,eax
c001a5cd:	ec                   	in     al,dx
c001a5ce:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a5d2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a5d6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a5da:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a5e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5e5:	89 c2                	mov    edx,eax
c001a5e7:	ec                   	in     al,dx
c001a5e8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a5ec:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a5f0:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a5f4:	83 ec 0c             	sub    esp,0xc
c001a5f7:	68 68 92 02 c0       	push   0xc0029268
c001a5fc:	e8 7b c9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a601:	83 c4 10             	add    esp,0x10
c001a604:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a609:	83 e0 10             	and    eax,0x10
c001a60c:	74 10                	je     c001a61e <HalReceivedNMI()+0x61>
c001a60e:	83 ec 0c             	sub    esp,0xc
c001a611:	68 79 92 02 c0       	push   0xc0029279
c001a616:	e8 9d 56 ff ff       	call   c000fcb8 <KePanic(char const*)>
c001a61b:	83 c4 10             	add    esp,0x10
c001a61e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a623:	83 e0 40             	and    eax,0x40
c001a626:	74 10                	je     c001a638 <HalReceivedNMI()+0x7b>
c001a628:	83 ec 0c             	sub    esp,0xc
c001a62b:	68 86 92 02 c0       	push   0xc0029286
c001a630:	e8 83 56 ff ff       	call   c000fcb8 <KePanic(char const*)>
c001a635:	83 c4 10             	add    esp,0x10
c001a638:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a63c:	0f be c0             	movsx  eax,al
c001a63f:	85 c0                	test   eax,eax
c001a641:	79 10                	jns    c001a653 <HalReceivedNMI()+0x96>
c001a643:	83 ec 0c             	sub    esp,0xc
c001a646:	68 90 92 02 c0       	push   0xc0029290
c001a64b:	e8 68 56 ff ff       	call   c000fcb8 <KePanic(char const*)>
c001a650:	83 c4 10             	add    esp,0x10
c001a653:	90                   	nop
c001a654:	83 c4 1c             	add    esp,0x1c
c001a657:	c3                   	ret    

c001a658 <HalSystemIdle()>:
c001a658:	56                   	push   esi
c001a659:	53                   	push   ebx
c001a65a:	83 ec 14             	sub    esp,0x14
c001a65d:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c001a662:	83 e0 10             	and    eax,0x10
c001a665:	0f b6 c0             	movzx  eax,al
c001a668:	85 c0                	test   eax,eax
c001a66a:	74 43                	je     c001a6af <HalSystemIdle()+0x57>
c001a66c:	83 ec 0c             	sub    esp,0xc
c001a66f:	68 e1 00 00 00       	push   0xe1
c001a674:	e8 ba f9 ff ff       	call   c001a033 <x86rdmsr(unsigned int)>
c001a679:	83 c4 10             	add    esp,0x10
c001a67c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a680:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a684:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a688:	83 e0 02             	and    eax,0x2
c001a68b:	89 c3                	mov    ebx,eax
c001a68d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a691:	83 e0 00             	and    eax,0x0
c001a694:	89 c6                	mov    esi,eax
c001a696:	83 ec 04             	sub    esp,0x4
c001a699:	56                   	push   esi
c001a69a:	53                   	push   ebx
c001a69b:	68 e1 00 00 00       	push   0xe1
c001a6a0:	e8 cc f9 ff ff       	call   c001a071 <x86wrmsr(unsigned int, unsigned long long)>
c001a6a5:	83 c4 10             	add    esp,0x10
c001a6a8:	e8 e7 5a fe ff       	call   c0000194 <doTPAUSE>
c001a6ad:	eb 01                	jmp    c001a6b0 <HalSystemIdle()+0x58>
c001a6af:	f4                   	hlt    
c001a6b0:	90                   	nop
c001a6b1:	83 c4 14             	add    esp,0x14
c001a6b4:	5b                   	pop    ebx
c001a6b5:	5e                   	pop    esi
c001a6b6:	c3                   	ret    

c001a6b7 <i386SaveCoprocessor(void*)>:
c001a6b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6bb:	83 c0 3f             	add    eax,0x3f
c001a6be:	83 e0 c0             	and    eax,0xffffffc0
c001a6c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6c5:	ff 25 10 14 03 c0    	jmp    DWORD PTR ds:0xc0031410

c001a6cb <i386LoadCoprocessor(void*)>:
c001a6cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6cf:	83 c0 3f             	add    eax,0x3f
c001a6d2:	83 e0 c0             	and    eax,0xffffffc0
c001a6d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6d9:	ff 25 0c 14 03 c0    	jmp    DWORD PTR ds:0xc003140c

c001a6df <x87EmulHandler(regs*, void*)>:
c001a6df:	53                   	push   ebx
c001a6e0:	83 ec 08             	sub    esp,0x8
c001a6e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6e8:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a6ec:	74 10                	je     c001a6fe <x87EmulHandler(regs*, void*)+0x1f>
c001a6ee:	83 ec 0c             	sub    esp,0xc
c001a6f1:	68 9d 92 02 c0       	push   0xc002929d
c001a6f6:	e8 bd 55 ff ff       	call   c000fcb8 <KePanic(char const*)>
c001a6fb:	83 c4 10             	add    esp,0x10
c001a6fe:	0f 20 c0             	mov    eax,cr0
c001a701:	a8 08                	test   al,0x8
c001a703:	74 59                	je     c001a75e <x87EmulHandler(regs*, void*)+0x7f>
c001a705:	0f 06                	clts   
c001a707:	a1 08 14 03 c0       	mov    eax,ds:0xc0031408
c001a70c:	85 c0                	test   eax,eax
c001a70e:	74 0e                	je     c001a71e <x87EmulHandler(regs*, void*)+0x3f>
c001a710:	83 ec 0c             	sub    esp,0xc
c001a713:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a716:	e8 9c ff ff ff       	call   c001a6b7 <i386SaveCoprocessor(void*)>
c001a71b:	83 c4 10             	add    esp,0x10
c001a71e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a724:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a728:	75 12                	jne    c001a73c <x87EmulHandler(regs*, void*)+0x5d>
c001a72a:	83 ec 0c             	sub    esp,0xc
c001a72d:	68 40 02 00 00       	push   0x240
c001a732:	e8 2c 51 ff ff       	call   c000f863 <malloc>
c001a737:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a73a:	eb 10                	jmp    c001a74c <x87EmulHandler(regs*, void*)+0x6d>
c001a73c:	83 ec 0c             	sub    esp,0xc
c001a73f:	a1 08 14 03 c0       	mov    eax,ds:0xc0031408
c001a744:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a747:	e8 7f ff ff ff       	call   c001a6cb <i386LoadCoprocessor(void*)>
c001a74c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a751:	83 c4 10             	add    esp,0x10
c001a754:	a3 08 14 03 c0       	mov    ds:0xc0031408,eax
c001a759:	83 c4 08             	add    esp,0x8
c001a75c:	5b                   	pop    ebx
c001a75d:	c3                   	ret    
c001a75e:	83 ec 0c             	sub    esp,0xc
c001a761:	68 b1 92 02 c0       	push   0xc00292b1
c001a766:	e8 11 c8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a76b:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001a773:	83 c4 18             	add    esp,0x18
c001a776:	5b                   	pop    ebx
c001a777:	e9 c4 c8 ff ff       	jmp    c0017040 <KeTerminateCurrentThread(int)>

c001a77c <HalInitialiseCoprocessor()>:
c001a77c:	83 ec 10             	sub    esp,0x10
c001a77f:	c7 05 08 14 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031408,0x0
c001a789:	6a 00                	push   0x0
c001a78b:	68 df a6 01 c0       	push   0xc001a6df
c001a790:	6a 07                	push   0x7
c001a792:	e8 de 07 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a797:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001a79c:	83 c4 10             	add    esp,0x10
c001a79f:	a8 80                	test   al,0x80
c001a7a1:	74 1c                	je     c001a7bf <HalInitialiseCoprocessor()+0x43>
c001a7a3:	c7 05 10 14 03 c0 08 1b 02 c0 	mov    DWORD PTR ds:0xc0031410,0xc0021b08
c001a7ad:	c7 05 0c 14 03 c0 10 1b 02 c0 	mov    DWORD PTR ds:0xc003140c,0xc0021b10
c001a7b7:	83 c4 0c             	add    esp,0xc
c001a7ba:	e9 59 73 00 00       	jmp    c0021b18 <sseInit>
c001a7bf:	a8 10                	test   al,0x10
c001a7c1:	74 1c                	je     c001a7df <HalInitialiseCoprocessor()+0x63>
c001a7c3:	c7 05 10 14 03 c0 57 1b 02 c0 	mov    DWORD PTR ds:0xc0031410,0xc0021b57
c001a7cd:	c7 05 0c 14 03 c0 5e 1b 02 c0 	mov    DWORD PTR ds:0xc003140c,0xc0021b5e
c001a7d7:	83 c4 0c             	add    esp,0xc
c001a7da:	e9 86 73 00 00       	jmp    c0021b65 <x87Init>
c001a7df:	c7 05 10 14 03 c0 06 8f 01 c0 	mov    DWORD PTR ds:0xc0031410,0xc0018f06
c001a7e9:	c7 05 0c 14 03 c0 06 8f 01 c0 	mov    DWORD PTR ds:0xc003140c,0xc0018f06
c001a7f3:	0f 20 c0             	mov    eax,cr0
c001a7f6:	83 c8 04             	or     eax,0x4
c001a7f9:	0f 22 c0             	mov    cr0,eax
c001a7fc:	83 c4 0c             	add    esp,0xc
c001a7ff:	c3                   	ret    

c001a800 <HalPanic(char const*)>:
c001a800:	53                   	push   ebx
c001a801:	83 ec 10             	sub    esp,0x10
c001a804:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a808:	fa                   	cli    
c001a809:	53                   	push   ebx
c001a80a:	68 c7 92 02 c0       	push   0xc00292c7
c001a80f:	e8 68 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a814:	a1 04 14 03 c0       	mov    eax,ds:0xc0031404
c001a819:	83 c4 10             	add    esp,0x10
c001a81c:	85 c0                	test   eax,eax
c001a81e:	74 09                	je     c001a829 <HalPanic(char const*)+0x29>
c001a820:	83 ec 0c             	sub    esp,0xc
c001a823:	53                   	push   ebx
c001a824:	ff d0                	call   eax
c001a826:	83 c4 10             	add    esp,0x10
c001a829:	a1 f4 11 03 c0       	mov    eax,ds:0xc00311f4
c001a82e:	85 c0                	test   eax,eax
c001a830:	0f 84 dc 00 00 00    	je     c001a912 <HalPanic(char const*)+0x112>
c001a836:	52                   	push   edx
c001a837:	6a 01                	push   0x1
c001a839:	6a 0f                	push   0xf
c001a83b:	50                   	push   eax
c001a83c:	e8 d5 78 ff ff       	call   c0012116 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a841:	59                   	pop    ecx
c001a842:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a848:	e8 d5 7a ff ff       	call   c0012322 <VgaText::clearScreen()>
c001a84d:	58                   	pop    eax
c001a84e:	5a                   	pop    edx
c001a84f:	68 bc 82 02 c0       	push   0xc00282bc
c001a854:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a85a:	e8 ef 78 ff ff       	call   c001214e <VgaText::setTitle(char*)>
c001a85f:	83 c4 0c             	add    esp,0xc
c001a862:	6a 01                	push   0x1
c001a864:	6a 0f                	push   0xf
c001a866:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a86c:	e8 a5 78 ff ff       	call   c0012116 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a871:	59                   	pop    ecx
c001a872:	58                   	pop    eax
c001a873:	68 e0 92 02 c0       	push   0xc00292e0
c001a878:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a87e:	e8 a1 7d ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a883:	83 c4 0c             	add    esp,0xc
c001a886:	6a 0f                	push   0xf
c001a888:	6a 01                	push   0x1
c001a88a:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a890:	e8 81 78 ff ff       	call   c0012116 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a895:	58                   	pop    eax
c001a896:	5a                   	pop    edx
c001a897:	68 e9 92 02 c0       	push   0xc00292e9
c001a89c:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a8a2:	e8 7d 7d ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a8a7:	83 c4 0c             	add    esp,0xc
c001a8aa:	6a 01                	push   0x1
c001a8ac:	6a 0f                	push   0xf
c001a8ae:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a8b4:	e8 5d 78 ff ff       	call   c0012116 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a8b9:	59                   	pop    ecx
c001a8ba:	58                   	pop    eax
c001a8bb:	68 2d 93 02 c0       	push   0xc002932d
c001a8c0:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a8c6:	e8 59 7d ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a8cb:	58                   	pop    eax
c001a8cc:	5a                   	pop    edx
c001a8cd:	68 f6 92 02 c0       	push   0xc00292f6
c001a8d2:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a8d8:	e8 47 7d ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a8dd:	59                   	pop    ecx
c001a8de:	58                   	pop    eax
c001a8df:	68 30 93 02 c0       	push   0xc0029330
c001a8e4:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a8ea:	e8 35 7d ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a8ef:	58                   	pop    eax
c001a8f0:	5a                   	pop    edx
c001a8f1:	53                   	push   ebx
c001a8f2:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a8f8:	e8 27 7d ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a8fd:	59                   	pop    ecx
c001a8fe:	5b                   	pop    ebx
c001a8ff:	68 2d 93 02 c0       	push   0xc002932d
c001a904:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a90a:	e8 15 7d ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001a90f:	83 c4 10             	add    esp,0x10
c001a912:	eb fe                	jmp    c001a912 <HalPanic(char const*)+0x112>

c001a914 <HalQueryPerformanceCounter()>:
c001a914:	31 c0                	xor    eax,eax
c001a916:	31 d2                	xor    edx,edx
c001a918:	f6 05 4e 14 03 c0 08 	test   BYTE PTR ds:0xc003144e,0x8
c001a91f:	75 02                	jne    c001a923 <HalQueryPerformanceCounter()+0xf>
c001a921:	0f 31                	rdtsc  
c001a923:	c3                   	ret    

c001a924 <HalInitialise()>:
c001a924:	53                   	push   ebx
c001a925:	83 ec 08             	sub    esp,0x8
c001a928:	e8 ef e8 ff ff       	call   c001921c <HalDetectFeatures()>
c001a92d:	83 ec 0c             	sub    esp,0xc
c001a930:	68 07 8f 01 c0       	push   0xc0018f07
c001a935:	e8 c0 5c ff ff       	call   c00105fa <KeRegisterRestartHandler(void (*)())>
c001a93a:	c7 04 24 12 8f 01 c0 	mov    DWORD PTR [esp],0xc0018f12
c001a941:	e8 aa 5c ff ff       	call   c00105f0 <KeRegisterShutdownHandler(void (*)())>
c001a946:	c7 04 24 13 8f 01 c0 	mov    DWORD PTR [esp],0xc0018f13
c001a94d:	e8 b2 5c ff ff       	call   c0010604 <KeRegisterSleepHandler(void (*)())>
c001a952:	e8 59 1a ff ff       	call   c000c3b0 <scanMADT()>
c001a957:	83 c4 10             	add    esp,0x10
c001a95a:	80 3d 40 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e40,0x0
c001a961:	75 0d                	jne    c001a970 <HalInitialise()+0x4c>
c001a963:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001a968:	83 e0 fe             	and    eax,0xfffffffe
c001a96b:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c001a970:	e8 df 08 00 00       	call   c001b254 <picOpen()>
c001a975:	f6 05 4c 14 03 c0 01 	test   BYTE PTR ds:0xc003144c,0x1
c001a97c:	74 0a                	je     c001a988 <HalInitialise()+0x64>
c001a97e:	e8 21 08 00 00       	call   c001b1a4 <picDisable()>
c001a983:	e8 86 e1 ff ff       	call   c0018b0e <apicOpen()>
c001a988:	bb 0f 00 00 00       	mov    ebx,0xf
c001a98d:	50                   	push   eax
c001a98e:	6a 00                	push   0x0
c001a990:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a995:	6a 02                	push   0x2
c001a997:	e8 d9 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a99c:	83 c4 0c             	add    esp,0xc
c001a99f:	6a 00                	push   0x0
c001a9a1:	68 18 e8 00 c0       	push   0xc000e818
c001a9a6:	6a 06                	push   0x6
c001a9a8:	e8 c8 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9ad:	83 c4 0c             	add    esp,0xc
c001a9b0:	6a 00                	push   0x0
c001a9b2:	68 b0 e8 00 c0       	push   0xc000e8b0
c001a9b7:	6a 08                	push   0x8
c001a9b9:	e8 b7 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9be:	83 c4 0c             	add    esp,0xc
c001a9c1:	6a 00                	push   0x0
c001a9c3:	68 70 e7 00 c0       	push   0xc000e770
c001a9c8:	6a 0d                	push   0xd
c001a9ca:	e8 a6 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9cf:	83 c4 0c             	add    esp,0xc
c001a9d2:	6a 00                	push   0x0
c001a9d4:	68 c4 e7 00 c0       	push   0xc000e7c4
c001a9d9:	6a 0e                	push   0xe
c001a9db:	e8 95 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9e0:	83 c4 0c             	add    esp,0xc
c001a9e3:	6a 00                	push   0x0
c001a9e5:	68 6c e8 00 c0       	push   0xc000e86c
c001a9ea:	6a 00                	push   0x0
c001a9ec:	e8 84 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9f1:	83 c4 0c             	add    esp,0xc
c001a9f4:	6a 00                	push   0x0
c001a9f6:	68 6c e8 00 c0       	push   0xc000e86c
c001a9fb:	6a 01                	push   0x1
c001a9fd:	e8 73 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa02:	83 c4 0c             	add    esp,0xc
c001aa05:	6a 00                	push   0x0
c001aa07:	68 6c e8 00 c0       	push   0xc000e86c
c001aa0c:	6a 03                	push   0x3
c001aa0e:	e8 62 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa13:	83 c4 0c             	add    esp,0xc
c001aa16:	6a 00                	push   0x0
c001aa18:	68 6c e8 00 c0       	push   0xc000e86c
c001aa1d:	6a 04                	push   0x4
c001aa1f:	e8 51 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa24:	83 c4 0c             	add    esp,0xc
c001aa27:	6a 00                	push   0x0
c001aa29:	68 6c e8 00 c0       	push   0xc000e86c
c001aa2e:	6a 05                	push   0x5
c001aa30:	e8 40 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa35:	83 c4 0c             	add    esp,0xc
c001aa38:	6a 00                	push   0x0
c001aa3a:	68 6c e8 00 c0       	push   0xc000e86c
c001aa3f:	6a 00                	push   0x0
c001aa41:	e8 2f 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa46:	83 c4 0c             	add    esp,0xc
c001aa49:	6a 00                	push   0x0
c001aa4b:	68 6c e8 00 c0       	push   0xc000e86c
c001aa50:	6a 01                	push   0x1
c001aa52:	e8 1e 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa57:	83 c4 0c             	add    esp,0xc
c001aa5a:	6a 00                	push   0x0
c001aa5c:	68 6c e8 00 c0       	push   0xc000e86c
c001aa61:	6a 09                	push   0x9
c001aa63:	e8 0d 05 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa68:	83 c4 0c             	add    esp,0xc
c001aa6b:	6a 00                	push   0x0
c001aa6d:	68 6c e8 00 c0       	push   0xc000e86c
c001aa72:	6a 0a                	push   0xa
c001aa74:	e8 fc 04 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa79:	83 c4 0c             	add    esp,0xc
c001aa7c:	6a 00                	push   0x0
c001aa7e:	68 6c e8 00 c0       	push   0xc000e86c
c001aa83:	6a 0b                	push   0xb
c001aa85:	e8 eb 04 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa8a:	83 c4 10             	add    esp,0x10
c001aa8d:	50                   	push   eax
c001aa8e:	6a 00                	push   0x0
c001aa90:	68 6c e8 00 c0       	push   0xc000e86c
c001aa95:	53                   	push   ebx
c001aa96:	43                   	inc    ebx
c001aa97:	e8 d9 04 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa9c:	83 c4 10             	add    esp,0x10
c001aa9f:	83 fb 1e             	cmp    ebx,0x1e
c001aaa2:	75 e9                	jne    c001aa8d <HalInitialise()+0x169>
c001aaa4:	50                   	push   eax
c001aaa5:	6a 00                	push   0x0
c001aaa7:	68 b0 1f 01 c0       	push   0xc0011fb0
c001aaac:	6a 60                	push   0x60
c001aaae:	e8 c2 04 00 00       	call   c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aab3:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c001aab8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001aac2:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001aac9:	e8 95 4d ff ff       	call   c000f863 <malloc>
c001aace:	89 04 24             	mov    DWORD PTR [esp],eax
c001aad1:	89 c3                	mov    ebx,eax
c001aad3:	e8 ea 0e 00 00       	call   c001b9c2 <RTC::RTC()>
c001aad8:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001aae2:	5a                   	pop    edx
c001aae3:	59                   	pop    ecx
c001aae4:	53                   	push   ebx
c001aae5:	ff 35 08 11 03 c0    	push   DWORD PTR ds:0xc0031108
c001aaeb:	e8 64 ef fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001aaf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aaf2:	6a 00                	push   0x0
c001aaf4:	6a 00                	push   0x0
c001aaf6:	6a 00                	push   0x0
c001aaf8:	53                   	push   ebx
c001aaf9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aafc:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c001ab01:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001ab07:	83 c4 28             	add    esp,0x28
c001ab0a:	5b                   	pop    ebx
c001ab0b:	c3                   	ret    

c001ab0c <HalMakeBeep(int)>:
c001ab0c:	53                   	push   ebx
c001ab0d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ab11:	85 db                	test   ebx,ebx
c001ab13:	75 07                	jne    c001ab1c <HalMakeBeep(int)+0x10>
c001ab15:	e4 61                	in     al,0x61
c001ab17:	83 e0 fc             	and    eax,0xfffffffc
c001ab1a:	eb 26                	jmp    c001ab42 <HalMakeBeep(int)+0x36>
c001ab1c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ab21:	99                   	cdq    
c001ab22:	f7 fb                	idiv   ebx
c001ab24:	89 c1                	mov    ecx,eax
c001ab26:	b0 b6                	mov    al,0xb6
c001ab28:	e6 43                	out    0x43,al
c001ab2a:	88 c8                	mov    al,cl
c001ab2c:	e6 42                	out    0x42,al
c001ab2e:	89 c8                	mov    eax,ecx
c001ab30:	c1 e8 08             	shr    eax,0x8
c001ab33:	e6 42                	out    0x42,al
c001ab35:	e4 61                	in     al,0x61
c001ab37:	89 c2                	mov    edx,eax
c001ab39:	83 ca 03             	or     edx,0x3
c001ab3c:	38 d0                	cmp    al,dl
c001ab3e:	74 04                	je     c001ab44 <HalMakeBeep(int)+0x38>
c001ab40:	88 d0                	mov    al,dl
c001ab42:	e6 61                	out    0x61,al
c001ab44:	5b                   	pop    ebx
c001ab45:	c3                   	ret    

c001ab46 <HalGetRand()>:
c001ab46:	31 c0                	xor    eax,eax
c001ab48:	c3                   	ret    

c001ab49 <HalEndOfInterrupt(int)>:
c001ab49:	f6 05 4c 14 03 c0 01 	test   BYTE PTR ds:0xc003144c,0x1
c001ab50:	74 1d                	je     c001ab6f <HalEndOfInterrupt(int)+0x26>
c001ab52:	83 ec 18             	sub    esp,0x18
c001ab55:	6a 1b                	push   0x1b
c001ab57:	e8 d7 f4 ff ff       	call   c001a033 <x86rdmsr(unsigned int)>
c001ab5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ab61:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001ab6b:	83 c4 1c             	add    esp,0x1c
c001ab6e:	c3                   	ret    
c001ab6f:	e9 64 08 00 00       	jmp    c001b3d8 <picEOI(int)>

c001ab74 <CPU::CPU()>:
c001ab74:	83 ec 0c             	sub    esp,0xc
c001ab77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab7b:	83 ec 08             	sub    esp,0x8
c001ab7e:	68 ce 90 02 c0       	push   0xc00290ce
c001ab83:	50                   	push   eax
c001ab84:	e8 2d f0 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001ab89:	83 c4 10             	add    esp,0x10
c001ab8c:	ba cc 93 02 c0       	mov    edx,0xc00293cc
c001ab91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab95:	89 10                	mov    DWORD PTR [eax],edx
c001ab97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab9b:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001aba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba9:	05 64 01 00 00       	add    eax,0x164
c001abae:	83 ec 0c             	sub    esp,0xc
c001abb1:	50                   	push   eax
c001abb2:	e8 4b 3d ff ff       	call   c000e902 <GDT::GDT()>
c001abb7:	83 c4 10             	add    esp,0x10
c001abba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abbe:	05 68 09 00 00       	add    eax,0x968
c001abc3:	83 ec 0c             	sub    esp,0xc
c001abc6:	50                   	push   eax
c001abc7:	e8 88 3f ff ff       	call   c000eb54 <IDT::IDT()>
c001abcc:	83 c4 10             	add    esp,0x10
c001abcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd3:	05 68 11 00 00       	add    eax,0x1168
c001abd8:	83 ec 0c             	sub    esp,0xc
c001abdb:	50                   	push   eax
c001abdc:	e8 1f 7f ff ff       	call   c0012b00 <TSS::TSS()>
c001abe1:	83 c4 10             	add    esp,0x10
c001abe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe8:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001abf2:	90                   	nop
c001abf3:	83 c4 0c             	add    esp,0xc
c001abf6:	c3                   	ret    
c001abf7:	90                   	nop

c001abf8 <CPU::setupSMEP()>:
c001abf8:	0f 20 e0             	mov    eax,cr4
c001abfb:	0d 00 00 10 00       	or     eax,0x100000
c001ac00:	0f 22 e0             	mov    cr4,eax
c001ac03:	c3                   	ret    

c001ac04 <CPU::setupUMIP()>:
c001ac04:	0f 20 e0             	mov    eax,cr4
c001ac07:	80 cc 08             	or     ah,0x8
c001ac0a:	0f 22 e0             	mov    cr4,eax
c001ac0d:	c3                   	ret    

c001ac0e <CPU::setupTSC()>:
c001ac0e:	0f 20 e0             	mov    eax,cr4
c001ac11:	83 c8 04             	or     eax,0x4
c001ac14:	0f 22 e0             	mov    cr4,eax
c001ac17:	c3                   	ret    

c001ac18 <CPU::setupLargePages()>:
c001ac18:	0f 20 e0             	mov    eax,cr4
c001ac1b:	83 c8 10             	or     eax,0x10
c001ac1e:	0f 22 e0             	mov    cr4,eax
c001ac21:	c3                   	ret    

c001ac22 <CPU::setupPAT()>:
c001ac22:	f6 05 4c 14 03 c0 08 	test   BYTE PTR ds:0xc003144c,0x8
c001ac29:	74 28                	je     c001ac53 <CPU::setupPAT()+0x31>
c001ac2b:	53                   	push   ebx
c001ac2c:	83 ec 14             	sub    esp,0x14
c001ac2f:	68 77 02 00 00       	push   0x277
c001ac34:	e8 fa f3 ff ff       	call   c001a033 <x86rdmsr(unsigned int)>
c001ac39:	83 c4 0c             	add    esp,0xc
c001ac3c:	83 e2 f8             	and    edx,0xfffffff8
c001ac3f:	83 ca 01             	or     edx,0x1
c001ac42:	52                   	push   edx
c001ac43:	50                   	push   eax
c001ac44:	68 77 02 00 00       	push   0x277
c001ac49:	e8 23 f4 ff ff       	call   c001a071 <x86wrmsr(unsigned int, unsigned long long)>
c001ac4e:	83 c4 18             	add    esp,0x18
c001ac51:	5b                   	pop    ebx
c001ac52:	c3                   	ret    
c001ac53:	c3                   	ret    

c001ac54 <CPU::setupMTRR()>:
c001ac54:	c3                   	ret    
c001ac55:	90                   	nop

c001ac56 <CPU::setupGlobalPages()>:
c001ac56:	0f 20 e0             	mov    eax,cr4
c001ac59:	0c 80                	or     al,0x80
c001ac5b:	0f 22 e0             	mov    cr4,eax
c001ac5e:	c3                   	ret    
c001ac5f:	90                   	nop

c001ac60 <CPU::allowUsermodeDataAccess()>:
c001ac60:	f6 05 4f 14 03 c0 40 	test   BYTE PTR ds:0xc003144f,0x40
c001ac67:	74 03                	je     c001ac6c <CPU::allowUsermodeDataAccess()+0xc>
c001ac69:	0f 01 cb             	stac   
c001ac6c:	c3                   	ret    
c001ac6d:	90                   	nop

c001ac6e <CPU::prohibitUsermodeDataAccess()>:
c001ac6e:	f6 05 4f 14 03 c0 40 	test   BYTE PTR ds:0xc003144f,0x40
c001ac75:	74 03                	je     c001ac7a <CPU::prohibitUsermodeDataAccess()+0xc>
c001ac77:	0f 01 ca             	clac   
c001ac7a:	c3                   	ret    
c001ac7b:	90                   	nop

c001ac7c <CPU::setupSMAP()>:
c001ac7c:	0f 20 e0             	mov    eax,cr4
c001ac7f:	0d 00 00 20 00       	or     eax,0x200000
c001ac84:	0f 22 e0             	mov    cr4,eax
c001ac87:	eb e5                	jmp    c001ac6e <CPU::prohibitUsermodeDataAccess()>
c001ac89:	90                   	nop

c001ac8a <CPU::setupFeatures()>:
c001ac8a:	53                   	push   ebx
c001ac8b:	83 ec 08             	sub    esp,0x8
c001ac8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac92:	f6 05 4f 14 03 c0 20 	test   BYTE PTR ds:0xc003144f,0x20
c001ac99:	74 18                	je     c001acb3 <CPU::setupFeatures()+0x29>
c001ac9b:	83 ec 0c             	sub    esp,0xc
c001ac9e:	68 3b 93 02 c0       	push   0xc002933b
c001aca3:	e8 d4 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aca8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001acab:	e8 54 ff ff ff       	call   c001ac04 <CPU::setupUMIP()>
c001acb0:	83 c4 10             	add    esp,0x10
c001acb3:	f6 05 4e 14 03 c0 08 	test   BYTE PTR ds:0xc003144e,0x8
c001acba:	74 18                	je     c001acd4 <CPU::setupFeatures()+0x4a>
c001acbc:	83 ec 0c             	sub    esp,0xc
c001acbf:	68 45 93 02 c0       	push   0xc0029345
c001acc4:	e8 b3 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001acc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001accc:	e8 3d ff ff ff       	call   c001ac0e <CPU::setupTSC()>
c001acd1:	83 c4 10             	add    esp,0x10
c001acd4:	f6 05 4e 14 03 c0 20 	test   BYTE PTR ds:0xc003144e,0x20
c001acdb:	74 18                	je     c001acf5 <CPU::setupFeatures()+0x6b>
c001acdd:	83 ec 0c             	sub    esp,0xc
c001ace0:	68 4e 93 02 c0       	push   0xc002934e
c001ace5:	e8 92 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001acea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aced:	e8 26 ff ff ff       	call   c001ac18 <CPU::setupLargePages()>
c001acf2:	83 c4 10             	add    esp,0x10
c001acf5:	f6 05 4e 14 03 c0 40 	test   BYTE PTR ds:0xc003144e,0x40
c001acfc:	74 18                	je     c001ad16 <CPU::setupFeatures()+0x8c>
c001acfe:	83 ec 0c             	sub    esp,0xc
c001ad01:	68 57 93 02 c0       	push   0xc0029357
c001ad06:	e8 71 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad0e:	e8 43 ff ff ff       	call   c001ac56 <CPU::setupGlobalPages()>
c001ad13:	83 c4 10             	add    esp,0x10
c001ad16:	f6 05 4e 14 03 c0 80 	test   BYTE PTR ds:0xc003144e,0x80
c001ad1d:	74 18                	je     c001ad37 <CPU::setupFeatures()+0xad>
c001ad1f:	83 ec 0c             	sub    esp,0xc
c001ad22:	68 69 93 02 c0       	push   0xc0029369
c001ad27:	e8 50 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad2f:	e8 ee fe ff ff       	call   c001ac22 <CPU::setupPAT()>
c001ad34:	83 c4 10             	add    esp,0x10
c001ad37:	f6 05 50 14 03 c0 04 	test   BYTE PTR ds:0xc0031450,0x4
c001ad3e:	74 11                	je     c001ad51 <CPU::setupFeatures()+0xc7>
c001ad40:	c7 44 24 10 72 93 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029372
c001ad48:	83 c4 08             	add    esp,0x8
c001ad4b:	5b                   	pop    ebx
c001ad4c:	e9 2b c2 fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad51:	83 c4 08             	add    esp,0x8
c001ad54:	5b                   	pop    ebx
c001ad55:	c3                   	ret    

c001ad56 <CPU::open(int, int, void*)>:
c001ad56:	55                   	push   ebp
c001ad57:	57                   	push   edi
c001ad58:	56                   	push   esi
c001ad59:	53                   	push   ebx
c001ad5a:	83 ec 18             	sub    esp,0x18
c001ad5d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ad61:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ad65:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ad69:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001ad6f:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001ad75:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001ad7b:	50                   	push   eax
c001ad7c:	e8 e3 3b ff ff       	call   c000e964 <GDT::setup()>
c001ad81:	83 c4 0c             	add    esp,0xc
c001ad84:	6a 00                	push   0x0
c001ad86:	68 ef be ad de       	push   0xdeadbeef
c001ad8b:	55                   	push   ebp
c001ad8c:	e8 b3 7d ff ff       	call   c0012b44 <TSS::setup(unsigned long, unsigned long)>
c001ad91:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ad94:	e8 8b 7d ff ff       	call   c0012b24 <TSS::flush()>
c001ad99:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001ad9f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ada2:	e8 23 3e ff ff       	call   c000ebca <IDT::setup()>
c001ada7:	b8 00 04 00 00       	mov    eax,0x400
c001adac:	0f 23 f8             	mov    dr7,eax
c001adaf:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001adb9:	e8 ee 50 ff ff       	call   c000feac <Phys::allocatePage()>
c001adbe:	83 c4 10             	add    esp,0x10
c001adc1:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001adc7:	85 f6                	test   esi,esi
c001adc9:	89 38                	mov    DWORD PTR [eax],edi
c001adcb:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001add1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001add4:	74 10                	je     c001ade6 <CPU::open(int, int, void*)+0x90>
c001add6:	50                   	push   eax
c001add7:	50                   	push   eax
c001add8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001adde:	56                   	push   esi
c001addf:	e8 0c 87 ff ff       	call   c00134f0 <VAS::setCPUSpecific(unsigned long)>
c001ade4:	eb 0d                	jmp    c001adf3 <CPU::open(int, int, void*)+0x9d>
c001ade6:	83 ec 0c             	sub    esp,0xc
c001ade9:	68 7c 93 02 c0       	push   0xc002937c
c001adee:	e8 c5 4e ff ff       	call   c000fcb8 <KePanic(char const*)>
c001adf3:	83 c4 10             	add    esp,0x10
c001adf6:	83 ec 0c             	sub    esp,0xc
c001adf9:	68 8a 93 02 c0       	push   0xc002938a
c001adfe:	e8 ce 24 ff ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001ae03:	e8 1c fb ff ff       	call   c001a924 <HalInitialise()>
c001ae08:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001ae0f:	e8 70 24 ff ff       	call   c000d284 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ae14:	0f b6 c0             	movzx  eax,al
c001ae17:	83 f8 01             	cmp    eax,0x1
c001ae1a:	19 c0                	sbb    eax,eax
c001ae1c:	83 e0 46             	and    eax,0x46
c001ae1f:	83 c0 1e             	add    eax,0x1e
c001ae22:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae25:	e8 8f 02 ff ff       	call   c000b0b9 <setupTimer(int)>
c001ae2a:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001ae30:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001ae37:	e8 48 24 ff ff       	call   c000d284 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ae3c:	83 c4 10             	add    esp,0x10
c001ae3f:	84 c0                	test   al,al
c001ae41:	74 0c                	je     c001ae4f <CPU::open(int, int, void*)+0xf9>
c001ae43:	83 ec 0c             	sub    esp,0xc
c001ae46:	53                   	push   ebx
c001ae47:	e8 3e fe ff ff       	call   c001ac8a <CPU::setupFeatures()>
c001ae4c:	83 c4 10             	add    esp,0x10
c001ae4f:	83 c4 0c             	add    esp,0xc
c001ae52:	31 c0                	xor    eax,eax
c001ae54:	5b                   	pop    ebx
c001ae55:	5e                   	pop    esi
c001ae56:	5f                   	pop    edi
c001ae57:	5d                   	pop    ebp
c001ae58:	c3                   	ret    

c001ae59 <convertLegacyIRQNumber(int)>:
c001ae59:	83 ec 0c             	sub    esp,0xc
c001ae5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae60:	f6 05 4c 14 03 c0 01 	test   BYTE PTR ds:0xc003144c,0x1
c001ae67:	74 0c                	je     c001ae75 <convertLegacyIRQNumber(int)+0x1c>
c001ae69:	83 f8 0f             	cmp    eax,0xf
c001ae6c:	7f 0b                	jg     c001ae79 <convertLegacyIRQNumber(int)+0x20>
c001ae6e:	0f b6 80 08 ae 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd51f8]
c001ae75:	83 c4 0c             	add    esp,0xc
c001ae78:	c3                   	ret    
c001ae79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ae7d:	83 ec 0c             	sub    esp,0xc
c001ae80:	68 f0 93 02 c0       	push   0xc00293f0
c001ae85:	e8 2e 4e ff ff       	call   c000fcb8 <KePanic(char const*)>
c001ae8a:	83 c4 10             	add    esp,0x10
c001ae8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae91:	83 c4 0c             	add    esp,0xc
c001ae94:	c3                   	ret    

c001ae95 <KeSetupInterrupts()>:
c001ae95:	31 c0                	xor    eax,eax
c001ae97:	c7 80 60 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdba0],0x0
c001aea1:	c7 80 60 14 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffceba0],0x0
c001aeab:	c7 80 64 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdb9c],0x0
c001aeb5:	c7 80 64 14 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffceb9c],0x0
c001aebf:	c7 80 68 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdb98],0x0
c001aec9:	c7 80 68 14 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffceb98],0x0
c001aed3:	c7 80 6c 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdb94],0x0
c001aedd:	c7 80 6c 14 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffceb94],0x0
c001aee7:	83 c0 10             	add    eax,0x10
c001aeea:	3d 00 10 00 00       	cmp    eax,0x1000
c001aeef:	75 a6                	jne    c001ae97 <KeSetupInterrupts()+0x2>
c001aef1:	c3                   	ret    

c001aef2 <int_handler>:
c001aef2:	55                   	push   ebp
c001aef3:	57                   	push   edi
c001aef4:	56                   	push   esi
c001aef5:	53                   	push   ebx
c001aef6:	83 ec 0c             	sub    esp,0xc
c001aef9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aefd:	eb 02                	jmp    c001af01 <int_handler+0xf>
c001aeff:	fa                   	cli    
c001af00:	f4                   	hlt    
c001af01:	e8 ac 4d ff ff       	call   c000fcb2 <KeIsKernelInPanic()>
c001af06:	84 c0                	test   al,al
c001af08:	75 f5                	jne    c001aeff <int_handler+0xd>
c001af0a:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001af0d:	8d 46 e0             	lea    eax,[esi-0x20]
c001af10:	83 f8 17             	cmp    eax,0x17
c001af13:	76 40                	jbe    c001af55 <int_handler+0x63>
c001af15:	c1 e6 04             	shl    esi,0x4
c001af18:	31 db                	xor    ebx,ebx
c001af1a:	8d ae 60 24 03 c0    	lea    ebp,[esi-0x3ffcdba0]
c001af20:	81 c6 60 14 03 c0    	add    esi,0xc0031460
c001af26:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001af2a:	85 c0                	test   eax,eax
c001af2c:	74 13                	je     c001af41 <int_handler+0x4f>
c001af2e:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001af31:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001af35:	74 2c                	je     c001af63 <int_handler+0x71>
c001af37:	83 ec 08             	sub    esp,0x8
c001af3a:	52                   	push   edx
c001af3b:	57                   	push   edi
c001af3c:	ff d0                	call   eax
c001af3e:	83 c4 10             	add    esp,0x10
c001af41:	83 c3 01             	add    ebx,0x1
c001af44:	83 fb 04             	cmp    ebx,0x4
c001af47:	75 dd                	jne    c001af26 <int_handler+0x34>
c001af49:	83 c4 0c             	add    esp,0xc
c001af4c:	31 c0                	xor    eax,eax
c001af4e:	5b                   	pop    ebx
c001af4f:	31 d2                	xor    edx,edx
c001af51:	5e                   	pop    esi
c001af52:	5f                   	pop    edi
c001af53:	5d                   	pop    ebp
c001af54:	c3                   	ret    
c001af55:	83 ec 0c             	sub    esp,0xc
c001af58:	50                   	push   eax
c001af59:	e8 eb fb ff ff       	call   c001ab49 <HalEndOfInterrupt(int)>
c001af5e:	83 c4 10             	add    esp,0x10
c001af61:	eb b2                	jmp    c001af15 <int_handler+0x23>
c001af63:	83 ec 08             	sub    esp,0x8
c001af66:	52                   	push   edx
c001af67:	57                   	push   edi
c001af68:	ff d0                	call   eax
c001af6a:	83 c4 10             	add    esp,0x10
c001af6d:	83 c4 0c             	add    esp,0xc
c001af70:	5b                   	pop    ebx
c001af71:	5e                   	pop    esi
c001af72:	5f                   	pop    edi
c001af73:	5d                   	pop    ebp
c001af74:	c3                   	ret    

c001af75 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001af75:	56                   	push   esi
c001af76:	31 c0                	xor    eax,eax
c001af78:	53                   	push   ebx
c001af79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001af7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af81:	89 ca                	mov    edx,ecx
c001af83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af87:	c1 e2 04             	shl    edx,0x4
c001af8a:	83 bc 82 60 24 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffcdba0],0x0
c001af92:	74 17                	je     c001afab <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001af94:	83 c0 01             	add    eax,0x1
c001af97:	83 f8 04             	cmp    eax,0x4
c001af9a:	75 ee                	jne    c001af8a <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001af9c:	c7 44 24 0c 51 94 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029451
c001afa4:	5b                   	pop    ebx
c001afa5:	5e                   	pop    esi
c001afa6:	e9 0d 4d ff ff       	jmp    c000fcb8 <KePanic(char const*)>
c001afab:	8d 04 88             	lea    eax,[eax+ecx*4]
c001afae:	89 1c 85 60 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdba0],ebx
c001afb5:	89 34 85 60 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceba0],esi
c001afbc:	5b                   	pop    ebx
c001afbd:	5e                   	pop    esi
c001afbe:	c3                   	ret    

c001afbf <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001afbf:	57                   	push   edi
c001afc0:	f6 05 4c 14 03 c0 01 	test   BYTE PTR ds:0xc003144c,0x1
c001afc7:	56                   	push   esi
c001afc8:	53                   	push   ebx
c001afc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001afcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001afd1:	74 54                	je     c001b027 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001afd3:	89 c7                	mov    edi,eax
c001afd5:	84 c0                	test   al,al
c001afd7:	74 1d                	je     c001aff6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001afd9:	83 fe 0f             	cmp    esi,0xf
c001afdc:	0f 8f d5 00 00 00    	jg     c001b0b7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001afe2:	0f b6 b6 08 ae 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd51f8]
c001afe9:	0f b7 bc 36 20 0e 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffcf1e0]
c001aff1:	d1 ef                	shr    edi,1
c001aff3:	83 e7 01             	and    edi,0x1
c001aff6:	83 ec 08             	sub    esp,0x8
c001aff9:	a1 c0 13 03 c0       	mov    eax,ds:0xc00313c0
c001affe:	31 db                	xor    ebx,ebx
c001b000:	50                   	push   eax
c001b001:	68 5e 94 02 c0       	push   0xc002945e
c001b006:	e8 71 bf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b00b:	83 c4 10             	add    esp,0x10
c001b00e:	a1 c0 13 03 c0       	mov    eax,ds:0xc00313c0
c001b013:	85 c0                	test   eax,eax
c001b015:	7f 55                	jg     c001b06c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001b017:	83 ec 0c             	sub    esp,0xc
c001b01a:	68 75 94 02 c0       	push   0xc0029475
c001b01f:	e8 94 4c ff ff       	call   c000fcb8 <KePanic(char const*)>
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	8d 7e 20             	lea    edi,[esi+0x20]
c001b02a:	89 f8                	mov    eax,edi
c001b02c:	31 d2                	xor    edx,edx
c001b02e:	c1 e0 04             	shl    eax,0x4
c001b031:	8b 8c 90 60 24 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffcdba0]
c001b038:	85 c9                	test   ecx,ecx
c001b03a:	0f 84 8e 00 00 00    	je     c001b0ce <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001b040:	83 c2 01             	add    edx,0x1
c001b043:	83 fa 04             	cmp    edx,0x4
c001b046:	75 e9                	jne    c001b031 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001b048:	83 ec 0c             	sub    esp,0xc
c001b04b:	68 2c 94 02 c0       	push   0xc002942c
c001b050:	e8 63 4c ff ff       	call   c000fcb8 <KePanic(char const*)>
c001b055:	83 c4 10             	add    esp,0x10
c001b058:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b05d:	5b                   	pop    ebx
c001b05e:	5e                   	pop    esi
c001b05f:	5f                   	pop    edi
c001b060:	c3                   	ret    
c001b061:	83 c3 01             	add    ebx,0x1
c001b064:	39 1d c0 13 03 c0    	cmp    DWORD PTR ds:0xc00313c0,ebx
c001b06a:	7e ab                	jle    c001b017 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001b06c:	83 ec 08             	sub    esp,0x8
c001b06f:	8b 04 9d e0 13 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcec20]
c001b076:	56                   	push   esi
c001b077:	50                   	push   eax
c001b078:	e8 1d dc ff ff       	call   c0018c9a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b07d:	83 c4 10             	add    esp,0x10
c001b080:	84 c0                	test   al,al
c001b082:	74 dd                	je     c001b061 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001b084:	83 ec 04             	sub    esp,0x4
c001b087:	89 f8                	mov    eax,edi
c001b089:	8b 1c 9d e0 13 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcec20]
c001b090:	0f b6 f8             	movzx  edi,al
c001b093:	57                   	push   edi
c001b094:	8d 7e 20             	lea    edi,[esi+0x20]
c001b097:	6a 00                	push   0x0
c001b099:	89 f8                	mov    eax,edi
c001b09b:	0f b6 c0             	movzx  eax,al
c001b09e:	50                   	push   eax
c001b09f:	89 f0                	mov    eax,esi
c001b0a1:	6a 00                	push   0x0
c001b0a3:	0f b6 c0             	movzx  eax,al
c001b0a6:	6a 00                	push   0x0
c001b0a8:	50                   	push   eax
c001b0a9:	53                   	push   ebx
c001b0aa:	e8 57 dd ff ff       	call   c0018e06 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b0af:	83 c4 20             	add    esp,0x20
c001b0b2:	e9 73 ff ff ff       	jmp    c001b02a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001b0b7:	83 ec 0c             	sub    esp,0xc
c001b0ba:	31 ff                	xor    edi,edi
c001b0bc:	68 f0 93 02 c0       	push   0xc00293f0
c001b0c1:	e8 f2 4b ff ff       	call   c000fcb8 <KePanic(char const*)>
c001b0c6:	83 c4 10             	add    esp,0x10
c001b0c9:	e9 28 ff ff ff       	jmp    c001aff6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001b0ce:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b0d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0d5:	89 14 85 60 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdba0],edx
c001b0dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b0e0:	5b                   	pop    ebx
c001b0e1:	89 14 85 60 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceba0],edx
c001b0e8:	89 f0                	mov    eax,esi
c001b0ea:	5e                   	pop    esi
c001b0eb:	5f                   	pop    edi
c001b0ec:	c3                   	ret    

c001b0ed <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001b0ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b0f5:	c1 e0 04             	shl    eax,0x4
c001b0f8:	8d 50 10             	lea    edx,[eax+0x10]
c001b0fb:	39 88 60 24 03 c0    	cmp    DWORD PTR [eax-0x3ffcdba0],ecx
c001b101:	74 08                	je     c001b10b <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b103:	83 c0 04             	add    eax,0x4
c001b106:	39 d0                	cmp    eax,edx
c001b108:	75 f1                	jne    c001b0fb <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b10a:	c3                   	ret    
c001b10b:	c7 80 60 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdba0],0x0
c001b115:	c7 80 60 14 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffceba0],0x0
c001b11f:	eb e2                	jmp    c001b103 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b121 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b121:	53                   	push   ebx
c001b122:	83 ec 08             	sub    esp,0x8
c001b125:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b129:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b12e:	74 09                	je     c001b139 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b130:	f6 05 4c 14 03 c0 01 	test   BYTE PTR ds:0xc003144c,0x1
c001b137:	75 37                	jne    c001b170 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001b139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b13d:	83 c0 20             	add    eax,0x20
c001b140:	c1 e0 04             	shl    eax,0x4
c001b143:	8d 50 10             	lea    edx,[eax+0x10]
c001b146:	39 98 60 24 03 c0    	cmp    DWORD PTR [eax-0x3ffcdba0],ebx
c001b14c:	74 0c                	je     c001b15a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001b14e:	83 c0 04             	add    eax,0x4
c001b151:	39 d0                	cmp    eax,edx
c001b153:	75 f1                	jne    c001b146 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001b155:	83 c4 08             	add    esp,0x8
c001b158:	5b                   	pop    ebx
c001b159:	c3                   	ret    
c001b15a:	c7 80 60 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdba0],0x0
c001b164:	c7 80 60 14 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffceba0],0x0
c001b16e:	eb de                	jmp    c001b14e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001b170:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001b175:	7f 11                	jg     c001b188 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001b177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b17b:	0f b6 80 08 ae 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd51f8]
c001b182:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b186:	eb b1                	jmp    c001b139 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b188:	83 ec 0c             	sub    esp,0xc
c001b18b:	68 82 94 02 c0       	push   0xc0029482
c001b190:	e8 23 4b ff ff       	call   c000fcb8 <KePanic(char const*)>
c001b195:	83 c4 10             	add    esp,0x10
c001b198:	eb 9f                	jmp    c001b139 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b19a:	66 90                	xchg   ax,ax

c001b19c <picIoWait()>:
c001b19c:	eb 00                	jmp    c001b19e <picIoWait()+0x2>
c001b19e:	eb 00                	jmp    c001b1a0 <picIoWait()+0x4>
c001b1a0:	90                   	nop
c001b1a1:	c3                   	ret    
c001b1a2:	66 90                	xchg   ax,ax

c001b1a4 <picDisable()>:
c001b1a4:	83 ec 10             	sub    esp,0x10
c001b1a7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001b1ae:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001b1b3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b1b7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b1bc:	ee                   	out    dx,al
c001b1bd:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001b1c4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001b1c9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b1cd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001b1d2:	ee                   	out    dx,al
c001b1d3:	90                   	nop
c001b1d4:	83 c4 10             	add    esp,0x10
c001b1d7:	c3                   	ret    

c001b1d8 <picGetIRQReg(int)>:
c001b1d8:	83 ec 10             	sub    esp,0x10
c001b1db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1df:	0f b6 c0             	movzx  eax,al
c001b1e2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b1e9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001b1ed:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b1f1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b1f6:	ee                   	out    dx,al
c001b1f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1fb:	0f b6 c0             	movzx  eax,al
c001b1fe:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b205:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b209:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b20d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b212:	ee                   	out    dx,al
c001b213:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001b21a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001b21f:	89 c2                	mov    edx,eax
c001b221:	ec                   	in     al,dx
c001b222:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b226:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b22a:	0f b6 c0             	movzx  eax,al
c001b22d:	c1 e0 08             	shl    eax,0x8
c001b230:	89 c1                	mov    ecx,eax
c001b232:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001b239:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001b23e:	89 c2                	mov    edx,eax
c001b240:	ec                   	in     al,dx
c001b241:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001b245:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b249:	0f b6 c0             	movzx  eax,al
c001b24c:	09 c8                	or     eax,ecx
c001b24e:	83 c4 10             	add    esp,0x10
c001b251:	c3                   	ret    
c001b252:	66 90                	xchg   ax,ax

c001b254 <picOpen()>:
c001b254:	83 ec 50             	sub    esp,0x50
c001b257:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001b25e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001b263:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b267:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b26b:	ee                   	out    dx,al
c001b26c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001b273:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b278:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b27c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b280:	ee                   	out    dx,al
c001b281:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001b289:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001b291:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001b298:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b29c:	89 c2                	mov    edx,eax
c001b29e:	ec                   	in     al,dx
c001b29f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001b2a3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b2a7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001b2ab:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001b2b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2b6:	89 c2                	mov    edx,eax
c001b2b8:	ec                   	in     al,dx
c001b2b9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b2bd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b2c1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001b2c5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001b2cc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001b2d1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001b2d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b2d9:	ee                   	out    dx,al
c001b2da:	e8 bd fe ff ff       	call   c001b19c <picIoWait()>
c001b2df:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001b2e6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001b2eb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001b2ef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b2f3:	ee                   	out    dx,al
c001b2f4:	e8 a3 fe ff ff       	call   c001b19c <picIoWait()>
c001b2f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b2fd:	0f b6 c0             	movzx  eax,al
c001b300:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001b307:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001b30b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001b30f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b313:	ee                   	out    dx,al
c001b314:	e8 83 fe ff ff       	call   c001b19c <picIoWait()>
c001b319:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b31d:	0f b6 c0             	movzx  eax,al
c001b320:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001b327:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b32b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b32f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b333:	ee                   	out    dx,al
c001b334:	e8 63 fe ff ff       	call   c001b19c <picIoWait()>
c001b339:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001b340:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001b345:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001b349:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b34d:	ee                   	out    dx,al
c001b34e:	e8 49 fe ff ff       	call   c001b19c <picIoWait()>
c001b353:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001b35a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001b35f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001b363:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b367:	ee                   	out    dx,al
c001b368:	e8 2f fe ff ff       	call   c001b19c <picIoWait()>
c001b36d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001b374:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001b379:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001b37d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b381:	ee                   	out    dx,al
c001b382:	e8 15 fe ff ff       	call   c001b19c <picIoWait()>
c001b387:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001b38e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001b393:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001b397:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b39b:	ee                   	out    dx,al
c001b39c:	e8 fb fd ff ff       	call   c001b19c <picIoWait()>
c001b3a1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001b3a6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001b3ad:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001b3b1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001b3b5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001b3b9:	ee                   	out    dx,al
c001b3ba:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001b3bf:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001b3c6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b3ca:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001b3ce:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001b3d2:	ee                   	out    dx,al
c001b3d3:	90                   	nop
c001b3d4:	83 c4 50             	add    esp,0x50
c001b3d7:	c3                   	ret    

c001b3d8 <picEOI(int)>:
c001b3d8:	83 ec 10             	sub    esp,0x10
c001b3db:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b3e0:	75 1e                	jne    c001b400 <picEOI(int)+0x28>
c001b3e2:	6a 0b                	push   0xb
c001b3e4:	e8 ef fd ff ff       	call   c001b1d8 <picGetIRQReg(int)>
c001b3e9:	83 c4 04             	add    esp,0x4
c001b3ec:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001b3f1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001b3f6:	25 80 00 00 00       	and    eax,0x80
c001b3fb:	74 73                	je     c001b470 <picEOI(int)+0x98>
c001b3fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b400:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001b405:	75 31                	jne    c001b438 <picEOI(int)+0x60>
c001b407:	6a 0b                	push   0xb
c001b409:	e8 ca fd ff ff       	call   c001b1d8 <picGetIRQReg(int)>
c001b40e:	83 c4 04             	add    esp,0x4
c001b411:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001b416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b41a:	98                   	cwde   
c001b41b:	85 c0                	test   eax,eax
c001b41d:	78 19                	js     c001b438 <picEOI(int)+0x60>
c001b41f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001b426:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001b42b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b42f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b434:	ee                   	out    dx,al
c001b435:	eb 3d                	jmp    c001b474 <picEOI(int)+0x9c>
c001b437:	90                   	nop
c001b438:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b43d:	7e 19                	jle    c001b458 <picEOI(int)+0x80>
c001b43f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b446:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001b44b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b44f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b454:	ee                   	out    dx,al
c001b455:	8d 76 00             	lea    esi,[esi+0x0]
c001b458:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b45f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b464:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b468:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b46d:	ee                   	out    dx,al
c001b46e:	eb 04                	jmp    c001b474 <picEOI(int)+0x9c>
c001b470:	90                   	nop
c001b471:	8d 76 00             	lea    esi,[esi+0x0]
c001b474:	83 c4 10             	add    esp,0x10
c001b477:	c3                   	ret    

c001b478 <RTC::open(int, int, void*)>:
c001b478:	31 c0                	xor    eax,eax
c001b47a:	c3                   	ret    
c001b47b:	90                   	nop

c001b47c <RTC::close(int, int, void*)>:
c001b47c:	31 c0                	xor    eax,eax
c001b47e:	c3                   	ret    
c001b47f:	90                   	nop

c001b480 <RTC::timeInSecondsUTC()>:
c001b480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b484:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b48a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b490:	c3                   	ret    
c001b491:	90                   	nop

c001b492 <RTC::timeInDatetimeUTC()>:
c001b492:	53                   	push   ebx
c001b493:	83 ec 14             	sub    esp,0x14
c001b496:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b49a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b49e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4a0:	50                   	push   eax
c001b4a1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b4a4:	83 c4 0c             	add    esp,0xc
c001b4a7:	52                   	push   edx
c001b4a8:	50                   	push   eax
c001b4a9:	53                   	push   ebx
c001b4aa:	e8 9b e1 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b4af:	89 d8                	mov    eax,ebx
c001b4b1:	83 c4 14             	add    esp,0x14
c001b4b4:	5b                   	pop    ebx
c001b4b5:	c2 04 00             	ret    0x4

c001b4b8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b4b8:	56                   	push   esi
c001b4b9:	53                   	push   ebx
c001b4ba:	83 ec 14             	sub    esp,0x14
c001b4bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b4c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4c3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b4c6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b4ca:	52                   	push   edx
c001b4cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4d3:	50                   	push   eax
c001b4d4:	e8 71 e1 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b4d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b4e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b4e5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b4e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b4ed:	89 f0                	mov    eax,esi
c001b4ef:	83 c4 20             	add    esp,0x20
c001b4f2:	5b                   	pop    ebx
c001b4f3:	5e                   	pop    esi
c001b4f4:	ff e0                	jmp    eax

c001b4f6 <RTC::~RTC()>:
c001b4f6:	83 ec 0c             	sub    esp,0xc
c001b4f9:	ba ac 94 02 c0       	mov    edx,0xc00294ac
c001b4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b502:	89 10                	mov    DWORD PTR [eax],edx
c001b504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b508:	83 ec 0c             	sub    esp,0xc
c001b50b:	50                   	push   eax
c001b50c:	e8 db db fe ff       	call   c00090ec <Clock::~Clock()>
c001b511:	83 c4 10             	add    esp,0x10
c001b514:	90                   	nop
c001b515:	83 c4 0c             	add    esp,0xc
c001b518:	c3                   	ret    
c001b519:	90                   	nop

c001b51a <RTC::~RTC()>:
c001b51a:	83 ec 0c             	sub    esp,0xc
c001b51d:	83 ec 0c             	sub    esp,0xc
c001b520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b524:	e8 cd ff ff ff       	call   c001b4f6 <RTC::~RTC()>
c001b529:	83 c4 10             	add    esp,0x10
c001b52c:	83 ec 08             	sub    esp,0x8
c001b52f:	68 60 01 00 00       	push   0x160
c001b534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b538:	e8 3f 1e ff ff       	call   c000d37c <operator delete(void*, unsigned long)>
c001b53d:	83 c4 10             	add    esp,0x10
c001b540:	83 c4 0c             	add    esp,0xc
c001b543:	c3                   	ret    

c001b544 <RTC::get_update_in_progress_flag()>:
c001b544:	83 ec 18             	sub    esp,0x18
c001b547:	6a 0a                	push   0xa
c001b549:	e8 c9 d9 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b54e:	83 c4 1c             	add    esp,0x1c
c001b551:	0f b6 c0             	movzx  eax,al
c001b554:	c1 e8 07             	shr    eax,0x7
c001b557:	c3                   	ret    

c001b558 <RTC::completeRTCRefresh()>:
c001b558:	55                   	push   ebp
c001b559:	57                   	push   edi
c001b55a:	56                   	push   esi
c001b55b:	53                   	push   ebx
c001b55c:	83 ec 3c             	sub    esp,0x3c
c001b55f:	8b 1d 50 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b50
c001b565:	83 ec 0c             	sub    esp,0xc
c001b568:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b56c:	e8 d3 ff ff ff       	call   c001b544 <RTC::get_update_in_progress_flag()>
c001b571:	83 c4 10             	add    esp,0x10
c001b574:	84 c0                	test   al,al
c001b576:	74 0e                	je     c001b586 <RTC::completeRTCRefresh()+0x2e>
c001b578:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b57e:	3b 05 50 0b 03 c0    	cmp    eax,DWORD PTR ds:0xc0030b50
c001b584:	73 df                	jae    c001b565 <RTC::completeRTCRefresh()+0xd>
c001b586:	83 ec 0c             	sub    esp,0xc
c001b589:	6a 00                	push   0x0
c001b58b:	e8 87 d9 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b590:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b597:	89 c5                	mov    ebp,eax
c001b599:	e8 79 d9 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b59e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b5a5:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b5a9:	e8 69 d9 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b5ae:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b5b5:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b5b9:	e8 59 d9 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b5be:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b5c5:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b5c9:	e8 49 d9 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b5ce:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b5d5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b5d9:	e8 39 d9 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b5de:	0f b6 c0             	movzx  eax,al
c001b5e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b5e5:	83 c4 10             	add    esp,0x10
c001b5e8:	8b 1d 50 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b50
c001b5ee:	83 ec 0c             	sub    esp,0xc
c001b5f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b5f5:	e8 4a ff ff ff       	call   c001b544 <RTC::get_update_in_progress_flag()>
c001b5fa:	83 c4 10             	add    esp,0x10
c001b5fd:	84 c0                	test   al,al
c001b5ff:	74 0e                	je     c001b60f <RTC::completeRTCRefresh()+0xb7>
c001b601:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b607:	3b 05 50 0b 03 c0    	cmp    eax,DWORD PTR ds:0xc0030b50
c001b60d:	73 df                	jae    c001b5ee <RTC::completeRTCRefresh()+0x96>
c001b60f:	83 ec 0c             	sub    esp,0xc
c001b612:	6a 00                	push   0x0
c001b614:	e8 fe d8 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b619:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b620:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b624:	e8 ee d8 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b629:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b630:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b634:	e8 de d8 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b639:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b640:	88 c3                	mov    bl,al
c001b642:	e8 d0 d8 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b647:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b64e:	89 c6                	mov    esi,eax
c001b650:	e8 c2 d8 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b655:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b65c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b660:	e8 b2 d8 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b665:	89 e9                	mov    ecx,ebp
c001b667:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b66b:	0f b6 f8             	movzx  edi,al
c001b66e:	83 c4 10             	add    esp,0x10
c001b671:	0f b6 eb             	movzx  ebp,bl
c001b674:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b678:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b67d:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b682:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b686:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b68a:	0f 94 c0             	sete   al
c001b68d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b691:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001b695:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b69a:	0f 94 c2             	sete   dl
c001b69d:	21 d0                	and    eax,edx
c001b69f:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b6a3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b6a7:	0f 94 c2             	sete   dl
c001b6aa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b6ae:	21 c2                	and    edx,eax
c001b6b0:	89 f0                	mov    eax,esi
c001b6b2:	0f b6 c0             	movzx  eax,al
c001b6b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b6b9:	89 f0                	mov    eax,esi
c001b6bb:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b6bf:	0f 94 c0             	sete   al
c001b6c2:	21 d0                	and    eax,edx
c001b6c4:	31 d2                	xor    edx,edx
c001b6c6:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b6ca:	0f 94 c2             	sete   dl
c001b6cd:	85 c2                	test   edx,eax
c001b6cf:	75 27                	jne    c001b6f8 <RTC::completeRTCRefresh()+0x1a0>
c001b6d1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b6d5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001b6d9:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b6dd:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b6e1:	89 f0                	mov    eax,esi
c001b6e3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001b6e7:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b6eb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b6ef:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b6f3:	e9 f0 fe ff ff       	jmp    c001b5e8 <RTC::completeRTCRefresh()+0x90>
c001b6f8:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001b6fc:	75 d3                	jne    c001b6d1 <RTC::completeRTCRefresh()+0x179>
c001b6fe:	83 ec 0c             	sub    esp,0xc
c001b701:	6a 0b                	push   0xb
c001b703:	e8 0f d8 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b708:	83 c4 10             	add    esp,0x10
c001b70b:	a8 04                	test   al,0x4
c001b70d:	75 7a                	jne    c001b789 <RTC::completeRTCRefresh()+0x231>
c001b70f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b713:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b717:	83 e1 0f             	and    ecx,0xf
c001b71a:	c1 ea 04             	shr    edx,0x4
c001b71d:	83 e6 0f             	and    esi,0xf
c001b720:	6b d2 0a             	imul   edx,edx,0xa
c001b723:	c1 ef 04             	shr    edi,0x4
c001b726:	01 d1                	add    ecx,edx
c001b728:	6b ff 0a             	imul   edi,edi,0xa
c001b72b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b72f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b733:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b737:	c1 ea 04             	shr    edx,0x4
c001b73a:	83 e1 0f             	and    ecx,0xf
c001b73d:	6b d2 0a             	imul   edx,edx,0xa
c001b740:	01 d1                	add    ecx,edx
c001b742:	89 ea                	mov    edx,ebp
c001b744:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b748:	c1 ea 04             	shr    edx,0x4
c001b74b:	89 d9                	mov    ecx,ebx
c001b74d:	83 e2 07             	and    edx,0x7
c001b750:	83 e1 0f             	and    ecx,0xf
c001b753:	6b d2 0a             	imul   edx,edx,0xa
c001b756:	83 e3 80             	and    ebx,0xffffff80
c001b759:	01 d1                	add    ecx,edx
c001b75b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b75f:	09 cb                	or     ebx,ecx
c001b761:	c1 ea 04             	shr    edx,0x4
c001b764:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b768:	6b d2 0a             	imul   edx,edx,0xa
c001b76b:	83 e1 0f             	and    ecx,0xf
c001b76e:	01 d6                	add    esi,edx
c001b770:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b774:	c1 ea 04             	shr    edx,0x4
c001b777:	6b d2 0a             	imul   edx,edx,0xa
c001b77a:	01 d1                	add    ecx,edx
c001b77c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b780:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b784:	83 e2 0f             	and    edx,0xf
c001b787:	01 d7                	add    edi,edx
c001b789:	a8 02                	test   al,0x2
c001b78b:	75 15                	jne    c001b7a2 <RTC::completeRTCRefresh()+0x24a>
c001b78d:	f6 c3 80             	test   bl,0x80
c001b790:	74 10                	je     c001b7a2 <RTC::completeRTCRefresh()+0x24a>
c001b792:	83 e3 7f             	and    ebx,0x7f
c001b795:	b9 18 00 00 00       	mov    ecx,0x18
c001b79a:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b79d:	99                   	cdq    
c001b79e:	f7 f9                	idiv   ecx
c001b7a0:	88 d3                	mov    bl,dl
c001b7a2:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001b7a8:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001b7ae:	77 06                	ja     c001b7b6 <RTC::completeRTCRefresh()+0x25e>
c001b7b0:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b7b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b7bb:	31 c9                	xor    ecx,ecx
c001b7bd:	c1 e0 10             	shl    eax,0x10
c001b7c0:	89 cf                	mov    edi,ecx
c001b7c2:	c1 e5 10             	shl    ebp,0x10
c001b7c5:	31 d2                	xor    edx,edx
c001b7c7:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b7cd:	09 c7                	or     edi,eax
c001b7cf:	89 f0                	mov    eax,esi
c001b7d1:	89 f9                	mov    ecx,edi
c001b7d3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b7d7:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b7db:	88 c2                	mov    dl,al
c001b7dd:	88 d9                	mov    cl,bl
c001b7df:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001b7e3:	0f b7 c2             	movzx  eax,dx
c001b7e6:	09 e8                	or     eax,ebp
c001b7e8:	89 c2                	mov    edx,eax
c001b7ea:	50                   	push   eax
c001b7eb:	50                   	push   eax
c001b7ec:	51                   	push   ecx
c001b7ed:	52                   	push   edx
c001b7ee:	e8 49 da fe ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c001b7f3:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b7f7:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b7fd:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b803:	83 c4 4c             	add    esp,0x4c
c001b806:	5b                   	pop    ebx
c001b807:	5e                   	pop    esi
c001b808:	5f                   	pop    edi
c001b809:	5d                   	pop    ebp
c001b80a:	c3                   	ret    
c001b80b:	90                   	nop

c001b80c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b80c:	55                   	push   ebp
c001b80d:	57                   	push   edi
c001b80e:	56                   	push   esi
c001b80f:	53                   	push   ebx
c001b810:	83 ec 34             	sub    esp,0x34
c001b813:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b817:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b81b:	6a 00                	push   0x0
c001b81d:	89 fb                	mov    ebx,edi
c001b81f:	6a 00                	push   0x0
c001b821:	e8 45 d7 ff ff       	call   c0018f6b <x86WriteCMOS(unsigned char, unsigned char)>
c001b826:	5d                   	pop    ebp
c001b827:	58                   	pop    eax
c001b828:	6a 00                	push   0x0
c001b82a:	6a 02                	push   0x2
c001b82c:	e8 3a d7 ff ff       	call   c0018f6b <x86WriteCMOS(unsigned char, unsigned char)>
c001b831:	31 d2                	xor    edx,edx
c001b833:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b83a:	89 f9                	mov    ecx,edi
c001b83c:	89 f8                	mov    eax,edi
c001b83e:	c1 e9 10             	shr    ecx,0x10
c001b841:	0f b6 c4             	movzx  eax,ah
c001b844:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b848:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b84c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b850:	b9 64 00 00 00       	mov    ecx,0x64
c001b855:	89 f0                	mov    eax,esi
c001b857:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b85b:	89 f0                	mov    eax,esi
c001b85d:	0f b6 c4             	movzx  eax,ah
c001b860:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b864:	89 f0                	mov    eax,esi
c001b866:	c1 e8 10             	shr    eax,0x10
c001b869:	f7 f1                	div    ecx
c001b86b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b86f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b873:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b877:	e8 9b d6 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b87c:	83 c4 10             	add    esp,0x10
c001b87f:	89 c5                	mov    ebp,eax
c001b881:	a8 04                	test   al,0x4
c001b883:	75 6e                	jne    c001b8f3 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b885:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b889:	31 d2                	xor    edx,edx
c001b88b:	0f b6 c1             	movzx  eax,cl
c001b88e:	b9 0a 00 00 00       	mov    ecx,0xa
c001b893:	f7 f1                	div    ecx
c001b895:	c1 e0 04             	shl    eax,0x4
c001b898:	09 d0                	or     eax,edx
c001b89a:	31 d2                	xor    edx,edx
c001b89c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8a0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b8a5:	f7 f1                	div    ecx
c001b8a7:	c1 e0 04             	shl    eax,0x4
c001b8aa:	09 d0                	or     eax,edx
c001b8ac:	31 d2                	xor    edx,edx
c001b8ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b8b2:	0f b6 c3             	movzx  eax,bl
c001b8b5:	f7 f1                	div    ecx
c001b8b7:	c1 e0 04             	shl    eax,0x4
c001b8ba:	09 d0                	or     eax,edx
c001b8bc:	31 d2                	xor    edx,edx
c001b8be:	89 c3                	mov    ebx,eax
c001b8c0:	89 f0                	mov    eax,esi
c001b8c2:	0f b6 c0             	movzx  eax,al
c001b8c5:	f7 f1                	div    ecx
c001b8c7:	c1 e0 04             	shl    eax,0x4
c001b8ca:	09 d0                	or     eax,edx
c001b8cc:	31 d2                	xor    edx,edx
c001b8ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b8d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b8d7:	f7 f1                	div    ecx
c001b8d9:	c1 e0 04             	shl    eax,0x4
c001b8dc:	09 d0                	or     eax,edx
c001b8de:	31 d2                	xor    edx,edx
c001b8e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b8e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8e8:	f7 f1                	div    ecx
c001b8ea:	c1 e0 04             	shl    eax,0x4
c001b8ed:	09 d0                	or     eax,edx
c001b8ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b8f3:	83 e5 02             	and    ebp,0x2
c001b8f6:	75 1e                	jne    c001b916 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b8f8:	0f b6 c3             	movzx  eax,bl
c001b8fb:	83 f8 0b             	cmp    eax,0xb
c001b8fe:	76 10                	jbe    c001b910 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b900:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b903:	88 d3                	mov    bl,dl
c001b905:	84 d2                	test   dl,dl
c001b907:	75 02                	jne    c001b90b <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b909:	b3 0c                	mov    bl,0xc
c001b90b:	83 cb 80             	or     ebx,0xffffff80
c001b90e:	eb 06                	jmp    c001b916 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b910:	85 c0                	test   eax,eax
c001b912:	75 02                	jne    c001b916 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b914:	b3 0c                	mov    bl,0xc
c001b916:	0f b6 db             	movzx  ebx,bl
c001b919:	50                   	push   eax
c001b91a:	50                   	push   eax
c001b91b:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b920:	52                   	push   edx
c001b921:	6a 00                	push   0x0
c001b923:	e8 43 d6 ff ff       	call   c0018f6b <x86WriteCMOS(unsigned char, unsigned char)>
c001b928:	5a                   	pop    edx
c001b929:	59                   	pop    ecx
c001b92a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b92f:	50                   	push   eax
c001b930:	6a 02                	push   0x2
c001b932:	e8 34 d6 ff ff       	call   c0018f6b <x86WriteCMOS(unsigned char, unsigned char)>
c001b937:	5e                   	pop    esi
c001b938:	5f                   	pop    edi
c001b939:	53                   	push   ebx
c001b93a:	6a 04                	push   0x4
c001b93c:	e8 2a d6 ff ff       	call   c0018f6b <x86WriteCMOS(unsigned char, unsigned char)>
c001b941:	5d                   	pop    ebp
c001b942:	58                   	pop    eax
c001b943:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b948:	52                   	push   edx
c001b949:	6a 07                	push   0x7
c001b94b:	e8 1b d6 ff ff       	call   c0018f6b <x86WriteCMOS(unsigned char, unsigned char)>
c001b950:	58                   	pop    eax
c001b951:	5a                   	pop    edx
c001b952:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b957:	50                   	push   eax
c001b958:	6a 08                	push   0x8
c001b95a:	e8 0c d6 ff ff       	call   c0018f6b <x86WriteCMOS(unsigned char, unsigned char)>
c001b95f:	59                   	pop    ecx
c001b960:	5b                   	pop    ebx
c001b961:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b966:	55                   	push   ebp
c001b967:	6a 09                	push   0x9
c001b969:	e8 fd d5 ff ff       	call   c0018f6b <x86WriteCMOS(unsigned char, unsigned char)>
c001b96e:	5e                   	pop    esi
c001b96f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b973:	e8 e0 fb ff ff       	call   c001b558 <RTC::completeRTCRefresh()>
c001b978:	83 c4 3c             	add    esp,0x3c
c001b97b:	b0 01                	mov    al,0x1
c001b97d:	5b                   	pop    ebx
c001b97e:	5e                   	pop    esi
c001b97f:	5f                   	pop    edi
c001b980:	5d                   	pop    ebp
c001b981:	c3                   	ret    

c001b982 <rtcIRQHandler(regs*, void*)>:
c001b982:	53                   	push   ebx
c001b983:	83 ec 14             	sub    esp,0x14
c001b986:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b98a:	6a 0c                	push   0xc
c001b98c:	e8 86 d5 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001b991:	83 c4 10             	add    esp,0x10
c001b994:	a8 80                	test   al,0x80
c001b996:	74 24                	je     c001b9bc <rtcIRQHandler(regs*, void*)+0x3a>
c001b998:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b99f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b9a6:	66 ff 05 60 34 03 c0 	inc    WORD PTR ds:0xc0033460
c001b9ad:	75 0d                	jne    c001b9bc <rtcIRQHandler(regs*, void*)+0x3a>
c001b9af:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b9b3:	83 c4 08             	add    esp,0x8
c001b9b6:	5b                   	pop    ebx
c001b9b7:	e9 9c fb ff ff       	jmp    c001b558 <RTC::completeRTCRefresh()>
c001b9bc:	83 c4 08             	add    esp,0x8
c001b9bf:	5b                   	pop    ebx
c001b9c0:	c3                   	ret    
c001b9c1:	90                   	nop

c001b9c2 <RTC::RTC()>:
c001b9c2:	83 ec 1c             	sub    esp,0x1c
c001b9c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9c9:	83 ec 08             	sub    esp,0x8
c001b9cc:	68 8f 94 02 c0       	push   0xc002948f
c001b9d1:	50                   	push   eax
c001b9d2:	e8 df d6 fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001b9d7:	83 c4 10             	add    esp,0x10
c001b9da:	ba ac 94 02 c0       	mov    edx,0xc00294ac
c001b9df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9e3:	89 10                	mov    DWORD PTR [eax],edx
c001b9e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9e9:	83 ec 0c             	sub    esp,0xc
c001b9ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b9f0:	6a 01                	push   0x1
c001b9f2:	68 82 b9 01 c0       	push   0xc001b982
c001b9f7:	6a 08                	push   0x8
c001b9f9:	50                   	push   eax
c001b9fa:	e8 01 e0 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9ff:	83 c4 20             	add    esp,0x20
c001ba02:	89 c2                	mov    edx,eax
c001ba04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba08:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba0e:	fa                   	cli    
c001ba0f:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001ba14:	83 c0 01             	add    eax,0x1
c001ba17:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c001ba1c:	83 ec 0c             	sub    esp,0xc
c001ba1f:	6a 0b                	push   0xb
c001ba21:	e8 f1 d4 ff ff       	call   c0018f17 <x86ReadCMOS(unsigned char)>
c001ba26:	83 c4 10             	add    esp,0x10
c001ba29:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ba2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ba31:	83 c8 10             	or     eax,0x10
c001ba34:	0f b6 c0             	movzx  eax,al
c001ba37:	83 ec 08             	sub    esp,0x8
c001ba3a:	50                   	push   eax
c001ba3b:	6a 0b                	push   0xb
c001ba3d:	e8 29 d5 ff ff       	call   c0018f6b <x86WriteCMOS(unsigned char, unsigned char)>
c001ba42:	83 c4 10             	add    esp,0x10
c001ba45:	83 ec 0c             	sub    esp,0xc
c001ba48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba4c:	e8 07 fb ff ff       	call   c001b558 <RTC::completeRTCRefresh()>
c001ba51:	83 c4 10             	add    esp,0x10
c001ba54:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c001ba5c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001ba61:	85 c0                	test   eax,eax
c001ba63:	75 01                	jne    c001ba66 <RTC::RTC()+0xa4>
c001ba65:	fb                   	sti    
c001ba66:	90                   	nop
c001ba67:	83 c4 1c             	add    esp,0x1c
c001ba6a:	c3                   	ret    
c001ba6b:	90                   	nop

c001ba6c <HalConsoleScroll(int, int)>:
c001ba6c:	83 ec 10             	sub    esp,0x10
c001ba6f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001ba77:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001ba7f:	90                   	nop
c001ba80:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001ba85:	0f 8f e1 00 00 00    	jg     c001bb6c <HalConsoleScroll(int, int)+0x100>
c001ba8b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ba93:	90                   	nop
c001ba94:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001ba9c:	0f 8f be 00 00 00    	jg     c001bb60 <HalConsoleScroll(int, int)+0xf4>
c001baa2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001baa6:	89 d0                	mov    eax,edx
c001baa8:	c1 e0 02             	shl    eax,0x2
c001baab:	01 d0                	add    eax,edx
c001baad:	c1 e0 05             	shl    eax,0x5
c001bab0:	89 c2                	mov    edx,eax
c001bab2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bab6:	01 d0                	add    eax,edx
c001bab8:	89 c2                	mov    edx,eax
c001baba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001babe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001bac1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bac5:	89 d0                	mov    eax,edx
c001bac7:	c1 e0 02             	shl    eax,0x2
c001baca:	01 d0                	add    eax,edx
c001bacc:	c1 e0 05             	shl    eax,0x5
c001bacf:	89 c2                	mov    edx,eax
c001bad1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bad5:	01 d0                	add    eax,edx
c001bad7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001badd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bae1:	01 c2                	add    edx,eax
c001bae3:	8a 01                	mov    al,BYTE PTR [ecx]
c001bae5:	88 02                	mov    BYTE PTR [edx],al
c001bae7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001baec:	75 66                	jne    c001bb54 <HalConsoleScroll(int, int)+0xe8>
c001baee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001baf2:	83 e0 01             	and    eax,0x1
c001baf5:	74 39                	je     c001bb30 <HalConsoleScroll(int, int)+0xc4>
c001baf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bafb:	83 e0 0f             	and    eax,0xf
c001bafe:	88 c2                	mov    dl,al
c001bb00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb04:	c1 e0 04             	shl    eax,0x4
c001bb07:	09 d0                	or     eax,edx
c001bb09:	88 c1                	mov    cl,al
c001bb0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb0f:	89 d0                	mov    eax,edx
c001bb11:	c1 e0 02             	shl    eax,0x2
c001bb14:	01 d0                	add    eax,edx
c001bb16:	c1 e0 05             	shl    eax,0x5
c001bb19:	89 c2                	mov    edx,eax
c001bb1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb1f:	01 d0                	add    eax,edx
c001bb21:	89 c2                	mov    edx,eax
c001bb23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb27:	01 d0                	add    eax,edx
c001bb29:	88 ca                	mov    dl,cl
c001bb2b:	88 10                	mov    BYTE PTR [eax],dl
c001bb2d:	eb 25                	jmp    c001bb54 <HalConsoleScroll(int, int)+0xe8>
c001bb2f:	90                   	nop
c001bb30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb34:	89 d0                	mov    eax,edx
c001bb36:	c1 e0 02             	shl    eax,0x2
c001bb39:	01 d0                	add    eax,edx
c001bb3b:	c1 e0 05             	shl    eax,0x5
c001bb3e:	89 c2                	mov    edx,eax
c001bb40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb44:	01 d0                	add    eax,edx
c001bb46:	89 c2                	mov    edx,eax
c001bb48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb4c:	01 d0                	add    eax,edx
c001bb4e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001bb51:	8d 76 00             	lea    esi,[esi+0x0]
c001bb54:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001bb59:	e9 36 ff ff ff       	jmp    c001ba94 <HalConsoleScroll(int, int)+0x28>
c001bb5e:	66 90                	xchg   ax,ax
c001bb60:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001bb65:	e9 16 ff ff ff       	jmp    c001ba80 <HalConsoleScroll(int, int)+0x14>
c001bb6a:	66 90                	xchg   ax,ax
c001bb6c:	90                   	nop
c001bb6d:	83 c4 10             	add    esp,0x10
c001bb70:	c3                   	ret    
c001bb71:	8d 76 00             	lea    esi,[esi+0x0]

c001bb74 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001bb74:	83 ec 14             	sub    esp,0x14
c001bb77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb7b:	88 04 24             	mov    BYTE PTR [esp],al
c001bb7e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bb81:	0f b6 c0             	movzx  eax,al
c001bb84:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb88:	89 d1                	mov    ecx,edx
c001bb8a:	83 e1 0f             	and    ecx,0xf
c001bb8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bb91:	c1 e2 04             	shl    edx,0x4
c001bb94:	0f b6 d2             	movzx  edx,dl
c001bb97:	09 ca                	or     edx,ecx
c001bb99:	c1 e2 08             	shl    edx,0x8
c001bb9c:	09 d0                	or     eax,edx
c001bb9e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001bba3:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001bbab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bbaf:	89 d0                	mov    eax,edx
c001bbb1:	c1 e0 02             	shl    eax,0x2
c001bbb4:	01 d0                	add    eax,edx
c001bbb6:	c1 e0 04             	shl    eax,0x4
c001bbb9:	89 c2                	mov    edx,eax
c001bbbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bbbf:	01 d0                	add    eax,edx
c001bbc1:	01 c0                	add    eax,eax
c001bbc3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001bbc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bbcb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001bbd0:	66 89 02             	mov    WORD PTR [edx],ax
c001bbd3:	90                   	nop
c001bbd4:	83 c4 14             	add    esp,0x14
c001bbd7:	c3                   	ret    

c001bbd8 <HalConsoleCursorUpdate(int, int)>:
c001bbd8:	83 ec 20             	sub    esp,0x20
c001bbdb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bbdf:	89 c2                	mov    edx,eax
c001bbe1:	c1 e2 02             	shl    edx,0x2
c001bbe4:	01 d0                	add    eax,edx
c001bbe6:	c1 e0 04             	shl    eax,0x4
c001bbe9:	89 c2                	mov    edx,eax
c001bbeb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bbef:	01 d0                	add    eax,edx
c001bbf1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001bbf6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001bbfd:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001bc02:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bc06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bc0a:	ee                   	out    dx,al
c001bc0b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001bc10:	0f b6 c0             	movzx  eax,al
c001bc13:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001bc1a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001bc1e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001bc22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc26:	ee                   	out    dx,al
c001bc27:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001bc2e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001bc33:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001bc37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bc3b:	ee                   	out    dx,al
c001bc3c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001bc41:	c1 e8 08             	shr    eax,0x8
c001bc44:	0f b6 c0             	movzx  eax,al
c001bc47:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001bc4e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001bc52:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001bc56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bc5a:	ee                   	out    dx,al
c001bc5b:	90                   	nop
c001bc5c:	83 c4 20             	add    esp,0x20
c001bc5f:	c3                   	ret    

c001bc60 <FAT::getName()>:
c001bc60:	b8 e0 94 02 c0       	mov    eax,0xc00294e0
c001bc65:	c3                   	ret    
c001bc66:	66 90                	xchg   ax,ax

c001bc68 <FAT::tell(void*, unsigned long long*)>:
c001bc68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bc6d:	75 09                	jne    c001bc78 <FAT::tell(void*, unsigned long long*)+0x10>
c001bc6f:	b8 04 00 00 00       	mov    eax,0x4
c001bc74:	c3                   	ret    
c001bc75:	8d 76 00             	lea    esi,[esi+0x0]
c001bc78:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bc7d:	75 09                	jne    c001bc88 <FAT::tell(void*, unsigned long long*)+0x20>
c001bc7f:	b8 04 00 00 00       	mov    eax,0x4
c001bc84:	c3                   	ret    
c001bc85:	8d 76 00             	lea    esi,[esi+0x0]
c001bc88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc8c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bc8f:	ba 00 00 00 00       	mov    edx,0x0
c001bc94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bc98:	89 01                	mov    DWORD PTR [ecx],eax
c001bc9a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bc9d:	b8 00 00 00 00       	mov    eax,0x0
c001bca2:	c3                   	ret    
c001bca3:	90                   	nop

c001bca4 <FAT::stat(void*, unsigned long long*)>:
c001bca4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bca9:	75 09                	jne    c001bcb4 <FAT::stat(void*, unsigned long long*)+0x10>
c001bcab:	b8 04 00 00 00       	mov    eax,0x4
c001bcb0:	c3                   	ret    
c001bcb1:	8d 76 00             	lea    esi,[esi+0x0]
c001bcb4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bcb9:	75 09                	jne    c001bcc4 <FAT::stat(void*, unsigned long long*)+0x20>
c001bcbb:	b8 04 00 00 00       	mov    eax,0x4
c001bcc0:	c3                   	ret    
c001bcc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bcc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bcc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bccb:	ba 00 00 00 00       	mov    edx,0x0
c001bcd0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bcd4:	89 01                	mov    DWORD PTR [ecx],eax
c001bcd6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bcd9:	b8 00 00 00 00       	mov    eax,0x0
c001bcde:	c3                   	ret    
c001bcdf:	90                   	nop

c001bce0 <FAT::~FAT()>:
c001bce0:	83 ec 0c             	sub    esp,0xc
c001bce3:	ba 2c 95 02 c0       	mov    edx,0xc002952c
c001bce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcec:	89 10                	mov    DWORD PTR [eax],edx
c001bcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf2:	83 ec 0c             	sub    esp,0xc
c001bcf5:	50                   	push   eax
c001bcf6:	e8 f1 c0 fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001bcfb:	83 c4 10             	add    esp,0x10
c001bcfe:	90                   	nop
c001bcff:	83 c4 0c             	add    esp,0xc
c001bd02:	c3                   	ret    
c001bd03:	90                   	nop

c001bd04 <FAT::~FAT()>:
c001bd04:	83 ec 0c             	sub    esp,0xc
c001bd07:	83 ec 0c             	sub    esp,0xc
c001bd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd0e:	e8 cd ff ff ff       	call   c001bce0 <FAT::~FAT()>
c001bd13:	83 c4 10             	add    esp,0x10
c001bd16:	83 ec 08             	sub    esp,0x8
c001bd19:	6a 08                	push   0x8
c001bd1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd1f:	e8 58 16 ff ff       	call   c000d37c <operator delete(void*, unsigned long)>
c001bd24:	83 c4 10             	add    esp,0x10
c001bd27:	83 c4 0c             	add    esp,0xc
c001bd2a:	c3                   	ret    
c001bd2b:	90                   	nop

c001bd2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001bd2c:	83 ec 1c             	sub    esp,0x1c
c001bd2f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001bd36:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001bd3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bd3f:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001bd46:	83 f8 ff             	cmp    eax,0xffffffff
c001bd49:	75 35                	jne    c001bd80 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001bd4b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bd4f:	88 c2                	mov    dl,al
c001bd51:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001bd56:	01 d0                	add    eax,edx
c001bd58:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bd5c:	8b 15 80 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033480
c001bd62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bd66:	89 14 85 a0 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccb60],edx
c001bd6d:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001bd72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bd76:	89 14 85 20 35 03 c0 	mov    DWORD PTR [eax*4-0x3ffccae0],edx
c001bd7d:	eb 19                	jmp    c001bd98 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001bd7f:	90                   	nop
c001bd80:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bd84:	88 c2                	mov    dl,al
c001bd86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bd8a:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001bd91:	01 d0                	add    eax,edx
c001bd93:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bd97:	90                   	nop
c001bd98:	83 ec 04             	sub    esp,0x4
c001bd9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bd9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bda3:	8d 44 24 15          	lea    eax,[esp+0x15]
c001bda7:	50                   	push   eax
c001bda8:	e8 0b 94 fe ff       	call   c00051b8 <f_getlabel>
c001bdad:	83 c4 10             	add    esp,0x10
c001bdb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdb4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bdb9:	75 09                	jne    c001bdc4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001bdbb:	b8 00 00 00 00       	mov    eax,0x0
c001bdc0:	eb 0a                	jmp    c001bdcc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001bdc2:	66 90                	xchg   ax,ax
c001bdc4:	b8 01 00 00 00       	mov    eax,0x1
c001bdc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bdcc:	83 c4 1c             	add    esp,0x1c
c001bdcf:	c3                   	ret    

c001bdd0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001bdd0:	57                   	push   edi
c001bdd1:	83 ec 58             	sub    esp,0x58
c001bdd4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001bddc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bde0:	b8 00 00 00 00       	mov    eax,0x0
c001bde5:	b9 0f 00 00 00       	mov    ecx,0xf
c001bdea:	fc                   	cld    
c001bdeb:	89 d7                	mov    edi,edx
c001bded:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bdef:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bdf3:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001bdfa:	83 f8 ff             	cmp    eax,0xffffffff
c001bdfd:	75 35                	jne    c001be34 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001bdff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001be03:	88 c2                	mov    dl,al
c001be05:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001be0a:	01 d0                	add    eax,edx
c001be0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001be10:	8b 15 80 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033480
c001be16:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001be1a:	89 14 85 a0 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccb60],edx
c001be21:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001be26:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001be2a:	89 14 85 20 35 03 c0 	mov    DWORD PTR [eax*4-0x3ffccae0],edx
c001be31:	eb 19                	jmp    c001be4c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001be33:	90                   	nop
c001be34:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001be38:	88 c2                	mov    dl,al
c001be3a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001be3e:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001be45:	01 d0                	add    eax,edx
c001be47:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001be4b:	90                   	nop
c001be4c:	83 ec 08             	sub    esp,0x8
c001be4f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001be53:	8d 44 24 18          	lea    eax,[esp+0x18]
c001be57:	50                   	push   eax
c001be58:	e8 e3 49 fe ff       	call   c0000840 <strcat>
c001be5d:	83 c4 10             	add    esp,0x10
c001be60:	83 ec 0c             	sub    esp,0xc
c001be63:	8d 44 24 18          	lea    eax,[esp+0x18]
c001be67:	50                   	push   eax
c001be68:	e8 9c 94 fe ff       	call   c0005309 <f_setlabel>
c001be6d:	83 c4 10             	add    esp,0x10
c001be70:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be74:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001be79:	75 09                	jne    c001be84 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001be7b:	b8 00 00 00 00       	mov    eax,0x0
c001be80:	eb 0a                	jmp    c001be8c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001be82:	66 90                	xchg   ax,ax
c001be84:	b8 01 00 00 00       	mov    eax,0x1
c001be89:	8d 76 00             	lea    esi,[esi+0x0]
c001be8c:	83 c4 58             	add    esp,0x58
c001be8f:	5f                   	pop    edi
c001be90:	c3                   	ret    
c001be91:	90                   	nop
c001be92:	66 90                	xchg   ax,ax

c001be94 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001be94:	83 ec 2c             	sub    esp,0x2c
c001be97:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001be9f:	83 ec 08             	sub    esp,0x8
c001bea2:	68 04 95 02 c0       	push   0xc0029504
c001bea7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001beab:	e8 a0 48 fe ff       	call   c0000750 <strcmp>
c001beb0:	83 c4 10             	add    esp,0x10
c001beb3:	85 c0                	test   eax,eax
c001beb5:	0f 94 c0             	sete   al
c001beb8:	0f b6 c0             	movzx  eax,al
c001bebb:	85 c0                	test   eax,eax
c001bebd:	74 0d                	je     c001becc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001bebf:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bec7:	e9 c0 00 00 00       	jmp    c001bf8c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001becc:	83 ec 08             	sub    esp,0x8
c001becf:	68 f6 94 02 c0       	push   0xc00294f6
c001bed4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bed8:	e8 73 48 fe ff       	call   c0000750 <strcmp>
c001bedd:	83 c4 10             	add    esp,0x10
c001bee0:	85 c0                	test   eax,eax
c001bee2:	0f 94 c0             	sete   al
c001bee5:	0f b6 c0             	movzx  eax,al
c001bee8:	85 c0                	test   eax,eax
c001beea:	74 10                	je     c001befc <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001beec:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bef4:	e9 93 00 00 00       	jmp    c001bf8c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bef9:	8d 76 00             	lea    esi,[esi+0x0]
c001befc:	83 ec 08             	sub    esp,0x8
c001beff:	68 fc 94 02 c0       	push   0xc00294fc
c001bf04:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bf08:	e8 43 48 fe ff       	call   c0000750 <strcmp>
c001bf0d:	83 c4 10             	add    esp,0x10
c001bf10:	85 c0                	test   eax,eax
c001bf12:	0f 94 c0             	sete   al
c001bf15:	0f b6 c0             	movzx  eax,al
c001bf18:	85 c0                	test   eax,eax
c001bf1a:	74 0c                	je     c001bf28 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001bf1c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bf24:	eb 66                	jmp    c001bf8c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bf26:	66 90                	xchg   ax,ax
c001bf28:	83 ec 08             	sub    esp,0x8
c001bf2b:	68 3c 65 02 c0       	push   0xc002653c
c001bf30:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bf34:	e8 17 48 fe ff       	call   c0000750 <strcmp>
c001bf39:	83 c4 10             	add    esp,0x10
c001bf3c:	85 c0                	test   eax,eax
c001bf3e:	0f 94 c0             	sete   al
c001bf41:	0f b6 c0             	movzx  eax,al
c001bf44:	85 c0                	test   eax,eax
c001bf46:	74 0c                	je     c001bf54 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001bf48:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001bf50:	eb 3a                	jmp    c001bf8c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bf52:	66 90                	xchg   ax,ax
c001bf54:	83 ec 08             	sub    esp,0x8
c001bf57:	68 02 95 02 c0       	push   0xc0029502
c001bf5c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bf60:	e8 eb 47 fe ff       	call   c0000750 <strcmp>
c001bf65:	83 c4 10             	add    esp,0x10
c001bf68:	85 c0                	test   eax,eax
c001bf6a:	0f 94 c0             	sete   al
c001bf6d:	0f b6 c0             	movzx  eax,al
c001bf70:	85 c0                	test   eax,eax
c001bf72:	74 0c                	je     c001bf80 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001bf74:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001bf7c:	eb 0e                	jmp    c001bf8c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bf7e:	66 90                	xchg   ax,ax
c001bf80:	b8 08 00 00 00       	mov    eax,0x8
c001bf85:	e9 ea 00 00 00       	jmp    c001c074 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bf8a:	66 90                	xchg   ax,ax
c001bf8c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001bf93:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001bf98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf9c:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001bfa3:	83 f8 ff             	cmp    eax,0xffffffff
c001bfa6:	75 34                	jne    c001bfdc <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001bfa8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bfac:	88 c2                	mov    dl,al
c001bfae:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001bfb3:	01 d0                	add    eax,edx
c001bfb5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bfb9:	8b 15 80 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033480
c001bfbf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bfc3:	89 14 85 a0 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccb60],edx
c001bfca:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001bfcf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bfd3:	89 14 85 20 35 03 c0 	mov    DWORD PTR [eax*4-0x3ffccae0],edx
c001bfda:	eb 18                	jmp    c001bff4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001bfdc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bfe0:	88 c2                	mov    dl,al
c001bfe2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bfe6:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001bfed:	01 d0                	add    eax,edx
c001bfef:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bff3:	90                   	nop
c001bff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bff8:	88 04 24             	mov    BYTE PTR [esp],al
c001bffb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bfff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c003:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c00b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001c010:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c018:	83 ec 0c             	sub    esp,0xc
c001c01b:	68 00 20 00 00       	push   0x2000
c001c020:	e8 3e 38 ff ff       	call   c000f863 <malloc>
c001c025:	83 c4 10             	add    esp,0x10
c001c028:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c02c:	68 00 20 00 00       	push   0x2000
c001c031:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c035:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c039:	50                   	push   eax
c001c03a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001c03e:	50                   	push   eax
c001c03f:	e8 c2 95 fe ff       	call   c0005606 <f_mkfs>
c001c044:	83 c4 10             	add    esp,0x10
c001c047:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c04b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c050:	75 0a                	jne    c001c05c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001c052:	b8 00 00 00 00       	mov    eax,0x0
c001c057:	eb 1b                	jmp    c001c074 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c059:	8d 76 00             	lea    esi,[esi+0x0]
c001c05c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001c061:	75 09                	jne    c001c06c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001c063:	b8 09 00 00 00       	mov    eax,0x9
c001c068:	eb 0a                	jmp    c001c074 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c06a:	66 90                	xchg   ax,ax
c001c06c:	b8 01 00 00 00       	mov    eax,0x1
c001c071:	8d 76 00             	lea    esi,[esi+0x0]
c001c074:	83 c4 2c             	add    esp,0x2c
c001c077:	c3                   	ret    

c001c078 <FAT::tryMount(LogicalDisk*, int)>:
c001c078:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001c07e:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001c083:	83 f8 14             	cmp    eax,0x14
c001c086:	75 18                	jne    c001c0a0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001c088:	83 ec 0c             	sub    esp,0xc
c001c08b:	68 08 95 02 c0       	push   0xc0029508
c001c090:	e8 23 3c ff ff       	call   c000fcb8 <KePanic(char const*)>
c001c095:	83 c4 10             	add    esp,0x10
c001c098:	b0 00                	mov    al,0x0
c001c09a:	e9 ed 01 00 00       	jmp    c001c28c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c09f:	90                   	nop
c001c0a0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001c0a7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c0ad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c0b3:	3d 00 02 00 00       	cmp    eax,0x200
c001c0b8:	74 0a                	je     c001c0c4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001c0ba:	b0 00                	mov    al,0x0
c001c0bc:	e9 cb 01 00 00       	jmp    c001c28c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c0c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c0c4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001c0cc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c0d3:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001c0da:	83 f8 ff             	cmp    eax,0xffffffff
c001c0dd:	74 09                	je     c001c0e8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001c0df:	b0 01                	mov    al,0x1
c001c0e1:	e9 a6 01 00 00       	jmp    c001c28c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c0e6:	66 90                	xchg   ax,ax
c001c0e8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001c0f2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001c0fa:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001c101:	88 c2                	mov    dl,al
c001c103:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001c108:	01 d0                	add    eax,edx
c001c10a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001c111:	8b 15 80 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033480
c001c117:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c11e:	89 14 85 a0 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccb60],edx
c001c125:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001c12a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001c131:	89 14 85 20 35 03 c0 	mov    DWORD PTR [eax*4-0x3ffccae0],edx
c001c138:	83 ec 0c             	sub    esp,0xc
c001c13b:	68 34 02 00 00       	push   0x234
c001c140:	e8 1e 37 ff ff       	call   c000f863 <malloc>
c001c145:	83 c4 10             	add    esp,0x10
c001c148:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001c14f:	83 ec 04             	sub    esp,0x4
c001c152:	6a 00                	push   0x0
c001c154:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c15b:	50                   	push   eax
c001c15c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c163:	e8 79 7c fe ff       	call   c0003de1 <f_mount>
c001c168:	83 c4 10             	add    esp,0x10
c001c16b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c172:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001c17a:	74 1c                	je     c001c198 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001c17c:	83 ec 0c             	sub    esp,0xc
c001c17f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c186:	e8 f8 36 ff ff       	call   c000f883 <rfree>
c001c18b:	83 c4 10             	add    esp,0x10
c001c18e:	b0 00                	mov    al,0x0
c001c190:	e9 f7 00 00 00       	jmp    c001c28c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c195:	8d 76 00             	lea    esi,[esi+0x0]
c001c198:	83 ec 04             	sub    esp,0x4
c001c19b:	68 00 01 00 00       	push   0x100
c001c1a0:	6a 00                	push   0x0
c001c1a2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c1a9:	50                   	push   eax
c001c1aa:	e8 41 43 fe ff       	call   c00004f0 <memset>
c001c1af:	83 c4 10             	add    esp,0x10
c001c1b2:	83 ec 08             	sub    esp,0x8
c001c1b5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c1bc:	50                   	push   eax
c001c1bd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c1c4:	50                   	push   eax
c001c1c5:	e8 76 46 fe ff       	call   c0000840 <strcat>
c001c1ca:	83 c4 10             	add    esp,0x10
c001c1cd:	83 ec 08             	sub    esp,0x8
c001c1d0:	68 16 95 02 c0       	push   0xc0029516
c001c1d5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c1dc:	50                   	push   eax
c001c1dd:	e8 5e 46 fe ff       	call   c0000840 <strcat>
c001c1e2:	83 c4 10             	add    esp,0x10
c001c1e5:	83 ec 04             	sub    esp,0x4
c001c1e8:	6a 01                	push   0x1
c001c1ea:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001c1f1:	50                   	push   eax
c001c1f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1f6:	50                   	push   eax
c001c1f7:	e8 47 7c fe ff       	call   c0003e43 <f_open>
c001c1fc:	83 c4 10             	add    esp,0x10
c001c1ff:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c206:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001c20d:	85 c0                	test   eax,eax
c001c20f:	74 0b                	je     c001c21c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001c211:	78 31                	js     c001c244 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c213:	83 e8 04             	sub    eax,0x4
c001c216:	83 f8 01             	cmp    eax,0x1
c001c219:	77 29                	ja     c001c244 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c21b:	90                   	nop
c001c21c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001c224:	83 ec 0c             	sub    esp,0xc
c001c227:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c22b:	50                   	push   eax
c001c22c:	e8 e1 83 fe ff       	call   c0004612 <f_close>
c001c231:	83 c4 10             	add    esp,0x10
c001c234:	90                   	nop
c001c235:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001c23d:	85 c0                	test   eax,eax
c001c23f:	74 43                	je     c001c284 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001c241:	eb 31                	jmp    c001c274 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001c243:	90                   	nop
c001c244:	83 ec 0c             	sub    esp,0xc
c001c247:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c24e:	e8 30 36 ff ff       	call   c000f883 <rfree>
c001c253:	83 c4 10             	add    esp,0x10
c001c256:	83 ec 04             	sub    esp,0x4
c001c259:	6a 00                	push   0x0
c001c25b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c262:	50                   	push   eax
c001c263:	6a 00                	push   0x0
c001c265:	e8 77 7b fe ff       	call   c0003de1 <f_mount>
c001c26a:	83 c4 10             	add    esp,0x10
c001c26d:	b0 00                	mov    al,0x0
c001c26f:	eb 1b                	jmp    c001c28c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c271:	8d 76 00             	lea    esi,[esi+0x0]
c001c274:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001c279:	83 c0 01             	add    eax,0x1
c001c27c:	a3 80 34 03 c0       	mov    ds:0xc0033480,eax
c001c281:	8d 76 00             	lea    esi,[esi+0x0]
c001c284:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001c28b:	90                   	nop
c001c28c:	81 c4 4c 03 00 00    	add    esp,0x34c
c001c292:	c3                   	ret    
c001c293:	90                   	nop

c001c294 <FAT::allocateSwapfile(char const*, int)>:
c001c294:	55                   	push   ebp
c001c295:	57                   	push   edi
c001c296:	56                   	push   esi
c001c297:	53                   	push   ebx
c001c298:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001c29e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001c2a9:	83 ec 0c             	sub    esp,0xc
c001c2ac:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001c2b3:	e8 ab 35 ff ff       	call   c000f863 <malloc>
c001c2b8:	83 c4 10             	add    esp,0x10
c001c2bb:	89 c7                	mov    edi,eax
c001c2bd:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001c2c2:	83 ec 04             	sub    esp,0x4
c001c2c5:	50                   	push   eax
c001c2c6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001c2cd:	57                   	push   edi
c001c2ce:	e8 b7 be fe ff       	call   c000818a <File::File(char const*, Process*)>
c001c2d3:	83 c4 10             	add    esp,0x10
c001c2d6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001c2dd:	83 ec 04             	sub    esp,0x4
c001c2e0:	8d 44 24 13          	lea    eax,[esp+0x13]
c001c2e4:	50                   	push   eax
c001c2e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c2e9:	50                   	push   eax
c001c2ea:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c2f1:	e8 b4 c1 fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001c2f6:	83 c4 10             	add    esp,0x10
c001c2f9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c300:	c1 e0 14             	shl    eax,0x14
c001c303:	89 c7                	mov    edi,eax
c001c305:	89 c5                	mov    ebp,eax
c001c307:	c1 fd 1f             	sar    ebp,0x1f
c001c30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c30e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c312:	89 f9                	mov    ecx,edi
c001c314:	31 c1                	xor    ecx,eax
c001c316:	89 cb                	mov    ebx,ecx
c001c318:	89 e9                	mov    ecx,ebp
c001c31a:	31 d1                	xor    ecx,edx
c001c31c:	89 ce                	mov    esi,ecx
c001c31e:	89 f0                	mov    eax,esi
c001c320:	09 d8                	or     eax,ebx
c001c322:	0f 84 9c 00 00 00    	je     c001c3c4 <FAT::allocateSwapfile(char const*, int)+0x130>
c001c328:	83 ec 0c             	sub    esp,0xc
c001c32b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c332:	e8 3f c0 fe ff       	call   c0008376 <File::unlink()>
c001c337:	83 c4 10             	add    esp,0x10
c001c33a:	83 ec 08             	sub    esp,0x8
c001c33d:	6a 12                	push   0x12
c001c33f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c346:	e8 5d be fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001c34b:	83 c4 10             	add    esp,0x10
c001c34e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c355:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c35b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c362:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c369:	c1 e0 14             	shl    eax,0x14
c001c36c:	83 ec 04             	sub    esp,0x4
c001c36f:	6a 01                	push   0x1
c001c371:	50                   	push   eax
c001c372:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001c379:	e8 1b 91 fe ff       	call   c0005499 <f_expand>
c001c37e:	83 c4 10             	add    esp,0x10
c001c381:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c388:	8b 00                	mov    eax,DWORD PTR [eax]
c001c38a:	83 c0 10             	add    eax,0x10
c001c38d:	8b 00                	mov    eax,DWORD PTR [eax]
c001c38f:	83 ec 0c             	sub    esp,0xc
c001c392:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c396:	52                   	push   edx
c001c397:	8d 54 24 30          	lea    edx,[esp+0x30]
c001c39b:	52                   	push   edx
c001c39c:	6a 00                	push   0x0
c001c39e:	68 00 04 00 00       	push   0x400
c001c3a3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c3aa:	ff d0                	call   eax
c001c3ac:	83 c4 20             	add    esp,0x20
c001c3af:	83 ec 0c             	sub    esp,0xc
c001c3b2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c3b9:	e8 48 be fe ff       	call   c0008206 <File::close()>
c001c3be:	83 c4 10             	add    esp,0x10
c001c3c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c3c4:	83 ec 08             	sub    esp,0x8
c001c3c7:	6a 01                	push   0x1
c001c3c9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c3d0:	e8 d3 bd fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001c3d5:	83 c4 10             	add    esp,0x10
c001c3d8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c3df:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3e1:	83 c0 0c             	add    eax,0xc
c001c3e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3e6:	83 ec 0c             	sub    esp,0xc
c001c3e9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c3ed:	52                   	push   edx
c001c3ee:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001c3f2:	52                   	push   edx
c001c3f3:	6a 00                	push   0x0
c001c3f5:	6a 04                	push   0x4
c001c3f7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c3fe:	ff d0                	call   eax
c001c400:	83 c4 20             	add    esp,0x20
c001c403:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c40a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c410:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c417:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001c41e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001c421:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001c428:	83 ec 0c             	sub    esp,0xc
c001c42b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c432:	e8 cf bd fe ff       	call   c0008206 <File::close()>
c001c437:	83 c4 10             	add    esp,0x10
c001c43a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001c441:	ba 00 00 00 00       	mov    edx,0x0
c001c446:	81 c4 3c 04 00 00    	add    esp,0x43c
c001c44c:	5b                   	pop    ebx
c001c44d:	5e                   	pop    esi
c001c44e:	5f                   	pop    edi
c001c44f:	5d                   	pop    ebp
c001c450:	c3                   	ret    
c001c451:	90                   	nop
c001c452:	66 90                	xchg   ax,ax

c001c454 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001c454:	57                   	push   edi
c001c455:	56                   	push   esi
c001c456:	53                   	push   ebx
c001c457:	81 ec 50 02 00 00    	sub    esp,0x250
c001c45d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001c465:	74 0d                	je     c001c474 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001c467:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001c46f:	75 0f                	jne    c001c480 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c471:	8d 76 00             	lea    esi,[esi+0x0]
c001c474:	b8 04 00 00 00       	mov    eax,0x4
c001c479:	e9 3a 01 00 00       	jmp    c001c5b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c47e:	66 90                	xchg   ax,ax
c001c480:	83 ec 08             	sub    esp,0x8
c001c483:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c48a:	50                   	push   eax
c001c48b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c492:	e8 48 84 fe ff       	call   c00048df <f_readdir>
c001c497:	83 c4 10             	add    esp,0x10
c001c49a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c4a1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c4a8:	83 ec 0c             	sub    esp,0xc
c001c4ab:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c4b2:	83 c0 16             	add    eax,0x16
c001c4b5:	50                   	push   eax
c001c4b6:	e8 b5 40 fe ff       	call   c0000570 <strlen>
c001c4bb:	83 c4 10             	add    esp,0x10
c001c4be:	ba 00 00 00 00       	mov    edx,0x0
c001c4c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c4cb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c4d2:	0f b6 c0             	movzx  eax,al
c001c4d5:	83 e0 10             	and    eax,0x10
c001c4d8:	74 0a                	je     c001c4e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c4da:	b8 02 00 00 00       	mov    eax,0x2
c001c4df:	eb 0b                	jmp    c001c4ec <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c4e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4e4:	b8 01 00 00 00       	mov    eax,0x1
c001c4e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c4ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4f0:	83 ec 08             	sub    esp,0x8
c001c4f3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c4fa:	83 c0 16             	add    eax,0x16
c001c4fd:	50                   	push   eax
c001c4fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c502:	83 c0 10             	add    eax,0x10
c001c505:	50                   	push   eax
c001c506:	e8 35 41 fe ff       	call   c0000640 <strcpy>
c001c50b:	83 c4 10             	add    esp,0x10
c001c50e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c515:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c51c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c520:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c527:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c52e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c535:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c53c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c543:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c54a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c551:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c558:	89 c6                	mov    esi,eax
c001c55a:	89 d7                	mov    edi,edx
c001c55c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c55e:	89 c8                	mov    eax,ecx
c001c560:	89 fa                	mov    edx,edi
c001c562:	89 f3                	mov    ebx,esi
c001c564:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c56b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c572:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c579:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c580:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c586:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c58d:	0f be c0             	movsx  eax,al
c001c590:	85 c0                	test   eax,eax
c001c592:	75 08                	jne    c001c59c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c594:	b8 07 00 00 00       	mov    eax,0x7
c001c599:	eb 1d                	jmp    c001c5b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c59b:	90                   	nop
c001c59c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c5a3:	85 c0                	test   eax,eax
c001c5a5:	75 09                	jne    c001c5b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c5a7:	b8 00 00 00 00       	mov    eax,0x0
c001c5ac:	eb 0a                	jmp    c001c5b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c5ae:	66 90                	xchg   ax,ax
c001c5b0:	b8 01 00 00 00       	mov    eax,0x1
c001c5b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5b8:	81 c4 50 02 00 00    	add    esp,0x250
c001c5be:	5b                   	pop    ebx
c001c5bf:	5e                   	pop    esi
c001c5c0:	5f                   	pop    edi
c001c5c1:	c3                   	ret    
c001c5c2:	66 90                	xchg   ax,ax

c001c5c4 <FAT::read(void*, unsigned long, void*, int*)>:
c001c5c4:	83 ec 1c             	sub    esp,0x1c
c001c5c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c5cc:	74 0a                	je     c001c5d8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c5ce:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c5d3:	75 0b                	jne    c001c5e0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c5d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5d8:	b8 04 00 00 00       	mov    eax,0x4
c001c5dd:	eb 41                	jmp    c001c620 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c5df:	90                   	nop
c001c5e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c5e4:	50                   	push   eax
c001c5e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c5e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c5ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c5f1:	e8 10 7b fe ff       	call   c0004106 <f_read>
c001c5f6:	83 c4 10             	add    esp,0x10
c001c5f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c601:	89 c2                	mov    edx,eax
c001c603:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c607:	89 10                	mov    DWORD PTR [eax],edx
c001c609:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c60d:	85 c0                	test   eax,eax
c001c60f:	75 07                	jne    c001c618 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c611:	b8 00 00 00 00       	mov    eax,0x0
c001c616:	eb 08                	jmp    c001c620 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c618:	b8 01 00 00 00       	mov    eax,0x1
c001c61d:	8d 76 00             	lea    esi,[esi+0x0]
c001c620:	83 c4 1c             	add    esp,0x1c
c001c623:	c3                   	ret    

c001c624 <FAT::write(void*, unsigned long, void*, int*)>:
c001c624:	83 ec 1c             	sub    esp,0x1c
c001c627:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c62c:	74 0a                	je     c001c638 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c62e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c633:	75 0b                	jne    c001c640 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c635:	8d 76 00             	lea    esi,[esi+0x0]
c001c638:	b8 04 00 00 00       	mov    eax,0x4
c001c63d:	eb 41                	jmp    c001c680 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c63f:	90                   	nop
c001c640:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c644:	50                   	push   eax
c001c645:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c649:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c64d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c651:	e8 af 7c fe ff       	call   c0004305 <f_write>
c001c656:	83 c4 10             	add    esp,0x10
c001c659:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c65d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c661:	89 c2                	mov    edx,eax
c001c663:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c667:	89 10                	mov    DWORD PTR [eax],edx
c001c669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c66d:	85 c0                	test   eax,eax
c001c66f:	75 07                	jne    c001c678 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c671:	b8 00 00 00 00       	mov    eax,0x0
c001c676:	eb 08                	jmp    c001c680 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c678:	b8 01 00 00 00       	mov    eax,0x1
c001c67d:	8d 76 00             	lea    esi,[esi+0x0]
c001c680:	83 c4 1c             	add    esp,0x1c
c001c683:	c3                   	ret    

c001c684 <FAT::close(void*)>:
c001c684:	83 ec 1c             	sub    esp,0x1c
c001c687:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c68c:	75 0a                	jne    c001c698 <FAT::close(void*)+0x14>
c001c68e:	b8 04 00 00 00       	mov    eax,0x4
c001c693:	eb 3f                	jmp    c001c6d4 <FAT::close(void*)+0x50>
c001c695:	8d 76 00             	lea    esi,[esi+0x0]
c001c698:	83 ec 0c             	sub    esp,0xc
c001c69b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c69f:	e8 6e 7f fe ff       	call   c0004612 <f_close>
c001c6a4:	83 c4 10             	add    esp,0x10
c001c6a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6ab:	83 ec 0c             	sub    esp,0xc
c001c6ae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c6b2:	e8 bc 31 ff ff       	call   c000f873 <free>
c001c6b7:	83 c4 10             	add    esp,0x10
c001c6ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6be:	85 c0                	test   eax,eax
c001c6c0:	75 0a                	jne    c001c6cc <FAT::close(void*)+0x48>
c001c6c2:	b8 00 00 00 00       	mov    eax,0x0
c001c6c7:	eb 0b                	jmp    c001c6d4 <FAT::close(void*)+0x50>
c001c6c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c6cc:	b8 01 00 00 00       	mov    eax,0x1
c001c6d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c6d4:	83 c4 1c             	add    esp,0x1c
c001c6d7:	c3                   	ret    

c001c6d8 <FAT::closeDir(void*)>:
c001c6d8:	83 ec 1c             	sub    esp,0x1c
c001c6db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c6e0:	75 0a                	jne    c001c6ec <FAT::closeDir(void*)+0x14>
c001c6e2:	b8 04 00 00 00       	mov    eax,0x4
c001c6e7:	eb 3f                	jmp    c001c728 <FAT::closeDir(void*)+0x50>
c001c6e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c6ec:	83 ec 0c             	sub    esp,0xc
c001c6ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c6f3:	e8 c5 81 fe ff       	call   c00048bd <f_closedir>
c001c6f8:	83 c4 10             	add    esp,0x10
c001c6fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6ff:	83 ec 0c             	sub    esp,0xc
c001c702:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c706:	e8 68 31 ff ff       	call   c000f873 <free>
c001c70b:	83 c4 10             	add    esp,0x10
c001c70e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c712:	85 c0                	test   eax,eax
c001c714:	75 0a                	jne    c001c720 <FAT::closeDir(void*)+0x48>
c001c716:	b8 00 00 00 00       	mov    eax,0x0
c001c71b:	eb 0b                	jmp    c001c728 <FAT::closeDir(void*)+0x50>
c001c71d:	8d 76 00             	lea    esi,[esi+0x0]
c001c720:	b8 01 00 00 00       	mov    eax,0x1
c001c725:	8d 76 00             	lea    esi,[esi+0x0]
c001c728:	83 c4 1c             	add    esp,0x1c
c001c72b:	c3                   	ret    

c001c72c <FAT::truncate(void*, unsigned long long)>:
c001c72c:	83 ec 2c             	sub    esp,0x2c
c001c72f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c733:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c737:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c73b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c73f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c744:	75 0a                	jne    c001c750 <FAT::truncate(void*, unsigned long long)+0x24>
c001c746:	b8 04 00 00 00       	mov    eax,0x4
c001c74b:	eb 47                	jmp    c001c794 <FAT::truncate(void*, unsigned long long)+0x68>
c001c74d:	8d 76 00             	lea    esi,[esi+0x0]
c001c750:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c754:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c757:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c75b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c767:	83 ec 08             	sub    esp,0x8
c001c76a:	50                   	push   eax
c001c76b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c76f:	e8 cd 7e fe ff       	call   c0004641 <f_lseek>
c001c774:	83 c4 10             	add    esp,0x10
c001c777:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c77b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c77f:	85 c0                	test   eax,eax
c001c781:	75 09                	jne    c001c78c <FAT::truncate(void*, unsigned long long)+0x60>
c001c783:	b8 00 00 00 00       	mov    eax,0x0
c001c788:	eb 0a                	jmp    c001c794 <FAT::truncate(void*, unsigned long long)+0x68>
c001c78a:	66 90                	xchg   ax,ax
c001c78c:	b8 01 00 00 00       	mov    eax,0x1
c001c791:	8d 76 00             	lea    esi,[esi+0x0]
c001c794:	83 c4 2c             	add    esp,0x2c
c001c797:	c3                   	ret    

c001c798 <FAT::seek(void*, unsigned long long)>:
c001c798:	83 ec 2c             	sub    esp,0x2c
c001c79b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c79f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c7a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7ab:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c7b0:	75 0a                	jne    c001c7bc <FAT::seek(void*, unsigned long long)+0x24>
c001c7b2:	b8 04 00 00 00       	mov    eax,0x4
c001c7b7:	eb 33                	jmp    c001c7ec <FAT::seek(void*, unsigned long long)+0x54>
c001c7b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7c0:	83 ec 08             	sub    esp,0x8
c001c7c3:	50                   	push   eax
c001c7c4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c7c8:	e8 74 7e fe ff       	call   c0004641 <f_lseek>
c001c7cd:	83 c4 10             	add    esp,0x10
c001c7d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c7d8:	85 c0                	test   eax,eax
c001c7da:	75 08                	jne    c001c7e4 <FAT::seek(void*, unsigned long long)+0x4c>
c001c7dc:	b8 00 00 00 00       	mov    eax,0x0
c001c7e1:	eb 09                	jmp    c001c7ec <FAT::seek(void*, unsigned long long)+0x54>
c001c7e3:	90                   	nop
c001c7e4:	b8 01 00 00 00       	mov    eax,0x1
c001c7e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c7ec:	83 c4 2c             	add    esp,0x2c
c001c7ef:	c3                   	ret    

c001c7f0 <fatWrapperReadDisk>:
c001c7f0:	53                   	push   ebx
c001c7f1:	83 ec 18             	sub    esp,0x18
c001c7f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c7fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c801:	8b 0c 85 e0 0a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcf520]
c001c808:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c80c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c810:	ba 00 00 00 00       	mov    edx,0x0
c001c815:	83 ec 0c             	sub    esp,0xc
c001c818:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c81c:	53                   	push   ebx
c001c81d:	52                   	push   edx
c001c81e:	50                   	push   eax
c001c81f:	51                   	push   ecx
c001c820:	e8 4d e2 fe ff       	call   c000aa72 <LogicalDisk::read(unsigned long long, int, void*)>
c001c825:	83 c4 20             	add    esp,0x20
c001c828:	83 c4 18             	add    esp,0x18
c001c82b:	5b                   	pop    ebx
c001c82c:	c3                   	ret    
c001c82d:	8d 76 00             	lea    esi,[esi+0x0]

c001c830 <fatWrapperWriteDisk>:
c001c830:	53                   	push   ebx
c001c831:	83 ec 18             	sub    esp,0x18
c001c834:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c838:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c83c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c841:	8b 0c 85 e0 0a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcf520]
c001c848:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c84c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c850:	ba 00 00 00 00       	mov    edx,0x0
c001c855:	83 ec 0c             	sub    esp,0xc
c001c858:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c85c:	53                   	push   ebx
c001c85d:	52                   	push   edx
c001c85e:	50                   	push   eax
c001c85f:	51                   	push   ecx
c001c860:	e8 79 e2 fe ff       	call   c000aade <LogicalDisk::write(unsigned long long, int, void*)>
c001c865:	83 c4 20             	add    esp,0x20
c001c868:	83 c4 18             	add    esp,0x18
c001c86b:	5b                   	pop    ebx
c001c86c:	c3                   	ret    
c001c86d:	8d 76 00             	lea    esi,[esi+0x0]

c001c870 <fatWrapperIoctl>:
c001c870:	53                   	push   ebx
c001c871:	83 ec 28             	sub    esp,0x28
c001c874:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c878:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c87c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c880:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c884:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c889:	83 f8 02             	cmp    eax,0x2
c001c88c:	75 32                	jne    c001c8c0 <fatWrapperIoctl+0x50>
c001c88e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c892:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c896:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c89b:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c001c8a2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c8a8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c8ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8b2:	66 89 02             	mov    WORD PTR [edx],ax
c001c8b5:	b8 00 00 00 00       	mov    eax,0x0
c001c8ba:	e9 c5 00 00 00       	jmp    c001c984 <fatWrapperIoctl+0x114>
c001c8bf:	90                   	nop
c001c8c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8c5:	83 f8 01             	cmp    eax,0x1
c001c8c8:	75 6a                	jne    c001c934 <fatWrapperIoctl+0xc4>
c001c8ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c8d2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c8d7:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c001c8de:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c8e4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c8ea:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c8f0:	89 c8                	mov    eax,ecx
c001c8f2:	89 da                	mov    edx,ebx
c001c8f4:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c8f8:	c1 e0 0a             	shl    eax,0xa
c001c8fb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c900:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c001c907:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c90d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c913:	89 cb                	mov    ebx,ecx
c001c915:	c1 fb 1f             	sar    ebx,0x1f
c001c918:	53                   	push   ebx
c001c919:	51                   	push   ecx
c001c91a:	52                   	push   edx
c001c91b:	50                   	push   eax
c001c91c:	e8 53 55 00 00       	call   c0021e74 <__udivdi3>
c001c921:	83 c4 10             	add    esp,0x10
c001c924:	89 c2                	mov    edx,eax
c001c926:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c92a:	89 10                	mov    DWORD PTR [eax],edx
c001c92c:	b8 00 00 00 00       	mov    eax,0x0
c001c931:	eb 51                	jmp    c001c984 <fatWrapperIoctl+0x114>
c001c933:	90                   	nop
c001c934:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c939:	85 c0                	test   eax,eax
c001c93b:	75 07                	jne    c001c944 <fatWrapperIoctl+0xd4>
c001c93d:	b8 00 00 00 00       	mov    eax,0x0
c001c942:	eb 40                	jmp    c001c984 <fatWrapperIoctl+0x114>
c001c944:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c949:	83 f8 03             	cmp    eax,0x3
c001c94c:	75 1a                	jne    c001c968 <fatWrapperIoctl+0xf8>
c001c94e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c952:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c956:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c95a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c960:	b8 00 00 00 00       	mov    eax,0x0
c001c965:	eb 1d                	jmp    c001c984 <fatWrapperIoctl+0x114>
c001c967:	90                   	nop
c001c968:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c96d:	83 f8 04             	cmp    eax,0x4
c001c970:	75 0a                	jne    c001c97c <fatWrapperIoctl+0x10c>
c001c972:	b8 00 00 00 00       	mov    eax,0x0
c001c977:	eb 0b                	jmp    c001c984 <fatWrapperIoctl+0x114>
c001c979:	8d 76 00             	lea    esi,[esi+0x0]
c001c97c:	b8 04 00 00 00       	mov    eax,0x4
c001c981:	8d 76 00             	lea    esi,[esi+0x0]
c001c984:	83 c4 28             	add    esp,0x28
c001c987:	5b                   	pop    ebx
c001c988:	c3                   	ret    
c001c989:	90                   	nop
c001c98a:	66 90                	xchg   ax,ax

c001c98c <FAT::FAT()>:
c001c98c:	83 ec 1c             	sub    esp,0x1c
c001c98f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c993:	83 ec 0c             	sub    esp,0xc
c001c996:	50                   	push   eax
c001c997:	e8 2c b4 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001c99c:	83 c4 10             	add    esp,0x10
c001c99f:	ba 2c 95 02 c0       	mov    edx,0xc002952c
c001c9a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9a8:	89 10                	mov    DWORD PTR [eax],edx
c001c9aa:	c7 05 80 34 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033480,0x0
c001c9b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c9bc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c9c1:	7f 19                	jg     c001c9dc <FAT::FAT()+0x50>
c001c9c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9c7:	c7 04 85 a0 34 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffccb60],0xffffffff
c001c9d2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c9d7:	eb e3                	jmp    c001c9bc <FAT::FAT()+0x30>
c001c9d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c9dc:	90                   	nop
c001c9dd:	83 c4 1c             	add    esp,0x1c
c001c9e0:	c3                   	ret    
c001c9e1:	90                   	nop
c001c9e2:	66 90                	xchg   ax,ax

c001c9e4 <FAT::fixFilepath(char*)>:
c001c9e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9e8:	8a 00                	mov    al,BYTE PTR [eax]
c001c9ea:	0f be c0             	movsx  eax,al
c001c9ed:	83 f8 40             	cmp    eax,0x40
c001c9f0:	7e 2e                	jle    c001ca20 <FAT::fixFilepath(char*)+0x3c>
c001c9f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9f6:	8a 00                	mov    al,BYTE PTR [eax]
c001c9f8:	83 e8 41             	sub    eax,0x41
c001c9fb:	88 c2                	mov    dl,al
c001c9fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca01:	88 10                	mov    BYTE PTR [eax],dl
c001ca03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca07:	8a 00                	mov    al,BYTE PTR [eax]
c001ca09:	0f be c0             	movsx  eax,al
c001ca0c:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001ca13:	83 c0 30             	add    eax,0x30
c001ca16:	88 c2                	mov    dl,al
c001ca18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca1c:	88 10                	mov    BYTE PTR [eax],dl
c001ca1e:	66 90                	xchg   ax,ax
c001ca20:	90                   	nop
c001ca21:	c3                   	ret    
c001ca22:	66 90                	xchg   ax,ax

c001ca24 <FAT::open(char const*, void**, FileOpenMode)>:
c001ca24:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ca2a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ca32:	74 0c                	je     c001ca40 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001ca34:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ca3c:	75 0e                	jne    c001ca4c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001ca3e:	66 90                	xchg   ax,ax
c001ca40:	b8 04 00 00 00       	mov    eax,0x4
c001ca45:	e9 46 01 00 00       	jmp    c001cb90 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001ca4a:	66 90                	xchg   ax,ax
c001ca4c:	83 ec 08             	sub    esp,0x8
c001ca4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ca56:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ca5a:	50                   	push   eax
c001ca5b:	e8 e0 3b fe ff       	call   c0000640 <strcpy>
c001ca60:	83 c4 10             	add    esp,0x10
c001ca63:	83 ec 08             	sub    esp,0x8
c001ca66:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ca6a:	50                   	push   eax
c001ca6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ca72:	e8 6d ff ff ff       	call   c001c9e4 <FAT::fixFilepath(char*)>
c001ca77:	83 c4 10             	add    esp,0x10
c001ca7a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ca82:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ca89:	83 e0 01             	and    eax,0x1
c001ca8c:	74 12                	je     c001caa0 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001ca8e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ca95:	83 c8 01             	or     eax,0x1
c001ca98:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ca9f:	90                   	nop
c001caa0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001caa7:	83 e0 04             	and    eax,0x4
c001caaa:	74 24                	je     c001cad0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001caac:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cab3:	83 c8 30             	or     eax,0x30
c001cab6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cabd:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cac4:	83 c8 02             	or     eax,0x2
c001cac7:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cace:	66 90                	xchg   ax,ax
c001cad0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cad7:	83 e0 02             	and    eax,0x2
c001cada:	74 14                	je     c001caf0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001cadc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cae3:	83 c8 02             	or     eax,0x2
c001cae6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001caed:	8d 76 00             	lea    esi,[esi+0x0]
c001caf0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001caf7:	83 e0 08             	and    eax,0x8
c001cafa:	74 14                	je     c001cb10 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001cafc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cb03:	83 c8 04             	or     eax,0x4
c001cb06:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cb0d:	8d 76 00             	lea    esi,[esi+0x0]
c001cb10:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cb17:	83 e0 10             	and    eax,0x10
c001cb1a:	74 14                	je     c001cb30 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001cb1c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cb23:	83 c8 08             	or     eax,0x8
c001cb26:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cb2d:	8d 76 00             	lea    esi,[esi+0x0]
c001cb30:	83 ec 0c             	sub    esp,0xc
c001cb33:	68 28 02 00 00       	push   0x228
c001cb38:	e8 26 2d ff ff       	call   c000f863 <malloc>
c001cb3d:	83 c4 10             	add    esp,0x10
c001cb40:	89 c2                	mov    edx,eax
c001cb42:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cb49:	89 10                	mov    DWORD PTR [eax],edx
c001cb4b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001cb53:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cb5a:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb5c:	83 ec 04             	sub    esp,0x4
c001cb5f:	52                   	push   edx
c001cb60:	8d 54 24 10          	lea    edx,[esp+0x10]
c001cb64:	52                   	push   edx
c001cb65:	50                   	push   eax
c001cb66:	e8 d8 72 fe ff       	call   c0003e43 <f_open>
c001cb6b:	83 c4 10             	add    esp,0x10
c001cb6e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001cb75:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001cb7d:	74 09                	je     c001cb88 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001cb7f:	b8 01 00 00 00       	mov    eax,0x1
c001cb84:	eb 0a                	jmp    c001cb90 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001cb86:	66 90                	xchg   ax,ax
c001cb88:	b8 00 00 00 00       	mov    eax,0x0
c001cb8d:	8d 76 00             	lea    esi,[esi+0x0]
c001cb90:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cb96:	c3                   	ret    
c001cb97:	90                   	nop

c001cb98 <FAT::openDir(char const*, void**)>:
c001cb98:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cb9e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cba6:	74 0c                	je     c001cbb4 <FAT::openDir(char const*, void**)+0x1c>
c001cba8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001cbb0:	75 0e                	jne    c001cbc0 <FAT::openDir(char const*, void**)+0x28>
c001cbb2:	66 90                	xchg   ax,ax
c001cbb4:	b8 04 00 00 00       	mov    eax,0x4
c001cbb9:	e9 82 00 00 00       	jmp    c001cc40 <FAT::openDir(char const*, void**)+0xa8>
c001cbbe:	66 90                	xchg   ax,ax
c001cbc0:	83 ec 08             	sub    esp,0x8
c001cbc3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cbca:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cbce:	50                   	push   eax
c001cbcf:	e8 6c 3a fe ff       	call   c0000640 <strcpy>
c001cbd4:	83 c4 10             	add    esp,0x10
c001cbd7:	83 ec 08             	sub    esp,0x8
c001cbda:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cbde:	50                   	push   eax
c001cbdf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cbe6:	e8 f9 fd ff ff       	call   c001c9e4 <FAT::fixFilepath(char*)>
c001cbeb:	83 c4 10             	add    esp,0x10
c001cbee:	83 ec 0c             	sub    esp,0xc
c001cbf1:	6a 30                	push   0x30
c001cbf3:	e8 6b 2c ff ff       	call   c000f863 <malloc>
c001cbf8:	83 c4 10             	add    esp,0x10
c001cbfb:	89 c2                	mov    edx,eax
c001cbfd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cc04:	89 10                	mov    DWORD PTR [eax],edx
c001cc06:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cc0d:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc0f:	83 ec 08             	sub    esp,0x8
c001cc12:	8d 54 24 14          	lea    edx,[esp+0x14]
c001cc16:	52                   	push   edx
c001cc17:	50                   	push   eax
c001cc18:	e8 d5 7b fe ff       	call   c00047f2 <f_opendir>
c001cc1d:	83 c4 10             	add    esp,0x10
c001cc20:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cc27:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001cc2f:	74 07                	je     c001cc38 <FAT::openDir(char const*, void**)+0xa0>
c001cc31:	b8 01 00 00 00       	mov    eax,0x1
c001cc36:	eb 08                	jmp    c001cc40 <FAT::openDir(char const*, void**)+0xa8>
c001cc38:	b8 00 00 00 00       	mov    eax,0x0
c001cc3d:	8d 76 00             	lea    esi,[esi+0x0]
c001cc40:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cc46:	c3                   	ret    
c001cc47:	90                   	nop

c001cc48 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001cc48:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cc4e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001cc56:	75 0c                	jne    c001cc64 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001cc58:	b8 04 00 00 00       	mov    eax,0x4
c001cc5d:	e9 d6 00 00 00       	jmp    c001cd38 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cc62:	66 90                	xchg   ax,ax
c001cc64:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001cc6c:	75 0a                	jne    c001cc78 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001cc6e:	b8 04 00 00 00       	mov    eax,0x4
c001cc73:	e9 c0 00 00 00       	jmp    c001cd38 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cc78:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001cc80:	75 0a                	jne    c001cc8c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001cc82:	b8 04 00 00 00       	mov    eax,0x4
c001cc87:	e9 ac 00 00 00       	jmp    c001cd38 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cc8c:	83 ec 08             	sub    esp,0x8
c001cc8f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cc96:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001cc9d:	50                   	push   eax
c001cc9e:	e8 9d 39 fe ff       	call   c0000640 <strcpy>
c001cca3:	83 c4 10             	add    esp,0x10
c001cca6:	83 ec 08             	sub    esp,0x8
c001cca9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ccb0:	50                   	push   eax
c001ccb1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ccb8:	e8 27 fd ff ff       	call   c001c9e4 <FAT::fixFilepath(char*)>
c001ccbd:	83 c4 10             	add    esp,0x10
c001ccc0:	83 ec 08             	sub    esp,0x8
c001ccc3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ccc7:	50                   	push   eax
c001ccc8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001cccf:	50                   	push   eax
c001ccd0:	e8 9c 7c fe ff       	call   c0004971 <f_stat>
c001ccd5:	83 c4 10             	add    esp,0x10
c001ccd8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ccdf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cce6:	85 c0                	test   eax,eax
c001cce8:	74 0a                	je     c001ccf4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001ccea:	83 f8 04             	cmp    eax,0x4
c001cced:	74 39                	je     c001cd28 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ccef:	eb 3f                	jmp    c001cd30 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001ccf1:	8d 76 00             	lea    esi,[esi+0x0]
c001ccf4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ccf8:	0f b6 c0             	movzx  eax,al
c001ccfb:	83 e0 10             	and    eax,0x10
c001ccfe:	0f 95 c2             	setne  dl
c001cd01:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001cd08:	88 10                	mov    BYTE PTR [eax],dl
c001cd0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd0e:	ba 00 00 00 00       	mov    edx,0x0
c001cd13:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001cd1a:	89 01                	mov    DWORD PTR [ecx],eax
c001cd1c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001cd1f:	b8 00 00 00 00       	mov    eax,0x0
c001cd24:	eb 12                	jmp    c001cd38 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cd26:	66 90                	xchg   ax,ax
c001cd28:	b8 02 00 00 00       	mov    eax,0x2
c001cd2d:	eb 09                	jmp    c001cd38 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cd2f:	90                   	nop
c001cd30:	b8 01 00 00 00       	mov    eax,0x1
c001cd35:	8d 76 00             	lea    esi,[esi+0x0]
c001cd38:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cd3e:	c3                   	ret    
c001cd3f:	90                   	nop

c001cd40 <FAT::unlink(char const*)>:
c001cd40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cd46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cd4e:	75 08                	jne    c001cd58 <FAT::unlink(char const*)+0x18>
c001cd50:	b8 04 00 00 00       	mov    eax,0x4
c001cd55:	eb 61                	jmp    c001cdb8 <FAT::unlink(char const*)+0x78>
c001cd57:	90                   	nop
c001cd58:	83 ec 08             	sub    esp,0x8
c001cd5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cd62:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cd66:	50                   	push   eax
c001cd67:	e8 d4 38 fe ff       	call   c0000640 <strcpy>
c001cd6c:	83 c4 10             	add    esp,0x10
c001cd6f:	83 ec 08             	sub    esp,0x8
c001cd72:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cd76:	50                   	push   eax
c001cd77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cd7e:	e8 61 fc ff ff       	call   c001c9e4 <FAT::fixFilepath(char*)>
c001cd83:	83 c4 10             	add    esp,0x10
c001cd86:	83 ec 0c             	sub    esp,0xc
c001cd89:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cd8d:	50                   	push   eax
c001cd8e:	e8 50 7e fe ff       	call   c0004be3 <f_unlink>
c001cd93:	83 c4 10             	add    esp,0x10
c001cd96:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cd9d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cda4:	85 c0                	test   eax,eax
c001cda6:	75 08                	jne    c001cdb0 <FAT::unlink(char const*)+0x70>
c001cda8:	b8 00 00 00 00       	mov    eax,0x0
c001cdad:	eb 09                	jmp    c001cdb8 <FAT::unlink(char const*)+0x78>
c001cdaf:	90                   	nop
c001cdb0:	b8 01 00 00 00       	mov    eax,0x1
c001cdb5:	8d 76 00             	lea    esi,[esi+0x0]
c001cdb8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cdbe:	c3                   	ret    
c001cdbf:	90                   	nop

c001cdc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001cdc0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cdc6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001cdcd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001cdd4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001cdd8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cddc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001cde4:	75 0a                	jne    c001cdf0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001cde6:	b8 04 00 00 00       	mov    eax,0x4
c001cdeb:	e9 7c 01 00 00       	jmp    c001cf6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001cdf0:	83 ec 08             	sub    esp,0x8
c001cdf3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cdfa:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cdfe:	50                   	push   eax
c001cdff:	e8 3c 38 fe ff       	call   c0000640 <strcpy>
c001ce04:	83 c4 10             	add    esp,0x10
c001ce07:	83 ec 08             	sub    esp,0x8
c001ce0a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ce0e:	50                   	push   eax
c001ce0f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ce16:	e8 c9 fb ff ff       	call   c001c9e4 <FAT::fixFilepath(char*)>
c001ce1b:	83 c4 10             	add    esp,0x10
c001ce1e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ce26:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ce2e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce33:	83 e0 01             	and    eax,0x1
c001ce36:	74 14                	je     c001ce4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001ce38:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ce3f:	83 c8 01             	or     eax,0x1
c001ce42:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ce49:	8d 76 00             	lea    esi,[esi+0x0]
c001ce4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce51:	83 e0 02             	and    eax,0x2
c001ce54:	74 12                	je     c001ce68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001ce56:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ce5d:	83 c8 20             	or     eax,0x20
c001ce60:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ce67:	90                   	nop
c001ce68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce6d:	83 e0 04             	and    eax,0x4
c001ce70:	74 12                	je     c001ce84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001ce72:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ce79:	83 c8 04             	or     eax,0x4
c001ce7c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ce83:	90                   	nop
c001ce84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce89:	83 e0 08             	and    eax,0x8
c001ce8c:	74 12                	je     c001cea0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001ce8e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ce95:	83 c8 02             	or     eax,0x2
c001ce98:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ce9f:	90                   	nop
c001cea0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cea5:	83 e0 01             	and    eax,0x1
c001cea8:	74 12                	je     c001cebc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001ceaa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ceb1:	83 c8 01             	or     eax,0x1
c001ceb4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cebb:	90                   	nop
c001cebc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cec1:	83 e0 02             	and    eax,0x2
c001cec4:	74 12                	je     c001ced8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001cec6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cecd:	83 c8 20             	or     eax,0x20
c001ced0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ced7:	90                   	nop
c001ced8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cedd:	83 e0 04             	and    eax,0x4
c001cee0:	74 12                	je     c001cef4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001cee2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cee9:	83 c8 04             	or     eax,0x4
c001ceec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cef3:	90                   	nop
c001cef4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cef9:	83 e0 08             	and    eax,0x8
c001cefc:	74 12                	je     c001cf10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001cefe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cf05:	83 c8 02             	or     eax,0x2
c001cf08:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cf0f:	90                   	nop
c001cf10:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001cf17:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cf1e:	09 d0                	or     eax,edx
c001cf20:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cf27:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001cf2f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001cf37:	83 ec 04             	sub    esp,0x4
c001cf3a:	52                   	push   edx
c001cf3b:	50                   	push   eax
c001cf3c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cf40:	50                   	push   eax
c001cf41:	e8 12 81 fe ff       	call   c0005058 <f_chmod>
c001cf46:	83 c4 10             	add    esp,0x10
c001cf49:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001cf50:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001cf57:	85 c0                	test   eax,eax
c001cf59:	75 09                	jne    c001cf64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001cf5b:	b8 00 00 00 00       	mov    eax,0x0
c001cf60:	eb 0a                	jmp    c001cf6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001cf62:	66 90                	xchg   ax,ax
c001cf64:	b8 01 00 00 00       	mov    eax,0x1
c001cf69:	8d 76 00             	lea    esi,[esi+0x0]
c001cf6c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cf72:	c3                   	ret    
c001cf73:	90                   	nop

c001cf74 <FAT::rename(char const*, char const*)>:
c001cf74:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cf7a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001cf82:	74 0c                	je     c001cf90 <FAT::rename(char const*, char const*)+0x1c>
c001cf84:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001cf8c:	75 0e                	jne    c001cf9c <FAT::rename(char const*, char const*)+0x28>
c001cf8e:	66 90                	xchg   ax,ax
c001cf90:	b8 04 00 00 00       	mov    eax,0x4
c001cf95:	e9 9e 00 00 00       	jmp    c001d038 <FAT::rename(char const*, char const*)+0xc4>
c001cf9a:	66 90                	xchg   ax,ax
c001cf9c:	83 ec 08             	sub    esp,0x8
c001cf9f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cfa6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cfad:	50                   	push   eax
c001cfae:	e8 8d 36 fe ff       	call   c0000640 <strcpy>
c001cfb3:	83 c4 10             	add    esp,0x10
c001cfb6:	83 ec 08             	sub    esp,0x8
c001cfb9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001cfc0:	50                   	push   eax
c001cfc1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cfc8:	e8 17 fa ff ff       	call   c001c9e4 <FAT::fixFilepath(char*)>
c001cfcd:	83 c4 10             	add    esp,0x10
c001cfd0:	83 ec 08             	sub    esp,0x8
c001cfd3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001cfda:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cfde:	50                   	push   eax
c001cfdf:	e8 5c 36 fe ff       	call   c0000640 <strcpy>
c001cfe4:	83 c4 10             	add    esp,0x10
c001cfe7:	83 ec 08             	sub    esp,0x8
c001cfea:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cfee:	50                   	push   eax
c001cfef:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cff6:	e8 e9 f9 ff ff       	call   c001c9e4 <FAT::fixFilepath(char*)>
c001cffb:	83 c4 10             	add    esp,0x10
c001cffe:	83 ec 08             	sub    esp,0x8
c001d001:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d005:	50                   	push   eax
c001d006:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001d00d:	50                   	push   eax
c001d00e:	e8 8d 7e fe ff       	call   c0004ea0 <f_rename>
c001d013:	83 c4 10             	add    esp,0x10
c001d016:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001d01d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001d024:	85 c0                	test   eax,eax
c001d026:	75 08                	jne    c001d030 <FAT::rename(char const*, char const*)+0xbc>
c001d028:	b8 00 00 00 00       	mov    eax,0x0
c001d02d:	eb 09                	jmp    c001d038 <FAT::rename(char const*, char const*)+0xc4>
c001d02f:	90                   	nop
c001d030:	b8 01 00 00 00       	mov    eax,0x1
c001d035:	8d 76 00             	lea    esi,[esi+0x0]
c001d038:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d03e:	c3                   	ret    
c001d03f:	90                   	nop

c001d040 <FAT::mkdir(char const*)>:
c001d040:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d046:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001d04e:	75 08                	jne    c001d058 <FAT::mkdir(char const*)+0x18>
c001d050:	b8 04 00 00 00       	mov    eax,0x4
c001d055:	eb 61                	jmp    c001d0b8 <FAT::mkdir(char const*)+0x78>
c001d057:	90                   	nop
c001d058:	83 ec 08             	sub    esp,0x8
c001d05b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d062:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d066:	50                   	push   eax
c001d067:	e8 d4 35 fe ff       	call   c0000640 <strcpy>
c001d06c:	83 c4 10             	add    esp,0x10
c001d06f:	83 ec 08             	sub    esp,0x8
c001d072:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d076:	50                   	push   eax
c001d077:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d07e:	e8 61 f9 ff ff       	call   c001c9e4 <FAT::fixFilepath(char*)>
c001d083:	83 c4 10             	add    esp,0x10
c001d086:	83 ec 0c             	sub    esp,0xc
c001d089:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d08d:	50                   	push   eax
c001d08e:	e8 72 7c fe ff       	call   c0004d05 <f_mkdir>
c001d093:	83 c4 10             	add    esp,0x10
c001d096:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001d09d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001d0a4:	85 c0                	test   eax,eax
c001d0a6:	75 08                	jne    c001d0b0 <FAT::mkdir(char const*)+0x70>
c001d0a8:	b8 00 00 00 00       	mov    eax,0x0
c001d0ad:	eb 09                	jmp    c001d0b8 <FAT::mkdir(char const*)+0x78>
c001d0af:	90                   	nop
c001d0b0:	b8 01 00 00 00       	mov    eax,0x1
c001d0b5:	8d 76 00             	lea    esi,[esi+0x0]
c001d0b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d0be:	c3                   	ret    
c001d0bf:	90                   	nop

c001d0c0 <FAT::exists(char const*)>:
c001d0c0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001d0c6:	83 ec 08             	sub    esp,0x8
c001d0c9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d0d0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d0d4:	50                   	push   eax
c001d0d5:	e8 66 35 fe ff       	call   c0000640 <strcpy>
c001d0da:	83 c4 10             	add    esp,0x10
c001d0dd:	83 ec 08             	sub    esp,0x8
c001d0e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001d0e4:	50                   	push   eax
c001d0e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d0ec:	e8 f3 f8 ff ff       	call   c001c9e4 <FAT::fixFilepath(char*)>
c001d0f1:	83 c4 10             	add    esp,0x10
c001d0f4:	83 ec 08             	sub    esp,0x8
c001d0f7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001d0fe:	50                   	push   eax
c001d0ff:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d103:	50                   	push   eax
c001d104:	e8 68 78 fe ff       	call   c0004971 <f_stat>
c001d109:	83 c4 10             	add    esp,0x10
c001d10c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001d113:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001d11a:	85 c0                	test   eax,eax
c001d11c:	75 06                	jne    c001d124 <FAT::exists(char const*)+0x64>
c001d11e:	b0 01                	mov    al,0x1
c001d120:	eb 06                	jmp    c001d128 <FAT::exists(char const*)+0x68>
c001d122:	66 90                	xchg   ax,ax
c001d124:	b0 00                	mov    al,0x0
c001d126:	66 90                	xchg   ax,ax
c001d128:	81 c4 2c 02 00 00    	add    esp,0x22c
c001d12e:	c3                   	ret    
c001d12f:	90                   	nop

c001d130 <isoReadDiscSectorHelper>:
c001d130:	83 ec 2c             	sub    esp,0x2c
c001d133:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d137:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d13b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d140:	83 e8 41             	sub    eax,0x41
c001d143:	8b 0c 85 e0 0a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcf520]
c001d14a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d14e:	ba 00 00 00 00       	mov    edx,0x0
c001d153:	83 ec 0c             	sub    esp,0xc
c001d156:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d15a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d15e:	52                   	push   edx
c001d15f:	50                   	push   eax
c001d160:	51                   	push   ecx
c001d161:	e8 0c d9 fe ff       	call   c000aa72 <LogicalDisk::read(unsigned long long, int, void*)>
c001d166:	83 c4 20             	add    esp,0x20
c001d169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d16d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001d172:	74 0c                	je     c001d180 <isoReadDiscSectorHelper+0x50>
c001d174:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d178:	c1 e0 0b             	shl    eax,0xb
c001d17b:	eb 0b                	jmp    c001d188 <isoReadDiscSectorHelper+0x58>
c001d17d:	8d 76 00             	lea    esi,[esi+0x0]
c001d180:	b8 00 00 00 00       	mov    eax,0x0
c001d185:	8d 76 00             	lea    esi,[esi+0x0]
c001d188:	83 c4 2c             	add    esp,0x2c
c001d18b:	c3                   	ret    

c001d18c <iso_kprintf>:
c001d18c:	83 ec 0c             	sub    esp,0xc
c001d18f:	83 ec 08             	sub    esp,0x8
c001d192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d196:	68 04 92 02 c0       	push   0xc0029204
c001d19b:	e8 dc 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d1a0:	83 c4 10             	add    esp,0x10
c001d1a3:	90                   	nop
c001d1a4:	83 c4 0c             	add    esp,0xc
c001d1a7:	c3                   	ret    

c001d1a8 <iso_kprintfd>:
c001d1a8:	83 ec 0c             	sub    esp,0xc
c001d1ab:	83 ec 08             	sub    esp,0x8
c001d1ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d1b2:	68 ce 87 02 c0       	push   0xc00287ce
c001d1b7:	e8 c0 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d1bc:	83 c4 10             	add    esp,0x10
c001d1bf:	90                   	nop
c001d1c0:	83 c4 0c             	add    esp,0xc
c001d1c3:	c3                   	ret    

c001d1c4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001d1c4:	b8 08 00 00 00       	mov    eax,0x8
c001d1c9:	c3                   	ret    

c001d1ca <ISO9660::truncate(void*, unsigned long long)>:
c001d1ca:	b8 01 00 00 00       	mov    eax,0x1
c001d1cf:	c3                   	ret    

c001d1d0 <ISO9660::getName()>:
c001d1d0:	b8 90 95 02 c0       	mov    eax,0xc0029590
c001d1d5:	c3                   	ret    

c001d1d6 <ISO9660::closeDir(void*)>:
c001d1d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1da:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1dc:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001d1df:	90                   	nop

c001d1e0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001d1e0:	b8 01 00 00 00       	mov    eax,0x1
c001d1e5:	c3                   	ret    

c001d1e6 <ISO9660::unlink(char const*)>:
c001d1e6:	b8 01 00 00 00       	mov    eax,0x1
c001d1eb:	c3                   	ret    

c001d1ec <ISO9660::write(void*, unsigned long, void*, int*)>:
c001d1ec:	b8 03 00 00 00       	mov    eax,0x3
c001d1f1:	c3                   	ret    

c001d1f2 <ISO9660::rename(char const*, char const*)>:
c001d1f2:	b8 01 00 00 00       	mov    eax,0x1
c001d1f7:	c3                   	ret    

c001d1f8 <ISO9660::mkdir(char const*)>:
c001d1f8:	b8 01 00 00 00       	mov    eax,0x1
c001d1fd:	c3                   	ret    

c001d1fe <ISO9660::~ISO9660()>:
c001d1fe:	83 ec 0c             	sub    esp,0xc
c001d201:	ba d0 96 02 c0       	mov    edx,0xc00296d0
c001d206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d20a:	89 10                	mov    DWORD PTR [eax],edx
c001d20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d210:	83 ec 0c             	sub    esp,0xc
c001d213:	50                   	push   eax
c001d214:	e8 d3 ab fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001d219:	83 c4 10             	add    esp,0x10
c001d21c:	90                   	nop
c001d21d:	83 c4 0c             	add    esp,0xc
c001d220:	c3                   	ret    
c001d221:	90                   	nop

c001d222 <ISO9660::~ISO9660()>:
c001d222:	83 ec 0c             	sub    esp,0xc
c001d225:	83 ec 0c             	sub    esp,0xc
c001d228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d22c:	e8 cd ff ff ff       	call   c001d1fe <ISO9660::~ISO9660()>
c001d231:	83 c4 10             	add    esp,0x10
c001d234:	83 ec 08             	sub    esp,0x8
c001d237:	6a 08                	push   0x8
c001d239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d23d:	e8 3a 01 ff ff       	call   c000d37c <operator delete(void*, unsigned long)>
c001d242:	83 c4 10             	add    esp,0x10
c001d245:	83 c4 0c             	add    esp,0xc
c001d248:	c3                   	ret    
c001d249:	90                   	nop

c001d24a <ISO9660::exists(char const*)>:
c001d24a:	83 ec 18             	sub    esp,0x18
c001d24d:	68 ab 95 02 c0       	push   0xc00295ab
c001d252:	e8 61 2a ff ff       	call   c000fcb8 <KePanic(char const*)>
c001d257:	31 c0                	xor    eax,eax
c001d259:	83 c4 1c             	add    esp,0x1c
c001d25c:	c3                   	ret    
c001d25d:	90                   	nop

c001d25e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d25e:	56                   	push   esi
c001d25f:	53                   	push   ebx
c001d260:	53                   	push   ebx
c001d261:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d265:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d269:	85 db                	test   ebx,ebx
c001d26b:	0f 84 ca 00 00 00    	je     c001d33b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d271:	85 f6                	test   esi,esi
c001d273:	0f 84 c2 00 00 00    	je     c001d33b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d279:	b8 03 00 00 00       	mov    eax,0x3
c001d27e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001d283:	0f 85 b7 00 00 00    	jne    c001d340 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d289:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d28b:	0f be 05 80 35 03 c0 	movsx  eax,BYTE PTR ds:0xc0033580
c001d292:	38 0d 80 35 03 c0    	cmp    BYTE PTR ds:0xc0033580,cl
c001d298:	74 1b                	je     c001d2b5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001d29a:	85 c0                	test   eax,eax
c001d29c:	74 10                	je     c001d2ae <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001d29e:	83 ec 0c             	sub    esp,0xc
c001d2a1:	68 c9 95 02 c0       	push   0xc00295c9
c001d2a6:	e8 0d 2a ff ff       	call   c000fcb8 <KePanic(char const*)>
c001d2ab:	83 c4 10             	add    esp,0x10
c001d2ae:	8a 03                	mov    al,BYTE PTR [ebx]
c001d2b0:	a2 80 35 03 c0       	mov    ds:0xc0033580,al
c001d2b5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d2b8:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c001d2bf:	85 c0                	test   eax,eax
c001d2c1:	74 09                	je     c001d2cc <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001d2c3:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d2ca:	74 48                	je     c001d314 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001d2cc:	83 ec 0c             	sub    esp,0xc
c001d2cf:	68 d9 95 02 c0       	push   0xc00295d9
c001d2d4:	e8 a3 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d2d9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d2dc:	83 c4 10             	add    esp,0x10
c001d2df:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c001d2e6:	85 c0                	test   eax,eax
c001d2e8:	74 17                	je     c001d301 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001d2ea:	83 ec 0c             	sub    esp,0xc
c001d2ed:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d2f4:	68 f9 95 02 c0       	push   0xc00295f9
c001d2f9:	e8 7e 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d2fe:	83 c4 10             	add    esp,0x10
c001d301:	83 ec 0c             	sub    esp,0xc
c001d304:	0f be 05 80 35 03 c0 	movsx  eax,BYTE PTR ds:0xc0033580
c001d30b:	50                   	push   eax
c001d30c:	e8 1d 99 fe ff       	call   c0006c2e <init_percd>
c001d311:	83 c4 10             	add    esp,0x10
c001d314:	83 c3 03             	add    ebx,0x3
c001d317:	51                   	push   ecx
c001d318:	51                   	push   ecx
c001d319:	6a 00                	push   0x0
c001d31b:	53                   	push   ebx
c001d31c:	e8 d4 93 fe ff       	call   c00066f5 <iso_open>
c001d321:	83 c4 10             	add    esp,0x10
c001d324:	89 c2                	mov    edx,eax
c001d326:	b8 01 00 00 00       	mov    eax,0x1
c001d32b:	83 fa ff             	cmp    edx,0xffffffff
c001d32e:	74 10                	je     c001d340 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d330:	83 c2 32             	add    edx,0x32
c001d333:	31 c0                	xor    eax,eax
c001d335:	01 d2                	add    edx,edx
c001d337:	89 16                	mov    DWORD PTR [esi],edx
c001d339:	eb 05                	jmp    c001d340 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d33b:	b8 04 00 00 00       	mov    eax,0x4
c001d340:	5a                   	pop    edx
c001d341:	5b                   	pop    ebx
c001d342:	5e                   	pop    esi
c001d343:	c3                   	ret    

c001d344 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001d344:	53                   	push   ebx
c001d345:	83 ec 08             	sub    esp,0x8
c001d348:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d34c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d350:	85 c0                	test   eax,eax
c001d352:	74 2d                	je     c001d381 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d354:	85 db                	test   ebx,ebx
c001d356:	74 29                	je     c001d381 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d358:	b9 02 00 00 00       	mov    ecx,0x2
c001d35d:	52                   	push   edx
c001d35e:	99                   	cdq    
c001d35f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d363:	f7 f9                	idiv   ecx
c001d365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d369:	83 e8 32             	sub    eax,0x32
c001d36c:	50                   	push   eax
c001d36d:	e8 2b 94 fe ff       	call   c000679d <iso_read>
c001d372:	83 c4 10             	add    esp,0x10
c001d375:	89 03                	mov    DWORD PTR [ebx],eax
c001d377:	09 d0                	or     eax,edx
c001d379:	0f 94 c0             	sete   al
c001d37c:	0f b6 c0             	movzx  eax,al
c001d37f:	eb 05                	jmp    c001d386 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001d381:	b8 04 00 00 00       	mov    eax,0x4
c001d386:	83 c4 08             	add    esp,0x8
c001d389:	5b                   	pop    ebx
c001d38a:	c3                   	ret    
c001d38b:	90                   	nop

c001d38c <ISO9660::seek(void*, unsigned long long)>:
c001d38c:	57                   	push   edi
c001d38d:	56                   	push   esi
c001d38e:	b8 04 00 00 00       	mov    eax,0x4
c001d393:	51                   	push   ecx
c001d394:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d398:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d39c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d3a0:	85 d2                	test   edx,edx
c001d3a2:	74 26                	je     c001d3ca <ISO9660::seek(void*, unsigned long long)+0x3e>
c001d3a4:	6a 00                	push   0x0
c001d3a6:	b9 02 00 00 00       	mov    ecx,0x2
c001d3ab:	57                   	push   edi
c001d3ac:	89 d0                	mov    eax,edx
c001d3ae:	56                   	push   esi
c001d3af:	99                   	cdq    
c001d3b0:	f7 f9                	idiv   ecx
c001d3b2:	83 e8 32             	sub    eax,0x32
c001d3b5:	50                   	push   eax
c001d3b6:	e8 f8 94 fe ff       	call   c00068b3 <iso_seek>
c001d3bb:	83 c4 10             	add    esp,0x10
c001d3be:	31 f0                	xor    eax,esi
c001d3c0:	31 fa                	xor    edx,edi
c001d3c2:	09 d0                	or     eax,edx
c001d3c4:	0f 95 c0             	setne  al
c001d3c7:	0f b6 c0             	movzx  eax,al
c001d3ca:	5a                   	pop    edx
c001d3cb:	5e                   	pop    esi
c001d3cc:	5f                   	pop    edi
c001d3cd:	c3                   	ret    

c001d3ce <ISO9660::tell(void*, unsigned long long*)>:
c001d3ce:	53                   	push   ebx
c001d3cf:	83 ec 08             	sub    esp,0x8
c001d3d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3d6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d3da:	85 c0                	test   eax,eax
c001d3dc:	74 24                	je     c001d402 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d3de:	85 db                	test   ebx,ebx
c001d3e0:	74 20                	je     c001d402 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d3e2:	83 ec 0c             	sub    esp,0xc
c001d3e5:	b9 02 00 00 00       	mov    ecx,0x2
c001d3ea:	99                   	cdq    
c001d3eb:	f7 f9                	idiv   ecx
c001d3ed:	83 e8 32             	sub    eax,0x32
c001d3f0:	50                   	push   eax
c001d3f1:	e8 41 95 fe ff       	call   c0006937 <iso_tell>
c001d3f6:	83 c4 10             	add    esp,0x10
c001d3f9:	89 03                	mov    DWORD PTR [ebx],eax
c001d3fb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001d3fe:	31 c0                	xor    eax,eax
c001d400:	eb 05                	jmp    c001d407 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001d402:	b8 04 00 00 00       	mov    eax,0x4
c001d407:	83 c4 08             	add    esp,0x8
c001d40a:	5b                   	pop    ebx
c001d40b:	c3                   	ret    

c001d40c <ISO9660::stat(void*, unsigned long long*)>:
c001d40c:	53                   	push   ebx
c001d40d:	83 ec 14             	sub    esp,0x14
c001d410:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d414:	68 1d 96 02 c0       	push   0xc002961d
c001d419:	e8 5e 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d41e:	83 c4 10             	add    esp,0x10
c001d421:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d426:	74 2c                	je     c001d454 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d428:	85 db                	test   ebx,ebx
c001d42a:	74 28                	je     c001d454 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d42c:	83 ec 0c             	sub    esp,0xc
c001d42f:	b9 02 00 00 00       	mov    ecx,0x2
c001d434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d438:	99                   	cdq    
c001d439:	f7 f9                	idiv   ecx
c001d43b:	83 e8 32             	sub    eax,0x32
c001d43e:	50                   	push   eax
c001d43f:	e8 24 95 fe ff       	call   c0006968 <iso_total>
c001d444:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d44b:	89 03                	mov    DWORD PTR [ebx],eax
c001d44d:	83 c4 10             	add    esp,0x10
c001d450:	31 c0                	xor    eax,eax
c001d452:	eb 05                	jmp    c001d459 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001d454:	b8 04 00 00 00       	mov    eax,0x4
c001d459:	83 c4 08             	add    esp,0x8
c001d45c:	5b                   	pop    ebx
c001d45d:	c3                   	ret    

c001d45e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d45e:	55                   	push   ebp
c001d45f:	57                   	push   edi
c001d460:	56                   	push   esi
c001d461:	53                   	push   ebx
c001d462:	83 ec 18             	sub    esp,0x18
c001d465:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d469:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d46d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d471:	68 25 96 02 c0       	push   0xc0029625
c001d476:	e8 01 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d47b:	83 c4 10             	add    esp,0x10
c001d47e:	85 ff                	test   edi,edi
c001d480:	0f 94 c0             	sete   al
c001d483:	85 f6                	test   esi,esi
c001d485:	0f 94 c2             	sete   dl
c001d488:	09 d0                	or     eax,edx
c001d48a:	a8 01                	test   al,0x1
c001d48c:	0f 85 dd 00 00 00    	jne    c001d56f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d492:	85 db                	test   ebx,ebx
c001d494:	0f 84 d5 00 00 00    	je     c001d56f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d49a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d49d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d4a3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d4aa:	0f be 05 80 35 03 c0 	movsx  eax,BYTE PTR ds:0xc0033580
c001d4b1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d4b3:	38 0d 80 35 03 c0    	cmp    BYTE PTR ds:0xc0033580,cl
c001d4b9:	74 1b                	je     c001d4d6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d4bb:	85 c0                	test   eax,eax
c001d4bd:	74 10                	je     c001d4cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d4bf:	83 ec 0c             	sub    esp,0xc
c001d4c2:	68 c9 95 02 c0       	push   0xc00295c9
c001d4c7:	e8 ec 27 ff ff       	call   c000fcb8 <KePanic(char const*)>
c001d4cc:	83 c4 10             	add    esp,0x10
c001d4cf:	8a 03                	mov    al,BYTE PTR [ebx]
c001d4d1:	a2 80 35 03 c0       	mov    ds:0xc0033580,al
c001d4d6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d4d9:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c001d4e0:	85 c0                	test   eax,eax
c001d4e2:	74 09                	je     c001d4ed <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d4e4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d4eb:	74 51                	je     c001d53e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d4ed:	83 ec 0c             	sub    esp,0xc
c001d4f0:	68 2d 96 02 c0       	push   0xc002962d
c001d4f5:	e8 82 9a fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d4fa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d4fd:	83 c4 10             	add    esp,0x10
c001d500:	83 3c 85 dc 09 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffcf624],0x0
c001d508:	74 21                	je     c001d52b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d50a:	83 ec 0c             	sub    esp,0xc
c001d50d:	68 4d 96 02 c0       	push   0xc002964d
c001d512:	e8 65 9a fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d517:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d51a:	83 c4 10             	add    esp,0x10
c001d51d:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c001d524:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d52b:	83 ec 0c             	sub    esp,0xc
c001d52e:	0f be 05 80 35 03 c0 	movsx  eax,BYTE PTR ds:0xc0033580
c001d535:	50                   	push   eax
c001d536:	e8 f3 96 fe ff       	call   c0006c2e <init_percd>
c001d53b:	83 c4 10             	add    esp,0x10
c001d53e:	83 c3 03             	add    ebx,0x3
c001d541:	52                   	push   edx
c001d542:	52                   	push   edx
c001d543:	6a 00                	push   0x0
c001d545:	53                   	push   ebx
c001d546:	e8 aa 91 fe ff       	call   c00066f5 <iso_open>
c001d54b:	83 c4 10             	add    esp,0x10
c001d54e:	89 c5                	mov    ebp,eax
c001d550:	83 f8 ff             	cmp    eax,0xffffffff
c001d553:	75 21                	jne    c001d576 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d555:	50                   	push   eax
c001d556:	50                   	push   eax
c001d557:	6a 01                	push   0x1
c001d559:	53                   	push   ebx
c001d55a:	e8 96 91 fe ff       	call   c00066f5 <iso_open>
c001d55f:	83 c4 10             	add    esp,0x10
c001d562:	ba 02 00 00 00       	mov    edx,0x2
c001d567:	40                   	inc    eax
c001d568:	74 2b                	je     c001d595 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d56a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d56d:	eb 24                	jmp    c001d593 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d56f:	ba 04 00 00 00       	mov    edx,0x4
c001d574:	eb 1f                	jmp    c001d595 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d576:	83 ec 0c             	sub    esp,0xc
c001d579:	50                   	push   eax
c001d57a:	e8 e9 93 fe ff       	call   c0006968 <iso_total>
c001d57f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d586:	89 07                	mov    DWORD PTR [edi],eax
c001d588:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d58b:	e8 ef 91 fe ff       	call   c000677f <iso_close>
c001d590:	83 c4 10             	add    esp,0x10
c001d593:	31 d2                	xor    edx,edx
c001d595:	83 c4 0c             	add    esp,0xc
c001d598:	89 d0                	mov    eax,edx
c001d59a:	5b                   	pop    ebx
c001d59b:	5e                   	pop    esi
c001d59c:	5f                   	pop    edi
c001d59d:	5d                   	pop    ebp
c001d59e:	c3                   	ret    
c001d59f:	90                   	nop

c001d5a0 <ISO9660::close(void*)>:
c001d5a0:	83 ec 0c             	sub    esp,0xc
c001d5a3:	b8 04 00 00 00       	mov    eax,0x4
c001d5a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d5ac:	85 d2                	test   edx,edx
c001d5ae:	74 1b                	je     c001d5cb <ISO9660::close(void*)+0x2b>
c001d5b0:	83 ec 0c             	sub    esp,0xc
c001d5b3:	b9 02 00 00 00       	mov    ecx,0x2
c001d5b8:	89 d0                	mov    eax,edx
c001d5ba:	99                   	cdq    
c001d5bb:	f7 f9                	idiv   ecx
c001d5bd:	83 e8 32             	sub    eax,0x32
c001d5c0:	50                   	push   eax
c001d5c1:	e8 b9 91 fe ff       	call   c000677f <iso_close>
c001d5c6:	83 c4 10             	add    esp,0x10
c001d5c9:	31 c0                	xor    eax,eax
c001d5cb:	83 c4 0c             	add    esp,0xc
c001d5ce:	c3                   	ret    
c001d5cf:	90                   	nop

c001d5d0 <ISO9660::openDir(char const*, void**)>:
c001d5d0:	56                   	push   esi
c001d5d1:	53                   	push   ebx
c001d5d2:	50                   	push   eax
c001d5d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d5d7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d5db:	85 db                	test   ebx,ebx
c001d5dd:	0f 84 bd 00 00 00    	je     c001d6a0 <ISO9660::openDir(char const*, void**)+0xd0>
c001d5e3:	85 f6                	test   esi,esi
c001d5e5:	0f 84 b5 00 00 00    	je     c001d6a0 <ISO9660::openDir(char const*, void**)+0xd0>
c001d5eb:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d5ed:	0f be 05 80 35 03 c0 	movsx  eax,BYTE PTR ds:0xc0033580
c001d5f4:	38 15 80 35 03 c0    	cmp    BYTE PTR ds:0xc0033580,dl
c001d5fa:	74 1b                	je     c001d617 <ISO9660::openDir(char const*, void**)+0x47>
c001d5fc:	85 c0                	test   eax,eax
c001d5fe:	74 10                	je     c001d610 <ISO9660::openDir(char const*, void**)+0x40>
c001d600:	83 ec 0c             	sub    esp,0xc
c001d603:	68 c9 95 02 c0       	push   0xc00295c9
c001d608:	e8 ab 26 ff ff       	call   c000fcb8 <KePanic(char const*)>
c001d60d:	83 c4 10             	add    esp,0x10
c001d610:	8a 03                	mov    al,BYTE PTR [ebx]
c001d612:	a2 80 35 03 c0       	mov    ds:0xc0033580,al
c001d617:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d61a:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c001d621:	85 c0                	test   eax,eax
c001d623:	74 10                	je     c001d635 <ISO9660::openDir(char const*, void**)+0x65>
c001d625:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d62c:	74 1a                	je     c001d648 <ISO9660::openDir(char const*, void**)+0x78>
c001d62e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d635:	83 ec 0c             	sub    esp,0xc
c001d638:	0f be 05 80 35 03 c0 	movsx  eax,BYTE PTR ds:0xc0033580
c001d63f:	50                   	push   eax
c001d640:	e8 e9 95 fe ff       	call   c0006c2e <init_percd>
c001d645:	83 c4 10             	add    esp,0x10
c001d648:	83 c3 03             	add    ebx,0x3
c001d64b:	50                   	push   eax
c001d64c:	50                   	push   eax
c001d64d:	6a 01                	push   0x1
c001d64f:	53                   	push   ebx
c001d650:	e8 a0 90 fe ff       	call   c00066f5 <iso_open>
c001d655:	83 c4 10             	add    esp,0x10
c001d658:	89 c3                	mov    ebx,eax
c001d65a:	83 f8 ff             	cmp    eax,0xffffffff
c001d65d:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001d662:	75 1c                	jne    c001d680 <ISO9660::openDir(char const*, void**)+0xb0>
c001d664:	53                   	push   ebx
c001d665:	53                   	push   ebx
c001d666:	68 71 96 02 c0       	push   0xc0029671
c001d66b:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d671:	e8 ae 4f ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001d676:	83 c4 10             	add    esp,0x10
c001d679:	b8 01 00 00 00       	mov    eax,0x1
c001d67e:	eb 25                	jmp    c001d6a5 <ISO9660::openDir(char const*, void**)+0xd5>
c001d680:	01 db                	add    ebx,ebx
c001d682:	51                   	push   ecx
c001d683:	83 c3 65             	add    ebx,0x65
c001d686:	51                   	push   ecx
c001d687:	68 84 96 02 c0       	push   0xc0029684
c001d68c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d692:	e8 8d 4f ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001d697:	89 1e                	mov    DWORD PTR [esi],ebx
c001d699:	83 c4 10             	add    esp,0x10
c001d69c:	31 c0                	xor    eax,eax
c001d69e:	eb 05                	jmp    c001d6a5 <ISO9660::openDir(char const*, void**)+0xd5>
c001d6a0:	b8 04 00 00 00       	mov    eax,0x4
c001d6a5:	5a                   	pop    edx
c001d6a6:	5b                   	pop    ebx
c001d6a7:	5e                   	pop    esi
c001d6a8:	c3                   	ret    
c001d6a9:	90                   	nop

c001d6aa <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d6aa:	55                   	push   ebp
c001d6ab:	57                   	push   edi
c001d6ac:	56                   	push   esi
c001d6ad:	53                   	push   ebx
c001d6ae:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d6b4:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d6bb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d6c2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001d6ca:	0f 84 e7 00 00 00    	je     c001d7b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d6d0:	85 db                	test   ebx,ebx
c001d6d2:	0f 84 df 00 00 00    	je     c001d7b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d6d8:	83 ec 0c             	sub    esp,0xc
c001d6db:	68 97 96 02 c0       	push   0xc0029697
c001d6e0:	e8 97 98 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d6e5:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d6ec:	b9 02 00 00 00       	mov    ecx,0x2
c001d6f1:	99                   	cdq    
c001d6f2:	f7 f9                	idiv   ecx
c001d6f4:	83 e8 32             	sub    eax,0x32
c001d6f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6fa:	e8 bb 92 fe ff       	call   c00069ba <iso_readdir>
c001d6ff:	83 c4 10             	add    esp,0x10
c001d702:	89 c6                	mov    esi,eax
c001d704:	85 c0                	test   eax,eax
c001d706:	75 37                	jne    c001d73f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001d708:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001d70d:	56                   	push   esi
c001d70e:	56                   	push   esi
c001d70f:	68 a2 96 02 c0       	push   0xc00296a2
c001d714:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d71a:	e8 05 4f ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001d71f:	83 c4 0c             	add    esp,0xc
c001d722:	68 10 01 00 00       	push   0x110
c001d727:	6a 00                	push   0x0
c001d729:	57                   	push   edi
c001d72a:	e8 c1 2d fe ff       	call   c00004f0 <memset>
c001d72f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d735:	83 c4 10             	add    esp,0x10
c001d738:	b8 01 00 00 00       	mov    eax,0x1
c001d73d:	eb 7d                	jmp    c001d7bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d73f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d745:	8d 68 08             	lea    ebp,[eax+0x8]
c001d748:	83 ec 0c             	sub    esp,0xc
c001d74b:	55                   	push   ebp
c001d74c:	e8 1f 2e fe ff       	call   c0000570 <strlen>
c001d751:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d759:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d75d:	83 c4 10             	add    esp,0x10
c001d760:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001d764:	75 0a                	jne    c001d770 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001d766:	b8 02 00 00 00       	mov    eax,0x2
c001d76b:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001d76e:	74 05                	je     c001d775 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001d770:	b8 01 00 00 00       	mov    eax,0x1
c001d775:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d779:	50                   	push   eax
c001d77a:	50                   	push   eax
c001d77b:	55                   	push   ebp
c001d77c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d780:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d784:	50                   	push   eax
c001d785:	e8 b6 2e fe ff       	call   c0000640 <strcpy>
c001d78a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d791:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d793:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001d799:	5a                   	pop    edx
c001d79a:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001d79f:	59                   	pop    ecx
c001d7a0:	68 b5 96 02 c0       	push   0xc00296b5
c001d7a5:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d7ab:	e8 74 4e ff ff       	call   c0012624 <VgaText::puts(char const*)>
c001d7b0:	83 c4 10             	add    esp,0x10
c001d7b3:	31 c0                	xor    eax,eax
c001d7b5:	eb 05                	jmp    c001d7bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d7b7:	b8 04 00 00 00       	mov    eax,0x4
c001d7bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d7c2:	5b                   	pop    ebx
c001d7c3:	5e                   	pop    esi
c001d7c4:	5f                   	pop    edi
c001d7c5:	5d                   	pop    ebp
c001d7c6:	c3                   	ret    

c001d7c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d7c7:	57                   	push   edi
c001d7c8:	56                   	push   esi
c001d7c9:	53                   	push   ebx
c001d7ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d7d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d7d6:	39 35 84 35 03 c0    	cmp    DWORD PTR ds:0xc0033584,esi
c001d7dc:	0f be cb             	movsx  ecx,bl
c001d7df:	75 0b                	jne    c001d7ec <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d7e1:	0f be 05 a4 b8 02 c0 	movsx  eax,BYTE PTR ds:0xc002b8a4
c001d7e8:	39 c8                	cmp    eax,ecx
c001d7ea:	74 47                	je     c001d833 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d7ec:	83 ec 0c             	sub    esp,0xc
c001d7ef:	31 d2                	xor    edx,edx
c001d7f1:	68 a0 35 03 c0       	push   0xc00335a0
c001d7f6:	6a 01                	push   0x1
c001d7f8:	52                   	push   edx
c001d7f9:	56                   	push   esi
c001d7fa:	ff 34 8d dc 09 03 c0 	push   DWORD PTR [ecx*4-0x3ffcf624]
c001d801:	e8 6c d2 fe ff       	call   c000aa72 <LogicalDisk::read(unsigned long long, int, void*)>
c001d806:	83 c4 20             	add    esp,0x20
c001d809:	85 c0                	test   eax,eax
c001d80b:	75 0e                	jne    c001d81b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d80d:	89 35 84 35 03 c0    	mov    DWORD PTR ds:0xc0033584,esi
c001d813:	88 1d a4 b8 02 c0    	mov    BYTE PTR ds:0xc002b8a4,bl
c001d819:	eb 18                	jmp    c001d833 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d81b:	50                   	push   eax
c001d81c:	68 00 08 00 00       	push   0x800
c001d821:	6a 00                	push   0x0
c001d823:	57                   	push   edi
c001d824:	e8 c7 2c fe ff       	call   c00004f0 <memset>
c001d829:	83 c4 10             	add    esp,0x10
c001d82c:	b8 01 00 00 00       	mov    eax,0x1
c001d831:	eb 0e                	jmp    c001d841 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d833:	be a0 35 03 c0       	mov    esi,0xc00335a0
c001d838:	b9 00 08 00 00       	mov    ecx,0x800
c001d83d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d83f:	31 c0                	xor    eax,eax
c001d841:	5b                   	pop    ebx
c001d842:	5e                   	pop    esi
c001d843:	5f                   	pop    edi
c001d844:	c3                   	ret    
c001d845:	90                   	nop

c001d846 <ISO9660::tryMount(LogicalDisk*, int)>:
c001d846:	53                   	push   ebx
c001d847:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d84d:	c7 05 84 35 03 c0 ef be ad de 	mov    DWORD PTR ds:0xc0033584,0xdeadbeef
c001d857:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d85e:	8d 58 41             	lea    ebx,[eax+0x41]
c001d861:	0f be db             	movsx  ebx,bl
c001d864:	53                   	push   ebx
c001d865:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d869:	50                   	push   eax
c001d86a:	6a 10                	push   0x10
c001d86c:	e8 56 ff ff ff       	call   c001d7c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d871:	83 c4 10             	add    esp,0x10
c001d874:	31 d2                	xor    edx,edx
c001d876:	85 c0                	test   eax,eax
c001d878:	75 33                	jne    c001d8ad <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d87a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d87f:	75 2c                	jne    c001d8ad <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d881:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d886:	75 25                	jne    c001d8ad <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d888:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d88d:	75 1e                	jne    c001d8ad <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d88f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d894:	75 17                	jne    c001d8ad <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d896:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d89b:	75 10                	jne    c001d8ad <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d89d:	83 ec 0c             	sub    esp,0xc
c001d8a0:	53                   	push   ebx
c001d8a1:	e8 88 93 fe ff       	call   c0006c2e <init_percd>
c001d8a6:	83 c4 10             	add    esp,0x10
c001d8a9:	40                   	inc    eax
c001d8aa:	0f 95 c2             	setne  dl
c001d8ad:	88 d0                	mov    al,dl
c001d8af:	81 c4 08 08 00 00    	add    esp,0x808
c001d8b5:	5b                   	pop    ebx
c001d8b6:	c3                   	ret    
c001d8b7:	90                   	nop

c001d8b8 <ISO9660::ISO9660()>:
c001d8b8:	83 ec 0c             	sub    esp,0xc
c001d8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8bf:	83 ec 0c             	sub    esp,0xc
c001d8c2:	50                   	push   eax
c001d8c3:	e8 00 a5 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001d8c8:	83 c4 10             	add    esp,0x10
c001d8cb:	ba d0 96 02 c0       	mov    edx,0xc00296d0
c001d8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8d4:	89 10                	mov    DWORD PTR [eax],edx
c001d8d6:	e8 65 94 fe ff       	call   c0006d40 <fs_iso9660_init>
c001d8db:	90                   	nop
c001d8dc:	83 c4 0c             	add    esp,0xc
c001d8df:	c3                   	ret    

c001d8e0 <SoundCard::beginPlayback()>:
c001d8e0:	c7 44 24 04 34 97 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029734
c001d8e8:	e9 cb 23 ff ff       	jmp    c000fcb8 <KePanic(char const*)>
c001d8ed:	90                   	nop

c001d8ee <SoundCard::stopPlayback()>:
c001d8ee:	c7 44 24 04 34 97 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029734
c001d8f6:	e9 bd 23 ff ff       	jmp    c000fcb8 <KePanic(char const*)>
c001d8fb:	90                   	nop

c001d8fc <SoundCard::SoundCard(char const*)>:
c001d8fc:	83 ec 1c             	sub    esp,0x1c
c001d8ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d903:	83 ec 08             	sub    esp,0x8
c001d906:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d90a:	50                   	push   eax
c001d90b:	e8 a6 c2 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001d910:	83 c4 10             	add    esp,0x10
c001d913:	ba 80 97 02 c0       	mov    edx,0xc0029780
c001d918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d91c:	89 10                	mov    DWORD PTR [eax],edx
c001d91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d922:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d929:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d92d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d937:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d93b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d949:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d957:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d961:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d969:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d96e:	7f 1a                	jg     c001d98a <SoundCard::SoundCard(char const*)+0x8e>
c001d970:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d974:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d978:	83 c2 54             	add    edx,0x54
c001d97b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d983:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d988:	eb df                	jmp    c001d969 <SoundCard::SoundCard(char const*)+0x6d>
c001d98a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d98e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d995:	90                   	nop
c001d996:	83 c4 1c             	add    esp,0x1c
c001d999:	c3                   	ret    

c001d99a <SoundCard::~SoundCard()>:
c001d99a:	83 ec 0c             	sub    esp,0xc
c001d99d:	ba 80 97 02 c0       	mov    edx,0xc0029780
c001d9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9a6:	89 10                	mov    DWORD PTR [eax],edx
c001d9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9ac:	83 ec 0c             	sub    esp,0xc
c001d9af:	50                   	push   eax
c001d9b0:	e8 a1 bf fe ff       	call   c0009956 <Device::~Device()>
c001d9b5:	83 c4 10             	add    esp,0x10
c001d9b8:	90                   	nop
c001d9b9:	83 c4 0c             	add    esp,0xc
c001d9bc:	c3                   	ret    
c001d9bd:	90                   	nop

c001d9be <SoundCard::~SoundCard()>:
c001d9be:	83 ec 0c             	sub    esp,0xc
c001d9c1:	83 ec 0c             	sub    esp,0xc
c001d9c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9c8:	e8 cd ff ff ff       	call   c001d99a <SoundCard::~SoundCard()>
c001d9cd:	83 c4 10             	add    esp,0x10
c001d9d0:	83 ec 08             	sub    esp,0x8
c001d9d3:	68 e8 01 00 00       	push   0x1e8
c001d9d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9dc:	e8 9b f9 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c001d9e1:	83 c4 10             	add    esp,0x10
c001d9e4:	83 c4 0c             	add    esp,0xc
c001d9e7:	c3                   	ret    

c001d9e8 <SoundCard::configureRates(int, int, int)>:
c001d9e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d9ec:	31 c0                	xor    eax,eax
c001d9ee:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d9f5:	75 20                	jne    c001da17 <SoundCard::configureRates(int, int, int)+0x2f>
c001d9f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d9fb:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001da01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da05:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001da0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da0f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001da15:	b0 01                	mov    al,0x1
c001da17:	c3                   	ret    

c001da18 <SoundCard::getSamples16(int, short*)>:
c001da18:	55                   	push   ebp
c001da19:	57                   	push   edi
c001da1a:	31 ff                	xor    edi,edi
c001da1c:	56                   	push   esi
c001da1d:	53                   	push   ebx
c001da1e:	31 db                	xor    ebx,ebx
c001da20:	83 ec 10             	sub    esp,0x10
c001da23:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001da27:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001da2b:	8d 04 36             	lea    eax,[esi+esi*1]
c001da2e:	50                   	push   eax
c001da2f:	6a 00                	push   0x0
c001da31:	55                   	push   ebp
c001da32:	e8 b9 2a fe ff       	call   c00004f0 <memset>
c001da37:	83 c4 10             	add    esp,0x10
c001da3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da3e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001da45:	85 c0                	test   eax,eax
c001da47:	74 1b                	je     c001da64 <SoundCard::getSamples16(int, short*)+0x4c>
c001da49:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001da4d:	75 15                	jne    c001da64 <SoundCard::getSamples16(int, short*)+0x4c>
c001da4f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001da53:	55                   	push   ebp
c001da54:	56                   	push   esi
c001da55:	50                   	push   eax
c001da56:	e8 8d 03 00 00       	call   c001dde8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001da5b:	83 c4 10             	add    esp,0x10
c001da5e:	39 c7                	cmp    edi,eax
c001da60:	7d 02                	jge    c001da64 <SoundCard::getSamples16(int, short*)+0x4c>
c001da62:	89 c7                	mov    edi,eax
c001da64:	43                   	inc    ebx
c001da65:	83 fb 20             	cmp    ebx,0x20
c001da68:	75 d0                	jne    c001da3a <SoundCard::getSamples16(int, short*)+0x22>
c001da6a:	83 c4 0c             	add    esp,0xc
c001da6d:	89 f8                	mov    eax,edi
c001da6f:	5b                   	pop    ebx
c001da70:	5e                   	pop    esi
c001da71:	5f                   	pop    edi
c001da72:	5d                   	pop    ebp
c001da73:	c3                   	ret    

c001da74 <SoundCard::getSamples32(int, int*)>:
c001da74:	55                   	push   ebp
c001da75:	57                   	push   edi
c001da76:	31 ff                	xor    edi,edi
c001da78:	56                   	push   esi
c001da79:	31 f6                	xor    esi,esi
c001da7b:	53                   	push   ebx
c001da7c:	83 ec 10             	sub    esp,0x10
c001da7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001da83:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001da87:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001da8b:	c1 e0 02             	shl    eax,0x2
c001da8e:	50                   	push   eax
c001da8f:	6a 00                	push   0x0
c001da91:	55                   	push   ebp
c001da92:	e8 59 2a fe ff       	call   c00004f0 <memset>
c001da97:	83 c4 10             	add    esp,0x10
c001da9a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001daa1:	85 c0                	test   eax,eax
c001daa3:	74 1b                	je     c001dac0 <SoundCard::getSamples32(int, int*)+0x4c>
c001daa5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001daa9:	75 15                	jne    c001dac0 <SoundCard::getSamples32(int, int*)+0x4c>
c001daab:	53                   	push   ebx
c001daac:	55                   	push   ebp
c001daad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dab1:	50                   	push   eax
c001dab2:	e8 fd 03 00 00       	call   c001deb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001dab7:	83 c4 10             	add    esp,0x10
c001daba:	39 c6                	cmp    esi,eax
c001dabc:	7d 02                	jge    c001dac0 <SoundCard::getSamples32(int, int*)+0x4c>
c001dabe:	89 c6                	mov    esi,eax
c001dac0:	47                   	inc    edi
c001dac1:	83 ff 20             	cmp    edi,0x20
c001dac4:	75 d4                	jne    c001da9a <SoundCard::getSamples32(int, int*)+0x26>
c001dac6:	85 f6                	test   esi,esi
c001dac8:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001dacf:	75 0f                	jne    c001dae0 <SoundCard::getSamples32(int, int*)+0x6c>
c001dad1:	85 c0                	test   eax,eax
c001dad3:	74 1b                	je     c001daf0 <SoundCard::getSamples32(int, int*)+0x7c>
c001dad5:	83 ec 0c             	sub    esp,0xc
c001dad8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dada:	53                   	push   ebx
c001dadb:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001dade:	eb 0d                	jmp    c001daed <SoundCard::getSamples32(int, int*)+0x79>
c001dae0:	85 c0                	test   eax,eax
c001dae2:	75 0c                	jne    c001daf0 <SoundCard::getSamples32(int, int*)+0x7c>
c001dae4:	83 ec 0c             	sub    esp,0xc
c001dae7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dae9:	53                   	push   ebx
c001daea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001daed:	83 c4 10             	add    esp,0x10
c001daf0:	83 c4 0c             	add    esp,0xc
c001daf3:	89 f0                	mov    eax,esi
c001daf5:	5b                   	pop    ebx
c001daf6:	5e                   	pop    esi
c001daf7:	5f                   	pop    edi
c001daf8:	5d                   	pop    ebp
c001daf9:	c3                   	ret    

c001dafa <SoundCard::addChannel(SoundPort*)>:
c001dafa:	83 ec 0c             	sub    esp,0xc
c001dafd:	31 c0                	xor    eax,eax
c001daff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db03:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001db0b:	74 1b                	je     c001db28 <SoundCard::addChannel(SoundPort*)+0x2e>
c001db0d:	40                   	inc    eax
c001db0e:	83 f8 20             	cmp    eax,0x20
c001db11:	75 f0                	jne    c001db03 <SoundCard::addChannel(SoundPort*)+0x9>
c001db13:	83 ec 0c             	sub    esp,0xc
c001db16:	68 59 97 02 c0       	push   0xc0029759
c001db1b:	e8 98 21 ff ff       	call   c000fcb8 <KePanic(char const*)>
c001db20:	83 c4 10             	add    esp,0x10
c001db23:	83 c8 ff             	or     eax,0xffffffff
c001db26:	eb 0b                	jmp    c001db33 <SoundCard::addChannel(SoundPort*)+0x39>
c001db28:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001db2c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001db33:	83 c4 0c             	add    esp,0xc
c001db36:	c3                   	ret    
c001db37:	90                   	nop

c001db38 <SoundCard::removeChannel(int)>:
c001db38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db40:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001db4b:	c3                   	ret    

c001db4c <SoundPort::SoundPort(int, int, int, int)>:
c001db4c:	83 ec 0c             	sub    esp,0xc
c001db4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db53:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001db5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db5e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001db62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db6a:	89 10                	mov    DWORD PTR [eax],edx
c001db6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001db77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db7b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db7f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001db82:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001db87:	75 13                	jne    c001db9c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001db89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db8d:	8b 00                	mov    eax,DWORD PTR [eax]
c001db8f:	05 a0 0f 00 00       	add    eax,0xfa0
c001db94:	01 c0                	add    eax,eax
c001db96:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001db9a:	66 90                	xchg   ax,ax
c001db9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dba0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dba4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001dba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbab:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001dbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbb6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dbb9:	c1 e0 02             	shl    eax,0x2
c001dbbc:	83 ec 0c             	sub    esp,0xc
c001dbbf:	50                   	push   eax
c001dbc0:	e8 9e 1c ff ff       	call   c000f863 <malloc>
c001dbc5:	83 c4 10             	add    esp,0x10
c001dbc8:	89 c2                	mov    edx,eax
c001dbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001dbd1:	90                   	nop
c001dbd2:	83 c4 0c             	add    esp,0xc
c001dbd5:	c3                   	ret    
c001dbd6:	66 90                	xchg   ax,ax

c001dbd8 <SoundPort::~SoundPort()>:
c001dbd8:	83 ec 0c             	sub    esp,0xc
c001dbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbdf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dbe2:	85 c0                	test   eax,eax
c001dbe4:	74 1e                	je     c001dc04 <SoundPort::~SoundPort()+0x2c>
c001dbe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dbed:	83 ec 0c             	sub    esp,0xc
c001dbf0:	50                   	push   eax
c001dbf1:	e8 7d 1c ff ff       	call   c000f873 <free>
c001dbf6:	83 c4 10             	add    esp,0x10
c001dbf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbfd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dc04:	90                   	nop
c001dc05:	83 c4 0c             	add    esp,0xc
c001dc08:	c3                   	ret    
c001dc09:	90                   	nop
c001dc0a:	66 90                	xchg   ax,ax

c001dc0c <SoundPort::unpause()>:
c001dc0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc10:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001dc14:	c3                   	ret    
c001dc15:	90                   	nop
c001dc16:	66 90                	xchg   ax,ax

c001dc18 <SoundPort::pause()>:
c001dc18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc1c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001dc20:	c3                   	ret    
c001dc21:	90                   	nop
c001dc22:	66 90                	xchg   ax,ax

c001dc24 <SoundPort::getBufferUsed()>:
c001dc24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc28:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001dc2b:	c3                   	ret    

c001dc2c <SoundPort::getBufferSize()>:
c001dc2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc30:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dc33:	c3                   	ret    

c001dc34 <SoundPort::buffer8(signed char*, int)>:
c001dc34:	55                   	push   ebp
c001dc35:	57                   	push   edi
c001dc36:	56                   	push   esi
c001dc37:	53                   	push   ebx
c001dc38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc3c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001dc40:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001dc43:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001dc46:	74 70                	je     c001dcb8 <SoundPort::buffer8(signed char*, int)+0x84>
c001dc48:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dc4c:	85 c9                	test   ecx,ecx
c001dc4e:	7e 68                	jle    c001dcb8 <SoundPort::buffer8(signed char*, int)+0x84>
c001dc50:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001dc54:	8d 48 01             	lea    ecx,[eax+0x1]
c001dc57:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001dc5a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001dc5d:	89 f1                	mov    ecx,esi
c001dc5f:	c1 e1 18             	shl    ecx,0x18
c001dc62:	29 f1                	sub    ecx,esi
c001dc64:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001dc67:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dc6a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dc6d:	74 51                	je     c001dcc0 <SoundPort::buffer8(signed char*, int)+0x8c>
c001dc6f:	31 ff                	xor    edi,edi
c001dc71:	eb 25                	jmp    c001dc98 <SoundPort::buffer8(signed char*, int)+0x64>
c001dc73:	90                   	nop
c001dc74:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001dc79:	8d 59 01             	lea    ebx,[ecx+0x1]
c001dc7c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001dc7f:	89 f3                	mov    ebx,esi
c001dc81:	c1 e3 18             	shl    ebx,0x18
c001dc84:	29 f3                	sub    ebx,esi
c001dc86:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001dc89:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001dc8c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dc8f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dc92:	74 1c                	je     c001dcb0 <SoundPort::buffer8(signed char*, int)+0x7c>
c001dc94:	89 c7                	mov    edi,eax
c001dc96:	66 90                	xchg   ax,ax
c001dc98:	8d 47 01             	lea    eax,[edi+0x1]
c001dc9b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001dc9f:	75 d3                	jne    c001dc74 <SoundPort::buffer8(signed char*, int)+0x40>
c001dca1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dca5:	8d 76 00             	lea    esi,[esi+0x0]
c001dca8:	5b                   	pop    ebx
c001dca9:	5e                   	pop    esi
c001dcaa:	5f                   	pop    edi
c001dcab:	5d                   	pop    ebp
c001dcac:	c3                   	ret    
c001dcad:	8d 76 00             	lea    esi,[esi+0x0]
c001dcb0:	5b                   	pop    ebx
c001dcb1:	8d 47 02             	lea    eax,[edi+0x2]
c001dcb4:	5e                   	pop    esi
c001dcb5:	5f                   	pop    edi
c001dcb6:	5d                   	pop    ebp
c001dcb7:	c3                   	ret    
c001dcb8:	5b                   	pop    ebx
c001dcb9:	31 c0                	xor    eax,eax
c001dcbb:	5e                   	pop    esi
c001dcbc:	5f                   	pop    edi
c001dcbd:	5d                   	pop    ebp
c001dcbe:	c3                   	ret    
c001dcbf:	90                   	nop
c001dcc0:	b8 01 00 00 00       	mov    eax,0x1
c001dcc5:	eb e1                	jmp    c001dca8 <SoundPort::buffer8(signed char*, int)+0x74>
c001dcc7:	90                   	nop

c001dcc8 <SoundPort::buffer16(short*, int)>:
c001dcc8:	55                   	push   ebp
c001dcc9:	57                   	push   edi
c001dcca:	56                   	push   esi
c001dccb:	53                   	push   ebx
c001dccc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dcd0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001dcd4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001dcd7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001dcda:	74 70                	je     c001dd4c <SoundPort::buffer16(short*, int)+0x84>
c001dcdc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dce0:	85 c9                	test   ecx,ecx
c001dce2:	7e 68                	jle    c001dd4c <SoundPort::buffer16(short*, int)+0x84>
c001dce4:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001dce8:	8d 48 01             	lea    ecx,[eax+0x1]
c001dceb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001dcee:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001dcf1:	89 f1                	mov    ecx,esi
c001dcf3:	c1 e1 10             	shl    ecx,0x10
c001dcf6:	29 f1                	sub    ecx,esi
c001dcf8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001dcfb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dcfe:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dd01:	74 51                	je     c001dd54 <SoundPort::buffer16(short*, int)+0x8c>
c001dd03:	31 ff                	xor    edi,edi
c001dd05:	eb 25                	jmp    c001dd2c <SoundPort::buffer16(short*, int)+0x64>
c001dd07:	90                   	nop
c001dd08:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001dd0d:	8d 59 01             	lea    ebx,[ecx+0x1]
c001dd10:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001dd13:	89 f3                	mov    ebx,esi
c001dd15:	c1 e3 10             	shl    ebx,0x10
c001dd18:	29 f3                	sub    ebx,esi
c001dd1a:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001dd1d:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001dd20:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dd23:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dd26:	74 1c                	je     c001dd44 <SoundPort::buffer16(short*, int)+0x7c>
c001dd28:	89 c7                	mov    edi,eax
c001dd2a:	66 90                	xchg   ax,ax
c001dd2c:	8d 47 01             	lea    eax,[edi+0x1]
c001dd2f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001dd33:	75 d3                	jne    c001dd08 <SoundPort::buffer16(short*, int)+0x40>
c001dd35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd39:	8d 76 00             	lea    esi,[esi+0x0]
c001dd3c:	5b                   	pop    ebx
c001dd3d:	5e                   	pop    esi
c001dd3e:	5f                   	pop    edi
c001dd3f:	5d                   	pop    ebp
c001dd40:	c3                   	ret    
c001dd41:	8d 76 00             	lea    esi,[esi+0x0]
c001dd44:	5b                   	pop    ebx
c001dd45:	8d 47 02             	lea    eax,[edi+0x2]
c001dd48:	5e                   	pop    esi
c001dd49:	5f                   	pop    edi
c001dd4a:	5d                   	pop    ebp
c001dd4b:	c3                   	ret    
c001dd4c:	5b                   	pop    ebx
c001dd4d:	31 c0                	xor    eax,eax
c001dd4f:	5e                   	pop    esi
c001dd50:	5f                   	pop    edi
c001dd51:	5d                   	pop    ebp
c001dd52:	c3                   	ret    
c001dd53:	90                   	nop
c001dd54:	b8 01 00 00 00       	mov    eax,0x1
c001dd59:	eb e1                	jmp    c001dd3c <SoundPort::buffer16(short*, int)+0x74>
c001dd5b:	90                   	nop

c001dd5c <SoundPort::buffer32(int*, int)>:
c001dd5c:	55                   	push   ebp
c001dd5d:	57                   	push   edi
c001dd5e:	56                   	push   esi
c001dd5f:	53                   	push   ebx
c001dd60:	83 ec 04             	sub    esp,0x4
c001dd63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd6b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dd6e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dd72:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd75:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dd78:	74 5a                	je     c001ddd4 <SoundPort::buffer32(int*, int)+0x78>
c001dd7a:	85 c0                	test   eax,eax
c001dd7c:	7e 56                	jle    c001ddd4 <SoundPort::buffer32(int*, int)+0x78>
c001dd7e:	8d 71 01             	lea    esi,[ecx+0x1]
c001dd81:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001dd84:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001dd87:	8b 37                	mov    esi,DWORD PTR [edi]
c001dd89:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001dd8c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dd8f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dd92:	74 4c                	je     c001dde0 <SoundPort::buffer32(int*, int)+0x84>
c001dd94:	31 f6                	xor    esi,esi
c001dd96:	eb 1c                	jmp    c001ddb4 <SoundPort::buffer32(int*, int)+0x58>
c001dd98:	8d 69 01             	lea    ebp,[ecx+0x1]
c001dd9b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001dd9e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001dda1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dda4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001dda8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ddab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ddae:	74 18                	je     c001ddc8 <SoundPort::buffer32(int*, int)+0x6c>
c001ddb0:	89 de                	mov    esi,ebx
c001ddb2:	66 90                	xchg   ax,ax
c001ddb4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ddb7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ddba:	75 dc                	jne    c001dd98 <SoundPort::buffer32(int*, int)+0x3c>
c001ddbc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ddbf:	90                   	nop
c001ddc0:	83 c4 04             	add    esp,0x4
c001ddc3:	5b                   	pop    ebx
c001ddc4:	5e                   	pop    esi
c001ddc5:	5f                   	pop    edi
c001ddc6:	5d                   	pop    ebp
c001ddc7:	c3                   	ret    
c001ddc8:	83 c4 04             	add    esp,0x4
c001ddcb:	8d 46 02             	lea    eax,[esi+0x2]
c001ddce:	5b                   	pop    ebx
c001ddcf:	5e                   	pop    esi
c001ddd0:	5f                   	pop    edi
c001ddd1:	5d                   	pop    ebp
c001ddd2:	c3                   	ret    
c001ddd3:	90                   	nop
c001ddd4:	83 c4 04             	add    esp,0x4
c001ddd7:	31 c0                	xor    eax,eax
c001ddd9:	5b                   	pop    ebx
c001ddda:	5e                   	pop    esi
c001dddb:	5f                   	pop    edi
c001dddc:	5d                   	pop    ebp
c001dddd:	c3                   	ret    
c001ddde:	66 90                	xchg   ax,ax
c001dde0:	b8 01 00 00 00       	mov    eax,0x1
c001dde5:	eb d9                	jmp    c001ddc0 <SoundPort::buffer32(int*, int)+0x64>
c001dde7:	90                   	nop

c001dde8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001dde8:	57                   	push   edi
c001dde9:	56                   	push   esi
c001ddea:	53                   	push   ebx
c001ddeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ddef:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ddf3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001ddf9:	39 03                	cmp    DWORD PTR [ebx],eax
c001ddfb:	74 13                	je     c001de10 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001ddfd:	83 ec 0c             	sub    esp,0xc
c001de00:	68 ac 97 02 c0       	push   0xc00297ac
c001de05:	e8 ae 1e ff ff       	call   c000fcb8 <KePanic(char const*)>
c001de0a:	83 c4 10             	add    esp,0x10
c001de0d:	8d 76 00             	lea    esi,[esi+0x0]
c001de10:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001de16:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001de19:	74 11                	je     c001de2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001de1b:	83 ec 0c             	sub    esp,0xc
c001de1e:	68 eb 97 02 c0       	push   0xc00297eb
c001de23:	e8 90 1e ff ff       	call   c000fcb8 <KePanic(char const*)>
c001de28:	83 c4 10             	add    esp,0x10
c001de2b:	90                   	nop
c001de2c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001de32:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001de35:	74 11                	je     c001de48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001de37:	83 ec 0c             	sub    esp,0xc
c001de3a:	68 eb 97 02 c0       	push   0xc00297eb
c001de3f:	e8 74 1e ff ff       	call   c000fcb8 <KePanic(char const*)>
c001de44:	83 c4 10             	add    esp,0x10
c001de47:	90                   	nop
c001de48:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001de4b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001de4f:	7e 07                	jle    c001de58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001de51:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001de55:	8d 76 00             	lea    esi,[esi+0x0]
c001de58:	85 f6                	test   esi,esi
c001de5a:	7e 2c                	jle    c001de88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001de5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001de60:	8d 3c 36             	lea    edi,[esi+esi*1]
c001de63:	31 c9                	xor    ecx,ecx
c001de65:	01 d7                	add    edi,edx
c001de67:	90                   	nop
c001de68:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001de6b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001de6e:	85 c0                	test   eax,eax
c001de70:	79 06                	jns    c001de78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001de72:	05 ff 7f 00 00       	add    eax,0x7fff
c001de77:	90                   	nop
c001de78:	c1 f8 0f             	sar    eax,0xf
c001de7b:	83 c1 04             	add    ecx,0x4
c001de7e:	66 01 02             	add    WORD PTR [edx],ax
c001de81:	83 c2 02             	add    edx,0x2
c001de84:	39 d7                	cmp    edi,edx
c001de86:	75 e0                	jne    c001de68 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001de88:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001de8b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001de8e:	83 ec 04             	sub    esp,0x4
c001de91:	29 f0                	sub    eax,esi
c001de93:	c1 e0 02             	shl    eax,0x2
c001de96:	50                   	push   eax
c001de97:	8d 04 b2             	lea    eax,[edx+esi*4]
c001de9a:	50                   	push   eax
c001de9b:	52                   	push   edx
c001de9c:	e8 2f 25 fe ff       	call   c00003d0 <memmove>
c001dea1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001dea4:	83 c4 10             	add    esp,0x10
c001dea7:	29 f0                	sub    eax,esi
c001dea9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001deac:	89 f0                	mov    eax,esi
c001deae:	5b                   	pop    ebx
c001deaf:	5e                   	pop    esi
c001deb0:	5f                   	pop    edi
c001deb1:	c3                   	ret    
c001deb2:	66 90                	xchg   ax,ax

c001deb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001deb4:	57                   	push   edi
c001deb5:	56                   	push   esi
c001deb6:	53                   	push   ebx
c001deb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001debb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001debf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dec3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001dec9:	39 06                	cmp    DWORD PTR [esi],eax
c001decb:	74 13                	je     c001dee0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001decd:	83 ec 0c             	sub    esp,0xc
c001ded0:	68 cc 97 02 c0       	push   0xc00297cc
c001ded5:	e8 de 1d ff ff       	call   c000fcb8 <KePanic(char const*)>
c001deda:	83 c4 10             	add    esp,0x10
c001dedd:	8d 76 00             	lea    esi,[esi+0x0]
c001dee0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001dee6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001dee9:	74 11                	je     c001defc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001deeb:	83 ec 0c             	sub    esp,0xc
c001deee:	68 07 98 02 c0       	push   0xc0029807
c001def3:	e8 c0 1d ff ff       	call   c000fcb8 <KePanic(char const*)>
c001def8:	83 c4 10             	add    esp,0x10
c001defb:	90                   	nop
c001defc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001df02:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001df05:	74 11                	je     c001df18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001df07:	83 ec 0c             	sub    esp,0xc
c001df0a:	68 07 98 02 c0       	push   0xc0029807
c001df0f:	e8 a4 1d ff ff       	call   c000fcb8 <KePanic(char const*)>
c001df14:	83 c4 10             	add    esp,0x10
c001df17:	90                   	nop
c001df18:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001df1b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001df1f:	7e 07                	jle    c001df28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001df21:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001df25:	8d 76 00             	lea    esi,[esi+0x0]
c001df28:	85 ff                	test   edi,edi
c001df2a:	7e 1c                	jle    c001df48 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001df2c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001df33:	31 c0                	xor    eax,eax
c001df35:	8d 76 00             	lea    esi,[esi+0x0]
c001df38:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001df3b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001df3e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001df41:	83 c0 04             	add    eax,0x4
c001df44:	39 c1                	cmp    ecx,eax
c001df46:	75 f0                	jne    c001df38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001df48:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001df4b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001df4e:	83 ec 04             	sub    esp,0x4
c001df51:	29 f8                	sub    eax,edi
c001df53:	c1 e0 02             	shl    eax,0x2
c001df56:	50                   	push   eax
c001df57:	8d 04 ba             	lea    eax,[edx+edi*4]
c001df5a:	50                   	push   eax
c001df5b:	52                   	push   edx
c001df5c:	e8 6f 24 fe ff       	call   c00003d0 <memmove>
c001df61:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001df64:	83 c4 10             	add    esp,0x10
c001df67:	29 f8                	sub    eax,edi
c001df69:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001df6c:	89 f8                	mov    eax,edi
c001df6e:	5b                   	pop    ebx
c001df6f:	5e                   	pop    esi
c001df70:	5f                   	pop    edi
c001df71:	c3                   	ret    

c001df72 <PCI::open(int, int, void*)>:
c001df72:	83 ec 18             	sub    esp,0x18
c001df75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df79:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001df7d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001df83:	8b 10                	mov    edx,DWORD PTR [eax]
c001df85:	50                   	push   eax
c001df86:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001df89:	31 c0                	xor    eax,eax
c001df8b:	83 c4 1c             	add    esp,0x1c
c001df8e:	c3                   	ret    
c001df8f:	90                   	nop

c001df90 <PCI::close(int, int, void*)>:
c001df90:	31 c0                	xor    eax,eax
c001df92:	c3                   	ret    
c001df93:	90                   	nop

c001df94 <PCI::PCI()>:
c001df94:	83 ec 0c             	sub    esp,0xc
c001df97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df9b:	83 ec 08             	sub    esp,0x8
c001df9e:	68 23 98 02 c0       	push   0xc0029823
c001dfa3:	50                   	push   eax
c001dfa4:	e8 bb a9 fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001dfa9:	83 c4 10             	add    esp,0x10
c001dfac:	ba 30 99 02 c0       	mov    edx,0xc0029930
c001dfb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfb5:	89 10                	mov    DWORD PTR [eax],edx
c001dfb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfbb:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001dfc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfc9:	a3 a0 3d 03 c0       	mov    ds:0xc0033da0,eax
c001dfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfd2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dfd8:	0f b6 d0             	movzx  edx,al
c001dfdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfdf:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001dfe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dff0:	0f b6 d0             	movzx  edx,al
c001dff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dff7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001dffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e000:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e006:	8d 50 01             	lea    edx,[eax+0x1]
c001e009:	88 d1                	mov    cl,dl
c001e00b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e00f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e015:	0f b6 d0             	movzx  edx,al
c001e018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e01c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e020:	83 c9 c0             	or     ecx,0xffffffc0
c001e023:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e027:	90                   	nop
c001e028:	83 c4 0c             	add    esp,0xc
c001e02b:	c3                   	ret    

c001e02c <PCI::readBAR8(unsigned int, int)>:
c001e02c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e030:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e034:	f6 c2 01             	test   dl,0x1
c001e037:	74 07                	je     c001e040 <PCI::readBAR8(unsigned int, int)+0x14>
c001e039:	83 e2 fc             	and    edx,0xfffffffc
c001e03c:	01 c2                	add    edx,eax
c001e03e:	ec                   	in     al,dx
c001e03f:	c3                   	ret    
c001e040:	83 e2 f0             	and    edx,0xfffffff0
c001e043:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001e046:	c3                   	ret    
c001e047:	90                   	nop

c001e048 <PCI::readBAR16(unsigned int, int)>:
c001e048:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e04c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e050:	f6 c2 01             	test   dl,0x1
c001e053:	74 08                	je     c001e05d <PCI::readBAR16(unsigned int, int)+0x15>
c001e055:	83 e2 fc             	and    edx,0xfffffffc
c001e058:	01 c2                	add    edx,eax
c001e05a:	66 ed                	in     ax,dx
c001e05c:	c3                   	ret    
c001e05d:	83 e2 f0             	and    edx,0xfffffff0
c001e060:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001e064:	c3                   	ret    
c001e065:	90                   	nop

c001e066 <PCI::readBAR32(unsigned int, int)>:
c001e066:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e06a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e06e:	f6 c2 01             	test   dl,0x1
c001e071:	74 07                	je     c001e07a <PCI::readBAR32(unsigned int, int)+0x14>
c001e073:	83 e2 fc             	and    edx,0xfffffffc
c001e076:	01 c2                	add    edx,eax
c001e078:	ed                   	in     eax,dx
c001e079:	c3                   	ret    
c001e07a:	83 e2 f0             	and    edx,0xfffffff0
c001e07d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001e080:	c3                   	ret    
c001e081:	90                   	nop

c001e082 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001e082:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e086:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e08a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e08e:	f6 c2 01             	test   dl,0x1
c001e091:	74 07                	je     c001e09a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001e093:	83 e2 fc             	and    edx,0xfffffffc
c001e096:	01 ca                	add    edx,ecx
c001e098:	ee                   	out    dx,al
c001e099:	c3                   	ret    
c001e09a:	83 e2 f0             	and    edx,0xfffffff0
c001e09d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001e0a0:	c3                   	ret    
c001e0a1:	90                   	nop

c001e0a2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001e0a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e0a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0ae:	f6 c2 01             	test   dl,0x1
c001e0b1:	74 08                	je     c001e0bb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001e0b3:	83 e2 fc             	and    edx,0xfffffffc
c001e0b6:	01 ca                	add    edx,ecx
c001e0b8:	66 ef                	out    dx,ax
c001e0ba:	c3                   	ret    
c001e0bb:	83 e2 f0             	and    edx,0xfffffff0
c001e0be:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001e0c2:	c3                   	ret    
c001e0c3:	90                   	nop

c001e0c4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001e0c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e0c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0d0:	f6 c2 01             	test   dl,0x1
c001e0d3:	74 07                	je     c001e0dc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001e0d5:	83 e2 fc             	and    edx,0xfffffffc
c001e0d8:	01 ca                	add    edx,ecx
c001e0da:	ef                   	out    dx,eax
c001e0db:	c3                   	ret    
c001e0dc:	83 e2 f0             	and    edx,0xfffffff0
c001e0df:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001e0e2:	c3                   	ret    
c001e0e3:	90                   	nop

c001e0e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e0e4:	55                   	push   ebp
c001e0e5:	57                   	push   edi
c001e0e6:	56                   	push   esi
c001e0e7:	53                   	push   ebx
c001e0e8:	83 ec 0c             	sub    esp,0xc
c001e0eb:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001e0f0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001e0f4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001e0f8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e0fc:	83 fe 07             	cmp    esi,0x7
c001e0ff:	76 10                	jbe    c001e111 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001e101:	83 ec 0c             	sub    esp,0xc
c001e104:	68 2b 98 02 c0       	push   0xc002982b
c001e109:	e8 aa 1b ff ff       	call   c000fcb8 <KePanic(char const*)>
c001e10e:	83 c4 10             	add    esp,0x10
c001e111:	0f b6 db             	movzx  ebx,bl
c001e114:	83 fb 0f             	cmp    ebx,0xf
c001e117:	76 10                	jbe    c001e129 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001e119:	83 ec 0c             	sub    esp,0xc
c001e11c:	68 5b 98 02 c0       	push   0xc002985b
c001e121:	e8 92 1b ff ff       	call   c000fcb8 <KePanic(char const*)>
c001e126:	83 c4 10             	add    esp,0x10
c001e129:	8d 04 36             	lea    eax,[esi+esi*1]
c001e12c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e131:	83 c8 f0             	or     eax,0xfffffff0
c001e134:	ee                   	out    dx,al
c001e135:	ba fa 0c 00 00       	mov    edx,0xcfa
c001e13a:	89 e8                	mov    eax,ebp
c001e13c:	ee                   	out    dx,al
c001e13d:	83 c4 0c             	add    esp,0xc
c001e140:	89 d8                	mov    eax,ebx
c001e142:	89 f9                	mov    ecx,edi
c001e144:	c1 e0 08             	shl    eax,0x8
c001e147:	0f b6 d9             	movzx  ebx,cl
c001e14a:	83 e3 fc             	and    ebx,0xfffffffc
c001e14d:	09 d8                	or     eax,ebx
c001e14f:	5b                   	pop    ebx
c001e150:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001e155:	5e                   	pop    esi
c001e156:	5f                   	pop    edi
c001e157:	5d                   	pop    ebp
c001e158:	c3                   	ret    
c001e159:	90                   	nop

c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e15a:	57                   	push   edi
c001e15b:	56                   	push   esi
c001e15c:	53                   	push   ebx
c001e15d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e161:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e165:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001e16b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e16f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e173:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e177:	83 ff 01             	cmp    edi,0x1
c001e17a:	75 3f                	jne    c001e1bb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001e17c:	89 de                	mov    esi,ebx
c001e17e:	0f b6 c0             	movzx  eax,al
c001e181:	81 e6 fc 00 00 00    	and    esi,0xfc
c001e187:	c1 e0 10             	shl    eax,0x10
c001e18a:	0f b6 c9             	movzx  ecx,cl
c001e18d:	09 f0                	or     eax,esi
c001e18f:	c1 e1 08             	shl    ecx,0x8
c001e192:	0f b6 d2             	movzx  edx,dl
c001e195:	09 c8                	or     eax,ecx
c001e197:	c1 e2 0b             	shl    edx,0xb
c001e19a:	09 d0                	or     eax,edx
c001e19c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e1a1:	0d 00 00 00 80       	or     eax,0x80000000
c001e1a6:	ef                   	out    dx,eax
c001e1a7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e1ac:	ed                   	in     eax,dx
c001e1ad:	83 e3 02             	and    ebx,0x2
c001e1b0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e1b7:	d3 e8                	shr    eax,cl
c001e1b9:	eb 44                	jmp    c001e1ff <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e1bb:	83 ff 02             	cmp    edi,0x2
c001e1be:	75 2d                	jne    c001e1ed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001e1c0:	83 ec 0c             	sub    esp,0xc
c001e1c3:	0f b6 c9             	movzx  ecx,cl
c001e1c6:	0f b6 d2             	movzx  edx,dl
c001e1c9:	0f b6 fb             	movzx  edi,bl
c001e1cc:	0f b6 c0             	movzx  eax,al
c001e1cf:	57                   	push   edi
c001e1d0:	51                   	push   ecx
c001e1d1:	52                   	push   edx
c001e1d2:	50                   	push   eax
c001e1d3:	56                   	push   esi
c001e1d4:	e8 0b ff ff ff       	call   c001e0e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1d9:	89 c2                	mov    edx,eax
c001e1db:	ed                   	in     eax,dx
c001e1dc:	83 e3 02             	and    ebx,0x2
c001e1df:	83 c4 20             	add    esp,0x20
c001e1e2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e1e9:	d3 e8                	shr    eax,cl
c001e1eb:	eb 12                	jmp    c001e1ff <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e1ed:	83 ec 0c             	sub    esp,0xc
c001e1f0:	68 8b 98 02 c0       	push   0xc002988b
c001e1f5:	e8 be 1a ff ff       	call   c000fcb8 <KePanic(char const*)>
c001e1fa:	83 c4 10             	add    esp,0x10
c001e1fd:	31 c0                	xor    eax,eax
c001e1ff:	5b                   	pop    ebx
c001e200:	5e                   	pop    esi
c001e201:	5f                   	pop    edi
c001e202:	c3                   	ret    
c001e203:	90                   	nop

c001e204 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001e204:	83 ec 18             	sub    esp,0x18
c001e207:	6a 00                	push   0x0
c001e209:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e20e:	50                   	push   eax
c001e20f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e214:	50                   	push   eax
c001e215:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e21a:	50                   	push   eax
c001e21b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e21f:	e8 36 ff ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e224:	83 c4 2c             	add    esp,0x2c
c001e227:	c3                   	ret    

c001e228 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001e228:	83 ec 18             	sub    esp,0x18
c001e22b:	6a 0e                	push   0xe
c001e22d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e232:	50                   	push   eax
c001e233:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e238:	50                   	push   eax
c001e239:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e23e:	50                   	push   eax
c001e23f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e243:	e8 12 ff ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e248:	83 c4 2c             	add    esp,0x2c
c001e24b:	0f b6 c0             	movzx  eax,al
c001e24e:	c3                   	ret    
c001e24f:	90                   	nop

c001e250 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001e250:	55                   	push   ebp
c001e251:	57                   	push   edi
c001e252:	56                   	push   esi
c001e253:	53                   	push   ebx
c001e254:	83 ec 18             	sub    esp,0x18
c001e257:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001e25c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001e261:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001e266:	6a 0a                	push   0xa
c001e268:	56                   	push   esi
c001e269:	55                   	push   ebp
c001e26a:	57                   	push   edi
c001e26b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e26f:	e8 e6 fe ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e274:	83 c4 14             	add    esp,0x14
c001e277:	89 c3                	mov    ebx,eax
c001e279:	6a 0a                	push   0xa
c001e27b:	0f b6 db             	movzx  ebx,bl
c001e27e:	56                   	push   esi
c001e27f:	55                   	push   ebp
c001e280:	57                   	push   edi
c001e281:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e285:	e8 d0 fe ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e28a:	83 c4 2c             	add    esp,0x2c
c001e28d:	25 00 ff 00 00       	and    eax,0xff00
c001e292:	09 d8                	or     eax,ebx
c001e294:	5b                   	pop    ebx
c001e295:	5e                   	pop    esi
c001e296:	5f                   	pop    edi
c001e297:	5d                   	pop    ebp
c001e298:	c3                   	ret    
c001e299:	90                   	nop

c001e29a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001e29a:	83 ec 18             	sub    esp,0x18
c001e29d:	6a 08                	push   0x8
c001e29f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2a4:	50                   	push   eax
c001e2a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2aa:	50                   	push   eax
c001e2ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2b0:	50                   	push   eax
c001e2b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2b5:	e8 a0 fe ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2ba:	83 c4 2c             	add    esp,0x2c
c001e2bd:	0f b6 c4             	movzx  eax,ah
c001e2c0:	c3                   	ret    
c001e2c1:	90                   	nop

c001e2c2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001e2c2:	83 ec 18             	sub    esp,0x18
c001e2c5:	6a 08                	push   0x8
c001e2c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2cc:	50                   	push   eax
c001e2cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2d2:	50                   	push   eax
c001e2d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2d8:	50                   	push   eax
c001e2d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2dd:	e8 78 fe ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2e2:	83 c4 2c             	add    esp,0x2c
c001e2e5:	c3                   	ret    

c001e2e6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001e2e6:	83 ec 18             	sub    esp,0x18
c001e2e9:	6a 3c                	push   0x3c
c001e2eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2f0:	50                   	push   eax
c001e2f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2f6:	50                   	push   eax
c001e2f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2fc:	50                   	push   eax
c001e2fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e301:	e8 54 fe ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e306:	83 c4 2c             	add    esp,0x2c
c001e309:	c3                   	ret    

c001e30a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001e30a:	83 ec 18             	sub    esp,0x18
c001e30d:	6a 18                	push   0x18
c001e30f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e314:	50                   	push   eax
c001e315:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e31a:	50                   	push   eax
c001e31b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e320:	50                   	push   eax
c001e321:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e325:	e8 30 fe ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e32a:	83 c4 2c             	add    esp,0x2c
c001e32d:	0f b6 c4             	movzx  eax,ah
c001e330:	c3                   	ret    
c001e331:	90                   	nop

c001e332 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e332:	55                   	push   ebp
c001e333:	57                   	push   edi
c001e334:	56                   	push   esi
c001e335:	53                   	push   ebx
c001e336:	83 ec 28             	sub    esp,0x28
c001e339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e33d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001e342:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001e347:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001e34c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001e353:	8d 43 12             	lea    eax,[ebx+0x12]
c001e356:	83 c3 10             	add    ebx,0x10
c001e359:	0f b6 c0             	movzx  eax,al
c001e35c:	0f b6 db             	movzx  ebx,bl
c001e35f:	50                   	push   eax
c001e360:	51                   	push   ecx
c001e361:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001e365:	57                   	push   edi
c001e366:	55                   	push   ebp
c001e367:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e36b:	e8 ea fd ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e370:	83 c4 14             	add    esp,0x14
c001e373:	89 c6                	mov    esi,eax
c001e375:	53                   	push   ebx
c001e376:	c1 e6 10             	shl    esi,0x10
c001e379:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e37d:	51                   	push   ecx
c001e37e:	57                   	push   edi
c001e37f:	55                   	push   ebp
c001e380:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e384:	e8 d1 fd ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e389:	83 c4 3c             	add    esp,0x3c
c001e38c:	0f b7 c0             	movzx  eax,ax
c001e38f:	5b                   	pop    ebx
c001e390:	09 f0                	or     eax,esi
c001e392:	5e                   	pop    esi
c001e393:	5f                   	pop    edi
c001e394:	5d                   	pop    ebp
c001e395:	c3                   	ret    

c001e396 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e396:	55                   	push   ebp
c001e397:	57                   	push   edi
c001e398:	56                   	push   esi
c001e399:	53                   	push   ebx
c001e39a:	83 ec 0c             	sub    esp,0xc
c001e39d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e3a1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e3a5:	89 f5                	mov    ebp,esi
c001e3a7:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001e3ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e3b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e3b9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e3bd:	83 f9 01             	cmp    ecx,0x1
c001e3c0:	75 5d                	jne    c001e41f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001e3c2:	0f b6 c8             	movzx  ecx,al
c001e3c5:	0f b6 d2             	movzx  edx,dl
c001e3c8:	c1 e1 10             	shl    ecx,0x10
c001e3cb:	c1 e2 0b             	shl    edx,0xb
c001e3ce:	89 f0                	mov    eax,esi
c001e3d0:	25 fc 00 00 00       	and    eax,0xfc
c001e3d5:	09 c1                	or     ecx,eax
c001e3d7:	89 e8                	mov    eax,ebp
c001e3d9:	0f b6 c0             	movzx  eax,al
c001e3dc:	c1 e0 08             	shl    eax,0x8
c001e3df:	09 c1                	or     ecx,eax
c001e3e1:	09 d1                	or     ecx,edx
c001e3e3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e3e8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e3ee:	89 c8                	mov    eax,ecx
c001e3f0:	ef                   	out    dx,eax
c001e3f1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e3f6:	ed                   	in     eax,dx
c001e3f7:	0f b7 db             	movzx  ebx,bx
c001e3fa:	83 e6 02             	and    esi,0x2
c001e3fd:	74 0a                	je     c001e409 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e3ff:	0f b7 d0             	movzx  edx,ax
c001e402:	c1 e3 10             	shl    ebx,0x10
c001e405:	09 d3                	or     ebx,edx
c001e407:	eb 05                	jmp    c001e40e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e409:	66 31 c0             	xor    ax,ax
c001e40c:	09 c3                	or     ebx,eax
c001e40e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e413:	89 c8                	mov    eax,ecx
c001e415:	ef                   	out    dx,eax
c001e416:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e41b:	89 d8                	mov    eax,ebx
c001e41d:	eb 41                	jmp    c001e460 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e41f:	83 f9 02             	cmp    ecx,0x2
c001e422:	75 45                	jne    c001e469 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e424:	83 ec 0c             	sub    esp,0xc
c001e427:	0f b6 d2             	movzx  edx,dl
c001e42a:	89 f1                	mov    ecx,esi
c001e42c:	0f b6 c0             	movzx  eax,al
c001e42f:	0f b6 f1             	movzx  esi,cl
c001e432:	89 e9                	mov    ecx,ebp
c001e434:	56                   	push   esi
c001e435:	0f b6 c9             	movzx  ecx,cl
c001e438:	51                   	push   ecx
c001e439:	52                   	push   edx
c001e43a:	50                   	push   eax
c001e43b:	57                   	push   edi
c001e43c:	e8 a3 fc ff ff       	call   c001e0e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e441:	89 c2                	mov    edx,eax
c001e443:	ed                   	in     eax,dx
c001e444:	83 c4 20             	add    esp,0x20
c001e447:	0f b7 db             	movzx  ebx,bx
c001e44a:	f6 c2 02             	test   dl,0x2
c001e44d:	74 0c                	je     c001e45b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e44f:	0f b7 c8             	movzx  ecx,ax
c001e452:	89 d8                	mov    eax,ebx
c001e454:	c1 e0 10             	shl    eax,0x10
c001e457:	09 c8                	or     eax,ecx
c001e459:	eb 05                	jmp    c001e460 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e45b:	66 31 c0             	xor    ax,ax
c001e45e:	09 d8                	or     eax,ebx
c001e460:	ef                   	out    dx,eax
c001e461:	83 c4 0c             	add    esp,0xc
c001e464:	5b                   	pop    ebx
c001e465:	5e                   	pop    esi
c001e466:	5f                   	pop    edi
c001e467:	5d                   	pop    ebp
c001e468:	c3                   	ret    
c001e469:	c7 44 24 20 8b 98 02 c0 	mov    DWORD PTR [esp+0x20],0xc002988b
c001e471:	83 c4 0c             	add    esp,0xc
c001e474:	5b                   	pop    ebx
c001e475:	5e                   	pop    esi
c001e476:	5f                   	pop    edi
c001e477:	5d                   	pop    ebp
c001e478:	e9 3b 18 ff ff       	jmp    c000fcb8 <KePanic(char const*)>
c001e47d:	90                   	nop

c001e47e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e47e:	55                   	push   ebp
c001e47f:	57                   	push   edi
c001e480:	56                   	push   esi
c001e481:	53                   	push   ebx
c001e482:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e488:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001e48f:	80 3d ac 3d 03 c0 00 	cmp    BYTE PTR ds:0xc0033dac,0x0
c001e496:	0f 85 bd 00 00 00    	jne    c001e559 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e49c:	83 ec 0c             	sub    esp,0xc
c001e49f:	68 14 01 00 00       	push   0x114
c001e4a4:	e8 ba 13 ff ff       	call   c000f863 <malloc>
c001e4a9:	83 c4 0c             	add    esp,0xc
c001e4ac:	89 c3                	mov    ebx,eax
c001e4ae:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c001e4b4:	68 91 98 02 c0       	push   0xc0029891
c001e4b9:	50                   	push   eax
c001e4ba:	e8 cb 9c fe ff       	call   c000818a <File::File(char const*, Process*)>
c001e4bf:	83 c4 10             	add    esp,0x10
c001e4c2:	85 db                	test   ebx,ebx
c001e4c4:	0f 84 67 02 00 00    	je     c001e731 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e4ca:	56                   	push   esi
c001e4cb:	56                   	push   esi
c001e4cc:	6a 01                	push   0x1
c001e4ce:	53                   	push   ebx
c001e4cf:	e8 d4 9c fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001e4d4:	83 c4 10             	add    esp,0x10
c001e4d7:	85 c0                	test   eax,eax
c001e4d9:	0f 85 52 02 00 00    	jne    c001e731 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e4df:	52                   	push   edx
c001e4e0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e4e4:	50                   	push   eax
c001e4e5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e4e9:	50                   	push   eax
c001e4ea:	53                   	push   ebx
c001e4eb:	e8 ba 9f fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001e4f0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e4f4:	40                   	inc    eax
c001e4f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4f8:	e8 66 13 ff ff       	call   c000f863 <malloc>
c001e4fd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e501:	a3 a8 3d 03 c0       	mov    ds:0xc0033da8,eax
c001e506:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e50a:	59                   	pop    ecx
c001e50b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e50d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e511:	51                   	push   ecx
c001e512:	50                   	push   eax
c001e513:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e517:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e51b:	53                   	push   ebx
c001e51c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e51f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e523:	83 c4 20             	add    esp,0x20
c001e526:	89 c8                	mov    eax,ecx
c001e528:	99                   	cdq    
c001e529:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e52d:	0f 85 fe 01 00 00    	jne    c001e731 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e533:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e537:	0f 85 f4 01 00 00    	jne    c001e731 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e53d:	83 ec 0c             	sub    esp,0xc
c001e540:	53                   	push   ebx
c001e541:	e8 c0 9c fe ff       	call   c0008206 <File::close()>
c001e546:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e54a:	c6 05 ac 3d 03 c0 01 	mov    BYTE PTR ds:0xc0033dac,0x1
c001e551:	a3 a4 3d 03 c0       	mov    ds:0xc0033da4,eax
c001e556:	83 c4 10             	add    esp,0x10
c001e559:	a1 a4 3d 03 c0       	mov    eax,ds:0xc0033da4
c001e55e:	8b 1d a8 3d 03 c0    	mov    ebx,DWORD PTR ds:0xc0033da8
c001e564:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e568:	31 f6                	xor    esi,esi
c001e56a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e572:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e579:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e57e:	31 c9                	xor    ecx,ecx
c001e580:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e588:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e58d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e595:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e599:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e5a1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e5a5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e5a9:	0f 8e 82 01 00 00    	jle    c001e731 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e5af:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001e5b2:	d4 40                	aam    0x40
c001e5b4:	d5 39                	aad    0x39
c001e5b6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e5ba:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001e5be:	d4 40                	aam    0x40
c001e5c0:	d5 39                	aad    0x39
c001e5c2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e5c6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001e5ca:	d4 40                	aam    0x40
c001e5cc:	d5 39                	aad    0x39
c001e5ce:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e5d2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001e5d6:	d4 40                	aam    0x40
c001e5d8:	d5 39                	aad    0x39
c001e5da:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e5de:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001e5e2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e5e6:	3c 56                	cmp    al,0x56
c001e5e8:	74 43                	je     c001e62d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001e5ea:	d4 40                	aam    0x40
c001e5ec:	d5 39                	aad    0x39
c001e5ee:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e5f1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001e5f5:	0f b6 c9             	movzx  ecx,cl
c001e5f8:	c1 e1 04             	shl    ecx,0x4
c001e5fb:	d4 40                	aam    0x40
c001e5fd:	d5 39                	aad    0x39
c001e5ff:	83 e8 30             	sub    eax,0x30
c001e602:	0f b6 c0             	movzx  eax,al
c001e605:	09 c1                	or     ecx,eax
c001e607:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001e60b:	c1 e1 04             	shl    ecx,0x4
c001e60e:	d4 40                	aam    0x40
c001e610:	d5 39                	aad    0x39
c001e612:	83 e8 30             	sub    eax,0x30
c001e615:	0f b6 c0             	movzx  eax,al
c001e618:	09 c1                	or     ecx,eax
c001e61a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001e61e:	c1 e1 04             	shl    ecx,0x4
c001e621:	d4 40                	aam    0x40
c001e623:	d5 39                	aad    0x39
c001e625:	83 e8 30             	sub    eax,0x30
c001e628:	0f b6 c0             	movzx  eax,al
c001e62b:	09 c1                	or     ecx,eax
c001e62d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001e631:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001e635:	3c 58                	cmp    al,0x58
c001e637:	74 47                	je     c001e680 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001e639:	d4 40                	aam    0x40
c001e63b:	d5 39                	aad    0x39
c001e63d:	8d 50 d0             	lea    edx,[eax-0x30]
c001e640:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001e644:	0f b6 d2             	movzx  edx,dl
c001e647:	c1 e2 04             	shl    edx,0x4
c001e64a:	d4 40                	aam    0x40
c001e64c:	d5 39                	aad    0x39
c001e64e:	83 e8 30             	sub    eax,0x30
c001e651:	0f b6 c0             	movzx  eax,al
c001e654:	09 c2                	or     edx,eax
c001e656:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001e65a:	c1 e2 04             	shl    edx,0x4
c001e65d:	d4 40                	aam    0x40
c001e65f:	d5 39                	aad    0x39
c001e661:	83 e8 30             	sub    eax,0x30
c001e664:	0f b6 c0             	movzx  eax,al
c001e667:	09 c2                	or     edx,eax
c001e669:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001e66d:	c1 e2 04             	shl    edx,0x4
c001e670:	d4 40                	aam    0x40
c001e672:	d5 39                	aad    0x39
c001e674:	83 e8 30             	sub    eax,0x30
c001e677:	0f b6 c0             	movzx  eax,al
c001e67a:	09 c2                	or     edx,eax
c001e67c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e680:	83 c6 10             	add    esi,0x10
c001e683:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e687:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001e68b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001e68f:	83 fa 0a             	cmp    edx,0xa
c001e692:	74 0b                	je     c001e69f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001e694:	47                   	inc    edi
c001e695:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e699:	75 19                	jne    c001e6b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001e69b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001e69f:	31 c0                	xor    eax,eax
c001e6a1:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001e6a6:	0f 94 c0             	sete   al
c001e6a9:	01 c6                	add    esi,eax
c001e6ab:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e6b0:	75 0b                	jne    c001e6bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001e6b2:	eb 14                	jmp    c001e6c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001e6b4:	46                   	inc    esi
c001e6b5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001e6b8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e6bb:	eb ca                	jmp    c001e687 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001e6bd:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001e6c2:	0f 85 dd fe ff ff    	jne    c001e5a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e6c8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001e6cd:	74 10                	je     c001e6df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001e6cf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e6d4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e6d9:	0f 85 c6 fe ff ff    	jne    c001e5a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e6df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e6e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e6e7:	83 e8 30             	sub    eax,0x30
c001e6ea:	83 ef 30             	sub    edi,0x30
c001e6ed:	c1 e0 04             	shl    eax,0x4
c001e6f0:	09 f8                	or     eax,edi
c001e6f2:	0f b6 c0             	movzx  eax,al
c001e6f5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e6f9:	0f 85 a6 fe ff ff    	jne    c001e5a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e6ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e703:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001e707:	83 e8 30             	sub    eax,0x30
c001e70a:	83 ef 30             	sub    edi,0x30
c001e70d:	c1 e0 04             	shl    eax,0x4
c001e710:	09 f8                	or     eax,edi
c001e712:	0f b6 c0             	movzx  eax,al
c001e715:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e719:	0f 85 86 fe ff ff    	jne    c001e5a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e71f:	50                   	push   eax
c001e720:	50                   	push   eax
c001e721:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e725:	50                   	push   eax
c001e726:	55                   	push   ebp
c001e727:	e8 14 1f fe ff       	call   c0000640 <strcpy>
c001e72c:	83 c4 10             	add    esp,0x10
c001e72f:	eb 06                	jmp    c001e737 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001e731:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001e735:	31 ed                	xor    ebp,ebp
c001e737:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e73d:	89 e8                	mov    eax,ebp
c001e73f:	5b                   	pop    ebx
c001e740:	5e                   	pop    esi
c001e741:	5f                   	pop    edi
c001e742:	5d                   	pop    ebp
c001e743:	c3                   	ret    

c001e744 <PCI::checkBus(unsigned char)>:
c001e744:	56                   	push   esi
c001e745:	53                   	push   ebx
c001e746:	31 db                	xor    ebx,ebx
c001e748:	51                   	push   ecx
c001e749:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e74e:	52                   	push   edx
c001e74f:	53                   	push   ebx
c001e750:	43                   	inc    ebx
c001e751:	56                   	push   esi
c001e752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e756:	e8 6f 03 00 00       	call   c001eaca <PCI::checkDevice(unsigned char, unsigned char)>
c001e75b:	83 c4 10             	add    esp,0x10
c001e75e:	83 fb 20             	cmp    ebx,0x20
c001e761:	75 eb                	jne    c001e74e <PCI::checkBus(unsigned char)+0xa>
c001e763:	58                   	pop    eax
c001e764:	5b                   	pop    ebx
c001e765:	5e                   	pop    esi
c001e766:	c3                   	ret    
c001e767:	90                   	nop

c001e768 <PCI::foundDevice(PCIDeviceInfo)>:
c001e768:	55                   	push   ebp
c001e769:	57                   	push   edi
c001e76a:	56                   	push   esi
c001e76b:	53                   	push   ebx
c001e76c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e772:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e77a:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001e781:	3d ff ff 00 00       	cmp    eax,0xffff
c001e786:	0f 84 b7 01 00 00    	je     c001e943 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e78c:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001e794:	66 81 fb 06 04       	cmp    bx,0x406
c001e799:	75 32                	jne    c001e7cd <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e79b:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e7a3:	50                   	push   eax
c001e7a4:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e7ac:	50                   	push   eax
c001e7ad:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e7b5:	50                   	push   eax
c001e7b6:	55                   	push   ebp
c001e7b7:	e8 4e fb ff ff       	call   c001e30a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e7bc:	59                   	pop    ecx
c001e7bd:	0f b6 c0             	movzx  eax,al
c001e7c0:	5b                   	pop    ebx
c001e7c1:	50                   	push   eax
c001e7c2:	55                   	push   ebp
c001e7c3:	e8 7c ff ff ff       	call   c001e744 <PCI::checkBus(unsigned char)>
c001e7c8:	e9 16 01 00 00       	jmp    c001e8e3 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001e7cd:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e7d4:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001e7da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001e7de:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001e7e5:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001e7ed:	85 c0                	test   eax,eax
c001e7ef:	74 36                	je     c001e827 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001e7f1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e7f4:	85 d2                	test   edx,edx
c001e7f6:	74 2b                	je     c001e823 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e7f8:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001e7fe:	31 f9                	xor    ecx,edi
c001e800:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001e806:	75 1b                	jne    c001e823 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e808:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e80c:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001e812:	75 0f                	jne    c001e823 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e814:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e81b:	39 f2                	cmp    edx,esi
c001e81d:	0f 84 20 01 00 00    	je     c001e943 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e823:	8b 00                	mov    eax,DWORD PTR [eax]
c001e825:	eb c6                	jmp    c001e7ed <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e827:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e82b:	be c4 98 02 c0       	mov    esi,0xc00298c4
c001e830:	b9 07 00 00 00       	mov    ecx,0x7
c001e835:	fc                   	cld    
c001e836:	31 d2                	xor    edx,edx
c001e838:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e83a:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e841:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e845:	b9 12 00 00 00       	mov    ecx,0x12
c001e84a:	83 ec 0c             	sub    esp,0xc
c001e84d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e84f:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e857:	b9 0a 00 00 00       	mov    ecx,0xa
c001e85c:	f7 f1                	div    ecx
c001e85e:	83 c0 30             	add    eax,0x30
c001e861:	83 c2 30             	add    edx,0x30
c001e864:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e868:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e86c:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e874:	31 d2                	xor    edx,edx
c001e876:	f7 f1                	div    ecx
c001e878:	83 c0 30             	add    eax,0x30
c001e87b:	83 c2 30             	add    edx,0x30
c001e87e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e882:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e886:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e88a:	50                   	push   eax
c001e88b:	e8 41 ea fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001e890:	83 c4 10             	add    esp,0x10
c001e893:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001e899:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e8a0:	75 46                	jne    c001e8e8 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001e8a2:	83 ec 0c             	sub    esp,0xc
c001e8a5:	68 64 01 00 00       	push   0x164
c001e8aa:	e8 b4 0f ff ff       	call   c000f863 <malloc>
c001e8af:	89 c3                	mov    ebx,eax
c001e8b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8b4:	e8 3b 11 00 00       	call   c001f9f4 <SATABus::SATABus()>
c001e8b9:	58                   	pop    eax
c001e8ba:	5a                   	pop    edx
c001e8bb:	53                   	push   ebx
c001e8bc:	55                   	push   ebp
c001e8bd:	e8 92 b1 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001e8c2:	83 ec 1c             	sub    esp,0x1c
c001e8c5:	b9 09 00 00 00       	mov    ecx,0x9
c001e8ca:	89 e7                	mov    edi,esp
c001e8cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e8ce:	53                   	push   ebx
c001e8cf:	e8 c6 b0 fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001e8d4:	83 c4 30             	add    esp,0x30
c001e8d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e8d9:	6a 00                	push   0x0
c001e8db:	6a 00                	push   0x0
c001e8dd:	6a 00                	push   0x0
c001e8df:	53                   	push   ebx
c001e8e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e8e3:	83 c4 10             	add    esp,0x10
c001e8e6:	eb 5b                	jmp    c001e943 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e8e8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001e8ee:	75 19                	jne    c001e909 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001e8f0:	83 ec 0c             	sub    esp,0xc
c001e8f3:	68 70 02 00 00       	push   0x270
c001e8f8:	e8 66 0f ff ff       	call   c000f863 <malloc>
c001e8fd:	89 c3                	mov    ebx,eax
c001e8ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001e902:	e8 93 02 00 00       	call   c001eb9a <IDE::IDE()>
c001e907:	eb b0                	jmp    c001e8b9 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001e909:	83 ec 0c             	sub    esp,0xc
c001e90c:	68 58 01 00 00       	push   0x158
c001e911:	e8 4d 0f ff ff       	call   c000f863 <malloc>
c001e916:	89 c3                	mov    ebx,eax
c001e918:	58                   	pop    eax
c001e919:	5a                   	pop    edx
c001e91a:	68 aa 98 02 c0       	push   0xc00298aa
c001e91f:	53                   	push   ebx
c001e920:	e8 e3 b3 fe ff       	call   c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>
c001e925:	59                   	pop    ecx
c001e926:	5f                   	pop    edi
c001e927:	53                   	push   ebx
c001e928:	55                   	push   ebp
c001e929:	e8 26 b1 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001e92e:	83 ec 1c             	sub    esp,0x1c
c001e931:	b9 09 00 00 00       	mov    ecx,0x9
c001e936:	89 e7                	mov    edi,esp
c001e938:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e93a:	53                   	push   ebx
c001e93b:	e8 5a b0 fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001e940:	83 c4 30             	add    esp,0x30
c001e943:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e949:	5b                   	pop    ebx
c001e94a:	5e                   	pop    esi
c001e94b:	5f                   	pop    edi
c001e94c:	5d                   	pop    ebp
c001e94d:	c3                   	ret    

c001e94e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e94e:	55                   	push   ebp
c001e94f:	57                   	push   edi
c001e950:	56                   	push   esi
c001e951:	53                   	push   ebx
c001e952:	83 ec 68             	sub    esp,0x68
c001e955:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e959:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e960:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e964:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e96b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e970:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e974:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e97b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e980:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e984:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e989:	6a 0c                	push   0xc
c001e98b:	57                   	push   edi
c001e98c:	53                   	push   ebx
c001e98d:	56                   	push   esi
c001e98e:	55                   	push   ebp
c001e98f:	e8 c6 f7 ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e994:	83 c4 20             	add    esp,0x20
c001e997:	57                   	push   edi
c001e998:	53                   	push   ebx
c001e999:	56                   	push   esi
c001e99a:	55                   	push   ebp
c001e99b:	e8 b0 f8 ff ff       	call   c001e250 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e9a0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e9a5:	57                   	push   edi
c001e9a6:	53                   	push   ebx
c001e9a7:	56                   	push   esi
c001e9a8:	55                   	push   ebp
c001e9a9:	e8 38 f9 ff ff       	call   c001e2e6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e9ae:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e9b2:	83 c4 14             	add    esp,0x14
c001e9b5:	6a 3c                	push   0x3c
c001e9b7:	57                   	push   edi
c001e9b8:	53                   	push   ebx
c001e9b9:	56                   	push   esi
c001e9ba:	55                   	push   ebp
c001e9bb:	e8 9a f7 ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e9c0:	0f b6 c4             	movzx  eax,ah
c001e9c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e9c7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e9cb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e9cf:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c001e9d4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001e9da:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e9e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e9e4:	83 c4 20             	add    esp,0x20
c001e9e7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e9ec:	74 30                	je     c001ea1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e9ee:	31 c0                	xor    eax,eax
c001e9f0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e9f4:	7e 28                	jle    c001ea1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e9f6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e9fe:	39 cb                	cmp    ebx,ecx
c001ea00:	75 19                	jne    c001ea1b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ea02:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001ea0a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001ea0e:	75 0b                	jne    c001ea1b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ea10:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001ea17:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001ea1b:	40                   	inc    eax
c001ea1c:	eb d2                	jmp    c001e9f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001ea1e:	31 d2                	xor    edx,edx
c001ea20:	83 ec 0c             	sub    esp,0xc
c001ea23:	57                   	push   edi
c001ea24:	53                   	push   ebx
c001ea25:	56                   	push   esi
c001ea26:	52                   	push   edx
c001ea27:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ea2b:	55                   	push   ebp
c001ea2c:	e8 01 f9 ff ff       	call   c001e332 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea31:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ea35:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ea39:	42                   	inc    edx
c001ea3a:	83 c4 20             	add    esp,0x20
c001ea3d:	83 fa 06             	cmp    edx,0x6
c001ea40:	75 de                	jne    c001ea20 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001ea42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ea46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea4a:	c1 e2 08             	shl    edx,0x8
c001ea4d:	83 ec 0c             	sub    esp,0xc
c001ea50:	0f b6 c4             	movzx  eax,ah
c001ea53:	09 d0                	or     eax,edx
c001ea55:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ea5a:	6a 02                	push   0x2
c001ea5c:	57                   	push   edi
c001ea5d:	53                   	push   ebx
c001ea5e:	56                   	push   esi
c001ea5f:	55                   	push   ebp
c001ea60:	e8 f5 f6 ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea65:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ea6a:	83 c4 20             	add    esp,0x20
c001ea6d:	57                   	push   edi
c001ea6e:	53                   	push   ebx
c001ea6f:	56                   	push   esi
c001ea70:	55                   	push   ebp
c001ea71:	e8 24 f8 ff ff       	call   c001e29a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ea76:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ea7a:	57                   	push   edi
c001ea7b:	53                   	push   ebx
c001ea7c:	56                   	push   esi
c001ea7d:	55                   	push   ebp
c001ea7e:	e8 81 f7 ff ff       	call   c001e204 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea83:	b9 09 00 00 00       	mov    ecx,0x9
c001ea88:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ea8d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ea91:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ea95:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ea99:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ea9d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001eaa1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001eaa5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001eaa9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001eaad:	83 ec 0c             	sub    esp,0xc
c001eab0:	fc                   	cld    
c001eab1:	89 e7                	mov    edi,esp
c001eab3:	8d 74 24 58          	lea    esi,[esp+0x58]
c001eab7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eab9:	55                   	push   ebp
c001eaba:	e8 a9 fc ff ff       	call   c001e768 <PCI::foundDevice(PCIDeviceInfo)>
c001eabf:	81 c4 8c 00 00 00    	add    esp,0x8c
c001eac5:	5b                   	pop    ebx
c001eac6:	5e                   	pop    esi
c001eac7:	5f                   	pop    edi
c001eac8:	5d                   	pop    ebp
c001eac9:	c3                   	ret    

c001eaca <PCI::checkDevice(unsigned char, unsigned char)>:
c001eaca:	55                   	push   ebp
c001eacb:	57                   	push   edi
c001eacc:	56                   	push   esi
c001eacd:	53                   	push   ebx
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ead5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001eada:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001eadf:	6a 00                	push   0x0
c001eae1:	56                   	push   esi
c001eae2:	57                   	push   edi
c001eae3:	55                   	push   ebp
c001eae4:	e8 1b f7 ff ff       	call   c001e204 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eae9:	6a 00                	push   0x0
c001eaeb:	56                   	push   esi
c001eaec:	57                   	push   edi
c001eaed:	55                   	push   ebp
c001eaee:	e8 5b fe ff ff       	call   c001e94e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001eaf3:	83 c4 20             	add    esp,0x20
c001eaf6:	6a 00                	push   0x0
c001eaf8:	56                   	push   esi
c001eaf9:	57                   	push   edi
c001eafa:	55                   	push   ebp
c001eafb:	e8 28 f7 ff ff       	call   c001e228 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001eb00:	83 c4 10             	add    esp,0x10
c001eb03:	a8 80                	test   al,0x80
c001eb05:	74 2d                	je     c001eb34 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001eb07:	bb 01 00 00 00       	mov    ebx,0x1
c001eb0c:	53                   	push   ebx
c001eb0d:	56                   	push   esi
c001eb0e:	57                   	push   edi
c001eb0f:	55                   	push   ebp
c001eb10:	e8 ef f6 ff ff       	call   c001e204 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eb15:	83 c4 10             	add    esp,0x10
c001eb18:	0f b7 c0             	movzx  eax,ax
c001eb1b:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb20:	74 0c                	je     c001eb2e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001eb22:	53                   	push   ebx
c001eb23:	56                   	push   esi
c001eb24:	57                   	push   edi
c001eb25:	55                   	push   ebp
c001eb26:	e8 23 fe ff ff       	call   c001e94e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001eb2b:	83 c4 10             	add    esp,0x10
c001eb2e:	43                   	inc    ebx
c001eb2f:	83 fb 08             	cmp    ebx,0x8
c001eb32:	75 d8                	jne    c001eb0c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001eb34:	83 c4 0c             	add    esp,0xc
c001eb37:	5b                   	pop    ebx
c001eb38:	5e                   	pop    esi
c001eb39:	5f                   	pop    edi
c001eb3a:	5d                   	pop    ebp
c001eb3b:	c3                   	ret    

c001eb3c <PCI::detect()>:
c001eb3c:	56                   	push   esi
c001eb3d:	53                   	push   ebx
c001eb3e:	53                   	push   ebx
c001eb3f:	31 db                	xor    ebx,ebx
c001eb41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb45:	6a 00                	push   0x0
c001eb47:	6a 00                	push   0x0
c001eb49:	6a 00                	push   0x0
c001eb4b:	56                   	push   esi
c001eb4c:	e8 d7 f6 ff ff       	call   c001e228 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001eb51:	83 c4 10             	add    esp,0x10
c001eb54:	a8 80                	test   al,0x80
c001eb56:	75 21                	jne    c001eb79 <PCI::detect()+0x3d>
c001eb58:	51                   	push   ecx
c001eb59:	51                   	push   ecx
c001eb5a:	6a 00                	push   0x0
c001eb5c:	56                   	push   esi
c001eb5d:	e8 e2 fb ff ff       	call   c001e744 <PCI::checkBus(unsigned char)>
c001eb62:	83 c4 10             	add    esp,0x10
c001eb65:	eb 2a                	jmp    c001eb91 <PCI::detect()+0x55>
c001eb67:	52                   	push   edx
c001eb68:	52                   	push   edx
c001eb69:	53                   	push   ebx
c001eb6a:	43                   	inc    ebx
c001eb6b:	56                   	push   esi
c001eb6c:	e8 d3 fb ff ff       	call   c001e744 <PCI::checkBus(unsigned char)>
c001eb71:	83 c4 10             	add    esp,0x10
c001eb74:	83 fb 08             	cmp    ebx,0x8
c001eb77:	74 18                	je     c001eb91 <PCI::detect()+0x55>
c001eb79:	53                   	push   ebx
c001eb7a:	6a 00                	push   0x0
c001eb7c:	6a 00                	push   0x0
c001eb7e:	56                   	push   esi
c001eb7f:	e8 80 f6 ff ff       	call   c001e204 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eb84:	83 c4 10             	add    esp,0x10
c001eb87:	0f b7 c0             	movzx  eax,ax
c001eb8a:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb8f:	74 d6                	je     c001eb67 <PCI::detect()+0x2b>
c001eb91:	58                   	pop    eax
c001eb92:	5b                   	pop    ebx
c001eb93:	5e                   	pop    esi
c001eb94:	c3                   	ret    
c001eb95:	90                   	nop

c001eb96 <IDE::close(int, int, void*)>:
c001eb96:	83 c8 ff             	or     eax,0xffffffff
c001eb99:	c3                   	ret    

c001eb9a <IDE::IDE()>:
c001eb9a:	83 ec 0c             	sub    esp,0xc
c001eb9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba1:	83 ec 08             	sub    esp,0x8
c001eba4:	68 54 99 02 c0       	push   0xc0029954
c001eba9:	50                   	push   eax
c001ebaa:	e8 fd b1 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001ebaf:	83 c4 10             	add    esp,0x10
c001ebb2:	ba 80 9a 02 c0       	mov    edx,0xc0029a80
c001ebb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbb:	89 10                	mov    DWORD PTR [eax],edx
c001ebbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ebc8:	90                   	nop
c001ebc9:	83 c4 0c             	add    esp,0xc
c001ebcc:	c3                   	ret    
c001ebcd:	90                   	nop

c001ebce <IDE::prepareInterrupt(unsigned char)>:
c001ebce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ebd3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ebd7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ebdf:	c3                   	ret    

c001ebe0 <selectDrive(unsigned char, unsigned char)>:
c001ebe0:	c3                   	ret    
c001ebe1:	90                   	nop

c001ebe2 <IDE::getBase(unsigned char)>:
c001ebe2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ebe7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebeb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ebf3:	c3                   	ret    

c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ebf4:	55                   	push   ebp
c001ebf5:	57                   	push   edi
c001ebf6:	56                   	push   esi
c001ebf7:	53                   	push   ebx
c001ebf8:	83 ec 1c             	sub    esp,0x1c
c001ebfb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ebff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ec03:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ec06:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ec0a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ec0e:	80 f9 03             	cmp    cl,0x3
c001ec11:	77 4f                	ja     c001ec62 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ec13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec17:	0f b6 fa             	movzx  edi,dl
c001ec1a:	0f b6 db             	movzx  ebx,bl
c001ec1d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ec20:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ec25:	80 ca 80             	or     dl,0x80
c001ec28:	52                   	push   edx
c001ec29:	6a 0c                	push   0xc
c001ec2b:	57                   	push   edi
c001ec2c:	56                   	push   esi
c001ec2d:	e8 c2 ff ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec32:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ec37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec3b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ec3f:	ee                   	out    dx,al
c001ec40:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ec45:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001ec49:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ec4d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ec51:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ec59:	83 c4 2c             	add    esp,0x2c
c001ec5c:	5b                   	pop    ebx
c001ec5d:	5e                   	pop    esi
c001ec5e:	5f                   	pop    edi
c001ec5f:	5d                   	pop    ebp
c001ec60:	eb 92                	jmp    c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec62:	0f b6 cb             	movzx  ecx,bl
c001ec65:	83 f9 07             	cmp    ecx,0x7
c001ec68:	77 12                	ja     c001ec7c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ec6a:	0f b6 d2             	movzx  edx,dl
c001ec6d:	0f b6 db             	movzx  ebx,bl
c001ec70:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ec78:	01 da                	add    edx,ebx
c001ec7a:	eb 2f                	jmp    c001ecab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ec7c:	83 f9 0d             	cmp    ecx,0xd
c001ec7f:	77 13                	ja     c001ec94 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ec81:	0f b6 d2             	movzx  edx,dl
c001ec84:	0f b6 db             	movzx  ebx,bl
c001ec87:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ec8e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ec92:	eb 17                	jmp    c001ecab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ec94:	83 f9 15             	cmp    ecx,0x15
c001ec97:	77 13                	ja     c001ecac <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ec99:	0f b6 d2             	movzx  edx,dl
c001ec9c:	0f b6 db             	movzx  ebx,bl
c001ec9f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001eca7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ecab:	ee                   	out    dx,al
c001ecac:	83 c4 1c             	add    esp,0x1c
c001ecaf:	5b                   	pop    ebx
c001ecb0:	5e                   	pop    esi
c001ecb1:	5f                   	pop    edi
c001ecb2:	5d                   	pop    ebp
c001ecb3:	c3                   	ret    

c001ecb4 <IDE::read(unsigned char, unsigned char)>:
c001ecb4:	55                   	push   ebp
c001ecb5:	57                   	push   edi
c001ecb6:	56                   	push   esi
c001ecb7:	53                   	push   ebx
c001ecb8:	83 ec 1c             	sub    esp,0x1c
c001ecbb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ecbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ecc3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ecc6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ecca:	3c 03                	cmp    al,0x3
c001eccc:	77 40                	ja     c001ed0e <IDE::read(unsigned char, unsigned char)+0x5a>
c001ecce:	0f b6 f9             	movzx  edi,cl
c001ecd1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ecd4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ecd9:	0c 80                	or     al,0x80
c001ecdb:	50                   	push   eax
c001ecdc:	6a 0c                	push   0xc
c001ecde:	57                   	push   edi
c001ecdf:	56                   	push   esi
c001ece0:	e8 0f ff ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ece5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ecea:	0f b6 d3             	movzx  edx,bl
c001eced:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ecf1:	ec                   	in     al,dx
c001ecf2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ecf6:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ecfb:	52                   	push   edx
c001ecfc:	6a 0c                	push   0xc
c001ecfe:	57                   	push   edi
c001ecff:	56                   	push   esi
c001ed00:	e8 ef fe ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed05:	83 c4 20             	add    esp,0x20
c001ed08:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ed0c:	eb 4c                	jmp    c001ed5a <IDE::read(unsigned char, unsigned char)+0xa6>
c001ed0e:	0f b6 d3             	movzx  edx,bl
c001ed11:	83 fa 07             	cmp    edx,0x7
c001ed14:	77 12                	ja     c001ed28 <IDE::read(unsigned char, unsigned char)+0x74>
c001ed16:	0f b6 c9             	movzx  ecx,cl
c001ed19:	0f b6 d3             	movzx  edx,bl
c001ed1c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ed24:	01 c2                	add    edx,eax
c001ed26:	eb 31                	jmp    c001ed59 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ed28:	83 fa 0d             	cmp    edx,0xd
c001ed2b:	77 13                	ja     c001ed40 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ed2d:	0f b6 c9             	movzx  ecx,cl
c001ed30:	0f b6 d3             	movzx  edx,bl
c001ed33:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ed3a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ed3e:	eb 19                	jmp    c001ed59 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ed40:	31 c0                	xor    eax,eax
c001ed42:	83 fa 15             	cmp    edx,0x15
c001ed45:	77 13                	ja     c001ed5a <IDE::read(unsigned char, unsigned char)+0xa6>
c001ed47:	0f b6 c9             	movzx  ecx,cl
c001ed4a:	0f b6 d3             	movzx  edx,bl
c001ed4d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ed55:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ed59:	ec                   	in     al,dx
c001ed5a:	83 c4 1c             	add    esp,0x1c
c001ed5d:	5b                   	pop    ebx
c001ed5e:	5e                   	pop    esi
c001ed5f:	5f                   	pop    edi
c001ed60:	5d                   	pop    ebp
c001ed61:	c3                   	ret    

c001ed62 <IDE::waitInterrupt(unsigned char)>:
c001ed62:	55                   	push   ebp
c001ed63:	57                   	push   edi
c001ed64:	56                   	push   esi
c001ed65:	53                   	push   ebx
c001ed66:	31 db                	xor    ebx,ebx
c001ed68:	83 ec 0c             	sub    esp,0xc
c001ed6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ed6f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ed74:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ed7c:	89 e8                	mov    eax,ebp
c001ed7e:	84 c0                	test   al,al
c001ed80:	75 31                	jne    c001edb3 <IDE::waitInterrupt(unsigned char)+0x51>
c001ed82:	52                   	push   edx
c001ed83:	6a 0c                	push   0xc
c001ed85:	56                   	push   esi
c001ed86:	57                   	push   edi
c001ed87:	e8 28 ff ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001ed8c:	83 c4 10             	add    esp,0x10
c001ed8f:	a8 01                	test   al,0x1
c001ed91:	75 28                	jne    c001edbb <IDE::waitInterrupt(unsigned char)+0x59>
c001ed93:	f6 c3 04             	test   bl,0x4
c001ed96:	75 13                	jne    c001edab <IDE::waitInterrupt(unsigned char)+0x49>
c001ed98:	83 fb 32             	cmp    ebx,0x32
c001ed9b:	7e 0e                	jle    c001edab <IDE::waitInterrupt(unsigned char)+0x49>
c001ed9d:	50                   	push   eax
c001ed9e:	50                   	push   eax
c001ed9f:	6a 00                	push   0x0
c001eda1:	6a 64                	push   0x64
c001eda3:	e8 8c 7c ff ff       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c001eda8:	83 c4 10             	add    esp,0x10
c001edab:	83 fb 3c             	cmp    ebx,0x3c
c001edae:	74 0b                	je     c001edbb <IDE::waitInterrupt(unsigned char)+0x59>
c001edb0:	43                   	inc    ebx
c001edb1:	eb c1                	jmp    c001ed74 <IDE::waitInterrupt(unsigned char)+0x12>
c001edb3:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001edbb:	83 c4 0c             	add    esp,0xc
c001edbe:	89 e8                	mov    eax,ebp
c001edc0:	5b                   	pop    ebx
c001edc1:	5e                   	pop    esi
c001edc2:	5f                   	pop    edi
c001edc3:	5d                   	pop    ebp
c001edc4:	c3                   	ret    

c001edc5 <ideChannel0IRQHandler(regs*, void*)>:
c001edc5:	83 ec 10             	sub    esp,0x10
c001edc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001edcc:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001edd3:	6a 07                	push   0x7
c001edd5:	6a 00                	push   0x0
c001edd7:	50                   	push   eax
c001edd8:	e8 d7 fe ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001eddd:	83 c4 1c             	add    esp,0x1c
c001ede0:	c3                   	ret    

c001ede1 <ideChannel1IRQHandler(regs*, void*)>:
c001ede1:	83 ec 10             	sub    esp,0x10
c001ede4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ede8:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001edef:	6a 07                	push   0x7
c001edf1:	6a 01                	push   0x1
c001edf3:	50                   	push   eax
c001edf4:	e8 bb fe ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001edf9:	83 c4 1c             	add    esp,0x1c
c001edfc:	c3                   	ret    
c001edfd:	90                   	nop

c001edfe <IDE::enableIRQs(unsigned char, bool)>:
c001edfe:	57                   	push   edi
c001edff:	b8 02 00 00 00       	mov    eax,0x2
c001ee04:	56                   	push   esi
c001ee05:	53                   	push   ebx
c001ee06:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee0a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ee0e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ee13:	74 02                	je     c001ee17 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ee15:	31 c0                	xor    eax,eax
c001ee17:	0f b6 db             	movzx  ebx,bl
c001ee1a:	bf 04 00 00 00       	mov    edi,0x4
c001ee1f:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ee26:	50                   	push   eax
c001ee27:	6a 0c                	push   0xc
c001ee29:	53                   	push   ebx
c001ee2a:	56                   	push   esi
c001ee2b:	e8 c4 fd ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee30:	83 c4 10             	add    esp,0x10
c001ee33:	50                   	push   eax
c001ee34:	6a 0c                	push   0xc
c001ee36:	53                   	push   ebx
c001ee37:	56                   	push   esi
c001ee38:	e8 77 fe ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001ee3d:	83 c4 10             	add    esp,0x10
c001ee40:	4f                   	dec    edi
c001ee41:	75 f0                	jne    c001ee33 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ee43:	5b                   	pop    ebx
c001ee44:	5e                   	pop    esi
c001ee45:	5f                   	pop    edi
c001ee46:	c3                   	ret    
c001ee47:	90                   	nop

c001ee48 <IDE::open(int, int, void*)>:
c001ee48:	57                   	push   edi
c001ee49:	56                   	push   esi
c001ee4a:	53                   	push   ebx
c001ee4b:	83 ec 10             	sub    esp,0x10
c001ee4e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ee52:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ee5b:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ee64:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ee6b:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ee72:	0f 85 84 02 00 00    	jne    c001f0fc <IDE::open(int, int, void*)+0x2b4>
c001ee78:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ee7e:	a8 70                	test   al,0x70
c001ee80:	75 44                	jne    c001eec6 <IDE::open(int, int, void*)+0x7e>
c001ee82:	ba 20 84 00 00       	mov    edx,0x8420
c001ee87:	0f a3 c2             	bt     edx,eax
c001ee8a:	73 3a                	jae    c001eec6 <IDE::open(int, int, void*)+0x7e>
c001ee8c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ee92:	83 ec 0c             	sub    esp,0xc
c001ee95:	83 e0 fc             	and    eax,0xfffffffc
c001ee98:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ee9f:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001eea5:	83 e0 fc             	and    eax,0xfffffffc
c001eea8:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001eeaf:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001eeb5:	83 e0 fc             	and    eax,0xfffffffc
c001eeb8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eebf:	68 2d 70 02 c0       	push   0xc002702d
c001eec4:	eb 60                	jmp    c001ef26 <IDE::open(int, int, void*)+0xde>
c001eec6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001eed0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001eeda:	be 64 00 00 00       	mov    esi,0x64
c001eedf:	57                   	push   edi
c001eee0:	57                   	push   edi
c001eee1:	68 6c 99 02 c0       	push   0xc002996c
c001eee6:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001eeea:	57                   	push   edi
c001eeeb:	e8 50 17 fe ff       	call   c0000640 <strcpy>
c001eef0:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001eef7:	31 d2                	xor    edx,edx
c001eef9:	89 c8                	mov    eax,ecx
c001eefb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001eefe:	f7 f6                	div    esi
c001ef00:	be 0a 00 00 00       	mov    esi,0xa
c001ef05:	83 c0 30             	add    eax,0x30
c001ef08:	31 d2                	xor    edx,edx
c001ef0a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ef0e:	89 c8                	mov    eax,ecx
c001ef10:	f7 f6                	div    esi
c001ef12:	89 d1                	mov    ecx,edx
c001ef14:	31 d2                	xor    edx,edx
c001ef16:	83 c1 30             	add    ecx,0x30
c001ef19:	f7 f6                	div    esi
c001ef1b:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001ef1f:	83 c2 30             	add    edx,0x30
c001ef22:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001ef26:	e8 a6 e3 fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001ef2b:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ef30:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ef37:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ef3e:	c1 e1 10             	shl    ecx,0x10
c001ef41:	c1 e0 0b             	shl    eax,0xb
c001ef44:	83 c4 10             	add    esp,0x10
c001ef47:	09 c1                	or     ecx,eax
c001ef49:	89 fa                	mov    edx,edi
c001ef4b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ef52:	c1 e0 08             	shl    eax,0x8
c001ef55:	09 c1                	or     ecx,eax
c001ef57:	89 c8                	mov    eax,ecx
c001ef59:	0d 08 00 00 80       	or     eax,0x80000008
c001ef5e:	ef                   	out    dx,eax
c001ef5f:	be fc 0c 00 00       	mov    esi,0xcfc
c001ef64:	89 f2                	mov    edx,esi
c001ef66:	ed                   	in     eax,dx
c001ef67:	c1 e8 10             	shr    eax,0x10
c001ef6a:	3d ff ff 00 00       	cmp    eax,0xffff
c001ef6f:	0f 84 e5 00 00 00    	je     c001f05a <IDE::open(int, int, void*)+0x212>
c001ef75:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ef7b:	89 fa                	mov    edx,edi
c001ef7d:	89 c8                	mov    eax,ecx
c001ef7f:	ef                   	out    dx,eax
c001ef80:	b0 fe                	mov    al,0xfe
c001ef82:	89 f2                	mov    edx,esi
c001ef84:	ee                   	out    dx,al
c001ef85:	89 c8                	mov    eax,ecx
c001ef87:	89 fa                	mov    edx,edi
c001ef89:	ef                   	out    dx,eax
c001ef8a:	89 f2                	mov    edx,esi
c001ef8c:	ed                   	in     eax,dx
c001ef8d:	3c fe                	cmp    al,0xfe
c001ef8f:	0f 85 85 00 00 00    	jne    c001f01a <IDE::open(int, int, void*)+0x1d2>
c001ef95:	83 ec 0c             	sub    esp,0xc
c001ef98:	68 63 70 02 c0       	push   0xc0027063
c001ef9d:	e8 2f e3 fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001efa2:	c7 04 24 72 99 02 c0 	mov    DWORD PTR [esp],0xc0029972
c001efa9:	e8 ce 7f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001efae:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001efb8:	c7 04 24 48 73 02 c0 	mov    DWORD PTR [esp],0xc0027348
c001efbf:	e8 0d e3 fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001efc4:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001efcb:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001efd2:	c1 e1 10             	shl    ecx,0x10
c001efd5:	c1 e0 08             	shl    eax,0x8
c001efd8:	89 fa                	mov    edx,edi
c001efda:	09 c1                	or     ecx,eax
c001efdc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001efe3:	c1 e0 0b             	shl    eax,0xb
c001efe6:	09 c1                	or     ecx,eax
c001efe8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001efee:	89 c8                	mov    eax,ecx
c001eff0:	ef                   	out    dx,eax
c001eff1:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001eff7:	89 f2                	mov    edx,esi
c001eff9:	ee                   	out    dx,al
c001effa:	89 c8                	mov    eax,ecx
c001effc:	89 fa                	mov    edx,edi
c001effe:	ef                   	out    dx,eax
c001efff:	89 f2                	mov    edx,esi
c001f001:	ed                   	in     eax,dx
c001f002:	0f b6 c0             	movzx  eax,al
c001f005:	83 c4 10             	add    esp,0x10
c001f008:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001f00e:	74 5a                	je     c001f06a <IDE::open(int, int, void*)+0x222>
c001f010:	83 ec 0c             	sub    esp,0xc
c001f013:	68 87 99 02 c0       	push   0xc0029987
c001f018:	eb 48                	jmp    c001f062 <IDE::open(int, int, void*)+0x21a>
c001f01a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001f023:	75 2b                	jne    c001f050 <IDE::open(int, int, void*)+0x208>
c001f025:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001f02c:	3d 80 00 00 00       	cmp    eax,0x80
c001f031:	74 07                	je     c001f03a <IDE::open(int, int, void*)+0x1f2>
c001f033:	3d 8a 00 00 00       	cmp    eax,0x8a
c001f038:	75 16                	jne    c001f050 <IDE::open(int, int, void*)+0x208>
c001f03a:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f041:	83 ec 0c             	sub    esp,0xc
c001f044:	68 1e 6b 02 c0       	push   0xc0026b1e
c001f049:	e8 83 e2 fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f04e:	eb 17                	jmp    c001f067 <IDE::open(int, int, void*)+0x21f>
c001f050:	83 ec 0c             	sub    esp,0xc
c001f053:	68 8f 99 02 c0       	push   0xc002998f
c001f058:	eb 08                	jmp    c001f062 <IDE::open(int, int, void*)+0x21a>
c001f05a:	83 ec 0c             	sub    esp,0xc
c001f05d:	68 c0 99 02 c0       	push   0xc00299c0
c001f062:	e8 51 0c ff ff       	call   c000fcb8 <KePanic(char const*)>
c001f067:	83 c4 10             	add    esp,0x10
c001f06a:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001f071:	0f 84 bf 00 00 00    	je     c001f136 <IDE::open(int, int, void*)+0x2ee>
c001f077:	83 ec 0c             	sub    esp,0xc
c001f07a:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f080:	83 e0 fc             	and    eax,0xfffffffc
c001f083:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f08a:	83 c0 08             	add    eax,0x8
c001f08d:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f094:	68 ea 99 02 c0       	push   0xc00299ea
c001f099:	e8 de 7e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f09e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f0a5:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f0ac:	50                   	push   eax
c001f0ad:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f0b4:	50                   	push   eax
c001f0b5:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f0bc:	50                   	push   eax
c001f0bd:	ff 35 a0 3d 03 c0    	push   DWORD PTR ds:0xc0033da0
c001f0c3:	e8 92 f0 ff ff       	call   c001e15a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f0c8:	83 c4 18             	add    esp,0x18
c001f0cb:	83 c8 07             	or     eax,0x7
c001f0ce:	0f b7 c0             	movzx  eax,ax
c001f0d1:	50                   	push   eax
c001f0d2:	6a 04                	push   0x4
c001f0d4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f0db:	50                   	push   eax
c001f0dc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f0e3:	50                   	push   eax
c001f0e4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f0eb:	50                   	push   eax
c001f0ec:	ff 35 a0 3d 03 c0    	push   DWORD PTR ds:0xc0033da0
c001f0f2:	e8 9f f2 ff ff       	call   c001e396 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001f0f7:	83 c4 20             	add    esp,0x20
c001f0fa:	eb 3a                	jmp    c001f136 <IDE::open(int, int, void*)+0x2ee>
c001f0fc:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f102:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f109:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f110:	05 06 02 00 00       	add    eax,0x206
c001f115:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f11c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f123:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f12a:	05 06 02 00 00       	add    eax,0x206
c001f12f:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f136:	83 ec 0c             	sub    esp,0xc
c001f139:	68 00 79 02 c0       	push   0xc0027900
c001f13e:	e8 8e e1 fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f143:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f149:	83 c4 10             	add    esp,0x10
c001f14c:	89 c2                	mov    edx,eax
c001f14e:	83 e2 0f             	and    edx,0xf
c001f151:	83 fa 08             	cmp    edx,0x8
c001f154:	75 0a                	jne    c001f160 <IDE::open(int, int, void*)+0x318>
c001f156:	83 e8 02             	sub    eax,0x2
c001f159:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f160:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f166:	89 c2                	mov    edx,eax
c001f168:	83 e2 0f             	and    edx,0xf
c001f16b:	83 fa 08             	cmp    edx,0x8
c001f16e:	75 0a                	jne    c001f17a <IDE::open(int, int, void*)+0x332>
c001f170:	83 e8 02             	sub    eax,0x2
c001f173:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f17a:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f181:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f188:	89 d0                	mov    eax,edx
c001f18a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f18d:	8d 7a 01             	lea    edi,[edx+0x1]
c001f190:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f194:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f198:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f19c:	83 e1 3f             	and    ecx,0x3f
c001f19f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f1a3:	89 f9                	mov    ecx,edi
c001f1a5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f1ac:	0f b6 c9             	movzx  ecx,cl
c001f1af:	8d 78 02             	lea    edi,[eax+0x2]
c001f1b2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f1b5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f1b9:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f1bd:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f1c1:	83 e2 3f             	and    edx,0x3f
c001f1c4:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f1c8:	89 f9                	mov    ecx,edi
c001f1ca:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f1d0:	0f b6 d1             	movzx  edx,cl
c001f1d3:	8d 78 03             	lea    edi,[eax+0x3]
c001f1d6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f1d9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f1dd:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f1e1:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f1e5:	83 e1 3f             	and    ecx,0x3f
c001f1e8:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f1ec:	89 fa                	mov    edx,edi
c001f1ee:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f1f4:	0f b6 ca             	movzx  ecx,dl
c001f1f7:	8d 78 04             	lea    edi,[eax+0x4]
c001f1fa:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f1fd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f201:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f205:	89 fa                	mov    edx,edi
c001f207:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f20d:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f211:	83 e2 3f             	and    edx,0x3f
c001f214:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f218:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f21f:	66 85 f6             	test   si,si
c001f222:	74 24                	je     c001f248 <IDE::open(int, int, void*)+0x400>
c001f224:	89 f9                	mov    ecx,edi
c001f226:	83 c0 05             	add    eax,0x5
c001f229:	0f b6 d1             	movzx  edx,cl
c001f22c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f22f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f233:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f237:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f23d:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001f241:	83 e0 3f             	and    eax,0x3f
c001f244:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001f248:	83 ec 0c             	sub    esp,0xc
c001f24b:	68 02 9a 02 c0       	push   0xc0029a02
c001f250:	e8 7c e0 fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f255:	58                   	pop    eax
c001f256:	5a                   	pop    edx
c001f257:	6a 00                	push   0x0
c001f259:	53                   	push   ebx
c001f25a:	e8 6f f9 ff ff       	call   c001ebce <IDE::prepareInterrupt(unsigned char)>
c001f25f:	59                   	pop    ecx
c001f260:	5e                   	pop    esi
c001f261:	6a 01                	push   0x1
c001f263:	53                   	push   ebx
c001f264:	e8 65 f9 ff ff       	call   c001ebce <IDE::prepareInterrupt(unsigned char)>
c001f269:	c7 04 24 84 92 02 c0 	mov    DWORD PTR [esp],0xc0029284
c001f270:	e8 5c e0 fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f275:	83 c4 0c             	add    esp,0xc
c001f278:	6a 00                	push   0x0
c001f27a:	6a 00                	push   0x0
c001f27c:	53                   	push   ebx
c001f27d:	e8 7c fb ff ff       	call   c001edfe <IDE::enableIRQs(unsigned char, bool)>
c001f282:	83 c4 0c             	add    esp,0xc
c001f285:	6a 00                	push   0x0
c001f287:	6a 01                	push   0x1
c001f289:	53                   	push   ebx
c001f28a:	e8 6f fb ff ff       	call   c001edfe <IDE::enableIRQs(unsigned char, bool)>
c001f28f:	c7 04 24 04 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a04
c001f296:	e8 36 e0 fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f29b:	83 c4 10             	add    esp,0x10
c001f29e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f2a5:	74 3c                	je     c001f2e3 <IDE::open(int, int, void*)+0x49b>
c001f2a7:	83 ec 0c             	sub    esp,0xc
c001f2aa:	53                   	push   ebx
c001f2ab:	6a 01                	push   0x1
c001f2ad:	68 c5 ed 01 c0       	push   0xc001edc5
c001f2b2:	6a 0e                	push   0xe
c001f2b4:	53                   	push   ebx
c001f2b5:	e8 46 a7 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f2ba:	83 c4 14             	add    esp,0x14
c001f2bd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f2c3:	53                   	push   ebx
c001f2c4:	6a 01                	push   0x1
c001f2c6:	68 e1 ed 01 c0       	push   0xc001ede1
c001f2cb:	6a 0f                	push   0xf
c001f2cd:	53                   	push   ebx
c001f2ce:	e8 2d a7 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f2d3:	83 c4 14             	add    esp,0x14
c001f2d6:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f2dc:	68 4e 75 02 c0       	push   0xc002754e
c001f2e1:	eb 40                	jmp    c001f323 <IDE::open(int, int, void*)+0x4db>
c001f2e3:	83 ec 0c             	sub    esp,0xc
c001f2e6:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f2f0:	53                   	push   ebx
c001f2f1:	6a 00                	push   0x0
c001f2f3:	68 c5 ed 01 c0       	push   0xc001edc5
c001f2f8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f2fe:	53                   	push   ebx
c001f2ff:	e8 fc a6 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f304:	83 c4 14             	add    esp,0x14
c001f307:	53                   	push   ebx
c001f308:	6a 00                	push   0x0
c001f30a:	68 e1 ed 01 c0       	push   0xc001ede1
c001f30f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f315:	53                   	push   ebx
c001f316:	e8 e5 a6 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f31b:	83 c4 14             	add    esp,0x14
c001f31e:	68 92 82 02 c0       	push   0xc0028292
c001f323:	e8 a9 df fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f328:	83 c4 10             	add    esp,0x10
c001f32b:	83 ec 0c             	sub    esp,0xc
c001f32e:	68 06 9a 02 c0       	push   0xc0029a06
c001f333:	e8 99 df fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f338:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f33d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f340:	c7 04 24 05 87 02 c0 	mov    DWORD PTR [esp],0xc0028705
c001f347:	e8 85 df fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f34c:	83 c4 0c             	add    esp,0xc
c001f34f:	6a 07                	push   0x7
c001f351:	6a 00                	push   0x0
c001f353:	53                   	push   ebx
c001f354:	e8 5b f9 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f359:	83 c4 0c             	add    esp,0xc
c001f35c:	6a 07                	push   0x7
c001f35e:	6a 01                	push   0x1
c001f360:	53                   	push   ebx
c001f361:	e8 4e f9 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f366:	c7 04 24 9c 7f 02 c0 	mov    DWORD PTR [esp],0xc0027f9c
c001f36d:	e8 5f df fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f372:	83 c4 0c             	add    esp,0xc
c001f375:	6a 01                	push   0x1
c001f377:	6a 00                	push   0x0
c001f379:	53                   	push   ebx
c001f37a:	e8 7f fa ff ff       	call   c001edfe <IDE::enableIRQs(unsigned char, bool)>
c001f37f:	83 c4 0c             	add    esp,0xc
c001f382:	6a 01                	push   0x1
c001f384:	6a 01                	push   0x1
c001f386:	53                   	push   ebx
c001f387:	e8 72 fa ff ff       	call   c001edfe <IDE::enableIRQs(unsigned char, bool)>
c001f38c:	c7 04 24 09 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a09
c001f393:	e8 39 df fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f398:	83 c4 20             	add    esp,0x20
c001f39b:	31 c0                	xor    eax,eax
c001f39d:	5b                   	pop    ebx
c001f39e:	5e                   	pop    esi
c001f39f:	5f                   	pop    edi
c001f3a0:	c3                   	ret    
c001f3a1:	90                   	nop

c001f3a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f3a2:	55                   	push   ebp
c001f3a3:	57                   	push   edi
c001f3a4:	56                   	push   esi
c001f3a5:	53                   	push   ebx
c001f3a6:	83 ec 1c             	sub    esp,0x1c
c001f3a9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f3ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f3b1:	8d 42 f8             	lea    eax,[edx-0x8]
c001f3b4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f3b8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f3bc:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f3c0:	3c 03                	cmp    al,0x3
c001f3c2:	77 5a                	ja     c001f41e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001f3c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f3c8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f3cc:	0f b6 db             	movzx  ebx,bl
c001f3cf:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f3d2:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f3d7:	0c 80                	or     al,0x80
c001f3d9:	50                   	push   eax
c001f3da:	6a 0c                	push   0xc
c001f3dc:	53                   	push   ebx
c001f3dd:	56                   	push   esi
c001f3de:	e8 11 f8 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3e3:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f3e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f3ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f3f0:	0f b6 d2             	movzx  edx,dl
c001f3f3:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f3f7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f3f9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f3fe:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f402:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f406:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f40a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f412:	83 c4 2c             	add    esp,0x2c
c001f415:	5b                   	pop    ebx
c001f416:	5e                   	pop    esi
c001f417:	5f                   	pop    edi
c001f418:	5d                   	pop    ebp
c001f419:	e9 d6 f7 ff ff       	jmp    c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f41e:	0f b6 c2             	movzx  eax,dl
c001f421:	83 f8 07             	cmp    eax,0x7
c001f424:	77 12                	ja     c001f438 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001f426:	0f b6 c2             	movzx  eax,dl
c001f429:	0f b6 db             	movzx  ebx,bl
c001f42c:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001f434:	01 c2                	add    edx,eax
c001f436:	eb 2f                	jmp    c001f467 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f438:	83 f8 0d             	cmp    eax,0xd
c001f43b:	77 13                	ja     c001f450 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001f43d:	0f b6 db             	movzx  ebx,bl
c001f440:	0f b6 d2             	movzx  edx,dl
c001f443:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001f44a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f44e:	eb 17                	jmp    c001f467 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f450:	83 f8 15             	cmp    eax,0x15
c001f453:	77 14                	ja     c001f469 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001f455:	0f b6 db             	movzx  ebx,bl
c001f458:	0f b6 d2             	movzx  edx,dl
c001f45b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001f463:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f467:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f469:	83 c4 1c             	add    esp,0x1c
c001f46c:	5b                   	pop    ebx
c001f46d:	5e                   	pop    esi
c001f46e:	5f                   	pop    edi
c001f46f:	5d                   	pop    ebp
c001f470:	c3                   	ret    
c001f471:	90                   	nop

c001f472 <IDE::detect()>:
c001f472:	55                   	push   ebp
c001f473:	57                   	push   edi
c001f474:	56                   	push   esi
c001f475:	53                   	push   ebx
c001f476:	81 ec 28 02 00 00    	sub    esp,0x228
c001f47c:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f483:	68 0b 9a 02 c0       	push   0xc0029a0b
c001f488:	e8 44 de fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f48d:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f493:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f497:	83 c4 10             	add    esp,0x10
c001f49a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f49f:	0f 85 2f 04 00 00    	jne    c001f8d4 <IDE::detect()+0x462>
c001f4a5:	83 ec 0c             	sub    esp,0xc
c001f4a8:	31 f6                	xor    esi,esi
c001f4aa:	68 0e 9a 02 c0       	push   0xc0029a0e
c001f4af:	31 ff                	xor    edi,edi
c001f4b1:	e8 1b de fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f4b6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f4bd:	83 c4 10             	add    esp,0x10
c001f4c0:	83 ec 0c             	sub    esp,0xc
c001f4c3:	68 11 9a 02 c0       	push   0xc0029a11
c001f4c8:	e8 04 de fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f4cd:	83 c4 10             	add    esp,0x10
c001f4d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4d7:	83 ec 0c             	sub    esp,0xc
c001f4da:	31 ed                	xor    ebp,ebp
c001f4dc:	68 14 9a 02 c0       	push   0xc0029a14
c001f4e1:	e8 eb dd fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f4e6:	89 f8                	mov    eax,edi
c001f4e8:	c1 e0 06             	shl    eax,0x6
c001f4eb:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f4f3:	c7 04 24 17 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a17
c001f4fa:	e8 d2 dd fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f4ff:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f503:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f50b:	c1 e0 04             	shl    eax,0x4
c001f50e:	83 c8 a0             	or     eax,0xffffffa0
c001f511:	0f b6 c0             	movzx  eax,al
c001f514:	50                   	push   eax
c001f515:	6a 06                	push   0x6
c001f517:	56                   	push   esi
c001f518:	53                   	push   ebx
c001f519:	e8 d6 f6 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f51e:	83 c4 1c             	add    esp,0x1c
c001f521:	6a 0c                	push   0xc
c001f523:	56                   	push   esi
c001f524:	53                   	push   ebx
c001f525:	e8 8a f7 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f52a:	83 c4 0c             	add    esp,0xc
c001f52d:	6a 0c                	push   0xc
c001f52f:	56                   	push   esi
c001f530:	53                   	push   ebx
c001f531:	e8 7e f7 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f536:	83 c4 0c             	add    esp,0xc
c001f539:	6a 0c                	push   0xc
c001f53b:	56                   	push   esi
c001f53c:	53                   	push   ebx
c001f53d:	e8 72 f7 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f542:	83 c4 0c             	add    esp,0xc
c001f545:	6a 0c                	push   0xc
c001f547:	56                   	push   esi
c001f548:	53                   	push   ebx
c001f549:	e8 66 f7 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f54e:	c7 04 24 1a 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a1a
c001f555:	e8 77 dd fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f55a:	68 ec 00 00 00       	push   0xec
c001f55f:	6a 07                	push   0x7
c001f561:	56                   	push   esi
c001f562:	53                   	push   ebx
c001f563:	e8 8c f6 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f568:	83 c4 1c             	add    esp,0x1c
c001f56b:	6a 0c                	push   0xc
c001f56d:	56                   	push   esi
c001f56e:	53                   	push   ebx
c001f56f:	e8 40 f7 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f574:	83 c4 0c             	add    esp,0xc
c001f577:	6a 0c                	push   0xc
c001f579:	56                   	push   esi
c001f57a:	53                   	push   ebx
c001f57b:	e8 34 f7 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f580:	83 c4 0c             	add    esp,0xc
c001f583:	6a 0c                	push   0xc
c001f585:	56                   	push   esi
c001f586:	53                   	push   ebx
c001f587:	e8 28 f7 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f58c:	83 c4 0c             	add    esp,0xc
c001f58f:	6a 0c                	push   0xc
c001f591:	56                   	push   esi
c001f592:	53                   	push   ebx
c001f593:	e8 1c f7 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f598:	c7 04 24 1d 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a1d
c001f59f:	e8 2d dd fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f5a4:	83 c4 0c             	add    esp,0xc
c001f5a7:	6a 0c                	push   0xc
c001f5a9:	56                   	push   esi
c001f5aa:	53                   	push   ebx
c001f5ab:	e8 04 f7 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f5b0:	83 c4 10             	add    esp,0x10
c001f5b3:	84 c0                	test   al,al
c001f5b5:	75 1f                	jne    c001f5d6 <IDE::detect()+0x164>
c001f5b7:	83 ec 0c             	sub    esp,0xc
c001f5ba:	68 20 9a 02 c0       	push   0xc0029a20
c001f5bf:	e8 0d dd fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f5c4:	e9 e9 02 00 00       	jmp    c001f8b2 <IDE::detect()+0x440>
c001f5c9:	a8 80                	test   al,0x80
c001f5cb:	74 21                	je     c001f5ee <IDE::detect()+0x17c>
c001f5cd:	45                   	inc    ebp
c001f5ce:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f5d4:	7f 1e                	jg     c001f5f4 <IDE::detect()+0x182>
c001f5d6:	50                   	push   eax
c001f5d7:	6a 0c                	push   0xc
c001f5d9:	56                   	push   esi
c001f5da:	53                   	push   ebx
c001f5db:	e8 d4 f6 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f5e0:	83 c4 10             	add    esp,0x10
c001f5e3:	a8 01                	test   al,0x1
c001f5e5:	74 e2                	je     c001f5c9 <IDE::detect()+0x157>
c001f5e7:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f5ec:	eb 23                	jmp    c001f611 <IDE::detect()+0x19f>
c001f5ee:	a8 08                	test   al,0x8
c001f5f0:	74 db                	je     c001f5cd <IDE::detect()+0x15b>
c001f5f2:	eb 18                	jmp    c001f60c <IDE::detect()+0x19a>
c001f5f4:	50                   	push   eax
c001f5f5:	50                   	push   eax
c001f5f6:	6a 00                	push   0x0
c001f5f8:	6a 32                	push   0x32
c001f5fa:	e8 35 74 ff ff       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c001f5ff:	83 c4 10             	add    esp,0x10
c001f602:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f608:	75 cc                	jne    c001f5d6 <IDE::detect()+0x164>
c001f60a:	eb db                	jmp    c001f5e7 <IDE::detect()+0x175>
c001f60c:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f611:	83 ec 0c             	sub    esp,0xc
c001f614:	68 23 9a 02 c0       	push   0xc0029a23
c001f619:	e8 b3 dc fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f61e:	83 c4 10             	add    esp,0x10
c001f621:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f626:	74 5f                	je     c001f687 <IDE::detect()+0x215>
c001f628:	51                   	push   ecx
c001f629:	6a 04                	push   0x4
c001f62b:	56                   	push   esi
c001f62c:	53                   	push   ebx
c001f62d:	e8 82 f6 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f632:	83 c4 0c             	add    esp,0xc
c001f635:	89 c5                	mov    ebp,eax
c001f637:	6a 05                	push   0x5
c001f639:	56                   	push   esi
c001f63a:	53                   	push   ebx
c001f63b:	e8 74 f6 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f640:	83 c4 10             	add    esp,0x10
c001f643:	89 e9                	mov    ecx,ebp
c001f645:	0f b6 c0             	movzx  eax,al
c001f648:	0f b6 e9             	movzx  ebp,cl
c001f64b:	83 fd 14             	cmp    ebp,0x14
c001f64e:	75 07                	jne    c001f657 <IDE::detect()+0x1e5>
c001f650:	3d eb 00 00 00       	cmp    eax,0xeb
c001f655:	eb 0e                	jmp    c001f665 <IDE::detect()+0x1f3>
c001f657:	3d 96 00 00 00       	cmp    eax,0x96
c001f65c:	0f 85 53 02 00 00    	jne    c001f8b5 <IDE::detect()+0x443>
c001f662:	83 fd 69             	cmp    ebp,0x69
c001f665:	0f 85 4a 02 00 00    	jne    c001f8b5 <IDE::detect()+0x443>
c001f66b:	68 a1 00 00 00       	push   0xa1
c001f670:	6a 07                	push   0x7
c001f672:	56                   	push   esi
c001f673:	53                   	push   ebx
c001f674:	e8 7b f5 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f679:	58                   	pop    eax
c001f67a:	5a                   	pop    edx
c001f67b:	6a 00                	push   0x0
c001f67d:	6a 0a                	push   0xa
c001f67f:	e8 b0 73 ff ff       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c001f684:	83 c4 10             	add    esp,0x10
c001f687:	83 ec 0c             	sub    esp,0xc
c001f68a:	89 fd                	mov    ebp,edi
c001f68c:	68 26 9a 02 c0       	push   0xc0029a26
c001f691:	c1 e5 06             	shl    ebp,0x6
c001f694:	e8 38 dc fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f699:	01 dd                	add    ebp,ebx
c001f69b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f69f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f6a6:	52                   	push   edx
c001f6a7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f6ab:	6a 00                	push   0x0
c001f6ad:	56                   	push   esi
c001f6ae:	53                   	push   ebx
c001f6af:	e8 ee fc ff ff       	call   c001f3a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f6b4:	83 c4 14             	add    esp,0x14
c001f6b7:	68 2a 9a 02 c0       	push   0xc0029a2a
c001f6bc:	e8 10 dc fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f6c1:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f6c6:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f6cd:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f6d4:	89 f0                	mov    eax,esi
c001f6d6:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f6dc:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f6e0:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f6ea:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f6f1:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f6f9:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f700:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f708:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f70e:	c7 04 24 2e 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a2e
c001f715:	e8 b7 db fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f71a:	83 c4 10             	add    esp,0x10
c001f71d:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f724:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f728:	74 09                	je     c001f733 <IDE::detect()+0x2c1>
c001f72a:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f731:	eb 07                	jmp    c001f73a <IDE::detect()+0x2c8>
c001f733:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f73a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f73e:	89 f8                	mov    eax,edi
c001f740:	83 ec 0c             	sub    esp,0xc
c001f743:	c1 e0 06             	shl    eax,0x6
c001f746:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f749:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f74f:	68 32 9a 02 c0       	push   0xc0029a32
c001f754:	e8 78 db fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f759:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f75d:	89 e8                	mov    eax,ebp
c001f75f:	83 c4 10             	add    esp,0x10
c001f762:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f765:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f768:	83 c0 02             	add    eax,0x2
c001f76b:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f771:	83 c2 02             	add    edx,0x2
c001f774:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f777:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f77d:	39 d5                	cmp    ebp,edx
c001f77f:	75 e4                	jne    c001f765 <IDE::detect()+0x2f3>
c001f781:	89 f8                	mov    eax,edi
c001f783:	c1 e0 06             	shl    eax,0x6
c001f786:	01 d8                	add    eax,ebx
c001f788:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f78f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f796:	c1 ea 09             	shr    edx,0x9
c001f799:	83 e2 01             	and    edx,0x1
c001f79c:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f7a3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f7a9:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f7ad:	74 0c                	je     c001f7bb <IDE::detect()+0x349>
c001f7af:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f7b8:	0f 95 c2             	setne  dl
c001f7bb:	83 ec 0c             	sub    esp,0xc
c001f7be:	89 fd                	mov    ebp,edi
c001f7c0:	c1 e5 06             	shl    ebp,0x6
c001f7c3:	01 dd                	add    ebp,ebx
c001f7c5:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f7cb:	68 36 9a 02 c0       	push   0xc0029a36
c001f7d0:	e8 fc da fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f7d5:	83 c4 10             	add    esp,0x10
c001f7d8:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f7dd:	75 66                	jne    c001f845 <IDE::detect()+0x3d3>
c001f7df:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f7e6:	0f 84 b8 00 00 00    	je     c001f8a4 <IDE::detect()+0x432>
c001f7ec:	83 ec 0c             	sub    esp,0xc
c001f7ef:	68 3a 9a 02 c0       	push   0xc0029a3a
c001f7f4:	e8 d8 da fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f7f9:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f800:	e8 5e 00 ff ff       	call   c000f863 <malloc>
c001f805:	89 04 24             	mov    DWORD PTR [esp],eax
c001f808:	89 c5                	mov    ebp,eax
c001f80a:	e8 43 05 00 00       	call   c001fd52 <ATA::ATA()>
c001f80f:	c7 04 24 3e 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a3e
c001f816:	e8 b6 da fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f81b:	59                   	pop    ecx
c001f81c:	58                   	pop    eax
c001f81d:	55                   	push   ebp
c001f81e:	53                   	push   ebx
c001f81f:	e8 30 a2 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f824:	c7 04 24 43 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a43
c001f82b:	e8 a1 da fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f830:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f833:	53                   	push   ebx
c001f834:	57                   	push   edi
c001f835:	6a 00                	push   0x0
c001f837:	55                   	push   ebp
c001f838:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f83b:	83 c4 14             	add    esp,0x14
c001f83e:	68 48 9a 02 c0       	push   0xc0029a48
c001f843:	eb 57                	jmp    c001f89c <IDE::detect()+0x42a>
c001f845:	83 ec 0c             	sub    esp,0xc
c001f848:	68 4d 9a 02 c0       	push   0xc0029a4d
c001f84d:	e8 7f da fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f852:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f859:	e8 05 00 ff ff       	call   c000f863 <malloc>
c001f85e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f861:	89 c5                	mov    ebp,eax
c001f863:	e8 98 0c 00 00       	call   c0020500 <ATAPI::ATAPI()>
c001f868:	c7 04 24 53 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a53
c001f86f:	e8 5d da fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f874:	58                   	pop    eax
c001f875:	5a                   	pop    edx
c001f876:	55                   	push   ebp
c001f877:	53                   	push   ebx
c001f878:	e8 d7 a1 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f87d:	c7 04 24 5a 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a5a
c001f884:	e8 48 da fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f889:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f88c:	53                   	push   ebx
c001f88d:	57                   	push   edi
c001f88e:	6a 00                	push   0x0
c001f890:	55                   	push   ebp
c001f891:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f894:	83 c4 14             	add    esp,0x14
c001f897:	68 61 9a 02 c0       	push   0xc0029a61
c001f89c:	e8 30 da fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f8a1:	83 c4 10             	add    esp,0x10
c001f8a4:	83 ec 0c             	sub    esp,0xc
c001f8a7:	47                   	inc    edi
c001f8a8:	68 68 9a 02 c0       	push   0xc0029a68
c001f8ad:	e8 1f da fe ff       	call   c000d2d1 <KeSetBootMessage(char const*)>
c001f8b2:	83 c4 10             	add    esp,0x10
c001f8b5:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f8b9:	74 0c                	je     c001f8c7 <IDE::detect()+0x455>
c001f8bb:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f8c2:	e9 10 fc ff ff       	jmp    c001f4d7 <IDE::detect()+0x65>
c001f8c7:	4e                   	dec    esi
c001f8c8:	74 0a                	je     c001f8d4 <IDE::detect()+0x462>
c001f8ca:	be 01 00 00 00       	mov    esi,0x1
c001f8cf:	e9 ec fb ff ff       	jmp    c001f4c0 <IDE::detect()+0x4e>
c001f8d4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f8da:	5b                   	pop    ebx
c001f8db:	5e                   	pop    esi
c001f8dc:	5f                   	pop    edi
c001f8dd:	5d                   	pop    ebp
c001f8de:	c3                   	ret    
c001f8df:	90                   	nop

c001f8e0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f8e0:	55                   	push   ebp
c001f8e1:	57                   	push   edi
c001f8e2:	56                   	push   esi
c001f8e3:	53                   	push   ebx
c001f8e4:	83 ec 1c             	sub    esp,0x1c
c001f8e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f8eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f8ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f8f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f8f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f8fb:	88 c3                	mov    bl,al
c001f8fd:	25 ff 00 00 00       	and    eax,0xff
c001f902:	0f 84 88 00 00 00    	je     c001f990 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f908:	83 ec 0c             	sub    esp,0xc
c001f90b:	89 c7                	mov    edi,eax
c001f90d:	68 6c 9a 02 c0       	push   0xc0029a6c
c001f912:	e8 65 76 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f917:	83 c4 10             	add    esp,0x10
c001f91a:	83 ff 01             	cmp    edi,0x1
c001f91d:	74 6b                	je     c001f98a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f91f:	83 ff 02             	cmp    edi,0x2
c001f922:	75 58                	jne    c001f97c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f924:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f929:	01 ff                	add    edi,edi
c001f92b:	50                   	push   eax
c001f92c:	09 fe                	or     esi,edi
c001f92e:	6a 01                	push   0x1
c001f930:	89 f0                	mov    eax,esi
c001f932:	0f b6 f0             	movzx  esi,al
c001f935:	c1 e6 06             	shl    esi,0x6
c001f938:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f940:	50                   	push   eax
c001f941:	55                   	push   ebp
c001f942:	e8 6d f3 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f947:	83 c4 10             	add    esp,0x10
c001f94a:	a8 01                	test   al,0x1
c001f94c:	74 02                	je     c001f950 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f94e:	b3 07                	mov    bl,0x7
c001f950:	a8 02                	test   al,0x2
c001f952:	74 02                	je     c001f956 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f954:	b3 03                	mov    bl,0x3
c001f956:	a8 04                	test   al,0x4
c001f958:	74 02                	je     c001f95c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f95a:	b3 14                	mov    bl,0x14
c001f95c:	a8 08                	test   al,0x8
c001f95e:	74 02                	je     c001f962 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f960:	b3 03                	mov    bl,0x3
c001f962:	a8 10                	test   al,0x10
c001f964:	74 02                	je     c001f968 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f966:	b3 15                	mov    bl,0x15
c001f968:	a8 20                	test   al,0x20
c001f96a:	74 02                	je     c001f96e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f96c:	b3 03                	mov    bl,0x3
c001f96e:	a8 40                	test   al,0x40
c001f970:	74 02                	je     c001f974 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f972:	b3 16                	mov    bl,0x16
c001f974:	a8 80                	test   al,0x80
c001f976:	74 18                	je     c001f990 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f978:	b3 0d                	mov    bl,0xd
c001f97a:	eb 14                	jmp    c001f990 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f97c:	83 ff 03             	cmp    edi,0x3
c001f97f:	74 0d                	je     c001f98e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f981:	83 ff 04             	cmp    edi,0x4
c001f984:	75 0a                	jne    c001f990 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f986:	b3 08                	mov    bl,0x8
c001f988:	eb 06                	jmp    c001f990 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f98a:	b3 13                	mov    bl,0x13
c001f98c:	eb 02                	jmp    c001f990 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f98e:	b3 17                	mov    bl,0x17
c001f990:	83 c4 1c             	add    esp,0x1c
c001f993:	88 d8                	mov    al,bl
c001f995:	5b                   	pop    ebx
c001f996:	5e                   	pop    esi
c001f997:	5f                   	pop    edi
c001f998:	5d                   	pop    ebp
c001f999:	c3                   	ret    

c001f99a <IDE::polling(unsigned char, unsigned int)>:
c001f99a:	57                   	push   edi
c001f99b:	56                   	push   esi
c001f99c:	53                   	push   ebx
c001f99d:	bb 04 00 00 00       	mov    ebx,0x4
c001f9a2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f9a6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f9ab:	52                   	push   edx
c001f9ac:	6a 0c                	push   0xc
c001f9ae:	56                   	push   esi
c001f9af:	57                   	push   edi
c001f9b0:	e8 ff f2 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f9b5:	83 c4 10             	add    esp,0x10
c001f9b8:	4b                   	dec    ebx
c001f9b9:	75 f0                	jne    c001f9ab <IDE::polling(unsigned char, unsigned int)+0x11>
c001f9bb:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f9c0:	50                   	push   eax
c001f9c1:	6a 0c                	push   0xc
c001f9c3:	56                   	push   esi
c001f9c4:	57                   	push   edi
c001f9c5:	e8 ea f2 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001f9ca:	83 c4 10             	add    esp,0x10
c001f9cd:	a8 01                	test   al,0x1
c001f9cf:	75 17                	jne    c001f9e8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f9d1:	a8 20                	test   al,0x20
c001f9d3:	75 0f                	jne    c001f9e4 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f9d5:	4b                   	dec    ebx
c001f9d6:	74 10                	je     c001f9e8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f9d8:	a8 80                	test   al,0x80
c001f9da:	75 e4                	jne    c001f9c0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f9dc:	a8 08                	test   al,0x8
c001f9de:	74 e0                	je     c001f9c0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f9e0:	31 c0                	xor    eax,eax
c001f9e2:	eb 06                	jmp    c001f9ea <IDE::polling(unsigned char, unsigned int)+0x50>
c001f9e4:	b0 01                	mov    al,0x1
c001f9e6:	eb 02                	jmp    c001f9ea <IDE::polling(unsigned char, unsigned int)+0x50>
c001f9e8:	b0 02                	mov    al,0x2
c001f9ea:	5b                   	pop    ebx
c001f9eb:	5e                   	pop    esi
c001f9ec:	5f                   	pop    edi
c001f9ed:	c3                   	ret    

c001f9ee <SATABus::close(int, int, void*)>:
c001f9ee:	31 c0                	xor    eax,eax
c001f9f0:	c3                   	ret    
c001f9f1:	90                   	nop

c001f9f2 <SATABus::detect()>:
c001f9f2:	c3                   	ret    
c001f9f3:	90                   	nop

c001f9f4 <SATABus::SATABus()>:
c001f9f4:	83 ec 0c             	sub    esp,0xc
c001f9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9fb:	83 ec 08             	sub    esp,0x8
c001f9fe:	68 a4 9a 02 c0       	push   0xc0029aa4
c001fa03:	50                   	push   eax
c001fa04:	e8 a3 a3 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001fa09:	83 c4 10             	add    esp,0x10
c001fa0c:	ba d0 9a 02 c0       	mov    edx,0xc0029ad0
c001fa11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa15:	89 10                	mov    DWORD PTR [eax],edx
c001fa17:	83 ec 0c             	sub    esp,0xc
c001fa1a:	6a 50                	push   0x50
c001fa1c:	e8 72 05 ff ff       	call   c000ff93 <Phys::allocateContiguousPages(int)>
c001fa21:	83 c4 10             	add    esp,0x10
c001fa24:	89 c2                	mov    edx,eax
c001fa26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001fa30:	83 ec 0c             	sub    esp,0xc
c001fa33:	6a 50                	push   0x50
c001fa35:	e8 15 38 ff ff       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c001fa3a:	83 c4 10             	add    esp,0x10
c001fa3d:	89 c2                	mov    edx,eax
c001fa3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa43:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001fa49:	a1 90 12 03 c0       	mov    eax,ds:0xc0031290
c001fa4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa52:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001fa58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa5c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001fa62:	83 ec 0c             	sub    esp,0xc
c001fa65:	6a 03                	push   0x3
c001fa67:	6a 50                	push   0x50
c001fa69:	51                   	push   ecx
c001fa6a:	52                   	push   edx
c001fa6b:	50                   	push   eax
c001fa6c:	e8 ab 40 ff ff       	call   c0013b1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001fa71:	83 c4 20             	add    esp,0x20
c001fa74:	90                   	nop
c001fa75:	83 c4 0c             	add    esp,0xc
c001fa78:	c3                   	ret    
c001fa79:	90                   	nop

c001fa7a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001fa7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa7e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001fa81:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001fa84:	09 c2                	or     edx,eax
c001fa86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fa90:	8b 08                	mov    ecx,DWORD PTR [eax]
c001fa92:	31 c0                	xor    eax,eax
c001fa94:	c1 e9 08             	shr    ecx,0x8
c001fa97:	83 e1 0f             	and    ecx,0xf
c001fa9a:	39 c8                	cmp    eax,ecx
c001fa9c:	74 0a                	je     c001faa8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001fa9e:	f6 c2 01             	test   dl,0x1
c001faa1:	74 08                	je     c001faab <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001faa3:	d1 ea                	shr    edx,1
c001faa5:	40                   	inc    eax
c001faa6:	eb f2                	jmp    c001fa9a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001faa8:	83 c8 ff             	or     eax,0xffffffff
c001faab:	c3                   	ret    

c001faac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001faac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fab0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001fab3:	89 c2                	mov    edx,eax
c001fab5:	c1 ea 08             	shr    edx,0x8
c001fab8:	83 e2 0f             	and    edx,0xf
c001fabb:	4a                   	dec    edx
c001fabc:	75 32                	jne    c001faf0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001fabe:	83 e0 0f             	and    eax,0xf
c001fac1:	83 f8 03             	cmp    eax,0x3
c001fac4:	75 2a                	jne    c001faf0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001fac6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001fac9:	b8 02 00 00 00       	mov    eax,0x2
c001face:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001fad4:	74 1c                	je     c001faf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fad6:	b8 04 00 00 00       	mov    eax,0x4
c001fadb:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001fae1:	74 0f                	je     c001faf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fae3:	31 c0                	xor    eax,eax
c001fae5:	83 fa 03             	cmp    edx,0x3
c001fae8:	0f 94 c0             	sete   al
c001faeb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001faef:	c3                   	ret    
c001faf0:	31 c0                	xor    eax,eax
c001faf2:	c3                   	ret    
c001faf3:	90                   	nop

c001faf4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001faf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001faf8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fafb:	0f ba e2 0f          	bt     edx,0xf
c001faff:	72 f7                	jb     c001faf8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001fb01:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fb04:	83 ca 10             	or     edx,0x10
c001fb07:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fb0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fb0d:	83 ca 01             	or     edx,0x1
c001fb10:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fb13:	c3                   	ret    

c001fb14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001fb14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb18:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fb1b:	83 e2 fe             	and    edx,0xfffffffe
c001fb1e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fb21:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fb24:	83 e2 ef             	and    edx,0xffffffef
c001fb27:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fb2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fb2d:	0f ba e2 0e          	bt     edx,0xe
c001fb31:	72 f7                	jb     c001fb2a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fb33:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fb36:	0f ba e2 0f          	bt     edx,0xf
c001fb3a:	72 ee                	jb     c001fb2a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fb3c:	c3                   	ret    
c001fb3d:	90                   	nop

c001fb3e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001fb3e:	55                   	push   ebp
c001fb3f:	57                   	push   edi
c001fb40:	56                   	push   esi
c001fb41:	53                   	push   ebx
c001fb42:	83 ec 1c             	sub    esp,0x1c
c001fb45:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fb49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fb4d:	53                   	push   ebx
c001fb4e:	56                   	push   esi
c001fb4f:	e8 c0 ff ff ff       	call   c001fb14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fb54:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001fb58:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fb5e:	83 ec 0c             	sub    esp,0xc
c001fb61:	c1 e5 0a             	shl    ebp,0xa
c001fb64:	01 e8                	add    eax,ebp
c001fb66:	89 03                	mov    DWORD PTR [ebx],eax
c001fb68:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fb6a:	68 00 04 00 00       	push   0x400
c001fb6f:	6a 00                	push   0x0
c001fb71:	50                   	push   eax
c001fb72:	e8 79 09 fe ff       	call   c00004f0 <memset>
c001fb77:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001fb7d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001fb81:	01 e8                	add    eax,ebp
c001fb83:	83 c4 1c             	add    esp,0x1c
c001fb86:	89 03                	mov    DWORD PTR [ebx],eax
c001fb88:	c1 e2 08             	shl    edx,0x8
c001fb8b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fb92:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001fb98:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fb9e:	01 f8                	add    eax,edi
c001fba0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fba3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fba6:	68 00 01 00 00       	push   0x100
c001fbab:	6a 00                	push   0x0
c001fbad:	50                   	push   eax
c001fbae:	e8 3d 09 fe ff       	call   c00004f0 <memset>
c001fbb3:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001fbb9:	01 fa                	add    edx,edi
c001fbbb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fbbf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001fbc2:	c1 e7 0d             	shl    edi,0xd
c001fbc5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fbcc:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001fbd2:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001fbd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fbdc:	31 ff                	xor    edi,edi
c001fbde:	83 c4 10             	add    esp,0x10
c001fbe1:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001fbe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbeb:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fbf1:	83 c5 20             	add    ebp,0x20
c001fbf4:	01 f8                	add    eax,edi
c001fbf6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fbf9:	52                   	push   edx
c001fbfa:	68 00 01 00 00       	push   0x100
c001fbff:	6a 00                	push   0x0
c001fc01:	50                   	push   eax
c001fc02:	e8 e9 08 fe ff       	call   c00004f0 <memset>
c001fc07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc0b:	83 c4 10             	add    esp,0x10
c001fc0e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001fc14:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001fc1b:	01 f8                	add    eax,edi
c001fc1d:	81 c7 00 01 00 00    	add    edi,0x100
c001fc23:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fc26:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001fc2c:	75 b3                	jne    c001fbe1 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001fc2e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fc35:	50                   	push   eax
c001fc36:	50                   	push   eax
c001fc37:	53                   	push   ebx
c001fc38:	56                   	push   esi
c001fc39:	e8 b6 fe ff ff       	call   c001faf4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001fc3e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fc45:	83 c4 2c             	add    esp,0x2c
c001fc48:	5b                   	pop    ebx
c001fc49:	5e                   	pop    esi
c001fc4a:	5f                   	pop    edi
c001fc4b:	5d                   	pop    ebp
c001fc4c:	c3                   	ret    
c001fc4d:	90                   	nop

c001fc4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fc4e:	55                   	push   ebp
c001fc4f:	57                   	push   edi
c001fc50:	56                   	push   esi
c001fc51:	53                   	push   ebx
c001fc52:	31 db                	xor    ebx,ebx
c001fc54:	83 ec 0c             	sub    esp,0xc
c001fc57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fc5b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fc5f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001fc62:	f7 c7 01 00 00 00    	test   edi,0x1
c001fc68:	74 7a                	je     c001fce4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fc6a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001fc6e:	89 d8                	mov    eax,ebx
c001fc70:	c1 e0 07             	shl    eax,0x7
c001fc73:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001fc7a:	55                   	push   ebp
c001fc7b:	56                   	push   esi
c001fc7c:	e8 2b fe ff ff       	call   c001faac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001fc81:	5a                   	pop    edx
c001fc82:	83 f8 01             	cmp    eax,0x1
c001fc85:	59                   	pop    ecx
c001fc86:	75 21                	jne    c001fca9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001fc88:	50                   	push   eax
c001fc89:	53                   	push   ebx
c001fc8a:	55                   	push   ebp
c001fc8b:	56                   	push   esi
c001fc8c:	e8 ad fe ff ff       	call   c001fb3e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fc91:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001fc98:	e8 c6 fb fe ff       	call   c000f863 <malloc>
c001fc9d:	89 c5                	mov    ebp,eax
c001fc9f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fca2:	e8 25 0f 00 00       	call   c0020bcc <SATA::SATA()>
c001fca7:	eb 24                	jmp    c001fccd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001fca9:	83 f8 04             	cmp    eax,0x4
c001fcac:	75 36                	jne    c001fce4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fcae:	51                   	push   ecx
c001fcaf:	53                   	push   ebx
c001fcb0:	55                   	push   ebp
c001fcb1:	56                   	push   esi
c001fcb2:	e8 87 fe ff ff       	call   c001fb3e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fcb7:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fcbe:	e8 a0 fb fe ff       	call   c000f863 <malloc>
c001fcc3:	89 c5                	mov    ebp,eax
c001fcc5:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcc8:	e8 97 12 00 00       	call   c0020f64 <SATAPI::SATAPI()>
c001fccd:	58                   	pop    eax
c001fcce:	5a                   	pop    edx
c001fccf:	55                   	push   ebp
c001fcd0:	56                   	push   esi
c001fcd1:	e8 7e 9d fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001fcd6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fcd9:	56                   	push   esi
c001fcda:	6a 00                	push   0x0
c001fcdc:	53                   	push   ebx
c001fcdd:	55                   	push   ebp
c001fcde:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001fce1:	83 c4 20             	add    esp,0x20
c001fce4:	d1 ef                	shr    edi,1
c001fce6:	43                   	inc    ebx
c001fce7:	83 fb 20             	cmp    ebx,0x20
c001fcea:	0f 85 72 ff ff ff    	jne    c001fc62 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001fcf0:	83 c4 0c             	add    esp,0xc
c001fcf3:	5b                   	pop    ebx
c001fcf4:	5e                   	pop    esi
c001fcf5:	5f                   	pop    edi
c001fcf6:	5d                   	pop    ebp
c001fcf7:	c3                   	ret    

c001fcf8 <SATABus::open(int, int, void*)>:
c001fcf8:	53                   	push   ebx
c001fcf9:	83 ec 08             	sub    esp,0x8
c001fcfc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fd00:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001fd06:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fd0c:	e8 1b 68 ff ff       	call   c001652c <KeDisablePreemption()>
c001fd11:	52                   	push   edx
c001fd12:	52                   	push   edx
c001fd13:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fd19:	53                   	push   ebx
c001fd1a:	e8 2f ff ff ff       	call   c001fc4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fd1f:	e8 30 68 ff ff       	call   c0016554 <KeRestorePreemption()>
c001fd24:	31 c0                	xor    eax,eax
c001fd26:	83 c4 18             	add    esp,0x18
c001fd29:	5b                   	pop    ebx
c001fd2a:	c3                   	ret    
c001fd2b:	90                   	nop

c001fd2c <ATA::close(int, int, void*)>:
c001fd2c:	83 ec 0c             	sub    esp,0xc
c001fd2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd33:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fd39:	85 c0                	test   eax,eax
c001fd3b:	74 0c                	je     c001fd49 <ATA::close(int, int, void*)+0x1d>
c001fd3d:	83 ec 0c             	sub    esp,0xc
c001fd40:	8b 10                	mov    edx,DWORD PTR [eax]
c001fd42:	50                   	push   eax
c001fd43:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fd46:	83 c4 10             	add    esp,0x10
c001fd49:	31 c0                	xor    eax,eax
c001fd4b:	83 c4 0c             	add    esp,0xc
c001fd4e:	c3                   	ret    
c001fd4f:	90                   	nop

c001fd50 <ATA::powerSaving(PowerSavingLevel)>:
c001fd50:	c3                   	ret    
c001fd51:	90                   	nop

c001fd52 <ATA::ATA()>:
c001fd52:	83 ec 0c             	sub    esp,0xc
c001fd55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd59:	83 ec 04             	sub    esp,0x4
c001fd5c:	68 00 02 00 00       	push   0x200
c001fd61:	68 51 9c 02 c0       	push   0xc0029c51
c001fd66:	50                   	push   eax
c001fd67:	e8 ca a0 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fd6c:	83 c4 10             	add    esp,0x10
c001fd6f:	ba b8 9b 02 c0       	mov    edx,0xc0029bb8
c001fd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd78:	89 10                	mov    DWORD PTR [eax],edx
c001fd7a:	90                   	nop
c001fd7b:	83 c4 0c             	add    esp,0xc
c001fd7e:	c3                   	ret    
c001fd7f:	90                   	nop

c001fd80 <ATA::flush(bool)>:
c001fd80:	53                   	push   ebx
c001fd81:	83 ec 08             	sub    esp,0x8
c001fd84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fd88:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001fd8d:	83 f8 01             	cmp    eax,0x1
c001fd90:	19 c0                	sbb    eax,eax
c001fd92:	83 e0 fd             	and    eax,0xfffffffd
c001fd95:	05 ea 00 00 00       	add    eax,0xea
c001fd9a:	50                   	push   eax
c001fd9b:	6a 07                	push   0x7
c001fd9d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fda4:	50                   	push   eax
c001fda5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdab:	e8 44 ee ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdb0:	83 c4 0c             	add    esp,0xc
c001fdb3:	6a 00                	push   0x0
c001fdb5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdbc:	50                   	push   eax
c001fdbd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdc3:	e8 d2 fb ff ff       	call   c001f99a <IDE::polling(unsigned char, unsigned int)>
c001fdc8:	83 c4 18             	add    esp,0x18
c001fdcb:	5b                   	pop    ebx
c001fdcc:	c3                   	ret    
c001fdcd:	90                   	nop

c001fdce <ATA::readyForCommand()>:
c001fdce:	56                   	push   esi
c001fdcf:	53                   	push   ebx
c001fdd0:	31 db                	xor    ebx,ebx
c001fdd2:	50                   	push   eax
c001fdd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fdd7:	50                   	push   eax
c001fdd8:	6a 0c                	push   0xc
c001fdda:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fde1:	50                   	push   eax
c001fde2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fde8:	e8 c7 ee ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c001fded:	83 c4 10             	add    esp,0x10
c001fdf0:	a8 88                	test   al,0x88
c001fdf2:	74 20                	je     c001fe14 <ATA::readyForCommand()+0x46>
c001fdf4:	43                   	inc    ebx
c001fdf5:	83 fb 63             	cmp    ebx,0x63
c001fdf8:	7e dd                	jle    c001fdd7 <ATA::readyForCommand()+0x9>
c001fdfa:	51                   	push   ecx
c001fdfb:	51                   	push   ecx
c001fdfc:	6a 00                	push   0x0
c001fdfe:	6a 0a                	push   0xa
c001fe00:	e8 2f 6c ff ff       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c001fe05:	83 c4 10             	add    esp,0x10
c001fe08:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fe0e:	75 c7                	jne    c001fdd7 <ATA::readyForCommand()+0x9>
c001fe10:	31 c0                	xor    eax,eax
c001fe12:	eb 02                	jmp    c001fe16 <ATA::readyForCommand()+0x48>
c001fe14:	b0 01                	mov    al,0x1
c001fe16:	5a                   	pop    edx
c001fe17:	5b                   	pop    ebx
c001fe18:	5e                   	pop    esi
c001fe19:	c3                   	ret    

c001fe1a <ATA::access(unsigned long long, int, void*, bool)>:
c001fe1a:	55                   	push   ebp
c001fe1b:	57                   	push   edi
c001fe1c:	56                   	push   esi
c001fe1d:	53                   	push   ebx
c001fe1e:	83 ec 2c             	sub    esp,0x2c
c001fe21:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fe25:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fe29:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fe2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fe31:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fe35:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fe39:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fe3d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fe43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fe47:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fe4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe51:	c1 e0 06             	shl    eax,0x6
c001fe54:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fe5c:	74 5d                	je     c001febb <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001fe5e:	89 fa                	mov    edx,edi
c001fe60:	89 f0                	mov    eax,esi
c001fe62:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fe66:	c1 ea 1c             	shr    edx,0x1c
c001fe69:	89 d1                	mov    ecx,edx
c001fe6b:	09 c1                	or     ecx,eax
c001fe6d:	74 25                	je     c001fe94 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001fe6f:	31 ed                	xor    ebp,ebp
c001fe71:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fe78:	89 fa                	mov    edx,edi
c001fe7a:	89 f0                	mov    eax,esi
c001fe7c:	0f ad d0             	shrd   eax,edx,cl
c001fe7f:	d3 ea                	shr    edx,cl
c001fe81:	f6 c1 20             	test   cl,0x20
c001fe84:	74 02                	je     c001fe88 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001fe86:	89 d0                	mov    eax,edx
c001fe88:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fe8c:	45                   	inc    ebp
c001fe8d:	83 fd 06             	cmp    ebp,0x6
c001fe90:	75 df                	jne    c001fe71 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001fe92:	eb 76                	jmp    c001ff0a <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001fe94:	89 f0                	mov    eax,esi
c001fe96:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fe9b:	89 fa                	mov    edx,edi
c001fe9d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fea4:	0f ac d0 10          	shrd   eax,edx,0x10
c001fea8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fead:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001feb1:	c1 ee 18             	shr    esi,0x18
c001feb4:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001feb9:	eb 56                	jmp    c001ff11 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001febb:	6a 00                	push   0x0
c001febd:	6a 3f                	push   0x3f
c001febf:	57                   	push   edi
c001fec0:	56                   	push   esi
c001fec1:	e8 ae 20 00 00       	call   c0021f74 <__umoddi3>
c001fec6:	83 c4 10             	add    esp,0x10
c001fec9:	40                   	inc    eax
c001feca:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fece:	6a 00                	push   0x0
c001fed0:	68 f0 03 00 00       	push   0x3f0
c001fed5:	57                   	push   edi
c001fed6:	56                   	push   esi
c001fed7:	e8 98 1f 00 00       	call   c0021e74 <__udivdi3>
c001fedc:	83 c4 10             	add    esp,0x10
c001fedf:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fee4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001feeb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fef0:	6a 00                	push   0x0
c001fef2:	6a 3f                	push   0x3f
c001fef4:	57                   	push   edi
c001fef5:	56                   	push   esi
c001fef6:	e8 79 1f 00 00       	call   c0021e74 <__udivdi3>
c001fefb:	83 c4 10             	add    esp,0x10
c001fefe:	83 e0 0f             	and    eax,0xf
c001ff01:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ff06:	89 c6                	mov    esi,eax
c001ff08:	eb 07                	jmp    c001ff11 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ff0a:	31 f6                	xor    esi,esi
c001ff0c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ff11:	55                   	push   ebp
c001ff12:	6a 00                	push   0x0
c001ff14:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff1b:	50                   	push   eax
c001ff1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff20:	e8 d9 ee ff ff       	call   c001edfe <IDE::enableIRQs(unsigned char, bool)>
c001ff25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff28:	e8 a1 fe ff ff       	call   c001fdce <ATA::readyForCommand()>
c001ff2d:	83 c4 10             	add    esp,0x10
c001ff30:	84 c0                	test   al,al
c001ff32:	75 0a                	jne    c001ff3e <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001ff34:	be 01 00 00 00       	mov    esi,0x1
c001ff39:	e9 c2 02 00 00       	jmp    c0020200 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001ff3e:	fa                   	cli    
c001ff3f:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c001ff45:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ff4b:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001ff50:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ff56:	75 0a                	jne    c001ff62 <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001ff58:	c1 e0 04             	shl    eax,0x4
c001ff5b:	09 c6                	or     esi,eax
c001ff5d:	83 ce a0             	or     esi,0xffffffa0
c001ff60:	eb 08                	jmp    c001ff6a <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001ff62:	c1 e0 04             	shl    eax,0x4
c001ff65:	09 c6                	or     esi,eax
c001ff67:	83 ce e0             	or     esi,0xffffffe0
c001ff6a:	89 f0                	mov    eax,esi
c001ff6c:	0f b6 d2             	movzx  edx,dl
c001ff6f:	0f b6 f0             	movzx  esi,al
c001ff72:	56                   	push   esi
c001ff73:	6a 06                	push   0x6
c001ff75:	52                   	push   edx
c001ff76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff7c:	e8 73 ec ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff81:	83 c4 10             	add    esp,0x10
c001ff84:	6a 00                	push   0x0
c001ff86:	6a 01                	push   0x1
c001ff88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff8f:	50                   	push   eax
c001ff90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff96:	e8 59 ec ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff9b:	83 c4 10             	add    esp,0x10
c001ff9e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ffa3:	83 f8 02             	cmp    eax,0x2
c001ffa6:	75 6e                	jne    c0020016 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001ffa8:	6a 00                	push   0x0
c001ffaa:	6a 08                	push   0x8
c001ffac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffb3:	50                   	push   eax
c001ffb4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffba:	e8 35 ec ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffbf:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ffc4:	50                   	push   eax
c001ffc5:	6a 09                	push   0x9
c001ffc7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffce:	50                   	push   eax
c001ffcf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffd5:	e8 1a ec ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffda:	83 c4 20             	add    esp,0x20
c001ffdd:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ffe2:	50                   	push   eax
c001ffe3:	6a 0a                	push   0xa
c001ffe5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffec:	50                   	push   eax
c001ffed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fff3:	e8 fc eb ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fff8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fffd:	50                   	push   eax
c001fffe:	6a 0b                	push   0xb
c0020000:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020007:	50                   	push   eax
c0020008:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002000e:	e8 e1 eb ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020013:	83 c4 20             	add    esp,0x20
c0020016:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002001b:	50                   	push   eax
c002001c:	6a 02                	push   0x2
c002001e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020025:	50                   	push   eax
c0020026:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002002c:	e8 c3 eb ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020031:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0020036:	50                   	push   eax
c0020037:	6a 03                	push   0x3
c0020039:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020040:	50                   	push   eax
c0020041:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020047:	e8 a8 eb ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002004c:	83 c4 20             	add    esp,0x20
c002004f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0020054:	50                   	push   eax
c0020055:	6a 04                	push   0x4
c0020057:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002005e:	50                   	push   eax
c002005f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020065:	e8 8a eb ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002006a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002006f:	50                   	push   eax
c0020070:	6a 05                	push   0x5
c0020072:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020079:	50                   	push   eax
c002007a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020080:	e8 6f eb ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020085:	83 c4 20             	add    esp,0x20
c0020088:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002008d:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0020092:	74 13                	je     c00200a7 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c0020094:	83 f8 02             	cmp    eax,0x2
c0020097:	74 20                	je     c00200b9 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c0020099:	48                   	dec    eax
c002009a:	0f 85 94 fe ff ff    	jne    c001ff34 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c00200a0:	b8 30 00 00 00       	mov    eax,0x30
c00200a5:	eb 1e                	jmp    c00200c5 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c00200a7:	83 f8 02             	cmp    eax,0x2
c00200aa:	74 14                	je     c00200c0 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c00200ac:	48                   	dec    eax
c00200ad:	b8 20 00 00 00       	mov    eax,0x20
c00200b2:	74 11                	je     c00200c5 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c00200b4:	e9 7b fe ff ff       	jmp    c001ff34 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c00200b9:	b8 34 00 00 00       	mov    eax,0x34
c00200be:	eb 05                	jmp    c00200c5 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c00200c0:	b8 24 00 00 00       	mov    eax,0x24
c00200c5:	50                   	push   eax
c00200c6:	6a 07                	push   0x7
c00200c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200cf:	50                   	push   eax
c00200d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200d6:	e8 19 eb ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200db:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c00200e2:	83 c4 10             	add    esp,0x10
c00200e5:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c00200ec:	75 01                	jne    c00200ef <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c00200ee:	fb                   	sti    
c00200ef:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00200f3:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c00200f8:	85 f6                	test   esi,esi
c00200fa:	0f 84 dd 00 00 00    	je     c00201dd <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020100:	57                   	push   edi
c0020101:	6a 01                	push   0x1
c0020103:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002010a:	50                   	push   eax
c002010b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020111:	e8 84 f8 ff ff       	call   c001f99a <IDE::polling(unsigned char, unsigned int)>
c0020116:	83 c4 10             	add    esp,0x10
c0020119:	0f b6 c0             	movzx  eax,al
c002011c:	85 c0                	test   eax,eax
c002011e:	74 23                	je     c0020143 <ATA::access(unsigned long long, int, void*, bool)+0x329>
c0020120:	50                   	push   eax
c0020121:	89 c6                	mov    esi,eax
c0020123:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002012a:	50                   	push   eax
c002012b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020132:	50                   	push   eax
c0020133:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020139:	e8 a2 f7 ff ff       	call   c001f8e0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002013e:	e9 ba 00 00 00       	jmp    c00201fd <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c0020143:	85 ed                	test   ebp,ebp
c0020145:	74 49                	je     c0020190 <ATA::access(unsigned long long, int, void*, bool)+0x376>
c0020147:	fa                   	cli    
c0020148:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c002014e:	31 c9                	xor    ecx,ecx
c0020150:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020158:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002015c:	51                   	push   ecx
c002015d:	51                   	push   ecx
c002015e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020165:	50                   	push   eax
c0020166:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002016c:	e8 71 ea ff ff       	call   c001ebe2 <IDE::getBase(unsigned char)>
c0020171:	89 c2                	mov    edx,eax
c0020173:	89 f8                	mov    eax,edi
c0020175:	66 ef                	out    dx,ax
c0020177:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002017b:	83 c4 10             	add    esp,0x10
c002017e:	41                   	inc    ecx
c002017f:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0020185:	75 c9                	jne    c0020150 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c0020187:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c002018e:	eb 35                	jmp    c00201c5 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c0020190:	fa                   	cli    
c0020191:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c0020197:	52                   	push   edx
c0020198:	52                   	push   edx
c0020199:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201a0:	50                   	push   eax
c00201a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201a7:	e8 36 ea ff ff       	call   c001ebe2 <IDE::getBase(unsigned char)>
c00201ac:	b9 00 01 00 00       	mov    ecx,0x100
c00201b1:	89 c2                	mov    edx,eax
c00201b3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00201b7:	fc                   	cld    
c00201b8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00201bb:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c00201c2:	83 c4 10             	add    esp,0x10
c00201c5:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c00201cc:	75 01                	jne    c00201cf <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c00201ce:	fb                   	sti    
c00201cf:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00201d7:	4e                   	dec    esi
c00201d8:	e9 1b ff ff ff       	jmp    c00200f8 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c00201dd:	31 f6                	xor    esi,esi
c00201df:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00201e4:	74 1a                	je     c0020200 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c00201e6:	50                   	push   eax
c00201e7:	50                   	push   eax
c00201e8:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00201ed:	83 f8 02             	cmp    eax,0x2
c00201f0:	0f 94 c0             	sete   al
c00201f3:	0f b6 c0             	movzx  eax,al
c00201f6:	50                   	push   eax
c00201f7:	53                   	push   ebx
c00201f8:	e8 83 fb ff ff       	call   c001fd80 <ATA::flush(bool)>
c00201fd:	83 c4 10             	add    esp,0x10
c0020200:	83 c4 2c             	add    esp,0x2c
c0020203:	89 f0                	mov    eax,esi
c0020205:	5b                   	pop    ebx
c0020206:	5e                   	pop    esi
c0020207:	5f                   	pop    edi
c0020208:	5d                   	pop    ebp
c0020209:	c3                   	ret    

c002020a <ATA::read(unsigned long long, int, void*)>:
c002020a:	57                   	push   edi
c002020b:	b8 04 00 00 00       	mov    eax,0x4
c0020210:	56                   	push   esi
c0020211:	53                   	push   ebx
c0020212:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020216:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002021a:	8d 7a ff             	lea    edi,[edx-0x1]
c002021d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020221:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020225:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002022b:	77 25                	ja     c0020252 <ATA::read(unsigned long long, int, void*)+0x48>
c002022d:	b8 06 00 00 00       	mov    eax,0x6
c0020232:	85 f6                	test   esi,esi
c0020234:	74 1c                	je     c0020252 <ATA::read(unsigned long long, int, void*)+0x48>
c0020236:	50                   	push   eax
c0020237:	50                   	push   eax
c0020238:	6a 00                	push   0x0
c002023a:	56                   	push   esi
c002023b:	52                   	push   edx
c002023c:	53                   	push   ebx
c002023d:	51                   	push   ecx
c002023e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020242:	e8 d3 fb ff ff       	call   c001fe1a <ATA::access(unsigned long long, int, void*, bool)>
c0020247:	83 c4 20             	add    esp,0x20
c002024a:	85 c0                	test   eax,eax
c002024c:	0f 95 c0             	setne  al
c002024f:	0f b6 c0             	movzx  eax,al
c0020252:	5b                   	pop    ebx
c0020253:	5e                   	pop    esi
c0020254:	5f                   	pop    edi
c0020255:	c3                   	ret    

c0020256 <ATA::write(unsigned long long, int, void*)>:
c0020256:	57                   	push   edi
c0020257:	b8 04 00 00 00       	mov    eax,0x4
c002025c:	56                   	push   esi
c002025d:	53                   	push   ebx
c002025e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020262:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020266:	8d 7a ff             	lea    edi,[edx-0x1]
c0020269:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002026d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020271:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020277:	77 25                	ja     c002029e <ATA::write(unsigned long long, int, void*)+0x48>
c0020279:	b8 06 00 00 00       	mov    eax,0x6
c002027e:	85 f6                	test   esi,esi
c0020280:	74 1c                	je     c002029e <ATA::write(unsigned long long, int, void*)+0x48>
c0020282:	50                   	push   eax
c0020283:	50                   	push   eax
c0020284:	6a 01                	push   0x1
c0020286:	56                   	push   esi
c0020287:	52                   	push   edx
c0020288:	53                   	push   ebx
c0020289:	51                   	push   ecx
c002028a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002028e:	e8 87 fb ff ff       	call   c001fe1a <ATA::access(unsigned long long, int, void*, bool)>
c0020293:	83 c4 20             	add    esp,0x20
c0020296:	85 c0                	test   eax,eax
c0020298:	0f 95 c0             	setne  al
c002029b:	0f b6 c0             	movzx  eax,al
c002029e:	5b                   	pop    ebx
c002029f:	5e                   	pop    esi
c00202a0:	5f                   	pop    edi
c00202a1:	c3                   	ret    

c00202a2 <ATA::detectCHS()>:
c00202a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00202a6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00202ac:	c1 e0 06             	shl    eax,0x6
c00202af:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00202b5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00202bf:	c7 44 24 04 f4 9a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029af4
c00202c7:	e9 ec f9 fe ff       	jmp    c000fcb8 <KePanic(char const*)>

c00202cc <ATA::open(int, int, void*)>:
c00202cc:	53                   	push   ebx
c00202cd:	83 ec 08             	sub    esp,0x8
c00202d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00202d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00202d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00202dc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00202e2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00202e8:	c1 e0 06             	shl    eax,0x6
c00202eb:	01 d0                	add    eax,edx
c00202ed:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00202f4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00202fa:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0020301:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002030b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0020311:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020318:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002031f:	75 0c                	jne    c002032d <ATA::open(int, int, void*)+0x61>
c0020321:	83 ec 0c             	sub    esp,0xc
c0020324:	53                   	push   ebx
c0020325:	e8 78 ff ff ff       	call   c00202a2 <ATA::detectCHS()>
c002032a:	83 c4 10             	add    esp,0x10
c002032d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020333:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020339:	c1 e0 06             	shl    eax,0x6
c002033c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0020343:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002034d:	d1 e8                	shr    eax,1
c002034f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020355:	6a 04                	push   0x4
c0020357:	6a 0c                	push   0xc
c0020359:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020360:	50                   	push   eax
c0020361:	52                   	push   edx
c0020362:	e8 8d e8 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020367:	90                   	nop
c0020368:	90                   	nop
c0020369:	6a 00                	push   0x0
c002036b:	6a 0c                	push   0xc
c002036d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020374:	50                   	push   eax
c0020375:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002037b:	e8 74 e8 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020380:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020386:	83 c4 20             	add    esp,0x20
c0020389:	c1 e0 06             	shl    eax,0x6
c002038c:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c0020392:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c0020399:	0f 84 00 01 00 00    	je     c002049f <ATA::open(int, int, void*)+0x1d3>
c002039f:	83 ec 0c             	sub    esp,0xc
c00203a2:	6a 08                	push   0x8
c00203a4:	e8 ea fb fe ff       	call   c000ff93 <Phys::allocateContiguousPages(int)>
c00203a9:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00203af:	c7 04 24 06 9b 02 c0 	mov    DWORD PTR [esp],0xc0029b06
c00203b6:	e8 c1 6b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00203bb:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00203c2:	e8 88 2e ff ff       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c00203c7:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00203cd:	6a 03                	push   0x3
c00203cf:	50                   	push   eax
c00203d0:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00203d6:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c00203dc:	e8 51 35 ff ff       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c00203e1:	83 c4 20             	add    esp,0x20
c00203e4:	e8 c3 fa fe ff       	call   c000feac <Phys::allocatePage()>
c00203e9:	83 ec 0c             	sub    esp,0xc
c00203ec:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c00203f2:	6a 01                	push   0x1
c00203f4:	e8 56 2e ff ff       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c00203f9:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c00203ff:	6a 03                	push   0x3
c0020401:	50                   	push   eax
c0020402:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c0020408:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c002040e:	e8 1f 35 ff ff       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020413:	83 c4 14             	add    esp,0x14
c0020416:	68 3f 9b 02 c0       	push   0xc0029b3f
c002041b:	e8 5c 6b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020420:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c0020427:	50                   	push   eax
c0020428:	6a 12                	push   0x12
c002042a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020431:	50                   	push   eax
c0020432:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020438:	e8 b7 e7 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002043d:	83 c4 20             	add    esp,0x20
c0020440:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c0020446:	0f b6 c4             	movzx  eax,ah
c0020449:	50                   	push   eax
c002044a:	6a 13                	push   0x13
c002044c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020453:	50                   	push   eax
c0020454:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002045a:	e8 95 e7 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002045f:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c0020466:	50                   	push   eax
c0020467:	6a 14                	push   0x14
c0020469:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020470:	50                   	push   eax
c0020471:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020477:	e8 78 e7 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002047c:	83 c4 20             	add    esp,0x20
c002047f:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c0020486:	50                   	push   eax
c0020487:	6a 15                	push   0x15
c0020489:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020490:	50                   	push   eax
c0020491:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020497:	e8 58 e7 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002049c:	83 c4 10             	add    esp,0x10
c002049f:	83 ec 0c             	sub    esp,0xc
c00204a2:	53                   	push   ebx
c00204a3:	e8 f6 99 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c00204a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00204ab:	e8 5a a8 fe ff       	call   c000ad0a <createPartitionsForDisk(PhysicalDisk*)>
c00204b0:	31 c0                	xor    eax,eax
c00204b2:	83 c4 18             	add    esp,0x18
c00204b5:	5b                   	pop    ebx
c00204b6:	c3                   	ret    

c00204b7 <combineCharAndColour(char, unsigned char)>:
c00204b7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00204bc:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c00204c2:	c1 e0 08             	shl    eax,0x8
c00204c5:	09 d0                	or     eax,edx
c00204c7:	c3                   	ret    

c00204c8 <combineColours(unsigned char, unsigned char)>:
c00204c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00204cd:	c1 e0 04             	shl    eax,0x4
c00204d0:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c00204d4:	c3                   	ret    
c00204d5:	90                   	nop

c00204d6 <ATAPI::write(unsigned long long, int, void*)>:
c00204d6:	b8 03 00 00 00       	mov    eax,0x3
c00204db:	c3                   	ret    

c00204dc <ATAPI::close(int, int, void*)>:
c00204dc:	83 ec 0c             	sub    esp,0xc
c00204df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00204e9:	85 c0                	test   eax,eax
c00204eb:	74 0c                	je     c00204f9 <ATAPI::close(int, int, void*)+0x1d>
c00204ed:	83 ec 0c             	sub    esp,0xc
c00204f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00204f2:	50                   	push   eax
c00204f3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00204f6:	83 c4 10             	add    esp,0x10
c00204f9:	31 c0                	xor    eax,eax
c00204fb:	83 c4 0c             	add    esp,0xc
c00204fe:	c3                   	ret    
c00204ff:	90                   	nop

c0020500 <ATAPI::ATAPI()>:
c0020500:	83 ec 0c             	sub    esp,0xc
c0020503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020507:	83 ec 04             	sub    esp,0x4
c002050a:	68 00 08 00 00       	push   0x800
c002050f:	68 f1 9c 02 c0       	push   0xc0029cf1
c0020514:	50                   	push   eax
c0020515:	e8 1c 99 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002051a:	83 c4 10             	add    esp,0x10
c002051d:	ba 00 9c 02 c0       	mov    edx,0xc0029c00
c0020522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020526:	89 10                	mov    DWORD PTR [eax],edx
c0020528:	90                   	nop
c0020529:	83 c4 0c             	add    esp,0xc
c002052c:	c3                   	ret    
c002052d:	90                   	nop

c002052e <ATAPI::readyForCommand()>:
c002052e:	56                   	push   esi
c002052f:	53                   	push   ebx
c0020530:	31 db                	xor    ebx,ebx
c0020532:	50                   	push   eax
c0020533:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020537:	50                   	push   eax
c0020538:	6a 0c                	push   0xc
c002053a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020541:	50                   	push   eax
c0020542:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020548:	e8 67 e7 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c002054d:	83 c4 10             	add    esp,0x10
c0020550:	a8 88                	test   al,0x88
c0020552:	74 26                	je     c002057a <ATAPI::readyForCommand()+0x4c>
c0020554:	43                   	inc    ebx
c0020555:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002055b:	7e da                	jle    c0020537 <ATAPI::readyForCommand()+0x9>
c002055d:	51                   	push   ecx
c002055e:	51                   	push   ecx
c002055f:	6a 00                	push   0x0
c0020561:	68 5e 01 00 00       	push   0x15e
c0020566:	e8 c9 64 ff ff       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c002056b:	83 c4 10             	add    esp,0x10
c002056e:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0020574:	75 c1                	jne    c0020537 <ATAPI::readyForCommand()+0x9>
c0020576:	31 c0                	xor    eax,eax
c0020578:	eb 02                	jmp    c002057c <ATAPI::readyForCommand()+0x4e>
c002057a:	b0 01                	mov    al,0x1
c002057c:	5a                   	pop    edx
c002057d:	5b                   	pop    ebx
c002057e:	5e                   	pop    esi
c002057f:	c3                   	ret    

c0020580 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020580:	55                   	push   ebp
c0020581:	57                   	push   edi
c0020582:	56                   	push   esi
c0020583:	53                   	push   ebx
c0020584:	83 ec 20             	sub    esp,0x20
c0020587:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002058b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002058f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020593:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020597:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002059b:	6a 01                	push   0x1
c002059d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205a4:	50                   	push   eax
c00205a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205ab:	e8 4e e8 ff ff       	call   c001edfe <IDE::enableIRQs(unsigned char, bool)>
c00205b0:	5e                   	pop    esi
c00205b1:	58                   	pop    eax
c00205b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205b9:	50                   	push   eax
c00205ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205c0:	e8 09 e6 ff ff       	call   c001ebce <IDE::prepareInterrupt(unsigned char)>
c00205c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00205c8:	e8 61 ff ff ff       	call   c002052e <ATAPI::readyForCommand()>
c00205cd:	83 c4 10             	add    esp,0x10
c00205d0:	84 c0                	test   al,al
c00205d2:	75 0a                	jne    c00205de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00205d4:	bb 01 00 00 00       	mov    ebx,0x1
c00205d9:	e9 60 02 00 00       	jmp    c002083e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c00205de:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c00205e4:	c1 e0 04             	shl    eax,0x4
c00205e7:	0f b6 c0             	movzx  eax,al
c00205ea:	50                   	push   eax
c00205eb:	6a 06                	push   0x6
c00205ed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205f4:	50                   	push   eax
c00205f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205fb:	e8 f4 e5 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020600:	6a 00                	push   0x0
c0020602:	6a 01                	push   0x1
c0020604:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002060b:	50                   	push   eax
c002060c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020612:	e8 dd e5 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020617:	83 c4 20             	add    esp,0x20
c002061a:	0f b6 c3             	movzx  eax,bl
c002061d:	0f b6 df             	movzx  ebx,bh
c0020620:	50                   	push   eax
c0020621:	6a 04                	push   0x4
c0020623:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002062a:	50                   	push   eax
c002062b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020631:	e8 be e5 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020636:	53                   	push   ebx
c0020637:	6a 05                	push   0x5
c0020639:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020640:	50                   	push   eax
c0020641:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020647:	e8 a8 e5 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002064c:	83 c4 20             	add    esp,0x20
c002064f:	68 a0 00 00 00       	push   0xa0
c0020654:	6a 07                	push   0x7
c0020656:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002065d:	50                   	push   eax
c002065e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020664:	e8 8b e5 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020669:	83 c4 0c             	add    esp,0xc
c002066c:	6a 01                	push   0x1
c002066e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020675:	50                   	push   eax
c0020676:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002067c:	e8 19 f3 ff ff       	call   c001f99a <IDE::polling(unsigned char, unsigned int)>
c0020681:	83 c4 10             	add    esp,0x10
c0020684:	0f b6 d8             	movzx  ebx,al
c0020687:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002068d:	85 db                	test   ebx,ebx
c002068f:	74 20                	je     c00206b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0020691:	53                   	push   ebx
c0020692:	0f b6 c0             	movzx  eax,al
c0020695:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002069c:	52                   	push   edx
c002069d:	50                   	push   eax
c002069e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206a4:	e8 37 f2 ff ff       	call   c001f8e0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00206a9:	83 c4 10             	add    esp,0x10
c00206ac:	e9 8d 01 00 00       	jmp    c002083e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c00206b1:	0f b6 c0             	movzx  eax,al
c00206b4:	53                   	push   ebx
c00206b5:	53                   	push   ebx
c00206b6:	50                   	push   eax
c00206b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206bd:	e8 20 e5 ff ff       	call   c001ebe2 <IDE::getBase(unsigned char)>
c00206c2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00206c6:	b9 06 00 00 00       	mov    ecx,0x6
c00206cb:	89 c2                	mov    edx,eax
c00206cd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00206d0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00206d4:	83 c4 10             	add    esp,0x10
c00206d7:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00206dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00206e0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00206e6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00206ed:	85 db                	test   ebx,ebx
c00206ef:	0f 84 ec 00 00 00    	je     c00207e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c00206f5:	51                   	push   ecx
c00206f6:	51                   	push   ecx
c00206f7:	52                   	push   edx
c00206f8:	50                   	push   eax
c00206f9:	e8 64 e6 ff ff       	call   c001ed62 <IDE::waitInterrupt(unsigned char)>
c00206fe:	83 c4 10             	add    esp,0x10
c0020701:	84 c0                	test   al,al
c0020703:	0f 84 cb fe ff ff    	je     c00205d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020709:	56                   	push   esi
c002070a:	56                   	push   esi
c002070b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020712:	50                   	push   eax
c0020713:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020719:	e8 b0 e4 ff ff       	call   c001ebce <IDE::prepareInterrupt(unsigned char)>
c002071e:	83 c4 0c             	add    esp,0xc
c0020721:	6a 04                	push   0x4
c0020723:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002072a:	50                   	push   eax
c002072b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020731:	e8 7e e5 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c0020736:	83 c4 0c             	add    esp,0xc
c0020739:	89 c6                	mov    esi,eax
c002073b:	6a 05                	push   0x5
c002073d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020744:	50                   	push   eax
c0020745:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002074b:	e8 64 e5 ff ff       	call   c001ecb4 <IDE::read(unsigned char, unsigned char)>
c0020750:	89 f1                	mov    ecx,esi
c0020752:	0f b6 c0             	movzx  eax,al
c0020755:	0f b6 f1             	movzx  esi,cl
c0020758:	c1 e0 08             	shl    eax,0x8
c002075b:	09 c6                	or     esi,eax
c002075d:	d1 fe                	sar    esi,1
c002075f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0020763:	83 c4 10             	add    esp,0x10
c0020766:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002076b:	74 41                	je     c00207ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002076d:	31 c9                	xor    ecx,ecx
c002076f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020775:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002077c:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020780:	75 0a                	jne    c002078c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c0020782:	01 c9                	add    ecx,ecx
c0020784:	01 cd                	add    ebp,ecx
c0020786:	4b                   	dec    ebx
c0020787:	e9 54 ff ff ff       	jmp    c00206e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002078c:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020791:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020795:	51                   	push   ecx
c0020796:	51                   	push   ecx
c0020797:	52                   	push   edx
c0020798:	50                   	push   eax
c0020799:	e8 44 e4 ff ff       	call   c001ebe2 <IDE::getBase(unsigned char)>
c002079e:	89 c2                	mov    edx,eax
c00207a0:	89 f0                	mov    eax,esi
c00207a2:	66 ef                	out    dx,ax
c00207a4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00207a8:	83 c4 10             	add    esp,0x10
c00207ab:	41                   	inc    ecx
c00207ac:	eb c1                	jmp    c002076f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c00207ae:	31 f6                	xor    esi,esi
c00207b0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00207b6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00207bd:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00207c1:	75 06                	jne    c00207c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c00207c3:	01 f6                	add    esi,esi
c00207c5:	01 f5                	add    ebp,esi
c00207c7:	eb bd                	jmp    c0020786 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c00207c9:	51                   	push   ecx
c00207ca:	51                   	push   ecx
c00207cb:	52                   	push   edx
c00207cc:	50                   	push   eax
c00207cd:	e8 10 e4 ff ff       	call   c001ebe2 <IDE::getBase(unsigned char)>
c00207d2:	89 c2                	mov    edx,eax
c00207d4:	66 ed                	in     ax,dx
c00207d6:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00207db:	83 c4 10             	add    esp,0x10
c00207de:	46                   	inc    esi
c00207df:	eb cf                	jmp    c00207b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c00207e1:	51                   	push   ecx
c00207e2:	51                   	push   ecx
c00207e3:	52                   	push   edx
c00207e4:	50                   	push   eax
c00207e5:	e8 78 e5 ff ff       	call   c001ed62 <IDE::waitInterrupt(unsigned char)>
c00207ea:	83 c4 10             	add    esp,0x10
c00207ed:	84 c0                	test   al,al
c00207ef:	0f 84 df fd ff ff    	je     c00205d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00207f5:	bb a0 86 01 00       	mov    ebx,0x186a0
c00207fa:	52                   	push   edx
c00207fb:	52                   	push   edx
c00207fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020803:	50                   	push   eax
c0020804:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002080a:	e8 bf e3 ff ff       	call   c001ebce <IDE::prepareInterrupt(unsigned char)>
c002080f:	83 c4 10             	add    esp,0x10
c0020812:	50                   	push   eax
c0020813:	50                   	push   eax
c0020814:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002081b:	50                   	push   eax
c002081c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020822:	e8 bb e3 ff ff       	call   c001ebe2 <IDE::getBase(unsigned char)>
c0020827:	8d 50 07             	lea    edx,[eax+0x7]
c002082a:	ec                   	in     al,dx
c002082b:	83 c4 10             	add    esp,0x10
c002082e:	a8 88                	test   al,0x88
c0020830:	74 0a                	je     c002083c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c0020832:	4b                   	dec    ebx
c0020833:	75 dd                	jne    c0020812 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c0020835:	bb 02 00 00 00       	mov    ebx,0x2
c002083a:	eb 02                	jmp    c002083e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002083c:	31 db                	xor    ebx,ebx
c002083e:	83 c4 1c             	add    esp,0x1c
c0020841:	89 d8                	mov    eax,ebx
c0020843:	5b                   	pop    ebx
c0020844:	5e                   	pop    esi
c0020845:	5f                   	pop    edi
c0020846:	5d                   	pop    ebp
c0020847:	c3                   	ret    

c0020848 <ATAPI::diskRemoved()>:
c0020848:	53                   	push   ebx
c0020849:	83 ec 14             	sub    esp,0x14
c002084c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020850:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020857:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002085d:	e8 96 a1 fe ff       	call   c000a9f8 <LogicalDisk::unmount()>
c0020862:	58                   	pop    eax
c0020863:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020869:	e8 82 ab fe ff       	call   c000b3f0 <VCache::writeWriteBuffer()>
c002086e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020874:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020878:	83 c4 18             	add    esp,0x18
c002087b:	5b                   	pop    ebx
c002087c:	e9 5f ab fe ff       	jmp    c000b3e0 <VCache::invalidateReadBuffer()>
c0020881:	90                   	nop

c0020882 <ATAPI::eject()>:
c0020882:	57                   	push   edi
c0020883:	b9 03 00 00 00       	mov    ecx,0x3
c0020888:	53                   	push   ebx
c0020889:	83 ec 14             	sub    esp,0x14
c002088c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020890:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020894:	fc                   	cld    
c0020895:	31 c0                	xor    eax,eax
c0020897:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020899:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002089e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00208a3:	50                   	push   eax
c00208a4:	50                   	push   eax
c00208a5:	6a 00                	push   0x0
c00208a7:	6a 00                	push   0x0
c00208a9:	6a 00                	push   0x0
c00208ab:	6a 02                	push   0x2
c00208ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00208b1:	50                   	push   eax
c00208b2:	53                   	push   ebx
c00208b3:	e8 c8 fc ff ff       	call   c0020580 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00208b8:	83 c4 14             	add    esp,0x14
c00208bb:	53                   	push   ebx
c00208bc:	e8 87 ff ff ff       	call   c0020848 <ATAPI::diskRemoved()>
c00208c1:	83 c4 24             	add    esp,0x24
c00208c4:	31 c0                	xor    eax,eax
c00208c6:	5b                   	pop    ebx
c00208c7:	5f                   	pop    edi
c00208c8:	c3                   	ret    
c00208c9:	90                   	nop

c00208ca <ATAPI::diskInserted()>:
c00208ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208ce:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c00208d5:	c3                   	ret    

c00208d6 <ATAPI::detectMedia()>:
c00208d6:	56                   	push   esi
c00208d7:	53                   	push   ebx
c00208d8:	83 ec 28             	sub    esp,0x28
c00208db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00208df:	6a 0c                	push   0xc
c00208e1:	6a 00                	push   0x0
c00208e3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00208e7:	56                   	push   esi
c00208e8:	e8 03 fc fd ff       	call   c00004f0 <memset>
c00208ed:	58                   	pop    eax
c00208ee:	5a                   	pop    edx
c00208ef:	6a 00                	push   0x0
c00208f1:	6a 00                	push   0x0
c00208f3:	6a 00                	push   0x0
c00208f5:	6a 00                	push   0x0
c00208f7:	56                   	push   esi
c00208f8:	53                   	push   ebx
c00208f9:	e8 82 fc ff ff       	call   c0020580 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00208fe:	83 c4 1c             	add    esp,0x1c
c0020901:	6a 0c                	push   0xc
c0020903:	6a 00                	push   0x0
c0020905:	56                   	push   esi
c0020906:	e8 e5 fb fd ff       	call   c00004f0 <memset>
c002090b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020910:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020915:	59                   	pop    ecx
c0020916:	58                   	pop    eax
c0020917:	6a 01                	push   0x1
c0020919:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002091d:	50                   	push   eax
c002091e:	6a 00                	push   0x0
c0020920:	6a 12                	push   0x12
c0020922:	56                   	push   esi
c0020923:	53                   	push   ebx
c0020924:	e8 57 fc ff ff       	call   c0020580 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020929:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002092d:	83 c4 20             	add    esp,0x20
c0020930:	83 e0 7f             	and    eax,0x7f
c0020933:	83 f8 70             	cmp    eax,0x70
c0020936:	74 15                	je     c002094d <ATAPI::detectMedia()+0x77>
c0020938:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002093f:	75 0c                	jne    c002094d <ATAPI::detectMedia()+0x77>
c0020941:	83 ec 0c             	sub    esp,0xc
c0020944:	53                   	push   ebx
c0020945:	e8 80 ff ff ff       	call   c00208ca <ATAPI::diskInserted()>
c002094a:	83 c4 10             	add    esp,0x10
c002094d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020951:	83 e0 0f             	and    eax,0xf
c0020954:	83 f8 02             	cmp    eax,0x2
c0020957:	75 1b                	jne    c0020974 <ATAPI::detectMedia()+0x9e>
c0020959:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002095e:	75 2d                	jne    c002098d <ATAPI::detectMedia()+0xb7>
c0020960:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020967:	74 24                	je     c002098d <ATAPI::detectMedia()+0xb7>
c0020969:	83 ec 0c             	sub    esp,0xc
c002096c:	53                   	push   ebx
c002096d:	e8 d6 fe ff ff       	call   c0020848 <ATAPI::diskRemoved()>
c0020972:	eb 16                	jmp    c002098a <ATAPI::detectMedia()+0xb4>
c0020974:	85 c0                	test   eax,eax
c0020976:	75 15                	jne    c002098d <ATAPI::detectMedia()+0xb7>
c0020978:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002097f:	75 0c                	jne    c002098d <ATAPI::detectMedia()+0xb7>
c0020981:	83 ec 0c             	sub    esp,0xc
c0020984:	53                   	push   ebx
c0020985:	e8 40 ff ff ff       	call   c00208ca <ATAPI::diskInserted()>
c002098a:	83 c4 10             	add    esp,0x10
c002098d:	83 c4 24             	add    esp,0x24
c0020990:	5b                   	pop    ebx
c0020991:	5e                   	pop    esi
c0020992:	c3                   	ret    
c0020993:	90                   	nop

c0020994 <ATAPI::open(int, int, void*)>:
c0020994:	56                   	push   esi
c0020995:	53                   	push   ebx
c0020996:	50                   	push   eax
c0020997:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002099b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002099f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00209a3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00209a9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00209af:	c1 e0 06             	shl    eax,0x6
c00209b2:	01 d0                	add    eax,edx
c00209b4:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00209bb:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00209c1:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00209c8:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00209d2:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00209d8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00209df:	6a 04                	push   0x4
c00209e1:	6a 0c                	push   0xc
c00209e3:	51                   	push   ecx
c00209e4:	52                   	push   edx
c00209e5:	e8 0a e2 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00209ea:	90                   	nop
c00209eb:	90                   	nop
c00209ec:	6a 00                	push   0x0
c00209ee:	6a 0c                	push   0xc
c00209f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00209f7:	50                   	push   eax
c00209f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00209fe:	e8 f1 e1 ff ff       	call   c001ebf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020a03:	83 c4 14             	add    esp,0x14
c0020a06:	68 78 01 00 00       	push   0x178
c0020a0b:	e8 53 ee fe ff       	call   c000f863 <malloc>
c0020a10:	83 c4 0c             	add    esp,0xc
c0020a13:	89 c6                	mov    esi,eax
c0020a15:	6a 00                	push   0x0
c0020a17:	68 ff ff ff 7f       	push   0x7fffffff
c0020a1c:	6a 00                	push   0x0
c0020a1e:	6a 00                	push   0x0
c0020a20:	53                   	push   ebx
c0020a21:	68 a3 9d 02 c0       	push   0xc0029da3
c0020a26:	50                   	push   eax
c0020a27:	e8 0a 9e fe ff       	call   c000a836 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020a2c:	83 c4 14             	add    esp,0x14
c0020a2f:	56                   	push   esi
c0020a30:	e8 c1 9e fe ff       	call   c000a8f6 <LogicalDisk::assignDriveLetter()>
c0020a35:	5a                   	pop    edx
c0020a36:	0f be c0             	movsx  eax,al
c0020a39:	59                   	pop    ecx
c0020a3a:	50                   	push   eax
c0020a3b:	68 e8 9b 02 c0       	push   0xc0029be8
c0020a40:	e8 37 65 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020a45:	58                   	pop    eax
c0020a46:	5a                   	pop    edx
c0020a47:	56                   	push   esi
c0020a48:	53                   	push   ebx
c0020a49:	e8 06 90 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c0020a4e:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020a54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020a57:	e8 42 94 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020a5c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020a63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020a66:	e8 6b fe ff ff       	call   c00208d6 <ATAPI::detectMedia()>
c0020a6b:	83 c4 14             	add    esp,0x14
c0020a6e:	31 c0                	xor    eax,eax
c0020a70:	5b                   	pop    ebx
c0020a71:	5e                   	pop    esi
c0020a72:	c3                   	ret    
c0020a73:	90                   	nop

c0020a74 <ATAPI::read(unsigned long long, int, void*)>:
c0020a74:	55                   	push   ebp
c0020a75:	57                   	push   edi
c0020a76:	56                   	push   esi
c0020a77:	53                   	push   ebx
c0020a78:	83 ec 1c             	sub    esp,0x1c
c0020a7b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020a7f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020a83:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020a87:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020a8e:	74 3c                	je     c0020acc <ATAPI::read(unsigned long long, int, void*)+0x58>
c0020a90:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020a94:	b9 03 00 00 00       	mov    ecx,0x3
c0020a99:	fc                   	cld    
c0020a9a:	31 c0                	xor    eax,eax
c0020a9c:	0f ce                	bswap  esi
c0020a9e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020aa0:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020aa5:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020aa9:	89 e8                	mov    eax,ebp
c0020aab:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020aaf:	50                   	push   eax
c0020ab0:	50                   	push   eax
c0020ab1:	55                   	push   ebp
c0020ab2:	c1 e5 0b             	shl    ebp,0xb
c0020ab5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020ab9:	6a 00                	push   0x0
c0020abb:	55                   	push   ebp
c0020abc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020ac0:	50                   	push   eax
c0020ac1:	53                   	push   ebx
c0020ac2:	e8 b9 fa ff ff       	call   c0020580 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020ac7:	83 c4 20             	add    esp,0x20
c0020aca:	eb 1a                	jmp    c0020ae6 <ATAPI::read(unsigned long long, int, void*)+0x72>
c0020acc:	83 ec 0c             	sub    esp,0xc
c0020acf:	53                   	push   ebx
c0020ad0:	e8 01 fe ff ff       	call   c00208d6 <ATAPI::detectMedia()>
c0020ad5:	83 c4 10             	add    esp,0x10
c0020ad8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020adf:	75 af                	jne    c0020a90 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020ae1:	b8 02 00 00 00       	mov    eax,0x2
c0020ae6:	83 c4 1c             	add    esp,0x1c
c0020ae9:	5b                   	pop    ebx
c0020aea:	5e                   	pop    esi
c0020aeb:	5f                   	pop    edi
c0020aec:	5d                   	pop    ebp
c0020aed:	c3                   	ret    

c0020aee <SATA::close(int, int, void*)>:
c0020aee:	83 ec 0c             	sub    esp,0xc
c0020af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020af5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020afb:	85 c0                	test   eax,eax
c0020afd:	74 0c                	je     c0020b0b <SATA::close(int, int, void*)+0x1d>
c0020aff:	83 ec 0c             	sub    esp,0xc
c0020b02:	8b 10                	mov    edx,DWORD PTR [eax]
c0020b04:	50                   	push   eax
c0020b05:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020b08:	83 c4 10             	add    esp,0x10
c0020b0b:	31 c0                	xor    eax,eax
c0020b0d:	83 c4 0c             	add    esp,0xc
c0020b10:	c3                   	ret    
c0020b11:	90                   	nop

c0020b12 <SATA::powerSaving(PowerSavingLevel)>:
c0020b12:	c3                   	ret    
c0020b13:	90                   	nop

c0020b14 <SATA::open(int, int, void*)>:
c0020b14:	56                   	push   esi
c0020b15:	53                   	push   ebx
c0020b16:	83 ec 10             	sub    esp,0x10
c0020b19:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020b1d:	68 30 9c 02 c0       	push   0xc0029c30
c0020b22:	e8 55 64 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020b27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020b2b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020b35:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020b3b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020b45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020b49:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020b53:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020b59:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020b60:	e8 47 f3 fe ff       	call   c000feac <Phys::allocatePage()>
c0020b65:	89 c6                	mov    esi,eax
c0020b67:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020b6d:	81 c6 00 10 00 00    	add    esi,0x1000
c0020b73:	e8 34 f3 fe ff       	call   c000feac <Phys::allocatePage()>
c0020b78:	83 c4 10             	add    esp,0x10
c0020b7b:	39 c6                	cmp    esi,eax
c0020b7d:	74 10                	je     c0020b8f <SATA::open(int, int, void*)+0x7b>
c0020b7f:	83 ec 0c             	sub    esp,0xc
c0020b82:	68 3c 9c 02 c0       	push   0xc0029c3c
c0020b87:	e8 2c f1 fe ff       	call   c000fcb8 <KePanic(char const*)>
c0020b8c:	83 c4 10             	add    esp,0x10
c0020b8f:	83 ec 0c             	sub    esp,0xc
c0020b92:	6a 02                	push   0x2
c0020b94:	e8 b6 26 ff ff       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c0020b99:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020b9f:	6a 03                	push   0x3
c0020ba1:	50                   	push   eax
c0020ba2:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020ba8:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c0020bae:	e8 7f 2d ff ff       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020bb3:	83 c4 14             	add    esp,0x14
c0020bb6:	53                   	push   ebx
c0020bb7:	e8 e2 92 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020bbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020bbf:	e8 46 a1 fe ff       	call   c000ad0a <createPartitionsForDisk(PhysicalDisk*)>
c0020bc4:	83 c4 14             	add    esp,0x14
c0020bc7:	31 c0                	xor    eax,eax
c0020bc9:	5b                   	pop    ebx
c0020bca:	5e                   	pop    esi
c0020bcb:	c3                   	ret    

c0020bcc <SATA::SATA()>:
c0020bcc:	83 ec 0c             	sub    esp,0xc
c0020bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bd3:	83 ec 04             	sub    esp,0x4
c0020bd6:	68 00 02 00 00       	push   0x200
c0020bdb:	68 50 9c 02 c0       	push   0xc0029c50
c0020be0:	50                   	push   eax
c0020be1:	e8 50 92 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020be6:	83 c4 10             	add    esp,0x10
c0020be9:	ba c0 9c 02 c0       	mov    edx,0xc0029cc0
c0020bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bf2:	89 10                	mov    DWORD PTR [eax],edx
c0020bf4:	90                   	nop
c0020bf5:	83 c4 0c             	add    esp,0xc
c0020bf8:	c3                   	ret    
c0020bf9:	90                   	nop

c0020bfa <SATA::access(unsigned long long, int, void*, bool)>:
c0020bfa:	55                   	push   ebp
c0020bfb:	57                   	push   edi
c0020bfc:	56                   	push   esi
c0020bfd:	53                   	push   ebx
c0020bfe:	83 ec 2c             	sub    esp,0x2c
c0020c01:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020c05:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020c09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020c0d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020c11:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020c15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c19:	fa                   	cli    
c0020c1a:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c0020c20:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020c25:	7e 10                	jle    c0020c37 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c0020c27:	83 ec 0c             	sub    esp,0xc
c0020c2a:	68 60 9c 02 c0       	push   0xc0029c60
c0020c2f:	e8 84 f0 fe ff       	call   c000fcb8 <KePanic(char const*)>
c0020c34:	83 c4 10             	add    esp,0x10
c0020c37:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020c3d:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020c43:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020c49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c4d:	89 d0                	mov    eax,edx
c0020c4f:	c1 e0 07             	shl    eax,0x7
c0020c52:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020c56:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020c60:	51                   	push   ecx
c0020c61:	8d 42 02             	lea    eax,[edx+0x2]
c0020c64:	51                   	push   ecx
c0020c65:	c1 e0 07             	shl    eax,0x7
c0020c68:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020c6c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020c70:	50                   	push   eax
c0020c71:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020c77:	e8 fe ed ff ff       	call   c001fa7a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020c7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020c80:	83 c4 10             	add    esp,0x10
c0020c83:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020c88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020c8c:	0f 84 a4 01 00 00    	je     c0020e36 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0020c92:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020c96:	c1 e0 09             	shl    eax,0x9
c0020c99:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020c9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ca2:	74 0e                	je     c0020cb2 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0020ca4:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020caa:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020cae:	89 c1                	mov    ecx,eax
c0020cb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020cb2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020cb8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020cbc:	8d 42 02             	lea    eax,[edx+0x2]
c0020cbf:	c1 e0 07             	shl    eax,0x7
c0020cc2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020cc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0020cc8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020cce:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020cd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020cd8:	c1 e1 05             	shl    ecx,0x5
c0020cdb:	01 c8                	add    eax,ecx
c0020cdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020ce1:	83 e1 01             	and    ecx,0x1
c0020ce4:	89 ce                	mov    esi,ecx
c0020ce6:	8a 08                	mov    cl,BYTE PTR [eax]
c0020ce8:	c1 e6 06             	shl    esi,0x6
c0020ceb:	83 e1 bf             	and    ecx,0xffffffbf
c0020cee:	09 f1                	or     ecx,esi
c0020cf0:	88 08                	mov    BYTE PTR [eax],cl
c0020cf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020cf4:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020cfa:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020d00:	89 08                	mov    DWORD PTR [eax],ecx
c0020d02:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020d08:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0020d0e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020d14:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020d17:	50                   	push   eax
c0020d18:	68 90 00 00 00       	push   0x90
c0020d1d:	6a 00                	push   0x0
c0020d1f:	56                   	push   esi
c0020d20:	e8 cb f7 fd ff       	call   c00004f0 <memset>
c0020d25:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020d2b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020d31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020d35:	83 c4 10             	add    esp,0x10
c0020d38:	48                   	dec    eax
c0020d39:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020d3e:	89 c1                	mov    ecx,eax
c0020d40:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020d46:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020d4b:	09 c8                	or     eax,ecx
c0020d4d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020d53:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020d59:	83 c8 80             	or     eax,0xffffff80
c0020d5c:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0020d62:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020d65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d69:	25 00 7f 00 00       	and    eax,0x7f00
c0020d6e:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020d73:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020d78:	66 89 06             	mov    WORD PTR [esi],ax
c0020d7b:	b0 35                	mov    al,0x35
c0020d7d:	75 02                	jne    c0020d81 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c0020d7f:	b0 25                	mov    al,0x25
c0020d81:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020d84:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0020d88:	89 e8                	mov    eax,ebp
c0020d8a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020d8e:	c1 e8 10             	shr    eax,0x10
c0020d91:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020d94:	89 e8                	mov    eax,ebp
c0020d96:	c1 e8 18             	shr    eax,0x18
c0020d99:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020d9c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020da0:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020da3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020da7:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020daa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020dae:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020db2:	89 d6                	mov    esi,edx
c0020db4:	31 c0                	xor    eax,eax
c0020db6:	c1 e6 07             	shl    esi,0x7
c0020db9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0020dbd:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0020dc3:	80 e1 88             	and    cl,0x88
c0020dc6:	74 0a                	je     c0020dd2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020dc8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020dcd:	74 0a                	je     c0020dd9 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0020dcf:	40                   	inc    eax
c0020dd0:	eb eb                	jmp    c0020dbd <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0020dd2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020dd7:	75 0a                	jne    c0020de3 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020dd9:	83 ec 0c             	sub    esp,0xc
c0020ddc:	68 99 9c 02 c0       	push   0xc0029c99
c0020de1:	eb 36                	jmp    c0020e19 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c0020de3:	b8 01 00 00 00       	mov    eax,0x1
c0020de8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020dec:	c1 e2 07             	shl    edx,0x7
c0020def:	d3 e0                	shl    eax,cl
c0020df1:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0020df5:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020dfb:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020e01:	85 c8                	test   eax,ecx
c0020e03:	74 25                	je     c0020e2a <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0020e05:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020e0b:	0f ba e1 1e          	bt     ecx,0x1e
c0020e0f:	73 ea                	jae    c0020dfb <SATA::access(unsigned long long, int, void*, bool)+0x201>
c0020e11:	83 ec 0c             	sub    esp,0xc
c0020e14:	68 a7 9c 02 c0       	push   0xc0029ca7
c0020e19:	e8 5e 61 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020e1e:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0020e25:	83 c4 10             	add    esp,0x10
c0020e28:	eb 13                	jmp    c0020e3d <SATA::access(unsigned long long, int, void*, bool)+0x243>
c0020e2a:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020e30:	0f ba e0 1e          	bt     eax,0x1e
c0020e34:	73 18                	jae    c0020e4e <SATA::access(unsigned long long, int, void*, bool)+0x254>
c0020e36:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0020e3d:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c0020e44:	75 01                	jne    c0020e47 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c0020e46:	fb                   	sti    
c0020e47:	b8 01 00 00 00       	mov    eax,0x1
c0020e4c:	eb 2c                	jmp    c0020e7a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020e4e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020e53:	75 10                	jne    c0020e65 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c0020e55:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020e5b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020e5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020e63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e65:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0020e6c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0020e71:	85 c0                	test   eax,eax
c0020e73:	75 03                	jne    c0020e78 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020e75:	fb                   	sti    
c0020e76:	eb 02                	jmp    c0020e7a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020e78:	31 c0                	xor    eax,eax
c0020e7a:	83 c4 2c             	add    esp,0x2c
c0020e7d:	5b                   	pop    ebx
c0020e7e:	5e                   	pop    esi
c0020e7f:	5f                   	pop    edi
c0020e80:	5d                   	pop    ebp
c0020e81:	c3                   	ret    

c0020e82 <SATA::read(unsigned long long, int, void*)>:
c0020e82:	57                   	push   edi
c0020e83:	b8 04 00 00 00       	mov    eax,0x4
c0020e88:	56                   	push   esi
c0020e89:	53                   	push   ebx
c0020e8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e8e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020e92:	8d 7a ff             	lea    edi,[edx-0x1]
c0020e95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020e99:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020e9d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020ea3:	77 25                	ja     c0020eca <SATA::read(unsigned long long, int, void*)+0x48>
c0020ea5:	b8 06 00 00 00       	mov    eax,0x6
c0020eaa:	85 f6                	test   esi,esi
c0020eac:	74 1c                	je     c0020eca <SATA::read(unsigned long long, int, void*)+0x48>
c0020eae:	50                   	push   eax
c0020eaf:	50                   	push   eax
c0020eb0:	6a 00                	push   0x0
c0020eb2:	56                   	push   esi
c0020eb3:	52                   	push   edx
c0020eb4:	53                   	push   ebx
c0020eb5:	51                   	push   ecx
c0020eb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020eba:	e8 3b fd ff ff       	call   c0020bfa <SATA::access(unsigned long long, int, void*, bool)>
c0020ebf:	83 c4 20             	add    esp,0x20
c0020ec2:	85 c0                	test   eax,eax
c0020ec4:	0f 95 c0             	setne  al
c0020ec7:	0f b6 c0             	movzx  eax,al
c0020eca:	5b                   	pop    ebx
c0020ecb:	5e                   	pop    esi
c0020ecc:	5f                   	pop    edi
c0020ecd:	c3                   	ret    

c0020ece <SATA::write(unsigned long long, int, void*)>:
c0020ece:	55                   	push   ebp
c0020ecf:	b8 04 00 00 00       	mov    eax,0x4
c0020ed4:	57                   	push   edi
c0020ed5:	56                   	push   esi
c0020ed6:	53                   	push   ebx
c0020ed7:	83 ec 0c             	sub    esp,0xc
c0020eda:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020ede:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020ee2:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020ee5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020ee9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020eed:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020ef3:	77 3d                	ja     c0020f32 <SATA::write(unsigned long long, int, void*)+0x64>
c0020ef5:	b8 06 00 00 00       	mov    eax,0x6
c0020efa:	85 ed                	test   ebp,ebp
c0020efc:	74 34                	je     c0020f32 <SATA::write(unsigned long long, int, void*)+0x64>
c0020efe:	c1 e3 09             	shl    ebx,0x9
c0020f01:	01 eb                	add    ebx,ebp
c0020f03:	89 d6                	mov    esi,edx
c0020f05:	89 cf                	mov    edi,ecx
c0020f07:	83 c6 01             	add    esi,0x1
c0020f0a:	83 d7 00             	adc    edi,0x0
c0020f0d:	50                   	push   eax
c0020f0e:	50                   	push   eax
c0020f0f:	6a 01                	push   0x1
c0020f11:	55                   	push   ebp
c0020f12:	81 c5 00 02 00 00    	add    ebp,0x200
c0020f18:	6a 01                	push   0x1
c0020f1a:	51                   	push   ecx
c0020f1b:	52                   	push   edx
c0020f1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020f20:	e8 d5 fc ff ff       	call   c0020bfa <SATA::access(unsigned long long, int, void*, bool)>
c0020f25:	83 c4 20             	add    esp,0x20
c0020f28:	89 f2                	mov    edx,esi
c0020f2a:	89 f9                	mov    ecx,edi
c0020f2c:	39 dd                	cmp    ebp,ebx
c0020f2e:	75 d3                	jne    c0020f03 <SATA::write(unsigned long long, int, void*)+0x35>
c0020f30:	31 c0                	xor    eax,eax
c0020f32:	83 c4 0c             	add    esp,0xc
c0020f35:	5b                   	pop    ebx
c0020f36:	5e                   	pop    esi
c0020f37:	5f                   	pop    edi
c0020f38:	5d                   	pop    ebp
c0020f39:	c3                   	ret    

c0020f3a <SATAPI::write(unsigned long long, int, void*)>:
c0020f3a:	b8 03 00 00 00       	mov    eax,0x3
c0020f3f:	c3                   	ret    

c0020f40 <SATAPI::close(int, int, void*)>:
c0020f40:	83 ec 0c             	sub    esp,0xc
c0020f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f47:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020f4d:	85 c0                	test   eax,eax
c0020f4f:	74 0c                	je     c0020f5d <SATAPI::close(int, int, void*)+0x1d>
c0020f51:	83 ec 0c             	sub    esp,0xc
c0020f54:	8b 10                	mov    edx,DWORD PTR [eax]
c0020f56:	50                   	push   eax
c0020f57:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020f5a:	83 c4 10             	add    esp,0x10
c0020f5d:	31 c0                	xor    eax,eax
c0020f5f:	83 c4 0c             	add    esp,0xc
c0020f62:	c3                   	ret    
c0020f63:	90                   	nop

c0020f64 <SATAPI::SATAPI()>:
c0020f64:	83 ec 0c             	sub    esp,0xc
c0020f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f6b:	83 ec 04             	sub    esp,0x4
c0020f6e:	68 00 08 00 00       	push   0x800
c0020f73:	68 f0 9c 02 c0       	push   0xc0029cf0
c0020f78:	50                   	push   eax
c0020f79:	e8 b8 8e fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020f7e:	83 c4 10             	add    esp,0x10
c0020f81:	ba e4 9d 02 c0       	mov    edx,0xc0029de4
c0020f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f8a:	89 10                	mov    DWORD PTR [eax],edx
c0020f8c:	90                   	nop
c0020f8d:	83 c4 0c             	add    esp,0xc
c0020f90:	c3                   	ret    
c0020f91:	90                   	nop

c0020f92 <SATAPI::diskRemoved()>:
c0020f92:	c3                   	ret    
c0020f93:	90                   	nop

c0020f94 <SATAPI::diskInserted()>:
c0020f94:	83 ec 18             	sub    esp,0x18
c0020f97:	68 fc 9c 02 c0       	push   0xc0029cfc
c0020f9c:	e8 db 5f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fa5:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020fac:	83 c4 1c             	add    esp,0x1c
c0020faf:	c3                   	ret    

c0020fb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020fb0:	55                   	push   ebp
c0020fb1:	57                   	push   edi
c0020fb2:	56                   	push   esi
c0020fb3:	53                   	push   ebx
c0020fb4:	83 ec 34             	sub    esp,0x34
c0020fb7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020fbb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020fbf:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0020fc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020fc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0020fcb:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020fd1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020fd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020fdb:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020fe1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020fe5:	83 c0 02             	add    eax,0x2
c0020fe8:	c1 e0 07             	shl    eax,0x7
c0020feb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ff3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ff7:	c1 e0 07             	shl    eax,0x7
c0020ffa:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020ffe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021002:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002100c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021010:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021016:	e8 5f ea ff ff       	call   c001fa7a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002101b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002101f:	83 c4 10             	add    esp,0x10
c0021022:	b8 01 00 00 00       	mov    eax,0x1
c0021027:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002102c:	0f 84 57 02 00 00    	je     c0021289 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0021032:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002103c:	8b 00                	mov    eax,DWORD PTR [eax]
c002103e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0021044:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002104a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002104e:	c1 e1 05             	shl    ecx,0x5
c0021051:	01 c8                	add    eax,ecx
c0021053:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021055:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002105b:	81 c9 25 00 01 00    	or     ecx,0x10025
c0021061:	89 08                	mov    DWORD PTR [eax],ecx
c0021063:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021069:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002106f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0021075:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0021078:	8d 7b 40             	lea    edi,[ebx+0x40]
c002107b:	50                   	push   eax
c002107c:	68 90 00 00 00       	push   0x90
c0021081:	6a 00                	push   0x0
c0021083:	53                   	push   ebx
c0021084:	e8 67 f4 fd ff       	call   c00004f0 <memset>
c0021089:	b9 0c 00 00 00       	mov    ecx,0xc
c002108e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0021092:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021094:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002109a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002109e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00210a4:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00210a8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00210ac:	48                   	dec    eax
c00210ad:	25 ff ff 3f 00       	and    eax,0x3fffff
c00210b2:	89 c1                	mov    ecx,eax
c00210b4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00210ba:	25 00 00 c0 ff       	and    eax,0xffc00000
c00210bf:	09 c8                	or     eax,ecx
c00210c1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00210c7:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c00210cd:	83 c8 80             	or     eax,0xffffff80
c00210d0:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c00210d6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00210d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00210dd:	25 00 7f 00 00       	and    eax,0x7f00
c00210e2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00210e6:	0d 27 80 ff ff       	or     eax,0xffff8027
c00210eb:	66 89 03             	mov    WORD PTR [ebx],ax
c00210ee:	89 d0                	mov    eax,edx
c00210f0:	c1 ea 18             	shr    edx,0x18
c00210f3:	c1 e8 10             	shr    eax,0x10
c00210f6:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00210f9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00210fc:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0021100:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0021103:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021107:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002110a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002110e:	83 c4 10             	add    esp,0x10
c0021111:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0021115:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021119:	31 c0                	xor    eax,eax
c002111b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0021121:	80 e1 88             	and    cl,0x88
c0021124:	74 0a                	je     c0021130 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c0021126:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002112b:	74 0a                	je     c0021137 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c002112d:	40                   	inc    eax
c002112e:	eb eb                	jmp    c002111b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0021130:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021135:	75 43                	jne    c002117a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0021137:	83 ec 0c             	sub    esp,0xc
c002113a:	68 14 9d 02 c0       	push   0xc0029d14
c002113f:	e8 38 5e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021144:	58                   	pop    eax
c0021145:	5a                   	pop    edx
c0021146:	68 29 9d 02 c0       	push   0xc0029d29
c002114b:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c0021151:	e8 ce 14 ff ff       	call   c0012624 <VgaText::puts(char const*)>
c0021156:	59                   	pop    ecx
c0021157:	5b                   	pop    ebx
c0021158:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002115c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021162:	e8 ad e9 ff ff       	call   c001fb14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0021167:	5e                   	pop    esi
c0021168:	5f                   	pop    edi
c0021169:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002116d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021173:	e8 7c e9 ff ff       	call   c001faf4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0021178:	eb 48                	jmp    c00211c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002117a:	be 01 00 00 00       	mov    esi,0x1
c002117f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021183:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021187:	d3 e6                	shl    esi,cl
c0021189:	c1 e7 07             	shl    edi,0x7
c002118c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0021192:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c0021197:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002119b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c00211a1:	85 c6                	test   esi,eax
c00211a3:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00211a9:	0f 84 a7 00 00 00    	je     c0021256 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c00211af:	0f ba e0 1e          	bt     eax,0x1e
c00211b3:	73 1a                	jae    c00211cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c00211b5:	83 ec 0c             	sub    esp,0xc
c00211b8:	68 3b 9d 02 c0       	push   0xc0029d3b
c00211bd:	e8 ba 5d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00211c2:	83 c4 10             	add    esp,0x10
c00211c5:	b8 01 00 00 00       	mov    eax,0x1
c00211ca:	e9 ba 00 00 00       	jmp    c0021289 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c00211cf:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c00211d5:	83 f8 0d             	cmp    eax,0xd
c00211d8:	77 0b                	ja     c00211e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c00211da:	50                   	push   eax
c00211db:	50                   	push   eax
c00211dc:	6a 00                	push   0x0
c00211de:	68 c8 00 00 00       	push   0xc8
c00211e3:	eb 2a                	jmp    c002120f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c00211e5:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c00211eb:	83 f8 0d             	cmp    eax,0xd
c00211ee:	77 0b                	ja     c00211fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c00211f0:	51                   	push   ecx
c00211f1:	51                   	push   ecx
c00211f2:	6a 00                	push   0x0
c00211f4:	68 58 02 00 00       	push   0x258
c00211f9:	eb 14                	jmp    c002120f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c00211fb:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c0021201:	83 f8 06             	cmp    eax,0x6
c0021204:	77 11                	ja     c0021217 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0021206:	52                   	push   edx
c0021207:	52                   	push   edx
c0021208:	6a 00                	push   0x0
c002120a:	68 dc 05 00 00       	push   0x5dc
c002120f:	e8 20 58 ff ff       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c0021214:	83 c4 10             	add    esp,0x10
c0021217:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002121b:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002121e:	75 06                	jne    c0021226 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c0021220:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0021224:	74 16                	je     c002123c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0021226:	83 fb 06             	cmp    ebx,0x6
c0021229:	77 11                	ja     c002123c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c002122b:	50                   	push   eax
c002122c:	50                   	push   eax
c002122d:	6a 00                	push   0x0
c002122f:	68 c4 09 00 00       	push   0x9c4
c0021234:	e8 fb 57 ff ff       	call   c0016a34 <milliTenthSleep(unsigned long long)>
c0021239:	83 c4 10             	add    esp,0x10
c002123c:	43                   	inc    ebx
c002123d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c0021243:	0f 85 52 ff ff ff    	jne    c002119b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c0021249:	83 ec 0c             	sub    esp,0xc
c002124c:	68 4e 9d 02 c0       	push   0xc0029d4e
c0021251:	e9 67 ff ff ff       	jmp    c00211bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0021256:	0f ba e0 1e          	bt     eax,0x1e
c002125a:	73 0d                	jae    c0021269 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c002125c:	83 ec 0c             	sub    esp,0xc
c002125f:	68 62 9d 02 c0       	push   0xc0029d62
c0021264:	e9 54 ff ff ff       	jmp    c00211bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0021269:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002126e:	74 17                	je     c0021287 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0021270:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0021275:	74 10                	je     c0021287 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0021277:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002127d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021281:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021285:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021287:	31 c0                	xor    eax,eax
c0021289:	83 c4 2c             	add    esp,0x2c
c002128c:	5b                   	pop    ebx
c002128d:	5e                   	pop    esi
c002128e:	5f                   	pop    edi
c002128f:	5d                   	pop    ebp
c0021290:	c3                   	ret    
c0021291:	90                   	nop

c0021292 <SATAPI::eject()>:
c0021292:	57                   	push   edi
c0021293:	b9 03 00 00 00       	mov    ecx,0x3
c0021298:	83 ec 18             	sub    esp,0x18
c002129b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002129f:	fc                   	cld    
c00212a0:	31 c0                	xor    eax,eax
c00212a2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00212a4:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00212a9:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00212ae:	50                   	push   eax
c00212af:	6a 00                	push   0x0
c00212b1:	6a 00                	push   0x0
c00212b3:	6a 00                	push   0x0
c00212b5:	6a 00                	push   0x0
c00212b7:	6a 02                	push   0x2
c00212b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00212bd:	50                   	push   eax
c00212be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00212c2:	e8 e9 fc ff ff       	call   c0020fb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00212c7:	31 c0                	xor    eax,eax
c00212c9:	83 c4 38             	add    esp,0x38
c00212cc:	5f                   	pop    edi
c00212cd:	c3                   	ret    

c00212ce <SATAPI::detectMedia()>:
c00212ce:	53                   	push   ebx
c00212cf:	83 ec 14             	sub    esp,0x14
c00212d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00212d6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00212dc:	e8 0f a1 fe ff       	call   c000b3f0 <VCache::writeWriteBuffer()>
c00212e1:	59                   	pop    ecx
c00212e2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00212e8:	e8 f3 a0 fe ff       	call   c000b3e0 <VCache::invalidateReadBuffer()>
c00212ed:	c7 04 24 77 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d77
c00212f4:	e8 83 5c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00212f9:	83 c4 10             	add    esp,0x10
c00212fc:	31 c0                	xor    eax,eax
c00212fe:	8b 14 85 e0 0a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf520]
c0021305:	85 d2                	test   edx,edx
c0021307:	74 0f                	je     c0021318 <SATAPI::detectMedia()+0x4a>
c0021309:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002130f:	75 07                	jne    c0021318 <SATAPI::detectMedia()+0x4a>
c0021311:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0021318:	40                   	inc    eax
c0021319:	83 f8 1a             	cmp    eax,0x1a
c002131c:	75 e0                	jne    c00212fe <SATAPI::detectMedia()+0x30>
c002131e:	83 c4 08             	add    esp,0x8
c0021321:	5b                   	pop    ebx
c0021322:	c3                   	ret    
c0021323:	90                   	nop

c0021324 <SATAPI::open(int, int, void*)>:
c0021324:	56                   	push   esi
c0021325:	53                   	push   ebx
c0021326:	51                   	push   ecx
c0021327:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002132b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002132f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021339:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002133f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021349:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002134d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021357:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002135d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0021364:	e8 43 eb fe ff       	call   c000feac <Phys::allocatePage()>
c0021369:	89 c6                	mov    esi,eax
c002136b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021371:	81 c6 00 10 00 00    	add    esi,0x1000
c0021377:	e8 30 eb fe ff       	call   c000feac <Phys::allocatePage()>
c002137c:	39 c6                	cmp    esi,eax
c002137e:	74 10                	je     c0021390 <SATAPI::open(int, int, void*)+0x6c>
c0021380:	83 ec 0c             	sub    esp,0xc
c0021383:	68 8c 9d 02 c0       	push   0xc0029d8c
c0021388:	e8 2b e9 fe ff       	call   c000fcb8 <KePanic(char const*)>
c002138d:	83 c4 10             	add    esp,0x10
c0021390:	83 ec 0c             	sub    esp,0xc
c0021393:	6a 02                	push   0x2
c0021395:	e8 b5 1e ff ff       	call   c001324f <Virt::allocateKernelVirtualPages(int)>
c002139a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00213a0:	6a 03                	push   0x3
c00213a2:	50                   	push   eax
c00213a3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00213a9:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c00213af:	e8 7e 25 ff ff       	call   c0013932 <VAS::mapPage(unsigned long, unsigned long, int)>
c00213b4:	83 c4 14             	add    esp,0x14
c00213b7:	68 78 01 00 00       	push   0x178
c00213bc:	e8 a2 e4 fe ff       	call   c000f863 <malloc>
c00213c1:	83 c4 0c             	add    esp,0xc
c00213c4:	89 c6                	mov    esi,eax
c00213c6:	6a 00                	push   0x0
c00213c8:	68 ff ff ff 7f       	push   0x7fffffff
c00213cd:	6a 00                	push   0x0
c00213cf:	6a 00                	push   0x0
c00213d1:	53                   	push   ebx
c00213d2:	68 a2 9d 02 c0       	push   0xc0029da2
c00213d7:	50                   	push   eax
c00213d8:	e8 59 94 fe ff       	call   c000a836 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00213dd:	83 c4 14             	add    esp,0x14
c00213e0:	56                   	push   esi
c00213e1:	e8 10 95 fe ff       	call   c000a8f6 <LogicalDisk::assignDriveLetter()>
c00213e6:	5a                   	pop    edx
c00213e7:	0f be c0             	movsx  eax,al
c00213ea:	59                   	pop    ecx
c00213eb:	50                   	push   eax
c00213ec:	68 e8 9b 02 c0       	push   0xc0029be8
c00213f1:	e8 86 5b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00213f6:	58                   	pop    eax
c00213f7:	5a                   	pop    edx
c00213f8:	56                   	push   esi
c00213f9:	53                   	push   ebx
c00213fa:	e8 55 86 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c00213ff:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021405:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021408:	e8 91 8a fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c002140d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021414:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021417:	e8 b2 fe ff ff       	call   c00212ce <SATAPI::detectMedia()>
c002141c:	83 c4 14             	add    esp,0x14
c002141f:	31 c0                	xor    eax,eax
c0021421:	5b                   	pop    ebx
c0021422:	5e                   	pop    esi
c0021423:	c3                   	ret    

c0021424 <SATAPI::read(unsigned long long, int, void*)>:
c0021424:	57                   	push   edi
c0021425:	56                   	push   esi
c0021426:	53                   	push   ebx
c0021427:	83 ec 30             	sub    esp,0x30
c002142a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002142e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0021432:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0021436:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002143a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002143e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021442:	83 fe 04             	cmp    esi,0x4
c0021445:	7e 10                	jle    c0021457 <SATAPI::read(unsigned long long, int, void*)+0x33>
c0021447:	83 ec 0c             	sub    esp,0xc
c002144a:	68 b0 9d 02 c0       	push   0xc0029db0
c002144f:	e8 64 e8 fe ff       	call   c000fcb8 <KePanic(char const*)>
c0021454:	83 c4 10             	add    esp,0x10
c0021457:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002145d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0021463:	51                   	push   ecx
c0021464:	50                   	push   eax
c0021465:	83 c0 02             	add    eax,0x2
c0021468:	c1 e0 07             	shl    eax,0x7
c002146b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0021471:	50                   	push   eax
c0021472:	52                   	push   edx
c0021473:	e8 c6 e6 ff ff       	call   c001fb3e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0021478:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002147c:	b9 03 00 00 00       	mov    ecx,0x3
c0021481:	fc                   	cld    
c0021482:	31 c0                	xor    eax,eax
c0021484:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021486:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002148b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0021490:	83 c4 0c             	add    esp,0xc
c0021493:	6a 00                	push   0x0
c0021495:	6a 00                	push   0x0
c0021497:	6a 00                	push   0x0
c0021499:	6a 00                	push   0x0
c002149b:	6a 02                	push   0x2
c002149d:	8d 44 24 30          	lea    eax,[esp+0x30]
c00214a1:	50                   	push   eax
c00214a2:	53                   	push   ebx
c00214a3:	e8 08 fb ff ff       	call   c0020fb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00214a8:	83 c4 20             	add    esp,0x20
c00214ab:	85 c0                	test   eax,eax
c00214ad:	75 44                	jne    c00214f3 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c00214af:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00214b3:	b9 03 00 00 00       	mov    ecx,0x3
c00214b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00214ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00214be:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c00214c3:	0f c8                	bswap  eax
c00214c5:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c00214c9:	89 f0                	mov    eax,esi
c00214cb:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00214cf:	50                   	push   eax
c00214d0:	56                   	push   esi
c00214d1:	c1 e6 0b             	shl    esi,0xb
c00214d4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00214d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00214dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00214e0:	56                   	push   esi
c00214e1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00214e5:	50                   	push   eax
c00214e6:	53                   	push   ebx
c00214e7:	e8 c4 fa ff ff       	call   c0020fb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00214ec:	83 c4 20             	add    esp,0x20
c00214ef:	85 c0                	test   eax,eax
c00214f1:	74 14                	je     c0021507 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c00214f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214f7:	83 ec 0c             	sub    esp,0xc
c00214fa:	53                   	push   ebx
c00214fb:	e8 ce fd ff ff       	call   c00212ce <SATAPI::detectMedia()>
c0021500:	83 c4 10             	add    esp,0x10
c0021503:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021507:	83 c4 30             	add    esp,0x30
c002150a:	5b                   	pop    ebx
c002150b:	5e                   	pop    esi
c002150c:	5f                   	pop    edi
c002150d:	c3                   	ret    
c002150e:	66 90                	xchg   ax,ax

c0021510 <APICTimer::close(int, int, void*)>:
c0021510:	b8 00 00 00 00       	mov    eax,0x0
c0021515:	c3                   	ret    
c0021516:	66 90                	xchg   ax,ax

c0021518 <apicTimerHandler(regs*, void*)>:
c0021518:	83 ec 0c             	sub    esp,0xc
c002151b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002151f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021521:	b8 10 27 00 00       	mov    eax,0x2710
c0021526:	ba 00 00 00 00       	mov    edx,0x0
c002152b:	f7 f1                	div    ecx
c002152d:	83 ec 0c             	sub    esp,0xc
c0021530:	50                   	push   eax
c0021531:	e8 be 9b fe ff       	call   c000b0f4 <timerHandler(unsigned int)>
c0021536:	83 c4 10             	add    esp,0x10
c0021539:	90                   	nop
c002153a:	83 c4 0c             	add    esp,0xc
c002153d:	c3                   	ret    
c002153e:	66 90                	xchg   ax,ax

c0021540 <APICTimer::open(int, int, void*)>:
c0021540:	83 ec 0c             	sub    esp,0xc
c0021543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021547:	8b 00                	mov    eax,DWORD PTR [eax]
c0021549:	83 c0 24             	add    eax,0x24
c002154c:	8b 00                	mov    eax,DWORD PTR [eax]
c002154e:	83 ec 08             	sub    esp,0x8
c0021551:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021559:	ff d0                	call   eax
c002155b:	83 c4 10             	add    esp,0x10
c002155e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021562:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021566:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002156c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021570:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021574:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002157a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002157e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021584:	83 ec 0c             	sub    esp,0xc
c0021587:	51                   	push   ecx
c0021588:	6a 01                	push   0x1
c002158a:	68 18 15 02 c0       	push   0xc0021518
c002158f:	52                   	push   edx
c0021590:	50                   	push   eax
c0021591:	e8 6a 84 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021596:	83 c4 20             	add    esp,0x20
c0021599:	89 c2                	mov    edx,eax
c002159b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002159f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00215a5:	b8 00 00 00 00       	mov    eax,0x0
c00215aa:	83 c4 0c             	add    esp,0xc
c00215ad:	c3                   	ret    
c00215ae:	66 90                	xchg   ax,ax

c00215b0 <APICTimer::write(int)>:
c00215b0:	83 ec 0c             	sub    esp,0xc
c00215b3:	83 ec 0c             	sub    esp,0xc
c00215b6:	68 14 9e 02 c0       	push   0xc0029e14
c00215bb:	e8 f8 e6 fe ff       	call   c000fcb8 <KePanic(char const*)>
c00215c0:	83 c4 10             	add    esp,0x10
c00215c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00215d1:	90                   	nop
c00215d2:	83 c4 0c             	add    esp,0xc
c00215d5:	c3                   	ret    
c00215d6:	66 90                	xchg   ax,ax

c00215d8 <APICTimer::APICTimer()>:
c00215d8:	83 ec 0c             	sub    esp,0xc
c00215db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215df:	83 ec 08             	sub    esp,0x8
c00215e2:	68 24 9e 02 c0       	push   0xc0029e24
c00215e7:	50                   	push   eax
c00215e8:	e8 3b 9a fe ff       	call   c000b028 <Timer::Timer(char const*)>
c00215ed:	83 c4 10             	add    esp,0x10
c00215f0:	ba 38 9e 02 c0       	mov    edx,0xc0029e38
c00215f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215f9:	89 10                	mov    DWORD PTR [eax],edx
c00215fb:	90                   	nop
c00215fc:	83 c4 0c             	add    esp,0xc
c00215ff:	c3                   	ret    

c0021600 <PIT::write(int)>:
c0021600:	83 ec 10             	sub    esp,0x10
c0021603:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021607:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002160b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021611:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021615:	a3 b8 3d 03 c0       	mov    ds:0xc0033db8,eax
c002161a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002161f:	89 c2                	mov    edx,eax
c0021621:	c1 fa 1f             	sar    edx,0x1f
c0021624:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021628:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002162c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0021633:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021638:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002163c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021641:	ee                   	out    dx,al
c0021642:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021646:	0f b6 c0             	movzx  eax,al
c0021649:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021650:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021654:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021658:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002165d:	ee                   	out    dx,al
c002165e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021662:	c1 f8 08             	sar    eax,0x8
c0021665:	0f b6 c0             	movzx  eax,al
c0021668:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002166f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021673:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021677:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002167c:	ee                   	out    dx,al
c002167d:	90                   	nop
c002167e:	83 c4 10             	add    esp,0x10
c0021681:	c3                   	ret    
c0021682:	66 90                	xchg   ax,ax

c0021684 <pitHandler(regs*, void*)>:
c0021684:	83 ec 0c             	sub    esp,0xc
c0021687:	8b 0d b8 3d 03 c0    	mov    ecx,DWORD PTR ds:0xc0033db8
c002168d:	b8 10 27 00 00       	mov    eax,0x2710
c0021692:	89 c2                	mov    edx,eax
c0021694:	c1 fa 1f             	sar    edx,0x1f
c0021697:	f7 f9                	idiv   ecx
c0021699:	83 ec 0c             	sub    esp,0xc
c002169c:	50                   	push   eax
c002169d:	e8 52 9a fe ff       	call   c000b0f4 <timerHandler(unsigned int)>
c00216a2:	83 c4 10             	add    esp,0x10
c00216a5:	90                   	nop
c00216a6:	83 c4 0c             	add    esp,0xc
c00216a9:	c3                   	ret    
c00216aa:	66 90                	xchg   ax,ax

c00216ac <PIT::open(int, int, void*)>:
c00216ac:	83 ec 0c             	sub    esp,0xc
c00216af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00216b5:	83 c0 24             	add    eax,0x24
c00216b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00216ba:	83 ec 08             	sub    esp,0x8
c00216bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216c5:	ff d0                	call   eax
c00216c7:	83 c4 10             	add    esp,0x10
c00216ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ce:	83 ec 0c             	sub    esp,0xc
c00216d1:	6a 00                	push   0x0
c00216d3:	6a 01                	push   0x1
c00216d5:	68 84 16 02 c0       	push   0xc0021684
c00216da:	6a 00                	push   0x0
c00216dc:	50                   	push   eax
c00216dd:	e8 1e 83 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00216e2:	83 c4 20             	add    esp,0x20
c00216e5:	89 c2                	mov    edx,eax
c00216e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216eb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00216f1:	b8 00 00 00 00       	mov    eax,0x0
c00216f6:	83 c4 0c             	add    esp,0xc
c00216f9:	c3                   	ret    
c00216fa:	66 90                	xchg   ax,ax

c00216fc <PIT::close(int, int, void*)>:
c00216fc:	83 ec 0c             	sub    esp,0xc
c00216ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021703:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002170d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021711:	6a 01                	push   0x1
c0021713:	68 84 16 02 c0       	push   0xc0021684
c0021718:	6a 00                	push   0x0
c002171a:	50                   	push   eax
c002171b:	e8 16 83 fe ff       	call   c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021720:	83 c4 10             	add    esp,0x10
c0021723:	b8 00 00 00 00       	mov    eax,0x0
c0021728:	83 c4 0c             	add    esp,0xc
c002172b:	c3                   	ret    

c002172c <PIT::PIT()>:
c002172c:	83 ec 0c             	sub    esp,0xc
c002172f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021733:	83 ec 08             	sub    esp,0x8
c0021736:	68 60 9e 02 c0       	push   0xc0029e60
c002173b:	50                   	push   eax
c002173c:	e8 e7 98 fe ff       	call   c000b028 <Timer::Timer(char const*)>
c0021741:	83 c4 10             	add    esp,0x10
c0021744:	ba 88 9e 02 c0       	mov    edx,0xc0029e88
c0021749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002174d:	89 10                	mov    DWORD PTR [eax],edx
c002174f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021753:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021759:	0f b6 d0             	movzx  edx,al
c002175c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021760:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002176b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021771:	0f b6 d0             	movzx  edx,al
c0021774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021778:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002177d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021781:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021787:	8d 50 01             	lea    edx,[eax+0x1]
c002178a:	88 d1                	mov    cl,dl
c002178c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021790:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021796:	0f b6 d0             	movzx  edx,al
c0021799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002179d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00217a1:	83 e1 3f             	and    ecx,0x3f
c00217a4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00217a8:	90                   	nop
c00217a9:	83 c4 0c             	add    esp,0xc
c00217ac:	c3                   	ret    
c00217ad:	66 90                	xchg   ax,ax
c00217af:	90                   	nop

c00217b0 <avxDetect>:
c00217b0:	b8 01 00 00 00       	mov    eax,0x1
c00217b5:	0f a2                	cpuid  
c00217b7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00217bd:	74 15                	je     c00217d4 <avxDetect.noAVX>
c00217bf:	b8 01 00 00 00       	mov    eax,0x1
c00217c4:	0f a2                	cpuid  
c00217c6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00217cc:	74 06                	je     c00217d4 <avxDetect.noAVX>
c00217ce:	b8 01 00 00 00       	mov    eax,0x1
c00217d3:	c3                   	ret    

c00217d4 <avxDetect.noAVX>:
c00217d4:	b8 00 00 00 00       	mov    eax,0x0
c00217d9:	c3                   	ret    

c00217da <avxSave>:
c00217da:	53                   	push   ebx
c00217db:	52                   	push   edx
c00217dc:	31 c0                	xor    eax,eax
c00217de:	48                   	dec    eax
c00217df:	89 c2                	mov    edx,eax
c00217e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00217e5:	0f ae 23             	xsave  [ebx]
c00217e8:	5a                   	pop    edx
c00217e9:	5b                   	pop    ebx
c00217ea:	c3                   	ret    

c00217eb <avxLoad>:
c00217eb:	53                   	push   ebx
c00217ec:	52                   	push   edx
c00217ed:	31 c0                	xor    eax,eax
c00217ef:	48                   	dec    eax
c00217f0:	89 c2                	mov    edx,eax
c00217f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00217f6:	0f ae 2b             	xrstor [ebx]
c00217f9:	5a                   	pop    edx
c00217fa:	5b                   	pop    ebx
c00217fb:	c3                   	ret    

c00217fc <avxInit>:
c00217fc:	e8 17 03 00 00       	call   c0021b18 <sseInit>
c0021801:	50                   	push   eax
c0021802:	51                   	push   ecx
c0021803:	0f 20 e0             	mov    eax,cr4
c0021806:	0d 00 00 04 00       	or     eax,0x40000
c002180b:	0f 22 e0             	mov    cr4,eax
c002180e:	31 c9                	xor    ecx,ecx
c0021810:	0f 01 d0             	xgetbv 
c0021813:	0d 07 00 00 00       	or     eax,0x7
c0021818:	0f 01 d1             	xsetbv 
c002181b:	59                   	pop    ecx
c002181c:	58                   	pop    eax
c002181d:	c3                   	ret    

c002181e <avxClose>:
c002181e:	c3                   	ret    
c002181f:	90                   	nop

c0021820 <isr0>:
c0021820:	fa                   	cli    
c0021821:	68 00 00 00 00       	push   0x0
c0021826:	68 00 00 00 00       	push   0x0
c002182b:	e9 56 01 00 00       	jmp    c0021986 <int_common_stub>

c0021830 <isr1>:
c0021830:	fa                   	cli    
c0021831:	6a 00                	push   0x0
c0021833:	6a 01                	push   0x1
c0021835:	e9 4c 01 00 00       	jmp    c0021986 <int_common_stub>

c002183a <isr2>:
c002183a:	fa                   	cli    
c002183b:	6a 00                	push   0x0
c002183d:	6a 02                	push   0x2
c002183f:	e9 42 01 00 00       	jmp    c0021986 <int_common_stub>

c0021844 <isr3>:
c0021844:	fa                   	cli    
c0021845:	6a 00                	push   0x0
c0021847:	6a 03                	push   0x3
c0021849:	e9 38 01 00 00       	jmp    c0021986 <int_common_stub>

c002184e <isr4>:
c002184e:	fa                   	cli    
c002184f:	6a 00                	push   0x0
c0021851:	6a 04                	push   0x4
c0021853:	e9 2e 01 00 00       	jmp    c0021986 <int_common_stub>

c0021858 <isr5>:
c0021858:	fa                   	cli    
c0021859:	6a 00                	push   0x0
c002185b:	6a 05                	push   0x5
c002185d:	e9 24 01 00 00       	jmp    c0021986 <int_common_stub>

c0021862 <isr6>:
c0021862:	fa                   	cli    
c0021863:	6a 00                	push   0x0
c0021865:	6a 06                	push   0x6
c0021867:	e9 1a 01 00 00       	jmp    c0021986 <int_common_stub>

c002186c <isr7>:
c002186c:	fa                   	cli    
c002186d:	6a 00                	push   0x0
c002186f:	6a 07                	push   0x7
c0021871:	e9 10 01 00 00       	jmp    c0021986 <int_common_stub>

c0021876 <isr8>:
c0021876:	fa                   	cli    
c0021877:	6a 08                	push   0x8
c0021879:	e9 08 01 00 00       	jmp    c0021986 <int_common_stub>

c002187e <isr9>:
c002187e:	fa                   	cli    
c002187f:	6a 00                	push   0x0
c0021881:	6a 09                	push   0x9
c0021883:	e9 fe 00 00 00       	jmp    c0021986 <int_common_stub>

c0021888 <isr10>:
c0021888:	fa                   	cli    
c0021889:	6a 0a                	push   0xa
c002188b:	e9 f6 00 00 00       	jmp    c0021986 <int_common_stub>

c0021890 <isr11>:
c0021890:	fa                   	cli    
c0021891:	6a 0b                	push   0xb
c0021893:	e9 ee 00 00 00       	jmp    c0021986 <int_common_stub>

c0021898 <isr12>:
c0021898:	fa                   	cli    
c0021899:	6a 0c                	push   0xc
c002189b:	e9 e6 00 00 00       	jmp    c0021986 <int_common_stub>

c00218a0 <isr13>:
c00218a0:	fa                   	cli    
c00218a1:	6a 0d                	push   0xd
c00218a3:	53                   	push   ebx
c00218a4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00218a8:	81 fb 4b 1a 02 c0    	cmp    ebx,0xc0021a4b
c00218ae:	5b                   	pop    ebx
c00218af:	0f 84 98 01 00 00    	je     c0021a4d <finishSignal2>
c00218b5:	e9 cc 00 00 00       	jmp    c0021986 <int_common_stub>

c00218ba <isr14>:
c00218ba:	fa                   	cli    
c00218bb:	6a 0e                	push   0xe
c00218bd:	e9 c4 00 00 00       	jmp    c0021986 <int_common_stub>

c00218c2 <isr15>:
c00218c2:	fa                   	cli    
c00218c3:	6a 00                	push   0x0
c00218c5:	6a 0f                	push   0xf
c00218c7:	e9 ba 00 00 00       	jmp    c0021986 <int_common_stub>

c00218cc <isr16>:
c00218cc:	fa                   	cli    
c00218cd:	6a 00                	push   0x0
c00218cf:	6a 10                	push   0x10
c00218d1:	e9 b0 00 00 00       	jmp    c0021986 <int_common_stub>

c00218d6 <isr17>:
c00218d6:	fa                   	cli    
c00218d7:	6a 00                	push   0x0
c00218d9:	6a 11                	push   0x11
c00218db:	e9 a6 00 00 00       	jmp    c0021986 <int_common_stub>

c00218e0 <isr18>:
c00218e0:	fa                   	cli    
c00218e1:	6a 00                	push   0x0
c00218e3:	6a 12                	push   0x12
c00218e5:	e9 9c 00 00 00       	jmp    c0021986 <int_common_stub>

c00218ea <irq3>:
c00218ea:	fa                   	cli    
c00218eb:	6a 00                	push   0x0
c00218ed:	6a 23                	push   0x23
c00218ef:	e9 92 00 00 00       	jmp    c0021986 <int_common_stub>

c00218f4 <irq4>:
c00218f4:	fa                   	cli    
c00218f5:	6a 00                	push   0x0
c00218f7:	6a 24                	push   0x24
c00218f9:	e9 88 00 00 00       	jmp    c0021986 <int_common_stub>

c00218fe <irq5>:
c00218fe:	fa                   	cli    
c00218ff:	6a 00                	push   0x0
c0021901:	6a 25                	push   0x25
c0021903:	e9 7e 00 00 00       	jmp    c0021986 <int_common_stub>

c0021908 <irq6>:
c0021908:	fa                   	cli    
c0021909:	6a 00                	push   0x0
c002190b:	6a 26                	push   0x26
c002190d:	e9 74 00 00 00       	jmp    c0021986 <int_common_stub>

c0021912 <irq7>:
c0021912:	fa                   	cli    
c0021913:	6a 00                	push   0x0
c0021915:	6a 27                	push   0x27
c0021917:	e9 6a 00 00 00       	jmp    c0021986 <int_common_stub>

c002191c <irq8>:
c002191c:	fa                   	cli    
c002191d:	6a 00                	push   0x0
c002191f:	6a 28                	push   0x28
c0021921:	e9 60 00 00 00       	jmp    c0021986 <int_common_stub>

c0021926 <irq9>:
c0021926:	fa                   	cli    
c0021927:	6a 00                	push   0x0
c0021929:	6a 29                	push   0x29
c002192b:	e9 56 00 00 00       	jmp    c0021986 <int_common_stub>

c0021930 <irq10>:
c0021930:	fa                   	cli    
c0021931:	6a 00                	push   0x0
c0021933:	6a 2a                	push   0x2a
c0021935:	e9 4c 00 00 00       	jmp    c0021986 <int_common_stub>

c002193a <irq11>:
c002193a:	fa                   	cli    
c002193b:	6a 00                	push   0x0
c002193d:	6a 2b                	push   0x2b
c002193f:	e9 42 00 00 00       	jmp    c0021986 <int_common_stub>

c0021944 <irq12>:
c0021944:	fa                   	cli    
c0021945:	6a 00                	push   0x0
c0021947:	6a 2c                	push   0x2c
c0021949:	e9 38 00 00 00       	jmp    c0021986 <int_common_stub>

c002194e <irq13>:
c002194e:	fa                   	cli    
c002194f:	6a 00                	push   0x0
c0021951:	6a 2d                	push   0x2d
c0021953:	e9 2e 00 00 00       	jmp    c0021986 <int_common_stub>

c0021958 <irq14>:
c0021958:	fa                   	cli    
c0021959:	6a 00                	push   0x0
c002195b:	6a 2e                	push   0x2e
c002195d:	e9 24 00 00 00       	jmp    c0021986 <int_common_stub>

c0021962 <irq15>:
c0021962:	fa                   	cli    
c0021963:	6a 00                	push   0x0
c0021965:	6a 2f                	push   0x2f
c0021967:	e9 1a 00 00 00       	jmp    c0021986 <int_common_stub>

c002196c <irq1>:
c002196c:	fa                   	cli    
c002196d:	6a 00                	push   0x0
c002196f:	6a 21                	push   0x21
c0021971:	eb 13                	jmp    c0021986 <int_common_stub>

c0021973 <irq2>:
c0021973:	fa                   	cli    
c0021974:	6a 00                	push   0x0
c0021976:	6a 22                	push   0x22
c0021978:	eb 0c                	jmp    c0021986 <int_common_stub>

c002197a <isr96>:
c002197a:	6a 00                	push   0x0
c002197c:	6a 60                	push   0x60
c002197e:	fb                   	sti    
c002197f:	eb 05                	jmp    c0021986 <int_common_stub>

c0021981 <irq0>:
c0021981:	fa                   	cli    
c0021982:	6a 00                	push   0x0
c0021984:	6a 20                	push   0x20

c0021986 <int_common_stub>:
c0021986:	60                   	pusha  
c0021987:	1e                   	push   ds
c0021988:	06                   	push   es
c0021989:	0f a0                	push   fs
c002198b:	0f a8                	push   gs
c002198d:	66 b8 10 00          	mov    ax,0x10
c0021991:	66 8e d8             	mov    ds,ax
c0021994:	66 8e c0             	mov    es,ax
c0021997:	66 8e e0             	mov    fs,ax
c002199a:	66 8e e8             	mov    gs,ax
c002199d:	54                   	push   esp
c002199e:	fc                   	cld    
c002199f:	e8 4e 95 ff ff       	call   c001aef2 <int_handler>
c00219a4:	81 c4 04 00 00 00    	add    esp,0x4
c00219aa:	e8 d4 f6 fe ff       	call   c0011083 <KiCheckSignalZ>
c00219af:	85 c0                	test   eax,eax
c00219b1:	75 0e                	jne    c00219c1 <doSignals>
c00219b3:	0f a9                	pop    gs
c00219b5:	0f a1                	pop    fs
c00219b7:	07                   	pop    es
c00219b8:	1f                   	pop    ds
c00219b9:	61                   	popa   
c00219ba:	81 c4 08 00 00 00    	add    esp,0x8
c00219c0:	cf                   	iret   

c00219c1 <doSignals>:
c00219c1:	0f a9                	pop    gs
c00219c3:	0f a1                	pop    fs
c00219c5:	07                   	pop    es
c00219c6:	1f                   	pop    ds
c00219c7:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c00219cc:	61                   	popa   
c00219cd:	53                   	push   ebx
c00219ce:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c00219d4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00219d7:	5b                   	pop    ebx
c00219d8:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c00219dd:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c00219e0:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c00219e3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00219e6:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c00219e9:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c00219ec:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c00219ef:	81 c4 08 00 00 00    	add    esp,0x8
c00219f5:	5e                   	pop    esi
c00219f6:	5b                   	pop    ebx
c00219f7:	59                   	pop    ecx
c00219f8:	5a                   	pop    edx
c00219f9:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c00219fc:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c00219ff:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021a02:	52                   	push   edx
c0021a03:	51                   	push   ecx
c0021a04:	53                   	push   ebx
c0021a05:	56                   	push   esi
c0021a06:	81 ec 08 00 00 00    	sub    esp,0x8
c0021a0c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021a0f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0021a12:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0021a15:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021a18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021a1b:	60                   	pusha  
c0021a1c:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c0021a22:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0021a25:	89 e3                	mov    ebx,esp
c0021a27:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021a2a:	52                   	push   edx
c0021a2b:	68 4b 1a 02 c0       	push   0xc0021a4b
c0021a30:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c0021a33:	89 dc                	mov    esp,ebx
c0021a35:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021a38:	68 23 00 00 00       	push   0x23
c0021a3d:	51                   	push   ecx
c0021a3e:	68 02 02 00 00       	push   0x202
c0021a43:	68 1b 00 00 00       	push   0x1b
c0021a48:	ff 36                	push   DWORD PTR [esi]
c0021a4a:	cf                   	iret   

c0021a4b <finishSignal>:
c0021a4b:	cd 0f                	int    0xf

c0021a4d <finishSignal2>:
c0021a4d:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c0021a53:	e8 b7 f6 fe ff       	call   c001110f <KiFinishSignalZ>
c0021a58:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021a5e:	68 23 00 00 00       	push   0x23
c0021a63:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021a66:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021a69:	68 1b 00 00 00       	push   0x1b
c0021a6e:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c0021a71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a74:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021a77:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021a7a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021a7d:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c0021a80:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0021a83:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021a86:	cf                   	iret   
c0021a87:	90                   	nop

c0021a88 <irq16>:
c0021a88:	fa                   	cli    
c0021a89:	6a 00                	push   0x0
c0021a8b:	6a 30                	push   0x30
c0021a8d:	e9 f4 fe ff ff       	jmp    c0021986 <int_common_stub>

c0021a92 <irq17>:
c0021a92:	fa                   	cli    
c0021a93:	6a 00                	push   0x0
c0021a95:	6a 31                	push   0x31
c0021a97:	e9 ea fe ff ff       	jmp    c0021986 <int_common_stub>

c0021a9c <irq18>:
c0021a9c:	fa                   	cli    
c0021a9d:	6a 00                	push   0x0
c0021a9f:	6a 32                	push   0x32
c0021aa1:	e9 e0 fe ff ff       	jmp    c0021986 <int_common_stub>

c0021aa6 <irq19>:
c0021aa6:	fa                   	cli    
c0021aa7:	6a 00                	push   0x0
c0021aa9:	6a 33                	push   0x33
c0021aab:	e9 d6 fe ff ff       	jmp    c0021986 <int_common_stub>

c0021ab0 <irq20>:
c0021ab0:	fa                   	cli    
c0021ab1:	6a 00                	push   0x0
c0021ab3:	6a 34                	push   0x34
c0021ab5:	e9 cc fe ff ff       	jmp    c0021986 <int_common_stub>

c0021aba <irq21>:
c0021aba:	fa                   	cli    
c0021abb:	6a 00                	push   0x0
c0021abd:	6a 35                	push   0x35
c0021abf:	e9 c2 fe ff ff       	jmp    c0021986 <int_common_stub>

c0021ac4 <irq22>:
c0021ac4:	fa                   	cli    
c0021ac5:	6a 00                	push   0x0
c0021ac7:	6a 36                	push   0x36
c0021ac9:	e9 b8 fe ff ff       	jmp    c0021986 <int_common_stub>

c0021ace <irq23>:
c0021ace:	fa                   	cli    
c0021acf:	6a 00                	push   0x0
c0021ad1:	6a 37                	push   0x37
c0021ad3:	e9 ae fe ff ff       	jmp    c0021986 <int_common_stub>
c0021ad8:	66 90                	xchg   ax,ax
c0021ada:	66 90                	xchg   ax,ax
c0021adc:	66 90                	xchg   ax,ax
c0021ade:	66 90                	xchg   ax,ax

c0021ae0 <i386GetRDRAND>:
c0021ae0:	b9 64 00 00 00       	mov    ecx,0x64

c0021ae5 <retry>:
c0021ae5:	0f c7 f0             	rdrand eax
c0021ae8:	72 05                	jb     c0021aef <retry.done>
c0021aea:	e2 f9                	loop   c0021ae5 <retry>

c0021aec <retry.fail>:
c0021aec:	31 c0                	xor    eax,eax
c0021aee:	c3                   	ret    

c0021aef <retry.done>:
c0021aef:	c3                   	ret    

c0021af0 <sseDetect>:
c0021af0:	b8 01 00 00 00       	mov    eax,0x1
c0021af5:	0f a2                	cpuid  
c0021af7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0021afd:	74 06                	je     c0021b05 <sseDetect.noSSE>
c0021aff:	b8 01 00 00 00       	mov    eax,0x1
c0021b04:	c3                   	ret    

c0021b05 <sseDetect.noSSE>:
c0021b05:	31 c0                	xor    eax,eax
c0021b07:	c3                   	ret    

c0021b08 <sseSave>:
c0021b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b0c:	0f ae 00             	fxsave [eax]
c0021b0f:	c3                   	ret    

c0021b10 <sseLoad>:
c0021b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b14:	0f ae 08             	fxrstor [eax]
c0021b17:	c3                   	ret    

c0021b18 <sseInit>:
c0021b18:	e8 48 00 00 00       	call   c0021b65 <x87Init>
c0021b1d:	0f 20 e0             	mov    eax,cr4
c0021b20:	66 0d 00 06          	or     ax,0x600
c0021b24:	0f 22 e0             	mov    cr4,eax
c0021b27:	c3                   	ret    

c0021b28 <sseClose>:
c0021b28:	c3                   	ret    
c0021b29:	66 90                	xchg   ax,ax
c0021b2b:	66 90                	xchg   ax,ax
c0021b2d:	66 90                	xchg   ax,ax
c0021b2f:	90                   	nop

c0021b30 <value_37F>:
c0021b30:	7f 03                	jg     c0021b35 <value_37A+0x1>

c0021b32 <value_37E>:
c0021b32:	7e 03                	jle    c0021b37 <x87Detect+0x1>

c0021b34 <value_37A>:
c0021b34:	7a 03                	jp     c0021b39 <x87Detect+0x3>

c0021b36 <x87Detect>:
c0021b36:	53                   	push   ebx
c0021b37:	51                   	push   ecx
c0021b38:	52                   	push   edx
c0021b39:	b8 01 00 00 00       	mov    eax,0x1
c0021b3e:	0f a2                	cpuid  
c0021b40:	f7 c2 01 00 00 00    	test   edx,0x1
c0021b46:	74 06                	je     c0021b4e <x87Detect.nox87>
c0021b48:	b8 01 00 00 00       	mov    eax,0x1
c0021b4d:	c3                   	ret    

c0021b4e <x87Detect.nox87>:
c0021b4e:	b8 00 00 00 00       	mov    eax,0x0
c0021b53:	5a                   	pop    edx
c0021b54:	59                   	pop    ecx
c0021b55:	5b                   	pop    ebx
c0021b56:	c3                   	ret    

c0021b57 <x87Save>:
c0021b57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b5b:	dd 30                	fnsave [eax]
c0021b5d:	c3                   	ret    

c0021b5e <x87Load>:
c0021b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b62:	dd 20                	frstor [eax]
c0021b64:	c3                   	ret    

c0021b65 <x87Init>:
c0021b65:	0f 20 c0             	mov    eax,cr0
c0021b68:	66 25 fb ff          	and    ax,0xfffb
c0021b6c:	66 0d 22 00          	or     ax,0x22
c0021b70:	0f 22 c0             	mov    cr0,eax
c0021b73:	db e3                	fninit 
c0021b75:	0f 06                	clts   
c0021b77:	d9 2d 34 1b 02 c0    	fldcw  WORD PTR ds:0xc0021b34
c0021b7d:	c3                   	ret    

c0021b7e <x87Close>:
c0021b7e:	c3                   	ret    
c0021b7f:	90                   	nop

c0021b80 <__do_global_ctors_aux>:
c0021b80:	a1 0c 64 02 c0       	mov    eax,ds:0xc002640c
c0021b85:	83 f8 ff             	cmp    eax,0xffffffff
c0021b88:	74 1a                	je     c0021ba4 <__do_global_ctors_aux+0x24>
c0021b8a:	55                   	push   ebp
c0021b8b:	89 e5                	mov    ebp,esp
c0021b8d:	53                   	push   ebx
c0021b8e:	52                   	push   edx
c0021b8f:	bb 0c 64 02 c0       	mov    ebx,0xc002640c
c0021b94:	ff d0                	call   eax
c0021b96:	83 eb 04             	sub    ebx,0x4
c0021b99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021b9b:	83 f8 ff             	cmp    eax,0xffffffff
c0021b9e:	75 f4                	jne    c0021b94 <__do_global_ctors_aux+0x14>
c0021ba0:	58                   	pop    eax
c0021ba1:	5b                   	pop    ebx
c0021ba2:	5d                   	pop    ebp
c0021ba3:	c3                   	ret    
c0021ba4:	c3                   	ret    
c0021ba5:	66 90                	xchg   ax,ax
c0021ba7:	90                   	nop

c0021ba8 <__divdi3>:
c0021ba8:	55                   	push   ebp
c0021ba9:	57                   	push   edi
c0021baa:	56                   	push   esi
c0021bab:	53                   	push   ebx
c0021bac:	83 ec 1c             	sub    esp,0x1c
c0021baf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021bb3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021bb7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021bba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021bbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021bc2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021bc6:	85 db                	test   ebx,ebx
c0021bc8:	0f 88 8e 00 00 00    	js     c0021c5c <__divdi3+0xb4>
c0021bce:	89 dd                	mov    ebp,ebx
c0021bd0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021bd8:	89 d3                	mov    ebx,edx
c0021bda:	85 d2                	test   edx,edx
c0021bdc:	79 0d                	jns    c0021beb <__divdi3+0x43>
c0021bde:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021be2:	f7 d8                	neg    eax
c0021be4:	83 d2 00             	adc    edx,0x0
c0021be7:	f7 da                	neg    edx
c0021be9:	89 d3                	mov    ebx,edx
c0021beb:	89 c7                	mov    edi,eax
c0021bed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bf0:	85 db                	test   ebx,ebx
c0021bf2:	75 48                	jne    c0021c3c <__divdi3+0x94>
c0021bf4:	39 ef                	cmp    edi,ebp
c0021bf6:	76 24                	jbe    c0021c1c <__divdi3+0x74>
c0021bf8:	89 ea                	mov    edx,ebp
c0021bfa:	f7 f7                	div    edi
c0021bfc:	89 c1                	mov    ecx,eax
c0021bfe:	31 f6                	xor    esi,esi
c0021c00:	89 c8                	mov    eax,ecx
c0021c02:	89 f2                	mov    edx,esi
c0021c04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021c08:	85 c9                	test   ecx,ecx
c0021c0a:	74 07                	je     c0021c13 <__divdi3+0x6b>
c0021c0c:	f7 d8                	neg    eax
c0021c0e:	83 d2 00             	adc    edx,0x0
c0021c11:	f7 da                	neg    edx
c0021c13:	83 c4 1c             	add    esp,0x1c
c0021c16:	5b                   	pop    ebx
c0021c17:	5e                   	pop    esi
c0021c18:	5f                   	pop    edi
c0021c19:	5d                   	pop    ebp
c0021c1a:	c3                   	ret    
c0021c1b:	90                   	nop
c0021c1c:	85 ff                	test   edi,edi
c0021c1e:	75 0b                	jne    c0021c2b <__divdi3+0x83>
c0021c20:	b8 01 00 00 00       	mov    eax,0x1
c0021c25:	31 d2                	xor    edx,edx
c0021c27:	f7 f3                	div    ebx
c0021c29:	89 c7                	mov    edi,eax
c0021c2b:	31 d2                	xor    edx,edx
c0021c2d:	89 e8                	mov    eax,ebp
c0021c2f:	f7 f7                	div    edi
c0021c31:	89 c6                	mov    esi,eax
c0021c33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021c36:	f7 f7                	div    edi
c0021c38:	89 c1                	mov    ecx,eax
c0021c3a:	eb c4                	jmp    c0021c00 <__divdi3+0x58>
c0021c3c:	39 eb                	cmp    ebx,ebp
c0021c3e:	77 3c                	ja     c0021c7c <__divdi3+0xd4>
c0021c40:	0f bd f3             	bsr    esi,ebx
c0021c43:	83 f6 1f             	xor    esi,0x1f
c0021c46:	75 40                	jne    c0021c88 <__divdi3+0xe0>
c0021c48:	39 eb                	cmp    ebx,ebp
c0021c4a:	72 09                	jb     c0021c55 <__divdi3+0xad>
c0021c4c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021c4f:	0f 87 97 00 00 00    	ja     c0021cec <__divdi3+0x144>
c0021c55:	b9 01 00 00 00       	mov    ecx,0x1
c0021c5a:	eb a4                	jmp    c0021c00 <__divdi3+0x58>
c0021c5c:	f7 d9                	neg    ecx
c0021c5e:	83 d3 00             	adc    ebx,0x0
c0021c61:	f7 db                	neg    ebx
c0021c63:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021c66:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021c6a:	89 dd                	mov    ebp,ebx
c0021c6c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021c74:	e9 5f ff ff ff       	jmp    c0021bd8 <__divdi3+0x30>
c0021c79:	8d 76 00             	lea    esi,[esi+0x0]
c0021c7c:	31 f6                	xor    esi,esi
c0021c7e:	31 c9                	xor    ecx,ecx
c0021c80:	e9 7b ff ff ff       	jmp    c0021c00 <__divdi3+0x58>
c0021c85:	8d 76 00             	lea    esi,[esi+0x0]
c0021c88:	b8 20 00 00 00       	mov    eax,0x20
c0021c8d:	29 f0                	sub    eax,esi
c0021c8f:	89 f1                	mov    ecx,esi
c0021c91:	d3 e3                	shl    ebx,cl
c0021c93:	89 fa                	mov    edx,edi
c0021c95:	88 c1                	mov    cl,al
c0021c97:	d3 ea                	shr    edx,cl
c0021c99:	09 da                	or     edx,ebx
c0021c9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021c9f:	89 f1                	mov    ecx,esi
c0021ca1:	d3 e7                	shl    edi,cl
c0021ca3:	89 eb                	mov    ebx,ebp
c0021ca5:	88 c1                	mov    cl,al
c0021ca7:	d3 eb                	shr    ebx,cl
c0021ca9:	89 f1                	mov    ecx,esi
c0021cab:	d3 e5                	shl    ebp,cl
c0021cad:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021cb0:	88 c1                	mov    cl,al
c0021cb2:	d3 ea                	shr    edx,cl
c0021cb4:	09 d5                	or     ebp,edx
c0021cb6:	89 e8                	mov    eax,ebp
c0021cb8:	89 da                	mov    edx,ebx
c0021cba:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0021cbe:	89 d3                	mov    ebx,edx
c0021cc0:	89 c5                	mov    ebp,eax
c0021cc2:	f7 e7                	mul    edi
c0021cc4:	39 d3                	cmp    ebx,edx
c0021cc6:	72 18                	jb     c0021ce0 <__divdi3+0x138>
c0021cc8:	74 0a                	je     c0021cd4 <__divdi3+0x12c>
c0021cca:	89 e9                	mov    ecx,ebp
c0021ccc:	31 f6                	xor    esi,esi
c0021cce:	e9 2d ff ff ff       	jmp    c0021c00 <__divdi3+0x58>
c0021cd3:	90                   	nop
c0021cd4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021cd7:	89 f1                	mov    ecx,esi
c0021cd9:	d3 e7                	shl    edi,cl
c0021cdb:	39 c7                	cmp    edi,eax
c0021cdd:	73 eb                	jae    c0021cca <__divdi3+0x122>
c0021cdf:	90                   	nop
c0021ce0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021ce3:	31 f6                	xor    esi,esi
c0021ce5:	e9 16 ff ff ff       	jmp    c0021c00 <__divdi3+0x58>
c0021cea:	66 90                	xchg   ax,ax
c0021cec:	31 c9                	xor    ecx,ecx
c0021cee:	e9 0d ff ff ff       	jmp    c0021c00 <__divdi3+0x58>
c0021cf3:	90                   	nop

c0021cf4 <__moddi3>:
c0021cf4:	55                   	push   ebp
c0021cf5:	57                   	push   edi
c0021cf6:	56                   	push   esi
c0021cf7:	53                   	push   ebx
c0021cf8:	83 ec 2c             	sub    esp,0x2c
c0021cfb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021cff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021d03:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021d07:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021d0b:	85 db                	test   ebx,ebx
c0021d0d:	0f 88 85 00 00 00    	js     c0021d98 <__moddi3+0xa4>
c0021d13:	89 de                	mov    esi,ebx
c0021d15:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021d1d:	89 d7                	mov    edi,edx
c0021d1f:	85 d2                	test   edx,edx
c0021d21:	79 09                	jns    c0021d2c <__moddi3+0x38>
c0021d23:	f7 d8                	neg    eax
c0021d25:	83 d2 00             	adc    edx,0x0
c0021d28:	f7 da                	neg    edx
c0021d2a:	89 d7                	mov    edi,edx
c0021d2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021d30:	89 cd                	mov    ebp,ecx
c0021d32:	85 ff                	test   edi,edi
c0021d34:	75 52                	jne    c0021d88 <__moddi3+0x94>
c0021d36:	89 c3                	mov    ebx,eax
c0021d38:	39 f0                	cmp    eax,esi
c0021d3a:	76 24                	jbe    c0021d60 <__moddi3+0x6c>
c0021d3c:	89 c8                	mov    eax,ecx
c0021d3e:	89 f2                	mov    edx,esi
c0021d40:	f7 f3                	div    ebx
c0021d42:	89 d6                	mov    esi,edx
c0021d44:	89 f0                	mov    eax,esi
c0021d46:	31 d2                	xor    edx,edx
c0021d48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d4c:	85 c9                	test   ecx,ecx
c0021d4e:	74 07                	je     c0021d57 <__moddi3+0x63>
c0021d50:	f7 d8                	neg    eax
c0021d52:	83 d2 00             	adc    edx,0x0
c0021d55:	f7 da                	neg    edx
c0021d57:	83 c4 2c             	add    esp,0x2c
c0021d5a:	5b                   	pop    ebx
c0021d5b:	5e                   	pop    esi
c0021d5c:	5f                   	pop    edi
c0021d5d:	5d                   	pop    ebp
c0021d5e:	c3                   	ret    
c0021d5f:	90                   	nop
c0021d60:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021d64:	85 db                	test   ebx,ebx
c0021d66:	75 0d                	jne    c0021d75 <__moddi3+0x81>
c0021d68:	b8 01 00 00 00       	mov    eax,0x1
c0021d6d:	31 d2                	xor    edx,edx
c0021d6f:	f7 f7                	div    edi
c0021d71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021d75:	89 f0                	mov    eax,esi
c0021d77:	31 d2                	xor    edx,edx
c0021d79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021d7d:	f7 f7                	div    edi
c0021d7f:	89 e8                	mov    eax,ebp
c0021d81:	f7 f7                	div    edi
c0021d83:	89 d6                	mov    esi,edx
c0021d85:	eb bd                	jmp    c0021d44 <__moddi3+0x50>
c0021d87:	90                   	nop
c0021d88:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021d8c:	39 f7                	cmp    edi,esi
c0021d8e:	76 20                	jbe    c0021db0 <__moddi3+0xbc>
c0021d90:	89 c8                	mov    eax,ecx
c0021d92:	89 f2                	mov    edx,esi
c0021d94:	eb b2                	jmp    c0021d48 <__moddi3+0x54>
c0021d96:	66 90                	xchg   ax,ax
c0021d98:	f7 d9                	neg    ecx
c0021d9a:	83 d3 00             	adc    ebx,0x0
c0021d9d:	f7 db                	neg    ebx
c0021d9f:	89 de                	mov    esi,ebx
c0021da1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021da9:	e9 6f ff ff ff       	jmp    c0021d1d <__moddi3+0x29>
c0021dae:	66 90                	xchg   ax,ax
c0021db0:	0f bd c7             	bsr    eax,edi
c0021db3:	83 f0 1f             	xor    eax,0x1f
c0021db6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021dba:	75 24                	jne    c0021de0 <__moddi3+0xec>
c0021dbc:	39 f7                	cmp    edi,esi
c0021dbe:	72 06                	jb     c0021dc6 <__moddi3+0xd2>
c0021dc0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021dc4:	77 0c                	ja     c0021dd2 <__moddi3+0xde>
c0021dc6:	89 e9                	mov    ecx,ebp
c0021dc8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021dcc:	19 fe                	sbb    esi,edi
c0021dce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021dd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021dd6:	89 f2                	mov    edx,esi
c0021dd8:	e9 6b ff ff ff       	jmp    c0021d48 <__moddi3+0x54>
c0021ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0021de0:	b8 20 00 00 00       	mov    eax,0x20
c0021de5:	89 c2                	mov    edx,eax
c0021de7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021deb:	29 da                	sub    edx,ebx
c0021ded:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021df1:	88 d9                	mov    cl,bl
c0021df3:	d3 e7                	shl    edi,cl
c0021df5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021df9:	88 d1                	mov    cl,dl
c0021dfb:	d3 e8                	shr    eax,cl
c0021dfd:	09 c7                	or     edi,eax
c0021dff:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021e03:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021e07:	89 d8                	mov    eax,ebx
c0021e09:	88 d9                	mov    cl,bl
c0021e0b:	d3 e7                	shl    edi,cl
c0021e0d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021e11:	89 f3                	mov    ebx,esi
c0021e13:	88 d1                	mov    cl,dl
c0021e15:	d3 eb                	shr    ebx,cl
c0021e17:	89 c7                	mov    edi,eax
c0021e19:	88 c1                	mov    cl,al
c0021e1b:	d3 e6                	shl    esi,cl
c0021e1d:	89 e8                	mov    eax,ebp
c0021e1f:	88 d1                	mov    cl,dl
c0021e21:	d3 e8                	shr    eax,cl
c0021e23:	09 f0                	or     eax,esi
c0021e25:	89 f9                	mov    ecx,edi
c0021e27:	d3 e5                	shl    ebp,cl
c0021e29:	89 da                	mov    edx,ebx
c0021e2b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021e2f:	89 d3                	mov    ebx,edx
c0021e31:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021e35:	89 c6                	mov    esi,eax
c0021e37:	89 d1                	mov    ecx,edx
c0021e39:	39 d3                	cmp    ebx,edx
c0021e3b:	72 27                	jb     c0021e64 <__moddi3+0x170>
c0021e3d:	74 21                	je     c0021e60 <__moddi3+0x16c>
c0021e3f:	29 f5                	sub    ebp,esi
c0021e41:	19 cb                	sbb    ebx,ecx
c0021e43:	89 de                	mov    esi,ebx
c0021e45:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021e49:	d3 e6                	shl    esi,cl
c0021e4b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021e4f:	89 f9                	mov    ecx,edi
c0021e51:	d3 ed                	shr    ebp,cl
c0021e53:	09 ee                	or     esi,ebp
c0021e55:	89 f0                	mov    eax,esi
c0021e57:	d3 eb                	shr    ebx,cl
c0021e59:	89 da                	mov    edx,ebx
c0021e5b:	e9 e8 fe ff ff       	jmp    c0021d48 <__moddi3+0x54>
c0021e60:	39 c5                	cmp    ebp,eax
c0021e62:	73 db                	jae    c0021e3f <__moddi3+0x14b>
c0021e64:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021e68:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021e6c:	89 d1                	mov    ecx,edx
c0021e6e:	89 c6                	mov    esi,eax
c0021e70:	eb cd                	jmp    c0021e3f <__moddi3+0x14b>
c0021e72:	66 90                	xchg   ax,ax

c0021e74 <__udivdi3>:
c0021e74:	55                   	push   ebp
c0021e75:	57                   	push   edi
c0021e76:	56                   	push   esi
c0021e77:	53                   	push   ebx
c0021e78:	83 ec 1c             	sub    esp,0x1c
c0021e7b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021e7f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021e83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021e87:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021e8b:	85 d2                	test   edx,edx
c0021e8d:	75 41                	jne    c0021ed0 <__udivdi3+0x5c>
c0021e8f:	39 f7                	cmp    edi,esi
c0021e91:	76 15                	jbe    c0021ea8 <__udivdi3+0x34>
c0021e93:	89 e8                	mov    eax,ebp
c0021e95:	89 f2                	mov    edx,esi
c0021e97:	f7 f7                	div    edi
c0021e99:	31 db                	xor    ebx,ebx
c0021e9b:	89 da                	mov    edx,ebx
c0021e9d:	83 c4 1c             	add    esp,0x1c
c0021ea0:	5b                   	pop    ebx
c0021ea1:	5e                   	pop    esi
c0021ea2:	5f                   	pop    edi
c0021ea3:	5d                   	pop    ebp
c0021ea4:	c3                   	ret    
c0021ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ea8:	89 f9                	mov    ecx,edi
c0021eaa:	85 ff                	test   edi,edi
c0021eac:	75 0b                	jne    c0021eb9 <__udivdi3+0x45>
c0021eae:	b8 01 00 00 00       	mov    eax,0x1
c0021eb3:	31 d2                	xor    edx,edx
c0021eb5:	f7 f7                	div    edi
c0021eb7:	89 c1                	mov    ecx,eax
c0021eb9:	31 d2                	xor    edx,edx
c0021ebb:	89 f0                	mov    eax,esi
c0021ebd:	f7 f1                	div    ecx
c0021ebf:	89 c3                	mov    ebx,eax
c0021ec1:	89 e8                	mov    eax,ebp
c0021ec3:	f7 f1                	div    ecx
c0021ec5:	89 da                	mov    edx,ebx
c0021ec7:	83 c4 1c             	add    esp,0x1c
c0021eca:	5b                   	pop    ebx
c0021ecb:	5e                   	pop    esi
c0021ecc:	5f                   	pop    edi
c0021ecd:	5d                   	pop    ebp
c0021ece:	c3                   	ret    
c0021ecf:	90                   	nop
c0021ed0:	39 f2                	cmp    edx,esi
c0021ed2:	77 1c                	ja     c0021ef0 <__udivdi3+0x7c>
c0021ed4:	0f bd da             	bsr    ebx,edx
c0021ed7:	83 f3 1f             	xor    ebx,0x1f
c0021eda:	75 24                	jne    c0021f00 <__udivdi3+0x8c>
c0021edc:	39 f2                	cmp    edx,esi
c0021ede:	72 08                	jb     c0021ee8 <__udivdi3+0x74>
c0021ee0:	39 ef                	cmp    edi,ebp
c0021ee2:	0f 87 84 00 00 00    	ja     c0021f6c <__udivdi3+0xf8>
c0021ee8:	b8 01 00 00 00       	mov    eax,0x1
c0021eed:	eb ac                	jmp    c0021e9b <__udivdi3+0x27>
c0021eef:	90                   	nop
c0021ef0:	31 db                	xor    ebx,ebx
c0021ef2:	31 c0                	xor    eax,eax
c0021ef4:	89 da                	mov    edx,ebx
c0021ef6:	83 c4 1c             	add    esp,0x1c
c0021ef9:	5b                   	pop    ebx
c0021efa:	5e                   	pop    esi
c0021efb:	5f                   	pop    edi
c0021efc:	5d                   	pop    ebp
c0021efd:	c3                   	ret    
c0021efe:	66 90                	xchg   ax,ax
c0021f00:	b8 20 00 00 00       	mov    eax,0x20
c0021f05:	29 d8                	sub    eax,ebx
c0021f07:	88 d9                	mov    cl,bl
c0021f09:	d3 e2                	shl    edx,cl
c0021f0b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021f0f:	89 fa                	mov    edx,edi
c0021f11:	88 c1                	mov    cl,al
c0021f13:	d3 ea                	shr    edx,cl
c0021f15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021f19:	09 d1                	or     ecx,edx
c0021f1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021f1f:	88 d9                	mov    cl,bl
c0021f21:	d3 e7                	shl    edi,cl
c0021f23:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021f27:	89 f7                	mov    edi,esi
c0021f29:	88 c1                	mov    cl,al
c0021f2b:	d3 ef                	shr    edi,cl
c0021f2d:	88 d9                	mov    cl,bl
c0021f2f:	d3 e6                	shl    esi,cl
c0021f31:	89 ea                	mov    edx,ebp
c0021f33:	88 c1                	mov    cl,al
c0021f35:	d3 ea                	shr    edx,cl
c0021f37:	09 d6                	or     esi,edx
c0021f39:	89 f0                	mov    eax,esi
c0021f3b:	89 fa                	mov    edx,edi
c0021f3d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021f41:	89 d7                	mov    edi,edx
c0021f43:	89 c6                	mov    esi,eax
c0021f45:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021f49:	39 d7                	cmp    edi,edx
c0021f4b:	72 13                	jb     c0021f60 <__udivdi3+0xec>
c0021f4d:	74 09                	je     c0021f58 <__udivdi3+0xe4>
c0021f4f:	89 f0                	mov    eax,esi
c0021f51:	31 db                	xor    ebx,ebx
c0021f53:	e9 43 ff ff ff       	jmp    c0021e9b <__udivdi3+0x27>
c0021f58:	88 d9                	mov    cl,bl
c0021f5a:	d3 e5                	shl    ebp,cl
c0021f5c:	39 c5                	cmp    ebp,eax
c0021f5e:	73 ef                	jae    c0021f4f <__udivdi3+0xdb>
c0021f60:	8d 46 ff             	lea    eax,[esi-0x1]
c0021f63:	31 db                	xor    ebx,ebx
c0021f65:	e9 31 ff ff ff       	jmp    c0021e9b <__udivdi3+0x27>
c0021f6a:	66 90                	xchg   ax,ax
c0021f6c:	31 c0                	xor    eax,eax
c0021f6e:	e9 28 ff ff ff       	jmp    c0021e9b <__udivdi3+0x27>
c0021f73:	90                   	nop

c0021f74 <__umoddi3>:
c0021f74:	55                   	push   ebp
c0021f75:	57                   	push   edi
c0021f76:	56                   	push   esi
c0021f77:	53                   	push   ebx
c0021f78:	83 ec 1c             	sub    esp,0x1c
c0021f7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021f7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021f83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021f87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021f8b:	89 da                	mov    edx,ebx
c0021f8d:	85 c0                	test   eax,eax
c0021f8f:	75 37                	jne    c0021fc8 <__umoddi3+0x54>
c0021f91:	39 df                	cmp    edi,ebx
c0021f93:	76 13                	jbe    c0021fa8 <__umoddi3+0x34>
c0021f95:	89 f0                	mov    eax,esi
c0021f97:	f7 f7                	div    edi
c0021f99:	89 d0                	mov    eax,edx
c0021f9b:	31 d2                	xor    edx,edx
c0021f9d:	83 c4 1c             	add    esp,0x1c
c0021fa0:	5b                   	pop    ebx
c0021fa1:	5e                   	pop    esi
c0021fa2:	5f                   	pop    edi
c0021fa3:	5d                   	pop    ebp
c0021fa4:	c3                   	ret    
c0021fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0021fa8:	89 fd                	mov    ebp,edi
c0021faa:	85 ff                	test   edi,edi
c0021fac:	75 0b                	jne    c0021fb9 <__umoddi3+0x45>
c0021fae:	b8 01 00 00 00       	mov    eax,0x1
c0021fb3:	31 d2                	xor    edx,edx
c0021fb5:	f7 f7                	div    edi
c0021fb7:	89 c5                	mov    ebp,eax
c0021fb9:	89 d8                	mov    eax,ebx
c0021fbb:	31 d2                	xor    edx,edx
c0021fbd:	f7 f5                	div    ebp
c0021fbf:	89 f0                	mov    eax,esi
c0021fc1:	f7 f5                	div    ebp
c0021fc3:	89 d0                	mov    eax,edx
c0021fc5:	eb d4                	jmp    c0021f9b <__umoddi3+0x27>
c0021fc7:	90                   	nop
c0021fc8:	89 f1                	mov    ecx,esi
c0021fca:	39 d8                	cmp    eax,ebx
c0021fcc:	76 0a                	jbe    c0021fd8 <__umoddi3+0x64>
c0021fce:	89 f0                	mov    eax,esi
c0021fd0:	83 c4 1c             	add    esp,0x1c
c0021fd3:	5b                   	pop    ebx
c0021fd4:	5e                   	pop    esi
c0021fd5:	5f                   	pop    edi
c0021fd6:	5d                   	pop    ebp
c0021fd7:	c3                   	ret    
c0021fd8:	0f bd e8             	bsr    ebp,eax
c0021fdb:	83 f5 1f             	xor    ebp,0x1f
c0021fde:	75 1c                	jne    c0021ffc <__umoddi3+0x88>
c0021fe0:	39 d8                	cmp    eax,ebx
c0021fe2:	72 04                	jb     c0021fe8 <__umoddi3+0x74>
c0021fe4:	39 f7                	cmp    edi,esi
c0021fe6:	77 08                	ja     c0021ff0 <__umoddi3+0x7c>
c0021fe8:	89 da                	mov    edx,ebx
c0021fea:	29 fe                	sub    esi,edi
c0021fec:	19 c2                	sbb    edx,eax
c0021fee:	89 f1                	mov    ecx,esi
c0021ff0:	89 c8                	mov    eax,ecx
c0021ff2:	83 c4 1c             	add    esp,0x1c
c0021ff5:	5b                   	pop    ebx
c0021ff6:	5e                   	pop    esi
c0021ff7:	5f                   	pop    edi
c0021ff8:	5d                   	pop    ebp
c0021ff9:	c3                   	ret    
c0021ffa:	66 90                	xchg   ax,ax
c0021ffc:	ba 20 00 00 00       	mov    edx,0x20
c0022001:	29 ea                	sub    edx,ebp
c0022003:	89 e9                	mov    ecx,ebp
c0022005:	d3 e0                	shl    eax,cl
c0022007:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002200b:	89 f8                	mov    eax,edi
c002200d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022011:	88 d1                	mov    cl,dl
c0022013:	d3 e8                	shr    eax,cl
c0022015:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022019:	09 c1                	or     ecx,eax
c002201b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002201f:	89 e9                	mov    ecx,ebp
c0022021:	d3 e7                	shl    edi,cl
c0022023:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022027:	89 d8                	mov    eax,ebx
c0022029:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002202d:	88 d1                	mov    cl,dl
c002202f:	d3 e8                	shr    eax,cl
c0022031:	89 c7                	mov    edi,eax
c0022033:	89 e9                	mov    ecx,ebp
c0022035:	d3 e3                	shl    ebx,cl
c0022037:	89 f0                	mov    eax,esi
c0022039:	88 d1                	mov    cl,dl
c002203b:	d3 e8                	shr    eax,cl
c002203d:	09 d8                	or     eax,ebx
c002203f:	89 e9                	mov    ecx,ebp
c0022041:	d3 e6                	shl    esi,cl
c0022043:	89 f3                	mov    ebx,esi
c0022045:	89 fa                	mov    edx,edi
c0022047:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002204b:	89 d1                	mov    ecx,edx
c002204d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022051:	89 c6                	mov    esi,eax
c0022053:	89 d7                	mov    edi,edx
c0022055:	39 d1                	cmp    ecx,edx
c0022057:	72 27                	jb     c0022080 <__umoddi3+0x10c>
c0022059:	74 21                	je     c002207c <__umoddi3+0x108>
c002205b:	89 ca                	mov    edx,ecx
c002205d:	29 f3                	sub    ebx,esi
c002205f:	19 fa                	sbb    edx,edi
c0022061:	89 d0                	mov    eax,edx
c0022063:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022067:	d3 e0                	shl    eax,cl
c0022069:	89 e9                	mov    ecx,ebp
c002206b:	d3 eb                	shr    ebx,cl
c002206d:	09 d8                	or     eax,ebx
c002206f:	d3 ea                	shr    edx,cl
c0022071:	83 c4 1c             	add    esp,0x1c
c0022074:	5b                   	pop    ebx
c0022075:	5e                   	pop    esi
c0022076:	5f                   	pop    edi
c0022077:	5d                   	pop    ebp
c0022078:	c3                   	ret    
c0022079:	8d 76 00             	lea    esi,[esi+0x0]
c002207c:	39 c3                	cmp    ebx,eax
c002207e:	73 db                	jae    c002205b <__umoddi3+0xe7>
c0022080:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022084:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022088:	89 d7                	mov    edi,edx
c002208a:	89 c6                	mov    esi,eax
c002208c:	eb cd                	jmp    c002205b <__umoddi3+0xe7>
c002208e:	66 90                	xchg   ax,ax

c0022090 <acos>:
c0022090:	83 ec 4c             	sub    esp,0x4c
c0022093:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0022097:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002209b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002209f:	89 d0                	mov    eax,edx
c00220a1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00220a6:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c00220ab:	7e 23                	jle    c00220d0 <acos+0x40>
c00220ad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00220b1:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c00220b6:	09 c8                	or     eax,ecx
c00220b8:	0f 85 32 01 00 00    	jne    c00221f0 <acos+0x160>
c00220be:	85 d2                	test   edx,edx
c00220c0:	0f 8e 4a 01 00 00    	jle    c0022210 <acos+0x180>
c00220c6:	d9 ee                	fldz   
c00220c8:	83 c4 4c             	add    esp,0x4c
c00220cb:	c3                   	ret    
c00220cc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00220d0:	3d ff ff df 3f       	cmp    eax,0x3fdfffff
c00220d5:	7f 29                	jg     c0022100 <acos+0x70>
c00220d7:	3d 00 00 60 3c       	cmp    eax,0x3c600000
c00220dc:	0f 8f 4e 01 00 00    	jg     c0022230 <acos+0x1a0>
c00220e2:	dd 05 a8 b8 02 c0    	fld    QWORD PTR ds:0xc002b8a8
c00220e8:	dc 05 b8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029eb8
c00220ee:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00220f2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00220f6:	83 c4 4c             	add    esp,0x4c
c00220f9:	c3                   	ret    
c00220fa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022100:	85 d2                	test   edx,edx
c0022102:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022106:	0f 88 d4 01 00 00    	js     c00222e0 <acos+0x250>
c002210c:	d9 e8                	fld1   
c002210e:	de e1                	fsubrp st(1),st
c0022110:	d8 0d 14 9f 02 c0    	fmul   DWORD PTR ds:0xc0029f14
c0022116:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002211a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002211e:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0022122:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022125:	e8 36 27 00 00       	call   c0024860 <sqrt>
c002212a:	31 c0                	xor    eax,eax
c002212c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022130:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022134:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022138:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002213c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022140:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0022144:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022148:	d9 c1                	fld    st(1)
c002214a:	dc 0d c0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ec0
c0022150:	dc 05 c8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ec8
c0022156:	d8 ca                	fmul   st,st(2)
c0022158:	dc 25 d0 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ed0
c002215e:	d8 ca                	fmul   st,st(2)
c0022160:	dc 05 d8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ed8
c0022166:	d8 ca                	fmul   st,st(2)
c0022168:	dc 25 e0 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ee0
c002216e:	d8 ca                	fmul   st,st(2)
c0022170:	dc 05 e8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ee8
c0022176:	d8 ca                	fmul   st,st(2)
c0022178:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002217c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022180:	d9 c2                	fld    st(2)
c0022182:	dc 0d f0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ef0
c0022188:	dc 25 f8 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ef8
c002218e:	d8 cb                	fmul   st,st(3)
c0022190:	dc 05 00 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f00
c0022196:	d8 cb                	fmul   st,st(3)
c0022198:	dc 25 08 9f 02 c0    	fsub   QWORD PTR ds:0xc0029f08
c002219e:	d8 cb                	fmul   st,st(3)
c00221a0:	d9 e8                	fld1   
c00221a2:	de c1                	faddp  st(1),st
c00221a4:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00221a8:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00221ac:	de f9                	fdivp  st(1),st
c00221ae:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00221b2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00221b6:	d8 c9                	fmul   st,st(1)
c00221b8:	d9 c3                	fld    st(3)
c00221ba:	d8 cc                	fmul   st,st(4)
c00221bc:	de eb                	fsubp  st(3),st
c00221be:	d9 c9                	fxch   st(1)
c00221c0:	d8 c3                	fadd   st,st(3)
c00221c2:	de fa                	fdivp  st(2),st
c00221c4:	d9 c9                	fxch   st(1)
c00221c6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00221ca:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00221ce:	de c1                	faddp  st(1),st
c00221d0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00221d4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00221d8:	de c1                	faddp  st(1),st
c00221da:	d8 c0                	fadd   st,st(0)
c00221dc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00221e0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00221e4:	83 c4 4c             	add    esp,0x4c
c00221e7:	c3                   	ret    
c00221e8:	90                   	nop
c00221e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00221f0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00221f4:	d8 e0                	fsub   st,st(0)
c00221f6:	d8 f0                	fdiv   st,st(0)
c00221f8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00221fc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022200:	83 c4 4c             	add    esp,0x4c
c0022203:	c3                   	ret    
c0022204:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002220a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022210:	dd 05 a8 b8 02 c0    	fld    QWORD PTR ds:0xc002b8a8
c0022216:	d8 c0                	fadd   st,st(0)
c0022218:	dc 05 b0 9e 02 c0    	fadd   QWORD PTR ds:0xc0029eb0
c002221e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022222:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022226:	83 c4 4c             	add    esp,0x4c
c0022229:	c3                   	ret    
c002222a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022230:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022234:	d9 c0                	fld    st(0)
c0022236:	d8 c9                	fmul   st,st(1)
c0022238:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002223c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022240:	dd 05 a8 b8 02 c0    	fld    QWORD PTR ds:0xc002b8a8
c0022246:	d9 c1                	fld    st(1)
c0022248:	dc 0d c0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ec0
c002224e:	dc 05 c8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ec8
c0022254:	d8 ca                	fmul   st,st(2)
c0022256:	dc 25 d0 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ed0
c002225c:	d8 ca                	fmul   st,st(2)
c002225e:	dc 05 d8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ed8
c0022264:	d8 ca                	fmul   st,st(2)
c0022266:	dc 25 e0 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ee0
c002226c:	d8 ca                	fmul   st,st(2)
c002226e:	dc 05 e8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ee8
c0022274:	d8 ca                	fmul   st,st(2)
c0022276:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002227a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002227e:	d9 c2                	fld    st(2)
c0022280:	dc 0d f0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ef0
c0022286:	dc 25 f8 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ef8
c002228c:	d8 cb                	fmul   st,st(3)
c002228e:	dc 05 00 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f00
c0022294:	d8 cb                	fmul   st,st(3)
c0022296:	dc 25 08 9f 02 c0    	fsub   QWORD PTR ds:0xc0029f08
c002229c:	de cb                	fmulp  st(3),st
c002229e:	d9 ca                	fxch   st(2)
c00222a0:	d8 05 10 9f 02 c0    	fadd   DWORD PTR ds:0xc0029f10
c00222a6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00222aa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00222ae:	de fa                	fdivp  st(2),st
c00222b0:	d9 c9                	fxch   st(1)
c00222b2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00222b6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00222ba:	d8 ca                	fmul   st,st(2)
c00222bc:	de e9                	fsubp  st(1),st
c00222be:	de e9                	fsubp  st(1),st
c00222c0:	dc 2d b8 9e 02 c0    	fsubr  QWORD PTR ds:0xc0029eb8
c00222c6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00222ca:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00222ce:	83 c4 4c             	add    esp,0x4c
c00222d1:	c3                   	ret    
c00222d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00222d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00222e0:	d9 e8                	fld1   
c00222e2:	de c1                	faddp  st(1),st
c00222e4:	d8 0d 14 9f 02 c0    	fmul   DWORD PTR ds:0xc0029f14
c00222ea:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00222ee:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00222f2:	d9 c0                	fld    st(0)
c00222f4:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00222f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c00222fb:	e8 60 25 00 00       	call   c0024860 <sqrt>
c0022300:	dd 05 a8 b8 02 c0    	fld    QWORD PTR ds:0xc002b8a8
c0022306:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c002230a:	d9 c0                	fld    st(0)
c002230c:	dc 0d c0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ec0
c0022312:	dc 05 c8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ec8
c0022318:	d8 c9                	fmul   st,st(1)
c002231a:	dc 25 d0 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ed0
c0022320:	d8 c9                	fmul   st,st(1)
c0022322:	dc 05 d8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ed8
c0022328:	d8 c9                	fmul   st,st(1)
c002232a:	dc 25 e0 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ee0
c0022330:	d8 c9                	fmul   st,st(1)
c0022332:	dc 05 e8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ee8
c0022338:	d8 c9                	fmul   st,st(1)
c002233a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002233e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022342:	d9 c1                	fld    st(1)
c0022344:	dc 0d f0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ef0
c002234a:	dc 25 f8 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ef8
c0022350:	d8 ca                	fmul   st,st(2)
c0022352:	dc 05 00 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f00
c0022358:	d8 ca                	fmul   st,st(2)
c002235a:	dc 25 08 9f 02 c0    	fsub   QWORD PTR ds:0xc0029f08
c0022360:	de ca                	fmulp  st(2),st
c0022362:	d9 e8                	fld1   
c0022364:	de c2                	faddp  st(2),st
c0022366:	d9 c9                	fxch   st(1)
c0022368:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002236c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022370:	de f9                	fdivp  st(1),st
c0022372:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022376:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002237a:	d8 ca                	fmul   st,st(2)
c002237c:	de e1                	fsubrp st(1),st
c002237e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022382:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022386:	de c1                	faddp  st(1),st
c0022388:	d8 c0                	fadd   st,st(0)
c002238a:	dc 2d b0 9e 02 c0    	fsubr  QWORD PTR ds:0xc0029eb0
c0022390:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022394:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022398:	83 c4 4c             	add    esp,0x4c
c002239b:	c3                   	ret    
c002239c:	66 90                	xchg   ax,ax
c002239e:	66 90                	xchg   ax,ax

c00223a0 <asin>:
c00223a0:	56                   	push   esi
c00223a1:	53                   	push   ebx
c00223a2:	83 ec 44             	sub    esp,0x44
c00223a5:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00223a9:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00223ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00223b1:	89 f3                	mov    ebx,esi
c00223b3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00223b9:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c00223bf:	7e 4f                	jle    c0022410 <asin+0x70>
c00223c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c5:	81 eb 00 00 f0 3f    	sub    ebx,0x3ff00000
c00223cb:	09 c3                	or     ebx,eax
c00223cd:	74 21                	je     c00223f0 <asin+0x50>
c00223cf:	d8 e0                	fsub   st,st(0)
c00223d1:	d8 f0                	fdiv   st,st(0)
c00223d3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00223d7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00223db:	eb 05                	jmp    c00223e2 <asin+0x42>
c00223dd:	8d 76 00             	lea    esi,[esi+0x0]
c00223e0:	dd d9                	fstp   st(1)
c00223e2:	83 c4 44             	add    esp,0x44
c00223e5:	5b                   	pop    ebx
c00223e6:	5e                   	pop    esi
c00223e7:	c3                   	ret    
c00223e8:	90                   	nop
c00223e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00223f0:	d9 c0                	fld    st(0)
c00223f2:	dc 0d b8 9e 02 c0    	fmul   QWORD PTR ds:0xc0029eb8
c00223f8:	d9 c9                	fxch   st(1)
c00223fa:	dc 0d 18 9f 02 c0    	fmul   QWORD PTR ds:0xc0029f18
c0022400:	de c1                	faddp  st(1),st
c0022402:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022406:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002240a:	83 c4 44             	add    esp,0x44
c002240d:	5b                   	pop    ebx
c002240e:	5e                   	pop    esi
c002240f:	c3                   	ret    
c0022410:	dd d8                	fstp   st(0)
c0022412:	81 fb ff ff df 3f    	cmp    ebx,0x3fdfffff
c0022418:	0f 8f b2 00 00 00    	jg     c00224d0 <asin+0x130>
c002241e:	81 fb ff ff 4f 3e    	cmp    ebx,0x3e4fffff
c0022424:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022428:	7f 16                	jg     c0022440 <asin+0xa0>
c002242a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002242e:	d9 e8                	fld1   
c0022430:	d9 c2                	fld    st(2)
c0022432:	dc 05 20 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f20
c0022438:	df f1                	fcomip st,st(1)
c002243a:	dd d8                	fstp   st(0)
c002243c:	77 a2                	ja     c00223e0 <asin+0x40>
c002243e:	dd d8                	fstp   st(0)
c0022440:	d9 c0                	fld    st(0)
c0022442:	d8 c9                	fmul   st,st(1)
c0022444:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022448:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002244c:	d9 c0                	fld    st(0)
c002244e:	dc 0d c0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ec0
c0022454:	dc 05 c8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ec8
c002245a:	d8 c9                	fmul   st,st(1)
c002245c:	dc 25 d0 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ed0
c0022462:	d8 c9                	fmul   st,st(1)
c0022464:	dc 05 d8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ed8
c002246a:	d8 c9                	fmul   st,st(1)
c002246c:	dc 25 e0 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ee0
c0022472:	d8 c9                	fmul   st,st(1)
c0022474:	dc 05 e8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ee8
c002247a:	d8 c9                	fmul   st,st(1)
c002247c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022480:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022484:	d9 c1                	fld    st(1)
c0022486:	dc 0d f0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ef0
c002248c:	dc 25 f8 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ef8
c0022492:	d8 ca                	fmul   st,st(2)
c0022494:	dc 05 00 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f00
c002249a:	d8 ca                	fmul   st,st(2)
c002249c:	dc 25 08 9f 02 c0    	fsub   QWORD PTR ds:0xc0029f08
c00224a2:	de ca                	fmulp  st(2),st
c00224a4:	d9 c9                	fxch   st(1)
c00224a6:	d8 05 10 9f 02 c0    	fadd   DWORD PTR ds:0xc0029f10
c00224ac:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00224b0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00224b4:	de f9                	fdivp  st(1),st
c00224b6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00224ba:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00224be:	d8 c9                	fmul   st,st(1)
c00224c0:	de c1                	faddp  st(1),st
c00224c2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00224c6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00224ca:	83 c4 44             	add    esp,0x44
c00224cd:	5b                   	pop    ebx
c00224ce:	5e                   	pop    esi
c00224cf:	c3                   	ret    
c00224d0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00224d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00224d7:	e8 34 1d 00 00       	call   c0024210 <fabs>
c00224dc:	d9 e8                	fld1   
c00224de:	dc e1                	fsubr  st(1),st
c00224e0:	d9 c9                	fxch   st(1)
c00224e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00224e6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00224ea:	d9 05 14 9f 02 c0    	fld    DWORD PTR ds:0xc0029f14
c00224f0:	de c9                	fmulp  st(1),st
c00224f2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00224f6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00224fa:	d9 c0                	fld    st(0)
c00224fc:	d9 c0                	fld    st(0)
c00224fe:	dc 0d c0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ec0
c0022504:	dc 05 c8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ec8
c002250a:	d8 c9                	fmul   st,st(1)
c002250c:	dc 25 d0 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ed0
c0022512:	d8 c9                	fmul   st,st(1)
c0022514:	dc 05 d8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ed8
c002251a:	d8 c9                	fmul   st,st(1)
c002251c:	dc 25 e0 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ee0
c0022522:	d8 c9                	fmul   st,st(1)
c0022524:	dc 05 e8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ee8
c002252a:	d8 c9                	fmul   st,st(1)
c002252c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022530:	d9 c0                	fld    st(0)
c0022532:	dc 0d f0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ef0
c0022538:	dc 25 f8 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ef8
c002253e:	d8 c9                	fmul   st,st(1)
c0022540:	dc 05 00 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f00
c0022546:	d8 c9                	fmul   st,st(1)
c0022548:	dc 25 08 9f 02 c0    	fsub   QWORD PTR ds:0xc0029f08
c002254e:	d8 c9                	fmul   st,st(1)
c0022550:	d9 c9                	fxch   st(1)
c0022552:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0022556:	de c2                	faddp  st(2),st
c0022558:	d9 c9                	fxch   st(1)
c002255a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c002255e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022561:	e8 fa 22 00 00       	call   c0024860 <sqrt>
c0022566:	81 fb 32 33 ef 3f    	cmp    ebx,0x3fef3332
c002256c:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0022570:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0022574:	7e 4a                	jle    c00225c0 <asin+0x220>
c0022576:	dd d8                	fstp   st(0)
c0022578:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002257c:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0022580:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022584:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022588:	d8 c9                	fmul   st,st(1)
c002258a:	de c1                	faddp  st(1),st
c002258c:	d8 c0                	fadd   st,st(0)
c002258e:	dc 25 18 9f 02 c0    	fsub   QWORD PTR ds:0xc0029f18
c0022594:	dc 2d b8 9e 02 c0    	fsubr  QWORD PTR ds:0xc0029eb8
c002259a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002259e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00225a2:	85 f6                	test   esi,esi
c00225a4:	0f 8f 38 fe ff ff    	jg     c00223e2 <asin+0x42>
c00225aa:	d9 e0                	fchs   
c00225ac:	e9 31 fe ff ff       	jmp    c00223e2 <asin+0x42>
c00225b1:	eb 0d                	jmp    c00225c0 <asin+0x220>
c00225b3:	90                   	nop
c00225b4:	90                   	nop
c00225b5:	90                   	nop
c00225b6:	90                   	nop
c00225b7:	90                   	nop
c00225b8:	90                   	nop
c00225b9:	90                   	nop
c00225ba:	90                   	nop
c00225bb:	90                   	nop
c00225bc:	90                   	nop
c00225bd:	90                   	nop
c00225be:	90                   	nop
c00225bf:	90                   	nop
c00225c0:	dd d9                	fstp   st(1)
c00225c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00225c6:	31 c0                	xor    eax,eax
c00225c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00225cc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00225d0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00225d4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00225d8:	d9 c0                	fld    st(0)
c00225da:	d8 c1                	fadd   st,st(1)
c00225dc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00225e0:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c00225e4:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00225e8:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00225ec:	de c9                	fmulp  st(1),st
c00225ee:	d9 c2                	fld    st(2)
c00225f0:	d8 cb                	fmul   st,st(3)
c00225f2:	de ec                	fsubp  st(4),st
c00225f4:	d9 c9                	fxch   st(1)
c00225f6:	d8 c2                	fadd   st,st(2)
c00225f8:	de fb                	fdivp  st(3),st
c00225fa:	d9 ca                	fxch   st(2)
c00225fc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022600:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022604:	d8 c0                	fadd   st,st(0)
c0022606:	dc 2d 18 9f 02 c0    	fsubr  QWORD PTR ds:0xc0029f18
c002260c:	de ea                	fsubp  st(2),st
c002260e:	d9 c9                	fxch   st(1)
c0022610:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022614:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022618:	d9 c9                	fxch   st(1)
c002261a:	d8 c0                	fadd   st,st(0)
c002261c:	dd 05 28 9f 02 c0    	fld    QWORD PTR ds:0xc0029f28
c0022622:	dc e1                	fsubr  st(1),st
c0022624:	d9 c9                	fxch   st(1)
c0022626:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002262a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002262e:	de ea                	fsubp  st(2),st
c0022630:	de e1                	fsubrp st(1),st
c0022632:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022636:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002263a:	e9 63 ff ff ff       	jmp    c00225a2 <asin+0x202>
c002263f:	90                   	nop

c0022640 <atan2>:
c0022640:	83 ec 4c             	sub    esp,0x4c
c0022643:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0022647:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c002264b:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002264f:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0022653:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022657:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c002265b:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c002265f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0022663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022667:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002266b:	89 c1                	mov    ecx,eax
c002266d:	f7 d9                	neg    ecx
c002266f:	89 d3                	mov    ebx,edx
c0022671:	09 c1                	or     ecx,eax
c0022673:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0022679:	c1 e9 1f             	shr    ecx,0x1f
c002267c:	09 d9                	or     ecx,ebx
c002267e:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0022684:	77 7a                	ja     c0022700 <atan2+0xc0>
c0022686:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002268a:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c002268e:	89 f1                	mov    ecx,esi
c0022690:	f7 d9                	neg    ecx
c0022692:	89 ef                	mov    edi,ebp
c0022694:	09 f1                	or     ecx,esi
c0022696:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
c002269c:	c1 e9 1f             	shr    ecx,0x1f
c002269f:	09 f9                	or     ecx,edi
c00226a1:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c00226a7:	77 57                	ja     c0022700 <atan2+0xc0>
c00226a9:	81 fa 00 00 f0 3f    	cmp    edx,0x3ff00000
c00226af:	75 08                	jne    c00226b9 <atan2+0x79>
c00226b1:	85 c0                	test   eax,eax
c00226b3:	0f 84 f7 00 00 00    	je     c00227b0 <atan2+0x170>
c00226b9:	89 d1                	mov    ecx,edx
c00226bb:	c1 f9 1e             	sar    ecx,0x1e
c00226be:	83 e1 02             	and    ecx,0x2
c00226c1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00226c5:	89 e9                	mov    ecx,ebp
c00226c7:	c1 e9 1f             	shr    ecx,0x1f
c00226ca:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00226ce:	09 fe                	or     esi,edi
c00226d0:	75 5e                	jne    c0022730 <atan2+0xf0>
c00226d2:	83 f9 02             	cmp    ecx,0x2
c00226d5:	0f 84 65 01 00 00    	je     c0022840 <atan2+0x200>
c00226db:	83 f9 03             	cmp    ecx,0x3
c00226de:	0f 85 1c 01 00 00    	jne    c0022800 <atan2+0x1c0>
c00226e4:	dd 05 b8 b8 02 c0    	fld    QWORD PTR ds:0xc002b8b8
c00226ea:	dd 05 30 9f 02 c0    	fld    QWORD PTR ds:0xc0029f30
c00226f0:	de e1                	fsubrp st(1),st
c00226f2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00226f6:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00226fa:	eb 14                	jmp    c0022710 <atan2+0xd0>
c00226fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022700:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022704:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0022708:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002270c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022710:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022714:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0022718:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c002271c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0022720:	83 c4 4c             	add    esp,0x4c
c0022723:	c3                   	ret    
c0022724:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002272a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022730:	09 d8                	or     eax,ebx
c0022732:	0f 84 98 00 00 00    	je     c00227d0 <atan2+0x190>
c0022738:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c002273e:	0f 84 1c 01 00 00    	je     c0022860 <atan2+0x220>
c0022744:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c002274a:	0f 84 80 00 00 00    	je     c00227d0 <atan2+0x190>
c0022750:	29 df                	sub    edi,ebx
c0022752:	c1 ff 14             	sar    edi,0x14
c0022755:	83 ff 3c             	cmp    edi,0x3c
c0022758:	0f 8f b2 00 00 00    	jg     c0022810 <atan2+0x1d0>
c002275e:	c1 ea 1f             	shr    edx,0x1f
c0022761:	84 d2                	test   dl,dl
c0022763:	0f 84 97 01 00 00    	je     c0022900 <atan2+0x2c0>
c0022769:	83 ff c4             	cmp    edi,0xffffffc4
c002276c:	0f 8d 8e 01 00 00    	jge    c0022900 <atan2+0x2c0>
c0022772:	d9 ee                	fldz   
c0022774:	83 f9 01             	cmp    ecx,0x1
c0022777:	0f 84 02 01 00 00    	je     c002287f <atan2+0x23f>
c002277d:	83 f9 02             	cmp    ecx,0x2
c0022780:	0f 84 2a 01 00 00    	je     c00228b0 <atan2+0x270>
c0022786:	85 c9                	test   ecx,ecx
c0022788:	74 86                	je     c0022710 <atan2+0xd0>
c002278a:	dd 05 b0 b8 02 c0    	fld    QWORD PTR ds:0xc002b8b0
c0022790:	de e9                	fsubp  st(1),st
c0022792:	dc 25 b0 9e 02 c0    	fsub   QWORD PTR ds:0xc0029eb0
c0022798:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002279c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00227a0:	e9 6b ff ff ff       	jmp    c0022710 <atan2+0xd0>
c00227a5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00227a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00227b0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00227b4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00227b8:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00227bc:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00227c0:	83 c4 4c             	add    esp,0x4c
c00227c3:	e9 a8 11 00 00       	jmp    c0023970 <atan>
c00227c8:	90                   	nop
c00227c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00227d0:	85 ed                	test   ebp,ebp
c00227d2:	0f 88 b8 00 00 00    	js     c0022890 <atan2+0x250>
c00227d8:	dd 05 b8 b8 02 c0    	fld    QWORD PTR ds:0xc002b8b8
c00227de:	dc 05 b8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029eb8
c00227e4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00227e8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00227ec:	e9 1f ff ff ff       	jmp    c0022710 <atan2+0xd0>
c00227f1:	eb 0d                	jmp    c0022800 <atan2+0x1c0>
c00227f3:	90                   	nop
c00227f4:	90                   	nop
c00227f5:	90                   	nop
c00227f6:	90                   	nop
c00227f7:	90                   	nop
c00227f8:	90                   	nop
c00227f9:	90                   	nop
c00227fa:	90                   	nop
c00227fb:	90                   	nop
c00227fc:	90                   	nop
c00227fd:	90                   	nop
c00227fe:	90                   	nop
c00227ff:	90                   	nop
c0022800:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022804:	e9 07 ff ff ff       	jmp    c0022710 <atan2+0xd0>
c0022809:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022810:	dd 05 b0 b8 02 c0    	fld    QWORD PTR ds:0xc002b8b0
c0022816:	83 e1 01             	and    ecx,0x1
c0022819:	d9 05 14 9f 02 c0    	fld    DWORD PTR ds:0xc0029f14
c002281f:	de c9                	fmulp  st(1),st
c0022821:	dc 05 b8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029eb8
c0022827:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002282b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002282f:	e9 40 ff ff ff       	jmp    c0022774 <atan2+0x134>
c0022834:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002283a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022840:	dd 05 b8 b8 02 c0    	fld    QWORD PTR ds:0xc002b8b8
c0022846:	dc 05 b0 9e 02 c0    	fadd   QWORD PTR ds:0xc0029eb0
c002284c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022850:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022854:	e9 b7 fe ff ff       	jmp    c0022710 <atan2+0xd0>
c0022859:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022860:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0022866:	74 68                	je     c00228d0 <atan2+0x290>
c0022868:	83 f9 02             	cmp    ecx,0x2
c002286b:	74 d3                	je     c0022840 <atan2+0x200>
c002286d:	83 f9 03             	cmp    ecx,0x3
c0022870:	0f 84 6e fe ff ff    	je     c00226e4 <atan2+0xa4>
c0022876:	d9 ee                	fldz   
c0022878:	49                   	dec    ecx
c0022879:	0f 85 91 fe ff ff    	jne    c0022710 <atan2+0xd0>
c002287f:	d9 e0                	fchs   
c0022881:	e9 8a fe ff ff       	jmp    c0022710 <atan2+0xd0>
c0022886:	8d 76 00             	lea    esi,[esi+0x0]
c0022889:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022890:	dd 05 b8 b8 02 c0    	fld    QWORD PTR ds:0xc002b8b8
c0022896:	dd 05 38 9f 02 c0    	fld    QWORD PTR ds:0xc0029f38
c002289c:	de e1                	fsubrp st(1),st
c002289e:	e9 41 ff ff ff       	jmp    c00227e4 <atan2+0x1a4>
c00228a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00228a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00228b0:	dd 05 b0 b8 02 c0    	fld    QWORD PTR ds:0xc002b8b0
c00228b6:	de e9                	fsubp  st(1),st
c00228b8:	dc 2d b0 9e 02 c0    	fsubr  QWORD PTR ds:0xc0029eb0
c00228be:	e9 21 ff ff ff       	jmp    c00227e4 <atan2+0x1a4>
c00228c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00228c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00228d0:	83 f9 02             	cmp    ecx,0x2
c00228d3:	0f 84 82 00 00 00    	je     c002295b <atan2+0x31b>
c00228d9:	83 f9 03             	cmp    ecx,0x3
c00228dc:	74 62                	je     c0022940 <atan2+0x300>
c00228de:	49                   	dec    ecx
c00228df:	90                   	nop
c00228e0:	74 43                	je     c0022925 <atan2+0x2e5>
c00228e2:	dd 05 b8 b8 02 c0    	fld    QWORD PTR ds:0xc002b8b8
c00228e8:	dc 05 28 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f28
c00228ee:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00228f2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00228f6:	e9 15 fe ff ff       	jmp    c0022710 <atan2+0xd0>
c00228fb:	90                   	nop
c00228fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022900:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0022904:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022908:	dc 74 24 10          	fdiv   QWORD PTR [esp+0x10]
c002290c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002290f:	e8 fc 18 00 00       	call   c0024210 <fabs>
c0022914:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022917:	e8 54 10 00 00       	call   c0023970 <atan>
c002291c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022920:	e9 4f fe ff ff       	jmp    c0022774 <atan2+0x134>
c0022925:	dd 05 b8 b8 02 c0    	fld    QWORD PTR ds:0xc002b8b8
c002292b:	dd 05 40 9f 02 c0    	fld    QWORD PTR ds:0xc0029f40
c0022931:	de e1                	fsubrp st(1),st
c0022933:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022937:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002293b:	e9 d0 fd ff ff       	jmp    c0022710 <atan2+0xd0>
c0022940:	dd 05 b8 b8 02 c0    	fld    QWORD PTR ds:0xc002b8b8
c0022946:	dd 05 50 9f 02 c0    	fld    QWORD PTR ds:0xc0029f50
c002294c:	de e1                	fsubrp st(1),st
c002294e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022952:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022956:	e9 b5 fd ff ff       	jmp    c0022710 <atan2+0xd0>
c002295b:	dd 05 b8 b8 02 c0    	fld    QWORD PTR ds:0xc002b8b8
c0022961:	dc 05 48 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f48
c0022967:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002296b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002296f:	e9 9c fd ff ff       	jmp    c0022710 <atan2+0xd0>
c0022974:	66 90                	xchg   ax,ax
c0022976:	66 90                	xchg   ax,ax
c0022978:	66 90                	xchg   ax,ax
c002297a:	66 90                	xchg   ax,ax
c002297c:	66 90                	xchg   ax,ax
c002297e:	66 90                	xchg   ax,ax

c0022980 <cosh>:
c0022980:	53                   	push   ebx
c0022981:	83 ec 28             	sub    esp,0x28
c0022984:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0022988:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002298c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022990:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0022996:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c002299c:	0f 8f 9e 00 00 00    	jg     c0022a40 <cosh+0xc0>
c00229a2:	dd d8                	fstp   st(0)
c00229a4:	81 fb 42 2e d6 3f    	cmp    ebx,0x3fd62e42
c00229aa:	7e 44                	jle    c00229f0 <cosh+0x70>
c00229ac:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c00229b2:	0f 8e a8 00 00 00    	jle    c0022a60 <cosh+0xe0>
c00229b8:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c00229be:	0f 8e dc 00 00 00    	jle    c0022aa0 <cosh+0x120>
c00229c4:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c00229ca:	0f 8e 00 01 00 00    	jle    c0022ad0 <cosh+0x150>
c00229d0:	d9 05 58 9f 02 c0    	fld    DWORD PTR ds:0xc0029f58
c00229d6:	eb 0c                	jmp    c00229e4 <cosh+0x64>
c00229d8:	90                   	nop
c00229d9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00229e0:	dd d9                	fstp   st(1)
c00229e2:	dd d9                	fstp   st(1)
c00229e4:	83 c4 28             	add    esp,0x28
c00229e7:	5b                   	pop    ebx
c00229e8:	c3                   	ret    
c00229e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00229f0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00229f4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00229f7:	e8 14 18 00 00       	call   c0024210 <fabs>
c00229fc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00229ff:	e8 7c 13 00 00       	call   c0023d80 <expm1>
c0022a04:	81 fb ff ff 7f 3c    	cmp    ebx,0x3c7fffff
c0022a0a:	d9 e8                	fld1   
c0022a0c:	d9 c1                	fld    st(1)
c0022a0e:	d8 c1                	fadd   st,st(1)
c0022a10:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022a14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022a18:	7e c6                	jle    c00229e0 <cosh+0x60>
c0022a1a:	d9 ca                	fxch   st(2)
c0022a1c:	d8 c8                	fmul   st,st(0)
c0022a1e:	d9 ca                	fxch   st(2)
c0022a20:	d8 c0                	fadd   st,st(0)
c0022a22:	de fa                	fdivp  st(2),st
c0022a24:	de c1                	faddp  st(1),st
c0022a26:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022a2a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022a2e:	83 c4 28             	add    esp,0x28
c0022a31:	5b                   	pop    ebx
c0022a32:	c3                   	ret    
c0022a33:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022a40:	d9 c0                	fld    st(0)
c0022a42:	de c9                	fmulp  st(1),st
c0022a44:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022a48:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022a4c:	83 c4 28             	add    esp,0x28
c0022a4f:	5b                   	pop    ebx
c0022a50:	c3                   	ret    
c0022a51:	eb 0d                	jmp    c0022a60 <cosh+0xe0>
c0022a53:	90                   	nop
c0022a54:	90                   	nop
c0022a55:	90                   	nop
c0022a56:	90                   	nop
c0022a57:	90                   	nop
c0022a58:	90                   	nop
c0022a59:	90                   	nop
c0022a5a:	90                   	nop
c0022a5b:	90                   	nop
c0022a5c:	90                   	nop
c0022a5d:	90                   	nop
c0022a5e:	90                   	nop
c0022a5f:	90                   	nop
c0022a60:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022a64:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022a67:	e8 a4 17 00 00       	call   c0024210 <fabs>
c0022a6c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022a6f:	e8 54 1d 00 00       	call   c00247c8 <exp>
c0022a74:	d9 05 14 9f 02 c0    	fld    DWORD PTR ds:0xc0029f14
c0022a7a:	d9 c1                	fld    st(1)
c0022a7c:	d8 c9                	fmul   st,st(1)
c0022a7e:	d9 c9                	fxch   st(1)
c0022a80:	de f2                	fdivrp st(2),st
c0022a82:	de c1                	faddp  st(1),st
c0022a84:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022a88:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022a8c:	e9 53 ff ff ff       	jmp    c00229e4 <cosh+0x64>
c0022a91:	eb 0d                	jmp    c0022aa0 <cosh+0x120>
c0022a93:	90                   	nop
c0022a94:	90                   	nop
c0022a95:	90                   	nop
c0022a96:	90                   	nop
c0022a97:	90                   	nop
c0022a98:	90                   	nop
c0022a99:	90                   	nop
c0022a9a:	90                   	nop
c0022a9b:	90                   	nop
c0022a9c:	90                   	nop
c0022a9d:	90                   	nop
c0022a9e:	90                   	nop
c0022a9f:	90                   	nop
c0022aa0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022aa4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022aa7:	e8 64 17 00 00       	call   c0024210 <fabs>
c0022aac:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022aaf:	e8 14 1d 00 00       	call   c00247c8 <exp>
c0022ab4:	d9 05 14 9f 02 c0    	fld    DWORD PTR ds:0xc0029f14
c0022aba:	de c9                	fmulp  st(1),st
c0022abc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022ac0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022ac4:	e9 1b ff ff ff       	jmp    c00229e4 <cosh+0x64>
c0022ac9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022ad0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022ad4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022ad7:	e8 34 17 00 00       	call   c0024210 <fabs>
c0022adc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022ae1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ae5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022ae8:	e8 d3 0c 00 00       	call   c00237c0 <__ldexp_exp>
c0022aed:	e9 f2 fe ff ff       	jmp    c00229e4 <cosh+0x64>
c0022af2:	66 90                	xchg   ax,ax
c0022af4:	66 90                	xchg   ax,ax
c0022af6:	66 90                	xchg   ax,ax
c0022af8:	66 90                	xchg   ax,ax
c0022afa:	66 90                	xchg   ax,ax
c0022afc:	66 90                	xchg   ax,ax
c0022afe:	66 90                	xchg   ax,ax

c0022b00 <pow>:
c0022b00:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0022b06:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
c0022b0d:	dd 84 24 a0 00 00 00 	fld    QWORD PTR [esp+0xa0]
c0022b14:	89 9c 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],ebx
c0022b1b:	89 bc 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],edi
c0022b22:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022b26:	89 ac 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],ebp
c0022b2d:	dd 84 24 a8 00 00 00 	fld    QWORD PTR [esp+0xa8]
c0022b34:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0022b38:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b40:	89 f3                	mov    ebx,esi
c0022b42:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0022b48:	89 d9                	mov    ecx,ebx
c0022b4a:	09 c1                	or     ecx,eax
c0022b4c:	0f 84 9e 00 00 00    	je     c0022bf0 <pow+0xf0>
c0022b52:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022b56:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022b5a:	81 ff 00 00 f0 3f    	cmp    edi,0x3ff00000
c0022b60:	75 3e                	jne    c0022ba0 <pow+0xa0>
c0022b62:	85 ed                	test   ebp,ebp
c0022b64:	75 3a                	jne    c0022ba0 <pow+0xa0>
c0022b66:	d9 e8                	fld1   
c0022b68:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022b6c:	eb 02                	jmp    c0022b70 <pow+0x70>
c0022b6e:	dd d8                	fstp   st(0)
c0022b70:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022b74:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0022b7b:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0022b82:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c0022b89:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0022b90:	81 c4 9c 00 00 00    	add    esp,0x9c
c0022b96:	c3                   	ret    
c0022b97:	89 f6                	mov    esi,esi
c0022b99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022ba0:	89 fa                	mov    edx,edi
c0022ba2:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0022ba8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0022bac:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c0022bb2:	7f 1c                	jg     c0022bd0 <pow+0xd0>
c0022bb4:	0f 94 c1             	sete   cl
c0022bb7:	85 ed                	test   ebp,ebp
c0022bb9:	0f 95 c2             	setne  dl
c0022bbc:	84 ca                	test   dl,cl
c0022bbe:	75 10                	jne    c0022bd0 <pow+0xd0>
c0022bc0:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0022bc6:	7f 08                	jg     c0022bd0 <pow+0xd0>
c0022bc8:	75 36                	jne    c0022c00 <pow+0x100>
c0022bca:	85 c0                	test   eax,eax
c0022bcc:	74 32                	je     c0022c00 <pow+0x100>
c0022bce:	66 90                	xchg   ax,ax
c0022bd0:	d9 ee                	fldz   
c0022bd2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022bd6:	d8 c1                	fadd   st,st(1)
c0022bd8:	d9 c9                	fxch   st(1)
c0022bda:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0022bde:	de c1                	faddp  st(1),st
c0022be0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022be4:	eb 8a                	jmp    c0022b70 <pow+0x70>
c0022be6:	8d 76 00             	lea    esi,[esi+0x0]
c0022be9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022bf0:	d9 e8                	fld1   
c0022bf2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022bf6:	e9 75 ff ff ff       	jmp    c0022b70 <pow+0x70>
c0022bfb:	90                   	nop
c0022bfc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022c00:	31 c9                	xor    ecx,ecx
c0022c02:	85 ff                	test   edi,edi
c0022c04:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0022c08:	0f 88 22 01 00 00    	js     c0022d30 <pow+0x230>
c0022c0e:	85 c0                	test   eax,eax
c0022c10:	75 5e                	jne    c0022c70 <pow+0x170>
c0022c12:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0022c18:	0f 84 72 01 00 00    	je     c0022d90 <pow+0x290>
c0022c1e:	81 fb 00 00 f0 3f    	cmp    ebx,0x3ff00000
c0022c24:	0f 84 b6 01 00 00    	je     c0022de0 <pow+0x2e0>
c0022c2a:	81 fe 00 00 00 40    	cmp    esi,0x40000000
c0022c30:	0f 84 38 07 00 00    	je     c002336e <pow+0x86e>
c0022c36:	81 fe 00 00 08 40    	cmp    esi,0x40080000
c0022c3c:	0f 84 33 08 00 00    	je     c0023475 <pow+0x975>
c0022c42:	81 fe 00 00 10 40    	cmp    esi,0x40100000
c0022c48:	0f 84 4f 08 00 00    	je     c002349d <pow+0x99d>
c0022c4e:	81 fe 00 00 e0 3f    	cmp    esi,0x3fe00000
c0022c54:	75 1a                	jne    c0022c70 <pow+0x170>
c0022c56:	89 f8                	mov    eax,edi
c0022c58:	f7 d0                	not    eax
c0022c5a:	c1 e8 1f             	shr    eax,0x1f
c0022c5d:	84 c0                	test   al,al
c0022c5f:	0f 85 f1 08 00 00    	jne    c0023556 <pow+0xa56>
c0022c65:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022c69:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022c70:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022c74:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022c77:	e8 94 15 00 00       	call   c0024210 <fabs>
c0022c7c:	85 ed                	test   ebp,ebp
c0022c7e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022c82:	75 1e                	jne    c0022ca2 <pow+0x1a2>
c0022c84:	89 f8                	mov    eax,edi
c0022c86:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0022c8b:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0022c90:	0f 84 33 06 00 00    	je     c00232c9 <pow+0x7c9>
c0022c96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022c9a:	85 c0                	test   eax,eax
c0022c9c:	0f 84 27 06 00 00    	je     c00232c9 <pow+0x7c9>
c0022ca2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022ca6:	89 f8                	mov    eax,edi
c0022ca8:	c1 e8 1f             	shr    eax,0x1f
c0022cab:	48                   	dec    eax
c0022cac:	09 c1                	or     ecx,eax
c0022cae:	0f 84 49 01 00 00    	je     c0022dfd <pow+0x2fd>
c0022cb4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022cb8:	d9 ee                	fldz   
c0022cba:	49                   	dec    ecx
c0022cbb:	09 c1                	or     ecx,eax
c0022cbd:	0f 85 4b 01 00 00    	jne    c0022e0e <pow+0x30e>
c0022cc3:	d9 e0                	fchs   
c0022cc5:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0022cc9:	d9 05 5c 9f 02 c0    	fld    DWORD PTR ds:0xc0029f5c
c0022ccf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0022cd3:	db 2d b0 9f 02 c0    	fld    TBYTE PTR ds:0xc0029fb0
c0022cd9:	db 2d c0 9f 02 c0    	fld    TBYTE PTR ds:0xc0029fc0
c0022cdf:	d9 e8                	fld1   
c0022ce1:	d9 e0                	fchs   
c0022ce3:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0022ce7:	81 fb 00 00 e0 41    	cmp    ebx,0x41e00000
c0022ced:	0f 8e 40 01 00 00    	jle    c0022e33 <pow+0x333>
c0022cf3:	81 fb 00 00 f0 43    	cmp    ebx,0x43f00000
c0022cf9:	0f 8e 93 06 00 00    	jle    c0023392 <pow+0x892>
c0022cff:	dd d8                	fstp   st(0)
c0022d01:	dd d8                	fstp   st(0)
c0022d03:	81 7c 24 30 ff ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3fefffff
c0022d0b:	0f 8f c9 07 00 00    	jg     c00234da <pow+0x9da>
c0022d11:	85 f6                	test   esi,esi
c0022d13:	0f 88 94 08 00 00    	js     c00235ad <pow+0xaad>
c0022d19:	d9 ee                	fldz   
c0022d1b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022d1f:	e9 4c fe ff ff       	jmp    c0022b70 <pow+0x70>
c0022d24:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022d2a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022d30:	81 fb ff ff 3f 43    	cmp    ebx,0x433fffff
c0022d36:	0f 8f 94 00 00 00    	jg     c0022dd0 <pow+0x2d0>
c0022d3c:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c0022d42:	0f 8e c6 fe ff ff    	jle    c0022c0e <pow+0x10e>
c0022d48:	89 d9                	mov    ecx,ebx
c0022d4a:	c1 f9 14             	sar    ecx,0x14
c0022d4d:	81 e9 ff 03 00 00    	sub    ecx,0x3ff
c0022d53:	83 f9 14             	cmp    ecx,0x14
c0022d56:	0f 8e e5 06 00 00    	jle    c0023441 <pow+0x941>
c0022d5c:	ba 34 00 00 00       	mov    edx,0x34
c0022d61:	29 ca                	sub    edx,ecx
c0022d63:	89 d1                	mov    ecx,edx
c0022d65:	89 c2                	mov    edx,eax
c0022d67:	d3 ea                	shr    edx,cl
c0022d69:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022d6d:	d3 e2                	shl    edx,cl
c0022d6f:	39 c2                	cmp    edx,eax
c0022d71:	0f 85 97 fe ff ff    	jne    c0022c0e <pow+0x10e>
c0022d77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022d7b:	b9 02 00 00 00       	mov    ecx,0x2
c0022d80:	83 e2 01             	and    edx,0x1
c0022d83:	29 d1                	sub    ecx,edx
c0022d85:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0022d89:	e9 80 fe ff ff       	jmp    c0022c0e <pow+0x10e>
c0022d8e:	66 90                	xchg   ax,ax
c0022d90:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022d94:	8d 87 00 00 10 c0    	lea    eax,[edi-0x3ff00000]
c0022d9a:	09 e8                	or     eax,ebp
c0022d9c:	0f 84 61 05 00 00    	je     c0023303 <pow+0x803>
c0022da2:	81 ff ff ff ef 3f    	cmp    edi,0x3fefffff
c0022da8:	0f 8e 60 05 00 00    	jle    c002330e <pow+0x80e>
c0022dae:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022db2:	85 f6                	test   esi,esi
c0022db4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022db8:	0f 89 b2 fd ff ff    	jns    c0022b70 <pow+0x70>
c0022dbe:	e9 56 ff ff ff       	jmp    c0022d19 <pow+0x219>
c0022dc3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022dc9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022dd0:	ba 02 00 00 00       	mov    edx,0x2
c0022dd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0022dd9:	e9 30 fe ff ff       	jmp    c0022c0e <pow+0x10e>
c0022dde:	66 90                	xchg   ax,ax
c0022de0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022de4:	85 f6                	test   esi,esi
c0022de6:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0022dea:	0f 89 7e fd ff ff    	jns    c0022b6e <pow+0x6e>
c0022df0:	d9 e8                	fld1   
c0022df2:	de f1                	fdivrp st(1),st
c0022df4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022df8:	e9 73 fd ff ff       	jmp    c0022b70 <pow+0x70>
c0022dfd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022e01:	d8 e0                	fsub   st,st(0)
c0022e03:	d8 f0                	fdiv   st,st(0)
c0022e05:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022e09:	e9 62 fd ff ff       	jmp    c0022b70 <pow+0x70>
c0022e0e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0022e12:	d9 05 58 9f 02 c0    	fld    DWORD PTR ds:0xc0029f58
c0022e18:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0022e1c:	db 2d 90 9f 02 c0    	fld    TBYTE PTR ds:0xc0029f90
c0022e22:	db 2d a0 9f 02 c0    	fld    TBYTE PTR ds:0xc0029fa0
c0022e28:	d9 e8                	fld1   
c0022e2a:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0022e2e:	e9 b4 fe ff ff       	jmp    c0022ce7 <pow+0x1e7>
c0022e33:	dd d8                	fstp   st(0)
c0022e35:	dd d8                	fstp   st(0)
c0022e37:	31 c0                	xor    eax,eax
c0022e39:	81 e7 00 00 f0 7f    	and    edi,0x7ff00000
c0022e3f:	75 1b                	jne    c0022e5c <pow+0x35c>
c0022e41:	d9 05 70 9f 02 c0    	fld    DWORD PTR ds:0xc0029f70
c0022e47:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0022e4b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022e4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0022e53:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e57:	b8 cb ff ff ff       	mov    eax,0xffffffcb
c0022e5c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e60:	89 f9                	mov    ecx,edi
c0022e62:	81 e7 ff ff 0f 00    	and    edi,0xfffff
c0022e68:	c1 f9 14             	sar    ecx,0x14
c0022e6b:	8d 8c 08 01 fc ff ff 	lea    ecx,[eax+ecx*1-0x3ff]
c0022e72:	89 f8                	mov    eax,edi
c0022e74:	0d 00 00 f0 3f       	or     eax,0x3ff00000
c0022e79:	81 ff 8e 98 03 00    	cmp    edi,0x3988e
c0022e7f:	0f 8e f8 04 00 00    	jle    c002337d <pow+0x87d>
c0022e85:	81 ff 79 b6 0b 00    	cmp    edi,0xbb679
c0022e8b:	0f 8e 25 06 00 00    	jle    c00234b6 <pow+0x9b6>
c0022e91:	d9 ee                	fldz   
c0022e93:	41                   	inc    ecx
c0022e94:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0022e98:	2d 00 00 10 00       	sub    eax,0x100000
c0022e9d:	31 d2                	xor    edx,edx
c0022e9f:	d9 ee                	fldz   
c0022ea1:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c0022ea5:	d9 e8                	fld1   
c0022ea7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022eab:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022eaf:	d1 f8                	sar    eax,1
c0022eb1:	31 f6                	xor    esi,esi
c0022eb3:	0d 00 00 00 20       	or     eax,0x20000000
c0022eb8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022ebc:	8d 84 02 00 00 08 00 	lea    eax,[edx+eax*1+0x80000]
c0022ec3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022ec7:	31 ff                	xor    edi,edi
c0022ec9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022ecd:	d9 c0                	fld    st(0)
c0022ecf:	d8 e2                	fsub   st,st(2)
c0022ed1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022ed5:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022ed9:	d9 c1                	fld    st(1)
c0022edb:	d8 c3                	fadd   st,st(3)
c0022edd:	d8 3d 10 9f 02 c0    	fdivr  DWORD PTR ds:0xc0029f10
c0022ee3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022ee7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022eeb:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0022eef:	d9 c0                	fld    st(0)
c0022ef1:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0022ef5:	de ca                	fmulp  st(2),st
c0022ef7:	d9 c9                	fxch   st(1)
c0022ef9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022efd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0022f01:	89 6c 24 34          	mov    DWORD PTR [esp+0x34],ebp
c0022f05:	31 ed                	xor    ebp,ebp
c0022f07:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0022f0b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0022f0f:	31 c0                	xor    eax,eax
c0022f11:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0022f15:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0022f19:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022f1d:	d9 c0                	fld    st(0)
c0022f1f:	d8 c9                	fmul   st,st(1)
c0022f21:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022f25:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022f29:	d9 c2                	fld    st(2)
c0022f2b:	d8 cc                	fmul   st,st(4)
c0022f2d:	de ed                	fsubp  st(5),st
c0022f2f:	d9 ca                	fxch   st(2)
c0022f31:	de e6                	fsubrp st(6),st
c0022f33:	d9 cc                	fxch   st(4)
c0022f35:	de e5                	fsubrp st(5),st
c0022f37:	d9 cc                	fxch   st(4)
c0022f39:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022f3d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022f41:	d8 c9                	fmul   st,st(1)
c0022f43:	de ea                	fsubp  st(2),st
c0022f45:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0022f49:	de ca                	fmulp  st(2),st
c0022f4b:	d9 c9                	fxch   st(1)
c0022f4d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022f51:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022f55:	d9 c3                	fld    st(3)
c0022f57:	dc 0d f8 9f 02 c0    	fmul   QWORD PTR ds:0xc0029ff8
c0022f5d:	dc 05 00 a0 02 c0    	fadd   QWORD PTR ds:0xc002a000
c0022f63:	d8 cc                	fmul   st,st(4)
c0022f65:	dc 05 08 a0 02 c0    	fadd   QWORD PTR ds:0xc002a008
c0022f6b:	d8 cc                	fmul   st,st(4)
c0022f6d:	dc 05 10 a0 02 c0    	fadd   QWORD PTR ds:0xc002a010
c0022f73:	d8 cc                	fmul   st,st(4)
c0022f75:	dc 05 18 a0 02 c0    	fadd   QWORD PTR ds:0xc002a018
c0022f7b:	d8 cc                	fmul   st,st(4)
c0022f7d:	dc 05 20 a0 02 c0    	fadd   QWORD PTR ds:0xc002a020
c0022f83:	d9 cc                	fxch   st(4)
c0022f85:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0022f89:	d8 c8                	fmul   st,st(0)
c0022f8b:	de cc                	fmulp  st(4),st
c0022f8d:	d9 cb                	fxch   st(3)
c0022f8f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022f93:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022f97:	d9 c1                	fld    st(1)
c0022f99:	d8 c3                	fadd   st,st(3)
c0022f9b:	d8 cc                	fmul   st,st(4)
c0022f9d:	de c1                	faddp  st(1),st
c0022f9f:	d9 c1                	fld    st(1)
c0022fa1:	d8 ca                	fmul   st,st(2)
c0022fa3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022fa7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022fab:	d9 c9                	fxch   st(1)
c0022fad:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022fb1:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022fb5:	d9 05 74 9f 02 c0    	fld    DWORD PTR ds:0xc0029f74
c0022fbb:	d9 c2                	fld    st(2)
c0022fbd:	d8 c1                	fadd   st,st(1)
c0022fbf:	d8 c2                	fadd   st,st(2)
c0022fc1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022fc5:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0022fc9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022fcd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022fd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022fd5:	31 c0                	xor    eax,eax
c0022fd7:	dc cc                	fmul   st(4),st
c0022fd9:	d9 cc                	fxch   st(4)
c0022fdb:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022fdf:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022fe3:	d9 c9                	fxch   st(1)
c0022fe5:	d8 ec                	fsubr  st,st(4)
c0022fe7:	de e3                	fsubrp st(3),st
c0022fe9:	d9 c9                	fxch   st(1)
c0022feb:	de e2                	fsubrp st(2),st
c0022fed:	d9 c9                	fxch   st(1)
c0022fef:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022ff3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022ff7:	de cb                	fmulp  st(3),st
c0022ff9:	d9 cb                	fxch   st(3)
c0022ffb:	de c9                	fmulp  st(1),st
c0022ffd:	de c1                	faddp  st(1),st
c0022fff:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023003:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023007:	d9 c1                	fld    st(1)
c0023009:	d8 c1                	fadd   st,st(1)
c002300b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002300f:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023013:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023017:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002301b:	d9 c0                	fld    st(0)
c002301d:	d8 0d 78 9f 02 c0    	fmul   DWORD PTR ds:0xc0029f78
c0023023:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023027:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002302b:	d9 cb                	fxch   st(3)
c002302d:	d8 e9                	fsubr  st,st(1)
c002302f:	de ea                	fsubp  st(2),st
c0023031:	d9 c9                	fxch   st(1)
c0023033:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023037:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002303b:	dc 0d 28 a0 02 c0    	fmul   QWORD PTR ds:0xc002a028
c0023041:	d9 c9                	fxch   st(1)
c0023043:	dc 0d 30 a0 02 c0    	fmul   QWORD PTR ds:0xc002a030
c0023049:	de c1                	faddp  st(1),st
c002304b:	db 6c 24 58          	fld    TBYTE PTR [esp+0x58]
c002304f:	de c1                	faddp  st(1),st
c0023051:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023055:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0023059:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002305d:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0023061:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023065:	d9 c2                	fld    st(2)
c0023067:	d8 c2                	fadd   st,st(2)
c0023069:	db 6c 24 68          	fld    TBYTE PTR [esp+0x68]
c002306d:	dc c1                	fadd   st(1),st
c002306f:	d9 c9                	fxch   st(1)
c0023071:	d8 c2                	fadd   st,st(2)
c0023073:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023077:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c002307b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002307f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023083:	dc e2                	fsubr  st(2),st
c0023085:	d9 ca                	fxch   st(2)
c0023087:	de e1                	fsubrp st(1),st
c0023089:	de e3                	fsubrp st(3),st
c002308b:	d9 ca                	fxch   st(2)
c002308d:	de e9                	fsubp  st(1),st
c002308f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023093:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023097:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002309b:	31 db                	xor    ebx,ebx
c002309d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00230a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00230a5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00230a9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00230ad:	d9 c0                	fld    st(0)
c00230af:	d8 e2                	fsub   st,st(2)
c00230b1:	d8 cc                	fmul   st,st(4)
c00230b3:	d9 c9                	fxch   st(1)
c00230b5:	de cb                	fmulp  st(3),st
c00230b7:	de c2                	faddp  st(2),st
c00230b9:	d9 c9                	fxch   st(1)
c00230bb:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00230bf:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00230c3:	d9 ca                	fxch   st(2)
c00230c5:	de c9                	fmulp  st(1),st
c00230c7:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00230cb:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00230cf:	d9 c1                	fld    st(1)
c00230d1:	d8 c1                	fadd   st,st(1)
c00230d3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00230d7:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00230db:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00230df:	81 fa ff ff 8f 40    	cmp    edx,0x408fffff
c00230e5:	89 d3                	mov    ebx,edx
c00230e7:	0f 8e 38 02 00 00    	jle    c0023325 <pow+0x825>
c00230ed:	8d 8a 00 00 70 bf    	lea    ecx,[edx-0x40900000]
c00230f3:	09 c1                	or     ecx,eax
c00230f5:	0f 85 f6 03 00 00    	jne    c00234f1 <pow+0x9f1>
c00230fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00230ff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023103:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023107:	d8 e1                	fsub   st,st(1)
c0023109:	d9 c2                	fld    st(2)
c002310b:	dc 05 38 a0 02 c0    	fadd   QWORD PTR ds:0xc002a038
c0023111:	df f1                	fcomip st,st(1)
c0023113:	dd d8                	fstp   st(0)
c0023115:	0f 87 2a 04 00 00    	ja     c0023545 <pow+0xa45>
c002311b:	89 d9                	mov    ecx,ebx
c002311d:	c1 f9 14             	sar    ecx,0x14
c0023120:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0023126:	81 e9 fe 03 00 00    	sub    ecx,0x3fe
c002312c:	b8 00 00 10 00       	mov    eax,0x100000
c0023131:	d3 f8                	sar    eax,cl
c0023133:	31 c9                	xor    ecx,ecx
c0023135:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0023139:	01 d8                	add    eax,ebx
c002313b:	be ff ff 0f 00       	mov    esi,0xfffff
c0023140:	89 c2                	mov    edx,eax
c0023142:	c1 fa 14             	sar    edx,0x14
c0023145:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002314b:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0023151:	88 d1                	mov    cl,dl
c0023153:	d3 fe                	sar    esi,cl
c0023155:	b9 14 00 00 00       	mov    ecx,0x14
c002315a:	f7 d6                	not    esi
c002315c:	29 d1                	sub    ecx,edx
c002315e:	21 c6                	and    esi,eax
c0023160:	25 ff ff 0f 00       	and    eax,0xfffff
c0023165:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023169:	0d 00 00 10 00       	or     eax,0x100000
c002316e:	d3 f8                	sar    eax,cl
c0023170:	85 db                	test   ebx,ebx
c0023172:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023176:	89 c1                	mov    ecx,eax
c0023178:	79 02                	jns    c002317c <pow+0x67c>
c002317a:	f7 d9                	neg    ecx
c002317c:	de e9                	fsubp  st(1),st
c002317e:	89 ce                	mov    esi,ecx
c0023180:	c1 e6 14             	shl    esi,0x14
c0023183:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023187:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002318b:	d9 c1                	fld    st(1)
c002318d:	d8 c1                	fadd   st,st(1)
c002318f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023193:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023197:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002319b:	31 c0                	xor    eax,eax
c002319d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00231a1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00231a5:	d9 c0                	fld    st(0)
c00231a7:	d8 0d 7c 9f 02 c0    	fmul   DWORD PTR ds:0xc0029f7c
c00231ad:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00231b1:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00231b5:	d9 ca                	fxch   st(2)
c00231b7:	d8 e9                	fsubr  st,st(1)
c00231b9:	de eb                	fsubp  st(3),st
c00231bb:	d9 ca                	fxch   st(2)
c00231bd:	dc 0d 40 a0 02 c0    	fmul   QWORD PTR ds:0xc002a040
c00231c3:	d9 ca                	fxch   st(2)
c00231c5:	dc 0d 48 a0 02 c0    	fmul   QWORD PTR ds:0xc002a048
c00231cb:	de c2                	faddp  st(2),st
c00231cd:	d9 c9                	fxch   st(1)
c00231cf:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00231d3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00231d7:	d9 c1                	fld    st(1)
c00231d9:	d8 c1                	fadd   st,st(1)
c00231db:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00231df:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00231e3:	d9 c0                	fld    st(0)
c00231e5:	d8 c9                	fmul   st,st(1)
c00231e7:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00231eb:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00231ef:	d9 c0                	fld    st(0)
c00231f1:	dc 0d 50 a0 02 c0    	fmul   QWORD PTR ds:0xc002a050
c00231f7:	dc 25 58 a0 02 c0    	fsub   QWORD PTR ds:0xc002a058
c00231fd:	d8 c9                	fmul   st,st(1)
c00231ff:	dc 05 60 a0 02 c0    	fadd   QWORD PTR ds:0xc002a060
c0023205:	d8 c9                	fmul   st,st(1)
c0023207:	dc 25 68 a0 02 c0    	fsub   QWORD PTR ds:0xc002a068
c002320d:	d8 c9                	fmul   st,st(1)
c002320f:	dc 05 70 a0 02 c0    	fadd   QWORD PTR ds:0xc002a070
c0023215:	de c9                	fmulp  st(1),st
c0023217:	d8 e9                	fsubr  st,st(1)
c0023219:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002321d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023221:	d9 cb                	fxch   st(3)
c0023223:	d8 e9                	fsubr  st,st(1)
c0023225:	de ea                	fsubp  st(2),st
c0023227:	d9 c9                	fxch   st(1)
c0023229:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002322d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023231:	d9 c1                	fld    st(1)
c0023233:	d8 cb                	fmul   st,st(3)
c0023235:	d9 cb                	fxch   st(3)
c0023237:	d8 25 80 9f 02 c0    	fsub   DWORD PTR ds:0xc0029f80
c002323d:	de fb                	fdivp  st(3),st
c002323f:	d9 c1                	fld    st(1)
c0023241:	d8 c9                	fmul   st,st(1)
c0023243:	de c1                	faddp  st(1),st
c0023245:	de ea                	fsubp  st(2),st
c0023247:	d9 c9                	fxch   st(1)
c0023249:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002324d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023251:	de e1                	fsubrp st(1),st
c0023253:	d8 2d 10 9f 02 c0    	fsubr  DWORD PTR ds:0xc0029f10
c0023259:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002325d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023261:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023265:	89 d3                	mov    ebx,edx
c0023267:	01 f3                	add    ebx,esi
c0023269:	81 fb ff ff 0f 00    	cmp    ebx,0xfffff
c002326f:	0f 8e a7 02 00 00    	jle    c002351c <pow+0xa1c>
c0023275:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023279:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002327d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023281:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0023285:	de c9                	fmulp  st(1),st
c0023287:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002328b:	e9 e0 f8 ff ff       	jmp    c0022b70 <pow+0x70>
c0023290:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023294:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023297:	e8 74 0f 00 00       	call   c0024210 <fabs>
c002329c:	85 ed                	test   ebp,ebp
c002329e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00232a2:	0f 85 55 fb ff ff    	jne    c0022dfd <pow+0x2fd>
c00232a8:	89 f8                	mov    eax,edi
c00232aa:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00232af:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c00232b4:	74 0b                	je     c00232c1 <pow+0x7c1>
c00232b6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00232bb:	0f 85 3c fb ff ff    	jne    c0022dfd <pow+0x2fd>
c00232c1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00232c9:	85 f6                	test   esi,esi
c00232cb:	79 0a                	jns    c00232d7 <pow+0x7d7>
c00232cd:	d9 e8                	fld1   
c00232cf:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c00232d3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00232d7:	85 ff                	test   edi,edi
c00232d9:	0f 89 91 f8 ff ff    	jns    c0022b70 <pow+0x70>
c00232df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00232e3:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c00232e8:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
c00232ec:	0f 85 10 02 00 00    	jne    c0023502 <pow+0xa02>
c00232f2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00232f6:	d8 e0                	fsub   st,st(0)
c00232f8:	d8 f0                	fdiv   st,st(0)
c00232fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00232fe:	e9 6d f8 ff ff       	jmp    c0022b70 <pow+0x70>
c0023303:	d9 e8                	fld1   
c0023305:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023309:	e9 62 f8 ff ff       	jmp    c0022b70 <pow+0x70>
c002330e:	85 f6                	test   esi,esi
c0023310:	0f 89 03 fa ff ff    	jns    c0022d19 <pow+0x219>
c0023316:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002331a:	d9 e0                	fchs   
c002331c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023320:	e9 4b f8 ff ff       	jmp    c0022b70 <pow+0x70>
c0023325:	89 d1                	mov    ecx,edx
c0023327:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
c002332d:	81 f9 ff cb 90 40    	cmp    ecx,0x4090cbff
c0023333:	0f 8e 4f 01 00 00    	jle    c0023488 <pow+0x988>
c0023339:	8d 8a 00 34 6f 3f    	lea    ecx,[edx+0x3f6f3400]
c002333f:	09 c1                	or     ecx,eax
c0023341:	0f 85 55 02 00 00    	jne    c002359c <pow+0xa9c>
c0023347:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002334b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002334f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023353:	d8 e1                	fsub   st,st(1)
c0023355:	df f2                	fcomip st,st(2)
c0023357:	0f 82 be fd ff ff    	jb     c002311b <pow+0x61b>
c002335d:	dd d8                	fstp   st(0)
c002335f:	dd d8                	fstp   st(0)
c0023361:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0023365:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023369:	e9 02 f8 ff ff       	jmp    c0022b70 <pow+0x70>
c002336e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023372:	d8 c8                	fmul   st,st(0)
c0023374:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023378:	e9 f3 f7 ff ff       	jmp    c0022b70 <pow+0x70>
c002337d:	d9 ee                	fldz   
c002337f:	31 d2                	xor    edx,edx
c0023381:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0023385:	d9 ee                	fldz   
c0023387:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c002338b:	d9 e8                	fld1   
c002338d:	e9 15 fb ff ff       	jmp    c0022ea7 <pow+0x3a7>
c0023392:	81 7c 24 30 fe ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3feffffe
c002339a:	0f 8e 91 01 00 00    	jle    c0023531 <pow+0xa31>
c00233a0:	81 7c 24 30 00 00 f0 3f 	cmp    DWORD PTR [esp+0x30],0x3ff00000
c00233a8:	0f 8f da 01 00 00    	jg     c0023588 <pow+0xa88>
c00233ae:	dd d8                	fstp   st(0)
c00233b0:	dd d8                	fstp   st(0)
c00233b2:	d9 e8                	fld1   
c00233b4:	31 c0                	xor    eax,eax
c00233b6:	dc 6c 24 28          	fsubr  QWORD PTR [esp+0x28]
c00233ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00233be:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00233c2:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00233c6:	d9 c0                	fld    st(0)
c00233c8:	d8 0d 68 9f 02 c0    	fmul   DWORD PTR ds:0xc0029f68
c00233ce:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00233d2:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00233d6:	d9 c1                	fld    st(1)
c00233d8:	dc 0d e8 9f 02 c0    	fmul   QWORD PTR ds:0xc0029fe8
c00233de:	d9 c2                	fld    st(2)
c00233e0:	d8 0d 6c 9f 02 c0    	fmul   DWORD PTR ds:0xc0029f6c
c00233e6:	db 2d d0 9f 02 c0    	fld    TBYTE PTR ds:0xc0029fd0
c00233ec:	de e1                	fsubrp st(1),st
c00233ee:	d8 cb                	fmul   st,st(3)
c00233f0:	d8 2d 14 9f 02 c0    	fsubr  DWORD PTR ds:0xc0029f14
c00233f6:	d9 cb                	fxch   st(3)
c00233f8:	d8 c8                	fmul   st,st(0)
c00233fa:	de cb                	fmulp  st(3),st
c00233fc:	d9 ca                	fxch   st(2)
c00233fe:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023402:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023406:	dc 0d f0 9f 02 c0    	fmul   QWORD PTR ds:0xc0029ff0
c002340c:	de ea                	fsubp  st(2),st
c002340e:	d9 c9                	fxch   st(1)
c0023410:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023414:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023418:	d9 c1                	fld    st(1)
c002341a:	d8 c1                	fadd   st,st(1)
c002341c:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023420:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023424:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023428:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002342c:	dc e2                	fsubr  st(2),st
c002342e:	d9 c9                	fxch   st(1)
c0023430:	de e2                	fsubrp st(2),st
c0023432:	d9 c9                	fxch   st(1)
c0023434:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023438:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002343c:	e9 56 fc ff ff       	jmp    c0023097 <pow+0x597>
c0023441:	85 c0                	test   eax,eax
c0023443:	0f 85 47 fe ff ff    	jne    c0023290 <pow+0x790>
c0023449:	b8 14 00 00 00       	mov    eax,0x14
c002344e:	29 c8                	sub    eax,ecx
c0023450:	89 c1                	mov    ecx,eax
c0023452:	89 d8                	mov    eax,ebx
c0023454:	d3 f8                	sar    eax,cl
c0023456:	89 c2                	mov    edx,eax
c0023458:	d3 e2                	shl    edx,cl
c002345a:	39 da                	cmp    edx,ebx
c002345c:	0f 85 bc f7 ff ff    	jne    c0022c1e <pow+0x11e>
c0023462:	83 e0 01             	and    eax,0x1
c0023465:	b9 02 00 00 00       	mov    ecx,0x2
c002346a:	29 c1                	sub    ecx,eax
c002346c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023470:	e9 a9 f7 ff ff       	jmp    c0022c1e <pow+0x11e>
c0023475:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023479:	d9 c0                	fld    st(0)
c002347b:	d8 c9                	fmul   st,st(1)
c002347d:	de c9                	fmulp  st(1),st
c002347f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023483:	e9 e8 f6 ff ff       	jmp    c0022b70 <pow+0x70>
c0023488:	81 f9 00 00 e0 3f    	cmp    ecx,0x3fe00000
c002348e:	0f 8f 28 01 00 00    	jg     c00235bc <pow+0xabc>
c0023494:	31 f6                	xor    esi,esi
c0023496:	31 c9                	xor    ecx,ecx
c0023498:	e9 fa fc ff ff       	jmp    c0023197 <pow+0x697>
c002349d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00234a1:	d8 c8                	fmul   st,st(0)
c00234a3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00234a7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00234ab:	d8 c8                	fmul   st,st(0)
c00234ad:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00234b1:	e9 ba f6 ff ff       	jmp    c0022b70 <pow+0x70>
c00234b6:	d9 05 60 9f 02 c0    	fld    DWORD PTR ds:0xc0029f60
c00234bc:	ba 00 00 04 00       	mov    edx,0x40000
c00234c1:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00234c5:	dd 05 e0 9f 02 c0    	fld    QWORD PTR ds:0xc0029fe0
c00234cb:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c00234cf:	d9 05 64 9f 02 c0    	fld    DWORD PTR ds:0xc0029f64
c00234d5:	e9 cd f9 ff ff       	jmp    c0022ea7 <pow+0x3a7>
c00234da:	85 f6                	test   esi,esi
c00234dc:	0f 8e 37 f8 ff ff    	jle    c0022d19 <pow+0x219>
c00234e2:	d9 05 58 9f 02 c0    	fld    DWORD PTR ds:0xc0029f58
c00234e8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00234ec:	e9 7f f6 ff ff       	jmp    c0022b70 <pow+0x70>
c00234f1:	dd d8                	fstp   st(0)
c00234f3:	dd d8                	fstp   st(0)
c00234f5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00234f9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00234fd:	e9 6e f6 ff ff       	jmp    c0022b70 <pow+0x70>
c0023502:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0023507:	0f 85 63 f6 ff ff    	jne    c0022b70 <pow+0x70>
c002350d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023511:	d9 e0                	fchs   
c0023513:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023517:	e9 54 f6 ff ff       	jmp    c0022b70 <pow+0x70>
c002351c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023520:	89 04 24             	mov    DWORD PTR [esp],eax
c0023523:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023527:	e8 c0 13 00 00       	call   c00248ec <ldexp>
c002352c:	e9 50 fd ff ff       	jmp    c0023281 <pow+0x781>
c0023531:	85 f6                	test   esi,esi
c0023533:	0f 99 c0             	setns  al
c0023536:	84 c0                	test   al,al
c0023538:	db c9                	fcmovne st,st(1)
c002353a:	dd d9                	fstp   st(1)
c002353c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023540:	e9 2b f6 ff ff       	jmp    c0022b70 <pow+0x70>
c0023545:	dd d8                	fstp   st(0)
c0023547:	dd d8                	fstp   st(0)
c0023549:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002354d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023551:	e9 1a f6 ff ff       	jmp    c0022b70 <pow+0x70>
c0023556:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c002355d:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0023564:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c002356b:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0023572:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023576:	dd 9c 24 a0 00 00 00 	fstp   QWORD PTR [esp+0xa0]
c002357d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0023583:	e9 d8 12 00 00       	jmp    c0024860 <sqrt>
c0023588:	85 f6                	test   esi,esi
c002358a:	0f 9e c0             	setle  al
c002358d:	84 c0                	test   al,al
c002358f:	db c9                	fcmovne st,st(1)
c0023591:	dd d9                	fstp   st(1)
c0023593:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023597:	e9 d4 f5 ff ff       	jmp    c0022b70 <pow+0x70>
c002359c:	dd d8                	fstp   st(0)
c002359e:	dd d8                	fstp   st(0)
c00235a0:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00235a4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00235a8:	e9 c3 f5 ff ff       	jmp    c0022b70 <pow+0x70>
c00235ad:	d9 05 58 9f 02 c0    	fld    DWORD PTR ds:0xc0029f58
c00235b3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00235b7:	e9 b4 f5 ff ff       	jmp    c0022b70 <pow+0x70>
c00235bc:	c1 f9 14             	sar    ecx,0x14
c00235bf:	e9 62 fb ff ff       	jmp    c0023126 <pow+0x626>
c00235c4:	66 90                	xchg   ax,ax
c00235c6:	66 90                	xchg   ax,ax
c00235c8:	66 90                	xchg   ax,ax
c00235ca:	66 90                	xchg   ax,ax
c00235cc:	66 90                	xchg   ax,ax
c00235ce:	66 90                	xchg   ax,ax

c00235d0 <sinh>:
c00235d0:	53                   	push   ebx
c00235d1:	83 ec 38             	sub    esp,0x38
c00235d4:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00235d8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00235dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00235e0:	89 c3                	mov    ebx,eax
c00235e2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00235e8:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c00235ee:	0f 8f ec 00 00 00    	jg     c00236e0 <sinh+0x110>
c00235f4:	dd d8                	fstp   st(0)
c00235f6:	d9 e8                	fld1   
c00235f8:	85 c0                	test   eax,eax
c00235fa:	0f 88 90 00 00 00    	js     c0023690 <sinh+0xc0>
c0023600:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0023606:	d9 05 14 9f 02 c0    	fld    DWORD PTR ds:0xc0029f14
c002360c:	0f 8f 8e 00 00 00    	jg     c00236a0 <sinh+0xd0>
c0023612:	dd d9                	fstp   st(1)
c0023614:	eb 0c                	jmp    c0023622 <sinh+0x52>
c0023616:	8d 76 00             	lea    esi,[esi+0x0]
c0023619:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023620:	dd d9                	fstp   st(1)
c0023622:	81 fb ff ff 2f 3e    	cmp    ebx,0x3e2fffff
c0023628:	0f 8f d2 00 00 00    	jg     c0023700 <sinh+0x130>
c002362e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023632:	d9 e8                	fld1   
c0023634:	d9 c1                	fld    st(1)
c0023636:	dc 05 80 a0 02 c0    	fadd   QWORD PTR ds:0xc002a080
c002363c:	df f1                	fcomip st,st(1)
c002363e:	dd d8                	fstp   st(0)
c0023640:	77 3e                	ja     c0023680 <sinh+0xb0>
c0023642:	dd d8                	fstp   st(0)
c0023644:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023648:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002364c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002364f:	e8 bc 0b 00 00       	call   c0024210 <fabs>
c0023654:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023657:	e8 24 07 00 00       	call   c0023d80 <expm1>
c002365c:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023660:	d9 c1                	fld    st(1)
c0023662:	d8 c2                	fadd   st,st(2)
c0023664:	d9 c2                	fld    st(2)
c0023666:	d8 cb                	fmul   st,st(3)
c0023668:	d9 cb                	fxch   st(3)
c002366a:	d8 05 10 9f 02 c0    	fadd   DWORD PTR ds:0xc0029f10
c0023670:	de fb                	fdivp  st(3),st
c0023672:	de e2                	fsubrp st(2),st
c0023674:	de c9                	fmulp  st(1),st
c0023676:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002367a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002367e:	eb 02                	jmp    c0023682 <sinh+0xb2>
c0023680:	dd d9                	fstp   st(1)
c0023682:	83 c4 38             	add    esp,0x38
c0023685:	5b                   	pop    ebx
c0023686:	c3                   	ret    
c0023687:	89 f6                	mov    esi,esi
c0023689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023690:	d9 e0                	fchs   
c0023692:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0023698:	d9 05 78 a0 02 c0    	fld    DWORD PTR ds:0xc002a078
c002369e:	7e 80                	jle    c0023620 <sinh+0x50>
c00236a0:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c00236a6:	0f 8e a4 00 00 00    	jle    c0023750 <sinh+0x180>
c00236ac:	dd d8                	fstp   st(0)
c00236ae:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c00236b4:	0f 8e c6 00 00 00    	jle    c0023780 <sinh+0x1b0>
c00236ba:	dd d8                	fstp   st(0)
c00236bc:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00236c0:	dc 0d 80 a0 02 c0    	fmul   QWORD PTR ds:0xc002a080
c00236c6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00236ca:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00236ce:	83 c4 38             	add    esp,0x38
c00236d1:	5b                   	pop    ebx
c00236d2:	c3                   	ret    
c00236d3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00236d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00236e0:	d9 c0                	fld    st(0)
c00236e2:	de c1                	faddp  st(1),st
c00236e4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00236e8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00236ec:	83 c4 38             	add    esp,0x38
c00236ef:	5b                   	pop    ebx
c00236f0:	c3                   	ret    
c00236f1:	eb 0d                	jmp    c0023700 <sinh+0x130>
c00236f3:	90                   	nop
c00236f4:	90                   	nop
c00236f5:	90                   	nop
c00236f6:	90                   	nop
c00236f7:	90                   	nop
c00236f8:	90                   	nop
c00236f9:	90                   	nop
c00236fa:	90                   	nop
c00236fb:	90                   	nop
c00236fc:	90                   	nop
c00236fd:	90                   	nop
c00236fe:	90                   	nop
c00236ff:	90                   	nop
c0023700:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023704:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023708:	dd 1c 24             	fstp   QWORD PTR [esp]
c002370b:	e8 00 0b 00 00       	call   c0024210 <fabs>
c0023710:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023713:	e8 68 06 00 00       	call   c0023d80 <expm1>
c0023718:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c002371e:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023722:	0f 8e 38 ff ff ff    	jle    c0023660 <sinh+0x90>
c0023728:	d9 c1                	fld    st(1)
c002372a:	d8 05 10 9f 02 c0    	fadd   DWORD PTR ds:0xc0029f10
c0023730:	d8 fa                	fdivr  st,st(2)
c0023732:	de c2                	faddp  st(2),st
c0023734:	de c9                	fmulp  st(1),st
c0023736:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002373a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002373e:	83 c4 38             	add    esp,0x38
c0023741:	5b                   	pop    ebx
c0023742:	c3                   	ret    
c0023743:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023750:	dd d9                	fstp   st(1)
c0023752:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023756:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002375a:	dd 1c 24             	fstp   QWORD PTR [esp]
c002375d:	e8 ae 0a 00 00       	call   c0024210 <fabs>
c0023762:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023765:	e8 5e 10 00 00       	call   c00247c8 <exp>
c002376a:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c002376e:	de c9                	fmulp  st(1),st
c0023770:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023774:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023778:	e9 05 ff ff ff       	jmp    c0023682 <sinh+0xb2>
c002377d:	8d 76 00             	lea    esi,[esi+0x0]
c0023780:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023784:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023788:	dd 1c 24             	fstp   QWORD PTR [esp]
c002378b:	e8 80 0a 00 00       	call   c0024210 <fabs>
c0023790:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023795:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023799:	dd 1c 24             	fstp   QWORD PTR [esp]
c002379c:	e8 1f 00 00 00       	call   c00237c0 <__ldexp_exp>
c00237a1:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00237a5:	de c9                	fmulp  st(1),st
c00237a7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00237ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00237af:	e9 ce fe ff ff       	jmp    c0023682 <sinh+0xb2>
c00237b4:	66 90                	xchg   ax,ax
c00237b6:	66 90                	xchg   ax,ax
c00237b8:	66 90                	xchg   ax,ax
c00237ba:	66 90                	xchg   ax,ax
c00237bc:	66 90                	xchg   ax,ax
c00237be:	66 90                	xchg   ax,ax

c00237c0 <__ldexp_exp>:
c00237c0:	53                   	push   ebx
c00237c1:	83 ec 28             	sub    esp,0x28
c00237c4:	dd 05 88 a0 02 c0    	fld    QWORD PTR ds:0xc002a088
c00237ca:	dc 6c 24 30          	fsubr  QWORD PTR [esp+0x30]
c00237ce:	dd 1c 24             	fstp   QWORD PTR [esp]
c00237d1:	e8 f2 0f 00 00       	call   c00247c8 <exp>
c00237d6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00237da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00237de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00237e2:	89 da                	mov    edx,ebx
c00237e4:	89 d8                	mov    eax,ebx
c00237e6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00237ea:	c1 e8 14             	shr    eax,0x14
c00237ed:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00237f3:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c00237f9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00237fd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0023801:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023805:	8d 84 02 08 03 00 00 	lea    eax,[edx+eax*1+0x308]
c002380c:	c1 e0 14             	shl    eax,0x14
c002380f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023813:	31 c0                	xor    eax,eax
c0023815:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023819:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002381d:	de c9                	fmulp  st(1),st
c002381f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023823:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023827:	83 c4 28             	add    esp,0x28
c002382a:	5b                   	pop    ebx
c002382b:	c3                   	ret    
c002382c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0023830 <__ldexp_cexp>:
c0023830:	57                   	push   edi
c0023831:	56                   	push   esi
c0023832:	53                   	push   ebx
c0023833:	83 ec 60             	sub    esp,0x60
c0023836:	dd 44 24 7c          	fld    QWORD PTR [esp+0x7c]
c002383a:	dd 44 24 74          	fld    QWORD PTR [esp+0x74]
c002383e:	dd 14 24             	fst    QWORD PTR [esp]
c0023841:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0023845:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0023849:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c002384d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023851:	e8 6a 0f 00 00       	call   c00247c0 <creal>
c0023856:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002385a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c002385e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023861:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023865:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023869:	e8 42 0f 00 00       	call   c00247b0 <cimag>
c002386e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023872:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023876:	dc 25 88 a0 02 c0    	fsub   QWORD PTR ds:0xc002a088
c002387c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002387f:	e8 44 0f 00 00       	call   c00247c8 <exp>
c0023884:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023888:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002388c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023890:	89 fa                	mov    edx,edi
c0023892:	89 f8                	mov    eax,edi
c0023894:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0023898:	c1 e8 14             	shr    eax,0x14
c002389b:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00238a1:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c00238a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00238ab:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00238b2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00238b6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00238ba:	8d 94 02 09 ff ff ff 	lea    edx,[edx+eax*1-0xf7]
c00238c1:	89 d1                	mov    ecx,edx
c00238c3:	c1 e9 1f             	shr    ecx,0x1f
c00238c6:	01 d1                	add    ecx,edx
c00238c8:	d1 f9                	sar    ecx,1
c00238ca:	8d 81 ff 03 00 00    	lea    eax,[ecx+0x3ff]
c00238d0:	29 ca                	sub    edx,ecx
c00238d2:	c1 e0 14             	shl    eax,0x14
c00238d5:	81 c2 ff 03 00 00    	add    edx,0x3ff
c00238db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00238df:	c1 e2 14             	shl    edx,0x14
c00238e2:	31 c0                	xor    eax,eax
c00238e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00238e8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00238ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00238f0:	31 d2                	xor    edx,edx
c00238f2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00238f6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00238fa:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00238fe:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0023902:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023906:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023909:	e8 12 03 00 00       	call   c0023c20 <cos>
c002390e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023912:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023916:	db 7c 24 48          	fstp   TBYTE PTR [esp+0x48]
c002391a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c002391e:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0023922:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023926:	db 7c 24 20          	fstp   TBYTE PTR [esp+0x20]
c002392a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002392e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023931:	e8 fa 0b 00 00       	call   c0024530 <sin>
c0023936:	89 d8                	mov    eax,ebx
c0023938:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002393c:	db 6c 24 48          	fld    TBYTE PTR [esp+0x48]
c0023940:	dc c9                	fmul   st(1),st
c0023942:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0023946:	dc ca                	fmul   st(2),st
c0023948:	db 6c 24 20          	fld    TBYTE PTR [esp+0x20]
c002394c:	dc cb                	fmul   st(3),st
c002394e:	d9 cb                	fxch   st(3)
c0023950:	dd 1b                	fstp   QWORD PTR [ebx]
c0023952:	d9 cb                	fxch   st(3)
c0023954:	de c9                	fmulp  st(1),st
c0023956:	de ca                	fmulp  st(2),st
c0023958:	de c9                	fmulp  st(1),st
c002395a:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002395d:	83 c4 60             	add    esp,0x60
c0023960:	5b                   	pop    ebx
c0023961:	5e                   	pop    esi
c0023962:	5f                   	pop    edi
c0023963:	c2 04 00             	ret    0x4
c0023966:	66 90                	xchg   ax,ax
c0023968:	66 90                	xchg   ax,ax
c002396a:	66 90                	xchg   ax,ax
c002396c:	66 90                	xchg   ax,ax
c002396e:	66 90                	xchg   ax,ax

c0023970 <atan>:
c0023970:	56                   	push   esi
c0023971:	53                   	push   ebx
c0023972:	83 ec 24             	sub    esp,0x24
c0023975:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023979:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002397d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0023981:	89 f3                	mov    ebx,esi
c0023983:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023989:	81 fb ff ff 0f 44    	cmp    ebx,0x440fffff
c002398f:	7e 5f                	jle    c00239f0 <atan+0x80>
c0023991:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0023997:	7f 0a                	jg     c00239a3 <atan+0x33>
c0023999:	75 25                	jne    c00239c0 <atan+0x50>
c002399b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002399f:	85 c0                	test   eax,eax
c00239a1:	74 1d                	je     c00239c0 <atan+0x50>
c00239a3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00239a7:	d8 c0                	fadd   st,st(0)
c00239a9:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00239ad:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00239b1:	83 c4 24             	add    esp,0x24
c00239b4:	5b                   	pop    ebx
c00239b5:	5e                   	pop    esi
c00239b6:	c3                   	ret    
c00239b7:	89 f6                	mov    esi,esi
c00239b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00239c0:	85 f6                	test   esi,esi
c00239c2:	dd 05 b8 a0 02 c0    	fld    QWORD PTR ds:0xc002a0b8
c00239c8:	0f 8e 22 01 00 00    	jle    c0023af0 <atan+0x180>
c00239ce:	dc 05 b8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029eb8
c00239d4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00239d8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00239dc:	83 c4 24             	add    esp,0x24
c00239df:	5b                   	pop    ebx
c00239e0:	5e                   	pop    esi
c00239e1:	c3                   	ret    
c00239e2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00239e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00239f0:	81 fb ff ff db 3f    	cmp    ebx,0x3fdbffff
c00239f6:	0f 8f 34 01 00 00    	jg     c0023b30 <atan+0x1c0>
c00239fc:	81 fb ff ff 3f 3e    	cmp    ebx,0x3e3fffff
c0023a02:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023a06:	0f 8e c4 00 00 00    	jle    c0023ad0 <atan+0x160>
c0023a0c:	eb 04                	jmp    c0023a12 <atan+0xa2>
c0023a0e:	66 90                	xchg   ax,ax
c0023a10:	dd d8                	fstp   st(0)
c0023a12:	d9 ee                	fldz   
c0023a14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023a19:	d9 ee                	fldz   
c0023a1b:	d9 c2                	fld    st(2)
c0023a1d:	40                   	inc    eax
c0023a1e:	d8 cb                	fmul   st,st(3)
c0023a20:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023a24:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023a28:	d9 c0                	fld    st(0)
c0023a2a:	d8 c9                	fmul   st,st(1)
c0023a2c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023a30:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023a34:	d9 c0                	fld    st(0)
c0023a36:	dc 0d e8 a0 02 c0    	fmul   QWORD PTR ds:0xc002a0e8
c0023a3c:	dc 05 f0 a0 02 c0    	fadd   QWORD PTR ds:0xc002a0f0
c0023a42:	d8 c9                	fmul   st,st(1)
c0023a44:	dc 05 f8 a0 02 c0    	fadd   QWORD PTR ds:0xc002a0f8
c0023a4a:	d8 c9                	fmul   st,st(1)
c0023a4c:	dc 05 00 a1 02 c0    	fadd   QWORD PTR ds:0xc002a100
c0023a52:	d8 c9                	fmul   st,st(1)
c0023a54:	dc 05 08 a1 02 c0    	fadd   QWORD PTR ds:0xc002a108
c0023a5a:	d8 c9                	fmul   st,st(1)
c0023a5c:	dc 05 10 a1 02 c0    	fadd   QWORD PTR ds:0xc002a110
c0023a62:	de ca                	fmulp  st(2),st
c0023a64:	d9 c9                	fxch   st(1)
c0023a66:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023a6a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023a6e:	d9 c1                	fld    st(1)
c0023a70:	dc 0d 18 a1 02 c0    	fmul   QWORD PTR ds:0xc002a118
c0023a76:	dc 25 20 a1 02 c0    	fsub   QWORD PTR ds:0xc002a120
c0023a7c:	d8 ca                	fmul   st,st(2)
c0023a7e:	dc 25 28 a1 02 c0    	fsub   QWORD PTR ds:0xc002a128
c0023a84:	d8 ca                	fmul   st,st(2)
c0023a86:	dc 25 30 a1 02 c0    	fsub   QWORD PTR ds:0xc002a130
c0023a8c:	d8 ca                	fmul   st,st(2)
c0023a8e:	dc 25 38 a1 02 c0    	fsub   QWORD PTR ds:0xc002a138
c0023a94:	de ca                	fmulp  st(2),st
c0023a96:	d9 c9                	fxch   st(1)
c0023a98:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023a9c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023aa0:	de c1                	faddp  st(1),st
c0023aa2:	d8 cb                	fmul   st,st(3)
c0023aa4:	74 6a                	je     c0023b10 <atan+0x1a0>
c0023aa6:	85 f6                	test   esi,esi
c0023aa8:	de e2                	fsubrp st(2),st
c0023aaa:	d9 c9                	fxch   st(1)
c0023aac:	de e2                	fsubrp st(2),st
c0023aae:	de e1                	fsubrp st(1),st
c0023ab0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023ab4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023ab8:	0f 89 f3 fe ff ff    	jns    c00239b1 <atan+0x41>
c0023abe:	d9 e0                	fchs   
c0023ac0:	83 c4 24             	add    esp,0x24
c0023ac3:	5b                   	pop    ebx
c0023ac4:	5e                   	pop    esi
c0023ac5:	c3                   	ret    
c0023ac6:	8d 76 00             	lea    esi,[esi+0x0]
c0023ac9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023ad0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023ad4:	d9 e8                	fld1   
c0023ad6:	d9 c2                	fld    st(2)
c0023ad8:	dc 05 20 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f20
c0023ade:	df f1                	fcomip st,st(1)
c0023ae0:	dd d8                	fstp   st(0)
c0023ae2:	0f 86 28 ff ff ff    	jbe    c0023a10 <atan+0xa0>
c0023ae8:	dd d9                	fstp   st(1)
c0023aea:	e9 c2 fe ff ff       	jmp    c00239b1 <atan+0x41>
c0023aef:	90                   	nop
c0023af0:	dd 05 38 9f 02 c0    	fld    QWORD PTR ds:0xc0029f38
c0023af6:	de e1                	fsubrp st(1),st
c0023af8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023afc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023b00:	e9 ac fe ff ff       	jmp    c00239b1 <atan+0x41>
c0023b05:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023b09:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023b10:	dd da                	fstp   st(2)
c0023b12:	dd d8                	fstp   st(0)
c0023b14:	de e9                	fsubp  st(1),st
c0023b16:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023b1a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023b1e:	83 c4 24             	add    esp,0x24
c0023b21:	5b                   	pop    ebx
c0023b22:	5e                   	pop    esi
c0023b23:	c3                   	ret    
c0023b24:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023b2a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023b30:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023b34:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023b37:	e8 d4 06 00 00       	call   c0024210 <fabs>
c0023b3c:	81 fb ff ff f2 3f    	cmp    ebx,0x3ff2ffff
c0023b42:	7f 3c                	jg     c0023b80 <atan+0x210>
c0023b44:	81 fb ff ff e5 3f    	cmp    ebx,0x3fe5ffff
c0023b4a:	0f 8f a0 00 00 00    	jg     c0023bf0 <atan+0x280>
c0023b50:	d9 c0                	fld    st(0)
c0023b52:	31 c0                	xor    eax,eax
c0023b54:	d8 c1                	fadd   st,st(1)
c0023b56:	d8 25 10 9f 02 c0    	fsub   DWORD PTR ds:0xc0029f10
c0023b5c:	d9 c9                	fxch   st(1)
c0023b5e:	d8 05 80 9f 02 c0    	fadd   DWORD PTR ds:0xc0029f80
c0023b64:	de f9                	fdivp  st(1),st
c0023b66:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023b6a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023b6e:	dd 05 d8 a0 02 c0    	fld    QWORD PTR ds:0xc002a0d8
c0023b74:	dd 05 e0 a0 02 c0    	fld    QWORD PTR ds:0xc002a0e0
c0023b7a:	e9 9c fe ff ff       	jmp    c0023a1b <atan+0xab>
c0023b7f:	90                   	nop
c0023b80:	81 fb ff 7f 03 40    	cmp    ebx,0x40037fff
c0023b86:	7f 38                	jg     c0023bc0 <atan+0x250>
c0023b88:	d9 05 64 9f 02 c0    	fld    DWORD PTR ds:0xc0029f64
c0023b8e:	b8 02 00 00 00       	mov    eax,0x2
c0023b93:	d9 c1                	fld    st(1)
c0023b95:	d8 e1                	fsub   st,st(1)
c0023b97:	d9 ca                	fxch   st(2)
c0023b99:	de c9                	fmulp  st(1),st
c0023b9b:	d8 05 10 9f 02 c0    	fadd   DWORD PTR ds:0xc0029f10
c0023ba1:	de f9                	fdivp  st(1),st
c0023ba3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023ba7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023bab:	dd 05 c8 a0 02 c0    	fld    QWORD PTR ds:0xc002a0c8
c0023bb1:	dd 05 d0 a0 02 c0    	fld    QWORD PTR ds:0xc002a0d0
c0023bb7:	e9 5f fe ff ff       	jmp    c0023a1b <atan+0xab>
c0023bbc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023bc0:	d8 3d 40 a1 02 c0    	fdivr  DWORD PTR ds:0xc002a140
c0023bc6:	b8 03 00 00 00       	mov    eax,0x3
c0023bcb:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023bcf:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023bd3:	dd 05 18 9f 02 c0    	fld    QWORD PTR ds:0xc0029f18
c0023bd9:	dd 05 b8 9e 02 c0    	fld    QWORD PTR ds:0xc0029eb8
c0023bdf:	e9 37 fe ff ff       	jmp    c0023a1b <atan+0xab>
c0023be4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023bea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023bf0:	d9 e8                	fld1   
c0023bf2:	b8 01 00 00 00       	mov    eax,0x1
c0023bf7:	d9 c1                	fld    st(1)
c0023bf9:	d8 e1                	fsub   st,st(1)
c0023bfb:	d9 ca                	fxch   st(2)
c0023bfd:	de c1                	faddp  st(1),st
c0023bff:	de f9                	fdivp  st(1),st
c0023c01:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023c05:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023c09:	dd 05 c0 a0 02 c0    	fld    QWORD PTR ds:0xc002a0c0
c0023c0f:	dd 05 28 9f 02 c0    	fld    QWORD PTR ds:0xc0029f28
c0023c15:	e9 01 fe ff ff       	jmp    c0023a1b <atan+0xab>
c0023c1a:	66 90                	xchg   ax,ax
c0023c1c:	66 90                	xchg   ax,ax
c0023c1e:	66 90                	xchg   ax,ax

c0023c20 <cos>:
c0023c20:	83 ec 5c             	sub    esp,0x5c
c0023c23:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0023c27:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0023c2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023c2f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023c34:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0023c39:	7f 55                	jg     c0023c90 <cos+0x70>
c0023c3b:	3d 9d a0 46 3e       	cmp    eax,0x3e46a09d
c0023c40:	7f 2e                	jg     c0023c70 <cos+0x50>
c0023c42:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0023c46:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0023c4b:	66 0d 00 0c          	or     ax,0xc00
c0023c4f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0023c54:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0023c58:	db 5c 24 30          	fistp  DWORD PTR [esp+0x30]
c0023c5c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0023c60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023c64:	85 c0                	test   eax,eax
c0023c66:	0f 84 94 00 00 00    	je     c0023d00 <cos+0xe0>
c0023c6c:	eb 04                	jmp    c0023c72 <cos+0x52>
c0023c6e:	66 90                	xchg   ax,ax
c0023c70:	dd d8                	fstp   st(0)
c0023c72:	d9 ee                	fldz   
c0023c74:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023c78:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023c7c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023c7f:	e8 ac 11 00 00       	call   c0024e30 <__kernel_cos>
c0023c84:	83 c4 5c             	add    esp,0x5c
c0023c87:	c3                   	ret    
c0023c88:	90                   	nop
c0023c89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023c90:	dd d8                	fstp   st(0)
c0023c92:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0023c97:	7e 17                	jle    c0023cb0 <cos+0x90>
c0023c99:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023c9d:	d8 e0                	fsub   st,st(0)
c0023c9f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023ca3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023ca7:	83 c4 5c             	add    esp,0x5c
c0023caa:	c3                   	ret    
c0023cab:	90                   	nop
c0023cac:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023cb0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023cb4:	8d 44 24 40          	lea    eax,[esp+0x40]
c0023cb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023cbc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023cbf:	e8 3c 0c 00 00       	call   c0024900 <__ieee754_rem_pio2>
c0023cc4:	83 e0 03             	and    eax,0x3
c0023cc7:	83 f8 01             	cmp    eax,0x1
c0023cca:	0f 84 80 00 00 00    	je     c0023d50 <cos+0x130>
c0023cd0:	83 f8 02             	cmp    eax,0x2
c0023cd3:	74 5b                	je     c0023d30 <cos+0x110>
c0023cd5:	85 c0                	test   eax,eax
c0023cd7:	74 37                	je     c0023d10 <cos+0xf0>
c0023cd9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0023cdd:	b8 01 00 00 00       	mov    eax,0x1
c0023ce2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023ce6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023cea:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0023cee:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023cf1:	e8 ba 1b 00 00       	call   c00258b0 <__kernel_sin>
c0023cf6:	eb 8c                	jmp    c0023c84 <cos+0x64>
c0023cf8:	90                   	nop
c0023cf9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023d00:	d9 e8                	fld1   
c0023d02:	83 c4 5c             	add    esp,0x5c
c0023d05:	c3                   	ret    
c0023d06:	8d 76 00             	lea    esi,[esi+0x0]
c0023d09:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023d10:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0023d14:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023d18:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0023d1c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023d1f:	e8 0c 11 00 00       	call   c0024e30 <__kernel_cos>
c0023d24:	e9 5b ff ff ff       	jmp    c0023c84 <cos+0x64>
c0023d29:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023d30:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0023d34:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023d38:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0023d3c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023d3f:	e8 ec 10 00 00       	call   c0024e30 <__kernel_cos>
c0023d44:	d9 e0                	fchs   
c0023d46:	e9 39 ff ff ff       	jmp    c0023c84 <cos+0x64>
c0023d4b:	90                   	nop
c0023d4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023d50:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0023d54:	ba 01 00 00 00       	mov    edx,0x1
c0023d59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0023d5d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023d61:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0023d65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023d68:	e8 43 1b 00 00       	call   c00258b0 <__kernel_sin>
c0023d6d:	d9 e0                	fchs   
c0023d6f:	e9 10 ff ff ff       	jmp    c0023c84 <cos+0x64>
c0023d74:	66 90                	xchg   ax,ax
c0023d76:	66 90                	xchg   ax,ax
c0023d78:	66 90                	xchg   ax,ax
c0023d7a:	66 90                	xchg   ax,ax
c0023d7c:	66 90                	xchg   ax,ax
c0023d7e:	66 90                	xchg   ax,ax

c0023d80 <expm1>:
c0023d80:	d9 05 50 a1 02 c0    	fld    DWORD PTR ds:0xc002a150
c0023d86:	83 ec 24             	sub    esp,0x24
c0023d89:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023d8d:	dd 14 24             	fst    QWORD PTR [esp]
c0023d90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023d94:	89 d0                	mov    eax,edx
c0023d96:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023d9b:	3d 79 68 43 40       	cmp    eax,0x40436879
c0023da0:	0f 86 ea 00 00 00    	jbe    c0023e90 <expm1+0x110>
c0023da6:	dd d9                	fstp   st(1)
c0023da8:	3d 41 2e 86 40       	cmp    eax,0x40862e41
c0023dad:	76 51                	jbe    c0023e00 <expm1+0x80>
c0023daf:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0023db4:	76 2a                	jbe    c0023de0 <expm1+0x60>
c0023db6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0023db9:	89 d1                	mov    ecx,edx
c0023dbb:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0023dc1:	09 c1                	or     ecx,eax
c0023dc3:	0f 84 b7 03 00 00    	je     c0024180 <expm1+0x400>
c0023dc9:	d9 c0                	fld    st(0)
c0023dcb:	de c1                	faddp  st(1),st
c0023dcd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023dd1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023dd5:	e9 0a 02 00 00       	jmp    c0023fe4 <expm1+0x264>
c0023dda:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023de0:	dd d8                	fstp   st(0)
c0023de2:	dd 05 68 a1 02 c0    	fld    QWORD PTR ds:0xc002a168
c0023de8:	dd 04 24             	fld    QWORD PTR [esp]
c0023deb:	df f1                	fcomip st,st(1)
c0023ded:	dd d8                	fstp   st(0)
c0023def:	0f 87 cb 03 00 00    	ja     c00241c0 <expm1+0x440>
c0023df5:	eb 0b                	jmp    c0023e02 <expm1+0x82>
c0023df7:	89 f6                	mov    esi,esi
c0023df9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023e00:	dd d8                	fstp   st(0)
c0023e02:	85 d2                	test   edx,edx
c0023e04:	dd 04 24             	fld    QWORD PTR [esp]
c0023e07:	0f 88 e3 01 00 00    	js     c0023ff0 <expm1+0x270>
c0023e0d:	d9 c0                	fld    st(0)
c0023e0f:	dc 0d f0 9f 02 c0    	fmul   QWORD PTR ds:0xc0029ff0
c0023e15:	d9 05 14 9f 02 c0    	fld    DWORD PTR ds:0xc0029f14
c0023e1b:	d9 7c 24 16          	fnstcw WORD PTR [esp+0x16]
c0023e1f:	de c1                	faddp  st(1),st
c0023e21:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0023e26:	66 0d 00 0c          	or     ax,0xc00
c0023e2a:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0023e2f:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0023e33:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0023e37:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c0023e3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023e3f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0023e42:	db 04 24             	fild   DWORD PTR [esp]
c0023e45:	d9 c0                	fld    st(0)
c0023e47:	dc 0d 78 a1 02 c0    	fmul   QWORD PTR ds:0xc002a178
c0023e4d:	de ea                	fsubp  st(2),st
c0023e4f:	d9 c9                	fxch   st(1)
c0023e51:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023e55:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e59:	d9 c9                	fxch   st(1)
c0023e5b:	dc 0d 60 a1 02 c0    	fmul   QWORD PTR ds:0xc002a160
c0023e61:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023e65:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e69:	d9 c1                	fld    st(1)
c0023e6b:	d8 e1                	fsub   st,st(1)
c0023e6d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023e70:	dd 04 24             	fld    QWORD PTR [esp]
c0023e73:	dc ea                	fsub   st(2),st
c0023e75:	d9 ca                	fxch   st(2)
c0023e77:	de e1                	fsubrp st(1),st
c0023e79:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023e7d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e81:	eb 2c                	jmp    c0023eaf <expm1+0x12f>
c0023e83:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023e89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023e90:	dd d8                	fstp   st(0)
c0023e92:	3d 42 2e d6 3f       	cmp    eax,0x3fd62e42
c0023e97:	dd 04 24             	fld    QWORD PTR [esp]
c0023e9a:	0f 87 c0 01 00 00    	ja     c0024060 <expm1+0x2e0>
c0023ea0:	31 c9                	xor    ecx,ecx
c0023ea2:	3d ff ff 8f 3c       	cmp    eax,0x3c8fffff
c0023ea7:	0f 86 f3 01 00 00    	jbe    c00240a0 <expm1+0x320>
c0023ead:	d9 c9                	fxch   st(1)
c0023eaf:	d9 05 14 9f 02 c0    	fld    DWORD PTR ds:0xc0029f14
c0023eb5:	85 c9                	test   ecx,ecx
c0023eb7:	d9 c2                	fld    st(2)
c0023eb9:	d8 c9                	fmul   st,st(1)
c0023ebb:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023ebf:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023ec3:	d9 c0                	fld    st(0)
c0023ec5:	d8 cc                	fmul   st,st(4)
c0023ec7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023ecb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023ecf:	d9 c0                	fld    st(0)
c0023ed1:	dc 0d 80 a1 02 c0    	fmul   QWORD PTR ds:0xc002a180
c0023ed7:	dc 05 88 a1 02 c0    	fadd   QWORD PTR ds:0xc002a188
c0023edd:	d8 c9                	fmul   st,st(1)
c0023edf:	dc 25 90 a1 02 c0    	fsub   QWORD PTR ds:0xc002a190
c0023ee5:	d8 c9                	fmul   st,st(1)
c0023ee7:	dc 05 98 a1 02 c0    	fadd   QWORD PTR ds:0xc002a198
c0023eed:	d8 c9                	fmul   st,st(1)
c0023eef:	dc 25 a0 a1 02 c0    	fsub   QWORD PTR ds:0xc002a1a0
c0023ef5:	d8 c9                	fmul   st,st(1)
c0023ef7:	d9 e8                	fld1   
c0023ef9:	dc c1                	fadd   st(1),st
c0023efb:	d9 c9                	fxch   st(1)
c0023efd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f01:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f05:	dc cb                	fmul   st(3),st
c0023f07:	d9 cb                	fxch   st(3)
c0023f09:	d8 2d 74 9f 02 c0    	fsubr  DWORD PTR ds:0xc0029f74
c0023f0f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f13:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f17:	dc eb                	fsub   st(3),st
c0023f19:	d8 ce                	fmul   st,st(6)
c0023f1b:	d8 2d 44 a1 02 c0    	fsubr  DWORD PTR ds:0xc002a144
c0023f21:	de fb                	fdivp  st(3),st
c0023f23:	d9 ca                	fxch   st(2)
c0023f25:	d8 c9                	fmul   st,st(1)
c0023f27:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f2b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f2f:	0f 84 9b 00 00 00    	je     c0023fd0 <expm1+0x250>
c0023f35:	89 c8                	mov    eax,ecx
c0023f37:	c1 e0 14             	shl    eax,0x14
c0023f3a:	05 00 00 f0 3f       	add    eax,0x3ff00000
c0023f3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023f43:	31 c0                	xor    eax,eax
c0023f45:	83 f9 ff             	cmp    ecx,0xffffffff
c0023f48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f4c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0023f50:	d9 c9                	fxch   st(1)
c0023f52:	d8 e5                	fsub   st,st(5)
c0023f54:	d8 ce                	fmul   st,st(6)
c0023f56:	de e5                	fsubrp st(5),st
c0023f58:	d9 cc                	fxch   st(4)
c0023f5a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f5e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f62:	de e1                	fsubrp st(1),st
c0023f64:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f68:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f6c:	0f 84 9e 01 00 00    	je     c0024110 <expm1+0x390>
c0023f72:	83 f9 01             	cmp    ecx,0x1
c0023f75:	0f 84 55 01 00 00    	je     c00240d0 <expm1+0x350>
c0023f7b:	dd da                	fstp   st(2)
c0023f7d:	d9 c9                	fxch   st(1)
c0023f7f:	8d 41 01             	lea    eax,[ecx+0x1]
c0023f82:	83 f8 39             	cmp    eax,0x39
c0023f85:	0f 87 95 00 00 00    	ja     c0024020 <expm1+0x2a0>
c0023f8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0023f92:	83 f9 13             	cmp    ecx,0x13
c0023f95:	0f 8f b5 01 00 00    	jg     c0024150 <expm1+0x3d0>
c0023f9b:	dd d9                	fstp   st(1)
c0023f9d:	b8 00 00 20 00       	mov    eax,0x200000
c0023fa2:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0023fa7:	d3 f8                	sar    eax,cl
c0023fa9:	29 c2                	sub    edx,eax
c0023fab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023faf:	dd 04 24             	fld    QWORD PTR [esp]
c0023fb2:	d9 cb                	fxch   st(3)
c0023fb4:	de e9                	fsubp  st(1),st
c0023fb6:	de ea                	fsubp  st(2),st
c0023fb8:	d9 c9                	fxch   st(1)
c0023fba:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023fbe:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023fc2:	de c9                	fmulp  st(1),st
c0023fc4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023fc8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023fcc:	83 c4 24             	add    esp,0x24
c0023fcf:	c3                   	ret    
c0023fd0:	dd db                	fstp   st(3)
c0023fd2:	dd db                	fstp   st(3)
c0023fd4:	dd d8                	fstp   st(0)
c0023fd6:	d8 ca                	fmul   st,st(2)
c0023fd8:	de e1                	fsubrp st(1),st
c0023fda:	de e9                	fsubp  st(1),st
c0023fdc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023fe0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023fe4:	83 c4 24             	add    esp,0x24
c0023fe7:	c3                   	ret    
c0023fe8:	90                   	nop
c0023fe9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023ff0:	d9 ee                	fldz   
c0023ff2:	d9 c1                	fld    st(1)
c0023ff4:	dc 05 70 a1 02 c0    	fadd   QWORD PTR ds:0xc002a170
c0023ffa:	d9 c9                	fxch   st(1)
c0023ffc:	df f1                	fcomip st,st(1)
c0023ffe:	dd d8                	fstp   st(0)
c0024000:	0f 87 8a 01 00 00    	ja     c0024190 <expm1+0x410>
c0024006:	d9 c0                	fld    st(0)
c0024008:	dc 0d f0 9f 02 c0    	fmul   QWORD PTR ds:0xc0029ff0
c002400e:	d9 05 78 a0 02 c0    	fld    DWORD PTR ds:0xc002a078
c0024014:	e9 02 fe ff ff       	jmp    c0023e1b <expm1+0x9b>
c0024019:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024020:	de e3                	fsubrp st(3),st
c0024022:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0024028:	de e2                	fsubrp st(2),st
c002402a:	d9 c9                	fxch   st(1)
c002402c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024030:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024034:	0f 84 96 01 00 00    	je     c00241d0 <expm1+0x450>
c002403a:	de c9                	fmulp  st(1),st
c002403c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024040:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024044:	d9 e8                	fld1   
c0024046:	de e9                	fsubp  st(1),st
c0024048:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002404c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024050:	eb 92                	jmp    c0023fe4 <expm1+0x264>
c0024052:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024059:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024060:	dd d9                	fstp   st(1)
c0024062:	3d b1 a2 f0 3f       	cmp    eax,0x3ff0a2b1
c0024067:	0f 87 7a 01 00 00    	ja     c00241e7 <expm1+0x467>
c002406d:	85 d2                	test   edx,edx
c002406f:	0f 88 bb 00 00 00    	js     c0024130 <expm1+0x3b0>
c0024075:	dc 25 78 a1 02 c0    	fsub   QWORD PTR ds:0xc002a178
c002407b:	b9 01 00 00 00       	mov    ecx,0x1
c0024080:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024084:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024088:	dd 05 60 a1 02 c0    	fld    QWORD PTR ds:0xc002a160
c002408e:	e9 d6 fd ff ff       	jmp    c0023e69 <expm1+0xe9>
c0024093:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024099:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00240a0:	dd d9                	fstp   st(1)
c00240a2:	d9 c0                	fld    st(0)
c00240a4:	dc 05 20 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f20
c00240aa:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00240ae:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00240b2:	de e1                	fsubrp st(1),st
c00240b4:	de e9                	fsubp  st(1),st
c00240b6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00240ba:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00240be:	83 c4 24             	add    esp,0x24
c00240c1:	c3                   	ret    
c00240c2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00240c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00240d0:	dd db                	fstp   st(3)
c00240d2:	d9 c9                	fxch   st(1)
c00240d4:	d9 ca                	fxch   st(2)
c00240d6:	dd 04 24             	fld    QWORD PTR [esp]
c00240d9:	d9 05 48 a1 02 c0    	fld    DWORD PTR ds:0xc002a148
c00240df:	df f1                	fcomip st,st(1)
c00240e1:	dd d8                	fstp   st(0)
c00240e3:	0f 86 b7 00 00 00    	jbe    c00241a0 <expm1+0x420>
c00240e9:	dd d9                	fstp   st(1)
c00240eb:	d9 ca                	fxch   st(2)
c00240ed:	de c1                	faddp  st(1),st
c00240ef:	de e9                	fsubp  st(1),st
c00240f1:	d8 0d 4c a1 02 c0    	fmul   DWORD PTR ds:0xc002a14c
c00240f7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00240fb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00240ff:	e9 e0 fe ff ff       	jmp    c0023fe4 <expm1+0x264>
c0024104:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002410a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024110:	dd db                	fstp   st(3)
c0024112:	dd d8                	fstp   st(0)
c0024114:	d9 c9                	fxch   st(1)
c0024116:	de ea                	fsubp  st(2),st
c0024118:	dc c9                	fmul   st(1),st
c002411a:	de e9                	fsubp  st(1),st
c002411c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024120:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024124:	e9 bb fe ff ff       	jmp    c0023fe4 <expm1+0x264>
c0024129:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024130:	dc 05 78 a1 02 c0    	fadd   QWORD PTR ds:0xc002a178
c0024136:	b9 ff ff ff ff       	mov    ecx,0xffffffff
c002413b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002413f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024143:	dd 05 58 a1 02 c0    	fld    QWORD PTR ds:0xc002a158
c0024149:	e9 1b fd ff ff       	jmp    c0023e69 <expm1+0xe9>
c002414e:	66 90                	xchg   ax,ax
c0024150:	b8 ff 03 00 00       	mov    eax,0x3ff
c0024155:	29 c8                	sub    eax,ecx
c0024157:	c1 e0 14             	shl    eax,0x14
c002415a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002415e:	dd 04 24             	fld    QWORD PTR [esp]
c0024161:	de c1                	faddp  st(1),st
c0024163:	de eb                	fsubp  st(3),st
c0024165:	d9 ca                	fxch   st(2)
c0024167:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002416b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002416f:	de c2                	faddp  st(2),st
c0024171:	d9 c9                	fxch   st(1)
c0024173:	e9 42 fe ff ff       	jmp    c0023fba <expm1+0x23a>
c0024178:	90                   	nop
c0024179:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024180:	dd d8                	fstp   st(0)
c0024182:	85 d2                	test   edx,edx
c0024184:	78 0c                	js     c0024192 <expm1+0x412>
c0024186:	dd 04 24             	fld    QWORD PTR [esp]
c0024189:	e9 56 fe ff ff       	jmp    c0023fe4 <expm1+0x264>
c002418e:	66 90                	xchg   ax,ax
c0024190:	dd d8                	fstp   st(0)
c0024192:	d9 e8                	fld1   
c0024194:	d9 e0                	fchs   
c0024196:	e9 49 fe ff ff       	jmp    c0023fe4 <expm1+0x264>
c002419b:	90                   	nop
c002419c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00241a0:	dd da                	fstp   st(2)
c00241a2:	d9 c9                	fxch   st(1)
c00241a4:	de ea                	fsubp  st(2),st
c00241a6:	d9 c9                	fxch   st(1)
c00241a8:	d8 c0                	fadd   st,st(0)
c00241aa:	de c1                	faddp  st(1),st
c00241ac:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00241b0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00241b4:	e9 2b fe ff ff       	jmp    c0023fe4 <expm1+0x264>
c00241b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00241c0:	d9 05 58 9f 02 c0    	fld    DWORD PTR ds:0xc0029f58
c00241c6:	e9 19 fe ff ff       	jmp    c0023fe4 <expm1+0x264>
c00241cb:	90                   	nop
c00241cc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00241d0:	dd d9                	fstp   st(1)
c00241d2:	d8 c0                	fadd   st,st(0)
c00241d4:	dc 0d a8 a1 02 c0    	fmul   QWORD PTR ds:0xc002a1a8
c00241da:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00241de:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00241e2:	e9 5d fe ff ff       	jmp    c0024044 <expm1+0x2c4>
c00241e7:	d9 c0                	fld    st(0)
c00241e9:	85 d2                	test   edx,edx
c00241eb:	dc 0d f0 9f 02 c0    	fmul   QWORD PTR ds:0xc0029ff0
c00241f1:	0f 88 17 fe ff ff    	js     c002400e <expm1+0x28e>
c00241f7:	d9 05 14 9f 02 c0    	fld    DWORD PTR ds:0xc0029f14
c00241fd:	e9 19 fc ff ff       	jmp    c0023e1b <expm1+0x9b>
c0024202:	66 90                	xchg   ax,ax
c0024204:	66 90                	xchg   ax,ax
c0024206:	66 90                	xchg   ax,ax
c0024208:	66 90                	xchg   ax,ax
c002420a:	66 90                	xchg   ax,ax
c002420c:	66 90                	xchg   ax,ax
c002420e:	66 90                	xchg   ax,ax

c0024210 <fabs>:
c0024210:	83 ec 0c             	sub    esp,0xc
c0024213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024217:	89 04 24             	mov    DWORD PTR [esp],eax
c002421a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002421e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024223:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024227:	dd 04 24             	fld    QWORD PTR [esp]
c002422a:	83 c4 0c             	add    esp,0xc
c002422d:	c3                   	ret    
c002422e:	66 90                	xchg   ax,ax

c0024230 <frexp>:
c0024230:	53                   	push   ebx
c0024231:	83 ec 10             	sub    esp,0x10
c0024234:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024238:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002423c:	dd 14 24             	fst    QWORD PTR [esp]
c002423f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024243:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c0024249:	89 d0                	mov    eax,edx
c002424b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024250:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0024255:	7f 59                	jg     c00242b0 <frexp+0x80>
c0024257:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c002425a:	09 c3                	or     ebx,eax
c002425c:	74 62                	je     c00242c0 <frexp+0x90>
c002425e:	31 db                	xor    ebx,ebx
c0024260:	f7 c2 00 00 f0 7f    	test   edx,0x7ff00000
c0024266:	75 28                	jne    c0024290 <frexp+0x60>
c0024268:	d9 05 b0 a1 02 c0    	fld    DWORD PTR ds:0xc002a1b0
c002426e:	bb ca ff ff ff       	mov    ebx,0xffffffca
c0024273:	de c9                	fmulp  st(1),st
c0024275:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024278:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002427c:	89 d0                	mov    eax,edx
c002427e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024283:	eb 0d                	jmp    c0024292 <frexp+0x62>
c0024285:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024289:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024290:	dd d8                	fstp   st(0)
c0024292:	c1 f8 14             	sar    eax,0x14
c0024295:	81 e2 ff ff 0f 80    	and    edx,0x800fffff
c002429b:	8d 84 03 02 fc ff ff 	lea    eax,[ebx+eax*1-0x3fe]
c00242a2:	81 ca 00 00 e0 3f    	or     edx,0x3fe00000
c00242a8:	89 01                	mov    DWORD PTR [ecx],eax
c00242aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00242ae:	eb 12                	jmp    c00242c2 <frexp+0x92>
c00242b0:	dd d8                	fstp   st(0)
c00242b2:	eb 0e                	jmp    c00242c2 <frexp+0x92>
c00242b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00242ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00242c0:	dd d8                	fstp   st(0)
c00242c2:	dd 04 24             	fld    QWORD PTR [esp]
c00242c5:	83 c4 10             	add    esp,0x10
c00242c8:	5b                   	pop    ebx
c00242c9:	c3                   	ret    
c00242ca:	66 90                	xchg   ax,ax
c00242cc:	66 90                	xchg   ax,ax
c00242ce:	66 90                	xchg   ax,ax

c00242d0 <modf>:
c00242d0:	53                   	push   ebx
c00242d1:	83 ec 18             	sub    esp,0x18
c00242d4:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00242d8:	dd 14 24             	fst    QWORD PTR [esp]
c00242db:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00242df:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00242e2:	89 d0                	mov    eax,edx
c00242e4:	c1 f8 14             	sar    eax,0x14
c00242e7:	25 ff 07 00 00       	and    eax,0x7ff
c00242ec:	8d 88 01 fc ff ff    	lea    ecx,[eax-0x3ff]
c00242f2:	83 f9 13             	cmp    ecx,0x13
c00242f5:	7f 49                	jg     c0024340 <modf+0x70>
c00242f7:	85 c9                	test   ecx,ecx
c00242f9:	0f 88 f1 00 00 00    	js     c00243f0 <modf+0x120>
c00242ff:	dd d8                	fstp   st(0)
c0024301:	b8 ff ff 0f 00       	mov    eax,0xfffff
c0024306:	d3 f8                	sar    eax,cl
c0024308:	89 d1                	mov    ecx,edx
c002430a:	21 c1                	and    ecx,eax
c002430c:	09 d9                	or     ecx,ebx
c002430e:	0f 84 ac 00 00 00    	je     c00243c0 <modf+0xf0>
c0024314:	f7 d0                	not    eax
c0024316:	21 d0                	and    eax,edx
c0024318:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002431c:	31 c0                	xor    eax,eax
c002431e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024322:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024326:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c002432a:	dd 10                	fst    QWORD PTR [eax]
c002432c:	dd 04 24             	fld    QWORD PTR [esp]
c002432f:	de e1                	fsubrp st(1),st
c0024331:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0024335:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024339:	83 c4 18             	add    esp,0x18
c002433c:	5b                   	pop    ebx
c002433d:	c3                   	ret    
c002433e:	66 90                	xchg   ax,ax
c0024340:	dd d8                	fstp   st(0)
c0024342:	83 f9 33             	cmp    ecx,0x33
c0024345:	7e 39                	jle    c0024380 <modf+0xb0>
c0024347:	81 f9 00 04 00 00    	cmp    ecx,0x400
c002434d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024351:	0f 84 e9 00 00 00    	je     c0024440 <modf+0x170>
c0024357:	dd 04 24             	fld    QWORD PTR [esp]
c002435a:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024360:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0024367:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002436b:	dd 18                	fstp   QWORD PTR [eax]
c002436d:	dd 04 24             	fld    QWORD PTR [esp]
c0024370:	83 c4 18             	add    esp,0x18
c0024373:	5b                   	pop    ebx
c0024374:	c3                   	ret    
c0024375:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024379:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024380:	8d 88 ed fb ff ff    	lea    ecx,[eax-0x413]
c0024386:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002438b:	d3 e8                	shr    eax,cl
c002438d:	85 d8                	test   eax,ebx
c002438f:	75 7f                	jne    c0024410 <modf+0x140>
c0024391:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024395:	81 e2 00 00 00 80    	and    edx,0x80000000
c002439b:	dd 04 24             	fld    QWORD PTR [esp]
c002439e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00243a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00243a9:	dd 18                	fstp   QWORD PTR [eax]
c00243ab:	dd 04 24             	fld    QWORD PTR [esp]
c00243ae:	83 c4 18             	add    esp,0x18
c00243b1:	5b                   	pop    ebx
c00243b2:	c3                   	ret    
c00243b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00243b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00243c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00243c4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00243ca:	dd 04 24             	fld    QWORD PTR [esp]
c00243cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00243d4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00243d8:	dd 18                	fstp   QWORD PTR [eax]
c00243da:	dd 04 24             	fld    QWORD PTR [esp]
c00243dd:	83 c4 18             	add    esp,0x18
c00243e0:	5b                   	pop    ebx
c00243e1:	c3                   	ret    
c00243e2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00243e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00243f0:	81 e2 00 00 00 80    	and    edx,0x80000000
c00243f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00243fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00243fe:	31 d2                	xor    edx,edx
c0024400:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0024404:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0024408:	dd 18                	fstp   QWORD PTR [eax]
c002440a:	83 c4 18             	add    esp,0x18
c002440d:	5b                   	pop    ebx
c002440e:	c3                   	ret    
c002440f:	90                   	nop
c0024410:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024414:	f7 d0                	not    eax
c0024416:	21 d8                	and    eax,ebx
c0024418:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002441c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024420:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0024424:	dd 10                	fst    QWORD PTR [eax]
c0024426:	dd 04 24             	fld    QWORD PTR [esp]
c0024429:	de e1                	fsubrp st(1),st
c002442b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002442f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024433:	83 c4 18             	add    esp,0x18
c0024436:	5b                   	pop    ebx
c0024437:	c3                   	ret    
c0024438:	90                   	nop
c0024439:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024440:	dd 04 24             	fld    QWORD PTR [esp]
c0024443:	dd 10                	fst    QWORD PTR [eax]
c0024445:	d9 ee                	fldz   
c0024447:	de f1                	fdivrp st(1),st
c0024449:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002444d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024451:	e9 e3 fe ff ff       	jmp    c0024339 <modf+0x69>
c0024456:	66 90                	xchg   ax,ax
c0024458:	66 90                	xchg   ax,ax
c002445a:	66 90                	xchg   ax,ax
c002445c:	66 90                	xchg   ax,ax
c002445e:	66 90                	xchg   ax,ax

c0024460 <round>:
c0024460:	83 ec 2c             	sub    esp,0x2c
c0024463:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0024467:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002446b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002446f:	89 c2                	mov    edx,eax
c0024471:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024477:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c002447d:	0f 84 9d 00 00 00    	je     c0024520 <round+0xc0>
c0024483:	dd d8                	fstp   st(0)
c0024485:	85 c0                	test   eax,eax
c0024487:	78 47                	js     c00244d0 <round+0x70>
c0024489:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002448d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024490:	e8 ff 03 00 00       	call   c0024894 <floor>
c0024495:	d9 c0                	fld    st(0)
c0024497:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002449b:	d8 e9                	fsubr  st,st(1)
c002449d:	d9 05 78 a0 02 c0    	fld    DWORD PTR ds:0xc002a078
c00244a3:	df f1                	fcomip st,st(1)
c00244a5:	dd d8                	fstp   st(0)
c00244a7:	72 17                	jb     c00244c0 <round+0x60>
c00244a9:	dd d9                	fstp   st(1)
c00244ab:	d8 05 10 9f 02 c0    	fadd   DWORD PTR ds:0xc0029f10
c00244b1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00244b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00244b9:	eb 07                	jmp    c00244c2 <round+0x62>
c00244bb:	90                   	nop
c00244bc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00244c0:	dd d8                	fstp   st(0)
c00244c2:	83 c4 2c             	add    esp,0x2c
c00244c5:	c3                   	ret    
c00244c6:	8d 76 00             	lea    esi,[esi+0x0]
c00244c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00244d0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00244d4:	d9 e0                	fchs   
c00244d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00244d9:	e8 b6 03 00 00       	call   c0024894 <floor>
c00244de:	d9 c0                	fld    st(0)
c00244e0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00244e4:	d8 c1                	fadd   st,st(1)
c00244e6:	d9 05 78 a0 02 c0    	fld    DWORD PTR ds:0xc002a078
c00244ec:	df f1                	fcomip st,st(1)
c00244ee:	dd d8                	fstp   st(0)
c00244f0:	72 1e                	jb     c0024510 <round+0xb0>
c00244f2:	dd d9                	fstp   st(1)
c00244f4:	d8 05 10 9f 02 c0    	fadd   DWORD PTR ds:0xc0029f10
c00244fa:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00244fe:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024502:	eb 0e                	jmp    c0024512 <round+0xb2>
c0024504:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002450a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024510:	dd d8                	fstp   st(0)
c0024512:	d9 e0                	fchs   
c0024514:	83 c4 2c             	add    esp,0x2c
c0024517:	c3                   	ret    
c0024518:	90                   	nop
c0024519:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024520:	d9 c0                	fld    st(0)
c0024522:	de c1                	faddp  st(1),st
c0024524:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024528:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002452c:	83 c4 2c             	add    esp,0x2c
c002452f:	c3                   	ret    

c0024530 <sin>:
c0024530:	83 ec 5c             	sub    esp,0x5c
c0024533:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0024537:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002453b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002453f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024544:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0024549:	7f 65                	jg     c00245b0 <sin+0x80>
c002454b:	3d ff ff 4f 3e       	cmp    eax,0x3e4fffff
c0024550:	7f 2e                	jg     c0024580 <sin+0x50>
c0024552:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0024556:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002455b:	66 0d 00 0c          	or     ax,0xc00
c002455f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0024564:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024568:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c002456c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024570:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024574:	85 c0                	test   eax,eax
c0024576:	75 18                	jne    c0024590 <sin+0x60>
c0024578:	83 c4 5c             	add    esp,0x5c
c002457b:	c3                   	ret    
c002457c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024580:	dd d8                	fstp   st(0)
c0024582:	eb 0e                	jmp    c0024592 <sin+0x62>
c0024584:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002458a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024590:	dd d8                	fstp   st(0)
c0024592:	d9 ee                	fldz   
c0024594:	31 c9                	xor    ecx,ecx
c0024596:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002459a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c002459e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00245a2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00245a5:	e8 06 13 00 00       	call   c00258b0 <__kernel_sin>
c00245aa:	83 c4 5c             	add    esp,0x5c
c00245ad:	c3                   	ret    
c00245ae:	66 90                	xchg   ax,ax
c00245b0:	dd d8                	fstp   st(0)
c00245b2:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c00245b7:	7e 17                	jle    c00245d0 <sin+0xa0>
c00245b9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00245bd:	d8 e0                	fsub   st,st(0)
c00245bf:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00245c3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00245c7:	83 c4 5c             	add    esp,0x5c
c00245ca:	c3                   	ret    
c00245cb:	90                   	nop
c00245cc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00245d0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00245d4:	8d 44 24 40          	lea    eax,[esp+0x40]
c00245d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00245dc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00245df:	e8 1c 03 00 00       	call   c0024900 <__ieee754_rem_pio2>
c00245e4:	83 e0 03             	and    eax,0x3
c00245e7:	83 f8 01             	cmp    eax,0x1
c00245ea:	0f 84 90 00 00 00    	je     c0024680 <sin+0x150>
c00245f0:	83 f8 02             	cmp    eax,0x2
c00245f3:	74 2b                	je     c0024620 <sin+0xf0>
c00245f5:	85 c0                	test   eax,eax
c00245f7:	74 57                	je     c0024650 <sin+0x120>
c00245f9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00245fd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024601:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024605:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024608:	e8 23 08 00 00       	call   c0024e30 <__kernel_cos>
c002460d:	d9 e0                	fchs   
c002460f:	e9 64 ff ff ff       	jmp    c0024578 <sin+0x48>
c0024614:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002461a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024620:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024624:	b8 01 00 00 00       	mov    eax,0x1
c0024629:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002462d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024631:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024635:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024638:	e8 73 12 00 00       	call   c00258b0 <__kernel_sin>
c002463d:	d9 e0                	fchs   
c002463f:	e9 34 ff ff ff       	jmp    c0024578 <sin+0x48>
c0024644:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002464a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024650:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024654:	ba 01 00 00 00       	mov    edx,0x1
c0024659:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002465d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024661:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024665:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024668:	e8 43 12 00 00       	call   c00258b0 <__kernel_sin>
c002466d:	e9 06 ff ff ff       	jmp    c0024578 <sin+0x48>
c0024672:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024680:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024684:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024688:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002468c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002468f:	e8 9c 07 00 00       	call   c0024e30 <__kernel_cos>
c0024694:	e9 df fe ff ff       	jmp    c0024578 <sin+0x48>
c0024699:	66 90                	xchg   ax,ax
c002469b:	66 90                	xchg   ax,ax
c002469d:	66 90                	xchg   ax,ax
c002469f:	90                   	nop

c00246a0 <tanh>:
c00246a0:	53                   	push   ebx
c00246a1:	83 ec 28             	sub    esp,0x28
c00246a4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00246a8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00246ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00246b0:	89 d8                	mov    eax,ebx
c00246b2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00246b7:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c00246bc:	7e 32                	jle    c00246f0 <tanh+0x50>
c00246be:	d9 e8                	fld1   
c00246c0:	85 db                	test   ebx,ebx
c00246c2:	dc f1                	fdivr  st(1),st
c00246c4:	78 1a                	js     c00246e0 <tanh+0x40>
c00246c6:	de c1                	faddp  st(1),st
c00246c8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00246cc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00246d0:	83 c4 28             	add    esp,0x28
c00246d3:	5b                   	pop    ebx
c00246d4:	c3                   	ret    
c00246d5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00246d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00246e0:	de e9                	fsubp  st(1),st
c00246e2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00246e6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00246ea:	83 c4 28             	add    esp,0x28
c00246ed:	5b                   	pop    ebx
c00246ee:	c3                   	ret    
c00246ef:	90                   	nop
c00246f0:	dd d8                	fstp   st(0)
c00246f2:	3d ff ff 35 40       	cmp    eax,0x4035ffff
c00246f7:	7f 57                	jg     c0024750 <tanh+0xb0>
c00246f9:	3d ff ff 2f 3e       	cmp    eax,0x3e2fffff
c00246fe:	7f 70                	jg     c0024770 <tanh+0xd0>
c0024700:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024704:	d9 e8                	fld1   
c0024706:	d9 c1                	fld    st(1)
c0024708:	dc 05 20 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f20
c002470e:	df f1                	fcomip st,st(1)
c0024710:	dd d8                	fstp   st(0)
c0024712:	77 bc                	ja     c00246d0 <tanh+0x30>
c0024714:	dd d8                	fstp   st(0)
c0024716:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002471a:	dd 1c 24             	fstp   QWORD PTR [esp]
c002471d:	e8 ee fa ff ff       	call   c0024210 <fabs>
c0024722:	d9 05 4c a1 02 c0    	fld    DWORD PTR ds:0xc002a14c
c0024728:	de c9                	fmulp  st(1),st
c002472a:	dd 1c 24             	fstp   QWORD PTR [esp]
c002472d:	e8 4e f6 ff ff       	call   c0023d80 <expm1>
c0024732:	d9 c0                	fld    st(0)
c0024734:	d9 e0                	fchs   
c0024736:	d9 05 80 9f 02 c0    	fld    DWORD PTR ds:0xc0029f80
c002473c:	de c2                	faddp  st(2),st
c002473e:	de f1                	fdivrp st(1),st
c0024740:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024744:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024748:	eb 08                	jmp    c0024752 <tanh+0xb2>
c002474a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024750:	d9 e8                	fld1   
c0024752:	85 db                	test   ebx,ebx
c0024754:	0f 89 76 ff ff ff    	jns    c00246d0 <tanh+0x30>
c002475a:	d9 e0                	fchs   
c002475c:	83 c4 28             	add    esp,0x28
c002475f:	5b                   	pop    ebx
c0024760:	c3                   	ret    
c0024761:	eb 0d                	jmp    c0024770 <tanh+0xd0>
c0024763:	90                   	nop
c0024764:	90                   	nop
c0024765:	90                   	nop
c0024766:	90                   	nop
c0024767:	90                   	nop
c0024768:	90                   	nop
c0024769:	90                   	nop
c002476a:	90                   	nop
c002476b:	90                   	nop
c002476c:	90                   	nop
c002476d:	90                   	nop
c002476e:	90                   	nop
c002476f:	90                   	nop
c0024770:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c0024775:	7e 9f                	jle    c0024716 <tanh+0x76>
c0024777:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002477b:	dd 1c 24             	fstp   QWORD PTR [esp]
c002477e:	e8 8d fa ff ff       	call   c0024210 <fabs>
c0024783:	d8 c0                	fadd   st,st(0)
c0024785:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024788:	e8 f3 f5 ff ff       	call   c0023d80 <expm1>
c002478d:	d9 05 80 9f 02 c0    	fld    DWORD PTR ds:0xc0029f80
c0024793:	dc c1                	fadd   st(1),st
c0024795:	de f1                	fdivrp st(1),st
c0024797:	d8 2d 10 9f 02 c0    	fsubr  DWORD PTR ds:0xc0029f10
c002479d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00247a1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00247a5:	eb ab                	jmp    c0024752 <tanh+0xb2>
c00247a7:	66 90                	xchg   ax,ax
c00247a9:	66 90                	xchg   ax,ax
c00247ab:	66 90                	xchg   ax,ax
c00247ad:	66 90                	xchg   ax,ax
c00247af:	90                   	nop

c00247b0 <cimag>:
c00247b0:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c00247b4:	c3                   	ret    
c00247b5:	66 90                	xchg   ax,ax
c00247b7:	66 90                	xchg   ax,ax
c00247b9:	66 90                	xchg   ax,ax
c00247bb:	66 90                	xchg   ax,ax
c00247bd:	66 90                	xchg   ax,ax
c00247bf:	90                   	nop

c00247c0 <creal>:
c00247c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00247c4:	c3                   	ret    
c00247c5:	66 90                	xchg   ax,ax
c00247c7:	90                   	nop

c00247c8 <exp>:
c00247c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00247cc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00247d1:	3d 00 00 f0 7f       	cmp    eax,0x7ff00000
c00247d6:	73 42                	jae    c002481a <x_Inf_or_NaN>
c00247d8:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00247dc:	9b d9 7c 24 04       	fstcw  WORD PTR [esp+0x4]
c00247e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00247e5:	25 00 03 00 00       	and    eax,0x300
c00247ea:	3d 00 03 00 00       	cmp    eax,0x300
c00247ef:	74 0c                	je     c00247fd <exp+0x35>
c00247f1:	c7 44 24 08 7f 13 00 00 	mov    DWORD PTR [esp+0x8],0x137f
c00247f9:	d9 6c 24 08          	fldcw  WORD PTR [esp+0x8]
c00247fd:	d9 ea                	fldl2e 
c00247ff:	de c9                	fmulp  st(1),st
c0024801:	dd d1                	fst    st(1)
c0024803:	d9 fc                	frndint 
c0024805:	dd d2                	fst    st(2)
c0024807:	de e9                	fsubp  st(1),st
c0024809:	d9 f0                	f2xm1  
c002480b:	d9 e8                	fld1   
c002480d:	de c1                	faddp  st(1),st
c002480f:	d9 fd                	fscale 
c0024811:	dd d9                	fstp   st(1)
c0024813:	74 04                	je     c0024819 <exp+0x51>
c0024815:	d9 6c 24 04          	fldcw  WORD PTR [esp+0x4]
c0024819:	c3                   	ret    

c002481a <x_Inf_or_NaN>:
c002481a:	81 7c 24 08 00 00 f0 ff 	cmp    DWORD PTR [esp+0x8],0xfff00000
c0024822:	75 0a                	jne    c002482e <x_not_minus_Inf>
c0024824:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0024829:	75 03                	jne    c002482e <x_not_minus_Inf>
c002482b:	d9 ee                	fldz   
c002482d:	c3                   	ret    

c002482e <x_not_minus_Inf>:
c002482e:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024832:	c3                   	ret    
c0024833:	90                   	nop

c0024834 <fmod>:
c0024834:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0024838:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002483c:	d9 f8                	fprem  
c002483e:	9b df e0             	fstsw  ax
c0024841:	9e                   	sahf   
c0024842:	7a f8                	jp     c002483c <fmod+0x8>
c0024844:	dd d9                	fstp   st(1)
c0024846:	c3                   	ret    
c0024847:	90                   	nop

c0024848 <log>:
c0024848:	d9 ed                	fldln2 
c002484a:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002484e:	d9 f1                	fyl2x  
c0024850:	c3                   	ret    
c0024851:	66 90                	xchg   ax,ax
c0024853:	90                   	nop

c0024854 <log10>:
c0024854:	d9 ec                	fldlg2 
c0024856:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002485a:	d9 f1                	fyl2x  
c002485c:	c3                   	ret    
c002485d:	66 90                	xchg   ax,ax
c002485f:	90                   	nop

c0024860 <sqrt>:
c0024860:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024864:	d9 fa                	fsqrt  
c0024866:	c3                   	ret    
c0024867:	90                   	nop

c0024868 <ceil>:
c0024868:	55                   	push   ebp
c0024869:	89 e5                	mov    ebp,esp
c002486b:	83 ec 08             	sub    esp,0x8
c002486e:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c0024872:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0024876:	66 81 ca 00 08       	or     dx,0x800
c002487b:	66 81 e2 ff fb       	and    dx,0xfbff
c0024880:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0024884:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0024887:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c002488a:	d9 fc                	frndint 
c002488c:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c002488f:	c9                   	leave  
c0024890:	c3                   	ret    
c0024891:	66 90                	xchg   ax,ax
c0024893:	90                   	nop

c0024894 <floor>:
c0024894:	55                   	push   ebp
c0024895:	89 e5                	mov    ebp,esp
c0024897:	83 ec 08             	sub    esp,0x8
c002489a:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c002489e:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c00248a2:	66 81 ca 00 04       	or     dx,0x400
c00248a7:	66 81 e2 ff f7       	and    dx,0xf7ff
c00248ac:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c00248b0:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c00248b3:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c00248b6:	d9 fc                	frndint 
c00248b8:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c00248bb:	c9                   	leave  
c00248bc:	c3                   	ret    
c00248bd:	66 90                	xchg   ax,ax
c00248bf:	90                   	nop

c00248c0 <tan>:
c00248c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00248c4:	d9 f2                	fptan  
c00248c6:	df e0                	fnstsw ax
c00248c8:	66 25 00 04          	and    ax,0x400
c00248cc:	75 03                	jne    c00248d1 <tan+0x11>
c00248ce:	dd d8                	fstp   st(0)
c00248d0:	c3                   	ret    
c00248d1:	d9 eb                	fldpi  
c00248d3:	d8 c0                	fadd   st,st(0)
c00248d5:	d9 c9                	fxch   st(1)
c00248d7:	d9 f5                	fprem1 
c00248d9:	9b df e0             	fstsw  ax
c00248dc:	66 25 00 04          	and    ax,0x400
c00248e0:	75 f5                	jne    c00248d7 <tan+0x17>
c00248e2:	dd d9                	fstp   st(1)
c00248e4:	d9 f2                	fptan  
c00248e6:	dd d8                	fstp   st(0)
c00248e8:	c3                   	ret    
c00248e9:	66 90                	xchg   ax,ax
c00248eb:	90                   	nop

c00248ec <ldexp>:
c00248ec:	db 44 24 0c          	fild   DWORD PTR [esp+0xc]
c00248f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00248f4:	d9 fd                	fscale 
c00248f6:	dd d9                	fstp   st(1)
c00248f8:	c3                   	ret    
c00248f9:	66 90                	xchg   ax,ax
c00248fb:	66 90                	xchg   ax,ax
c00248fd:	66 90                	xchg   ax,ax
c00248ff:	90                   	nop

c0024900 <__ieee754_rem_pio2>:
c0024900:	56                   	push   esi
c0024901:	53                   	push   ebx
c0024902:	83 ec 74             	sub    esp,0x74
c0024905:	dd 84 24 80 00 00 00 	fld    QWORD PTR [esp+0x80]
c002490c:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0024913:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c0024917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002491b:	89 f2                	mov    edx,esi
c002491d:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024923:	81 fa 7a 6a 0f 40    	cmp    edx,0x400f6a7a
c0024929:	7f 65                	jg     c0024990 <__ieee754_rem_pio2+0x90>
c002492b:	89 f0                	mov    eax,esi
c002492d:	25 ff ff 0f 00       	and    eax,0xfffff
c0024932:	3d fb 21 09 00       	cmp    eax,0x921fb
c0024937:	0f 84 57 02 00 00    	je     c0024b94 <__ieee754_rem_pio2+0x294>
c002493d:	81 fa 7c d9 02 40    	cmp    edx,0x4002d97c
c0024943:	0f 8f b7 01 00 00    	jg     c0024b00 <__ieee754_rem_pio2+0x200>
c0024949:	85 f6                	test   esi,esi
c002494b:	0f 8e 3a 04 00 00    	jle    c0024d8b <__ieee754_rem_pio2+0x48b>
c0024951:	dc 25 b8 a1 02 c0    	fsub   QWORD PTR ds:0xc002a1b8
c0024957:	b8 01 00 00 00       	mov    eax,0x1
c002495c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024960:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024964:	dd 05 c0 a1 02 c0    	fld    QWORD PTR ds:0xc002a1c0
c002496a:	d9 c1                	fld    st(1)
c002496c:	d8 e1                	fsub   st,st(1)
c002496e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024972:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024976:	dd 13                	fst    QWORD PTR [ebx]
c0024978:	de ea                	fsubp  st(2),st
c002497a:	de e9                	fsubp  st(1),st
c002497c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002497f:	83 c4 74             	add    esp,0x74
c0024982:	5b                   	pop    ebx
c0024983:	5e                   	pop    esi
c0024984:	c3                   	ret    
c0024985:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024990:	dd d8                	fstp   st(0)
c0024992:	81 fa 3b 46 1c 40    	cmp    edx,0x401c463b
c0024998:	7f 66                	jg     c0024a00 <__ieee754_rem_pio2+0x100>
c002499a:	81 fa bc fd 15 40    	cmp    edx,0x4015fdbc
c00249a0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00249a4:	0f 8f 96 01 00 00    	jg     c0024b40 <__ieee754_rem_pio2+0x240>
c00249aa:	81 fa 7c d9 12 40    	cmp    edx,0x4012d97c
c00249b0:	0f 84 de 01 00 00    	je     c0024b94 <__ieee754_rem_pio2+0x294>
c00249b6:	85 f6                	test   esi,esi
c00249b8:	0f 8e 00 04 00 00    	jle    c0024dbe <__ieee754_rem_pio2+0x4be>
c00249be:	dc 25 d8 a1 02 c0    	fsub   QWORD PTR ds:0xc002a1d8
c00249c4:	b8 03 00 00 00       	mov    eax,0x3
c00249c9:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00249cd:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00249d1:	db 2d 20 a2 02 c0    	fld    TBYTE PTR ds:0xc002a220
c00249d7:	d9 c1                	fld    st(1)
c00249d9:	d8 e1                	fsub   st,st(1)
c00249db:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00249df:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00249e3:	dd 13                	fst    QWORD PTR [ebx]
c00249e5:	de ea                	fsubp  st(2),st
c00249e7:	de e9                	fsubp  st(1),st
c00249e9:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00249ec:	83 c4 74             	add    esp,0x74
c00249ef:	5b                   	pop    ebx
c00249f0:	5e                   	pop    esi
c00249f1:	c3                   	ret    
c00249f2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00249f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024a00:	81 fa fa 21 39 41    	cmp    edx,0x413921fa
c0024a06:	0f 8e 84 01 00 00    	jle    c0024b90 <__ieee754_rem_pio2+0x290>
c0024a0c:	81 fa ff ff ef 7f    	cmp    edx,0x7fefffff
c0024a12:	0f 8f d8 02 00 00    	jg     c0024cf0 <__ieee754_rem_pio2+0x3f0>
c0024a18:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0024a1c:	89 d1                	mov    ecx,edx
c0024a1e:	c1 f9 14             	sar    ecx,0x14
c0024a21:	81 e9 16 04 00 00    	sub    ecx,0x416
c0024a27:	89 c8                	mov    eax,ecx
c0024a29:	c1 e0 14             	shl    eax,0x14
c0024a2c:	29 c2                	sub    edx,eax
c0024a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024a32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024a36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0024a3a:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0024a3f:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024a43:	66 0d 00 0c          	or     ax,0xc00
c0024a47:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0024a4c:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024a50:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0024a54:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024a58:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c0024a5c:	dd 54 24 58          	fst    QWORD PTR [esp+0x58]
c0024a60:	de e9                	fsubp  st(1),st
c0024a62:	d9 05 34 a2 02 c0    	fld    DWORD PTR ds:0xc002a234
c0024a68:	dc c9                	fmul   st(1),st
c0024a6a:	d9 c9                	fxch   st(1)
c0024a6c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a70:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a74:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024a78:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0024a7c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024a80:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c0024a84:	dd 54 24 60          	fst    QWORD PTR [esp+0x60]
c0024a88:	de e9                	fsubp  st(1),st
c0024a8a:	de c9                	fmulp  st(1),st
c0024a8c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a90:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a94:	dd 54 24 68          	fst    QWORD PTR [esp+0x68]
c0024a98:	d9 ee                	fldz   
c0024a9a:	d9 c9                	fxch   st(1)
c0024a9c:	df e9                	fucomip st,st(1)
c0024a9e:	dd d8                	fstp   st(0)
c0024aa0:	0f 8a 8a 02 00 00    	jp     c0024d30 <__ieee754_rem_pio2+0x430>
c0024aa6:	0f 85 84 02 00 00    	jne    c0024d30 <__ieee754_rem_pio2+0x430>
c0024aac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024ab0:	31 c0                	xor    eax,eax
c0024ab2:	85 d2                	test   edx,edx
c0024ab4:	0f 95 c0             	setne  al
c0024ab7:	40                   	inc    eax
c0024ab8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024abc:	8d 44 24 48          	lea    eax,[esp+0x48]
c0024ac0:	ba 01 00 00 00       	mov    edx,0x1
c0024ac5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024ac9:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024acd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024ad1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0024ad5:	89 04 24             	mov    DWORD PTR [esp],eax
c0024ad8:	e8 f3 03 00 00       	call   c0024ed0 <__kernel_rem_pio2>
c0024add:	85 f6                	test   esi,esi
c0024adf:	0f 88 5b 02 00 00    	js     c0024d40 <__ieee754_rem_pio2+0x440>
c0024ae5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024ae9:	dd 1b                	fstp   QWORD PTR [ebx]
c0024aeb:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0024aef:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024af2:	e9 88 fe ff ff       	jmp    c002497f <__ieee754_rem_pio2+0x7f>
c0024af7:	89 f6                	mov    esi,esi
c0024af9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024b00:	85 f6                	test   esi,esi
c0024b02:	0f 8e 50 02 00 00    	jle    c0024d58 <__ieee754_rem_pio2+0x458>
c0024b08:	dc 25 c8 a1 02 c0    	fsub   QWORD PTR ds:0xc002a1c8
c0024b0e:	b8 02 00 00 00       	mov    eax,0x2
c0024b13:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024b17:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024b1b:	dd 05 d0 a1 02 c0    	fld    QWORD PTR ds:0xc002a1d0
c0024b21:	d9 c1                	fld    st(1)
c0024b23:	d8 e1                	fsub   st,st(1)
c0024b25:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024b29:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024b2d:	dd 13                	fst    QWORD PTR [ebx]
c0024b2f:	de ea                	fsubp  st(2),st
c0024b31:	de e9                	fsubp  st(1),st
c0024b33:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024b36:	83 c4 74             	add    esp,0x74
c0024b39:	5b                   	pop    ebx
c0024b3a:	5e                   	pop    esi
c0024b3b:	c3                   	ret    
c0024b3c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024b40:	81 fa fb 21 19 40    	cmp    edx,0x401921fb
c0024b46:	74 4c                	je     c0024b94 <__ieee754_rem_pio2+0x294>
c0024b48:	85 f6                	test   esi,esi
c0024b4a:	0f 8e a1 02 00 00    	jle    c0024df1 <__ieee754_rem_pio2+0x4f1>
c0024b50:	dc 25 e0 a1 02 c0    	fsub   QWORD PTR ds:0xc002a1e0
c0024b56:	b8 04 00 00 00       	mov    eax,0x4
c0024b5b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024b5f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024b63:	dd 05 e8 a1 02 c0    	fld    QWORD PTR ds:0xc002a1e8
c0024b69:	d9 c1                	fld    st(1)
c0024b6b:	d8 e1                	fsub   st,st(1)
c0024b6d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024b71:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024b75:	dd 13                	fst    QWORD PTR [ebx]
c0024b77:	de ea                	fsubp  st(2),st
c0024b79:	de e9                	fsubp  st(1),st
c0024b7b:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024b7e:	83 c4 74             	add    esp,0x74
c0024b81:	5b                   	pop    ebx
c0024b82:	5e                   	pop    esi
c0024b83:	c3                   	ret    
c0024b84:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024b8a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024b90:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024b94:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0024b98:	d9 c0                	fld    st(0)
c0024b9a:	dc 0d f0 a1 02 c0    	fmul   QWORD PTR ds:0xc002a1f0
c0024ba0:	c1 fa 14             	sar    edx,0x14
c0024ba3:	89 d6                	mov    esi,edx
c0024ba5:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0024baa:	d9 05 30 a2 02 c0    	fld    DWORD PTR ds:0xc002a230
c0024bb0:	dc c1                	fadd   st(1),st
c0024bb2:	d9 c9                	fxch   st(1)
c0024bb4:	66 0d 00 0c          	or     ax,0xc00
c0024bb8:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0024bbd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024bc1:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024bc5:	de e1                	fsubrp st(1),st
c0024bc7:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024bcb:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024bcf:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024bd3:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c0024bd7:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024bdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024bdf:	d9 c0                	fld    st(0)
c0024be1:	dc 0d b8 a1 02 c0    	fmul   QWORD PTR ds:0xc002a1b8
c0024be7:	de ea                	fsubp  st(2),st
c0024be9:	d9 c9                	fxch   st(1)
c0024beb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024bef:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024bf3:	d9 c1                	fld    st(1)
c0024bf5:	dc 0d c0 a1 02 c0    	fmul   QWORD PTR ds:0xc002a1c0
c0024bfb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024bff:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c03:	d9 c1                	fld    st(1)
c0024c05:	d8 e1                	fsub   st,st(1)
c0024c07:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0024c0b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024c0f:	c1 e9 14             	shr    ecx,0x14
c0024c12:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024c18:	29 ce                	sub    esi,ecx
c0024c1a:	83 fe 10             	cmp    esi,0x10
c0024c1d:	7f 21                	jg     c0024c40 <__ieee754_rem_pio2+0x340>
c0024c1f:	dd da                	fstp   st(2)
c0024c21:	d9 c9                	fxch   st(1)
c0024c23:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024c27:	dd 1b                	fstp   QWORD PTR [ebx]
c0024c29:	d9 c9                	fxch   st(1)
c0024c2b:	dc 64 24 20          	fsub   QWORD PTR [esp+0x20]
c0024c2f:	de e1                	fsubrp st(1),st
c0024c31:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024c34:	83 c4 74             	add    esp,0x74
c0024c37:	5b                   	pop    ebx
c0024c38:	5e                   	pop    esi
c0024c39:	c3                   	ret    
c0024c3a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024c40:	dd d8                	fstp   st(0)
c0024c42:	d9 c1                	fld    st(1)
c0024c44:	dc 0d f8 a1 02 c0    	fmul   QWORD PTR ds:0xc002a1f8
c0024c4a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c4e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c52:	d9 c1                	fld    st(1)
c0024c54:	d8 e1                	fsub   st,st(1)
c0024c56:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c5a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c5e:	d9 c0                	fld    st(0)
c0024c60:	dc eb                	fsub   st(3),st
c0024c62:	d9 cb                	fxch   st(3)
c0024c64:	de e2                	fsubrp st(2),st
c0024c66:	d9 c3                	fld    st(3)
c0024c68:	dc 0d 00 a2 02 c0    	fmul   QWORD PTR ds:0xc002a200
c0024c6e:	de e2                	fsubrp st(2),st
c0024c70:	d9 c9                	fxch   st(1)
c0024c72:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c7a:	d9 c2                	fld    st(2)
c0024c7c:	d8 e1                	fsub   st,st(1)
c0024c7e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0024c82:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024c86:	c1 e9 14             	shr    ecx,0x14
c0024c89:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024c8f:	29 ca                	sub    edx,ecx
c0024c91:	83 fa 31             	cmp    edx,0x31
c0024c94:	7e 7a                	jle    c0024d10 <__ieee754_rem_pio2+0x410>
c0024c96:	dd d8                	fstp   st(0)
c0024c98:	dd d8                	fstp   st(0)
c0024c9a:	d9 c1                	fld    st(1)
c0024c9c:	dc 0d 08 a2 02 c0    	fmul   QWORD PTR ds:0xc002a208
c0024ca2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024ca6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024caa:	d9 c1                	fld    st(1)
c0024cac:	d8 e1                	fsub   st,st(1)
c0024cae:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024cb2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024cb6:	d9 cb                	fxch   st(3)
c0024cb8:	dc 0d 10 a2 02 c0    	fmul   QWORD PTR ds:0xc002a210
c0024cbe:	d9 ca                	fxch   st(2)
c0024cc0:	d8 e3                	fsub   st,st(3)
c0024cc2:	de e1                	fsubrp st(1),st
c0024cc4:	de e9                	fsubp  st(1),st
c0024cc6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024cca:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024cce:	d9 c1                	fld    st(1)
c0024cd0:	d8 e1                	fsub   st,st(1)
c0024cd2:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0024cd6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024cda:	dd 1b                	fstp   QWORD PTR [ebx]
c0024cdc:	d9 c9                	fxch   st(1)
c0024cde:	e9 48 ff ff ff       	jmp    c0024c2b <__ieee754_rem_pio2+0x32b>
c0024ce3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024ce9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024cf0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024cf4:	31 c0                	xor    eax,eax
c0024cf6:	d8 e0                	fsub   st,st(0)
c0024cf8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024cfc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024d00:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0024d03:	dd 1b                	fstp   QWORD PTR [ebx]
c0024d05:	e9 75 fc ff ff       	jmp    c002497f <__ieee754_rem_pio2+0x7f>
c0024d0a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024d10:	dd da                	fstp   st(2)
c0024d12:	dd da                	fstp   st(2)
c0024d14:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024d18:	dd 1b                	fstp   QWORD PTR [ebx]
c0024d1a:	d9 c9                	fxch   st(1)
c0024d1c:	e9 0a ff ff ff       	jmp    c0024c2b <__ieee754_rem_pio2+0x32b>
c0024d21:	eb 0d                	jmp    c0024d30 <__ieee754_rem_pio2+0x430>
c0024d23:	90                   	nop
c0024d24:	90                   	nop
c0024d25:	90                   	nop
c0024d26:	90                   	nop
c0024d27:	90                   	nop
c0024d28:	90                   	nop
c0024d29:	90                   	nop
c0024d2a:	90                   	nop
c0024d2b:	90                   	nop
c0024d2c:	90                   	nop
c0024d2d:	90                   	nop
c0024d2e:	90                   	nop
c0024d2f:	90                   	nop
c0024d30:	b8 03 00 00 00       	mov    eax,0x3
c0024d35:	e9 7e fd ff ff       	jmp    c0024ab8 <__ieee754_rem_pio2+0x1b8>
c0024d3a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024d40:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024d44:	f7 d8                	neg    eax
c0024d46:	d9 e0                	fchs   
c0024d48:	dd 1b                	fstp   QWORD PTR [ebx]
c0024d4a:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0024d4e:	d9 e0                	fchs   
c0024d50:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024d53:	e9 27 fc ff ff       	jmp    c002497f <__ieee754_rem_pio2+0x7f>
c0024d58:	dc 05 c8 a1 02 c0    	fadd   QWORD PTR ds:0xc002a1c8
c0024d5e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0024d63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024d67:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024d6b:	dd 05 d0 a1 02 c0    	fld    QWORD PTR ds:0xc002a1d0
c0024d71:	d9 c1                	fld    st(1)
c0024d73:	d8 c1                	fadd   st,st(1)
c0024d75:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024d79:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024d7d:	dd 13                	fst    QWORD PTR [ebx]
c0024d7f:	de ea                	fsubp  st(2),st
c0024d81:	de c1                	faddp  st(1),st
c0024d83:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024d86:	e9 f4 fb ff ff       	jmp    c002497f <__ieee754_rem_pio2+0x7f>
c0024d8b:	dc 05 b8 a1 02 c0    	fadd   QWORD PTR ds:0xc002a1b8
c0024d91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024d96:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024d9a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024d9e:	dd 05 c0 a1 02 c0    	fld    QWORD PTR ds:0xc002a1c0
c0024da4:	d9 c1                	fld    st(1)
c0024da6:	d8 c1                	fadd   st,st(1)
c0024da8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024dac:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024db0:	dd 13                	fst    QWORD PTR [ebx]
c0024db2:	de ea                	fsubp  st(2),st
c0024db4:	de c1                	faddp  st(1),st
c0024db6:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024db9:	e9 c1 fb ff ff       	jmp    c002497f <__ieee754_rem_pio2+0x7f>
c0024dbe:	dc 05 d8 a1 02 c0    	fadd   QWORD PTR ds:0xc002a1d8
c0024dc4:	b8 fd ff ff ff       	mov    eax,0xfffffffd
c0024dc9:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024dcd:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024dd1:	db 2d 20 a2 02 c0    	fld    TBYTE PTR ds:0xc002a220
c0024dd7:	d9 c1                	fld    st(1)
c0024dd9:	d8 c1                	fadd   st,st(1)
c0024ddb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024ddf:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024de3:	dd 13                	fst    QWORD PTR [ebx]
c0024de5:	de ea                	fsubp  st(2),st
c0024de7:	de c1                	faddp  st(1),st
c0024de9:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024dec:	e9 8e fb ff ff       	jmp    c002497f <__ieee754_rem_pio2+0x7f>
c0024df1:	dc 05 e0 a1 02 c0    	fadd   QWORD PTR ds:0xc002a1e0
c0024df7:	b8 fc ff ff ff       	mov    eax,0xfffffffc
c0024dfc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024e00:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024e04:	dd 05 e8 a1 02 c0    	fld    QWORD PTR ds:0xc002a1e8
c0024e0a:	d9 c1                	fld    st(1)
c0024e0c:	d8 c1                	fadd   st,st(1)
c0024e0e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024e12:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024e16:	dd 13                	fst    QWORD PTR [ebx]
c0024e18:	de ea                	fsubp  st(2),st
c0024e1a:	de c1                	faddp  st(1),st
c0024e1c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024e1f:	e9 5b fb ff ff       	jmp    c002497f <__ieee754_rem_pio2+0x7f>
c0024e24:	66 90                	xchg   ax,ax
c0024e26:	66 90                	xchg   ax,ax
c0024e28:	66 90                	xchg   ax,ax
c0024e2a:	66 90                	xchg   ax,ax
c0024e2c:	66 90                	xchg   ax,ax
c0024e2e:	66 90                	xchg   ax,ax

c0024e30 <__kernel_cos>:
c0024e30:	83 ec 0c             	sub    esp,0xc
c0024e33:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024e37:	d9 c0                	fld    st(0)
c0024e39:	d8 c9                	fmul   st,st(1)
c0024e3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024e3e:	dd 04 24             	fld    QWORD PTR [esp]
c0024e41:	d9 c0                	fld    st(0)
c0024e43:	d8 c9                	fmul   st,st(1)
c0024e45:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024e48:	dd 04 24             	fld    QWORD PTR [esp]
c0024e4b:	d9 c1                	fld    st(1)
c0024e4d:	d8 0d 14 9f 02 c0    	fmul   DWORD PTR ds:0xc0029f14
c0024e53:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024e56:	dd 04 24             	fld    QWORD PTR [esp]
c0024e59:	d9 e8                	fld1   
c0024e5b:	d9 c0                	fld    st(0)
c0024e5d:	d8 e2                	fsub   st,st(2)
c0024e5f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024e62:	dd 04 24             	fld    QWORD PTR [esp]
c0024e65:	d9 c4                	fld    st(4)
c0024e67:	dc 0d 38 a2 02 c0    	fmul   QWORD PTR ds:0xc002a238
c0024e6d:	dc 05 40 a2 02 c0    	fadd   QWORD PTR ds:0xc002a240
c0024e73:	d8 cd                	fmul   st,st(5)
c0024e75:	dc 25 48 a2 02 c0    	fsub   QWORD PTR ds:0xc002a248
c0024e7b:	d9 cc                	fxch   st(4)
c0024e7d:	d8 c8                	fmul   st,st(0)
c0024e7f:	de cc                	fmulp  st(4),st
c0024e81:	d9 c4                	fld    st(4)
c0024e83:	dc 0d 50 a2 02 c0    	fmul   QWORD PTR ds:0xc002a250
c0024e89:	dc 25 58 a2 02 c0    	fsub   QWORD PTR ds:0xc002a258
c0024e8f:	d8 cd                	fmul   st,st(5)
c0024e91:	dc 05 60 a2 02 c0    	fadd   QWORD PTR ds:0xc002a260
c0024e97:	d8 cd                	fmul   st,st(5)
c0024e99:	de c4                	faddp  st(4),st
c0024e9b:	d9 cb                	fxch   st(3)
c0024e9d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024ea0:	dd 04 24             	fld    QWORD PTR [esp]
c0024ea3:	de cc                	fmulp  st(4),st
c0024ea5:	d9 cc                	fxch   st(4)
c0024ea7:	dc 4c 24 18          	fmul   QWORD PTR [esp+0x18]
c0024eab:	de eb                	fsubp  st(3),st
c0024ead:	d9 cb                	fxch   st(3)
c0024eaf:	d8 e1                	fsub   st,st(1)
c0024eb1:	de e3                	fsubrp st(3),st
c0024eb3:	d9 c9                	fxch   st(1)
c0024eb5:	de c2                	faddp  st(2),st
c0024eb7:	de c1                	faddp  st(1),st
c0024eb9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024ebc:	dd 04 24             	fld    QWORD PTR [esp]
c0024ebf:	83 c4 0c             	add    esp,0xc
c0024ec2:	c3                   	ret    
c0024ec3:	66 90                	xchg   ax,ax
c0024ec5:	66 90                	xchg   ax,ax
c0024ec7:	66 90                	xchg   ax,ax
c0024ec9:	66 90                	xchg   ax,ax
c0024ecb:	66 90                	xchg   ax,ax
c0024ecd:	66 90                	xchg   ax,ax
c0024ecf:	90                   	nop

c0024ed0 <__kernel_rem_pio2>:
c0024ed0:	55                   	push   ebp
c0024ed1:	57                   	push   edi
c0024ed2:	56                   	push   esi
c0024ed3:	53                   	push   ebx
c0024ed4:	81 ec 8c 02 00 00    	sub    esp,0x28c
c0024eda:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0024ee1:	8b 9c 24 a8 02 00 00 	mov    ebx,DWORD PTR [esp+0x2a8]
c0024ee8:	8b 04 85 48 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd52b8]
c0024eef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0024ef3:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0024efa:	48                   	dec    eax
c0024efb:	83 fb ec             	cmp    ebx,0xffffffec
c0024efe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024f02:	0f 8c 44 08 00 00    	jl     c002574c <__kernel_rem_pio2+0x87c>
c0024f08:	8d 4b fd             	lea    ecx,[ebx-0x3]
c0024f0b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
c0024f10:	89 c8                	mov    eax,ecx
c0024f12:	f7 ea                	imul   edx
c0024f14:	c1 f9 1f             	sar    ecx,0x1f
c0024f17:	c1 fa 02             	sar    edx,0x2
c0024f1a:	29 ca                	sub    edx,ecx
c0024f1c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024f20:	8d 42 01             	lea    eax,[edx+0x1]
c0024f23:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0024f2a:	29 d0                	sub    eax,edx
c0024f2c:	c1 e0 03             	shl    eax,0x3
c0024f2f:	01 d8                	add    eax,ebx
c0024f31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024f35:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024f39:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0024f3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f41:	29 c2                	sub    edx,eax
c0024f43:	01 c6                	add    esi,eax
c0024f45:	78 58                	js     c0024f9f <__kernel_rem_pio2+0xcf>
c0024f47:	85 d2                	test   edx,edx
c0024f49:	0f 89 f4 04 00 00    	jns    c0025443 <__kernel_rem_pio2+0x573>
c0024f4f:	8d 5c 16 01          	lea    ebx,[esi+edx*1+0x1]
c0024f53:	b8 00 00 00 00       	mov    eax,0x0
c0024f58:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c0024f5f:	85 db                	test   ebx,ebx
c0024f61:	0f 4f d8             	cmovg  ebx,eax
c0024f64:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024f6a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024f70:	d9 ee                	fldz   
c0024f72:	42                   	inc    edx
c0024f73:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0024f76:	40                   	inc    eax
c0024f77:	39 da                	cmp    edx,ebx
c0024f79:	7c f5                	jl     c0024f70 <__kernel_rem_pio2+0xa0>
c0024f7b:	39 c6                	cmp    esi,eax
c0024f7d:	7c 20                	jl     c0024f9f <__kernel_rem_pio2+0xcf>
c0024f7f:	29 c2                	sub    edx,eax
c0024f81:	c1 e2 02             	shl    edx,0x2
c0024f84:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024f8a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024f90:	db 84 82 80 a2 02 c0 	fild   DWORD PTR [edx+eax*4-0x3ffd5d80]
c0024f97:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0024f9a:	40                   	inc    eax
c0024f9b:	39 c6                	cmp    esi,eax
c0024f9d:	7d f1                	jge    c0024f90 <__kernel_rem_pio2+0xc0>
c0024f9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024fa3:	85 c0                	test   eax,eax
c0024fa5:	78 7c                	js     c0025023 <__kernel_rem_pio2+0x153>
c0024fa7:	8d 2c c5 08 00 00 00 	lea    ebp,[eax*8+0x8]
c0024fae:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0024fb5:	31 db                	xor    ebx,ebx
c0024fb7:	8b 8c 24 a0 02 00 00 	mov    ecx,DWORD PTR [esp+0x2a0]
c0024fbe:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0024fc5:	c1 e0 03             	shl    eax,0x3
c0024fc8:	8d bc 04 98 00 00 00 	lea    edi,[esp+eax*1+0x98]
c0024fcf:	01 c1                	add    ecx,eax
c0024fd1:	eb 0d                	jmp    c0024fe0 <__kernel_rem_pio2+0x110>
c0024fd3:	90                   	nop
c0024fd4:	90                   	nop
c0024fd5:	90                   	nop
c0024fd6:	90                   	nop
c0024fd7:	90                   	nop
c0024fd8:	90                   	nop
c0024fd9:	90                   	nop
c0024fda:	90                   	nop
c0024fdb:	90                   	nop
c0024fdc:	90                   	nop
c0024fdd:	90                   	nop
c0024fde:	90                   	nop
c0024fdf:	90                   	nop
c0024fe0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024fe4:	85 c0                	test   eax,eax
c0024fe6:	0f 88 65 04 00 00    	js     c0025451 <__kernel_rem_pio2+0x581>
c0024fec:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0024ff3:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0024ff6:	d9 ee                	fldz   
c0024ff8:	90                   	nop
c0024ff9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025000:	dd 02                	fld    QWORD PTR [edx]
c0025002:	83 c0 08             	add    eax,0x8
c0025005:	83 ea 08             	sub    edx,0x8
c0025008:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c002500b:	39 c1                	cmp    ecx,eax
c002500d:	de c1                	faddp  st(1),st
c002500f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025013:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025017:	75 e7                	jne    c0025000 <__kernel_rem_pio2+0x130>
c0025019:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c002501c:	83 c3 08             	add    ebx,0x8
c002501f:	39 dd                	cmp    ebp,ebx
c0025021:	75 bd                	jne    c0024fe0 <__kernel_rem_pio2+0x110>
c0025023:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0025027:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002502b:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
c0025032:	8d 7c 04 4c          	lea    edi,[esp+eax*1+0x4c]
c0025036:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c002503a:	8d 44 04 48          	lea    eax,[esp+eax*1+0x48]
c002503e:	8b bc 24 ac 02 00 00 	mov    edi,DWORD PTR [esp+0x2ac]
c0025045:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0025049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002504d:	c1 e0 02             	shl    eax,0x2
c0025050:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025054:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c002505b:	8d 1c f8             	lea    ebx,[eax+edi*8]
c002505e:	b8 18 00 00 00       	mov    eax,0x18
c0025063:	29 e8                	sub    eax,ebp
c0025065:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0025069:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025070:	85 f6                	test   esi,esi
c0025072:	dd 84 f4 e0 01 00 00 	fld    QWORD PTR [esp+esi*8+0x1e0]
c0025079:	7e 6a                	jle    c00250e5 <__kernel_rem_pio2+0x215>
c002507b:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c002507f:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c0025086:	8d 44 f5 f8          	lea    eax,[ebp+esi*8-0x8]
c002508a:	8d 54 24 50          	lea    edx,[esp+0x50]
c002508e:	0f b7 4c 24 46       	movzx  ecx,WORD PTR [esp+0x46]
c0025093:	66 81 c9 00 0c       	or     cx,0xc00
c0025098:	66 89 4c 24 44       	mov    WORD PTR [esp+0x44],cx
c002509d:	eb 03                	jmp    c00250a2 <__kernel_rem_pio2+0x1d2>
c002509f:	90                   	nop
c00250a0:	89 c8                	mov    eax,ecx
c00250a2:	83 c2 04             	add    edx,0x4
c00250a5:	d9 c0                	fld    st(0)
c00250a7:	d8 0d 5c ad 02 c0    	fmul   DWORD PTR ds:0xc002ad5c
c00250ad:	8d 48 f8             	lea    ecx,[eax-0x8]
c00250b0:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00250b4:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c00250b8:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00250bc:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c00250c0:	d9 c0                	fld    st(0)
c00250c2:	d8 0d 34 a2 02 c0    	fmul   DWORD PTR ds:0xc002a234
c00250c8:	de ea                	fsubp  st(2),st
c00250ca:	d9 c9                	fxch   st(1)
c00250cc:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00250d0:	db 5a fc             	fistp  DWORD PTR [edx-0x4]
c00250d3:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00250d7:	39 c5                	cmp    ebp,eax
c00250d9:	dc 00                	fadd   QWORD PTR [eax]
c00250db:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00250df:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00250e3:	75 bb                	jne    c00250a0 <__kernel_rem_pio2+0x1d0>
c00250e5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00250e9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00250ec:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00250f0:	e8 f7 f7 ff ff       	call   c00248ec <ldexp>
c00250f5:	d9 c0                	fld    st(0)
c00250f7:	db 7c 24 10          	fstp   TBYTE PTR [esp+0x10]
c00250fb:	d8 0d 60 ad 02 c0    	fmul   DWORD PTR ds:0xc002ad60
c0025101:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025104:	e8 8b f7 ff ff       	call   c0024894 <floor>
c0025109:	d9 05 64 ad 02 c0    	fld    DWORD PTR ds:0xc002ad64
c002510f:	de c9                	fmulp  st(1),st
c0025111:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0025115:	db 6c 24 10          	fld    TBYTE PTR [esp+0x10]
c0025119:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c002511e:	de e1                	fsubrp st(1),st
c0025120:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025124:	66 0d 00 0c          	or     ax,0xc00
c0025128:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c002512d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025131:	85 ff                	test   edi,edi
c0025133:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025137:	db 54 24 40          	fist   DWORD PTR [esp+0x40]
c002513b:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002513f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0025143:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0025147:	db 44 24 24          	fild   DWORD PTR [esp+0x24]
c002514b:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c002514f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0025153:	de e9                	fsubp  st(1),st
c0025155:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025159:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002515d:	0f 8e 2d 01 00 00    	jle    c0025290 <__kernel_rem_pio2+0x3c0>
c0025163:	8d 7e ff             	lea    edi,[esi-0x1]
c0025166:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c002516b:	8b 44 bc 50          	mov    eax,DWORD PTR [esp+edi*4+0x50]
c002516f:	89 c2                	mov    edx,eax
c0025171:	d3 fa                	sar    edx,cl
c0025173:	01 d5                	add    ebp,edx
c0025175:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0025179:	d3 e2                	shl    edx,cl
c002517b:	b9 17 00 00 00       	mov    ecx,0x17
c0025180:	29 d0                	sub    eax,edx
c0025182:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c0025186:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002518a:	29 f9                	sub    ecx,edi
c002518c:	d3 f8                	sar    eax,cl
c002518e:	89 c5                	mov    ebp,eax
c0025190:	85 ed                	test   ebp,ebp
c0025192:	0f 8f 0e 01 00 00    	jg     c00252a6 <__kernel_rem_pio2+0x3d6>
c0025198:	d9 ee                	fldz   
c002519a:	d9 c9                	fxch   st(1)
c002519c:	db e9                	fucomi st,st(1)
c002519e:	dd d9                	fstp   st(1)
c00251a0:	0f 8a a2 01 00 00    	jp     c0025348 <__kernel_rem_pio2+0x478>
c00251a6:	0f 85 9c 01 00 00    	jne    c0025348 <__kernel_rem_pio2+0x478>
c00251ac:	dd d8                	fstp   st(0)
c00251ae:	8d 7e ff             	lea    edi,[esi-0x1]
c00251b1:	39 7c 24 28          	cmp    DWORD PTR [esp+0x28],edi
c00251b5:	7f 2a                	jg     c00251e1 <__kernel_rem_pio2+0x311>
c00251b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00251bb:	8d 44 b4 4c          	lea    eax,[esp+esi*4+0x4c]
c00251bf:	31 d2                	xor    edx,edx
c00251c1:	eb 0d                	jmp    c00251d0 <__kernel_rem_pio2+0x300>
c00251c3:	90                   	nop
c00251c4:	90                   	nop
c00251c5:	90                   	nop
c00251c6:	90                   	nop
c00251c7:	90                   	nop
c00251c8:	90                   	nop
c00251c9:	90                   	nop
c00251ca:	90                   	nop
c00251cb:	90                   	nop
c00251cc:	90                   	nop
c00251cd:	90                   	nop
c00251ce:	90                   	nop
c00251cf:	90                   	nop
c00251d0:	0b 10                	or     edx,DWORD PTR [eax]
c00251d2:	83 e8 04             	sub    eax,0x4
c00251d5:	39 c1                	cmp    ecx,eax
c00251d7:	75 f7                	jne    c00251d0 <__kernel_rem_pio2+0x300>
c00251d9:	85 d2                	test   edx,edx
c00251db:	0f 85 85 02 00 00    	jne    c0025466 <__kernel_rem_pio2+0x596>
c00251e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00251e5:	8b 4c 84 4c          	mov    ecx,DWORD PTR [esp+eax*4+0x4c]
c00251e9:	85 c9                	test   ecx,ecx
c00251eb:	0f 85 48 02 00 00    	jne    c0025439 <__kernel_rem_pio2+0x569>
c00251f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00251f5:	bf 01 00 00 00       	mov    edi,0x1
c00251fa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025200:	83 e8 04             	sub    eax,0x4
c0025203:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0025206:	47                   	inc    edi
c0025207:	85 d2                	test   edx,edx
c0025209:	74 f5                	je     c0025200 <__kernel_rem_pio2+0x330>
c002520b:	8d 4e 01             	lea    ecx,[esi+0x1]
c002520e:	01 f7                	add    edi,esi
c0025210:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0025217:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c002521e:	01 c6                	add    esi,eax
c0025220:	8d b4 f4 a0 00 00 00 	lea    esi,[esp+esi*8+0xa0]
c0025227:	89 f6                	mov    esi,esi
c0025229:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025234:	db 84 88 80 a2 02 c0 	fild   DWORD PTR [eax+ecx*4-0x3ffd5d80]
c002523b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002523f:	85 c0                	test   eax,eax
c0025241:	dd 1e                	fstp   QWORD PTR [esi]
c0025243:	78 3b                	js     c0025280 <__kernel_rem_pio2+0x3b0>
c0025245:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c002524c:	d9 ee                	fldz   
c002524e:	89 f2                	mov    edx,esi
c0025250:	dd 02                	fld    QWORD PTR [edx]
c0025252:	83 c0 08             	add    eax,0x8
c0025255:	83 ea 08             	sub    edx,0x8
c0025258:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c002525b:	39 c3                	cmp    ebx,eax
c002525d:	de c1                	faddp  st(1),st
c002525f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025263:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025267:	75 e7                	jne    c0025250 <__kernel_rem_pio2+0x380>
c0025269:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c002526d:	41                   	inc    ecx
c002526e:	83 c6 08             	add    esi,0x8
c0025271:	39 cf                	cmp    edi,ecx
c0025273:	7d bb                	jge    c0025230 <__kernel_rem_pio2+0x360>
c0025275:	89 fe                	mov    esi,edi
c0025277:	e9 f4 fd ff ff       	jmp    c0025070 <__kernel_rem_pio2+0x1a0>
c002527c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025280:	d9 ee                	fldz   
c0025282:	83 c6 08             	add    esi,0x8
c0025285:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c0025289:	41                   	inc    ecx
c002528a:	39 cf                	cmp    edi,ecx
c002528c:	7d a2                	jge    c0025230 <__kernel_rem_pio2+0x360>
c002528e:	eb e5                	jmp    c0025275 <__kernel_rem_pio2+0x3a5>
c0025290:	0f 85 8a 01 00 00    	jne    c0025420 <__kernel_rem_pio2+0x550>
c0025296:	8b 6c b4 4c          	mov    ebp,DWORD PTR [esp+esi*4+0x4c]
c002529a:	c1 fd 17             	sar    ebp,0x17
c002529d:	85 ed                	test   ebp,ebp
c002529f:	90                   	nop
c00252a0:	0f 8e f2 fe ff ff    	jle    c0025198 <__kernel_rem_pio2+0x2c8>
c00252a6:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00252aa:	85 f6                	test   esi,esi
c00252ac:	0f 8e d3 04 00 00    	jle    c0025785 <__kernel_rem_pio2+0x8b5>
c00252b2:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00252b6:	85 d2                	test   edx,edx
c00252b8:	0f 85 12 01 00 00    	jne    c00253d0 <__kernel_rem_pio2+0x500>
c00252be:	83 fe 01             	cmp    esi,0x1
c00252c1:	b9 01 00 00 00       	mov    ecx,0x1
c00252c6:	74 15                	je     c00252dd <__kernel_rem_pio2+0x40d>
c00252c8:	8b 54 8c 50          	mov    edx,DWORD PTR [esp+ecx*4+0x50]
c00252cc:	8d 41 01             	lea    eax,[ecx+0x1]
c00252cf:	85 d2                	test   edx,edx
c00252d1:	0f 85 00 01 00 00    	jne    c00253d7 <__kernel_rem_pio2+0x507>
c00252d7:	39 c6                	cmp    esi,eax
c00252d9:	89 c1                	mov    ecx,eax
c00252db:	75 eb                	jne    c00252c8 <__kernel_rem_pio2+0x3f8>
c00252dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00252e1:	85 c0                	test   eax,eax
c00252e3:	7e 16                	jle    c00252fb <__kernel_rem_pio2+0x42b>
c00252e5:	83 f8 01             	cmp    eax,0x1
c00252e8:	0f 84 51 04 00 00    	je     c002573f <__kernel_rem_pio2+0x86f>
c00252ee:	83 f8 02             	cmp    eax,0x2
c00252f1:	75 08                	jne    c00252fb <__kernel_rem_pio2+0x42b>
c00252f3:	81 64 b4 4c ff ff 3f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x3fffff
c00252fb:	83 fd 02             	cmp    ebp,0x2
c00252fe:	0f 85 94 fe ff ff    	jne    c0025198 <__kernel_rem_pio2+0x2c8>
c0025304:	d9 e8                	fld1   
c0025306:	85 d2                	test   edx,edx
c0025308:	de e1                	fsubrp st(1),st
c002530a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002530e:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025312:	0f 84 80 fe ff ff    	je     c0025198 <__kernel_rem_pio2+0x2c8>
c0025318:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002531c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025320:	d9 e8                	fld1   
c0025322:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025325:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025329:	e8 be f5 ff ff       	call   c00248ec <ldexp>
c002532e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025332:	de e1                	fsubrp st(1),st
c0025334:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025338:	d9 ee                	fldz   
c002533a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002533e:	db e9                	fucomi st,st(1)
c0025340:	dd d9                	fstp   st(1)
c0025342:	0f 8b 5e fe ff ff    	jnp    c00251a6 <__kernel_rem_pio2+0x2d6>
c0025348:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002534c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002534f:	89 d8                	mov    eax,ebx
c0025351:	f7 d8                	neg    eax
c0025353:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025357:	e8 90 f5 ff ff       	call   c00248ec <ldexp>
c002535c:	d9 05 34 a2 02 c0    	fld    DWORD PTR ds:0xc002a234
c0025362:	d9 c9                	fxch   st(1)
c0025364:	db f1                	fcomi  st,st(1)
c0025366:	dd d9                	fstp   st(1)
c0025368:	0f 82 94 04 00 00    	jb     c0025802 <__kernel_rem_pio2+0x932>
c002536e:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0025372:	83 c3 18             	add    ebx,0x18
c0025375:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0025379:	d9 c0                	fld    st(0)
c002537b:	d8 0d 5c ad 02 c0    	fmul   DWORD PTR ds:0xc002ad5c
c0025381:	8d 7e 01             	lea    edi,[esi+0x1]
c0025384:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c0025389:	66 0d 00 0c          	or     ax,0xc00
c002538d:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0025392:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025396:	db 5c 24 40          	fistp  DWORD PTR [esp+0x40]
c002539a:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002539e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00253a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00253a6:	db 44 24 1c          	fild   DWORD PTR [esp+0x1c]
c00253aa:	d8 0d 34 a2 02 c0    	fmul   DWORD PTR ds:0xc002a234
c00253b0:	de e9                	fsubp  st(1),st
c00253b2:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00253b6:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c00253ba:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00253be:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c00253c2:	89 d8                	mov    eax,ebx
c00253c4:	e9 be 00 00 00       	jmp    c0025487 <__kernel_rem_pio2+0x5b7>
c00253c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00253d0:	b8 01 00 00 00       	mov    eax,0x1
c00253d5:	31 c9                	xor    ecx,ecx
c00253d7:	bf 00 00 00 01       	mov    edi,0x1000000
c00253dc:	29 d7                	sub    edi,edx
c00253de:	39 c6                	cmp    esi,eax
c00253e0:	89 7c 8c 50          	mov    DWORD PTR [esp+ecx*4+0x50],edi
c00253e4:	7e 30                	jle    c0025416 <__kernel_rem_pio2+0x546>
c00253e6:	8b 4c 84 50          	mov    ecx,DWORD PTR [esp+eax*4+0x50]
c00253ea:	ba ff ff ff 00       	mov    edx,0xffffff
c00253ef:	29 ca                	sub    edx,ecx
c00253f1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00253f5:	40                   	inc    eax
c00253f6:	39 c6                	cmp    esi,eax
c00253f8:	7e 1c                	jle    c0025416 <__kernel_rem_pio2+0x546>
c00253fa:	8d 44 84 50          	lea    eax,[esp+eax*4+0x50]
c00253fe:	b9 ff ff ff 00       	mov    ecx,0xffffff
c0025403:	8d 7c b4 50          	lea    edi,[esp+esi*4+0x50]
c0025407:	89 ca                	mov    edx,ecx
c0025409:	83 c0 04             	add    eax,0x4
c002540c:	2b 50 fc             	sub    edx,DWORD PTR [eax-0x4]
c002540f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0025412:	39 c7                	cmp    edi,eax
c0025414:	75 f1                	jne    c0025407 <__kernel_rem_pio2+0x537>
c0025416:	ba 01 00 00 00       	mov    edx,0x1
c002541b:	e9 bd fe ff ff       	jmp    c00252dd <__kernel_rem_pio2+0x40d>
c0025420:	d9 05 14 9f 02 c0    	fld    DWORD PTR ds:0xc0029f14
c0025426:	d9 c9                	fxch   st(1)
c0025428:	db f1                	fcomi  st,st(1)
c002542a:	dd d9                	fstp   st(1)
c002542c:	0f 83 2a 03 00 00    	jae    c002575c <__kernel_rem_pio2+0x88c>
c0025432:	31 ed                	xor    ebp,ebp
c0025434:	e9 5f fd ff ff       	jmp    c0025198 <__kernel_rem_pio2+0x2c8>
c0025439:	8d 4e 01             	lea    ecx,[esi+0x1]
c002543c:	89 cf                	mov    edi,ecx
c002543e:	e9 cd fd ff ff       	jmp    c0025210 <__kernel_rem_pio2+0x340>
c0025443:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c002544a:	31 c0                	xor    eax,eax
c002544c:	e9 2e fb ff ff       	jmp    c0024f7f <__kernel_rem_pio2+0xaf>
c0025451:	d9 ee                	fldz   
c0025453:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c0025456:	83 c3 08             	add    ebx,0x8
c0025459:	39 dd                	cmp    ebp,ebx
c002545b:	0f 85 7f fb ff ff    	jne    c0024fe0 <__kernel_rem_pio2+0x110>
c0025461:	e9 bd fb ff ff       	jmp    c0025023 <__kernel_rem_pio2+0x153>
c0025466:	8b 5c bc 50          	mov    ebx,DWORD PTR [esp+edi*4+0x50]
c002546a:	83 6c 24 24 18       	sub    DWORD PTR [esp+0x24],0x18
c002546f:	85 db                	test   ebx,ebx
c0025471:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025475:	75 10                	jne    c0025487 <__kernel_rem_pio2+0x5b7>
c0025477:	4f                   	dec    edi
c0025478:	83 e8 18             	sub    eax,0x18
c002547b:	8b 4c bc 50          	mov    ecx,DWORD PTR [esp+edi*4+0x50]
c002547f:	85 c9                	test   ecx,ecx
c0025481:	74 f4                	je     c0025477 <__kernel_rem_pio2+0x5a7>
c0025483:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0025487:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002548b:	d9 e8                	fld1   
c002548d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025490:	e8 57 f4 ff ff       	call   c00248ec <ldexp>
c0025495:	85 ff                	test   edi,edi
c0025497:	0f 88 d2 03 00 00    	js     c002586f <__kernel_rem_pio2+0x99f>
c002549d:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c00254a4:	89 f8                	mov    eax,edi
c00254a6:	8d 76 00             	lea    esi,[esi+0x0]
c00254a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00254b0:	db 44 84 50          	fild   DWORD PTR [esp+eax*4+0x50]
c00254b4:	d8 c9                	fmul   st,st(1)
c00254b6:	dd 1c c6             	fstp   QWORD PTR [esi+eax*8]
c00254b9:	48                   	dec    eax
c00254ba:	d8 0d 5c ad 02 c0    	fmul   DWORD PTR ds:0xc002ad5c
c00254c0:	83 f8 ff             	cmp    eax,0xffffffff
c00254c3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00254c7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00254cb:	75 e3                	jne    c00254b0 <__kernel_rem_pio2+0x5e0>
c00254cd:	dd d8                	fstp   st(0)
c00254cf:	8d 04 fd 00 00 00 00 	lea    eax,[edi*8+0x0]
c00254d6:	31 d2                	xor    edx,edx
c00254d8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00254dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00254e0:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c00254e7:	01 f0                	add    eax,esi
c00254e9:	89 6c 24 20          	mov    DWORD PTR [esp+0x20],ebp
c00254ed:	eb 03                	jmp    c00254f2 <__kernel_rem_pio2+0x622>
c00254ef:	90                   	nop
c00254f0:	89 e8                	mov    eax,ebp
c00254f2:	85 db                	test   ebx,ebx
c00254f4:	0f 88 84 02 00 00    	js     c002577e <__kernel_rem_pio2+0x8ae>
c00254fa:	d9 05 7c ad 02 c0    	fld    DWORD PTR ds:0xc002ad7c
c0025500:	dc 08                	fmul   QWORD PTR [eax]
c0025502:	d8 05 58 ad 02 c0    	fadd   DWORD PTR ds:0xc002ad58
c0025508:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002550c:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025510:	0f 84 d9 00 00 00    	je     c00255ef <__kernel_rem_pio2+0x71f>
c0025516:	85 d2                	test   edx,edx
c0025518:	0f 84 d1 00 00 00    	je     c00255ef <__kernel_rem_pio2+0x71f>
c002551e:	d9 05 68 ad 02 c0    	fld    DWORD PTR ds:0xc002ad68
c0025524:	83 fb 01             	cmp    ebx,0x1
c0025527:	dc 48 08             	fmul   QWORD PTR [eax+0x8]
c002552a:	de c1                	faddp  st(1),st
c002552c:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025530:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025534:	0f 84 b5 00 00 00    	je     c00255ef <__kernel_rem_pio2+0x71f>
c002553a:	83 fa 01             	cmp    edx,0x1
c002553d:	0f 84 ac 00 00 00    	je     c00255ef <__kernel_rem_pio2+0x71f>
c0025543:	d9 05 6c ad 02 c0    	fld    DWORD PTR ds:0xc002ad6c
c0025549:	83 fb 02             	cmp    ebx,0x2
c002554c:	dc 48 10             	fmul   QWORD PTR [eax+0x10]
c002554f:	de c1                	faddp  st(1),st
c0025551:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025555:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025559:	0f 84 90 00 00 00    	je     c00255ef <__kernel_rem_pio2+0x71f>
c002555f:	83 fa 02             	cmp    edx,0x2
c0025562:	0f 84 87 00 00 00    	je     c00255ef <__kernel_rem_pio2+0x71f>
c0025568:	d9 05 70 ad 02 c0    	fld    DWORD PTR ds:0xc002ad70
c002556e:	83 fb 03             	cmp    ebx,0x3
c0025571:	dc 48 18             	fmul   QWORD PTR [eax+0x18]
c0025574:	de c1                	faddp  st(1),st
c0025576:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002557a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002557e:	74 6f                	je     c00255ef <__kernel_rem_pio2+0x71f>
c0025580:	83 fa 03             	cmp    edx,0x3
c0025583:	74 6a                	je     c00255ef <__kernel_rem_pio2+0x71f>
c0025585:	d9 05 74 ad 02 c0    	fld    DWORD PTR ds:0xc002ad74
c002558b:	83 fb 04             	cmp    ebx,0x4
c002558e:	dc 48 20             	fmul   QWORD PTR [eax+0x20]
c0025591:	de c1                	faddp  st(1),st
c0025593:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025597:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002559b:	74 52                	je     c00255ef <__kernel_rem_pio2+0x71f>
c002559d:	83 fa 04             	cmp    edx,0x4
c00255a0:	74 4d                	je     c00255ef <__kernel_rem_pio2+0x71f>
c00255a2:	d9 05 78 ad 02 c0    	fld    DWORD PTR ds:0xc002ad78
c00255a8:	83 fb 05             	cmp    ebx,0x5
c00255ab:	dc 48 28             	fmul   QWORD PTR [eax+0x28]
c00255ae:	de c1                	faddp  st(1),st
c00255b0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00255b4:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00255b8:	74 35                	je     c00255ef <__kernel_rem_pio2+0x71f>
c00255ba:	83 fa 05             	cmp    edx,0x5
c00255bd:	74 30                	je     c00255ef <__kernel_rem_pio2+0x71f>
c00255bf:	dd 05 80 ad 02 c0    	fld    QWORD PTR ds:0xc002ad80
c00255c5:	83 fb 06             	cmp    ebx,0x6
c00255c8:	dc 48 30             	fmul   QWORD PTR [eax+0x30]
c00255cb:	de c1                	faddp  st(1),st
c00255cd:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00255d1:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00255d5:	74 18                	je     c00255ef <__kernel_rem_pio2+0x71f>
c00255d7:	83 fa 06             	cmp    edx,0x6
c00255da:	74 13                	je     c00255ef <__kernel_rem_pio2+0x71f>
c00255dc:	dd 05 88 ad 02 c0    	fld    QWORD PTR ds:0xc002ad88
c00255e2:	dc 48 38             	fmul   QWORD PTR [eax+0x38]
c00255e5:	de c1                	faddp  st(1),st
c00255e7:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00255eb:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00255ef:	dd 1c d1             	fstp   QWORD PTR [ecx+edx*8]
c00255f2:	42                   	inc    edx
c00255f3:	8d 68 f8             	lea    ebp,[eax-0x8]
c00255f6:	39 c6                	cmp    esi,eax
c00255f8:	0f 85 f2 fe ff ff    	jne    c00254f0 <__kernel_rem_pio2+0x620>
c00255fe:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0025606:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002560a:	7f 4f                	jg     c002565b <__kernel_rem_pio2+0x78b>
c002560c:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0025613:	85 c0                	test   eax,eax
c0025615:	0f 8f 71 01 00 00    	jg     c002578c <__kernel_rem_pio2+0x8bc>
c002561b:	75 2c                	jne    c0025649 <__kernel_rem_pio2+0x779>
c002561d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025621:	d9 ee                	fldz   
c0025623:	01 c8                	add    eax,ecx
c0025625:	eb 02                	jmp    c0025629 <__kernel_rem_pio2+0x759>
c0025627:	89 d0                	mov    eax,edx
c0025629:	39 c8                	cmp    eax,ecx
c002562b:	dc 00                	fadd   QWORD PTR [eax]
c002562d:	8d 50 f8             	lea    edx,[eax-0x8]
c0025630:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025634:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025638:	75 ed                	jne    c0025627 <__kernel_rem_pio2+0x757>
c002563a:	85 ed                	test   ebp,ebp
c002563c:	74 02                	je     c0025640 <__kernel_rem_pio2+0x770>
c002563e:	d9 e0                	fchs   
c0025640:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025647:	dd 18                	fstp   QWORD PTR [eax]
c0025649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002564d:	81 c4 8c 02 00 00    	add    esp,0x28c
c0025653:	5b                   	pop    ebx
c0025654:	5e                   	pop    esi
c0025655:	83 e0 07             	and    eax,0x7
c0025658:	5f                   	pop    edi
c0025659:	5d                   	pop    ebp
c002565a:	c3                   	ret    
c002565b:	83 bc 24 b0 02 00 00 03 	cmp    DWORD PTR [esp+0x2b0],0x3
c0025663:	75 e4                	jne    c0025649 <__kernel_rem_pio2+0x779>
c0025665:	85 ff                	test   edi,edi
c0025667:	0f 8e 38 02 00 00    	jle    c00258a5 <__kernel_rem_pio2+0x9d5>
c002566d:	8d 14 fd 00 00 00 00 	lea    edx,[edi*8+0x0]
c0025674:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c002567b:	dd 84 14 40 01 00 00 	fld    QWORD PTR [esp+edx*1+0x140]
c0025682:	8d 44 11 f8          	lea    eax,[ecx+edx*1-0x8]
c0025686:	eb 02                	jmp    c002568a <__kernel_rem_pio2+0x7ba>
c0025688:	89 d0                	mov    eax,edx
c002568a:	dd 00                	fld    QWORD PTR [eax]
c002568c:	8d 50 f8             	lea    edx,[eax-0x8]
c002568f:	39 c1                	cmp    ecx,eax
c0025691:	d9 c1                	fld    st(1)
c0025693:	d9 c1                	fld    st(1)
c0025695:	de c3                	faddp  st(3),st
c0025697:	d9 ca                	fxch   st(2)
c0025699:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002569d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00256a1:	d9 c0                	fld    st(0)
c00256a3:	dc ea                	fsub   st(2),st
c00256a5:	d9 ca                	fxch   st(2)
c00256a7:	de c3                	faddp  st(3),st
c00256a9:	d9 ca                	fxch   st(2)
c00256ab:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00256ae:	d9 c9                	fxch   st(1)
c00256b0:	dd 18                	fstp   QWORD PTR [eax]
c00256b2:	75 d4                	jne    c0025688 <__kernel_rem_pio2+0x7b8>
c00256b4:	dd d8                	fstp   st(0)
c00256b6:	83 ff 01             	cmp    edi,0x1
c00256b9:	0f 8e e6 01 00 00    	jle    c00258a5 <__kernel_rem_pio2+0x9d5>
c00256bf:	c1 e7 03             	shl    edi,0x3
c00256c2:	8d 44 39 f8          	lea    eax,[ecx+edi*1-0x8]
c00256c6:	dd 84 3c 40 01 00 00 	fld    QWORD PTR [esp+edi*1+0x140]
c00256cd:	eb 02                	jmp    c00256d1 <__kernel_rem_pio2+0x801>
c00256cf:	89 d0                	mov    eax,edx
c00256d1:	dd 00                	fld    QWORD PTR [eax]
c00256d3:	8d 50 f8             	lea    edx,[eax-0x8]
c00256d6:	d9 c1                	fld    st(1)
c00256d8:	39 d1                	cmp    ecx,edx
c00256da:	d9 c1                	fld    st(1)
c00256dc:	de c3                	faddp  st(3),st
c00256de:	d9 ca                	fxch   st(2)
c00256e0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00256e4:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00256e8:	d9 c0                	fld    st(0)
c00256ea:	dc ea                	fsub   st(2),st
c00256ec:	d9 ca                	fxch   st(2)
c00256ee:	de c3                	faddp  st(3),st
c00256f0:	d9 ca                	fxch   st(2)
c00256f2:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00256f5:	d9 c9                	fxch   st(1)
c00256f7:	dd 18                	fstp   QWORD PTR [eax]
c00256f9:	75 d4                	jne    c00256cf <__kernel_rem_pio2+0x7ff>
c00256fb:	dd d8                	fstp   st(0)
c00256fd:	d9 ee                	fldz   
c00256ff:	01 f9                	add    ecx,edi
c0025701:	83 e9 08             	sub    ecx,0x8
c0025704:	dc 41 08             	fadd   QWORD PTR [ecx+0x8]
c0025707:	39 c8                	cmp    eax,ecx
c0025709:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002570d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025711:	75 ee                	jne    c0025701 <__kernel_rem_pio2+0x831>
c0025713:	dd 84 24 40 01 00 00 	fld    QWORD PTR [esp+0x140]
c002571a:	85 ed                	test   ebp,ebp
c002571c:	dd 84 24 48 01 00 00 	fld    QWORD PTR [esp+0x148]
c0025723:	0f 85 02 01 00 00    	jne    c002582b <__kernel_rem_pio2+0x95b>
c0025729:	d9 c9                	fxch   st(1)
c002572b:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025732:	dd 18                	fstp   QWORD PTR [eax]
c0025734:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025737:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c002573a:	e9 0a ff ff ff       	jmp    c0025649 <__kernel_rem_pio2+0x779>
c002573f:	81 64 b4 4c ff ff 7f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x7fffff
c0025747:	e9 af fb ff ff       	jmp    c00252fb <__kernel_rem_pio2+0x42b>
c002574c:	31 d2                	xor    edx,edx
c002574e:	b8 e8 ff ff ff       	mov    eax,0xffffffe8
c0025753:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0025757:	e9 d3 f7 ff ff       	jmp    c0024f2f <__kernel_rem_pio2+0x5f>
c002575c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0025760:	85 f6                	test   esi,esi
c0025762:	bd 02 00 00 00       	mov    ebp,0x2
c0025767:	0f 8f 45 fb ff ff    	jg     c00252b2 <__kernel_rem_pio2+0x3e2>
c002576d:	d9 e8                	fld1   
c002576f:	de e1                	fsubrp st(1),st
c0025771:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025775:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025779:	e9 1a fa ff ff       	jmp    c0025198 <__kernel_rem_pio2+0x2c8>
c002577e:	d9 ee                	fldz   
c0025780:	e9 6a fe ff ff       	jmp    c00255ef <__kernel_rem_pio2+0x71f>
c0025785:	31 d2                	xor    edx,edx
c0025787:	e9 51 fb ff ff       	jmp    c00252dd <__kernel_rem_pio2+0x40d>
c002578c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025790:	d9 ee                	fldz   
c0025792:	01 c8                	add    eax,ecx
c0025794:	eb 02                	jmp    c0025798 <__kernel_rem_pio2+0x8c8>
c0025796:	89 d0                	mov    eax,edx
c0025798:	39 c8                	cmp    eax,ecx
c002579a:	dc 00                	fadd   QWORD PTR [eax]
c002579c:	8d 50 f8             	lea    edx,[eax-0x8]
c002579f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00257a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00257a7:	75 ed                	jne    c0025796 <__kernel_rem_pio2+0x8c6>
c00257a9:	d9 c0                	fld    st(0)
c00257ab:	85 ed                	test   ebp,ebp
c00257ad:	0f 85 94 00 00 00    	jne    c0025847 <__kernel_rem_pio2+0x977>
c00257b3:	d9 c9                	fxch   st(1)
c00257b5:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00257bc:	85 ff                	test   edi,edi
c00257be:	dd 18                	fstp   QWORD PTR [eax]
c00257c0:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c00257c7:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00257cb:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00257cf:	7e 22                	jle    c00257f3 <__kernel_rem_pio2+0x923>
c00257d1:	8d 84 24 48 01 00 00 	lea    eax,[esp+0x148]
c00257d8:	8d 14 f8             	lea    edx,[eax+edi*8]
c00257db:	83 c0 08             	add    eax,0x8
c00257de:	dc 40 f8             	fadd   QWORD PTR [eax-0x8]
c00257e1:	39 d0                	cmp    eax,edx
c00257e3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00257e7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00257eb:	75 ee                	jne    c00257db <__kernel_rem_pio2+0x90b>
c00257ed:	85 ed                	test   ebp,ebp
c00257ef:	74 02                	je     c00257f3 <__kernel_rem_pio2+0x923>
c00257f1:	d9 e0                	fchs   
c00257f3:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00257fa:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00257fd:	e9 47 fe ff ff       	jmp    c0025649 <__kernel_rem_pio2+0x779>
c0025802:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0025806:	89 f7                	mov    edi,esi
c0025808:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c002580d:	66 0d 00 0c          	or     ax,0xc00
c0025811:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0025816:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002581a:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c002581e:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c0025822:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0025826:	e9 5c fc ff ff       	jmp    c0025487 <__kernel_rem_pio2+0x5b7>
c002582b:	d9 c9                	fxch   st(1)
c002582d:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025834:	d9 e0                	fchs   
c0025836:	dd 18                	fstp   QWORD PTR [eax]
c0025838:	d9 e0                	fchs   
c002583a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c002583d:	d9 e0                	fchs   
c002583f:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0025842:	e9 02 fe ff ff       	jmp    c0025649 <__kernel_rem_pio2+0x779>
c0025847:	d9 c9                	fxch   st(1)
c0025849:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025850:	d9 e0                	fchs   
c0025852:	85 ff                	test   edi,edi
c0025854:	dd 18                	fstp   QWORD PTR [eax]
c0025856:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c002585d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025861:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025865:	0f 8f 66 ff ff ff    	jg     c00257d1 <__kernel_rem_pio2+0x901>
c002586b:	d9 e0                	fchs   
c002586d:	eb 84                	jmp    c00257f3 <__kernel_rem_pio2+0x923>
c002586f:	dd d8                	fstp   st(0)
c0025871:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0025879:	0f 8f dc fd ff ff    	jg     c002565b <__kernel_rem_pio2+0x78b>
c002587f:	8b 94 24 b0 02 00 00 	mov    edx,DWORD PTR [esp+0x2b0]
c0025886:	85 d2                	test   edx,edx
c0025888:	7f 0d                	jg     c0025897 <__kernel_rem_pio2+0x9c7>
c002588a:	0f 85 b9 fd ff ff    	jne    c0025649 <__kernel_rem_pio2+0x779>
c0025890:	d9 ee                	fldz   
c0025892:	e9 a3 fd ff ff       	jmp    c002563a <__kernel_rem_pio2+0x76a>
c0025897:	d9 ee                	fldz   
c0025899:	d9 ee                	fldz   
c002589b:	90                   	nop
c002589c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00258a0:	e9 06 ff ff ff       	jmp    c00257ab <__kernel_rem_pio2+0x8db>
c00258a5:	d9 ee                	fldz   
c00258a7:	e9 67 fe ff ff       	jmp    c0025713 <__kernel_rem_pio2+0x843>
c00258ac:	66 90                	xchg   ax,ax
c00258ae:	66 90                	xchg   ax,ax

c00258b0 <__kernel_sin>:
c00258b0:	83 ec 0c             	sub    esp,0xc
c00258b3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00258b7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00258bb:	d9 c0                	fld    st(0)
c00258bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00258c1:	d8 c9                	fmul   st,st(1)
c00258c3:	85 c0                	test   eax,eax
c00258c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00258c8:	dd 04 24             	fld    QWORD PTR [esp]
c00258cb:	d9 c1                	fld    st(1)
c00258cd:	d8 c9                	fmul   st,st(1)
c00258cf:	dd 1c 24             	fstp   QWORD PTR [esp]
c00258d2:	dd 04 24             	fld    QWORD PTR [esp]
c00258d5:	d9 c1                	fld    st(1)
c00258d7:	d8 ca                	fmul   st,st(2)
c00258d9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00258dc:	dd 04 24             	fld    QWORD PTR [esp]
c00258df:	d8 ca                	fmul   st,st(2)
c00258e1:	d9 c2                	fld    st(2)
c00258e3:	dc 0d 90 ad 02 c0    	fmul   QWORD PTR ds:0xc002ad90
c00258e9:	dc 25 98 ad 02 c0    	fsub   QWORD PTR ds:0xc002ad98
c00258ef:	de c9                	fmulp  st(1),st
c00258f1:	d9 c2                	fld    st(2)
c00258f3:	dc 0d a0 ad 02 c0    	fmul   QWORD PTR ds:0xc002ada0
c00258f9:	dc 25 a8 ad 02 c0    	fsub   QWORD PTR ds:0xc002ada8
c00258ff:	d8 cb                	fmul   st,st(3)
c0025901:	dc 05 b0 ad 02 c0    	fadd   QWORD PTR ds:0xc002adb0
c0025907:	de c1                	faddp  st(1),st
c0025909:	dd 1c 24             	fstp   QWORD PTR [esp]
c002590c:	dd 04 24             	fld    QWORD PTR [esp]
c002590f:	75 2f                	jne    c0025940 <__kernel_sin+0x90>
c0025911:	dd dc                	fstp   st(4)
c0025913:	d9 c9                	fxch   st(1)
c0025915:	d9 ca                	fxch   st(2)
c0025917:	d9 cb                	fxch   st(3)
c0025919:	de ca                	fmulp  st(2),st
c002591b:	d9 c9                	fxch   st(1)
c002591d:	dc 25 b8 ad 02 c0    	fsub   QWORD PTR ds:0xc002adb8
c0025923:	de c9                	fmulp  st(1),st
c0025925:	de c1                	faddp  st(1),st
c0025927:	dd 1c 24             	fstp   QWORD PTR [esp]
c002592a:	dd 04 24             	fld    QWORD PTR [esp]
c002592d:	83 c4 0c             	add    esp,0xc
c0025930:	c3                   	ret    
c0025931:	eb 0d                	jmp    c0025940 <__kernel_sin+0x90>
c0025933:	90                   	nop
c0025934:	90                   	nop
c0025935:	90                   	nop
c0025936:	90                   	nop
c0025937:	90                   	nop
c0025938:	90                   	nop
c0025939:	90                   	nop
c002593a:	90                   	nop
c002593b:	90                   	nop
c002593c:	90                   	nop
c002593d:	90                   	nop
c002593e:	90                   	nop
c002593f:	90                   	nop
c0025940:	d9 c4                	fld    st(4)
c0025942:	d8 0d 14 9f 02 c0    	fmul   DWORD PTR ds:0xc0029f14
c0025948:	d9 c9                	fxch   st(1)
c002594a:	d8 ca                	fmul   st,st(2)
c002594c:	de e9                	fsubp  st(1),st
c002594e:	de ca                	fmulp  st(2),st
c0025950:	d9 c9                	fxch   st(1)
c0025952:	de e3                	fsubrp st(3),st
c0025954:	dc 0d b8 ad 02 c0    	fmul   QWORD PTR ds:0xc002adb8
c002595a:	de c2                	faddp  st(2),st
c002595c:	de e1                	fsubrp st(1),st
c002595e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025961:	dd 04 24             	fld    QWORD PTR [esp]
c0025964:	83 c4 0c             	add    esp,0xc
c0025967:	c3                   	ret    

Disassembly of section .init:

c0025968 <_init>:
c0025968:	55                   	push   ebp
c0025969:	89 e5                	mov    ebp,esp
c002596b:	e8 84 a7 fd ff       	call   c00000f4 <frame_dummy>
c0025970:	e8 0b c2 ff ff       	call   c0021b80 <__do_global_ctors_aux>
c0025975:	5d                   	pop    ebp
c0025976:	c3                   	ret    

Disassembly of section .fini:

c0025977 <_fini>:
c0025977:	55                   	push   ebp
c0025978:	89 e5                	mov    ebp,esp
c002597a:	e8 05 a7 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002597f:	5d                   	pop    ebp
c0025980:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0025982 <DriverlessDevice::~DriverlessDevice()>:
c0025982:	ba fc 73 02 c0       	mov    edx,0xc00273fc
c0025987:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002598b:	89 10                	mov    DWORD PTR [eax],edx
c002598d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025991:	50                   	push   eax
c0025992:	e8 bf 3f fe ff       	call   c0009956 <Device::~Device()>
c0025997:	83 c4 04             	add    esp,0x4
c002599a:	90                   	nop
c002599b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002599c <DriverlessDevice::~DriverlessDevice()>:
c002599c:	83 ec 0c             	sub    esp,0xc
c002599f:	83 ec 0c             	sub    esp,0xc
c00259a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259a6:	e8 d7 ff ff ff       	call   c0025982 <DriverlessDevice::~DriverlessDevice()>
c00259ab:	83 c4 10             	add    esp,0x10
c00259ae:	83 ec 08             	sub    esp,0x8
c00259b1:	68 58 01 00 00       	push   0x158
c00259b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259ba:	e8 bd 79 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c00259bf:	83 c4 10             	add    esp,0x10
c00259c2:	83 c4 0c             	add    esp,0xc
c00259c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00259c6 <LinkedList<Device>::addElement(Device*)>:
c00259c6:	83 ec 0c             	sub    esp,0xc
c00259c9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00259ce:	75 10                	jne    c00259e0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00259d0:	83 ec 0c             	sub    esp,0xc
c00259d3:	68 90 73 02 c0       	push   0xc0027390
c00259d8:	e8 db a2 fe ff       	call   c000fcb8 <KePanic(char const*)>
c00259dd:	83 c4 10             	add    esp,0x10
c00259e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00259e6:	85 c0                	test   eax,eax
c00259e8:	74 3a                	je     c0025a24 <LinkedList<Device>::addElement(Device*)+0x5e>
c00259ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00259f1:	85 c0                	test   eax,eax
c00259f3:	74 2f                	je     c0025a24 <LinkedList<Device>::addElement(Device*)+0x5e>
c00259f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00259fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a00:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0025a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a0e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a18:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025a22:	eb 68                	jmp    c0025a8c <LinkedList<Device>::addElement(Device*)+0xc6>
c0025a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a2a:	85 c0                	test   eax,eax
c0025a2c:	75 4e                	jne    c0025a7c <LinkedList<Device>::addElement(Device*)+0xb6>
c0025a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a35:	85 c0                	test   eax,eax
c0025a37:	75 43                	jne    c0025a7c <LinkedList<Device>::addElement(Device*)+0xb6>
c0025a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a41:	89 10                	mov    DWORD PTR [eax],edx
c0025a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a4b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a55:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025a5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025a66:	85 c0                	test   eax,eax
c0025a68:	74 22                	je     c0025a8c <LinkedList<Device>::addElement(Device*)+0xc6>
c0025a6a:	83 ec 0c             	sub    esp,0xc
c0025a6d:	68 b2 73 02 c0       	push   0xc00273b2
c0025a72:	e8 41 a2 fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025a77:	83 c4 10             	add    esp,0x10
c0025a7a:	eb 10                	jmp    c0025a8c <LinkedList<Device>::addElement(Device*)+0xc6>
c0025a7c:	83 ec 0c             	sub    esp,0xc
c0025a7f:	68 bc 73 02 c0       	push   0xc00273bc
c0025a84:	e8 2f a2 fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025a89:	83 c4 10             	add    esp,0x10
c0025a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a90:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025a93:	8d 50 01             	lea    edx,[eax+0x1]
c0025a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a9a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025a9d:	90                   	nop
c0025a9e:	83 c4 0c             	add    esp,0xc
c0025aa1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025aa2 <LinkedList<Device>::LinkedList()>:
c0025aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025aa6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ab0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025abb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ac6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ad0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025ad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025adb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025ae2:	90                   	nop
c0025ae3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0025ae4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0025ae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ae8:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aea:	85 c0                	test   eax,eax
c0025aec:	75 0e                	jne    c0025afc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025aee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025af2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025af5:	85 c0                	test   eax,eax
c0025af7:	75 03                	jne    c0025afc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025af9:	b0 01                	mov    al,0x1
c0025afb:	c3                   	ret    
c0025afc:	b0 00                	mov    al,0x0
c0025afe:	90                   	nop
c0025aff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0025b00 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0025b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b06:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025b08 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025b08:	83 ec 0c             	sub    esp,0xc
c0025b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b11:	85 c0                	test   eax,eax
c0025b13:	75 17                	jne    c0025b2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0025b15:	83 ec 0c             	sub    esp,0xc
c0025b18:	68 2c 76 02 c0       	push   0xc002762c
c0025b1d:	e8 96 a1 fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025b22:	83 c4 10             	add    esp,0x10
c0025b25:	e9 96 00 00 00       	jmp    c0025bc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0025b2a:	66 90                	xchg   ax,ax
c0025b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025b33:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025b36:	85 c0                	test   eax,eax
c0025b38:	0f 95 c0             	setne  al
c0025b3b:	0f b6 c0             	movzx  eax,al
c0025b3e:	85 c0                	test   eax,eax
c0025b40:	74 12                	je     c0025b54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0025b42:	83 ec 0c             	sub    esp,0xc
c0025b45:	68 77 76 02 c0       	push   0xc0027677
c0025b4a:	e8 69 a1 fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025b4f:	83 c4 10             	add    esp,0x10
c0025b52:	66 90                	xchg   ax,ax
c0025b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b5a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025b5d:	85 c0                	test   eax,eax
c0025b5f:	0f 94 c0             	sete   al
c0025b62:	0f b6 c0             	movzx  eax,al
c0025b65:	85 c0                	test   eax,eax
c0025b67:	74 33                	je     c0025b9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0025b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025b85:	83 f8 01             	cmp    eax,0x1
c0025b88:	74 22                	je     c0025bac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0025b8a:	83 ec 0c             	sub    esp,0xc
c0025b8d:	68 50 76 02 c0       	push   0xc0027650
c0025b92:	e8 21 a1 fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025b97:	83 c4 10             	add    esp,0x10
c0025b9a:	eb 10                	jmp    c0025bac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0025b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ba2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ba9:	89 10                	mov    DWORD PTR [eax],edx
c0025bab:	90                   	nop
c0025bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bb0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025bb3:	8d 50 ff             	lea    edx,[eax-0x1]
c0025bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0025bc0:	83 c4 0c             	add    esp,0xc
c0025bc3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0025bc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0025bc4:	83 ec 0c             	sub    esp,0xc
c0025bc7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025bcc:	75 12                	jne    c0025be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0025bce:	83 ec 0c             	sub    esp,0xc
c0025bd1:	68 90 73 02 c0       	push   0xc0027390
c0025bd6:	e8 dd a0 fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025bdb:	83 c4 10             	add    esp,0x10
c0025bde:	66 90                	xchg   ax,ax
c0025be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0025be6:	85 c0                	test   eax,eax
c0025be8:	74 36                	je     c0025c20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0025bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025bf1:	85 c0                	test   eax,eax
c0025bf3:	74 2b                	je     c0025c20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0025bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025bfc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025c00:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0025c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025c0b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025c15:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025c1c:	eb 6a                	jmp    c0025c88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0025c1e:	66 90                	xchg   ax,ax
c0025c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c26:	85 c0                	test   eax,eax
c0025c28:	75 4e                	jne    c0025c78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0025c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025c31:	85 c0                	test   eax,eax
c0025c33:	75 43                	jne    c0025c78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0025c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025c3d:	89 10                	mov    DWORD PTR [eax],edx
c0025c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025c47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025c51:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025c5f:	85 c0                	test   eax,eax
c0025c61:	74 25                	je     c0025c88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0025c63:	83 ec 0c             	sub    esp,0xc
c0025c66:	68 b2 73 02 c0       	push   0xc00273b2
c0025c6b:	e8 48 a0 fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025c70:	83 c4 10             	add    esp,0x10
c0025c73:	eb 13                	jmp    c0025c88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0025c75:	8d 76 00             	lea    esi,[esi+0x0]
c0025c78:	83 ec 0c             	sub    esp,0xc
c0025c7b:	68 bc 73 02 c0       	push   0xc00273bc
c0025c80:	e8 33 a0 fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025c85:	83 c4 10             	add    esp,0x10
c0025c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025c8f:	8d 50 01             	lea    edx,[eax+0x1]
c0025c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025c99:	90                   	nop
c0025c9a:	83 c4 0c             	add    esp,0xc
c0025c9d:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025ca0 <ACPI::~ACPI()>:
c0025ca0:	83 ec 0c             	sub    esp,0xc
c0025ca3:	ba ac 7a 02 c0       	mov    edx,0xc0027aac
c0025ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cac:	89 10                	mov    DWORD PTR [eax],edx
c0025cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cb2:	83 ec 0c             	sub    esp,0xc
c0025cb5:	50                   	push   eax
c0025cb6:	e8 9b 3c fe ff       	call   c0009956 <Device::~Device()>
c0025cbb:	83 c4 10             	add    esp,0x10
c0025cbe:	90                   	nop
c0025cbf:	83 c4 0c             	add    esp,0xc
c0025cc2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0025cc4 <ACPI::~ACPI()>:
c0025cc4:	83 ec 0c             	sub    esp,0xc
c0025cc7:	83 ec 0c             	sub    esp,0xc
c0025cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cce:	e8 cd ff ff ff       	call   c0025ca0 <ACPI::~ACPI()>
c0025cd3:	83 c4 10             	add    esp,0x10
c0025cd6:	83 ec 08             	sub    esp,0x8
c0025cd9:	68 64 12 00 00       	push   0x1264
c0025cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ce2:	e8 95 76 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c0025ce7:	83 c4 10             	add    esp,0x10
c0025cea:	83 c4 0c             	add    esp,0xc
c0025ced:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0025cf0 <LinkedList<Device>::~LinkedList()>:
c0025cf0:	90                   	nop
c0025cf1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0025cf4 <LinkedList<Device>::isEmpty()>:
c0025cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cfa:	85 c0                	test   eax,eax
c0025cfc:	75 0e                	jne    c0025d0c <LinkedList<Device>::isEmpty()+0x18>
c0025cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025d05:	85 c0                	test   eax,eax
c0025d07:	75 03                	jne    c0025d0c <LinkedList<Device>::isEmpty()+0x18>
c0025d09:	b0 01                	mov    al,0x1
c0025d0b:	c3                   	ret    
c0025d0c:	b0 00                	mov    al,0x0
c0025d0e:	90                   	nop
c0025d0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0025d10 <LinkedList<Device>::getFirstElement()>:
c0025d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d16:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0025d18 <LinkedList<Device>::removeFirst()>:
c0025d18:	83 ec 0c             	sub    esp,0xc
c0025d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d21:	85 c0                	test   eax,eax
c0025d23:	75 17                	jne    c0025d3c <LinkedList<Device>::removeFirst()+0x24>
c0025d25:	83 ec 0c             	sub    esp,0xc
c0025d28:	68 2c 76 02 c0       	push   0xc002762c
c0025d2d:	e8 86 9f fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025d32:	83 c4 10             	add    esp,0x10
c0025d35:	e9 92 00 00 00       	jmp    c0025dcc <LinkedList<Device>::removeFirst()+0xb4>
c0025d3a:	66 90                	xchg   ax,ax
c0025d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025d43:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0025d49:	85 c0                	test   eax,eax
c0025d4b:	74 13                	je     c0025d60 <LinkedList<Device>::removeFirst()+0x48>
c0025d4d:	83 ec 0c             	sub    esp,0xc
c0025d50:	68 77 76 02 c0       	push   0xc0027677
c0025d55:	e8 5e 9f fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025d5a:	83 c4 10             	add    esp,0x10
c0025d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0025d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d64:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d66:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0025d6c:	85 c0                	test   eax,eax
c0025d6e:	75 34                	jne    c0025da4 <LinkedList<Device>::removeFirst()+0x8c>
c0025d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d74:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d7e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025d8c:	83 f8 01             	cmp    eax,0x1
c0025d8f:	74 27                	je     c0025db8 <LinkedList<Device>::removeFirst()+0xa0>
c0025d91:	83 ec 0c             	sub    esp,0xc
c0025d94:	68 50 76 02 c0       	push   0xc0027650
c0025d99:	e8 1a 9f fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025d9e:	83 c4 10             	add    esp,0x10
c0025da1:	eb 15                	jmp    c0025db8 <LinkedList<Device>::removeFirst()+0xa0>
c0025da3:	90                   	nop
c0025da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025da8:	8b 00                	mov    eax,DWORD PTR [eax]
c0025daa:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0025db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025db4:	89 10                	mov    DWORD PTR [eax],edx
c0025db6:	66 90                	xchg   ax,ax
c0025db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025dbf:	8d 50 ff             	lea    edx,[eax-0x1]
c0025dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dc6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0025dcc:	83 c4 0c             	add    esp,0xc
c0025dcf:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025dd0 <Computer::~Computer()>:
c0025dd0:	83 ec 0c             	sub    esp,0xc
c0025dd3:	ba 24 7c 02 c0       	mov    edx,0xc0027c24
c0025dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ddc:	89 10                	mov    DWORD PTR [eax],edx
c0025dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025de2:	83 ec 0c             	sub    esp,0xc
c0025de5:	50                   	push   eax
c0025de6:	e8 6b 3b fe ff       	call   c0009956 <Device::~Device()>
c0025deb:	83 c4 10             	add    esp,0x10
c0025dee:	90                   	nop
c0025def:	83 c4 0c             	add    esp,0xc
c0025df2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025df4 <Computer::~Computer()>:
c0025df4:	83 ec 0c             	sub    esp,0xc
c0025df7:	83 ec 0c             	sub    esp,0xc
c0025dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025dfe:	e8 cd ff ff ff       	call   c0025dd0 <Computer::~Computer()>
c0025e03:	83 c4 10             	add    esp,0x10
c0025e06:	83 ec 08             	sub    esp,0x8
c0025e09:	68 68 01 00 00       	push   0x168
c0025e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e12:	e8 65 75 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c0025e17:	83 c4 10             	add    esp,0x10
c0025e1a:	83 c4 0c             	add    esp,0xc
c0025e1d:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0025e1e <idleCommon()>:
c0025e1e:	83 ec 0c             	sub    esp,0xc
c0025e21:	fa                   	cli    
c0025e22:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c0025e28:	e8 13 0a ff ff       	call   c0016840 <schedule()>
c0025e2d:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0025e34:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c0025e3b:	75 01                	jne    c0025e3e <idleCommon()+0x20>
c0025e3d:	fb                   	sti    
c0025e3e:	83 c4 0c             	add    esp,0xc
c0025e41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025e42 <LinkedList<UnixFile>::~LinkedList()>:
c0025e42:	90                   	nop
c0025e43:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025e44 <LinkedList<UnixFile>::LinkedList()>:
c0025e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025e4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e52:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025e59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e5d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025e64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025e6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025e79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e7d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025e84:	90                   	nop
c0025e85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0025e86 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0025e86:	83 ec 0c             	sub    esp,0xc
c0025e89:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025e8e:	75 10                	jne    c0025ea0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0025e90:	83 ec 0c             	sub    esp,0xc
c0025e93:	68 90 73 02 c0       	push   0xc0027390
c0025e98:	e8 1b 9e fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025e9d:	83 c4 10             	add    esp,0x10
c0025ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea4:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ea6:	85 c0                	test   eax,eax
c0025ea8:	74 34                	je     c0025ede <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025eb1:	85 c0                	test   eax,eax
c0025eb3:	74 29                	je     c0025ede <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025ebc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025ec0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025ecb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025ed5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025edc:	eb 65                	jmp    c0025f43 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ee4:	85 c0                	test   eax,eax
c0025ee6:	75 4b                	jne    c0025f33 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025eef:	85 c0                	test   eax,eax
c0025ef1:	75 40                	jne    c0025f33 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025efb:	89 10                	mov    DWORD PTR [eax],edx
c0025efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025f05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025f0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025f1d:	85 c0                	test   eax,eax
c0025f1f:	74 22                	je     c0025f43 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025f21:	83 ec 0c             	sub    esp,0xc
c0025f24:	68 b2 73 02 c0       	push   0xc00273b2
c0025f29:	e8 8a 9d fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025f2e:	83 c4 10             	add    esp,0x10
c0025f31:	eb 10                	jmp    c0025f43 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025f33:	83 ec 0c             	sub    esp,0xc
c0025f36:	68 bc 73 02 c0       	push   0xc00273bc
c0025f3b:	e8 78 9d fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025f40:	83 c4 10             	add    esp,0x10
c0025f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025f4a:	8d 50 01             	lea    edx,[eax+0x1]
c0025f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f51:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025f54:	90                   	nop
c0025f55:	83 c4 0c             	add    esp,0xc
c0025f58:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0025f5a <LinkedList<UnixFile>::getFirstElement()>:
c0025f5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025f5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f60:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0025f62 <LinkedList<UnixFile>::removeFirst()>:
c0025f62:	83 ec 0c             	sub    esp,0xc
c0025f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f6b:	85 c0                	test   eax,eax
c0025f6d:	75 12                	jne    c0025f81 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0025f6f:	83 ec 0c             	sub    esp,0xc
c0025f72:	68 2c 76 02 c0       	push   0xc002762c
c0025f77:	e8 3c 9d fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025f7c:	83 c4 10             	add    esp,0x10
c0025f7f:	eb 7e                	jmp    c0025fff <LinkedList<UnixFile>::removeFirst()+0x9d>
c0025f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025f88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025f8b:	85 c0                	test   eax,eax
c0025f8d:	74 10                	je     c0025f9f <LinkedList<UnixFile>::removeFirst()+0x3d>
c0025f8f:	83 ec 0c             	sub    esp,0xc
c0025f92:	68 77 76 02 c0       	push   0xc0027677
c0025f97:	e8 1c 9d fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025f9c:	83 c4 10             	add    esp,0x10
c0025f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fa5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025fa8:	85 c0                	test   eax,eax
c0025faa:	75 33                	jne    c0025fdf <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025fc8:	83 f8 01             	cmp    eax,0x1
c0025fcb:	74 21                	je     c0025fee <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025fcd:	83 ec 0c             	sub    esp,0xc
c0025fd0:	68 50 76 02 c0       	push   0xc0027650
c0025fd5:	e8 de 9c fe ff       	call   c000fcb8 <KePanic(char const*)>
c0025fda:	83 c4 10             	add    esp,0x10
c0025fdd:	eb 0f                	jmp    c0025fee <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fe5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fec:	89 10                	mov    DWORD PTR [eax],edx
c0025fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025ff5:	8d 50 ff             	lea    edx,[eax-0x1]
c0025ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ffc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025fff:	83 c4 0c             	add    esp,0xc
c0026002:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0026004 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0026004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026008:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002600b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002600c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002600c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026010:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026013:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0026014 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0026014:	90                   	nop
c0026015:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0026018 <ThreadControlBlock::ThreadControlBlock()>:
c0026018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002601c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026027:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002602e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026032:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0026039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002603d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0026044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026048:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c002604f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026053:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0026057:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002605b:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002605f:	90                   	nop
c0026060:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0026064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0026064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026068:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002606e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026072:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026079:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002607d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002608e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026092:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026099:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002609d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00260a4:	90                   	nop
c00260a5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00260a6 <IOAPIC::~IOAPIC()>:
c00260a6:	83 ec 0c             	sub    esp,0xc
c00260a9:	ba 58 90 02 c0       	mov    edx,0xc0029058
c00260ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260b2:	89 10                	mov    DWORD PTR [eax],edx
c00260b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260b8:	83 ec 0c             	sub    esp,0xc
c00260bb:	50                   	push   eax
c00260bc:	e8 95 38 fe ff       	call   c0009956 <Device::~Device()>
c00260c1:	83 c4 10             	add    esp,0x10
c00260c4:	90                   	nop
c00260c5:	83 c4 0c             	add    esp,0xc
c00260c8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00260ca <IOAPIC::~IOAPIC()>:
c00260ca:	83 ec 0c             	sub    esp,0xc
c00260cd:	83 ec 0c             	sub    esp,0xc
c00260d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260d4:	e8 cd ff ff ff       	call   c00260a6 <IOAPIC::~IOAPIC()>
c00260d9:	83 c4 10             	add    esp,0x10
c00260dc:	83 ec 08             	sub    esp,0x8
c00260df:	68 68 01 00 00       	push   0x168
c00260e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260e8:	e8 8f 72 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c00260ed:	83 c4 10             	add    esp,0x10
c00260f0:	83 c4 0c             	add    esp,0xc
c00260f3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00260f4 <CPU::~CPU()>:
c00260f4:	83 ec 0c             	sub    esp,0xc
c00260f7:	ba cc 93 02 c0       	mov    edx,0xc00293cc
c00260fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026100:	89 10                	mov    DWORD PTR [eax],edx
c0026102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026106:	83 ec 0c             	sub    esp,0xc
c0026109:	50                   	push   eax
c002610a:	e8 47 38 fe ff       	call   c0009956 <Device::~Device()>
c002610f:	83 c4 10             	add    esp,0x10
c0026112:	90                   	nop
c0026113:	83 c4 0c             	add    esp,0xc
c0026116:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0026118 <CPU::~CPU()>:
c0026118:	83 ec 0c             	sub    esp,0xc
c002611b:	83 ec 0c             	sub    esp,0xc
c002611e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026122:	e8 cd ff ff ff       	call   c00260f4 <CPU::~CPU()>
c0026127:	83 c4 10             	add    esp,0x10
c002612a:	83 ec 08             	sub    esp,0x8
c002612d:	68 78 11 00 00       	push   0x1178
c0026132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026136:	e8 41 72 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c002613b:	83 c4 10             	add    esp,0x10
c002613e:	83 c4 0c             	add    esp,0xc
c0026141:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0026142 <PCI::~PCI()>:
c0026142:	83 ec 0c             	sub    esp,0xc
c0026145:	ba 30 99 02 c0       	mov    edx,0xc0029930
c002614a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002614e:	89 10                	mov    DWORD PTR [eax],edx
c0026150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026154:	83 ec 0c             	sub    esp,0xc
c0026157:	50                   	push   eax
c0026158:	e8 3f 28 fe ff       	call   c000899c <Bus::~Bus()>
c002615d:	83 c4 10             	add    esp,0x10
c0026160:	90                   	nop
c0026161:	83 c4 0c             	add    esp,0xc
c0026164:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0026166 <PCI::~PCI()>:
c0026166:	83 ec 0c             	sub    esp,0xc
c0026169:	83 ec 0c             	sub    esp,0xc
c002616c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026170:	e8 cd ff ff ff       	call   c0026142 <PCI::~PCI()>
c0026175:	83 c4 10             	add    esp,0x10
c0026178:	83 ec 08             	sub    esp,0x8
c002617b:	68 5c 01 00 00       	push   0x15c
c0026180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026184:	e8 f3 71 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c0026189:	83 c4 10             	add    esp,0x10
c002618c:	83 c4 0c             	add    esp,0xc
c002618f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0026190 <IDE::~IDE()>:
c0026190:	83 ec 0c             	sub    esp,0xc
c0026193:	ba 80 9a 02 c0       	mov    edx,0xc0029a80
c0026198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002619c:	89 10                	mov    DWORD PTR [eax],edx
c002619e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261a2:	83 ec 0c             	sub    esp,0xc
c00261a5:	50                   	push   eax
c00261a6:	e8 39 3c fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c00261ab:	83 c4 10             	add    esp,0x10
c00261ae:	90                   	nop
c00261af:	83 c4 0c             	add    esp,0xc
c00261b2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00261b4 <IDE::~IDE()>:
c00261b4:	83 ec 0c             	sub    esp,0xc
c00261b7:	83 ec 0c             	sub    esp,0xc
c00261ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261be:	e8 cd ff ff ff       	call   c0026190 <IDE::~IDE()>
c00261c3:	83 c4 10             	add    esp,0x10
c00261c6:	83 ec 08             	sub    esp,0x8
c00261c9:	68 70 02 00 00       	push   0x270
c00261ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261d2:	e8 a5 71 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c00261d7:	83 c4 10             	add    esp,0x10
c00261da:	83 c4 0c             	add    esp,0xc
c00261dd:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00261de <SATABus::~SATABus()>:
c00261de:	83 ec 0c             	sub    esp,0xc
c00261e1:	ba d0 9a 02 c0       	mov    edx,0xc0029ad0
c00261e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ea:	89 10                	mov    DWORD PTR [eax],edx
c00261ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261f0:	83 ec 0c             	sub    esp,0xc
c00261f3:	50                   	push   eax
c00261f4:	e8 eb 3b fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c00261f9:	83 c4 10             	add    esp,0x10
c00261fc:	90                   	nop
c00261fd:	83 c4 0c             	add    esp,0xc
c0026200:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0026202 <SATABus::~SATABus()>:
c0026202:	83 ec 0c             	sub    esp,0xc
c0026205:	83 ec 0c             	sub    esp,0xc
c0026208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002620c:	e8 cd ff ff ff       	call   c00261de <SATABus::~SATABus()>
c0026211:	83 c4 10             	add    esp,0x10
c0026214:	83 ec 08             	sub    esp,0x8
c0026217:	68 64 01 00 00       	push   0x164
c002621c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026220:	e8 57 71 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c0026225:	83 c4 10             	add    esp,0x10
c0026228:	83 c4 0c             	add    esp,0xc
c002622b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002622c <ATA::~ATA()>:
c002622c:	83 ec 0c             	sub    esp,0xc
c002622f:	ba b8 9b 02 c0       	mov    edx,0xc0029bb8
c0026234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026238:	89 10                	mov    DWORD PTR [eax],edx
c002623a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002623e:	83 ec 0c             	sub    esp,0xc
c0026241:	50                   	push   eax
c0026242:	e8 7f 3c fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0026247:	83 c4 10             	add    esp,0x10
c002624a:	90                   	nop
c002624b:	83 c4 0c             	add    esp,0xc
c002624e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0026250 <ATA::~ATA()>:
c0026250:	83 ec 0c             	sub    esp,0xc
c0026253:	83 ec 0c             	sub    esp,0xc
c0026256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002625a:	e8 cd ff ff ff       	call   c002622c <ATA::~ATA()>
c002625f:	83 c4 10             	add    esp,0x10
c0026262:	83 ec 08             	sub    esp,0x8
c0026265:	68 8c 01 00 00       	push   0x18c
c002626a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002626e:	e8 09 71 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c0026273:	83 c4 10             	add    esp,0x10
c0026276:	83 c4 0c             	add    esp,0xc
c0026279:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002627a <ATAPI::~ATAPI()>:
c002627a:	83 ec 0c             	sub    esp,0xc
c002627d:	ba 00 9c 02 c0       	mov    edx,0xc0029c00
c0026282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026286:	89 10                	mov    DWORD PTR [eax],edx
c0026288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002628c:	83 ec 0c             	sub    esp,0xc
c002628f:	50                   	push   eax
c0026290:	e8 31 3c fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0026295:	83 c4 10             	add    esp,0x10
c0026298:	90                   	nop
c0026299:	83 c4 0c             	add    esp,0xc
c002629c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002629e <ATAPI::~ATAPI()>:
c002629e:	83 ec 0c             	sub    esp,0xc
c00262a1:	83 ec 0c             	sub    esp,0xc
c00262a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262a8:	e8 cd ff ff ff       	call   c002627a <ATAPI::~ATAPI()>
c00262ad:	83 c4 10             	add    esp,0x10
c00262b0:	83 ec 08             	sub    esp,0x8
c00262b3:	68 84 01 00 00       	push   0x184
c00262b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262bc:	e8 bb 70 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c00262c1:	83 c4 10             	add    esp,0x10
c00262c4:	83 c4 0c             	add    esp,0xc
c00262c7:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00262c8 <SATA::~SATA()>:
c00262c8:	83 ec 0c             	sub    esp,0xc
c00262cb:	ba c0 9c 02 c0       	mov    edx,0xc0029cc0
c00262d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d4:	89 10                	mov    DWORD PTR [eax],edx
c00262d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262da:	83 ec 0c             	sub    esp,0xc
c00262dd:	50                   	push   eax
c00262de:	e8 e3 3b fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c00262e3:	83 c4 10             	add    esp,0x10
c00262e6:	90                   	nop
c00262e7:	83 c4 0c             	add    esp,0xc
c00262ea:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00262ec <SATA::~SATA()>:
c00262ec:	83 ec 0c             	sub    esp,0xc
c00262ef:	83 ec 0c             	sub    esp,0xc
c00262f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262f6:	e8 cd ff ff ff       	call   c00262c8 <SATA::~SATA()>
c00262fb:	83 c4 10             	add    esp,0x10
c00262fe:	83 ec 08             	sub    esp,0x8
c0026301:	68 7c 01 00 00       	push   0x17c
c0026306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002630a:	e8 6d 70 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c002630f:	83 c4 10             	add    esp,0x10
c0026312:	83 c4 0c             	add    esp,0xc
c0026315:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0026316 <SATAPI::~SATAPI()>:
c0026316:	83 ec 0c             	sub    esp,0xc
c0026319:	ba e4 9d 02 c0       	mov    edx,0xc0029de4
c002631e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026322:	89 10                	mov    DWORD PTR [eax],edx
c0026324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026328:	83 ec 0c             	sub    esp,0xc
c002632b:	50                   	push   eax
c002632c:	e8 95 3b fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0026331:	83 c4 10             	add    esp,0x10
c0026334:	90                   	nop
c0026335:	83 c4 0c             	add    esp,0xc
c0026338:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002633a <SATAPI::~SATAPI()>:
c002633a:	83 ec 0c             	sub    esp,0xc
c002633d:	83 ec 0c             	sub    esp,0xc
c0026340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026344:	e8 cd ff ff ff       	call   c0026316 <SATAPI::~SATAPI()>
c0026349:	83 c4 10             	add    esp,0x10
c002634c:	83 ec 08             	sub    esp,0x8
c002634f:	68 84 01 00 00       	push   0x184
c0026354:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026358:	e8 1f 70 fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c002635d:	83 c4 10             	add    esp,0x10
c0026360:	83 c4 0c             	add    esp,0xc
c0026363:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0026364 <APICTimer::~APICTimer()>:
c0026364:	83 ec 0c             	sub    esp,0xc
c0026367:	ba 38 9e 02 c0       	mov    edx,0xc0029e38
c002636c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026370:	89 10                	mov    DWORD PTR [eax],edx
c0026372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026376:	83 ec 0c             	sub    esp,0xc
c0026379:	50                   	push   eax
c002637a:	e8 e1 4c fe ff       	call   c000b060 <Timer::~Timer()>
c002637f:	83 c4 10             	add    esp,0x10
c0026382:	90                   	nop
c0026383:	83 c4 0c             	add    esp,0xc
c0026386:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0026388 <APICTimer::~APICTimer()>:
c0026388:	83 ec 0c             	sub    esp,0xc
c002638b:	83 ec 0c             	sub    esp,0xc
c002638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026392:	e8 cd ff ff ff       	call   c0026364 <APICTimer::~APICTimer()>
c0026397:	83 c4 10             	add    esp,0x10
c002639a:	83 ec 08             	sub    esp,0x8
c002639d:	68 60 01 00 00       	push   0x160
c00263a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263a6:	e8 d1 6f fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c00263ab:	83 c4 10             	add    esp,0x10
c00263ae:	83 c4 0c             	add    esp,0xc
c00263b1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00263b4 <PIT::~PIT()>:
c00263b4:	83 ec 0c             	sub    esp,0xc
c00263b7:	ba 88 9e 02 c0       	mov    edx,0xc0029e88
c00263bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c0:	89 10                	mov    DWORD PTR [eax],edx
c00263c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c6:	83 ec 0c             	sub    esp,0xc
c00263c9:	50                   	push   eax
c00263ca:	e8 91 4c fe ff       	call   c000b060 <Timer::~Timer()>
c00263cf:	83 c4 10             	add    esp,0x10
c00263d2:	90                   	nop
c00263d3:	83 c4 0c             	add    esp,0xc
c00263d6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00263d8 <PIT::~PIT()>:
c00263d8:	83 ec 0c             	sub    esp,0xc
c00263db:	83 ec 0c             	sub    esp,0xc
c00263de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263e2:	e8 cd ff ff ff       	call   c00263b4 <PIT::~PIT()>
c00263e7:	83 c4 10             	add    esp,0x10
c00263ea:	83 ec 08             	sub    esp,0x8
c00263ed:	68 5c 01 00 00       	push   0x15c
c00263f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263f6:	e8 81 6f fe ff       	call   c000d37c <operator delete(void*, unsigned long)>
c00263fb:	83 c4 10             	add    esp,0x10
c00263fe:	83 c4 0c             	add    esp,0xc
c0026401:	c3                   	ret    

Disassembly of section userkernel:

c002c000 <KiDefaultSignalHandlerAbort(int)>:
c002c000:	57                   	push   edi
c002c001:	b9 07 00 00 00       	mov    ecx,0x7
c002c006:	56                   	push   esi
c002c007:	be 0b 81 02 c0       	mov    esi,0xc002810b
c002c00c:	83 ec 24             	sub    esp,0x24
c002c00f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c013:	fc                   	cld    
c002c014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002c016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002c01a:	50                   	push   eax
c002c01b:	6a 00                	push   0x0
c002c01d:	6a 38                	push   0x38
c002c01f:	6a 01                	push   0x1
c002c021:	e8 2c 00 00 00       	call   c002c052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002c026:	83 c4 34             	add    esp,0x34
c002c029:	5e                   	pop    esi
c002c02a:	5f                   	pop    edi
c002c02b:	c3                   	ret    

c002c02c <KiDefaultSignalHandlerTerminate(int)>:
c002c02c:	57                   	push   edi
c002c02d:	b9 08 00 00 00       	mov    ecx,0x8
c002c032:	56                   	push   esi
c002c033:	be 27 81 02 c0       	mov    esi,0xc0028127
c002c038:	83 ec 24             	sub    esp,0x24
c002c03b:	89 e7                	mov    edi,esp
c002c03d:	fc                   	cld    
c002c03e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002c040:	54                   	push   esp
c002c041:	6a 00                	push   0x0
c002c043:	6a 37                	push   0x37
c002c045:	6a 01                	push   0x1
c002c047:	e8 06 00 00 00       	call   c002c052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002c04c:	83 c4 34             	add    esp,0x34
c002c04f:	5e                   	pop    esi
c002c050:	5f                   	pop    edi
c002c051:	c3                   	ret    

c002c052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c002c052:	53                   	push   ebx
c002c053:	83 ec 10             	sub    esp,0x10
c002c056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c05a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002c05e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002c062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c066:	cd 60                	int    0x60
c002c068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002c06c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002c074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002c078:	83 c4 10             	add    esp,0x10
c002c07b:	5b                   	pop    ebx
c002c07c:	c3                   	ret    

Disassembly of section align_previous:

c002d000 <DO_NOT_DELETE()>:
c002d000:	c3                   	ret    
